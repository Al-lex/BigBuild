/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*%%%%%%%%%%%%%%%%%%%%%%%% Дата формирования: 19.02.2015 19:50 %%%%%%%%%%%%%%%%%%%%%%%%*/
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
SET NOEXEC OFF -- режим компиляция+выполнение скрипта
SET NOCOUNT ON
--*--создаем таблицу логов, если ее нет в БД --*--
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ScriptsSetupLogs]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[ScriptsSetupLogs](
	[RC_ID] [int] IDENTITY(1,1) NOT NULL,
	[RC_Date] [datetime] NOT NULL DEFAULT (getdate()),
	[RC_Creator] [nvarchar](25) NOT NULL,
	[RC_Text] [nvarchar](254) NOT NULL,
	[RC_Status] [nvarchar](50) NOT NULL,
	[RC_Computer] [nvarchar](50) NOT NULL,
	[RC_LOG] [ntext] NULL,
	CONSTRAINT [PK_ScriptsSetupLogs] PRIMARY KEY CLUSTERED 
(
	[RC_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GRANT SELECT, INSERT, UPDATE ON [dbo].[ScriptsSetupLogs] TO PUBLIC
END


--*--
-- =====================  скрипт для проверки совместимости БД ===================== --
BEGIN TRY
	DECLARE @Message varchar (500)
	DECLARE @CurrentVer nvarchar(128)
	DECLARE @SUSER_NAME nvarchar(128) = (SELECT SUSER_NAME())
	DECLARE @HOST_NAME nvarchar(128) = (SELECT HOST_NAME())	

	--*--непосредственно обработка и сравнение --*--
	SET @CurrentVer = (SELECT compatibility_level FROM sys.databases WHERE name = (SELECT DB_NAME()))
	IF (@CurrentVer < 100)
		BEGIN
			SET @Message = 'Режим совместимости базы данных - ' + (SELECT DB_NAME()) + ' указан (' + @CurrentVer + '), для корректного обновления и работы ПК "Мастер-Тур" нужен режим совместимости 2008 (100) и выше.'
			RAISERROR(@Message, 16, 1)
		END
END TRY
BEGIN CATCH
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer, RC_LOG) VALUES(@SUSER_NAME, 'Ошибка при выполнении скрипта по БД Мастер-Тура.', 'ERR', @HOST_NAME, @Message)
	RAISERROR(@Message, 16, 1) WITH NOWAIT
	SET NOEXEC ON;
END CATCH

-- =====================  скрипт для проверки версии SQL-сервера. Маска версии: [мажорная версия](2 символа).[минорная версия](2 символа).[релизная версия](4 символа) ===================== 
BEGIN TRY
	DECLARE @CurrentSQLVersion nvarchar(128)
	DECLARE @MinimalSQLVersion nvarchar(128)
	DECLARE @curver varchar(20) = null
    DECLARE @minver varchar(20) = null
	--*--непосредственно обработка и сравнение версий SQL --*--
	SET @CurrentSQLVersion = CAST(serverproperty('ProductVersion') AS nvarchar)
	SET @MinimalSQLVersion = '10.50.1600.0'
	
	---------------------------------------
	IF(@CurrentSQLVersion != @MinimalSQLVersion)
	BEGIN
		WHILE LEN(@CurrentSQLVersion) > 0
		BEGIN               
			WHILE LEN(@MinimalSQLVersion) > 0
			BEGIN
				IF PATINDEX('%.%',@CurrentSQLVersion) > 0
				BEGIN
					SET @curver = SUBSTRING(@CurrentSQLVersion, 0, PATINDEX('%.%',@CurrentSQLVersion))
					SET @CurrentSQLVersion = SUBSTRING(@CurrentSQLVersion, LEN(@curver + '.') + 1, LEN(@CurrentSQLVersion))
					SET @minver = SUBSTRING(@MinimalSQLVersion, 0, PATINDEX('%.%',@MinimalSQLVersion))
					SET @MinimalSQLVersion = SUBSTRING(@MinimalSQLVersion, LEN(@minver + '.') + 1, LEN(@MinimalSQLVersion))
					--------в мажорных, минорных и релиз версиях смотрим любое отклонение от 0---------- 
					IF(convert(int, @curver) - convert(int, @minver)) < 0
					BEGIN
							-- обнуляем и выходим из цикла, т.к. уже ошибка
							SET @Message = 'Используемая версия MS SQL Server — ' + CAST(serverproperty('ProductVersion') AS nvarchar)
							+ ', для корректного обновления и работы ПК "Мастер-Тур" нужна версия не ниже MS SQL Server 2008 R2 (10.50.1600.0).'
							RAISERROR(@Message, 16, 1)
					END   
					ELSE IF(convert(int, @curver) - convert(int, @minver)) > 0
					BEGIN
							SET @CurrentSQLVersion = NULL
							SET @MinimalSQLVersion = NULL
					END
				END
				ELSE IF (PATINDEX('%.%',@CurrentSQLVersion) < PATINDEX('%.%',@MinimalSQLVersion))
				BEGIN
					SET @curver = @CurrentSQLVersion
					SET @minver = SUBSTRING(@MinimalSQLVersion, 0, PATINDEX('%.%',@MinimalSQLVersion))
					IF(convert(int, @curver) - convert(int, @minver)) < 0
					BEGIN
						-- обнуляем и выходим из цикла, т.к. уже ошибка
						SET @Message = 'Используемая версия MS SQL Server — ' + CAST(serverproperty('ProductVersion') AS nvarchar)
							+ ', для корректного обновления и работы ПК "Мастер-Тур" нужна версия не ниже MS SQL Server 2008 R2 (10.50.1600.0).'
						RAISERROR(@Message, 16, 1)
					END
	                                            
					-- обнуляем
					SET @CurrentSQLVersion = NULL
					SET @MinimalSQLVersion = NULL     
				END
				ELSE
				BEGIN
					-- обнуляем, т.к. на этом шаге уже идет проверка SP, а нам достаточно до релиза
					SET @CurrentSQLVersion = NULL
					SET @MinimalSQLVersion = NULL    
				END
			END
		END
    END
 ---------------------------------------------------
END TRY
BEGIN CATCH
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer, RC_LOG) VALUES(@SUSER_NAME, 'Ошибка при выполнении скрипта по БД Мастер-Тура из-за некорректной версии SQL Server.', 'ERR', @HOST_NAME, @Message)
	RAISERROR(@Message, 16, 1) WITH NOWAIT
	SET NOEXEC ON;
END CATCH

-- =====================  скрипт для проверки релиза МТ ===================== 
BEGIN TRY
	DECLARE @PrevVersion nvarchar(128) = '9.2.20.21'
	DECLARE @CurrentVersion nvarchar(128) = (SELECT TOP 1 ST_VERSION FROM SETTING)
	DECLARE @NewVersionFull nvarchar(128) = '9.2.21.1'
	DECLARE @PrevReleaseLastSPVersion nvarchar(128) = '9.2.20.21'
	
	declare @query nvarchar (max)
	set @query = N'
		declare @index int
		declare @type int
		declare @dotcount int

		set @index = 1
		set @type = 1
		set @dotcount = 0

		set @version = ''''
		set @release = ''''
		set @sp = ''''

		while @index <= len (@val)
		begin
			if (substring(@val, @index, 1) = ''.'')
			begin			
				if (@dotcount = 0 and @type = 1 and @val like ''9%'')
				begin
					set @dotcount = @dotcount + 1
				end	
				else
				begin
					set @type = @type + 1
					set @index = @index + 1
					continue
				end
			end

			if @type = 1
				set @version = @version + substring(@val, @index, 1)
			if @type = 2
				set @release = @release + substring(@val, @index, 1)
			if @type = 3
				set @sp = @sp + substring(@val, @index, 1)

			set @index = @index + 1
		end
	'

	declare @newVersion nvarchar(10)
	declare @newRelease nvarchar(2)
	declare @newSP nvarchar(2)

	declare @currVersion nvarchar(10)
	declare @currRelease nvarchar(2)
	declare @currSP nvarchar(2)
		
	declare @lastVersion nvarchar(10)
	declare @lastRelease nvarchar(2)
	declare @lastSP nvarchar(2)

	EXECUTE sp_executesql @query, N'@val nvarchar(50), @version nvarchar(10) output, @release nvarchar(2) output, @sp nvarchar(2) output', @val = @CurrentVersion, @version = @currVersion  output,  @release = @currRelease output, @sp = @currSP output	
	EXECUTE sp_executesql @query, N'@val nvarchar(50), @version nvarchar(10) output, @release nvarchar(2) output, @sp nvarchar(2) output', @val = @NewVersionFull, @version = @newVersion  output,  @release = @newRelease output, @sp = @newSP output
	EXECUTE sp_executesql @query, N'@val nvarchar(50), @version nvarchar(10) output, @release nvarchar(2) output, @sp nvarchar(2) output', @val = @PrevReleaseLastSPVersion, @version = @lastVersion  output,  @release = @lastRelease output, @sp = @lastSP output

	
	IF(@PrevVersion != @CurrentVersion And @CurrentVersion != @NewVersionFull)
		BEGIN
		
			IF NOT (@newSP = '1' and (convert(int, @newRelease) = convert(int, @currRelease) + 1) and @currRelease = @lastRelease and convert(int, @currSP) > convert(int, @lastSP))
			BEGIN
				SET @Message = 'Вы запустили некорректный скрипт (обновление с ' + @PrevVersion + ' до ' + @NewVersionFull + '). Версия Вашей базы — ' + @CurrentVersion
				RAISERROR(@Message, 16, 1)
			END
		END
END TRY
BEGIN CATCH
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer, RC_LOG) VALUES(@SUSER_NAME, 'Ошибка при обновлении релиза БД Мастер-Тура.', 'ERR', @HOST_NAME, @Message)
	RAISERROR(@Message, 16, 1) WITH NOWAIT
	SET NOEXEC ON;
END CATCH
GO

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.10.16)_Alter_Table_ScriptsSetupLogs.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.10.16)_Alter_Table_ScriptsSetupLogs.sql */
/*********************************************************************/
IF EXISTS(   
	SELECT  TOP 1 1
    FROM    sys.columns c
            INNER JOIN sys.types t
                ON t.system_type_id = c.system_type_id
                AND t.user_type_id = c.user_type_id
    WHERE   c.name = 'RC_Status'
    AND     c.[object_id] = OBJECT_ID(N'dbo.ScriptsSetupLogs', 'U')
    AND     t.name = 'nvarchar'
    AND     c.max_length < 50
    AND     c.is_computed = 0
)
BEGIN
    ALTER TABLE [dbo].[ScriptsSetupLogs]
    ALTER COLUMN [RC_Status] NVARCHAR(50) NOT NULL
END
GO
/*********************************************************************/
/* end (2014.10.16)_Alter_Table_ScriptsSetupLogs.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.10.16)_Alter_Table_ScriptsSetupLogs.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_RefreshViewForAll.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_RefreshViewForAll.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp_RefreshViewForAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp_RefreshViewForAll]
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RefreshViewForAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[RefreshViewForAll]
GO

CREATE PROCEDURE [dbo].[RefreshViewForAll]
@ViewName varchar(50)
AS
BEGIN
	DECLARE @UserName		varchar(128)
	DECLARE @UserID		smallint
	DECLARE @ViewFullName	varchar(128)

	DECLARE curSelectUser CURSOR FOR SELECT UID, Name FROM SYSUsers ORDER BY UID
	OPEN curSelectUser

	FETCH NEXT FROM curSelectUser INTO @UserID, @UserName

	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- 01.06.2012 kolbeshkin ищем все вьюхи не в SYSObjects (там не на всех юзеров), а в sysviews
		-- IF EXISTS (SELECT * FROM SYSObjects WHERE Name = @ViewName AND UID=@UserID AND XType='V')
		IF EXISTS (select 1 from sysviews where name like @ViewName and creator like @UserName)
		BEGIN
			SET @ViewFullName = @UserName + '.' + @ViewName
			if OBJECT_ID(@ViewFullName) is not null
				EXEC sp_refreshview @ViewFullName
		END

		FETCH NEXT FROM curSelectUser INTO @UserID, @UserName
	END

	CLOSE curSelectUser
	DEALLOCATE curSelectUser
END
GO

GRANT EXEC ON [dbo].[RefreshViewForAll] TO PUBLIC
GO
/*********************************************************************/
/* end sp_RefreshViewForAll.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_RefreshViewForAll.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-23)_Create_Table_TpPricesUpdatedSubscriptions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-09-23)_Create_Table_TpPricesUpdatedSubscriptions.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TpPricesUpdatedSubscriptions]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[TpPricesUpdatedSubscriptions]
	(
		[TU_Key] [BIGINT] NOT NULL  identity(-9223372036854775808,1),
		[TU_TUKey] [INT] NOT NULL,
		[TU_SubscriptionName] [NVARCHAR](MAX) NOT NULL,
		[TU_IsProcessed] [BIT] default(0)
	)
	GRANT SELECT, UPDATE, INSERT, DELETE ON [dbo].[TpPricesUpdatedSubscriptions] TO PUBLIC
END
GO
if not exists (select 1 from dbo.syscolumns where name = 'TU_IsProcessed' and id = object_id(N'[dbo].[TpPricesUpdatedSubscriptions]'))
	ALTER TABLE [dbo].[TpPricesUpdatedSubscriptions] add TU_IsProcessed bit not null default 0
GO
/*********************************************************************/
/* end (2014-09-23)_Create_Table_TpPricesUpdatedSubscriptions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-23)_Create_Table_TpPricesUpdatedSubscriptions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-04-23)_AlterTable_CacheQuotas.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-04-23)_AlterTable_CacheQuotas.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'cq_nmen' and id = object_id(N'[dbo].[CacheQuotas]'))
	ALTER TABLE [dbo].[CacheQuotas] Add cq_nmen int
GO
/*********************************************************************/
/* end (2014-04-23)_AlterTable_CacheQuotas.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-04-23)_AlterTable_CacheQuotas.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2012.10.29)_Create_Type_ListNvarcharValue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2012.10.29)_Create_Type_ListNvarcharValue.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ListNvarcharValue' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ListNvarcharValue] AS TABLE(
		-- список строк
		[value] nvarchar(128) NULL
	)
end
GO
GRANT EXECUTE ON TYPE::dbo.[ListNvarcharValue] TO public
go

/*********************************************************************/
/* end (2012.10.29)_Create_Type_ListNvarcharValue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2012.10.29)_Create_Type_ListNvarcharValue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.02.04)_Create_Type_ListBigIntValue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.02.04)_Create_Type_ListBigIntValue.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ListBigIntValue' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ListBigIntValue] AS TABLE(
		-- список чисел
		[value] [bigint] NULL
	)
end
GO
GRANT EXECUTE ON TYPE::[dbo].[ListBigIntValue] to public 
GO

/*********************************************************************/
/* end (2014.02.04)_Create_Type_ListBigIntValue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.02.04)_Create_Type_ListBigIntValue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNKeys.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetNKeys.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetNKeys]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetNKeys]
GO

create PROCEDURE [dbo].[GetNKeys]
(
	@sTable varchar(50) = null,
	@nKeyCount int,
	@nNewKey int = null output
)
AS
--<VERSION>9.2.20.9</VERSION>
--<DATE>2014-02-27</DATE>
--<SUMMARY>Возвращает опред. количество ключей для таблицы</SUMMARY>
declare @nID int
declare @keyTable varchar(100)
declare @query nvarchar (600)

set nocount on

if @nKeyCount is null
	set @nKeyCount = 0
	
if @sTable like 'TP_TOURDATES'
	set @sTable = 'TP_TURDATES'

set nocount on

if (@sTable like 'key_%')
begin
	set @keyTable = @sTable
end
else begin
	select @keyTable = 
		case 
			when @sTable like 'TP_TURDATES' then 'Key_TPTurDates'
			when @sTable like 'TP_Lists' then 'Key_TPLists'
			when @sTable like 'TP_Services' then 'Key_TPServices'
			when @sTable like 'TP_Tours' then 'Key_TPTours'
			when @sTable like 'TP_ServiceLists' then 'Key_TPServiceLists'
			when @sTable like 'Accmdmentype' then 'Key_Accmdmentype'
			when @sTable like 'AddDescript1' then 'Key_AddDescript1'
			when @sTable like 'AddDescript2' then 'Key_AddDescript2'
			when @sTable like 'Advertise' then 'Key_Advertise'
			when @sTable like 'Aircraft' then 'Key_Aircraft'
			when @sTable like 'AirService' then 'Key_AirService'
			when @sTable like 'AllHotelOption' then 'Key_AllHotelOption'
			when @sTable like 'AnkFields' then 'Key_AnkFields'
			when @sTable like 'AnnulReasons' then 'Key_AnnulReasons'
			when @sTable like 'Bills' then 'Key_Bills'
			when @sTable like 'Cabine' then 'Key_Cabine'
			when @sTable like 'CauseDiscounts' then 'Key_CauseDiscounts'
			when @sTable like 'Charter' then 'Key_Charter'
			when @sTable like 'CityDictionary' then 'Key_CityDictionary'
			when @sTable like 'Clients' then 'Key_Clients'
			when @sTable like 'Discount' then 'Key_Discount'
			when @sTable like 'DOCUMENTSTATUS' then 'KEY_DOCUMENTSTATUS'
			when @sTable like 'Dogovor' then 'Key_Dogovor'
			when @sTable like 'DogovorList' then 'Key_DogovorList'
			when @sTable like 'EventList' then 'Key_EventList'
			when @sTable like 'Events' then 'Key_Events'
			when @sTable like 'ExcurDictionar' then 'Key_ExcurDictionar'
			when @sTable like 'Factura' then 'Key_Factura'
			when @sTable like 'HotelDictionar' then 'Key_HotelDictionar'
			when @sTable like 'HotelRooms' then 'Key_HotelRooms'
			when @sTable like 'KindOfPay' then 'Key_KindOfPay'
			when @sTable like 'Locks' then 'Key_Locks'
			when @sTable like 'Order_Status' then 'Key_Order_Status'
			when @sTable like 'Orders' then 'Key_Orders'
			when @sTable like 'Pansion' then 'Key_Pansion'
			when @sTable like 'Partners' then 'Key_Partners'
			when @sTable like 'PartnerStatus' then 'Key_PartnerStatus'
			when @sTable like 'PaymentType' then 'Key_PaymentType'
			when @sTable like 'PriceList' then 'Key_PriceList'
			when @sTable like 'PriceServiceLink' then 'Key_PriceServiceLink'
			when @sTable like 'Profession' then 'Key_Profession'
			when @sTable like 'PrtDeps' then 'Key_PrtDeps'
			when @sTable like 'PrtDogs' then 'Key_PrtDogs'
			when @sTable like 'PrtGroups' then 'Key_PrtGroups'
			when @sTable like 'PrtWarns' then 'Key_PrtWarns'
			when @sTable like 'Rep_Options' then 'Key_Rep_Options'
			when @sTable like 'Rep_Profiles' then 'Key_Rep_Profiles'
			when @sTable like 'Resorts' then 'Key_Resorts'
			when @sTable like 'Rooms' then 'Key_Rooms'
			when @sTable like 'RoomsCategory' then 'Key_RoomsCategory'
			when @sTable like 'RoomType' then 'Key_RoomType'
			when @sTable like 'Service' then 'Key_Service'
			when @sTable like 'ServiceList' then 'Key_ServiceList'
			when @sTable like 'Ship' then 'Key_Ship'
			when @sTable like 'TOURSERVLIST' then 'KEY_TOURSERVLIST'
			when @sTable like 'Transfer' then 'Key_Transfer'
			when @sTable like 'Transport' then 'Key_Transport'
			when @sTable like 'Turist' then 'Key_Turist'
			when @sTable like 'Turlist' then 'Key_Turlist'
			when @sTable like 'TURMARGIN' then 'Key_TURMARGIN'
			when @sTable like 'TurService' then 'Key_TurService'
			when @sTable like 'TypeAdvertise' then 'Key_TypeAdvertise'
			when @sTable like 'UserList' then 'Key_UserList'
			when @sTable like 'Vehicle' then 'Key_Vehicle'
			when @sTable like 'WarningList' then 'Key_WarningList'
		end
end

if @keyTable is not null
begin
	set @query = N'
	declare @maxKeyFromTable int
	set @maxKeyFromTable = isnull((Select id from @keyTable with (xlock, rowlock, holdlock)), 1)
	Set @nNewKeyOut = @maxKeyFromTable + @nKeyCount

	update @keyTable with (xlock, rowlock) set Id = @nNewKeyOut
	'
	set @query = REPLACE(@query, '@keyTable', @keyTable)
	begin tran
		EXECUTE sp_executesql @query, N'@nNewKeyOut int output, @nKeyCount int', @nNewKeyOut = @nNewKey  output,  @nKeyCount = @nKeyCount
	commit tran
end
else
begin	
	begin tran
		if exists (select top 1 1 from Keys where Key_Table = @sTable)
		begin
			Select @nNewKey = id + @nKeyCount from Keys WITH (xlock, rowlock, holdlock) where Key_Table = @sTable
			update Keys with (xlock, rowlock) set Id = @nNewKey where Key_Table = @sTable
		end
		else
		begin
			insert into Keys (Key_Table, Id) values (@sTable, @nKeyCount)
			set @nNewKey=@nKeyCount
		end
	commit tran
end

return 0
GO
grant exec on [dbo].[GetNKeys] to public
GO
/*********************************************************************/
/* end sp_GetNKeys.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNKeys.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNBigintKeys.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetNBigintKeys.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetNBigintKeys]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetNBigintKeys]
GO

create PROCEDURE [dbo].[GetNBigintKeys]
(
	@sTable varchar(50) = null,
	@nKeyCount int,
	@nNewKey bigint = null output
)
AS
--<VERSION>9.2.20.1</VERSION>
--<DATE>2014-05-19</DATE>
--<SUMMARY>Возвращает опред. количество ключей для таблицы</SUMMARY>
declare @keyTable varchar(100)
declare @query nvarchar (600)

set nocount on

if @nKeyCount is null
	set @nKeyCount = 0

set nocount on

if (@sTable like 'key_%')
begin
	set @keyTable = @sTable
end
else begin
	select @keyTable = 
		case 
			when @sTable like 'TP_Prices' then 'Key_TPPrices'
		end
end

if @keyTable is not null
begin
	set @query = N'
	declare @maxKeyFromTable bigint
	set @maxKeyFromTable = isnull((Select id from @keyTable with (xlock, rowlock, holdlock)), 1)
	Set @nNewKeyOut = @maxKeyFromTable + @nKeyCount

	update @keyTable with (xlock, rowlock) set Id = @nNewKeyOut
	'
	set @query = REPLACE(@query, '@keyTable', @keyTable)
	begin tran
		EXECUTE sp_executesql @query, N'@nNewKeyOut bigint output, @nKeyCount int', @nNewKeyOut = @nNewKey  output,  @nKeyCount = @nKeyCount
	commit tran
end
else
begin	
	begin tran
		if exists (select top 1 1 from Keys where Key_Table = @sTable)
		begin
			Select @nNewKey = id + @nKeyCount from Keys WITH (xlock, rowlock) where Key_Table = @sTable
			update Keys set Id = @nNewKey where Key_Table = @sTable
		end
		else
		begin
			insert into Keys (Key_Table, Id) values (@sTable, @nKeyCount)
			set @nNewKey=@nKeyCount
		end
	commit tran
end

return 0
GO
grant exec on [dbo].[GetNBigintKeys] to public
GO
/*********************************************************************/
/* end sp_GetNBigintKeys.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNBigintKeys.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DropSubscriptions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin DropSubscriptions.sql */
/*********************************************************************/
-- если есть репликация и подписка(и), выдадим сообщение о необходимости пересоздания подписки и удалим существующие подписки
if dbo.mwReplIsPublisher() > 0 
begin
	if exists (select top 1 1 from sys.databases where name = 'distribution')
	begin
		if exists (select * from distribution.dbo.mspublications
								where publication = 'MW_PUB'
									and publisher_db = db_name())
		begin

				-- drop all subscriptions
				declare @PublisherDBName sysname, @PublisherName sysname, @SubscriberName sysname, @SubscriptionDBName sysname

				create table #t
				(
					[PublisherDBName] sysname,
					PublisherName sysname,
					[SubscriberName] sysname,
					[SubscriptionDBName] sysname
				)

				insert into #t
				exec mwGetSubscriptions

				if exists (select top 1 1 from #t)
				begin
					declare subCursor cursor for
					select * from #t

					open subCursor
					fetch next from subCursor into @PublisherDBName, @PublisherName, @SubscriberName, @SubscriptionDBName
					while @@fetch_status = 0
					begin
						begin try
							print 'удаление подписки (publisher side) ' + @SubscriberName
							exec sp_dropsubscription @publication=N'MW_PUB', @subscriber = @SubscriberName, @article = N'all', @destination_db = @SubscriptionDBName
							print 'готово'

							print 'удаление подписки (subscriber side) ' + @SubscriberName
							declare @dropSql nvarchar(max)
							set @dropSql = 'exec (''exec [@SubscriptionDBName].dbo.sp_droppullsubscription @publisher = ''''@@servername'''', @publisher_db = ''''@PublisherDBName'''', @publication = ''''@pubName'''''')'
							if @SubscriberName <> @@servername
								set @dropSql = @dropSql + ' at [@ls]'

							set @dropSql = replace(@dropSql, '@ls', @SubscriberName)
							set @dropSql = replace(@dropSql, '@@servername', @@servername)
							set @dropSql = replace(@dropSql, '@PublisherDBName', @PublisherDBName)
							set @dropSql = replace(@dropSql, '@SubscriptionDBName', @SubscriptionDBName)
							set @dropSql = replace(@dropSql, '@pubName', 'MW_PUB')
							exec (@dropSql)
							print 'готово'
						end try
						begin catch
							print error_message()
							RAISERROR('Внимание! Не удалось удалить подписку. Для корректной работы пересоздайте её вручную или обратитесь в службу поддержки (см. след. сообщение)', 1, 1)
						end catch

						fetch next from subCursor into @PublisherDBName, @PublisherName, @SubscriberName, @SubscriptionDBName
					end

					close subCursor
					deallocate subCursor

					RAISERROR('
	Внимание! Для корректной работы приложения Вам необходимо пересоздать подписку(и) после обновления всех поисковых баз данных.
	Вы можете сделать это либо самостоятельно, как описано здесь: http://wiki.megatec.ru/Мастер-Тур:Настройка_репликации#.D0.9F.D0.B5.D1.80.D0.B5.D1.81.D0.BE.D0.B7.D0.B4.D0.B0.D0.BD.D0.B8.D0.B5_.D0.BF.D0.BE.D0.B4.D0.BF.D0.B8.D1.81.D0.BA.D0.B8, 
	либо обратиться в службу поддержки по телефону +7 (495) 228-3284 или по e-mail: service@megatec.ru.', 16, 1)
				end

				drop table #t
			end

	end
end

go
/*********************************************************************/
/* end DropSubscriptions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DropSubscriptions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Drop_TPServicesDelete_Log.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin Drop_TPServicesDelete_Log.sql */
/*********************************************************************/
if exists (select top 1 1 from sys.triggers tr
left join sys.tables tab on tab.object_id = tr.parent_id
where tr.name = 'TPServicesDelete_Log'
	and tab.name = 'TP_Services')
begin

	DROP TRIGGER [dbo].[TPServicesDelete_Log]

end

GO
/*********************************************************************/
/* end Drop_TPServicesDelete_Log.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Drop_TPServicesDelete_Log.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'IncludeCountrySettingsInReplication.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin IncludeCountrySettingsInReplication.sql */
/*********************************************************************/
if dbo.mwReplIsPublisher() > 0 
begin
	if not exists (select top 1 1 from distribution.dbo.msArticles with (nolock) where article = 'CountrySettings')
	begin
		-- include CountrySettings in replication articles
		exec sp_addarticle @publication = N'MW_PUB', @article = N'CountrySettings', @source_owner = N'dbo', @source_object = N'CountrySettings', 
				@type = N'logbased', @description = N'', @creation_script = N'', @pre_creation_cmd = N'drop', @schema_option = 0x00, @identityrangemanagementoption = N'none', 
				@destination_table = N'CountrySettings', @destination_owner = N'dbo', @status = 8, @vertical_partition = N'false', @ins_cmd = N'SQL', @del_cmd = N'SQL', @upd_cmd = N'SQL'
	end
end

GO
/*********************************************************************/
/* end IncludeCountrySettingsInReplication.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'IncludeCountrySettingsInReplication.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddArticleFilters.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin AddArticleFilters.sql */
/*********************************************************************/
if dbo.mwreplispublisher() > 0
begin

	-- добавляет фильтры актуальности для статей репликации
	exec sp_articlefilter @publication = N'MW_PUB', @article = N'QuotaParts', @filter_name = N'FLTR_QuotaParts_1__66', @filter_clause = N'QP_Date > dateadd(day, -1, getdate())'
	exec sp_articlefilter @publication = N'MW_PUB', @article = N'StopSales', @filter_name = N'FLTR_StopSales_1__66', @filter_clause = N'SS_Date > dateadd(day, -1, getdate())'
	exec sp_articlefilter @publication = N'MW_PUB', @article = N'QuotaDetails', @filter_name = N'FLTR_QuotaDetails_1__66', @filter_clause = N'QD_Date > dateadd(day, -1, getdate())'

end

go
/*********************************************************************/
/* end AddArticleFilters.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddArticleFilters.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetQuotaLoadListData_N.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetQuotaLoadListData_N.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetQuotaLoadListData_N]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetQuotaLoadListData_N]
GO

CREATE procedure [dbo].[GetQuotaLoadListData_N]
(
--<VERSION>2009.21.15</VERSION>
--<DATE>2014-07-01</DATE>
@QT_ID int=null,
@Service_SVKey int=null,
@Service_Code int=null,
@DateStart smalldatetime = null,
@DaysCount int=null,			 -- для режима 10-для наличия мест - в этом поле передается продолжительность услуги

@nShowQuotaTypes smallint =null,  -- показывать квоты типа (0 - все, 1 - allotment, 2 - commitment)
@bShowCommonInfo bit =null,  -- показывать (1-общую информацию по квоте, 0-информацию по распределению квоты)
@bShowAgencyInfo bit =null,   -- показывать информацию об агентских квотах
@AgentKey int =null,
@bFreeSale bit =null,
@DLKey int =null,
@ResultType smallint=null,		--варианты отображения (0,null-общее, 10-для наличия мест(из оформления))
@TourDurations  smallint=null,
@DateStart2 smalldatetime = null,
@DateStart3 smalldatetime = null,
@bShowByCheckIn bit =null,
@bCommonRelease bit =null,
@bShowCommonRequest bit = null,   --отображение услуг по запросу одной строкой
@nGridFilter int = 0              -- фильтр в зависимости от экрана / 3-английский вариант экранов
)
as 

set transaction isolation level read uncommitted

DECLARE @DateEnd smalldatetime, @Service_PRKey int, @QT_IDLocal int, @Result_From smallint, @Result_To smallint, @ServiceLong smallint, @DurationLocal smallint, @ByRoom int
--@Result
--11 - общее кол-во мест (строка 8000)
--12 - кол-во свободных мест (строка 8000)
--13 - кол-во занятых мест (строка 8000)
--21 - кол-во свободных мест (smallint)
--22 - % Stop-Sale (smallint)
--23 - возможен ли заезд (smallint)
if @ResultType is null or @ResultType not in (10)
	Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)
Else --для наличия мест(из оформления)
BEGIN
	Set @ServiceLong=@DaysCount
	Set @DateEnd = DATEADD(DAY,ISNULL(@DaysCount,1)-1,@DateStart3)
	Set @DaysCount=DATEDIFF(DAY,@DateStart,@DateEnd)+1

	if exists (select 1 from dbo.Service(nolock) where SV_Key=@Service_SVKey and SV_IsDuration=1)
		set @DurationLocal=@ServiceLong
	Else
		set @DurationLocal=@TourDurations
END

CREATE TABLE #StopSaleTemp
(
	SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
)

CREATE CLUSTERED INDEX idx_StopSaleTemp
ON #StopSaleTemp(SST_QDID ASC)

INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails	@DLKey, null, @DateStart, @DaysCount, null, null, @Service_SVKey, @Service_Code, null, null, 1

--SELECT * FROM #StopSaleTemp

CREATE TABLE #QuotaLoadList(QL_ID int identity(1,1),
QL_QTID int, QL_QOID int, QL_PRKey int, QL_SubCode1 int, QL_SubCode2 int, QL_PartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QL_Description nvarchar(255) collate Cyrillic_General_CI_AS, 
QL_dataType smallint, QL_Type smallint, QL_TypeQuota smallint, QL_Release nvarchar(max), QL_Durations nvarchar(20) collate Cyrillic_General_CI_AS, QL_FilialKey int, 
QL_CityDepartments int, QL_AgentKey int, QL_CustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QL_DateCheckinMin smalldatetime,
QL_ByRoom int)

DECLARE @n int, @str varchar(8000)
if (@ResultType is null) or (@ResultType <> 10)
BEGIN
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'--' smallint'
		exec (@str)
		set @n = @n + 1
	END
END

Declare @userKey int
Declare @actionsKeys table(actionKey int)
Declare @ShowAllDurations bit

Set @userKey=dbo.GetUserId()

insert into @actionsKeys exec GetEndbledActions @userKey

-- Проверяем, имеет ли текущий пользователь права на просмотр квот со всеми продолжительностями

If exists(select top 1 1 from @actionsKeys where actionKey=148)
	Set @ShowAllDurations = 1
Else
	Set @ShowAllDurations = 0

if @bShowCommonInfo = 1
BEGIN
	insert into #QuotaLoadList 
	(QL_QTID, QL_Type, QL_Release, QL_dataType, QL_DateCheckinMin, QL_PRKey, QL_ByRoom, QL_TypeQuota)
	select	DISTINCT QT_ID, QD_Type, case when QD_Release = 0 then null else QD_Release end, NU_ID, @DateEnd+1,QT_PRKey, QT_ByRoom, QT_IsByCheckIn
	from	Quotas, QuotaObjects, QuotaDetails, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and ISNULL(QD_IsDeleted,0)=0
			and QD_Date between @DateStart and @DateEnd
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0)
			and NU_ID between 1 and 3
END
else
BEGIN
DECLARE @Service_SubCode1 int
	, @Object_SubCode1 int
	, @Object_SubCode2 int
	, @Service_SubCode2 int
	, @Service_NDays int
	, @Service_Day int
	, @Dogovor_NDay int
	, @Service_Duration int
	, @Dogovor_Key int
	SET @Object_SubCode1=0
	SET @Object_SubCode2=0
	
	IF @DLKey is not null				-- если мы запустили процедуру из конкрентной услуги
	BEGIN
		SELECT	@Service_SVKey=DL_SVKey, @Service_Code=DL_Code, @Service_SubCode1=DL_SubCode1
			  , @AgentKey=ISNULL(DL_Agent,0), @Service_PRKey=DL_PartnerKey, @Service_SubCode2 = DL_SubCode2
			  , @Service_NDays = DL_NDAYS
			  , @Service_Day = DL_DAY
			  , @Dogovor_Key = DL_DGKEY
		FROM	DogovorList (nolock)
		WHERE	DL_Key=@DLKey
		
		IF (@Service_NDays is null or @Service_NDays=0)
			SELECT @Service_Duration = DG_NDAY FROM Dogovor WHERE DG_Key = @Dogovor_Key
		ELSE
			SET @Service_Duration = @Service_NDays

		If @Service_SVKey=3
			SELECT @Object_SubCode1=HR_RMKey, @Object_SubCode2=HR_RCKey 
				FROM dbo.HotelRooms (nolock) WHERE HR_Key=@Service_SubCode1
		Else
			SET @Object_SubCode1=@Service_SubCode1
		
		IF @Service_SVKey=1
			SET @Object_SubCode2=@Service_SubCode2
	END

if @ResultType is null or @ResultType not in (10)
BEGIN
	Set @Result_From=11
	Set @Result_To=13
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	Set @Result_From=21
	Set @Result_To=23
END;
	-- сначала заполняем таблицу квотами
	-- чтобы ускорить инсерт добавим временную таблицу
	DECLARE @TempTable2 TABLE
	(
		QL_QTID int,
		QL_Type smallint,
		QL_TypeQuota smallint,
		QL_Release int,
		QL_Durations varchar(20),
		QL_FilialKey int,
		QL_CityDepartments int,
		QL_AgentKey int,
		QL_CustomerInfo varchar(150),
		QL_DateCheckinMin smalldatetime,
		QL_PRKey int,
		QL_ByRoom int		
	)
	
	declare @QT_IsByCheckIn bit
	select @QT_IsByCheckIn = QT_IsByCheckIn from Quotas where QT_ID = @QT_ID
	
	if (@QT_IsByCheckIn = 1 or @QT_IsByCheckIn is null)
		insert into @TempTable2 (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
		select QT_ID, QD_Type, QT_IsByCheckIn, QD_Release, convert(nvarchar(max) ,QD_LongMin) + '-' + convert(nvarchar(max) ,QD_LongMax), QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd + 1, QT_PRKey,QT_ByRoom
		from	Quotas (nolock), QuotaObjects (nolock), QuotaDetails (nolock), QuotaParts (nolock)
		where	QT_ID=QO_QTID
				and QD_QTID=QT_ID
				and QP_QDID = QD_ID
				and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
				and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
				and QD_Date between @DateStart and @DateEnd
				and QP_Date between @DateStart and @DateEnd
				and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
				and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
				and (QP_Durations='' or (@DurationLocal is null	
											or (@DurationLocal is not null
												and exists (Select QL_QPID From QuotaLimitations (nolock) WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID)))
					or @ShowAllDurations = 1)
				and ISNULL(QP_IsDeleted,0)=0
				and ISNULL(QD_IsDeleted,0)=0			
				and (@DLKey is null or @ShowAllDurations = 1 or (@DLKey is not null
				and ((QD_LongMin is null and QD_LongMax is null) or (@Service_Duration >= QD_LongMin and @Service_Duration <= QD_LongMax))
					and ((QO_SubCode1 = -1) or (QO_SubCode1 in (0,@Object_SubCode1)))
				and ((QO_SubCode2 = -1) or (QO_SubCode2 in (0,@Object_SubCode2)))))
				and QT_IsByCheckIn = 1
	
	if (@QT_IsByCheckIn = 0 or @QT_IsByCheckIn is null)
		insert into @TempTable2 (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
		select QT_ID, QD_Type, QT_IsByCheckIn, QD_Release, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd + 1, QT_PRKey,QT_ByRoom
		from	Quotas (nolock), QuotaObjects (nolock), QuotaDetails (nolock), QuotaParts (nolock)
		where	QT_ID=QO_QTID
				and QD_QTID=QT_ID
				and QP_QDID = QD_ID
				and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
				and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
				and QD_Date between @DateStart and @DateEnd
				and QP_Date between @DateStart and @DateEnd
				and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
				and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
				and (@ShowAllDurations = 1 or (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations (nolock) WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID)))))
				and ISNULL(QP_IsDeleted,0)=0
				and ISNULL(QD_IsDeleted,0)=0			
				and (@DLKey is null or (@DLKey is not null
				and ((QP_Durations='' or PATINDEX('%,' + CAST(@Service_Duration AS VARCHAR) + ',%', ',' + QP_Durations + ',') != 0) or @ShowAllDurations = 1)
				and ((QO_SubCode1 = -1) or (QO_SubCode1 in (0,@Object_SubCode1))) 
				and ((QO_SubCode2 = -1) or (QO_SubCode2 in (0,@Object_SubCode2)) or (@Object_SubCode2=0 and @Service_SVKey=8))))
				and QT_IsByCheckIn = 0
				
	insert into #QuotaLoadList (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_dataType, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	SELECT DISTINCT QL_QTID, QL_Type, QL_TypeQuota, QL_Release, NU_ID, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom
	FROM @TempTable2 nolock, Numbers (nolock)
	WHERE NU_ID between @Result_From and @Result_To

END

DECLARE @QD_ID int, @Date smalldatetime, @State smallint, @QD_Release int, @QP_Durations varchar(20), @QP_FilialKey int,
		@QP_CityDepartments int, @QP_AgentKey int, @Quota_Places int, @Quota_Busy int, @QP_IsNotCheckIn bit,
		@QD_QTID int, @QP_ID int, @Quota_Comment varchar(8000), @Stop_Comment varchar(255), @QO_ID int, @QT_IsNotCheckIn smallint, @QD_LongMin smallint, @QD_LongMax smallint--,	@QT_ID int
DECLARE @ColumnName varchar(10), @QueryUpdate varchar(8000), @QueryUpdate1 varchar(255), @QueryWhere1 varchar(255), @QueryWhere2 varchar(255), 
		@QD_PrevID int, @StopSale_Percent int, @CheckInPlaces smallint, @CheckInPlacesBusy smallint --@QuotaObjects_Count int, 

if @bShowCommonInfo = 1
	DECLARE curQLoadList CURSOR FOR SELECT 
			QT_ID, QD_ID, QD_Date, QD_Type, case when QD_Release = 0 then null else QD_Release end,
			QD_Places, QD_Busy,
			0,'',0,0,0,0, ISNULL(REPLACE(QD_Comment,'''','"'),''),0,0,0,0,0
	FROM	Quotas, QuotaDetails
	WHERE	QD_QTID=QT_ID
			and 
			(	
				(@QT_ID is null and exists 
					(	
						SELECT 1 FROM QuotaObjects WHERE QT_ID=QO_QTID 
						and QO_Code=@Service_Code and QO_SVKey=@Service_SVKey
					)
				)
				or
				(@QT_ID is not null and @QT_ID=QT_ID)
			)
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID
else
	DECLARE curQLoadList CURSOR FOR 
	SELECT QT_ID, QD_ID, QD_Date, QD_Type, QD_Release, 
			QP_Places, QP_Busy, 
			QP_ID, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, ISNULL(QP_IsNotCheckIn,0), ISNULL(REPLACE(QD_Comment,'''','"'),'') + '' + ISNULL(REPLACE(QP_Comment,'''','"'),''), QP_CheckInPlaces, QP_CheckInPlacesBusy, QT_IsByCheckIn, QD_LongMin, QD_LongMax
	FROM	Quotas, QuotaDetails,QuotaParts
	WHERE	QD_QTID=QT_ID and QP_QDID = QD_ID
			and 
			(	
				(@QT_ID is null and exists 
					(	
						SELECT 1 FROM QuotaObjects WHERE QT_ID=QO_QTID 
						and QO_Code=@Service_Code and QO_SVKey=@Service_SVKey
					)
				)
				or
				(@QT_ID is not null and @QT_ID=QT_ID)
			)
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
			and QD_Date between @DateStart and @DateEnd
			and QP_Date between @DateStart and @DateEnd
			and QP_QDID = QD_ID	
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and (QP_IsDeleted = 0 or QP_IsDeleted is null)
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID


OPEN curQLoadList
FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
									@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
									@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, 
									@QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy, @QT_IsNotCheckIn, @QD_LongMin, @QD_LongMax
SET @QD_PrevID = @QD_ID - 1

SET @StopSale_Percent=0
WHILE @@FETCH_STATUS = 0
BEGIN
	set @QueryUpdate1=''
	if DATEADD(DAY,ISNULL(@QD_Release,0),DATEADD(hh,0,GETDATE()- {fn CURRENT_time()})) < @Date
	begin
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
		--print @QueryUpdate1
	end
	--если релиз период наступил сегодня
	if DATEADD(DAY,ISNULL(@QD_Release,0),DATEADD(hh,0,GETDATE()- {fn CURRENT_time()})) = @Date
	begin
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
		--print @QueryUpdate1
	end
	set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))

	If @QD_PrevID != @QD_ID
	BEGIN
		SET @StopSale_Percent=0
		
		SET @Stop_Comment = ''
		IF @DLKey is null
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100*SST_QO_Count/SST_QO_CountWithStop, @Stop_Comment = SST_Comment FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID
		END
		ELSE
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100, @Stop_Comment = SST_Comment FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID
		END

		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment
		SET @QD_PrevID = @QD_ID
	END	
	ELSE
		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment

	set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))
	if @QD_Release is null
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release is null' 
	else
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release = ' + CAST(@QD_Release as varchar(5))
	
	if @bShowCommonInfo = 1
	BEGIN
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10)) + ';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
		set @QueryUpdate = 'UPDATE #QuotaLoadList SET 
			QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 1 THEN ''' + CAST((@Quota_Places) as varchar(10))  + ''' WHEN 2 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10))  + ''' WHEN 3 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7980)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + ' and QL_dataType in (1,2,3) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		--print @QueryUpdate
		exec (@QueryUpdate)
	END
	else
	BEGIN
		set @QueryWhere2 = ''
		
		if (@QT_IsNotCheckIn = 1 or @QT_IsNotCheckIn is null)
		begin
			if @QD_LongMin is null and @QD_LongMax is null
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
			else
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + (convert(nvarchar(max) ,@QD_LongMin) + '-' + convert(nvarchar(max) ,@QD_LongMax)) + ''''
		end
		if (@QT_IsNotCheckIn = 0 or @QT_IsNotCheckIn is null)
		begin
			if @QP_Durations is null
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
			else
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + @QP_Durations + ''''
		end
		
		if @QP_FilialKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey = ' + CAST(@QP_FilialKey as varchar(10))
		if @QP_CityDepartments is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments = ' + CAST(@QP_CityDepartments as varchar(10))
 		if @QP_AgentKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey = ' + CAST(@QP_AgentKey as varchar(10))
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10))  + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7980)) + ''''
		IF @ResultType is null or @ResultType not in (10)
		BEGIN
			IF @bShowByCheckIn = 1 and @QP_Durations <> '' 
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST(ISNULL(@CheckInPlaces,0) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST(ISNULL(@CheckInPlaces-@CheckInPlacesBusy,0) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST(ISNULL(@CheckInPlacesBusy,0) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			ELSE
			BEGIN
				-- @StopSaleOrPlaces служит для показывания буквы 'S' для стопов на объекты квотирования вместо 0
				DECLARE @StopSaleOrPlaces varchar(255)
				if @QD_ID < 0
					set @StopSaleOrPlaces = '''S'
				else
					set @StopSaleOrPlaces = '(CASE QL_dataType WHEN 11 THEN ''' + CAST((@Quota_Places) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+'''
					
				set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = ' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7900)) + ''''
					+ @QueryUpdate1
					+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			END		
		END
		ELSE
		BEGIN
		--для наличия мест(из оформления)
			--  WHEN 22 THEN ' + @StopSale_Percent + ' WHEN 23 THEN ' + @QP_IsNotCheckIn + ' END
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 21 THEN ' + CAST((@Quota_Places-@Quota_Busy) as varchar(5)) + ' WHEN 22 THEN ' + CAST(@StopSale_Percent as varchar(5)) + ' WHEN 23 THEN ' + CAST(@QP_IsNotCheckIn as varchar(5)) + ' END)' 
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (21,22,23) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END	
		--print @QueryUpdate
		exec (@QueryUpdate)
	END	
	FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
										@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
										@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, 
										@QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy, @QT_IsNotCheckIn, @QD_LongMin, @QD_LongMax
END
CLOSE curQLoadList
DEALLOCATE curQLoadList

--select * from #QuotaLoadList
-- заполняем таблицу стопами, т.е. обозначаем квоты на которых стоит стоп, и если стоп поставлен плагином, добавляем строчку с буквой "S"
DECLARE @TEMP_QL_ID INT, 
	@SS_Code INT, @SS_SubCode1 INT, @SS_SubCode2 INT, @SS_PRKey INT, @SS_AllotmentAndCommitment INT, @SS_Date datetime, @SS_Comment varchar(255),
	@SS_PrevCode INT, @SS_PrevSubCode1 INT, @SS_PrevSubCode2 INT, @SS_PrevPRKey INT, @SS_PrevAllotmentAndCommitment INT, @SS_PrevDate datetime, 
	@SS_PrevComment varchar(255)

SET @StopSaleOrPlaces = 'S'
SET @QP_ID=-1
SET @StopSale_Percent = 100
SET @QP_IsNotCheckIn = 0
SET @TEMP_QL_ID = null

declare StopSaleWithOutQO CURSOR FOR
	SELECT	QO_Code, QO_SubCode1, QO_SubCode2, SS_PRKey, ISNULL(SS_AllotmentAndCommitment,0), SS_Date, SS_Comment
	FROM	QuotaObjects, StopSales 
	WHERE	QO_ID = SS_QOID 
			and QO_Code = @Service_Code and QO_SVKey = @Service_SVKey and QO_QTID is null
			and SS_Date between @DateStart and @DateEnd
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey = SS_PRKey or SS_PRKey = 0)))
			and ISNULL(SS_IsDeleted,0) = 0
	ORDER BY QO_Code, QO_SubCode1, QO_SubCode2, SS_PRKey, SS_AllotmentAndCommitment, SS_Date, SS_Comment
OPEN StopSaleWithOutQO
FETCH NEXT FROM StopSaleWithOutQO INTO	
			@SS_Code, @SS_SubCode1, @SS_SubCode2, @SS_PRKey, @SS_AllotmentAndCommitment, @SS_Date, @SS_Comment
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SS_Code != ISNULL(@SS_PrevCode,-100)
		OR @SS_SubCode1 != @SS_PrevSubCode1
		OR @SS_SubCode2 != @SS_PrevSubCode2
		OR @SS_PRKey != @SS_PrevPRKey
		OR @SS_AllotmentAndCommitment != @SS_PrevAllotmentAndCommitment
	BEGIN
		SET @SS_PrevDate = null
		SET @ColumnName = CAST((DATEDIFF(DAY,@DateStart,@SS_Date)+1) as varchar(3))
		SET @Quota_Comment = ISNULL(@SS_Comment,'')
		SET @QueryUpdate='INSERT INTO #QuotaLoadList 
			(QL_QTID, QL_PRKey, QL_SubCode1, QL_SubCode2, QL_dataType, 
			QL_Type, QL_ByRoom, QL_' + @ColumnName + ')
			values 
			(0, ' + CAST(@SS_PRKey as varchar(15)) + ', ' + CAST(@SS_SubCode1 as varchar(15)) + ', ' + CAST(@SS_SubCode2 as varchar(15)) + ', 11, ' +
			CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) + ', 1, 
			''' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7900)) + '''
			)
		'
		exec (@QueryUpdate)
	END
	ELSE
	BEGIN
		IF @SS_Date != @SS_PrevDate
		BEGIN
			SET @ColumnName = CAST((DATEDIFF(DAY,@DateStart,@SS_Date)+1) as varchar(3))
			SET @Quota_Comment = ISNULL(@SS_Comment,'')
			SET @QueryUpdate='UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = ''' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7900)) + ''' 
						WHERE 
							QL_PRKey = ' + CAST(@SS_PRKey as varchar(15)) + '
							AND QL_SubCode1 = ' + CAST(@SS_SubCode1 as varchar(15)) + '
							AND QL_SubCode2 = ' + CAST(@SS_SubCode2 as varchar(15)) + '
							AND QL_Type = ' + CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) 
							
			exec (@QueryUpdate)
		END
		ELSE IF @SS_Date = @SS_PrevDate
		BEGIN 
			IF @SS_Comment != @SS_PrevComment
			BEGIN
				SET @Quota_Comment = ISNULL(@SS_Comment,'')
				SET @QueryUpdate='UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = QL_' + @ColumnName + ' + ''' + CAST(ISNULL(REPLACE(@Quota_Comment,'''','"'),'') as varchar(7900)) + '''
						WHERE 
							QL_PRKey = ' + CAST(@SS_PRKey as varchar(15)) + '
							AND QL_SubCode1 = ' + CAST(@SS_SubCode1 as varchar(15)) + '
							AND QL_SubCode2 = ' + CAST(@SS_SubCode2 as varchar(15)) + '
							AND QL_Type = ' + CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) 
				exec (@QueryUpdate)
			END
		END
	END
	SET @SS_PrevDate = @SS_Date
	SET @SS_PrevComment = @SS_Comment	
	SET @SS_PrevCode = @SS_Code
	SET @SS_PrevSubCode1 = @SS_SubCode1
	SET @SS_PrevSubCode2 = @SS_SubCode2
	SET @SS_PrevPRKey = @SS_PRKey
	SET @SS_PrevAllotmentAndCommitment = @SS_AllotmentAndCommitment
	FETCH NEXT FROM StopSaleWithOutQO INTO	
				@SS_Code, @SS_SubCode1, @SS_SubCode2, @SS_PRKey, @SS_AllotmentAndCommitment, @SS_Date, @SS_Comment
END
CLOSE StopSaleWithOutQO
DEALLOCATE StopSaleWithOutQO


IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	IF(@Service_SVKey = 3)
		SET @ByRoom = (SELECT AVG(ISNULL(QL_ByRoom,0)) FROM #QuotaLoadList)
	ELSE
		SET @ByRoom = 0

	insert into #QuotaLoadList 
		(QL_SubCode1, QL_Type, QL_dataType, QL_PRKey, QL_ByRoom)
	select DISTINCT DL_SubCode1, SD_State, 21, DL_PartnerKey, @ByRoom
	from	DogovorList (nolock),ServiceByDate (nolock)
	where	SD_DLKey=DL_Key
			and DL_SVKey=@Service_SVKey 
			and DL_Code=@Service_Code 
			and SD_Date<=@DateEnd and SD_Date>=@DateStart
			and SD_State not in (1,2)
	group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
END

if (@nGridFilter=3)
begin
	update #QuotaLoadList set QL_CustomerInfo = (Select PR_NameENG from Partners (nolock) where PR_Key = QL_AgentKey and QL_AgentKey > 0)
	update #QuotaLoadList set QL_PartnerName = (Select PR_NameENG from Partners (nolock) where PR_Key = QL_PRKey and QL_PRKey > 0)
end
else
begin
	update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners (nolock) where PR_Key = QL_AgentKey and QL_AgentKey > 0)
	update #QuotaLoadList set QL_PartnerName = (Select PR_Name from Partners (nolock) where PR_Key = QL_PRKey and QL_PRKey > 0)
end
update #QuotaLoadList set QL_PartnerName = 'All partners' where QL_PRKey=0

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	DECLARE @ServiceCount int, @SubCode1 int, @PartnerKey int

	DECLARE curQServiceList CURSOR FOR SELECT
		SD_Date,
		CASE @ByRoom WHEN 1 THEN count(distinct SD_RLID) ELSE count(SD_ID) END,
		DL_SubCode1,
		DL_PartnerKey,
		SD_State
		from	DogovorList (nolock),ServiceByDate (nolock)
		where	SD_DLKey=DL_Key
				and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
				and SD_State not in (1,2)
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
	OPEN curQServiceList
	FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))
		set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))

		set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + @ColumnName + ' = ''' + CAST((@ServiceCount) as varchar(10))  + ''' 
		WHERE QL_Type = ' + CAST(@State as varchar(1)) + ' and QL_SubCode1= ' + CAST(@SubCode1 as varchar(10)) + ' and QL_PRKey= ' + CAST(@PartnerKey as varchar(10))

		exec (@QueryUpdate)
		FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State
	END
	CLOSE curQServiceList
	DEALLOCATE curQServiceList
END

DECLARE @QO_SubCode int, @QO_TypeD smallint, @DL_SubCode1 int, @QT_ID_Prev int, @ServiceName1 varchar(100), @ServiceName2 varchar(100), @Temp varchar(100),
	@IDEN_Local int, @IDEN_Prev int, @IDENTYPE_Local int, @IDENTYPE_Prev int
DECLARE curQLoadListQO CURSOR FOR 
	SELECT DISTINCT QO_QTID, QO_SubCode1, 1, null, 1 FROM QuotaObjects (nolock) WHERE QO_QTID in (SELECT QL_QTID FROM #QuotaLoadList (nolock) WHERE QO_QTID is not null)
	UNION
	SELECT DISTINCT QO_QTID, QO_SubCode2, 2, null, 1 FROM QuotaObjects (nolock) WHERE QO_QTID in (SELECT QL_QTID FROM #QuotaLoadList (nolock) WHERE QO_QTID is not null)
	UNION
	SELECT DISTINCT QL_ID, QL_SubCode1, 1, null, 3 FROM #QuotaLoadList (nolock) WHERE QL_SubCode1 is not null
	UNION
	SELECT DISTINCT QL_ID, QL_SubCode2, 2, null, 3 FROM #QuotaLoadList (nolock) WHERE QL_SubCode2 is not null
	UNION
	SELECT DISTINCT null, null, null, QL_SubCode1, 2 FROM #QuotaLoadList (nolock) WHERE QL_SubCode1 is not null
	ORDER BY 5,1,3

OPEN curQLoadListQO
FETCH NEXT FROM curQLoadListQO INTO	@IDEN_Local, @QO_SubCode, @QO_TypeD, @DL_SubCode1, @IDENType_Local
Set @IDEN_Prev=@IDEN_Local
Set @IDENTYPE_Prev=@IDENTYPE_Local

Set @ServiceName1=''
Set @ServiceName2=''

WHILE @@FETCH_STATUS = 0
BEGIN
	if @DL_SubCode1 is not null
	BEGIN
		Set @Temp=''
		if (@nGridFilter=3)
			begin
				--для англ версии
				exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, null, null, @Temp output
			end
			else
			begin
				--для русской версии
				exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, @Temp output, null, null
			end

		Update #QuotaLoadList set QL_Description=ISNULL(QL_Description,'') + @Temp where QL_SubCode1=@DL_SubCode1
		--print @Temp
	END
	Else
	BEGIN
		If (@IDEN_Prev != @IDEN_Local) OR (@IDENTYPE_Prev != @IDENTYPE_Local)
		BEGIN
			If @Service_SVKey=3
			BEGIN
				Set @ServiceName2='(' + @ServiceName2 + ')'
			END
			IF @IDENTYPE_Prev = 1
				Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@IDEN_Prev
			IF @IDENTYPE_Prev = 3
			--обработка стоп сейла
				Update #QuotaLoadList set QL_Description=LEFT(@ServiceName1 + @ServiceName2,255) where QL_ID=@IDEN_Prev and QL_QTID is not null
			Set @ServiceName1=''
			Set @ServiceName2=''
		END
		
		SET @IDEN_Prev=@IDEN_Local
		SET @IDENTYPE_Prev=@IDENTYPE_Local
		Set @Temp=''
		If @Service_SVKey=3
		BEGIN
			IF @QO_TypeD=1
			BEGIN
				if (@nGridFilter=3)
				begin
					--для англ версии
					EXEC GetRoomName @QO_SubCode, null, @Temp output
				end
				else
				begin
					--для русской версии
					EXEC GetRoomName @QO_SubCode, @Temp output, null
				end
				If @ServiceName1!=''
					Set @ServiceName1=@ServiceName1+','
				Set @ServiceName1=@ServiceName1+@Temp
			END			
			Set @Temp=''
			IF @QO_TypeD=2
			BEGIN
				if (@nGridFilter=3)
				begin
					--для англ версии
					EXEC GetRoomCtgrName @QO_SubCode, null, @Temp output
				end
				else
				begin
					--для русской версии
					EXEC GetRoomCtgrName @QO_SubCode, @Temp output, null
				end
				If @ServiceName2!=''
					Set @ServiceName2=@ServiceName2+','
				Set @ServiceName2=@ServiceName2+@Temp
			END
		END
		ELse
		BEGIN
			if (@nGridFilter=3)
			begin
				--для англ версии
				exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, null, null, @Temp output
			end
			else
			begin
				--для русской версии
				exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, @Temp output, null, null
			end
			If @ServiceName1!=''
				Set @ServiceName1=@ServiceName1+','
			Set @ServiceName1=@ServiceName1+@Temp
		END
	END
	FETCH NEXT FROM curQLoadListQO INTO	@IDEN_Local, @QO_SubCode, @QO_TypeD, @DL_SubCode1, @IDENType_Local
END


If @Service_SVKey=3
BEGIN
	Set @ServiceName2='(' + @ServiceName2 + ')'
END
	IF @IDENTYPE_Prev = 1
		Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@IDEN_Prev
	IF @IDENTYPE_Prev = 3
		--обработка стоп сейла
		Update #QuotaLoadList set QL_Description=LEFT(@ServiceName1 + @ServiceName2,255) where QL_ID=@IDEN_Prev and QL_QTID is not null
	--print @ServiceName1
	--print @ServiceName2
CLOSE curQLoadListQO
DEALLOCATE curQLoadListQO


/*
-- 29-03-2012 karimbaeva удаляю строки, чтобы не дублировались при выводе в окне, если стоп стоит по нескольким типам номеров
delete from #QuotaLoadList where ql_qoid <> (select top 1  ql_qoid from #QuotaLoadList) and ql_qoid is not null
*/

if (@bShowCommonRequest=1)
begin

--saifullina 11.02.2013
--формируем темповую таблицу для услуг на запросе
CREATE TABLE #tmpQuotaLoadList(QLID int,
	QLQTID int, QLQOID int, QLPRKey int, QLSubCode1 int, QLSubCode2 int, QLPartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QLDescription nvarchar(255) collate Cyrillic_General_CI_AS, 
	QLdataType smallint, QLType smallint, QLTypeQuota smallint, QLRelease int, QLDurations nvarchar(20) collate Cyrillic_General_CI_AS, QLFilialKey int, 
	QLCityDepartments int, QLAgentKey int, QLCustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QLDateCheckinMin smalldatetime,
	QLByRoom int)
	
	set @n=1 
	set @str = ''
	 
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #tmpQuotaLoadList ADD QL' + CAST(@n as varchar(3)) + ' int'
		exec (@str)
		set @n = @n + 1
	END

declare @qlid int,
@qlPrKey int,
@qlAgentKey int,
@qlAgentName varchar(max),
@qlPartnerName varchar(max)
	--добавляем все услуги на запросе в таблицу
	DECLARE qCur CURSOR FAST_FORWARD READ_ONLY FOR
	select QL_ID,QL_PRKey,QL_AgentKey,QL_PartnerName,QL_CustomerInfo from #QuotaLoadList where QL_Type = 4		
	OPEN qCur								
	FETCH NEXT FROM qCur INTO @qlid,@qlPrKey,@qlAgentKey,@qlPartnerName,@qlAgentName		
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #tmpQuotaLoadList (QLID,QLSubCode1, QLType, QLdataType, QLByRoom,QLAgentKey,QLPRKey) select top 1 QL_ID, QL_SubCode1, QL_Type, QL_dataType, QL_ByRoom, QL_AgentKey, QL_PRKey from #QuotaLoadList where QL_ID=@qlid
		set @n = 1
		declare @turist nvarchar(max)
		WHILE @n <= @DaysCount
		begin
			set @QueryUpdate = ''
		set @QueryUpdate = 'UPDATE #tmpQuotaLoadList SET QL' + CAST(@n as varchar(3)) + ' = (select CAST (QL_' + CAST(@n as varchar(3))  +' as int) from #QuotaLoadList
		WHERE QL_ID = ' + CAST(@qlid as varchar(10)) + ' and QL_' + CAST(@n as varchar(3)) + ' is not null) where QLID='+CAST(@qlid as varchar(25))
		exec (@QueryUpdate) 
			set @n = @n + 1
		end
		
		delete #QuotaLoadList where QL_Type=4 and QL_ID=@qlid
		
		if not exists (select * from #QuotaLoadList where (QL_Description like 'Любое' or  QL_Description like 'Any') and QL_Type=4 and QL_dataType=21 and (QL_AgentKey=@qlAgentKey or (QL_AgentKey is null and @qlAgentKey is null))and QL_PRKey = @qlPrKey)
		begin
			if (@ngridfilter=3)
			begin
				insert into #QuotaLoadList (QL_Description, QL_Type,QL_dataType,QL_AgentKey,QL_PRKey, QL_CustomerInfo, QL_PartnerName) values ('Any',4,21,@qlAgentKey,@qlPrKey,@qlAgentName,@qlPartnerName)
			end
			else
			begin
				insert into #QuotaLoadList (QL_Description, QL_Type,QL_dataType,QL_AgentKey,QL_PRKey, QL_CustomerInfo, QL_PartnerName) values ('Любое',4,21,@qlAgentKey,@qlPrKey,@qlAgentName,@qlPartnerName)
			end
		end
		
	FETCH NEXT FROM qCur INTO @qlid,@qlPrKey,@qlAgentKey,@qlPartnerName,@qlAgentName
	END
	CLOSE qCur
	DEALLOCATE qCur

set @n = 1
WHILE @n <= @DaysCount
	begin
		set @QueryUpdate = ''
	set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' =' + '(select SUM(QL' + CAST(@n as varchar(3)) + ') from #tmpQuotaLoadList)
	WHERE QL_Type=4'
	exec (@QueryUpdate) 
		set @n = @n + 1
	end
drop table #tmpQuotaLoadList

end

If @Service_SVKey=3
BEGIN
	Update #QuotaLoadList set QL_Description = QL_Description + ' - Per person' where QL_ByRoom = 0
END
--Общий релиз период
if (@bCommonRelease is not null and @bCommonRelease = 1) and (@ResultType is null or @ResultType not in (10))
begin
	update #QuotaLoadList set QL_Release=0 where QL_Release is null
	
	CREATE TABLE #tempQuotaLoadList(QLID int,
	QLQTID int, QLQOID int, QLPRKey int, QLSubCode1 int, QLSubCode2 int, QLPartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QLDescription nvarchar(255) collate Cyrillic_General_CI_AS, 
	QLdataType smallint, QLType smallint, QLTypeQuota smallint, QLRelease nvarchar(max), QLDurations nvarchar(20) collate Cyrillic_General_CI_AS, QLFilialKey int, 
	QLCityDepartments int, QLAgentKey int, QLCustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QLDateCheckinMin smalldatetime,
	QLByRoom int)

	set @n=1 
	set @str = ''
	 
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #tempQuotaLoadList ADD QL' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END
	
	declare @Qtid int, @Prkey int, @partnerName nvarchar(100), @description nvarchar(100), @dataType smallint, @type smallint, 
	@typeQuota smallint, @durations nvarchar(20), @agent int, @qlid_min int 
	DECLARE @placesResult TABLE ( isPlacesExists bit  )
	DECLARE qCur CURSOR FAST_FORWARD READ_ONLY FOR
	select QL_QTID, QL_PRKey, QL_PartnerName, QL_Description, QL_DataType, QL_Type, QL_TypeQuota, QL_Durations, QL_AgentKey, MIN(QL_ID) as ql_id
								from #QuotaLoadList
								where QL_Release is not null
								group by QL_QTID, QL_PRKey, QL_PartnerName, QL_Description, QL_DataType, QL_Type, QL_TypeQuota, QL_Durations, QL_AgentKey
								having count(*)>1
								
	OPEN qCur								
	FETCH NEXT FROM qCur INTO @Qtid, @Prkey, @partnerName, @description, @dataType, @type, @typeQuota, @durations, @agent, @qlid_min 						
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #tempQuotaLoadList 
		select *
		from #QuotaLoadList where QL_QTID = @Qtid and QL_PRKey = @Prkey and QL_PartnerName = @partnerName 
		and QL_Description = @description and QL_DataType = @dataType and QL_Type = @type 
		and QL_TypeQuota = @typeQuota and ((QL_Durations is null and @durations is null) or (QL_Durations = @durations))   
		and ((QL_AgentKey is null and @agent is null) or (QL_AgentKey = @agent))
		and QL_ID <> @qlid_min
		
		set @n = 1
		WHILE @n <= @DaysCount
		begin
			delete from @placesResult
			set @QueryUpdate = ''
			set @QueryUpdate = 'select top 1 1 from #tempQuotaLoadList where QL' + CAST(@n as varchar(3)) + ' is not null'
			INSERT INTO @placesResult EXEC (@QueryUpdate)
			if exists(select top 1 1 from @placesResult where isPlacesExists = 1)
			begin
				set @QueryUpdate = ''
				set @QueryUpdate = 'with Places as (select( 
															sum(
																	CONVERT(int,SUBSTRING(QL' + CAST(@n as varchar(3)) + ',0,CHARINDEX('';'',QL' + CAST(@n as varchar(3)) + ')))
																)
															) as d												
			from #tempQuotaLoadList
														where QL' + CAST(@n as varchar(3)) + ' is not null
													) update #tempQuotaLoadList set QL' + CAST(@n as varchar(3)) + ' = convert(varchar,(select top 1 * from Places)) + 
													  SUBSTRING(QL' + CAST(@n as varchar(3)) + ',CHARINDEX('';'',QL' + CAST(@n as varchar(3)) + '),LEN(QL' + CAST(@n as varchar(3)) + '))	
									where QL' + CAST(@n as varchar(3)) + ' is not null'
				exec (@QueryUpdate) 
			end
			set @n = @n + 1
		end		
		set @n = 1
		WHILE @n <= @DaysCount
		begin
			delete from @placesResult
			set @QueryUpdate = ''
			set @QueryUpdate = 'select top 1 1 from #tempQuotaLoadList where QL' + CAST(@n as varchar(3)) + ' is not null'
			INSERT INTO @placesResult EXEC (@QueryUpdate)
			if exists(select top 1 1 from @placesResult where isPlacesExists = 1)
			begin
				set @QueryUpdate = ''
				set @QueryUpdate = 'UPDATE #QuotaLoadList 
				SET QL_' + CAST(@n as varchar(3)) + ' = Convert(varchar,(
																			COALESCE(CONVERT(int,SUBSTRING(QL_' + CAST(@n as varchar(3)) + ',0,CHARINDEX('';'',QL_' + CAST(@n as varchar(3)) + '))), 0) 
																			+ (select top 1 CONVERT(int,SUBSTRING(QL' + CAST(@n as varchar(3)) + ',0,CHARINDEX('';'',QL' + CAST(@n as varchar(3)) + '))) 
																				from #tempQuotaLoadList where QL' + CAST(@n as varchar(3)) + ' is not null)
																		)
																) 
														+ (select top 1 SUBSTRING(QL' + CAST(@n as varchar(3)) + ',CHARINDEX('';'',QL' + CAST(@n as varchar(3)) + '),LEN(QL' + CAST(@n as varchar(3)) + ')) 
																from #tempQuotaLoadList where QL' + CAST(@n as varchar(3)) + ' is not null)
				WHERE QL_ID = ' + CAST(@qlid_min as varchar(10)) + ''

			exec (@QueryUpdate) 
			end
			set @n = @n + 1
		end
				
		declare @commonRelease nvarchar(20), @tempRelease nvarchar(max)
		set @tempRelease = ''
		DECLARE qCurs CURSOR FAST_FORWARD READ_ONLY FOR
		select QLRelease from #tempQuotaLoadList
		OPEN qCurs								
		FETCH NEXT FROM qCurs INTO @commonRelease					
		WHILE @@FETCH_STATUS = 0
		BEGIN
			set @tempRelease = @tempRelease + ',' + @commonRelease
			FETCH NEXT FROM qCurs INTO @commonRelease			
		END
		CLOSE qCurs
		DEALLOCATE qCurs
		update #QuotaLoadList set QL_Release = QL_Release + @tempRelease where QL_ID = @qlid_min
				
		delete from #QuotaLoadList where QL_ID in (select QLID from #tempQuotaLoadList)
		truncate table #tempQuotaLoadList
		FETCH NEXT FROM qCur INTO @Qtid, @Prkey, @partnerName, @description, @dataType, @type, @typeQuota, @durations, @agent, @qlid_min 
	END
	CLOSE qCur
	DEALLOCATE qCur
	drop table #tempQuotaLoadList
end

-- удаляем вспомогательный столбец
alter table #QuotaLoadList drop column QL_QOID
alter table #QuotaLoadList drop column QL_SubCode2
alter table #QuotaLoadList drop column QL_ID

-- если запуск из экрана Статус бронирования
-- фильтруем по квотам на зезд, они должны отображаться только на 1-й день
if (@nGridFilter=1)
begin
	set @n = 2
		WHILE @n <= @DaysCount
		begin
			set @QueryUpdate = ''
			--set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' = null 
			--WHERE QL_QTID in (select QT_ID from Quotas join QuotaDetails on QT_ID = QD_QTID where QT_IsByCheckIn=1 and QD_Date <> ' + CAST(@DateStart as varchar(20))  +')'
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' = null 
			WHERE QL_TypeQuota = 1'
			--print @QueryUpdate
			exec (@QueryUpdate) 
			set @n = @n + 1
		end
end

IF @ResultType is null or @ResultType not in (10)
BEGIN
	if (@bCommonRelease is not null and @bCommonRelease = 1)
	begin
		select *
		from #QuotaLoadList (nolock)
		order by
			(case
			when QL_QTID is not null then 1
			else 0
			end) DESC,
			QL_Description /*Сначала квоты, потом неквоты*/,QL_PartnerName,QL_Type DESC, 
			CONVERT(int,SUBSTRING(QL_Release,0,CHARINDEX('-',QL_Release))),
			--сортируем по первому числу продолжительности если продолжительность с "-",","," "
			case 
			when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int, REPLACE(QL_DURATIONS, '-', ''))
			when CHARINDEX(',',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(',',QL_DURATIONS)))
			when CHARINDEX(' ',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(' ',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) = 0 then CONVERT(int,QL_DURATIONS)
			end,
			QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
		RETURN 0
	end
	else
	begin
		select *
		from #QuotaLoadList (nolock)
		order by
			(case
			when QL_QTID is not null then 1
			else 0
			end) DESC,
			QL_Description /*Сначала квоты, потом неквоты*/,QL_PartnerName,QL_Type DESC, CONVERT(int, QL_Release),
			--сортируем по первому числу продолжительности если продолжительность с "-",","," "
			case 
			--when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX('-',QL_DURATIONS)) + SUBSTRING(QL_DURATIONS,CHARINDEX('-',QL_DURATIONS) + 1, LEN(QL_DURATIONS) - CHARINDEX('-',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int, REPLACE(QL_DURATIONS, '-', ''))
			when CHARINDEX(',',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(',',QL_DURATIONS)))
			when CHARINDEX(' ',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(' ',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) = 0 then CONVERT(int,QL_DURATIONS)
			end,
			QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
		RETURN 0
	end
END
ELSE
BEGIN --для наличия мест(из оформления)
	CREATE TABLE #ServicePlacesTr(
		SPT_QTID int, SPT_PRKey int, SPT_SubCode1 int, SPT_PartnerName varchar(100), SPT_Description varchar(255), 
		SPT_Type smallint, SPT_TypeQuota smallint, SPT_FilialKey int, SPT_CityDepartments int, SPT_Release int, SPT_Durations varchar(100),
		SPT_AgentKey int, SPT_Date smalldatetime, SPT_Places smallint, SPT_Stop smallint, SPT_CheckIn smallint)
	
	-- В MSSQL 2000 это не работает
	--ALTER TABLE #ServicePlacesTr ADD SPT_Date smalldatetime
	--ALTER TABLE #ServicePlacesTr ADD SPT_Places smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_Stop smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_CheckIn smallint


	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		DECLARE @curDate smalldatetime
		SET @curDate = DATEADD(DAY,@n-1,@DateStart)

		set @str = '
			INSERT INTO #ServicePlacesTr 
				(SPT_QTID, SPT_PRKey,SPT_SubCode1,SPT_PartnerName,SPT_Description,SPT_Type, SPT_TypeQuota,
				SPT_FilialKey,SPT_CityDepartments,SPT_Release,SPT_Durations,SPT_AgentKey,
				SPT_Date,SPT_Places) 
			SELECT QL_QTID, QL_PRKey,QL_SubCode1,QL_PartnerName, QL_Description, QL_Type, QL_TypeQuota,
				QL_FilialKey, QL_CityDepartments,QL_Release,QL_Durations,QL_AgentKey, 
				''' + CAST(@curDate as varchar(20)) + ''', QL_' + CAST(@n as varchar(3)) + '
				FROM #QuotaLoadList
				WHERE QL_dataType=21'
		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_Stop=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=22 and 
					SPT_QTID=QL_QTID and
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					SPT_TypeQuota = QL_TypeQuota and
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and 
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date=''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20))+ ''''

		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_CheckIn=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=23 and
					SPT_QTID=QL_QTID and 
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and
					SPT_TypeQuota = QL_TypeQuota and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date= ''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20)) + ''''

		exec (@str)
		set @n = @n + 1
	END
END

--Select * from #ServicePlacesTr 	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

DECLARE @ServicePlaces TABLE
(
	SP_PRKey int, SP_SubCode1 int, SP_PartnerName nvarchar(100), SP_Description nvarchar(255), 
	SP_Type smallint, SP_TypeQuota smallint, SP_FilialKey int, SP_CityDepartments int, 
	SP_Places1 smallint, SP_Places2 smallint, SP_Places3 smallint, 
	SP_NonReleasePlaces1 smallint,SP_NonReleasePlaces2 smallint,SP_NonReleasePlaces3 smallint, 
	SP_StopPercent1 smallint,SP_StopPercent2 smallint,SP_StopPercent3 smallint
)

DECLARE @SPT_QTID int, @SPT_PRKey int, @SPT_SubCode1 int, @SPT_PartnerName varchar(100), @SPT_Description varchar(255), 
		@SPT_Type smallint, @SPT_TypeQuota smallint, @SPT_FilialKey int, @SPT_CityDepartments int, @SPT_Release smallint, @SPT_Date smalldatetime, 
		@SPT_Places smallint, @SPT_Stop smallint, @SPT_CheckIn smallint, @SPT_PRKey_Old int, @SPT_PartnerName_Old varchar(100), 
		@SPT_SubCode1_Old int, @SPT_Description_Old varchar(255), @SPT_Type_Old smallint, @SPT_TypeQuota_Old smallint, @SPT_FilialKey_Old int,
		@SPT_CityDepartments_Old int, @SPT_Date_Old smalldatetime,
		@currentPlaces1 smallint, @currentPlaces2 smallint, @currentPlaces3 smallint,
		@currentNonReleasePlaces1 smallint, @currentNonReleasePlaces2 smallint, @currentNonReleasePlaces3 smallint,
		@OblectPlacesMin1 smallint, @OblectPlacesMin2 smallint, @OblectPlacesMin3 smallint,
		@OblectNonReleasePlacesMin1 smallint, @OblectNonReleasePlacesMin2 smallint, @OblectNonReleasePlacesMin3 smallint,
		@stopPercentSum1 smallint,@stopPercentSum2 smallint,@stopPercentSum3 smallint,
		@quotaCounter1 smallint,@quotaCounter2 smallint,@quotaCounter3 smallint,
		@Now smalldatetime

SET @Now = GETDATE()
		
DECLARE curQ2 CURSOR FOR SELECT
			 SPT_QTID, SPT_PRKey, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_Type, SPT_TypeQuota, SPT_FilialKey, 
			 SPT_CityDepartments, ISNULL(SPT_Release, 0), SPT_Date, ISNULL(SPT_Places, 0), ISNULL(SPT_Stop,0), SPT_CheckIn
	FROM	#ServicePlacesTr
	ORDER BY  SPT_PRKey DESC, SPT_Description DESC, SPT_Type DESC, SPT_TypeQuota DESC, SPT_Date DESC, SPT_SubCode1 DESC, SPT_PartnerName DESC, 
		SPT_FilialKey DESC, SPT_CityDepartments DESC, SPT_Places, SPT_Release DESC

OPEN curQ2
FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
		@SPT_Type, @SPT_TypeQuota, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

SET @SPT_PRKey_Old=@SPT_PRKey
SET @SPT_Description_Old=@SPT_Description
SET @SPT_PartnerName_Old=@SPT_PartnerName
SET @SPT_Type_Old=@SPT_Type
SET @SPT_TypeQuota_Old=@SPT_TypeQuota
SET @SPT_Date_Old=@SPT_Date
SET @currentPlaces1=0
SET @currentPlaces2=0
SET @currentPlaces3=0
SET @currentNonReleasePlaces1=0
SET @currentNonReleasePlaces2=0
SET @currentNonReleasePlaces3=0
SET @stopPercentSum1=0
SET @stopPercentSum2=0
SET @stopPercentSum3=0
SET @quotaCounter1=0
SET @quotaCounter2=0
SET @quotaCounter3=0


WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SPT_PRKey=@SPT_PRKey_Old and @SPT_Description=@SPT_Description_Old and ISNULL(@SPT_Type,-1)=ISNULL(@SPT_Type_Old,-1) and @SPT_Date!=@SPT_Date_Old
	BEGIN
		If (@OblectPlacesMin1 is null or @OblectPlacesMin1 > @currentPlaces1) AND @SPT_Date_Old BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
		BEGIN
			--Set @quotaCounter1=0
			Set @OblectPlacesMin1=@currentPlaces1
			--Set @currentPlaces1=0
			Set @OblectNonReleasePlacesMin1=@currentNonReleasePlaces1
			--Set @currentNonReleasePlaces1=0
		END
		If (@OblectPlacesMin2 is null or @OblectPlacesMin2 > @currentPlaces2) AND @SPT_Date_Old BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
		BEGIN
			--Set @quotaCounter2=0
			Set @OblectPlacesMin2=@currentPlaces2
			--Set @currentPlaces2=0
			Set @OblectNonReleasePlacesMin2=@currentNonReleasePlaces2
			--Set @currentNonReleasePlaces2=0
		END
		If (@OblectPlacesMin3 is null or @OblectPlacesMin3 > @currentPlaces3) AND @SPT_Date_Old BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
		BEGIN
			--Set @quotaCounter3=0
			Set @OblectPlacesMin3=@currentPlaces3
			--Set @currentPlaces3=0
			Set @OblectNonReleasePlacesMin3=@currentNonReleasePlaces3
			--Set @currentNonReleasePlaces3=0
		END
-- При смене даты обнуляем текущие количества мест
		SET @currentPlaces1=0
		SET @currentPlaces2=0
		SET @currentPlaces3=0
		SET @currentNonReleasePlaces1=0
		SET @currentNonReleasePlaces2=0
		SET @currentNonReleasePlaces3=0
	END

	IF @SPT_PRKey!=@SPT_PRKey_Old or @SPT_Description!=@SPT_Description_Old or ISNULL(@SPT_Type,-1)!=ISNULL(@SPT_Type_Old,-1) or ISNULL(@SPT_TypeQuota,-1)!=ISNULL(@SPT_TypeQuota_Old,-1)
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO @ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, SP_TypeQuota,
				SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
				SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
				SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, @SPT_TypeQuota_Old,
				@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
				@currentPlaces1, @currentPlaces2, @currentPlaces3,
				ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
				@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)

		set @OblectPlacesMin1 = null
		set @OblectPlacesMin2 = null
		set @OblectPlacesMin3 = null
		set @OblectNonReleasePlacesMin1 = null
		set @OblectNonReleasePlacesMin2 = null
		set @OblectNonReleasePlacesMin3 = null
		Set @currentPlaces1=0
		Set @currentPlaces2=0
		Set @currentPlaces3=0
		Set @currentNonReleasePlaces1=0
		Set @currentNonReleasePlaces2=0
		Set @currentNonReleasePlaces3=0
		Set @stopPercentSum1=0
		Set @stopPercentSum2=0
		Set @stopPercentSum3=0
		Set @quotaCounter1=0
		Set @quotaCounter2=0
		Set @quotaCounter3=0
	END

	If @SPT_Date BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
	BEGIN
			Set @quotaCounter1=@quotaCounter1+1
		Set @stopPercentSum1 = @stopPercentSum1 + @SPT_Stop
		Set @currentPlaces1=@currentPlaces1+@SPT_Places
		If @DateStart > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces1=@currentNonReleasePlaces1+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
	BEGIN
			Set @quotaCounter2=@quotaCounter2+1
		Set @stopPercentSum2 = @stopPercentSum2 + @SPT_Stop
		Set @currentPlaces2=@currentPlaces2+@SPT_Places
		If @DateStart2 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces2=@currentNonReleasePlaces2+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
	BEGIN
			Set @quotaCounter3=@quotaCounter3+1
		Set @stopPercentSum3 = @stopPercentSum3 + @SPT_Stop
		Set @currentPlaces3=@currentPlaces3+@SPT_Places
		If @DateStart3 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces3=@currentNonReleasePlaces3+@SPT_Places
	END

	SET @SPT_PRKey_Old=@SPT_PRKey
	SET @SPT_PartnerName_Old=@SPT_PartnerName
	SET @SPT_Description_Old=@SPT_Description
	SET @SPT_Type_Old=@SPT_Type
	SET @SPT_TypeQuota_Old=@SPT_TypeQuota
	SET @SPT_Date_Old=@SPT_Date
	FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
			@SPT_Type, @SPT_TypeQuota, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

	If @@FETCH_STATUS != 0
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO @ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, SP_TypeQuota,
			SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
			SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
			SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, @SPT_TypeQuota_Old,
			@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
			ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
			ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
			@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)
		END
END
CLOSE curQ2
DEALLOCATE curQ2

--select * from #ServicePlacesTr
--ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
--		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

--select * from #ServicePlaces


	select 
		SP_PRKey,SP_PartnerName,SP_Description,SP_SubCode1,SP_Type,SP_TypeQuota,SP_FilialKey,SP_CityDepartments,
		CAST(SP_Places1 as varchar(4))+';'+CAST(SP_NonReleasePlaces1 as varchar(4))+';'+CAST(SP_StopPercent1 as varchar(4)) as SP_1,
		CAST(SP_Places2 as varchar(4))+';'+CAST(SP_NonReleasePlaces2 as varchar(4))+';'+CAST(SP_StopPercent2 as varchar(4)) as SP_2,
		CAST(SP_Places3 as varchar(4))+';'+CAST(SP_NonReleasePlaces3 as varchar(4))+';'+CAST(SP_StopPercent3 as varchar(4)) as SP_3
	from @ServicePlaces
	order by SP_Description, SP_PartnerName, SP_Type, SP_TypeQuota
GO

GRANT EXECUTE ON [dbo].[GetQuotaLoadListData_N]	TO PUBLIC
GO
/*********************************************************************/
/* end sp_GetQuotaLoadListData_N.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetQuotaLoadListData_N.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetSvCode1Name.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetSvCode1Name.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetSvCode1Name]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetSvCode1Name]
GO
CREATE PROCEDURE [dbo].[GetSvCode1Name]
(
--<VERSION>2009.2.18.2</VERSION>
--<DATA>06.12.2013</DATA>
	@nSvKey INT,
	@nCode1 INT,
	@sTitle VARCHAR(800) OUTPUT,
	@sName VARCHAR(800) OUTPUT,
	@sTitleLat VARCHAR(800) OUTPUT,
	@sNameLat VARCHAR(800) OUTPUT,
	@bIsQuote bit = null
) AS
DECLARE 
	@nRoom INT,
	@nCategory INT,
	@sNameCategory VARCHAR(800),
	@sNameCategoryLat VARCHAR(800),
	@nHrMain INT,
	@nAgeFrom INT,
	@nAgeTo INT,
	@sAcCode VARCHAR(800),
	@sAcCodeLat VARCHAR(800),
	@sTmp VARCHAR(800),
	@bTmp INT,

	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
		
	Set @sName = ''

	IF @nSvKey = @TYPE_FLIGHT
	BEGIN
		SET @sTitle = 'Тариф'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Tariff'
		SET @sNameLat = 'Any'

		IF EXISTS(SELECT * FROM dbo.AirService WHERE AS_Key = @nCode1) and (@nCode1 <> -1)
			SELECT	@sName = IsNull(AS_Code, '') + '-' + AS_NameRus,
				@sNameLat = IsNull(AS_Code, '') + '-' + IsNull(AS_NameLat, AS_NameRus)
			FROM 	dbo.AirService 
			WHERE	AS_Key = @nCode1
	END
	ELSE
	IF (@nSvKey = @TYPE_TRANSFER) or (@nSvKey = @TYPE_EXCUR)
	BEGIN
		SET @sTitle = 'Транспорт'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Transport'
		SET @sNameLat = 'Any'
		
		IF EXISTS(SELECT * FROM dbo.Transport WHERE TR_Key = @nCode1)
			SELECT 	@sName = TR_Name + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5)),
				@sNameLat = IsNull(TR_NameLat, TR_Name) + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5))
			FROM 	dbo.Transport 
			WHERE 	TR_Key = @nCode1		
	END
	ELSE
	IF (@nSvKey = @TYPE_HOTELADDSRV or @nSvKey = @TYPE_HOTEL)
	BEGIN
		IF @nCode1 = 0
			IF ISNULL(@bIsQuote,0) = 1
			BEGIN
				SET @sTitle = 'Тип номера'
				SET @sName = 'Все типы номеров'
				SET @sTitleLat = 'Room type'
				SET @sNameLat = 'All room types'
			END
			ELSE
			BEGIN
				SET @sTitle = 'Размещение'
				SET @sName = 'Все размещения'
				SET @sTitleLat = 'Accommodation'
				SET @sNameLat = 'All accommodations'
			END
		ELSE	
			IF ISNULL(@bIsQuote,0) = 1
			BEGIN
				EXEC GetRoomName @nCode1, @sName output, @sNameLat output

				Set @sTitle = 'Тип номера'
				Set @sTitleLat = 'Room type'
			END
			ELSE
			BEGIN
				EXEC GetRoomKey @nCode1, @nRoom output
				EXEC GetRoomCategoryKey @nCode1, @nCategory output
				
				if (@nRoom is null and @nSvKey=@TYPE_HOTELADDSRV)
				begin
					Set @sName = ''
					Set @sNameLat = ''
				end
				else
					EXEC GetRoomName @nRoom, @sName output, @sNameLat output
				
				if (@nCategory is null and @nSvKey=@TYPE_HOTELADDSRV)
				begin
					Set @sNameCategory = ''
					Set @sNameCategoryLat = ''
				end
				else
					EXEC GetRoomCtgrName @nCategory, @sNameCategory output, @sNameCategoryLat output

				if (@sNameCategory <> '')
					Set @sName = @sName + '(' + @sNameCategory + ')'
				
				if (@sNameCategoryLat <> '')
					Set @sNameLat = @sNameLat + '(' + @sNameCategoryLat + ')'
				
				Set @sTitle = 'Размещение'
				Set @sTitleLat = 'Accommodation'
			END
			
			if isnull((select SS_ParmValue from SystemSettings where SS_ParmName = 'CartAccmdMenTypeView'), 0) = 0
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Name, ''),  @sAcCodeLat = IsNull(AC_NameLat, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)				
			end
			else
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Code, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)
			end
	END
	ELSE
	if (@nSvKey = @TYPE_SHIPADDSRV or @nSvKey = @TYPE_SHIP)
	BEGIN
		IF @nCode1 = 0
		BEGIN
			Set @sTitle = 'Каюта'
			Set @sName = 'Все каюты'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'All cabins'
		END
		ELSE
		BEGIN
			SET @sTitle = 'Каюта'
			SET @sName = 'Любая'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'Any'

			IF EXISTS( SELECT * FROM dbo.Cabine WHERE CB_Key = @nCode1 )
				SELECT	@sName = CB_Code + ',' + CB_Category + ',' + CB_Name,
					@sNameLat = CB_Code + ',' + CB_Category + ',' + ISNULL(CB_NameLat,CB_Name)
				FROM dbo.Cabine 
				WHERE CB_Key = @nCode1
		END
	END
	ELSE
	BEGIN
		Set @sTmp = 'CODE1'
		EXEC dbo.GetSvListParm @nSvKey, @sTmp, @bTmp output
	
		IF @bTmp > 0
		BEGIN
			SET @sTitle = 'Доп.описание'
			SET @sName = 'Любое'
			SET @sTitleLat = 'Add.description'
			SET @sNameLat = 'Any'
			
			IF EXISTS( SELECT * FROM dbo.AddDescript1 WHERE A1_Key = @nCode1 )
				SELECT	@sName = A1_Name + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END), 
					@sNameLat = ISNULL(A1_NameLat,A1_Name) + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END)
				FROM dbo.AddDescript1 
				WHERE A1_Key = @nCode1
		END
		ELSE
		BEGIN
			SET @sTitle = ''
			SET @sTitleLat = ''
		END
	END


	IF @nCode1 > 0 and ((@nSvKey = @TYPE_HOTEL) or (@nSvKey = @TYPE_HOTELADDSRV))
	BEGIN
		if @sAcCode is not null
			begin
				Set @sName = @sName + ',' + isnull(@sAcCode, '')
			end
		if @sAcCodeLat is not null
			begin
                Set @sNameLat = @sNameLat + ',' + isnull(@sAcCodeLat, '')  
             end
                       

		SET @sTmp = isnull(CAST(@nAgeFrom as varchar(5)), '0') + '-' + isnull(cast(@nAgeTo as varchar(5)), '')
		-- Task 10655 09.01.2013 kolbeshkin: исправил задвоение размещения, если оно не основное
		If @nHrMain <= 0 and charindex(isnull(@sAcCode, ''), @sName) = 0
		begin				
			  Set @sName = @sName + ',' + isnull(@sAcCode, '')
              Set @sNameLat = @sNameLat + ',' + isnull(@sAcCodeLat, '')
                      
		END
		ELSE IF ((@nAgeFrom > 0) or (@nAgeTo > 0)) and charindex('(' + @sTmp + ')', @sName) = 0
			BEGIN
			-- Task 8610 05.10.2012 kolbeshkin: если возраст уже есть в названии размещения, то второй раз не добавляем
				SET @sName =  @sName + ' (' + @sTmp + ')'
				SET @sNameLat = @sNameLat + ' (' + @sTmp + ')'				
			END
	END
GO
GRANT EXECUTE ON [dbo].[GetSvCode1Name] TO PUBLIC
GO
/*********************************************************************/
/* end sp_GetSvCode1Name.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetSvCode1Name.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.08.28)_Create_Type_CheckQuotasSourceTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.08.28)_Create_Type_CheckQuotasSourceTable.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckingQuotaForDay]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckingQuotaForDay]
GO

IF  EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'CheckQuotasSourceTable' AND ss.name = N'dbo')
	DROP TYPE [dbo].[CheckQuotasSourceTable] 
GO

CREATE TYPE [dbo].[CheckQuotasSourceTable] AS TABLE(
		[qt_svkey] [int] NULL,
		[qt_code] [int] NULL,
		[qt_subcode1] [int] NULL,
		[qt_subcode2] [int] NULL,
		[qt_agent] [int] NULL,
		[qt_prkey] [int] NULL,
		[qt_isNotCheckin] [bit] NULL, -- запрет на заезд: 1 - заезд запрещен, 0 - запрет разрешен
		[qt_release] [int] NULL,
		[qt_places] [int] NULL,
		[qt_date] [datetime] NULL,
		[qt_byroom] [int] NULL,
		[qt_type] [int] NULL,
		[qt_long] [int] NULL,
		[qt_placesAll] [int] NULL,
		[qt_stop] [smallint] NULL,
		[qt_qoid] [int] NULL,
		[qt_qdid] [int] NULL,
		[qt_byCheckin] [bit] NULL, -- вид квоты: 1 - на заезд, 0 - на период
		[qt_key] [int] not null identity(1,1)
	)
GO
GRANT EXECUTE ON TYPE::dbo.[CheckQuotasSourceTable] TO public
go

/*********************************************************************/
/* end (2013.08.28)_Create_Type_CheckQuotasSourceTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.08.28)_Create_Type_CheckQuotasSourceTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Create_Type_ListSysNameValue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin Create_Type_ListSysNameValue.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ListSysNameValue' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ListSysNameValue] AS TABLE(
		[value] [sysname] NOT NULL
	)
end
GO
GRANT EXECUTE ON TYPE::dbo.[ListSysNameValue] TO public
go

/*********************************************************************/
/* end Create_Type_ListSysNameValue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Create_Type_ListSysNameValue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-02)_Alter_CacheQuotas.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-09-02)_Alter_CacheQuotas.sql */
/*********************************************************************/
--<DATE>2014-09-02</DATE>
--<VERSION>9.2.20</VERSION>
if not exists (select * from syscolumns where name='cq_airlineCodes' and id=object_id('dbo.CacheQuotas'))
begin
	alter table dbo.CacheQuotas add cq_airlineCodes varchar(max) NULL
end
go
/*********************************************************************/
/* end (2014-09-02)_Alter_CacheQuotas.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-02)_Alter_CacheQuotas.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckingQuotaForDay.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckingQuotaForDay.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckingQuotaForDay]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckingQuotaForDay]
GO

CREATE FUNCTION [dbo].[mwCheckingQuotaForDay]
(	
	--<VERSION>9.2.21.03</VERSION>
	--<DATE>2014-04-02</DATE>
	-- функция проверки квот на день
	@tmpQuotas CheckQuotasSourceTable readonly, -- таблица подходящих квот на день
	@isFirstDay bit -- первый ли день предоставления услуги (день заезда)
	)
returns @resultTable table(   -- возвращаем параметры приоритетной квоты
	qt_state smallint,        -- 0 - стоп-сейл
							  -- 1 - запрет на заезд
							  -- 2 - нет мест (@noPlacesResult)
							  -- 3 - релиз-период (@expiredReleaseResult)
							  -- 4 - квота отсутствует
							  -- 5 - есть свободные места
							  -- статусы в порядке уменьшения приоритета
	qt_qdid int,
	qt_places int,
	qt_allPlaces int,
	qt_byCheckin bit -- вид квоты: 1 - на заезд, 0 - на период
	)
begin
	-- создаем новую переменную, чтобы иметь возможность изменять ее
	DECLARE @tmpQuotasOnDay CheckQuotasSourceTable
	INSERT INTO @tmpQuotasOnDay (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,
			qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
	SELECT qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,qt_places,qt_date,
			qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin  
	FROM @tmpQuotas 
	--
	
	declare @currentDate datetime
	select @currentDate = currentDate from dbo.mwCurrentDate
	
	-- константы статусов, для наглядного чтения кода
	DECLARE @isStopSale smallint, @isNotCheckin smallint, @isNoPlaces smallint, @isReleasePeriod smallint, @isYesPlaces smallint
	SET @isStopSale = 0
	SET @isNotCheckin = 1
	SET @isNoPlaces = 2
	SET @isReleasePeriod = 3
	SET @isYesPlaces = 5
	--
	
	INSERT INTO @resultTable (qt_byCheckin)
		SELECT qt_byCheckin FROM @tmpQuotasOnDay
	
	DECLARE @qdId int, @places int, @allPlaces int
						  
	-- проверяем квоту на наличие частного стоп-сейла
	IF exists(SELECT TOP 1 1 FROM @tmpQuotas JOIN StopSales ON SS_QDID = qt_qdid 
		WHERE COALESCE(SS_IsDeleted, 0) = 0)
	BEGIN
		-- если нашли стоп-сейл сразу выходим
		UPDATE @resultTable SET qt_state = @isStopSale
		RETURN
	END	
	
	-- проверяем квоту на наличие общего стоп-сейла	
	if exists(SELECT TOP 1 1 FROM @tmpQuotas, 
		QuotaObjects, StopSales
		WHERE QO_ID = SS_QOID AND QO_SVKey = qt_svkey 
		AND QO_Code = qt_code 
		AND COALESCE(QO_Subcode1, 0) = qt_subcode1
		AND COALESCE(QO_Subcode2, 0) = qt_subcode2
		and SS_Date = qt_date and SS_QDID is null
		AND COALESCE(SS_IsDeleted, 0) = 0
		and COALESCE(ss_prkey, 0) = COALESCE(qt_prkey, 0)
		and (COALESCE(SS_AllotmentAndCommitment, 0) + 1) in (qt_type, 2))
	BEGIN
		-- если нашли стоп-сейл сразу выходим
		UPDATE @resultTable SET qt_state = @isStopSale
		RETURN
	END	
	
	-- проверяем квоту на наличие запрета на заезд, если это первый день заезда
	IF (@isFirstDay = 1 AND EXISTS(SELECT TOP 1 1 FROM @tmpQuotas WHERE qt_isNotCheckin = 1))
	BEGIN
		UPDATE @resultTable SET qt_state = @isNotCheckin
		RETURN
	END		
	
	-- проверяем квоту на наличие свободных мест
	IF EXISTS(SELECT TOP 1 1 FROM @tmpQuotas WHERE qt_places = 0)
	BEGIN
		UPDATE @resultTable SET qt_state = @isNoPlaces
		RETURN  
	END	
	
	-- проверяем квоту на наличие релиз-периода
	IF EXISTS(SELECT TOP 1 1 FROM @tmpQuotas WHERE COALESCE(qt_release,0) > datediff(day, @currentDate, qt_date))
	BEGIN
		UPDATE @resultTable SET qt_state = @isReleasePeriod
		RETURN
	END
	
	-- если все проверки прошли, то возращаем статус есть свободные места
	SELECT @places = qt_places, @allPlaces = qt_placesAll, @qdId = qt_qdid FROM @tmpQuotasOnDay 
	UPDATE @resultTable SET qt_state = @isYesPlaces, qt_places = @places, qt_allPlaces = @allPlaces, qt_qdid = @qdId
	
	RETURN 
end
GO

GRANT SELECT  ON [dbo].[mwCheckingQuotaForDay] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckingQuotaForDay.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckingQuotaForDay.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotasHotels.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckQuotasHotels.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotasHotels]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotasHotels]
GO

CREATE FUNCTION [dbo].[mwCheckQuotasHotels]
(	
	--<VERSION>2009.2.21.2</VERSION>
	--<DATE>2014-01-14</DATE>
	-- функция проверки квот на заезд на услугу проживание
	@code int,                  -- код услуги
	@subcode1 int,              -- вид проживания	
	@subcode2 int,	            -- тип проживания
	@agentKey int,              -- ключ агента (авторизованного пользователя)
	@partnerKey int,            -- ключ партнера (поставщика)
	@date datetime,	            -- дата начала услуги
	@days int,                  -- продолжительность услуги
	@noPlacesResult int,        -- возвращаемое значение в случае, если закончились места
	@checkAgentQuotes smallint, -- проверять ли агентские квоты
	@tourDuration int,          -- продолжительность тура
	@expiredReleaseResult int   -- возвращаемое значение, если наступил релиз-период
)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000),
	qt_noQuotas bit)
begin	
	declare @currentDate datetime
	set @currentDate = getdate()		
	
	declare @quotasSourceTable as CheckQuotasSourceTable
		
	-- формируем таблицу с квотами и общими стопами
	insert into @quotasSourceTable 
	select 
			3, qo_code,
			coalesce(qo_subcode1, 0) as qo_subcode1,
			coalesce(qo_subcode2, 0) as qo_subcode2,
			coalesce(qp_agentkey, 0) as qp_agentkey,
			coalesce(qt_prkey, 0) as qt_prkey,
			coalesce(qp_isnotcheckin, 0) as qp_isnotcheckin, 
			qd_release, 
			coalesce(qp_places, 0) - coalesce(qp_busy, 0) as qt_freePlaces,
			qd_date, qt_byroom, qd_type,
			coalesce(ql_duration, 0) as ql_duration,
			coalesce(qp_places, 0) as qp_places, 0 as qt_stop,
			qo_id as qt_qoid, qd_id as qt_qdid, 
			qt_isByCheckIn
			from Quotas q with(nolock) 
			right outer join QuotaObjects qo with(nolock) on qt_id = qo_qtid 
			inner join QuotaDetails qd with(nolock) on qt_id = qd_qtid 
			inner join QuotaParts qp with(nolock) on qd_id = qp_qdid
			left outer join QuotaLimitations ql with(nolock) on qp_id = ql_qpid
			where
			qt_isByCheckIn = 1 and qo_svkey = 3
			and coalesce(QD_IsDeleted, 0) = 0
			and qo_code = @code
			and coalesce(qo_subcode1, 0) in (0, @subcode1)
			and coalesce(qo_subcode2, 0) in (0, @subcode2)
			and qd_date = @date
			and (
					(coalesce(QD_LongMin, 0) <= @days and @days <= coalesce(QD_LongMax, 100500)) or
					@tourDuration < 0
				)				
			and ((@checkAgentQuotes > 0 and coalesce(qp_agentkey, 0) in (0, @agentKey))
				or (@checkAgentQuotes <= 0 and coalesce(qp_agentkey, 0) = 0))
			and (@partnerKey < 0 or coalesce(qt_prkey, 0) in (0, @partnerKey))
			union
			select
				3, qo_code,
				coalesce(qo_subcode1, 0) as qo_subcode1,
				coalesce(qo_subcode2, 0) as qo_subcode2,
				0, coalesce(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,coalesce(SS_AllotmentAndCommitment, 0) + 1,0,0,1,
				qo_id as qt_qoid, null, null
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
			where ss_date = @date
					and ss_qdid is null
					and coalesce(ss_isdeleted, 0) = 0
					and qo_svkey = 3
					and qo_code = @code
					and (coalesce(qo_subcode1, 0) in (0, @subcode1) or qo_subcode1 = 0)
					and (coalesce(qo_subcode2, 0) in (0, @subcode2) or qo_subcode2 = 0)
					and (@partnerkey < 0 or coalesce(ss_prkey, 0) in (coalesce(@partnerkey, 0), 0))
	order by
			qd_date, qt_stop desc, qp_agentkey desc, qt_freePlaces, QD_Release desc, qd_type desc, QT_PrKey desc, qp_isnotcheckin, ql_duration desc, qo_subcode1 desc, qo_subcode2 desc	
	
	-- если нет ни одной квоты и ни одного стопа, то возвращаем запрос
	if not exists (select top 1 1 from @quotasSourceTable) 
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_noQuotas)
		values(0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1)		
		return
	end	
	
	-- если нет ни одной квоты, но есть стопы, то возвращаем нет мест
	if not exists (select top 1 1 from @quotasSourceTable where qt_stop = 0)
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
		return
	end
	
	declare @quotasTableWithStops as CheckQuotasSourceTable
	-- теперь проверяем наличие частных стопов, отбрасываем квоты на которые стоит частный стоп
	insert into @quotasTableWithStops (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
	select qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin 
	from @quotasSourceTable
	where (qt_stop = 0
		and not exists (select top 1 1 from StopSales where SS_QDID = qt_qdid and coalesce(ss_isdeleted, 0) = 0))
	or qt_stop = 1
	
	-- если после проверки на стопы не осталось квот, значит на все квоты стоят стопы, то возвращаем нет мест
	if not exists (select top 1 1 from @quotasTableWithStops where qt_stop = 0) 
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
		return
	end
	
	-- если стоит общий стоп на тип квоты Allotment+Commitment, то удаляем квоту Commitment и Allotment
	if exists(select top 1 1 from @quotasTableWithStops where qt_stop = 1 and qt_type = 2) 			
	begin
		delete from @quotasTableWithStops 
		from @quotasTableWithStops qt2 where qt2.qt_stop = 0 
		and exists (select top 1 1 from @quotasTableWithStops qt1 where qt1.qt_stop = 1
		and (
				(qt2.qt_subcode1 = qt1.qt_subcode1 and qt2.qt_subcode2 = qt1.qt_subcode2) or
				(@subcode1 = qt1.qt_subcode1 and @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode1 = 0 and  @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode2 = 0 and  @subcode1 = qt1.qt_subcode1) or
				(qt1.qt_subcode1 = 0 and qt1.qt_subcode2 = 0)
			) 
		)
	end
				
	-- если стоит общий стоп на тип квоты Allotment, то удаляем квоту Allotment
	if exists(select top 1 1 from @quotasTableWithStops where qt_stop = 1 and qt_type = 1) 		
	begin
		delete from @quotasTableWithStops 
		from @quotasTableWithStops qt2 where qt_stop = 0 and qt_type = 1 
		and exists (select top 1 1 from @quotasTableWithStops qt1 where qt1.qt_stop = 1 and qt1.qt_type = 1
		and (
				(qt2.qt_subcode1 = qt1.qt_subcode1 and qt2.qt_subcode2 = qt1.qt_subcode2) or
				(@subcode1 = qt1.qt_subcode1 and @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode1 = 0 and  @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode2 = 0 and  @subcode1 = qt1.qt_subcode1) or
				(qt1.qt_subcode1 = 0 and qt1.qt_subcode2 = 0)
			) 
		)
	end
				
	-- если после проверки на стопы не осталось квот, значит на все квоты стоят стопы, то возвращаем нет мест
	if not exists (select top 1 1 from @quotasTableWithStops where qt_stop = 0) 
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
		
		return
	end
	
	-- теперь проверяем наличие запрета на заезд
	if exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0 and qt_isNotCheckin = 1)
	begin
		delete from @quotasTableWithStops 
		from @quotasTableWithStops qt2 where qt2.qt_stop = 0 		
		and exists (select top 1 1 from @quotasTableWithStops qt1 where qt1.qt_stop = 0 and qt1.qt_isNotCheckin = 1 
		and (
				(qt2.qt_subcode1 = qt1.qt_subcode1 and qt2.qt_subcode2 = qt1.qt_subcode2) or
				(@subcode1 = qt1.qt_subcode1 and @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode1 = 0 and  @subcode2 = qt1.qt_subcode2) or
				(qt1.qt_subcode2 = 0 and  @subcode1 = qt1.qt_subcode1) or
				(qt1.qt_subcode1 = 0 and qt1.qt_subcode2 = 0)
			) 
		)
										
		delete from @quotasTableWithStops where qt_stop = 0 and qt_isNotCheckin = 1
	end
				
	-- если после проверки на запрет на заезд не осталось квот, значит на всех квотах стоят запреты на заезд, то возвращаем нет мест
	if not exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0)
	begin		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
		
		return
	end	
	
	-- теперь проверяем наличие релиз-периода 
	if exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0 and qt_release > 0 and datediff(day, qt_release, qt_date) < @currentDate) 			
	begin
		delete from @quotasTableWithStops where qt_stop = 0 and qt_release > 0 and datediff(day, qt_release, qt_date) < @currentDate
	end
			
	-- если после проверки на релиз-период не осталось квот, значит на всех квотах наступил релиз-период, то возвращаем запрос
	if not exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0)
	begin		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, @expiredReleaseResult, 0, 0, 0, '0=' + ltrim(rtrim(str(@expiredReleaseResult))) + ':0')
		
		return		
	end	
	
	-- если после всех проверок есть квоты, на них нет мест, то возвращаем @noPlacesResult
	if not exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0 and qt_places > 0)
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, @noPlacesResult, 0, 0, 0, '0=' + ltrim(rtrim(str(@noPlacesResult))) + ':0')
		
		return
	end
	
	-- если после всех проверок есть квоты и на них есть места
	if @checkAgentQuotes > 0 
	begin
		-- сначала проверяем агентскую квоту, если она существует, то выводим ее
		if exists(select top 1 1 from @quotasTableWithStops where qt_stop = 0 and qt_agent > 0)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			select top 1 qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, qt_bycheckin,
				qt_byroom, qt_places, qt_placesAll, qt_type, qt_long, '0=' + cast(qt_places as varchar(20)) + ':' + cast(qt_placesAll as varchar(20)) as qt_additional  
			from @quotasTableWithStops 
			where qt_stop = 0 and qt_agent > 0
			order by qt_places desc
					
			return
		end
	end	
	
	insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
		qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
	select top 1 qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, qt_isNotCheckin,
		qt_byroom, qt_places, qt_placesAll, qt_type, qt_long, '0=' + cast(qt_places as varchar(20)) + ':' + cast(qt_placesAll as varchar(20)) as qt_additional
	from @quotasTableWithStops 
	where qt_stop = 0 and qt_places > 0
	order by qt_places desc
	
	return
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotasHotels] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotasHotels.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotasHotels.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotasHotelsOnPeriod.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckQuotasHotelsOnPeriod.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotasHotelsOnPeriod]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotasHotelsOnPeriod]
GO

CREATE FUNCTION [dbo].[mwCheckQuotasHotelsOnPeriod]
(	
	--<VERSION>2009.2.21.8</VERSION>
	--<DATE>2014-04-02</DATE>
	-- функция проверки квот на период на услугу проживание
	@svkey int,                  -- класс услуги
	@code int,                   -- код услуги
	@subcode1 int,               -- вид проживания	
	@subcode2 int,	             -- тип проживания
	@agentKey int,               -- ключ агента (авторизованного пользователя)
	@partnerKey int,             -- ключ партнера (поставщика)
	@dateFrom datetime,	         -- дата начала услуги
	@dateTo datetime,
	@days int,                   -- продолжительность услуги
	@long int,
	@requestOnRelease smallint, 
	@noPlacesResult int,         -- возвращаемое значение в случае, если закончились места
	@checkAgentQuotes smallint,  -- проверять ли агентские квоты
	@checkCommonQuotes smallint, -- проверять ли общие квоты
	@checkNoLongQuotes smallint, -- проверять ли квоты на продолжительность
	@tourDuration int,           -- продолжительность тура
	@expiredReleaseResult int    -- возвращаемое значение, если наступил релиз-период
)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000),
	qt_noQuotas bit)
begin		
	declare @tmpQuotas as CheckQuotasSourceTable, @additional varchar(2000)

	-- описание полей типа CheckQuotasSourceTable
	--TYPE [dbo].[CheckQuotasSourceTable] AS TABLE(
	--	[qt_svkey] [int] NULL,
	--	[qt_code] [int] NULL,
	--	[qt_subcode1] [int] NULL,
	--	[qt_subcode2] [int] NULL,
	--	[qt_agent] [int] NULL,
	--	[qt_prkey] [int] NULL,
	--	[qt_isNotCheckin] [bit] NULL, -- запрет на заезд: 1 - заезд запрещен, 0 - запрет разрешен
	--	[qt_release] [int] NULL,
	--	[qt_places] [int] NULL,
	--	[qt_date] [datetime] NULL,
	--	[qt_byroom] [int] NULL,
	--	[qt_type] [int] NULL,
	--	[qt_long] [int] NULL,
	--	[qt_placesAll] [int] NULL,
	--	[qt_stop] [smallint] NULL,
	--	[qt_qoid] [int] NULL,
	--	[qt_qdid] [int] NULL,
	--	[qt_byCheckin] [bit] NULL,   -- вид квоты: 1 - на заезд, 0 - на период
	--	[qt_key] [int] not null identity(1,1)
	--)
		
	INSERT INTO @tmpQuotas (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,
		qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
	SELECT 
		qo_svkey,
		qo_code,
		isnull(qo_subcode1, 0) as qo_subcode1,
		isnull(qo_subcode2, 0) as qo_subcode2,
		isnull(qp_agentkey, 0) as qp_agentkey,
		isnull(qt_prkey, 0) as qt_prkey,
		isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
		qd_release, 
		isnull(qp_places, 0) - isnull(qp_busy, 0) as qt_freePlaces,
		qd_date,
		qt_byroom,
		qd_type,
		isnull(ql_duration, 0) as ql_duration,
		isnull(qp_places, 0) as qp_places,
		0 as qt_stop,
		qo_id as qt_qoid, qd_id as qt_qdid, QT_IsByCheckIn
	FROM quotas q with(nolock) inner join 
		quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
		left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
		right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
	WHERE
		qt_isByCheckIn = 0 and qo_svkey = @svkey
		and ISNULL(QD_IsDeleted, 0) = 0
		and qo_code = @code
		and isnull(qo_subcode1, 0) in (0, @subcode1)
		and isnull(qo_subcode2, 0) in (0, @subcode2)
		and ((@checkAgentQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
			(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0))
		and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
		and ((@days = 1 and qd_date = @dateFrom) or (@days > 1 and qd_date between @dateFrom and @dateTo))
		and (@tourDuration < 0 
			or (@tourDuration >= 0 and isnull(ql_duration, 0) in (0, @long)))
	UNION
	SELECT QO_SVKey, QO_Code,
		COALESCE(QO_SubCode1, 0) as QO_SubCode1,
		COALESCE(QO_SubCode2, 0) as QO_SubCode2,
		0 AS QP_AgentKey,
		isnull(SS_PRKey, 0) as QT_PRKey,
		0 AS QP_IsNotCheckIn, NULL AS QD_Release,
		0 AS QP_FreePlaces, SS_Date AS QD_Date, 
		0 AS QT_ByRoom, 
		COALESCE(SS_AllotmentAndCommitment, 0) + 1 AS QD_Type,
		0 AS QL_Duration,   
		0 AS QP_Places, 
		1 AS QT_Stop, QO_ID, NULL AS QD_ID, 
		0 AS QT_IsByCheckIn
	from StopSales
		inner join QuotaObjects on qo_id=ss_qoid
	where ((@days = 1 and ss_date = @dateFrom) 
			or (@days > 1 and ss_date between @dateFrom and @dateTo))
		and SS_QDID IS NULL
		and COALESCE(ss_isdeleted, 0) = 0
		and qo_svkey = @svkey
		and qo_code = @code
		and COALESCE(qo_subcode1, 0) in (0, @subcode1)
		and COALESCE(qo_subcode2, 0) in (0, @subcode2)
		and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))	
	order by
		qd_date, qp_agentkey DESC, qt_freePlaces, QD_Release desc, qd_type DESC, QT_PrKey DESC, 
		qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
		
	-- если нет ни одной квоты, то возвращаем запрос
	if not exists (select top 1 1 from @tmpQuotas) 
	begin
		INSERT INTO @tmpResQuotes (qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey,
		qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		VALUES (0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, '0=-1:0')
		RETURN
	end	
	
	DECLARE @numberDay int, @currentDate datetime, @isFirstDay bit, -- первый ли день предоставления услуги (день заезда)
		@currentQuotaPlaces int, @currentAllPlaces int
	
	SET @additional = ''		
		
	-- надо проверить все возможные квоты по дням, на все возможные продолжительности 
	-- (используется при проверке наличия мест в отеле в экране HotelQuotes)
	IF(@tourDuration < 0)
	BEGIN
		DECLARE @durations table(
			duration int
		)
		
		-- заполняем таблицу с продолжительностями, чтобы проверить квоты на каждую продолжительность	
		insert into @durations select distinct qt_long from @tmpQuotas order by qt_long

		DECLARE @rowCount int
		SET @rowCount = @@rowCount
		
		IF(@rowCount > 1)
		BEGIN
			DECLARE @quotaDuration int
			DECLARE durationCur cursor fast_forward read_only for
				SELECT duration FROM @durations
	
			OPEN durationCur
	
			FETCH NEXT FROM durationCur INTO @quotaDuration
			WHILE(@@fetch_status = 0)
			BEGIN
				IF(len(@additional) > 0)
				BEGIN
					SET @additional = @additional + '|'
				END
	
				select top 1
					@additional = @additional + qt_additional
				from dbo.mwCheckQuotasHotelsOnPeriod(@svkey, @code, @subcode1, @subcode2, @agentKey, @partnerKey, 
					@dateFrom, @dateTo, @days, @quotaDuration, @requestOnRelease, @noPlacesResult, @checkAgentQuotes, 
					@checkCommonQuotes, @checkNoLongQuotes, 1, @expiredReleaseResult)
				order by (
							case
								when qt_additional is not null 
								then CONVERT(
											int,SUBSTRING(
														qt_additional,
														CHARINDEX('=',qt_additional) + 1,
														(CHARINDEX(':', qt_additional) - 1) - CHARINDEX('=', qt_additional)
														)
											)
							else 0
							end
						) DESC 
	
				FETCH NEXT FROM durationCur INTO @quotaDuration
			END			
				
			INSERT INTO @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			VALUES(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
				
			CLOSE durationCur
			DEALLOCATE durationCur
	
			RETURN
		END
		ELSE IF EXISTS(select top 1 1 from @tmpQuotas WHERE qt_long = 0)
		BEGIN
			SET @long = 0
		END
	END 
	
	-- статусы квот
	DECLARE @currentGlobalState smallint, @currentState smallint	-- состояние квоты 
																	-- 0 - стоп-сейл 
																	-- 1 - запрет на заезд
																    -- 2 - нет мест (@noPlacesResult)
																    -- 3 - релиз-период (@expiredReleaseResult)
																    -- 4 - квота отсутствует
																    -- 5 - есть свободные места
																    -- статусы в порядке уменьшения приоритета													  
	-- константы статусов, для наглядного чтения кода
	DECLARE @isStopSale smallint, @isNotCheckin smallint, @isNoPlaces smallint, @isReleasePeriod smallint, @isNoQuota smallint, @isYesPlaces smallint
	SET @isStopSale = 0
	SET @isNotCheckin = 1
	SET @isNoPlaces = 2
	SET @isReleasePeriod = 3
	SET @isNoQuota = 4
	SET @isYesPlaces = 5
	-- 
	
	-- временная таблица с результами статусов квот 
	declare @StatusTable as table (quotaState int)
	
	-- переменные, которые содержат параметры результата														 
	DECLARE @svkeyRes int, @codeRes int, @subcode1Res int, @subcode2Res int, 
			@agentRes int, @prkeyRes int, @bycheckinRes int, @qdId int, 
			@byroomRes int, @allPlacesRes int, @typeRes int, @longRes int, @releaseRes int,
			@quotaPlaces int, @sumQuotaPlaces int, @sumAllPlacesRes int
			
	SET @sumQuotaPlaces = 0
	SET @sumAllPlacesRes = 0
	
	-- переменные курсора
	DECLARE @qoid int, @qdType int, @qdAgentKey int, @qpLong int, @qoSubcode1 int, @qoSubcode2 int, 
		@qtPrKey int, @qoStop smallint
	
	-- будем ходить по определенному виду квот: относящихся к одному qo_id, к одному типу квоту и имещим одинаковую продолжительность, 
	-- ключ партнера и ключ агента,
	-- чтобы квоты не подбирались "лесенкой"
	DECLARE qCur CURSOR FOR
		SELECT qt_qoid, qt_subcode1, qt_subcode2, qt_prkey, qt_stop, qt_agent, qt_long, qt_type FROM @tmpQuotas 
		GROUP BY qt_qoid, qt_subcode1, qt_subcode2, qt_prkey, qt_stop, qt_agent, qt_long, qt_type 
		ORDER BY  qt_subcode1 DESC, qt_subcode2 DESC, qt_prkey DESC, qt_agent DESC, qt_long DESC, qt_type DESC, qt_stop DESC
		
	OPEN qCur
	FETCH NEXT FROM qCur INTO @qoId, @qoSubcode1, @qoSubcode2, @qtPrKey, @qoStop, @qdAgentKey, @qpLong, @qdType 
	WHILE(@@fetch_status = 0)
	BEGIN
		-- если самым приоритетным по объекту квотирования является стоп-сейл на Allotment+Commitment, 
		-- то сразу выходим
		IF (@qoStop = 1 AND @qdType = 2)
		BEGIN
			INSERT INTO @StatusTable (quotaState) VALUES (@isStopSale)
			BREAK;
		END
		
		-- если самым приоритетным по объекту квотирования является стоп-сейл на Allotment,
		-- то проверяем нет ли приоритетной квоты на Commitment  
		IF (@qoStop = 1 AND @qdType = 1)
		BEGIN
			INSERT INTO @StatusTable (quotaState) VALUES (@isStopSale)
			IF NOT EXISTS(SELECT TOP 1 1 FROM @tmpQuotas WHERE qt_stop = 0 AND qt_type = 2)
			BEGIN
				BREAK;
			END
			ELSE
			BEGIN
				FETCH NEXT FROM qCur INTO @qoId, @qoSubcode1, @qoSubcode2, @qtPrKey, @qoStop, @qdAgentKey, @qpLong, @qdType 
				CONTINUE;
			END
		END
		
		SET @currentGlobalState = -1
		SET @numberDay = 0			
		SET @isFirstDay = 0
		SET @quotaPlaces = 0
		SET @currentDate = @dateFrom
		
		WHILE @currentDate <= @dateTo 
		BEGIN			
			-- если это первый день предоставления услуги
			if (@numberDay = 0)
			BEGIN
				SET @isFirstDay = 1 
			END
			
			DECLARE @tmpQuotasOnDay AS CheckQuotasSourceTable 
		
			INSERT INTO @tmpQuotasOnDay (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,
				qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
			SELECT qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,
				qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin  
			FROM @tmpQuotas
			WHERE qt_qoid = @qoId AND qt_type = @qdType AND qt_date = @currentDate AND qt_agent = @qdAgentKey AND qt_long = @qpLong
			
			-- если на этот день квота отсутствует
			IF (NOT EXISTS(SELECT TOP 1 1 FROM @tmpQuotasOnDay WHERE qt_stop = 0) AND @currentGlobalState NOT IN (@isNoPlaces, @isReleasePeriod))
			BEGIN
				-- проверяем, нет ли общего стопа на этот день
				IF EXISTS(SELECT TOP 1 1 FROM @tmpQuotas 
					WHERE qt_subcode1 IN (@subcode1, 0) AND qt_subcode1 IN (@subcode2, 0)
					AND qt_prkey IN (@partnerKey, 0) AND qt_date = @currentDate AND qt_stop > 0)
				BEGIN
					SET @currentGlobalState = @isStopSale
					SET @isFirstDay = 0
					SET @numberDay = @numberDay + 1
					SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
					DELETE FROM @tmpQuotasOnDay
					BREAK;
				END
				ELSE
				-- если нет, то выводим нет мест
				BEGIN
					SET @currentGlobalState = @isNoQuota
					SET @isFirstDay = 0
					SET @numberDay = @numberDay + 1
					SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
					DELETE FROM @tmpQuotasOnDay
					CONTINUE;
				END		
			END
			
			-- проверяем квоту на наличие общего стоп-сейла
			IF EXISTS(SELECT TOP 1 1 FROM @tmpQuotasOnDay q, @tmpQuotas s 
					WHERE s.qt_stop > 0 AND q.qt_code = s.qt_code 
					AND s.qt_subcode1 IN (@subcode1, 0) AND s.qt_subcode2 IN (@subcode2, 0)
					AND s.qt_prkey in (q.qt_prkey, 0) AND q.qt_date = s.qt_date 
					AND s.qt_type in (q.qt_type, 2))
			BEGIN
				SET @currentGlobalState = @isStopSale
				SET @isFirstDay = 0
				SET @numberDay = @numberDay + 1
				SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
				DELETE FROM @tmpQuotasOnDay
				BREAK;
			END	
			
			-- проверяем квоту на наличие частного стоп-сейла 
			IF EXISTS(SELECT TOP 1 1 FROM @tmpQuotasOnDay, StopSales, QuotaObjects
				WHERE SS_QOID = QO_ID AND QO_Code = qt_code AND QO_SVKey = qt_svkey 
				AND SS_QDID is NOT NULL AND  SS_Date = qt_date AND SS_PRKey IN (qt_prkey, 0)
				AND (QO_SubCode1 = 0 OR (QO_SubCode1 = @subcode1 AND qt_subcode1 = 0)) 
				AND (QO_SubCode2 = 0 OR (QO_SubCode2 = @subcode2 AND qt_subcode2 = 0)) 
				AND SS_AllotmentAndCommitment = (qt_type -1)
				AND COALESCE(SS_IsDeleted, 0) = 0)			
			BEGIN
				SET @currentGlobalState = @isStopSale
				SET @isFirstDay = 0
				SET @numberDay = @numberDay + 1
				SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
				DELETE FROM @tmpQuotasOnDay
				BREAK;
			END
			
			-- запускаем функцию проверки по дням 
			SELECT @currentState = qt_state, @qdId = qt_qdid, @currentQuotaPlaces = qt_places, 
				@currentAllPlaces = qt_allPlaces
			FROM dbo.mwCheckingQuotaForDay(@tmpQuotasOnDay, @isFirstDay)	
			
			-- если на квоту стоит стоп-сейл или запрет заезда
			IF (@currentState in (@isStopSale, @isNotCheckin))
			BEGIN
				SET @currentGlobalState = @currentState
				SET @isFirstDay = 0
				SET @numberDay = @numberDay + 1
				SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
				DELETE FROM @tmpQuotasOnDay
				BREAK;
			END
			
			-- если на приоритетную квоту закончились места
			IF (@currentState = @isNoPlaces)
			BEGIN
				SET @currentGlobalState = @currentState
			END
			
			-- если на приоритетную квоту наступил релиз-период
			IF (@currentState = @isReleasePeriod AND @currentGlobalState != @isNoPlaces)
			BEGIN
				SET @currentGlobalState = @currentState
			END
			
			-- если на приоритетную квоту есть места
			IF (@currentState = @isYesPlaces AND @currentGlobalState NOT IN (@isNoPlaces, @isReleasePeriod, @isNoQuota)
				AND (@quotaPlaces > @currentQuotaPlaces or @quotaPlaces = 0))
			BEGIN
				SET @currentGlobalState = @currentState
				SET @quotaPlaces = @currentQuotaPlaces
				SET @allPlacesRes = @currentAllPlaces
				
				SELECT @svkeyRes = qt_svkey, @codeRes = qt_code, @subcode1Res = qt_subcode1, @subcode2Res = qt_subcode2,
				@agentRes = qt_agent, @prkeyRes = qt_prkey, @bycheckinRes = qt_isNotCheckin, @byroomRes = qt_byroom,
				@typeRes = qt_type, @longRes = qt_long FROM @tmpQuotasOnDay
				WHERE qt_qdid = @qdId
			END
			
			SET @isFirstDay = 0
			SET @numberDay = @numberDay + 1
			SET @currentDate = DATEADD(DAY, @numberDay, @dateFrom)
			DELETE FROM @tmpQuotasOnDay
		END
		
		IF (@currentGlobalState = @isYesPlaces)
		BEGIN
			SET @sumQuotaPlaces = @sumQuotaPlaces + @quotaPlaces
			SET @sumAllPlacesRes = @sumAllPlacesRes + @allPlacesRes
		END
		
		INSERT INTO @StatusTable (quotaState) VALUES (@currentGlobalState)
		
		-- если мы проверили агентскую квоту и стоит настройка общую квоту не проверять
		IF (@qdAgentKey > 0 AND @checkAgentQuotes > 0 and @checkCommonQuotes <= 0)
		BEGIN
			BREAK;
		END
			
		-- если мы проверили квоту на продолжительность и стоит настройка общую квоту не проверять
		IF (@qpLong > 0 AND @checkNoLongQuotes <= 0)
		BEGIN
			BREAK;
		END
		
		-- если на приоритетном объекте квотирования стоит запрет заезда, 
		-- то проверяем нет ли такой же квоты, но с другим типом квоты, еще, 
		-- если нет, то выходим, т.к менее приоритетную квоту проверять не надо
		IF (@currentGlobalState = @isNotCheckin AND 
			NOT EXISTS(SELECT TOP 1 1 
				FROM @tmpQuotas 
				WHERE qt_subcode1 = @qoSubcode1
				AND qt_subcode2 = @qoSubcode2
				AND qt_prkey = @qtPrKey
				AND qt_date = @currentDate
				AND (qt_type <> @qdType
					or (qt_qoid = @qoId and qt_long <> @qpLong)
					or (qt_qoid = @qoId and qt_agent <> @qdAgentKey)
					or qt_qoid <> @qoId)))
		BEGIN
			BREAK;
		END
		
		FETCH NEXT FROM qCur INTO @qoId, @qoSubcode1, @qoSubcode2, @qtPrKey, @qoStop, @qdAgentKey, @qpLong, @qdType 
	END
	
	CLOSE qCur
	DEALLOCATE qCur
	
	-- есть свободные места на все дни продолжительности услуги
	IF EXISTS(SELECT TOP 1 1 FROM @StatusTable WHERE quotaState = @isYesPlaces)
	BEGIN
		set @additional = ltrim(str(@longRes)) + '=' + ltrim(str(@sumQuotaPlaces)) + ':' + ltrim(str(@sumAllPlacesRes))
		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
		qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(@svkeyRes, @codeRes, @subcode1Res, @subcode2Res, @agentRes, @prkeyRes,
		@bycheckinRes, @byroomRes, @sumQuotaPlaces, @sumAllPlacesRes, @typeRes, @longRes, @additional)
		RETURN
	END
	
	-- если на квоте нет ни одной квоты
	IF EXISTS(SELECT TOP 1 1 FROM @StatusTable WHERE quotaState = @isNoQuota)
	BEGIN
		set @additional = ltrim(rtrim(str(@long))) + '=-1:0'
		
		INSERT INTO @tmpResQuotes (qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey,
		qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		VALUES (0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, @additional)
		RETURN
	END
	
	-- если на квоте наступил релиз-период
	IF EXISTS(SELECT TOP 1 1 FROM @StatusTable WHERE quotaState = @isReleasePeriod)
	BEGIN
		set @additional = ltrim(rtrim(str(@long))) + '=' + ltrim(rtrim(str(@expiredReleaseResult))) + ':0'
		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
		qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, @expiredReleaseResult, 0, 0, 0, @additional)
		RETURN
	END
	
	-- если на квоте закончились места 
	IF EXISTS(SELECT TOP 1 1 FROM @StatusTable WHERE quotaState = @isNoPlaces)
	BEGIN		
		set @additional = ltrim(rtrim(str(@long))) + '=' + ltrim(rtrim(str(@noPlacesResult))) + ':0'
		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
		qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, @noPlacesResult, 0, 0, 0, @additional)
		RETURN
	END
	
	-- если на квоте наступил стоп-сейл или стоит запрет заезда
	IF EXISTS(SELECT TOP 1 1 FROM @StatusTable WHERE quotaState in (@isStopSale, @isNotCheckin))
	BEGIN	
		set @additional = ltrim(rtrim(str(@long))) + '=0:0'
		INSERT INTO @tmpResQuotes (qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey,
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		VALUES (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
		RETURN
	END
	
	return
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotasHotelsOnPeriod] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotasHotelsOnPeriod.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotasHotelsOnPeriod.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesFlights.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckQuotesFlights.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotesFlights]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotesFlights]
GO

CREATE FUNCTION [dbo].[mwCheckQuotesFlights]
(	
	--<VERSION>9.2.20.23</VERSION>
	--<DATE>2014-10-15</DATE>
	-- функция проверки квот на авиаперелеты
	@code int,                   -- код услуги
	@subcode1 int,	             -- тариф на авиаперелет 
	@agentKey int,               -- ключ агента (авторизованного пользователя)
	@partnerKey int,             -- ключ партнера (поставщика)
	@date datetime,	             -- дата предоставления услуги
	@day int,                    -- день, с которого предоставляется услуга
	@requestOnRelease smallint, 
	@noPlacesResult int,         -- возвращаемое значение в случае, если закончились места
	@checkAgentQuotes smallint,  -- проверять ли агентские квоты
	@checkCommonQuotes bit,
	@checkNoLongQuotes smallint, -- проверять ли общие квоты
	@findFlight smallint,        -- искать ли заменяющий перелет в случае отсутствия квот
	@cityFrom int,               -- ключ города отправления
	@cityTo int,                 -- ключ города прибытия
	@flightpkkey int,            -- ключ пакета, в котором ищется заменяющий перелет
	@tourDuration int,           -- продолжительность тура
	@expiredReleaseResult int,   -- возвращаемое значение, если наступил релиз-период
	@linked_day int = null,
	@airlineCodes ListSysNameValue readonly)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000))
begin
	declare @tariffToStop varchar(20), @isNewSetToQuota bit
	set @tariffToStop = ',' + ltrim(str(@subcode1)) + ','
	set @isNewSetToQuota = 0
	if exists(select 1 from dbo.systemsettings where ss_parmname='MWTariffsToStop' and charindex(@tariffToStop, ',' + ss_parmvalue + ',') > 0)
		set @noPlacesResult = 0
		
	if exists(select 1 from dbo.systemsettings where ss_parmname='NewSetToQuota' and ss_parmvalue = 1)
		set @isNewSetToQuota = 1
		
	if(COALESCE(@cityFrom, 0) <= 0 or COALESCE(@cityTo, 0) <= 0)
		select @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @code	
	
	-- если стоп ставится плагином Stop-sale на авиаперелеты
	declare @linked_date datetime, @dt1 datetime, @dt2 datetime, @ctFromStop int, @ctToStop int, @dateStop datetime
	SET @dateStop = case when exists(select top 1 1 from SystemSettings where SS_ParmName = 'BackWithDirectFlightStops' and SS_ParmValue = 1) then DATEDIFF(day, @day - 1, @date) else @date end
	if @linked_day is not null
	begin
		set @linked_date = dateadd(day, @linked_day - 1, @dateStop)
		if(@linked_date > @date)
		begin
			set @dt1 = @date
			set @dt2 = @linked_date
			set @ctFromStop = @cityFrom
			set @ctToStop =@cityTo
		end
		else
		begin
			set @dt1 = @linked_date
			set @dt2 = @date
			set @ctFromStop = @cityTo
			set @ctToStop = @cityFrom
		end
	end	
	
	declare @dayOfWeek int	
	set @dayOfWeek = datepart(dw, @date) - 1
	if(@dayOfWeek = 0)
		set @dayOfWeek = 7

	declare @airlineCodesList ListSysNameValue
	if exists (select top 1 1 from @airlineCodes)
		insert into @airlineCodesList select value from @airlineCodes
	else
		insert into @airlineCodesList select al_code from airline

	declare @chartersKeyTable table(
			x_chkey int
		)		
	
	-- подбираем подходящие нам перелеты, в зависимости от @findFlight
	-- проверяем наличие расписания и не стоит ли стоп на перелет, через плагин Stop-Avia	
	insert into @chartersKeyTable (x_chkey)
	select ch_key
	FROM charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
	where ((@findFlight <= 0 and ch_key = @code) or (@findFlight > 0 and ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo)) 
		and (as_week is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
		and (as_dateFrom is null or @date >= as_dateFrom)
		and (as_dateTo is null or @date <= as_dateTo)
		and not exists (select 1 from dbo.stopavia with(nolock) 
						where sa_ctkeyfrom = @ctFromStop and sa_ctkeyto = @ctToStop
						and COALESCE(sa_stop, 0) > 0
						and sa_dbeg = @dt1 and sa_dend = @dt2)
		and ch_airlinecode in (select [value] from @airlineCodesList)

	if not exists (select top 1 1 from @chartersKeyTable)
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
			qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
		return
	end	
	
	declare @chartersAndPartnersKeysTable table(
			x_chkey int,
			x_prKey int
		)		
	
	-- если передается ключ пакета, то проверяем цены на перелеты в этом пакете в зависимости от партнера
	if (@flightpkkey > 0)
	begin 
		insert into @chartersAndPartnersKeysTable (x_chkey, x_prKey)			
		select x_chkey, CS_PRKEY
		from @chartersKeyTable join tbl_Costs on x_chkey = CS_CODE
		WHERE cs_svkey = 1 and cs_subcode1 in (@subcode1, 0)	
			and (@date between cs_date and cs_dateend
				or @date between cs_checkindatebeg and cs_checkindateend)
			and (COALESCE(cs_week, '') = '' or cs_week LIKE ('%' + cast(@dayOfWeek as varchar) + '%'))
			and cs_pkkey = @flightpkkey	and (CS_PRKEY = @partnerKey or @partnerKey < 0)
	end
	ELSE
	BEGIN
		insert into @chartersAndPartnersKeysTable (x_chkey, x_prKey)		
			SELECT x_chkey, @partnerKey from @chartersKeyTable
	END 
		
	if not exists (select top 1 1 from @chartersAndPartnersKeysTable)
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
			qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
		return
	end	
	
	declare @currentDate datetime
	set @currentDate = getdate()		
	
	declare @quotasSourceTable as CheckQuotasSourceTable
		
	-- формируем таблицу с квотами, со стопами: общими и частными
	insert into @quotasSourceTable (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,
		qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
	select distinct
			1, qo_code,
			COALESCE(qo_subcode1, 0) as qo_subcode1, -1,				
			COALESCE(qp_agentkey, 0) as qp_agentkey,
			COALESCE(qt_prkey, 0) as qt_prkey,
			COALESCE(qp_isnotcheckin, 0) as qp_isnotcheckin, 
			qd_release as qt_release, 
			COALESCE(qp_places, 0) - COALESCE(qp_busy, 0),
			qd_date, qt_byroom, qd_type,
			COALESCE(ql_duration, 0) as ql_duration,
			COALESCE(qp_places, 0), 0 as qt_stop,
			qo_id as qt_qoid, qd_id as qt_qdid,
			qt_isByCheckIn
			from Quotas q with(nolock) 
			right outer join QuotaObjects qo with(nolock) on qt_id = qo_qtid 
			inner join @chartersAndPartnersKeysTable on qo_code = x_chkey
			inner join QuotaDetails qd with(nolock) on qt_id = qd_qtid 
			inner join QuotaParts qp with(nolock) on qd_id = qp_qdid
			left outer join QuotaLimitations ql with(nolock) on qp_id = ql_qpid								
			where
			qo_svkey = 1 and COALESCE(QD_IsDeleted, 0) = 0 and COALESCE(qo_subcode1, 0) in (0, @subcode1)
			and ((@checkAgentQuotes > 0 and coalesce(qp_agentkey, 0) in (0, @agentKey))
				or (@checkAgentQuotes <= 0 and coalesce(qp_agentkey, 0) = 0)) 
			and (x_prKey < 0 or COALESCE(qt_prkey, 0) in (0, x_prKey))
			and qd_date = @date	
			and (@tourDuration < 0 or (COALESCE(ql_duration, 0) in (0, @tourDuration)))					
			-- нужно учитывать стопы общие и частные, даже если квот нету
			union
			select
				1, qo_code,
				COALESCE(qo_subcode1, 0) as qo_subcode1,
				COALESCE(qo_subcode2, 0) as qo_subcode2,
				0,
				COALESCE(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,COALESCE(SS_AllotmentAndCommitment, 0) + 1,0,0,1,
				qo_id as qt_qoid, null, null
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
				inner join @chartersAndPartnersKeysTable on qo_code = x_chkey
			where ss_date = @date
			and ss_qdid is null
			and COALESCE(ss_isdeleted, 0) = 0
			and qo_svkey = 1
			and (COALESCE(qo_subcode1, 0) in (0, @subcode1) or qo_subcode1 = 0)
			and (x_prKey < 0 or COALESCE(ss_prkey, 0) in (x_prKey, 0))
	order by
			qd_date, qt_stop desc, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC	
	
	-- если нет ни одной квоты и ни одного стопа, то возвращаем запрос
	if not exists (select top 1 1 from @quotasSourceTable) 
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
		values(0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0)		
		return
	end	
	
	-- если нет ни одной квоты, но есть стопы, то возвращаем нет мест
	if not exists (select top 1 1 from @quotasSourceTable where qt_stop = 0)
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
		return
	end
	
	declare @quotasTableWithStops as CheckQuotasSourceTable
	-- теперь проверяем наличие частных стопов, отбрасываем квоты на которые стоит частный стоп
	insert into @quotasTableWithStops (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
	select qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin 
	from @quotasSourceTable
	where (qt_stop = 0
		and not exists (select top 1 1 from StopSales where SS_QDID = qt_qdid and COALESCE(ss_isdeleted, 0) = 0))
	or qt_stop = 1
	
	-- если после проверки на стопы не осталось квот, значит на все квоты стоят стопы, то возвращаем нет мест
	if not exists (select top 1 1 from @quotasTableWithStops where qt_stop = 0) 
	begin
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
		return
	end

	declare @datePlaces int, @dateAllPlaces int, @additional varchar(2000), @result varchar(2000), @existsRecord bit
	set @additional = ''
	set @result = ''
	set @existsRecord = 0
	set @datePlaces = 0
	set @dateAllPlaces = 0
	
	declare @durations table(
					duration int)
	
	-- выбираем подходящие продолжительности, на которые будем выбирать квоты
	if (@tourDuration >= 0)
	begin
		if (@checkNoLongQuotes = 1)
		begin
			-- подбираем агентские и общие квоты
			insert into @durations select distinct qt_long from @quotasTableWithStops where qt_long in (0, @tourDuration) order by qt_long	desc		 
		end	
		else
		begin
			-- подбираем агентские квоты
			insert into @durations select distinct qt_long from @quotasTableWithStops where qt_long = @tourDuration order by qt_long
			-- если агентские квоты не заведены, то подбираем общие квоты
			if not exists(select top 1 1 from @durations)
				insert into @durations(duration) values (0)
		end		
	end
	else
	begin
		-- подбираем квоты на все продолжительности
		insert into @durations select distinct qt_long from @quotasTableWithStops order by qt_long
	end
	
	declare @rowCount int
	select @rowCount = COUNT(*) from @durations
	
	if(@rowCount > 0)
	begin
		declare @tmpQuotes as CheckQuotasSourceTable
		declare @quotaDuration int
		declare durationCur cursor fast_forward read_only for
			select duration from @durations
	
		open durationCur
	
		fetch next from durationCur into @quotaDuration
		while(@@fetch_status = 0)
		begin
			set @existsRecord = 0
			set @datePlaces = 0
			set @dateAllPlaces = 0
			
			if (@tourDuration < 0 and len(@additional) > 0)
				set @additional = @additional + '|'
			
			-- формируем таблицу с квотами, со стопами: общими и частными
			insert into @tmpQuotes (qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin)
				select qt_svkey,qt_code,qt_subcode1,qt_subcode2,qt_agent,qt_prkey,qt_isNotCheckin,qt_release,qt_places,qt_date,qt_byroom,qt_type,qt_long,qt_placesAll,qt_stop,qt_qoid,qt_qdid,qt_byCheckin
				 from @quotasTableWithStops where qt_long = @quotaDuration or qt_stop = 1			
			
			-- если нет ни одной квоты и ни одного стопа, то возвращаем запрос
			if not exists (select top 1 1 from @tmpQuotes)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
					qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
				values(0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0)		
				set @datePlaces = -1
				set @dateAllPlaces = 0
					
				set @existsRecord = 1
			end	
			-- если нет ни одной квоты, но есть стопы, то возвращаем нет мест
			if @existsRecord = 0 and not exists (select top 1 1 from @tmpQuotes where qt_stop = 0)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
					qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')	
				set @datePlaces = 0
				set @dateAllPlaces = 0	
				
				set @existsRecord = 1
			end
			
			-- теперь проверяем наличие стоп-сейла
			if @existsRecord = 0 
			begin
				-- если стоит общий стоп на тип квоты Allotment+Commitment, то удаляем квоту Commitment и Allotment
				if exists(select top 1 1 from @tmpQuotes where qt_stop = 1 and qt_type = 2) 			
				begin
					delete from @tmpQuotes 
					from @tmpQuotes qt2 where qt2.qt_stop = 0 
					and exists (select top 1 1 from @tmpQuotes qt1 where qt1.qt_stop = 1 and qt1.qt_type = 2
								and (qt2.qt_subcode1 = qt1.qt_subcode1 or qt1.qt_subcode1 = 0 or qt2.qt_subcode1 = 0) and qt2.qt_code = qt1.qt_code)
				end
				
				-- если стоит общий стоп на тип квоты Allotment, то удаляем квоту Allotment
				if exists(select top 1 1 from @tmpQuotes where qt_stop = 1 and qt_type = 1) 		
				begin
					delete from @tmpQuotes 
					from @tmpQuotes qt2 where qt_stop = 0 and qt_type = 1 
					and exists (select top 1 1 from @tmpQuotes qt1 where qt1.qt_stop = 1 and qt1.qt_type = 1
								and (qt2.qt_subcode1 = qt1.qt_subcode1 or qt1.qt_subcode1 = 0 or qt2.qt_subcode1 = 0) and qt2.qt_code = qt1.qt_code)
				end
				
				-- если после проверки на стопы не осталось квот, значит на все квоты стоят стопы, то возвращаем нет мест
				if not exists (select top 1 1 from @tmpQuotes where qt_stop = 0) 
				begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
						qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')		
					set @datePlaces = 0
					set @dateAllPlaces = 0
					
					set @existsRecord = 1
				end
			end		
			
			-- теперь проверяем наличие запрета на заезд
			if @existsRecord = 0 
			begin	
				if exists(select top 1 1 from @tmpQuotes where qt_stop = 0 and qt_isNotCheckin = 1)
				begin
					delete from @tmpQuotes 
					from @tmpQuotes qt2 where qt2.qt_stop = 0 and qt2.qt_subcode1 = 0
					and exists (select top 1 1 from @tmpQuotes qt1 where qt1.qt_stop = 0 and qt1.qt_isNotCheckin = 1 and qt2.qt_code = qt1.qt_code)
								
					delete from @tmpQuotes where qt_stop = 0 and qt_isNotCheckin = 1
				end
				
				-- если после проверки на запрет на заезд не осталось квот, значит на всех квотах стоят запреты на заезд, то возвращаем нет мест
				if not exists(select top 1 1 from @tmpQuotes where qt_stop = 0)
				begin		
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
						qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
					set @datePlaces = 0
					set @dateAllPlaces = 0
					
					set @existsRecord = 1
				end	
			end
			
			-- теперь проверяем наличие релиз-периода 
			if @existsRecord = 0 
			begin
				if exists(select top 1 1 from @tmpQuotes where qt_stop = 0 and qt_release > 0 and datediff(day, qt_release, qt_date) < @currentDate) 			
				begin
					delete from @tmpQuotes where qt_stop = 0 and qt_release > 0 and datediff(day, qt_release, qt_date) < @currentDate
				end
			
				-- если после проверки на релиз-период не осталось квот, значит на всех квотах наступил релиз-период, то возвращаем запрос
				if not exists(select top 1 1 from @tmpQuotes where qt_stop = 0)
				begin		
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
						qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, @expiredReleaseResult, 0, 0, 0, '0=' + ltrim(rtrim(str(@expiredReleaseResult))) + ':0')
					set @datePlaces = @expiredReleaseResult
					set @dateAllPlaces = 0
					
					set @existsRecord = 1
				end	
			end

			-- если после всех проверок есть квоты, но них нет мест, то возвращаем @noPlacesResult
			if @existsRecord = 0 and not exists(select top 1 1 from @tmpQuotes where qt_stop = 0 and qt_places > 0)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
					qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, @noPlacesResult, 0, 0, 0, '0=' + ltrim(rtrim(str(@noPlacesResult))) + ':0')
				set @datePlaces = @noPlacesResult
				set @dateAllPlaces = 0
				
				set @existsRecord = 1
			end	
			
			-- если после всех проверок есть квоты и на них есть места
			if @existsRecord = 0 and @checkAgentQuotes > 0 
			begin
				-- сначала проверяем агентскую квоту, если она существует, то выводим ее
				if exists(select top 1 1 from @tmpQuotes where qt_stop = 0 and qt_agent > 0)
				begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
					select top 1 qt_svkey, qt_code, qt_subcode1, 0, qt_agent, qt_prkey, qt_isNotCheckin,
						qt_byroom, qt_places, qt_placesAll, qt_type, qt_long 
					from @tmpQuotes 
					where qt_stop = 0 and qt_agent > 0
					order by qt_places desc
					
					set @datePlaces = 0
					set @dateAllPlaces = 0

					select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll) 
					from @tmpQuotes where qt_stop = 0 and qt_agent > 0

					set @existsRecord = 1
				end

				-- проверяется общая квота, если:
				--		агентская квота закончилась или не заведена (@checkCommonQuotes > 0)
				--		агентская квота не заведена (@checkCommonQuotes = 0)
				if (@checkCommonQuotes > 0 and (@existsRecord = 0 or @datePlaces = 0))
					or (@checkCommonQuotes = 0 and @existsRecord = 0)
				begin
					if exists (select top 1 1 from @tmpQuotes where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) 
						and qt_stop = 0 and qt_agent = 0 and qt_places > 0) and @findFlight > 0
					BEGIN
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
						select top 1 qt_svkey, qt_code, qt_subcode1, 0, qt_agent, qt_prkey, qt_isNotCheckin,
							qt_byroom, qt_places, qt_placesAll, qt_type, qt_long 
						from @tmpQuotes 
						where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) and 
							qt_stop = 0 and qt_agent = 0 and qt_places > 0
						order by qt_places desc
						
						select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll) 
						from @tmpQuotes where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) and 
							qt_stop = 0 AND qt_agent = 0 AND qt_places > 0
					END
					else 
					begin
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
						select top 1 qt_svkey, qt_code, qt_subcode1, 0, qt_agent, qt_prkey, qt_isNotCheckin,
							qt_byroom, qt_places, qt_placesAll, qt_type, qt_long 
						from @tmpQuotes 
						where qt_stop = 0 and qt_agent = 0 and qt_places > 0
						order by qt_places desc
						
						select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll) 
						from @tmpQuotes where qt_stop = 0 AND qt_agent = 0 AND qt_places > 0
					end
					
					if exists (select top 1 1 from @tmpResQuotes where qt_places > 0)
					begin
						delete from @tmpResQuotes where qt_places = 0
						set @existsRecord = 1
					end
				end

				--28678 -- если нашлись места и вызов идет из QD, а не из экрана AviaQuotes, то квота найдена и выходим
				if (@tourDuration > 0 and @checkNoLongQuotes > 0)
				begin
					close durationCur
					deallocate durationCur
					
					return
				end
			end
			
			-- если после всех проверок есть квоты и на них есть места
			if @existsRecord = 0 
			begin
				if exists (select top 1 1 from @tmpQuotes where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) 
					and qt_stop = 0 and qt_places > 0) and @findFlight > 0
				BEGIN
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
					select top 1 qt_svkey, qt_code, qt_subcode1, 0, qt_agent, qt_prkey, qt_isNotCheckin,
						qt_byroom, qt_places, qt_placesAll, qt_type, qt_long 
					from @tmpQuotes 
					where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) and qt_stop = 0 and qt_places > 0
					
					select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll)
					from @tmpQuotes 
					where qt_code = @code and (@partnerKey < 0 or qt_prkey = @partnerKey) and qt_stop = 0 and qt_places > 0
				END
				else 
				if exists (select top 1 1 from @tmpQuotes where qt_stop = 0 and qt_places > 0)
				begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
					select top 1 qt_svkey, qt_code, qt_subcode1, 0, qt_agent, qt_prkey, qt_isNotCheckin,
						qt_byroom, qt_places, qt_placesAll, qt_type, qt_long 
					from @tmpQuotes 
					where qt_stop = 0 and qt_places > 0
					
					select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll) 
					from @tmpQuotes where qt_stop = 0 and qt_places > 0
				end
			end
			
			
			if (@requestOnRelease = 1 and exists(select top 1 1 from @tmpQuotes where qt_release = 0)) -- 28735, Есть места на квоты, и релиз период равен 0 и включена настройка setRequestIfReleaseIsZero
			begin
				set @additional = ltrim(str(@quotaDuration)) + '=-1:' + ltrim(str(@dateAllPlaces))				-- 28735, Вернем квоту Под запрос
			end
			else
			begin
				if (@findFlight <= 0)-- 26882, в случае, если пришел @findFlight > 0 - значит это вызов точно не из экрана QD						
				begin
					if (@existsRecord = 0)
					begin
						select @datePlaces = SUM(qt_Places), @dateAllPlaces = SUM(qt_placesAll) from @tmpQuotes where qt_stop = 0
					end
					
					if (@tourDuration < 0)
					begin
						set @result = ltrim(str(@datePlaces)) + ':' + ltrim(str(@dateAllPlaces))		
						set @additional = @additional + ltrim(str(@quotaDuration)) + '=' + @result											
					end
				end
			end
			
			delete from @tmpQuotes
			
			fetch next from durationCur into @quotaDuration
		end	
		
		update @tmpResQuotes set qt_places = @datePlaces, qt_allPlaces = @dateAllPlaces
		
		if (len(@additional) > 0)	
		begin
			update @tmpResQuotes set qt_additional = @additional
		end
			
		close durationCur
		deallocate durationCur
	
		return
	end
	else
	begin
		-- не нашли квот подходящих по продолжительности
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, 
			qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		values(0, 0, 0, 0, 0, 0, 0, 0, @noPlacesResult, 0, 0, 0, '0=' + ltrim(rtrim(str(@noPlacesResult))) + ':0')		
		return				
	end			
	return
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotesFlights] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotesFlights.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesFlights.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesEx2.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckQuotesEx2.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotesEx2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotesEx2]
GO

CREATE FUNCTION [dbo].[mwCheckQuotesEx2]
(
	@svkey int, -- класс услуги
	@code int, -- код услуги
	@subcode1 int, -- вид проживания (sv_key = 3) или тариф на авиаперелеты (sv_key = 1)
	@subcode2 int, -- тип проживания (sv_key = 3) или равен -1 (sv_key = 1)
	@agentKey int, -- ключ агента (авторизованного пользователя)
	@partnerKey int, -- ключ партнера (поставщика)
	@date datetime, -- дата начала тура	
	@day int, -- день, с которого предоставляется услуга
	@days int, -- продолжительность услуги
	@requestOnRelease smallint, 
	@noPlacesResult int, -- возвращаемое значение в случае, если закончились места
	@checkAgentQuotes smallint, -- проверять ли агентские квоты
	@checkCommonQuotes smallint, -- проверять ли общие квоты
	@checkNoLongQuotes smallint, -- проверять ли квоты на продолжительность
	@findFlight smallint, -- искать ли заменяющий перелет в случае отсутствия квот
	@cityFrom int, -- город отправления
	@cityTo int, -- город прибытия
	@flightpkkey int, -- ключ пакета, в котором ищется заменяющий перелет
	@tourDuration int, -- продолжительность тура
	@expiredReleaseResult int, -- возвращаемое значение, если наступил релиз-период
	@linked_day int = null,
	@airlineCodes ListSysNameValue readonly)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000))
begin
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>

    declare @isSubCode2 smallint
    select @isSubCode2 = COALESCE(SV_ISSUBCODE2, 0) from [Service] where SV_key = @svkey
    if(@isSubCode2 <= 0)
		set @subcode2 = 0  		
	if(@svkey = 1)
		set @subcode2 = -1      
	
	-- настройка указывает, что отображать если нет мест
    if exists(select 1 from systemsettings where ss_parmname like 'NoPlacesQuoteResult_' + convert(varchar, @svkey))
    begin
		select @noPlacesResult = cast(COALESCE(ss_parmvalue,@noPlacesResult) as int) from systemsettings where ss_parmname like 'NoPlacesQuoteResult_' + convert(varchar, @svkey)          
    end

	-- для квот на продолжительность
	declare @long int
	if(@svkey = 1 or @svkey = 2 or @svkey = 4)
		set @long = @tourDuration
	else
		set @long = @days

	if(@day <= 0 or @day is null)
		set @day = 1
	if(@days <= 0 or @days is null)
		set @days = 1

	declare @dateFrom datetime, @dateTo datetime
	set @dateFrom = dateadd(day, @day - 1, @date)
	set @dateTo = dateadd(day, @day + @days - 2, @date)		

	if(@svkey = 1)
	begin
		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		-- функция проверки квот на авиаперелеты
		select top 1 *
		from dbo.mwCheckQuotesFlights(@code, @subcode1, @agentKey, @partnerKey, 
			@dateFrom, @day, @requestOnRelease, @noPlacesResult, @checkAgentQuotes, @checkCommonQuotes,
			@checkNoLongQuotes, @findFlight, @cityFrom, @cityTo, @flightpkkey,
			@tourDuration, @expiredReleaseResult, @linked_day, @airlineCodes)
		
		return
	end
	else
	begin
		-- промежуточная таблица результата
		declare @tmpIntermediateResQuotes table(
			qt_svkey int,
			qt_code int,
			qt_subcode1 int,
			qt_subcode2 int,
			qt_agent int,
			qt_prkey int,
			qt_bycheckin int,
			qt_byroom int,
			qt_places int,
			qt_allPlaces int,
			qt_type int,
			qt_long int,
			qt_additional varchar(2000),
			qt_noQuotas bit -- признак, что квота вообще не заведена
		)
		
		declare @tmpSubcode1 int
		if(@svkey = 3 and @subcode1 > 0 and @subcode2 <= 0) 
		begin
			select @tmpSubcode1 = hr_rmkey, @subcode2 = hr_rckey from hotelrooms with(nolock) where hr_key = @subcode1
			set @subcode1 = @tmpSubcode1
		end
		
		-- начало проверки квот на заезд на проживание
		insert into @tmpIntermediateResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, 
									qt_long, qt_additional, qt_noQuotas)
		-- функция проверки квот на заезд на проживание
		select *
		from dbo.mwCheckQuotasHotels(@code, @subcode1, @subcode2, @agentKey, @partnerKey, 
			@dateFrom, @days, @noPlacesResult, @checkAgentQuotes, @tourDuration, @expiredReleaseResult)
		
		-- если существует свободные места на заезд, то квоты на период не проверяем	
		if exists(select top 1 1 from @tmpIntermediateResQuotes where qt_places > 0)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			select qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional
									from @tmpIntermediateResQuotes where qt_places > 0									
			return
		end
		
		-- если квота на заезд вообще не заведена, эту информацию в таблице результата не сохраняем,
		-- т.к. при проверке квот на период будет информация о квотах, не будем засорять таблицу
		if exists(select top 1 1 from @tmpIntermediateResQuotes where qt_noQuotas = 1)
		begin
			delete from @tmpIntermediateResQuotes
		end
		
		-- есть четыре варианта после проверки квот на заезд:
		--	есть места 
		--  квоты не заведены
		--  запрос (наступил релиз-период)
		--  нет мест (нет свободных мест, запрет на заезд или стоп-сейл) 
		-- если есть места, то сразу выходим 
		-- если возвращается запрос и нет мест, то обрабатываем ниже
		
		-- окончание проверки квот на заезд на проживание
		
		
		-- начало проверки квот на период на проживание
		insert into @tmpIntermediateResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, 
									qt_long, qt_additional, qt_noQuotas)
		-- функция проверки квот на период на проживание
		select *
		from dbo.mwCheckQuotasHotelsOnPeriod(@svkey, @code, @subcode1, @subcode2, @agentKey, @partnerKey, 
			@dateFrom, @dateTo, @days, @long, @requestOnRelease, @noPlacesResult, @checkAgentQuotes, 
			@checkCommonQuotes, @checkNoLongQuotes, @tourDuration, @expiredReleaseResult)
		
		-- если существует свободные места на период, то выводим результат и выходим	
		if exists(select top 1 1 from @tmpIntermediateResQuotes where qt_places > 0)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			select qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional
									from @tmpIntermediateResQuotes where qt_places > 0									
			return
		end		
		-- окончание проверки квот на период на проживание
		
		-- если в результирующей таблице есть квоты на которых наступил релиз-период или квота не заведена, то выводим результат и выходим
		if exists(select top 1 1 from @tmpIntermediateResQuotes where qt_places = -1)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			select top 1 qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional
									from @tmpIntermediateResQuotes where qt_places = -1				
			return
		end
		
		-- если в результирующей таблице есть квоты на которых стоит стоп-сейл, нет мест или запрет на заезд, то выводим результат и выходим
		if exists(select top 1 1 from @tmpIntermediateResQuotes where qt_places = 0)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			select top 1 qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional
									from @tmpIntermediateResQuotes where qt_places = 0								
			return
		end
		
		insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
		select top 1 qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional
									from @tmpIntermediateResQuotes 
	end
	return  
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotesEx2] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotesEx2.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesEx2.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesEx.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwCheckQuotesEx.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotesEx]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotesEx]
GO

CREATE FUNCTION [dbo].[mwCheckQuotesEx](
	@svkey int, 
	@code int, 
	@subcode1 int,
	@subcode2 int, 
	@agentKey int, 
	@partnerKey int, 
	@date datetime,
	@day int,
	@days int,
	@requestOnRelease smallint, 
	@noPlacesResult int, 
	@checkAgentQuotes smallint, 
	@checkCommonQuotes smallint,
	@checkNoLongQuotes smallint,
	@findFlight smallint,
	@cityFrom int,
	@cityTo int,
	@flightpkkey int,
	@tourDuration int,
	@expiredReleaseResult int)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000))
begin
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>

	insert into @tmpResQuotes
	select 
		qt_svkey,
		qt_code,
		qt_subcode1,
		qt_subcode2,
		qt_agent,
		qt_prkey,
		qt_bycheckin,
		qt_byroom,
		qt_places,
		qt_allPlaces,
		qt_type,
		qt_long,
		qt_additional
	from
		dbo.mwCheckQuotesEx2(
			@svkey, 
			@code, 
			@subcode1,
			@subcode2, 
			@agentKey, 
			@partnerKey, 
			@date,
			@day,
			@days,
			@requestOnRelease, 
			@noPlacesResult, 
			@checkAgentQuotes, 
			@checkCommonQuotes,
			@checkNoLongQuotes,
			@findFlight,
			@cityFrom,
			@cityTo,
			@flightpkkey,
			@tourDuration,
			@expiredReleaseResult,
			DEFAULT,
			DEFAULT
		)
	return
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotesEx] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotesEx.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwCheckQuotesEx.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckFlightGroupsQuotesWithInnerFlights.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCheckFlightGroupsQuotesWithInnerFlights.sql */
/*********************************************************************/
if object_id('dbo.mwCheckFlightGroupsQuotesWithInnerFlights', 'p') is not null
	drop proc dbo.mwCheckFlightGroupsQuotesWithInnerFlights
go

create proc [dbo].[mwCheckFlightGroupsQuotesWithInnerFlights]
	@pagingType int,
	@charters varchar(256),
	@flightGroups varchar(256),
	@agentKey int,
	@tourdate datetime,
	@requestOnRelease int,
	@noPlacesResult int,
	@checkAgentQuota int,
	@checkCommonQuota int,
	@checkNoLongQuota int,
	@findFlight smallint,
	@tourDays int,
	@expiredReleaseResult int,
	@aviaQuotaMask smallint,
	@result varchar(256) output,
	@linkedcharters varchar(256),
	@airlineCodes ListSysNameValue readonly
as
begin
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>

	declare @curQuota varchar(256)

	declare @curPosition int
		set @curPosition = 0

	declare @tmpCurPosition int
	declare @tmpPrevPosition int
		

	declare @prevPosition int
		set @prevPosition = 1

	declare @charterString varchar(256)
		set @charterString  = ''

	declare @chkey int, @chday int,@chpkkey int,@chprkey int, @cityfromkey int, @citytokey int, @linkedchday int

	declare @flag smallint
		set @flag = 0

	--MEG00027974 Paul G 30.08.2010
	declare @linkedcharterstable table(chkey int, chday int);
	--вытащим из @linkedcharters ключи и дни связанных перелётов и положим в @linkedcharterstable
	--для удобности последующего использования
	while (len(@linkedcharters) > 0 and (charindex(',', @linkedcharters, @curPosition + 1) > 0 or @flag = 0))
	begin
		set @curPosition = charindex(',', @linkedcharters, @curPosition + 1)
		if (@curPosition = 0)
		begin
			set @charterString  = substring(@linkedcharters, @prevPosition, len(@linkedcharters))

			set @curPosition = len(@linkedcharters)
			set @flag = 1
		end 
		else
		begin
			set @charterString  = substring(@linkedcharters, @prevPosition, @curPosition - @prevPosition)
		end

		set @prevPosition = @curPosition + 1

		set @tmpPrevPosition = 0
		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chday = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chprkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @chpkkey = CAST(substring(@charterString, @tmpPrevPosition, len(@charterString) + 1 - @tmpPrevPosition) as int)

		insert into @linkedcharterstable(chkey, chday)
		values(@chkey, @chday)
	end

	set @curPosition = 0
	set @prevPosition = 1
	set @charterString  = ''
	set @flag = 0
	--End MEG00027974

	while (charindex(',', @charters, @curPosition + 1) > 0 or @flag = 0)
	begin
		set @curPosition = charindex(',', @charters, @curPosition + 1)
		if (@curPosition = 0)
		begin

			set @charterString  = substring(@charters, @prevPosition, len(@charters))

			set @curPosition = len(@charters)
			set @flag = 1
		end 
		else
			set @charterString  = substring(@charters, @prevPosition, @curPosition - @prevPosition)

		set @prevPosition = @curPosition + 1

		set @tmpPrevPosition = 0
		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chday = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chprkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @chpkkey = CAST(substring(@charterString, @tmpPrevPosition, len(@charterString) + 1 - @tmpPrevPosition) as int)

			set @curQuota = null
			if(@chkey > 0)
			begin 
				select @curQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@tourDays and prkey=@chprkey and pkkey=@chpkkey
				if (@curQuota is null)
				begin
					-- MEG00027974 Paul G 30.08.2010
					-- нужно расчитать день связанного перелёта
					select @cityfromkey = ch_citykeyfrom from charter where ch_key = @chkey
					select @citytokey = ch_citykeyto from charter where ch_key = @chkey
					select @linkedchday = chday 
					from charter
						inner join @linkedcharterstable on ch_key = chkey
					where ch_citykeyfrom = @citytokey and ch_citykeyto = @cityfromkey
					-- End MEG00027974

					exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @tourDays, @expiredReleaseResult, @aviaQuotaMask, @curQuota output, @linkedchday, 1, @airlineCodes
					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@tourDays,@chprkey, @chpkkey, @curQuota)
				end	
				if (len(@curQuota) = 0)
				begin
					set @result = ''
					return
				end

				set @result = dbo.mwConcatFlightsGroupsQuotas(@result, @curQuota)

			end
	end
end
go

grant exec on dbo.mwCheckFlightGroupsQuotesWithInnerFlights to public
go
/*********************************************************************/
/* end sp_mwCheckFlightGroupsQuotesWithInnerFlights.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckFlightGroupsQuotesWithInnerFlights.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckFlightGroupsQuotes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCheckFlightGroupsQuotes.sql */
/*********************************************************************/
if object_id('dbo.mwCheckFlightGroupsQuotes', 'p') is not null
	drop proc dbo.mwCheckFlightGroupsQuotes
go

create proc [dbo].[mwCheckFlightGroupsQuotes]
	@pagingType int,
	@chkey int,
	@flightGroups varchar(256),
	@agentKey int,
	@partnerKey int,
	@tourdate datetime,
	@day int,
	@requestOnRelease int,
	@noPlacesResult int,
	@checkAgentQuota int,
	@checkCommonQuota int,
	@checkNoLongQuota int,
	@findFlight smallint,
	@pkkey int,
	@tourDays int,
	@expiredReleaseResult int,
	@aviaQuotaMask smallint,
	@result varchar(256) output,	-- формат: <FreePlaces>:<TotalPlaces> [ | ...n]
	@linked_day int = null,
	@requestedPlaces int = 1,
	@airlineCodes ListSysNameValue readonly
as
begin

	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>
	if exists (select top 1 1 from SystemSettings with (nolock) where SS_ParmName = 'ServiceFlightSelection' and SS_ParmValue = 1)
	begin
		Declare @charterDateToService datetime
		set @charterDateToService = DATEADD(DAY, @day - 1, @tourdate)

		create table #resultTable
		(
			id int identity(1, 1),
			value nvarchar(max)
		)

		insert into #resultTable
		EXEC	[dbo].[WcfCheckFlightGroupQuotas]
				@charterGroupsString = @flightGroups,
				@charterKey = @chkey,
				@charterDate = @charterDateToService,
				@aviaQuotaMask = @aviaQuotaMask,
				@packetKey = @pkkey,
				@agentKey = @agentKey,
				@requestedPlaces = @requestedPlaces,
				@tourDuration = @tourDays

		select @result = value from #resultTable where id = 1
		Return;
	end

	-- настройки проверки квот через веб-сервис
	declare @checkQuotesOnWebService as bit, @checkQuotesService as nvarchar(150), @wasErrorCallingService bit
	set @checkQuotesOnWebService = 0
	set @wasErrorCallingService = 0
	select top 1 @checkQuotesOnWebService = ss_parmvalue from systemsettings with (nolock) where ss_parmname = 'NewSetToQuota'	

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @now datetime, @percentPlaces float
	select @now = currentDate from dbo.mwCurrentDate

	if(@aviaQuotaMask is null)
		set @aviaQuotaMask = 0

	declare @correctionResult varchar(128)
	set @result = ''
	set @correctionResult = ''

	declare @gpos int, @pos int, @gplaces int, @gallplaces int, @tmpPlaces int, @checkQuotesResult nvarchar(max), @tmpPlacesAll int, @gStep smallint, @gCorrection int
	set @gpos = 1
	
	declare @gseparatorPos int, @separatorPos int,
		@groupKeys varchar(256), @key varchar(256), @nkey int,
		@glen int, @len int

	set @glen = len(@flightGroups)
	while(@gpos < @glen)
	begin
		set @gseparatorPos = charindex('|', @flightGroups, @gpos)
		if(@gseparatorPos = 0)
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @glen - @gpos + 1)	
			set @gpos = @glen
		end
		else
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @gseparatorPos - @gpos)
			set @gpos = @gseparatorPos + 1
		end

		if(len(@result) > 0)
		begin
			set @result = @result + '|'
			if(@pagingType = @DYNAMIC_SPO_PAGING)
			begin
				set @correctionResult = @correctionResult + '|'
			end
		end

		set @gplaces = 0
		set @gallplaces = 0
		set @pos = 1
		set @len = len(@groupKeys)		
		while(@pos < @len)
		begin
			set @separatorPos = charindex(',', @groupKeys, @pos)
			if(@separatorPos = 0)
			begin
				set @key = substring(@groupKeys, @pos, @len - @pos + 1)	
				set @pos = @len
			end
			else
			begin
				set @key = substring(@groupKeys, @pos, @separatorPos - @pos)
				set @pos = @separatorPos + 1
			end

			set @nkey = cast(@key as int)
			if @checkQuotesOnWebService = 1
			begin
				-- включена проверка квот через веб-сервис
				-- подбор перелетов
				declare @cityFrom as int, @cityTo as int
				declare @charterDate datetime, @dayOfWeek int
				select top 1 @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @chkey
				set @charterDate = DATEADD(DAY, @day - 1, @tourdate)
				
				set @wasErrorCallingService = 1	-- в случае, если сервис проверки не отработает - установим признак ошибки, чтобы проверить квоты старым способом
				
				set @dayOfWeek = datepart(dw, @charterDate) - 1
				if(@dayOfWeek = 0)
					set @dayOfWeek = 7

				declare @airlineCodesList ListSysNameValue
				if exists (select top 1 1 from @airlineCodes)
					insert into @airlineCodesList select value from @airlineCodes
				else
					insert into @airlineCodesList select al_code from airline

				declare altCharters cursor for
				select ch_key from
				(
					select distinct ch_key, case when ch_key=@chkey then 1 else 0 end as pr 
					from Charter with (nolock)
					left join AirSeason with (nolock) on AS_CHKEY = CH_KEY
					inner join tbl_costs with(nolock) on (cs_svkey = 1 
														and cs_code = ch_key 
														and (@charterDate between cs_date and cs_dateend
															or @charterDate between cs_checkindatebeg and cs_checkindateend)
														and cs_subcode1=@nkey 
														and cs_pkkey = @pkkey)
					where (@findFlight <> 0 or ch_key=@chkey)
						and CH_CITYKEYFROM = @cityFrom
						and CH_CITYKEYTO = @cityTo
						and (AS_WEEK is null 
								or len(as_week)=0 
								or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
						and @charterDate between as_dateFrom and as_dateto
						and ch_airlinecode in (select value from @airlineCodesList)
				) as alts
				order by pr desc
				
				declare @remPlaces int, @remPlacesAll int, @remResult int
				create table #charterPlacesResult
				(
					xPlaces int,
					xPlacesAll int,
					xPriority int
				)

				declare @altChKey as int
				open altCharters

				fetch next from altCharters into @altChKey
				while @@FETCH_STATUS = 0
				begin
					declare @dateFrom datetime, @dateTo datetime
					set @dateFrom = dateadd(day, @day-1, @tourdate)
					set @dateTo = dateadd(day, @day-1, @tourdate)

					begin try							
						exec mwCheckQuotaOneResult 1, 1, @altChKey, @nkey, @dateFrom, @dateTo,
							null, @agentKey, @tourDays, @requestedPlaces, null, @checkQuotesResult output, @tmpPlaces output, @tmpPlacesAll output
						
						set @wasErrorCallingService = 0						
					end try
					begin catch
						set @wasErrorCallingService = 1
						break
					end catch
								
					declare @freePlacesMask as int

					if @checkQuotesResult in ('StopSale', 'NoPlaces')
						set @freePlacesMask = 2	-- no places
					else if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
					begin
						set @freePlacesMask = 4	-- request
						set @tmpPlaces = -1
					end
					else if @checkQuotesResult = 'QuotaExist'
						set @freePlacesMask = 1	-- yes
						
					if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
					begin
						declare @priority int
						if (@freePlacesMask = 1)
							set @priority = 1
						else if (@freePlacesMask = 4)
							set @priority = 2
						else
							set @priority = 3
						insert into #charterPlacesResult (xPlaces, xPlacesAll, xPriority) values (@tmpPlaces, @tmpPlacesAll, @priority)
					end
					
					fetch next from altCharters into @altChKey
				
				end
				
				if @wasErrorCallingService = 0
				begin
					select top 1 @tmpPlaces = xPlaces, @tmpPlacesAll = xPlacesAll from #charterPlacesResult order by xPriority asc					
				end
				
				close altCharters
				deallocate altCharters
				
				drop table #charterPlacesResult
			end
			
			-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
			-- ошибки работы с веб-сервисом проверки квот
			if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
			begin

				-- koshelev
				-- 29337 В процессе расчета у нас могут подбираться не только перелеты, но и партнеры по перелетам
				-- при этом в mwCheckQuotesEx2 при @partnerKey < 0 партнер подбирается, а в обратном случае нет
				-- случай, когда @findFlight = 1 и @partnerKey > 0 некорректна
				if (@findFlight = 1)
					set @partnerKey = -1

				select @tmpPlaces = qt_places, @tmpPlacesAll = qt_allPlaces
				from dbo.mwCheckQuotesEx2(1, @chkey, @nkey, 0, @agentKey, @partnerKey, @tourdate,
					@day, 1, @requestOnRelease, @noPlacesResult, @checkAgentQuota,
					@checkCommonQuota, @checkNoLongQuota, @findFlight, 0, 0, @pkkey,
					@tourDays, @expiredReleaseResult, @linked_day, @airlineCodes)
				
				-- если места есть, но их не хватает, то возвращаем нет мест
				if (@tmpPlaces < @requestedPlaces and @tmpPlaces > 0)
				BEGIN
					set @tmpPlaces = @noPlacesResult
					set @tmpPlacesAll = 0
				END
			end

			if(@gplaces = 0 or (@tmpPlaces > 0 and @tmpPlaces > @gplaces))
			begin
				set @gplaces = @tmpPlaces
				set @gallplaces = @tmpPlacesAll

				if(@pagingType = @DYNAMIC_SPO_PAGING)
				begin
					set @percentPlaces = 0.0
					if(@gplaces > 0 and @gallplaces > 0)
						set @percentPlaces = 1.0*@gplaces/@gallplaces
					exec dbo.GetDynamicCorrections @now,@tourdate,1,@chkey,@nkey,0,@percentPlaces, @gStep output, @gCorrection output				
				end
			end

			if(@gplaces > 0)
				break	
		end

		set @result = @result + cast(@gplaces as varchar) + ':' + cast(@gallplaces as varchar)
		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @correctionResult = @correctionResult + cast(@gCorrection as varchar) + ':' + cast(@gStep as varchar)
	end

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @result = @result + '#' + @correctionResult
end
go

grant exec on dbo.mwCheckFlightGroupsQuotes to public
go
/*********************************************************************/
/* end sp_mwCheckFlightGroupsQuotes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckFlightGroupsQuotes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_AddCosts.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.13)_Alter_Table_AddCosts.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'ChangeId' and id = object_id(N'[dbo].[AddCosts]'))
	ALTER TABLE [dbo].[AddCosts] Add ChangeId int default(-2147483648)
GO
/*********************************************************************/
/* end (2013.11.13)_Alter_Table_AddCosts.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_AddCosts.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_CostOffers.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.13)_Alter_Table_CostOffers.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'ChangeId' and id = object_id(N'[dbo].[CostOffers]'))
	ALTER TABLE [dbo].[CostOffers] Add ChangeId int default(-2147483648)
GO
/*********************************************************************/
/* end (2013.11.13)_Alter_Table_CostOffers.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_CostOffers.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_TURMARGIN.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.13)_Alter_Table_TURMARGIN.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'ChangeId' and id = object_id(N'[dbo].[TURMARGIN]'))
	ALTER TABLE [dbo].[TURMARGIN] Add ChangeId int default(-2147483648)
GO
if not exists (select 1 from dbo.syscolumns where name = 'TM_DeleteDate' and id = object_id(N'[dbo].[TURMARGIN]'))
	ALTER TABLE [dbo].[TURMARGIN] Add TM_DeleteDate datetime null
GO
/*********************************************************************/
/* end (2013.11.13)_Alter_Table_TURMARGIN.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Alter_Table_TURMARGIN.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_AddCostsChange.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_AddCostsChange.sql */
/*********************************************************************/
if exists (select id from sysobjects where xtype = 'TR' and name='T_AddCostsChange')
	drop trigger dbo.[T_AddCostsChange]
go

CREATE TRIGGER [dbo].[T_AddCostsChange]
   on [dbo].[AddCosts]
   after insert, update
AS 
BEGIN
	-- если мы добавляем новую доплату или деактивируем существующую доплату
	if ((not exists(select top 1 1 from deleted)) or (UPDATE(ADC_DisableDate)))
	begin
		declare @maxChangeId int
		set @maxChangeId = isnull((select max(ChangeId) from [dbo].[AddCosts]), -2147483648) + 1

		if (not exists(select top 1 1 from deleted))
		begin 
			update [dbo].[AddCosts]
			set ChangeId = @maxChangeId
			from [dbo].[AddCosts]
			where 
			-- ключи новых записей
			ADC_Id in (	select ADC_Id 
						from inserted 
						where ADC_Id not in (select ADC_Id from deleted))
		end

		if (UPDATE(ADC_DisableDate))
		begin
			update [dbo].[AddCosts]
			set ChangeId = @maxChangeId
			from [dbo].[AddCosts]
			where
			-- ключи измененных данных
			ADC_Id in (	select inserted.ADC_Id
						from inserted join deleted on inserted.ADC_Id = deleted.ADC_Id
						where isnull(inserted.ADC_DisableDate, '2013-12-17') != isnull(deleted.ADC_DisableDate, '2013-12-17'))
		end
	end
END
GO

/*********************************************************************/
/* end T_AddCostsChange.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_AddCostsChange.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CostOffersChange.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_CostOffersChange.sql */
/*********************************************************************/
if exists (select id from sysobjects where xtype = 'TR' and name='T_CostOffersChange')
	drop trigger dbo.[T_CostOffersChange]
go

CREATE TRIGGER [dbo].[T_CostOffersChange]
   on [dbo].[CostOffers]
   after update
AS 
BEGIN
	-- если мы изменяем статус нашего ценового блока
	if (UPDATE(CO_State))
	begin
		declare @maxChangeId int
		set @maxChangeId = isnull((select max(ChangeId) from [dbo].[CostOffers]), -2147483648) + 1

		update [dbo].[CostOffers]
		set ChangeId = @maxChangeId
		from [dbo].[CostOffers]
		where
		CO_id in (	select CO_id
					from inserted)
	end
END
GO

/*********************************************************************/
/* end T_CostOffersChange.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CostOffersChange.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TourMarginChange.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_TourMarginChange.sql */
/*********************************************************************/
if exists (select id from sysobjects where xtype = 'TR' and name='T_TourMarginChange')
	drop trigger dbo.[T_TourMarginChange]
go

CREATE TRIGGER [dbo].[T_TourMarginChange]
   on [dbo].[TURMARGIN]
   after insert, update
AS 
BEGIN
	-- реагируем на каждый чих	
	declare @maxChangeId int
	set @maxChangeId = isnull((select max(ChangeId) from [dbo].[TURMARGIN]), -2147483648) + 1

	update [dbo].[TURMARGIN]
	set ChangeId = @maxChangeId
	from [dbo].[TURMARGIN]
	where
	TM_Key in (	select TM_Key
				from inserted)	
END
GO

/*********************************************************************/
/* end T_TourMarginChange.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TourMarginChange.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.25)_Create_Table_TP_PricesHash.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.25)_Create_Table_TP_PricesHash.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TP_PricesHash]') AND type in (N'U'))
begin
	CREATE TABLE [dbo].[TP_PricesHash](
		[TpKey] [int] NOT NULL,
		[ToKey] [int] NOT NULL,
		[Hash] [nvarchar](max) NOT NULL,
	 CONSTRAINT [PK_TP_PricesHash_1] PRIMARY KEY CLUSTERED 
	(
		[TpKey] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY]

	ALTER TABLE [dbo].[TP_PricesHash]  WITH CHECK ADD  CONSTRAINT [FK_TP_PricesHash_TP_Prices] FOREIGN KEY([TpKey])
	REFERENCES [dbo].[TP_Prices] ([TP_Key])
	ON DELETE CASCADE

	ALTER TABLE [dbo].[TP_PricesHash] CHECK CONSTRAINT [FK_TP_PricesHash_TP_Prices]
end
go
grant select, update, insert, delete on [dbo].[TP_PricesHash] to public
go
/*********************************************************************/
/* end (2013.11.25)_Create_Table_TP_PricesHash.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.25)_Create_Table_TP_PricesHash.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.10.18)_Create_Table_CalculateTourQueue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.10.18)_Create_Table_CalculateTourQueue.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculateTourQueue]') AND type in (N'U'))
begin
	CREATE TABLE [dbo].[CalculateTourQueue](
		[Id] [int] IDENTITY(1,1) NOT NULL,
		[Queue] nvarchar(max) NOT NULL,
		[HostName] nvarchar(max) NULL,
		[UpdateTime] datetime NULL,
	 CONSTRAINT [PK_CalculateTourQueue] PRIMARY KEY CLUSTERED 
	(
		[Id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
end
GO
GRANT SELECT, INSERT, UPDATE, DELETE ON [dbo].[CalculateTourQueue] TO PUBLIC
GO
/*********************************************************************/
/* end (2013.10.18)_Create_Table_CalculateTourQueue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.10.18)_Create_Table_CalculateTourQueue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.03.04)_Insert_DescTypes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.03.04)_Insert_DescTypes.sql */
/*********************************************************************/
--добавление destType приоритеты подбора комиссий для путёвки
IF NOT EXISTS (SELECT 1 FROM DescTypes WHERE DT_Key = 135) 
	INSERT INTO DescTypes (DT_Key, DT_Name, DT_TABLEID) VALUES (135, 'Список колонок, детализация которых влияет на приоритет подбора комиссий для путёвки', 87)
Go
/*********************************************************************/
/* end (2014.03.04)_Insert_DescTypes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.03.04)_Insert_DescTypes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.07.09)_AlterTable_ Discounts.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.07.09)_AlterTable_ Discounts.sql */
/*********************************************************************/
IF NOT EXISTS(SELECT TOP 1 1 FROM SYS.COLUMNS COLMN INNER JOIN SYS.TABLES TABL ON COLMN.object_id = TABL.object_id
				    WHERE TABL.NAME = 'Discounts'
				        AND COLMN.NAME = 'DS_FILIAL')
BEGIN
	ALTER TABLE dbo.Discounts ADD DS_FILIAL INT NOT NULL DEFAULT 0
END

GO
/*********************************************************************/
/* end (2014.07.09)_AlterTable_ Discounts.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.07.09)_AlterTable_ Discounts.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPartnerCommission.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetPartnerCommission.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='GetPartnerCommission')
	drop proc dbo.GetPartnerCommission
go

CREATE PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null,
	 @nDepartureCity int = 0,
	 @sDiscountCode varchar(5) = null,
	 @sDiscountNumber varchar(10) = null,
	 @price decimal(16,6) = null,
	 @rate varchar(3) = null,
	 @dogovorCode varchar(10) = null,
     	 @nFilialKey int=0
AS
    --<VERSION>2009.2.21.0</VERSION>
    --<DATE>2014-02-04</DATE>
	declare @discountSettingValue varchar(256)
	select @discountSettingValue = ISNULL(SS_ParmValue, '0') from dbo.SystemSettings where SS_ParmName like 'SYSUseDiscountCards'
	if @discountSettingValue = '1' and ISNULL(@sDiscountCode, '') != '' and ISNULL(@sDiscountNumber, '') != ''
	begin
		
		declare @discountCode varchar(5)
		declare @discountNumber varchar(10)
		declare @reservationsCount int, @cardKey int
		declare @reservationsPrice decimal(16,6)
		declare @nationalRate varchar(3)
		declare @discount money
		declare @discountId int

		if (ISNULL(@dogovorCode, '') = '')
		begin
			set @sDiscountCode = rtrim(ltrim(@sDiscountCode))
			set @sDiscountNumber = rtrim(ltrim(@sDiscountNumber))
				
			select @cardKey = CD_Key from Cards where ISNULL(CD_Code, '') = ISNULL(@sDiscountCode, '') and ISNULL(CD_Number, '') = ISNULL(@sDiscountNumber, '')
			select @reservationsCount = count(RR_ID) from ReservationsRegister where RR_CardKey = @cardKey
			select @reservationsPrice = sum(DG_NationalCurrencyPrice) from Dogovor where DG_CODE in (select RR_DGCODE  COLLATE Cyrillic_General_CI_AS from ReservationsRegister where RR_CardKey = @cardKey)
			select @nationalRate = RA_Code from dbo.Rates where RA_National = 1
			exec ExchangeCost @price output, @rate, @nationalRate, @dCheckinDate

			set @reservationsPrice = ISNULL(@reservationsPrice, 0)
		
			select top 1 @discount = cast(ISNULL(DS_DISCOUNT, 0) as money), @discountId = DS_ID  
				from dbo.DiscountScheme, dbo.TurList, dbo.TurService where 
				TL_Key = @nTLKey and 
				TS_TRKey = TL_Key and
				DS_Series like @sDiscountCode and
				((DS_CityFromKey is not null and DS_CityFromKey = TL_CTDepartureKey) or (DS_CityFromKey is null)) and
				((DS_CountryKey is not null and DS_CountryKey = TL_CNKey) or (DS_CountryKey is null)) and
				((DS_CityKey is not null and DS_CityKey = TS_CTKey) or (DS_CityKey is null)) and
				((DS_TourTypeKey is not null and DS_TourTypeKey = TL_TIP) or (DS_TourTypeKey is null) or DS_TourTypeKey = -1) and
				((DS_ReservationsFrom is not null and DS_ReservationsFrom <= (@reservationsCount + 1)) or (DS_ReservationsFrom is null)) and
				((DS_ReservationsTo is not null and DS_ReservationsTo >= (@reservationsCount + 1)) or (DS_ReservationsTo is null)) and
				((DS_TotalCostFrom is not null and DS_TotalCostFrom <= (@reservationsPrice + @price)) or (DS_TotalCostFrom is null)) and
				((DS_TotalCostTo is not null and DS_TotalCostTo >= (@reservationsPrice + @price)) or (DS_TotalCostTo is null)) and
				((DS_MinPrice is not null and DS_MinPrice <= @price) or (DS_MinPrice is null))
			order by DS_ID DESC

			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		else
		begin
			
			select @discount = DD_DiscountPercent from dbo.DogovorDetails where DD_DGCODE like @dogovorCode
			set @discount = ISNULL(@discount, 0)
			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		
	end

     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey bigint, @nAttr int, @nCTDepartureKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) 
		from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
	
	declare @descr nvarchar(MAX), @query nvarchar(MAX)
	select top 1 @descr = DS_Value from Descriptions where DS_TABLEID = 87 AND DS_DTKEY = 135 AND DS_PKKEY = 0
	If(ISNULL(@descr,'') = '')
	Begin
		select top 1 @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
		where DS_PRKey IN(0, @nPRKey) 
			AND DS_BTKey IN ((CASE WHEN @nBTKey >= 1 THEN 1 ELSE 0 END), @nBTKey)
			AND DS_PGKey IN (0, @nPGKey) 				
            		AND DS_FILIAL IN (0, @nFilialKey)					
			AND DS_TLKey IN (0, @nTLKey) 
			AND DS_CNKey IN (0, @nCNKey) 
			AND DS_TPKEY IN (-1,@nTpKey)
			AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
			AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
			AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) 
				between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and dateadd(second,-1,dateadd(day,1,CONVERT(char(10), ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200'),126)))
			AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
			AND DS_DepartureCityKey IN (0, @nDepartureCity)
	    order by          DS_BTKey desc,
		DS_Priority desc
		, DS_Filial desc
		, DS_TLKey desc
		, DS_CNKEY desc
		, DS_TPKEY desc
		, DS_PRKey desc
		, DS_PGKey desc
		, DS_DepartureCityKey desc
		, ((CASE WHEN DS_CheckInFrom is null THEN 0 ELSE 1 END) + (CASE WHEN DS_CheckInTo is null THEN 0 ELSE 1 END)) desc
		, ISNULL(DS_DaysBeforeCheckIn, 99999) asc
		, ((CASE WHEN DS_DogovorCreateDateFrom is null THEN 0 ELSE 1 END) + (CASE WHEN DS_DogovorCreateDateTo is null THEN 0 ELSE 1 END)) desc
		, DS_DAKey desc

	End
	Else
	Begin
		set @descr=REPLACE(@descr,'11','DS_Priority desc')
		set @descr=REPLACE(@descr,'12','DS_Filial desc')
		set @descr=REPLACE(@descr,'13','DS_TLKey desc')
		set @descr=REPLACE(@descr,'14','DS_CNKEY desc')
		set @descr=REPLACE(@descr,'15','DS_TPKEY desc')
		set @descr=REPLACE(@descr,'16','DS_PRKey desc')
		set @descr=REPLACE(@descr,'17','DS_PGKey desc')
		set @descr=REPLACE(@descr,'18','DS_DepartureCityKey desc')
		set @descr=REPLACE(@descr,'19','((CASE WHEN DS_CheckInFrom is null THEN 0 ELSE 1 END) + (CASE WHEN DS_CheckInTo is null THEN 0 ELSE 1 END)) desc')
		set @descr=REPLACE(@descr,'20','ISNULL(DS_DaysBeforeCheckIn, 99999) asc')
		set @descr=REPLACE(@descr,'21','((CASE WHEN DS_DogovorCreateDateFrom is null THEN 0 ELSE 1 END) + (CASE WHEN DS_DogovorCreateDateTo is null THEN 0 ELSE 1 END)) desc')
		set @descr=REPLACE(@descr,'22','DS_DAKey desc')
		
		set @query = 'select top 1 @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
		where DS_PRKey IN(0, @nPRKey) 
			AND DS_BTKey IN ((CASE WHEN @nBTKey >= 1 THEN 1 ELSE 0 END), @nBTKey)
			AND DS_PGKey IN (0, @nPGKey) 				
            		AND DS_FILIAL IN (0, @nFilialKey) 					
			AND DS_TLKey IN (0, @nTLKey) 
			AND DS_CNKey IN (0, @nCNKey) 
			AND DS_TPKEY IN (-1,@nTpKey)
			AND @dCheckinDate between ISNULL(DS_CheckInFrom,''30-DEC-1899'') and ISNULL(DS_CheckInTo,''30-DEC-2200'')
			AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
			AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,''30-DEC-1899'')) 
				between ISNULL(DS_DogovorCreateDateFrom,''30-DEC-1899'') and dateadd(second,-1,dateadd(day,1,CONVERT(char(10), ISNULL(DS_DogovorCreateDateTo,''30-DEC-2200''),126)))
			AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
			AND DS_DepartureCityKey IN (0, @nDepartureCity)
	    order by DS_BTKey desc,' + @descr
		EXECUTE sp_executesql @query, N'@nDSKey int output, @nValue float output, @nIsPercent smallint output,
		@nPRKey int, @nBTKey int, @nPGKey int, @nFilialKey int, @nTLKey int, @nCNKey int, @nTpKey bigint, @dCheckinDate datetime, @DGCreateDate datetime, @discountAction int, @nDepartureCity int', 
		@nDSKey = @nDSKey output, @nValue = @nValue output, @nIsPercent = @nIsPercent output,
		@nPRKey = @nPRKey, @nBTKey = @nBTKey, @nPGKey = @nPGKey, @nFilialKey = @nFilialKey,  @nTLKey = @nTLKey, @nCNKey = @nCNKey, @nTpKey = @nTpKey, @dCheckinDate = @dCheckinDate, @DGCreateDate = @DGCreateDate, @discountAction = @discountAction, @nDepartureCity = @nDepartureCity 
	End
	 
     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
	
	declare @logSetting int
	declare @logString nvarchar(MAX)
	SELECT TOP 1 @logSetting = [SS_ParmValue] FROM [dbo].[SystemSettings] where [SS_ParmName] = 'SYSIsLoggingCommissions'
	if(@logSetting = 1)
	begin
		set @logString = 
		'@nTLKey:'+Convert(varchar,@nTLKey)+'; @nPRKey:'+Convert(varchar,@nPRKey)+ '; @nFilialKey:' + Convert(varchar,@nFilialKey)+'; @nBTKey:'+Convert(varchar,@nBTKey)+
		'; @nDSKey:'+Convert(varchar,@nDSKey)+'; @nValue:'+Convert(varchar,@nValue)+'; @nIsPercent:'+Convert(varchar,@nIsPercent)+
		'; @dCheckinDate:'+Convert(varchar,@dCheckinDate)+'; @nCNKey:'+Convert(varchar,@nCNKey)+'; @nDepartureCity:'+Convert(varchar,@nDepartureCity)+
		'; @sDiscountCode:'+Convert(varchar,isnull(@sDiscountCode,''))+'; @sDiscountNumber:'+Convert(varchar, isnull(@sDiscountNumber, ''))+
		'; @dogovorCode:'+Convert(varchar, isnull(@dogovorCode, ''))+
		'; orderBy:'+ISNULL(@descr,'spDefaults')
		exec WriteToSystemLog 4, @logString
	end

GO

grant execute on [dbo].[GetPartnerCommission] to public

GO

/*********************************************************************/
/* end sp_GetPartnerCommission.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPartnerCommission.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_InsDogovor.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_InsDogovor.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InsDogovor]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[InsDogovor]
GO

CREATE PROCEDURE [dbo].[InsDogovor]
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nDiscountKey int = null,				-- ключ скидки(комиссии)
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (320) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@nCodePartner varchar (20) = null,		-- код путёвки партнера

@sOldDogovor varchar (10) = null		-- не использовать для переименования используйте ХП RenameDogovor
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

-- AleXK обнуляем статус путевки. При создани путевки он должен быть "В работе" т.е 0
set @nStatus = 0

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	declare @da_key int
	if @nDiscountKey is not null and @nDiscountKey <> 0 and @nDiscountKey <> -1
	begin
		set @da_key = null
		select @da_key = DS_DAKey from Discounts where DS_Key = @nDiscountKey
	end

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID
	SET @nAgentDogovorGlobalType = ISNULL(@nAgentDogovorGlobalType, 0)

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType, DG_DAKey, DG_CodePartner)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType, @da_key, @nCodePartner)

	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	--пишем ключ акции в историю
		if @da_key is not null
		begin
			if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_OAId = 25) > 0
			begin
				delete from dbo.history where HI_DGCOD = @sDogovor and HI_OAId = 25
			end

			insert into dbo.history
			(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
			values
			(@sDogovor, @sHI_WHO, cast(@da_key as varchar), 'Ключ акции', 'INS', 'DA_KEY', 25)
		end


	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0

GO

grant execute on [dbo].[InsDogovor] to public
GO
/*********************************************************************/
/* end sp_InsDogovor.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_InsDogovor.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'dropMwReplProcedures.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin dropMwReplProcedures.sql */
/*********************************************************************/
-- удаляет неиспользуемые более процедуры mwReplGetSubscriptions, mwReplAddSubscription, mwReplRemoveSubscription
if exists (select * from sys.objects where name = 'mwReplGetSubscriptions' and [type] = 'TF')
begin

	drop function mwReplGetSubscriptions

end

if exists (select * from sys.objects where name = 'mwReplAddSubscription' and [type] = 'P')
begin

	drop procedure mwReplAddSubscription

end

if exists (select * from sys.objects where name = 'mwReplRemoveSubscription' and [type] = 'P')
begin

	drop procedure mwReplRemoveSubscription

end

GO
/*********************************************************************/
/* end dropMwReplProcedures.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'dropMwReplProcedures.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_RecreateDependentObjects.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_RecreateDependentObjects.sql */
/*********************************************************************/
if exists(select top 1 1 from sys.objects where name = 'RecreateDependentObjects' and type = 'P')
	drop procedure RecreateDependentObjects
go

create procedure RecreateDependentObjects
-- выполняет указанный скрипт после удаления и до создания зависимых от колонки @ColumnName объектов
-- сейчас в качестве зависимых объектов поддерживаются только некластеризованные и кластеризованные индексы
--<VERSION>9.2.21</VERSION>
--<DATE>2014-10-08</DATE>
(
	@TableName sysname,				-- имя таблицы, колонка которой удаляется
	@ColumnNames ListNvarcharValue readonly,			-- список имен колонок, от которых будут искаться зависимые объекты
	@CustomScript nvarchar(max),	-- скрипт, выполняемый между созданием и удалением зависимых объектов
	@recreateWithoutColumn bit = 0,	-- флаг, указывающий, что в зависимые объекты надо пересоздавать без переданной колонки
	@useTransaction bit = 1			-- флаг, указывающий, что при выполнении изменений нужно указывать транзакцию
)
as
begin
	-- ANSI_PADDING OFF setting is incompatible with xml data types, used in this stored procedure
	SET ANSI_PADDING ON;

	declare @errorMessage nvarchar(max)

	-- check arguments
	if not exists (select top 1 1 from sys.tables where name = @TableName)
	begin
		set @errorMessage = 'Table ' + @TableName + ' was not found in database.'
		RAISERROR(@errorMessage, 16, 1)
		return
	end

	if exists (select top 1 1 
				from @ColumnNames 
				where value not in (select col.name 
							from sys.columns col 
							left join sys.tables tab on col.object_id = tab.object_id
							where tab.name = @TableName)
				)
	begin
		select @errorMessage = coalesce(@errorMessage + ', ', '') + value 
		from @ColumnNames 
		where value not in (select col.name 
							from sys.columns col 
							left join sys.tables tab on col.object_id = tab.object_id
							where tab.name = @TableName)

		set @errorMessage = 'Next columns was not found in table ' + @TableName + ': ' + @errorMessage
		RAISERROR(@errorMessage, 16, 1)
		return
	end

	-- признак, что пересоздание ссылающихся на колонку объектов прошло успешно
	declare @updateReferencesComplete as bit
	declare @errmsg as nvarchar(max)

	-- обработка индексов
	declare @ixName sysname
	declare @ixType tinyint
	declare @ixIsPrimaryKey bit

	declare @totalSql as nvarchar(max)
	declare @dropIndexSql as nvarchar(max)
	declare @createIndexSql as nvarchar(max)
	set @dropIndexSql = ''
	set @createIndexSql = ''

	declare indexesCursor cursor for
	select ix.name, ix.type, is_primary_key
	from sys.tables tab
	left join sys.indexes ix on ix.object_id = tab.object_id
	where tab.name = @TableName
		and exists (select top 1 1 
					from sys.index_columns ic
					left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
					where ic.index_id = ix.index_id 
						and ic.object_id = tab.object_id
						and col.name in (select value from @ColumnNames)
					)

	open indexesCursor

	begin try
		fetch next from indexesCursor into @ixName, @ixType, @ixIsPrimaryKey
		while @@FETCH_STATUS = 0
		begin
			if @ixType <> 2 and @ixType <> 1
			begin
				select @errorMessage = coalesce(@errorMessage + ', ', '') + value from @ColumnNames 

				set @errorMessage = 'Not supported index type is dependent on specified columns ' + @errorMessage + '
				This stored procedure supports only nonclustered and clustered indexes recreation! Not supported index name: ' 
					+ @ixName + ' on table: ' + @TableName
				RAISERROR(@errorMessage, 16, 1)
			end
			
			declare @indexColumns nvarchar(max)
			declare @includedColumns nvarchar(max)

			set @indexColumns = ''
			set @indexColumns = stuff((select ',' + col.name + 
					case
						when ic.is_descending_key = 1 then ' desc'
						else ' asc'
					end
					from sys.tables tab
					left join sys.indexes ix on ix.object_id = tab.object_id
					left join sys.index_columns ic on ic.object_id = tab.object_id and ic.index_id = ix.index_id
					left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
					where ic.index_id = ix.index_id 
						and ic.object_id = tab.object_id
						and ic.is_included_column = 0
						and ((@recreateWithoutColumn = 1 and col.name not in (select value value from @ColumnNames)) or @recreateWithoutColumn = 0)
						and tab.name = @TableName
						and ix.name = @ixName
					for xml path(''), type
					).value('.', 'varchar(max)'),1,1,'')
			
			-- если некластеризованный индекс, то запоминаем неключевые столбцы и удаляем индекс   	
			-- если мы хотим удалить кластеризованный индекс, то оно должно передаваться в скрипт, выполняемый между созданием и удалением зависимых объектов
			if @ixType = 2
			begin
				set @includedColumns = stuff((select ',' + col.name
						from sys.tables tab
						left join sys.indexes ix on ix.object_id = tab.object_id
						left join sys.index_columns ic on ic.object_id = tab.object_id and ic.index_id = ix.index_id
						left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
						where ic.index_id = ix.index_id 
							and ic.object_id = tab.object_id
							and ic.is_included_column = 1
							and ((@recreateWithoutColumn = 1 and col.name not in (select value value from @ColumnNames)) or @recreateWithoutColumn = 0)
							and tab.name = @TableName
							and ix.name = @ixName
						for xml path(''), type
						).value('.', 'varchar(max)'),1,1,'')
				
				set @dropIndexSql = @dropIndexSql + '
				drop index [@ixName] on [@TableName]'
			end
				
			if @indexColumns is not null
			begin
				set @createIndexSql = @createIndexSql + 
				'
				if not exists(
						select top 1 1 
						from sys.tables tab
						left join sys.indexes ix on ix.object_id = tab.object_id
						where tab.name = ''@TableName''
							and ix.name = ''@ixName''
						)
				begin
					create @indexType index [@ixName] on [@TableName]
					(
						@indexColumns
					)'

				if @includedColumns is not null
				begin
					set @createIndexSql = @createIndexSql + 
					'
					include
					(
						@includedColumns
					)
					'
					set @createIndexSql = replace(@createIndexSql, '@includedColumns', isnull(@includedColumns, ''))
				end
				set @createIndexSql = @createIndexSql + 
				'
					WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
						ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
				end
				'
				set @createIndexSql = replace(@createIndexSql, '@indexColumns', @indexColumns)
				set @createIndexSql = replace(@createIndexSql, '@indexType', case when @ixType = 2 then 'nonclustered' when @ixType = 1 then 'clustered' end)
			end

			set @createIndexSql = replace(@createIndexSql, '@ixName', @ixName)
			set @createIndexSql = replace(@createIndexSql, '@TableName', @TableName)
			set @dropIndexSql = replace(@dropIndexSql, '@ixName', @ixName)
			set @dropIndexSql = replace(@dropIndexSql, '@TableName', @TableName)

			fetch next from indexesCursor into @ixName, @ixType, @ixIsPrimaryKey
		end
	end try
	begin catch 
		set @errmsg = error_message()
		set @updateReferencesComplete = 0
	end catch

	close indexesCursor
	deallocate indexesCursor

	if @updateReferencesComplete = 0
	begin
		RAISERROR(@errmsg, 16, 1)
		return
	end

	set @totalSql = ''
	if (@useTransaction = 1)
	begin
		set @totalSql = @totalSql + '
		begin transaction dropAndCreate'
	end

	set @totalSql = @totalSql + '
	' + @dropIndexSql + '
	' + @customScript + '
	' + @createIndexSql

	if (@useTransaction = 1)
	begin
		set @totalSql = @totalSql + '
		commit transaction dropAndCreate'
	end
	
	exec sp_executesql @totalSql
end

GO

grant exec on RecreateDependentObjects to public

GO
/*********************************************************************/
/* end sp_RecreateDependentObjects.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_RecreateDependentObjects.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-19)_Insert_SYSQuotasToHistory.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-03-19)_Insert_SYSQuotasToHistory.sql */
/*********************************************************************/
if not exists(select 1 from SystemSettings with(nolock) where SS_ParmName like 'SYSQuotasToHistory')
begin
	insert into SystemSettings (SS_ParmName, SS_ParmValue)
	values ('SYSQuotasToHistory', '1')
end
GO
/*********************************************************************/
/* end (2014-03-19)_Insert_SYSQuotasToHistory.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-19)_Insert_SYSQuotasToHistory.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.15)_PriceKeyToBigInt_Key_TPPrices.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.05.15)_PriceKeyToBigInt_Key_TPPrices.sql */
/*********************************************************************/
IF (SELECT DATA_TYPE FROM information_schema.COLUMNS WHERE TABLE_NAME='Key_TPPrices' AND COLUMN_NAME='ID') = 'int'
BEGIN
	ALTER TABLE Key_TPPrices ALTER COLUMN ID bigint NULL
END
GO

/*********************************************************************/
/* end (2014.05.15)_PriceKeyToBigInt_Key_TPPrices.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.15)_PriceKeyToBigInt_Key_TPPrices.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_Prices.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.04.15)_PriceKeyToBigInt_TP_Prices.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_Prices_add')
BEGIN
	-- вставляем новую колонку в таблицу TP_Prices
	if not exists (select 1 from dbo.syscolumns where name = 'tp_keyNew' and id = object_id(N'[dbo].[TP_Prices]'))
		alter table tp_prices add tp_keyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки tp_keyNew в TP_Prices завершено', 'TP_Prices_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_Prices_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'tp_keyNew' and id = object_id(N'[dbo].[TP_Prices]'))
	BEGIN	
		declare @sql varchar(4000)
		set @sql = '
		if not exists (select top 1 1 from tp_prices WHERE tp_keyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(tp_key) from tp_prices with(nolock)
			select @max_tpkey = max(tp_key) from tp_prices with(nolock)

			-- копируем значения tp_key в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update tp_prices SET tp_keyNew = tp_key where tp_key < (@cur_tpkey + 1000000) and tp_key >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)
		        
		-- удаляем внешний ключ по таблице mwPriceDataTable
		declare @fkName nvarchar(max), @parentName nvarchar(max)

		declare tableNameCursor cursor local fast_forward for
		select fk.name, parent.name
		from sys.foreign_keys fk
		left join sys.tables parent on parent.object_id = fk.parent_object_id
		left join sys.tables ref on ref.object_id = fk.referenced_object_id
		where parent.name like 'mwPriceDataTable%'
			and ref.name = 'tp_prices'

		open tableNameCursor
		fetch next from tableNameCursor into @fkName, @parentName 
		while (@@FETCH_STATUS = 0)
		begin	
			declare @query nvarchar(max)	

			set @query = '
			if EXISTS (SELECT * FROM sys.foreign_keys WHERE name = '''+ @fkName +''')
			begin			
				ALTER TABLE [dbo].['+ @parentName + '] DROP CONSTRAINT '+ @fkName + '
			end
			'
			exec (@query)

			fetch next from tableNameCursor into @fkName, @parentName 
		end
		close tableNameCursor
		deallocate tableNameCursor
	
		-- удаляем внешний ключ по таблице TP_PriceDetails
		IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TP_PriceDetails_TP_Prices]') AND parent_object_id = OBJECT_ID(N'[dbo].[TP_PriceDetails]'))
			ALTER TABLE [dbo].[TP_PriceDetails] DROP CONSTRAINT [FK_TP_PriceDetails_TP_Prices]
	
		-- удаляем внешний ключ по таблице TP_PricesHash
		IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TP_PricesHash_TP_Prices]') AND parent_object_id = OBJECT_ID(N'[dbo].[TP_PricesHash]'))
			ALTER TABLE [dbo].[TP_PricesHash] DROP CONSTRAINT [FK_TP_PricesHash_TP_Prices]
	
		-- колонки для удаления
		declare @columns as ListNvarcharValue
		insert into @columns values ('TP_Key')

		declare @tablename varchar(100)
		set @tablename = 'tp_prices'

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumnsScript as nvarchar(max)
		set @dropColumnsScript = ''
		select @dropColumnsScript = @dropColumnsScript + '
			-- удаляем первичный ключ PK_TP_Prices
			IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[TP_Prices]'') AND name = N''PK_TP_Prices'')
				ALTER TABLE [dbo].[TP_Prices] DROP CONSTRAINT [PK_TP_Prices]
		
			IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @tablename + ']''))
			begin
				alter table ' + @tablename + ' drop column ' + value + '
			end
		
			-- переименовываем колонку tp_keyNew в TP_Key
			EXEC sp_rename ''dbo.tp_prices.tp_keyNew'', ''TP_Key'', ''COLUMN''

			ALTER TABLE ' + @tablename + ' ALTER COLUMN TP_Key bigint not null
	
			-- добавляем первичный ключ PK_TP_Prices
			ALTER TABLE [dbo].[TP_Prices] ADD  CONSTRAINT [PK_TP_Prices] PRIMARY KEY CLUSTERED 
			(
				[TP_Key] ASC
			)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)  
			ON [PRIMARY]
		'
		from @columns
	 
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @tableName, @columns, @dropColumnsScript, 0, 0
	END

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа TP_Key на bigint в TP_Prices завершено', 'TP_Prices_change', HOST_NAME())
END
GO	
	
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PriceDetails_add')
BEGIN
	-- перед добавлением внешнего ключа на таблицы, нужно изменить тип колонки в этих таблицах (TP_PriceDetails, mwPriceDataTable)
	-- вставляем новую колонку в таблицу TP_PriceDetails
	if not exists (select 1 from dbo.syscolumns where name = 'PD_TPKeyNew' and id = object_id(N'[dbo].[TP_PriceDetails]'))
		alter table TP_PriceDetails add PD_TPKeyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки PD_TPKeyNew в TP_PriceDetails завершено', 'TP_PriceDetails_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PriceDetails_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'PD_TPKeyNew' and id = object_id(N'[dbo].[TP_PriceDetails]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from TP_PriceDetails WHERE PD_TPKeyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(PD_TPKey) from TP_PriceDetails with(nolock)
			select @max_tpkey = max(PD_TPKey) from TP_PriceDetails with(nolock)

			-- копируем значения tp_key в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PriceDetails SET PD_TPKeyNew = PD_TPKey where PD_TPKey < (@cur_tpkey + 1000000) and PD_TPKey >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)

		-- удаляем колонку
		if exists (select 1 from dbo.syscolumns where name = 'PD_TPKey' and id = object_id(N'[dbo].[TP_PriceDetails]'))
			alter table TP_PriceDetails DROP COLUMN PD_TPKey 

		-- переименовываем колонку PD_TPKeyNew в PD_TPKey
		EXEC sp_rename 'dbo.TP_PriceDetails.PD_TPKeyNew', 'PD_TPKey', 'COLUMN'

		ALTER TABLE dbo.TP_PriceDetails ALTER COLUMN PD_TPKey bigint not null
	END
	
	IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_TP_PriceDetails_TP_Prices]') AND parent_object_id = OBJECT_ID(N'[dbo].[TP_PriceDetails]'))
	BEGIN
		-- добавляем внешний ключ по таблице TP_PriceDetails
		ALTER TABLE [dbo].[TP_PriceDetails]  WITH NOCHECK ADD  CONSTRAINT [FK_TP_PriceDetails_TP_Prices] FOREIGN KEY([PD_TPKey])
		REFERENCES [dbo].[TP_Prices] ([TP_Key])
		ON DELETE CASCADE
		NOT FOR REPLICATION 
	END

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа колонки PD_TPKey в TP_PriceDetails завершено', 'TP_PriceDetails_change', HOST_NAME())

END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesHash_add')
BEGIN
	-- вставляем новую колонку в таблицу TP_PricesHash
	if not exists (select 1 from dbo.syscolumns where name = 'TpKeyNew' and id = object_id(N'[dbo].[TP_PricesHash]'))
		alter table TP_PricesHash add TpKeyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки TpKeyNew в TP_PricesHash завершено', 'TP_PricesHash_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesHash_change')
BEGIN	
	if exists (select 1 from dbo.syscolumns where name = 'TpKeyNew' and id = object_id(N'[dbo].[TP_PricesHash]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from TP_PricesHash WHERE TpKeyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(TpKey) from TP_PricesHash with(nolock)
			select @max_tpkey = max(TpKey) from TP_PricesHash with(nolock)

			-- копируем значения tp_key в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PricesHash SET TpKeyNew = TpKey where TpKey < (@cur_tpkey + 1000000) and TpKey >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)
			
		-- колонки для удаления
		declare @columns as ListNvarcharValue
		insert into @columns values ('TpKey')

		declare @tablename varchar(100)
		set @tablename = 'TP_PricesHash'

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumnsScript as nvarchar(max)
		set @dropColumnsScript = ''
		select @dropColumnsScript = @dropColumnsScript + '
			-- удаляем первичный ключ
			IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N''[dbo].[TP_PricesHash]'') AND name = N''PK_TP_PricesHash_1'')
				ALTER TABLE [dbo].[TP_PricesHash] DROP CONSTRAINT [PK_TP_PricesHash_1]
			
			IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @tablename + ']''))
			begin
				alter table ' + @tablename + ' drop column ' + value + '
			end
		
			-- переименовываем колонку PD_TPKeyNew в PD_TPKey
			EXEC sp_rename ''dbo.TP_PricesHash.TpKeyNew'', ''TpKey'', ''COLUMN''

			ALTER TABLE dbo.TP_PricesHash ALTER COLUMN TpKey bigint not null

			-- добавляем внешний ключ по таблице TP_PricesHash
			IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N''[dbo].[FK_TP_PricesHash_TP_Prices]'') AND parent_object_id = OBJECT_ID(N''[dbo].[TP_PricesHash]''))
			BEGIN
				ALTER TABLE [dbo].[TP_PricesHash]  WITH CHECK ADD  CONSTRAINT [FK_TP_PricesHash_TP_Prices] FOREIGN KEY([TpKey])
				REFERENCES [dbo].[TP_Prices] ([TP_Key])
				ON DELETE CASCADE
			END
		
			-- Добавляем первичный ключ
			ALTER TABLE [dbo].[TP_PricesHash] ADD  CONSTRAINT [PK_TP_PricesHash_1] PRIMARY KEY CLUSTERED 
			(
				[TpKey] ASC
			)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
			'
		from @columns
			
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @tableName, @columns, @dropColumnsScript, 1, 0
	END

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа колонки TpKey в TP_PricesHash завершено', 'TP_PricesHash_change', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'mwPriceDataTables_add')
BEGIN
	-- изменяем тип колонки в таблицах mwPriceDataTable
	declare @mwPriceDataTableName varchar(100)
	
	declare Curs cursor local fast_forward for 
	select name 
	from sysobjects with(nolock) 
	where name like 'mwPriceDataTable%' and xtype = 'u'
	order by name

	open Curs

	fetch Curs into @mwPriceDataTableName

	-- пройдемся по всем поисковым таблицам mwPriceDataTable
	while (@@FETCH_STATUS = 0)
	begin
		INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки pt_pricekeyNew в таблицу ' + @mwPriceDataTableName + ' начато', 'mwPriceDataTable_add', HOST_NAME())

		declare @query nvarchar(max)	

		set @query = '
		if not exists (select 1 from dbo.syscolumns where name = ''pt_pricekeyNew'' and id = object_id(N''[dbo].[' + @mwPriceDataTableName + ']''))
			alter table [dbo].[' + @mwPriceDataTableName + '] add pt_pricekeyNew bigint 
		'
		--print @query
		exec (@query)

		INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки pt_pricekeyNew в таблицу ' + @mwPriceDataTableName + ' завершено', 'mwPriceDataTable_add', HOST_NAME())

		fetch Curs into @mwPriceDataTableName
	end
	close Curs
	deallocate Curs

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление колонки pt_pricekeyNew в таблицы mwPriceDataTable завершено', 'mwPriceDataTables_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'mwPriceDataTables_change')
BEGIN
	-- изменяем тип колонки в таблицах mwPriceDataTable
	declare @mwPriceDataTableName varchar(100)

	declare Curs cursor local fast_forward for 
	select name 
	from sysobjects with(nolock) 
	where name like 'mwPriceDataTable%' and xtype = 'u'
	order by name

	open Curs

	fetch Curs into @mwPriceDataTableName

	-- пройдемся по всем поисковым таблицам mwPriceDataTable
	while (@@FETCH_STATUS = 0)
	begin
	
		INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа колонки pt_pricekey в таблице ' + @mwPriceDataTableName + ' начато', 'mwPriceDataTable_change', HOST_NAME())

		declare @query nvarchar(max)	

		set @query = '
		if exists (select 1 from dbo.syscolumns where name = ''pt_pricekeyNew'' and id = object_id(N''[dbo].[' + @mwPriceDataTableName + ']''))
		begin
			if not exists (select top 1 1 from ' + @mwPriceDataTableName + ' where pt_pricekeyNew is not null)
			begin
				declare @cur_pricekey bigint, @max_pricekey bigint 
				select @cur_pricekey = min(pt_pricekey) from ' + @mwPriceDataTableName + ' with(nolock)
				select @max_pricekey = max(pt_pricekey) from ' + @mwPriceDataTableName + ' with(nolock)

				-- копируем значения tp_key в новую колонку
				while (@cur_pricekey <= @max_pricekey)
				begin
					update ' + @mwPriceDataTableName + ' SET pt_pricekeyNew = pt_pricekey where pt_pricekey < (@cur_pricekey + 1000000) and pt_pricekey >= @cur_pricekey
					set @cur_pricekey = @cur_pricekey + 1000000
				end
			end
		end
		'
		--print @query
		exec (@query)
		
		-- колонки для удаления
		declare @pricekeyColumns as ListNvarcharValue
		delete from @pricekeyColumns 
		insert into @pricekeyColumns values ('pt_pricekey')

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumns as nvarchar(max)
		set @dropColumns = ''
		select @dropColumns = @dropColumns + '
			if exists (select 1 from dbo.syscolumns where name = ''pt_pricekeyNew'' and id = object_id(N''[dbo].[' + @mwPriceDataTableName + ']''))
			begin
				IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @mwPriceDataTableName + ']''))
				begin
					alter table ' + @mwPriceDataTableName + ' drop column ' + value + '
				end
			
				EXEC sp_rename ''[dbo].[' + @mwPriceDataTableName + '].pt_pricekeyNew'', ''pt_pricekey'', ''COLUMN''
		
				ALTER TABLE ' + @mwPriceDataTableName + ' ALTER COLUMN pt_pricekey bigint not null
			end
			'
		from @pricekeyColumns
				
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @mwPriceDataTableName, @pricekeyColumns, @dropColumns, 1, 0
		
		declare @viewName as sysname
		set @viewName = replace (@mwPriceDataTableName, 'mwPriceDataTable', 'mwPriceTable')
		exec RefreshViewForAll @viewName
		
		INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа колонки pt_pricekey в таблице ' + @mwPriceDataTableName + ' завершено', 'mwPriceDataTable_change', HOST_NAME())

		fetch Curs into @mwPriceDataTableName
	end
	close Curs
	deallocate Curs
	
	if dbo.mwReplIsPublisher() > 0 
	begin
		-- удаляем записи из mwPriceDataTable которых нет в TP_Prices
		while (1 = 1)
		begin
			delete top(100000) from mwPriceDataTable where pt_pricekey not in (select tp_key from TP_Prices)
			if (@@ROWCOUNT = 0) 
				break
		end
		
		IF NOT EXISTS (select top 1 1
			from sys.foreign_keys fk
			left join sys.tables parent on parent.object_id = fk.parent_object_id
			left join sys.tables ref on ref.object_id = fk.referenced_object_id
			where parent.name = 'mwPriceDataTable'
				and ref.name = 'tp_prices')
		BEGIN
			-- добавляем внешний ключ по таблице mwPriceDataTable
			ALTER TABLE [dbo].[mwPriceDataTable]  WITH CHECK ADD FOREIGN KEY([pt_pricekey])
			REFERENCES [dbo].[TP_Prices] ([TP_Key])
			ON DELETE CASCADE
		END
	end

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа колонки pt_pricekeyNew в таблицах mwPriceDataTable завершено', 'mwPriceDataTables_change', HOST_NAME())
END
GO

exec RefreshViewForAll 'TP_Prices'
go

exec RefreshViewForAll 'TP_PriceDetails'
go

exec RefreshViewForAll 'TP_PricesHash'
go

/*********************************************************************/
/* end (2014.04.15)_PriceKeyToBigInt_TP_Prices.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_Prices.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_PriceComponents.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.04.15)_PriceKeyToBigInt_TP_PriceComponents.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PriceComponents_add')
BEGIN
	-- вставляем новую колонку в таблицу TP_PriceComponents
	if not exists (select 1 from dbo.syscolumns where name = 'PC_TPKeyNew' and id = object_id(N'[dbo].[TP_PriceComponents]'))
		alter table TP_PriceComponents add PC_TPKeyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление PC_TPKeyNew в TP_PriceComponents завершено', 'TP_PriceComponents_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PriceComponents_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'PC_TPKeyNew' and id = object_id(N'[dbo].[TP_PriceComponents]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '	
		if not exists (select top 1 1 from TP_PriceComponents WHERE PC_TPKeyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(PC_TPKey) from TP_PriceComponents with(nolock)
			select @max_tpkey = max(PC_TPKey) from TP_PriceComponents with(nolock)

			-- копируем значения PC_TPKey в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PriceComponents SET PC_TPKeyNew = PC_TPKey where PC_TPKey < (@cur_tpkey + 1000000) and PC_TPKey >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)			
	
		-- колонки для удаления
		declare @columns as ListNvarcharValue
		insert into @columns values ('PC_TPKey')

		declare @tablename varchar(100)
		set @tablename = 'TP_PriceComponents'

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumnsScript as nvarchar(max)
		set @dropColumnsScript = ''
		select @dropColumnsScript = @dropColumnsScript + '
			IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @tablename + ']''))
			begin
				alter table ' + @tablename + ' drop column ' + value + '
			end
		
			-- переименовываем колонку PC_TPKeyNew в PC_TPKey
			EXEC sp_rename ''dbo.TP_PriceComponents.PC_TPKeyNew'', ''PC_TPKey'', ''COLUMN''
			'
		from @columns
			
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @tableName, @columns, @dropColumnsScript, 1, 0
		
	END

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа PC_TPKey в TP_PriceComponents завершено', 'TP_PriceComponents_change', HOST_NAME())
END
GO

exec RefreshViewForAll 'TP_PriceComponents'
go

/*********************************************************************/
/* end (2014.04.15)_PriceKeyToBigInt_TP_PriceComponents.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_PriceComponents.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_PricesDeleted.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.04.15)_PriceKeyToBigInt_TP_PricesDeleted.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesDeleted_add')
BEGIN
	if not exists (select 1 from dbo.syscolumns where name = 'TPD_TPKeyNew' and id = object_id(N'[dbo].[TP_PricesDeleted]'))
		alter table TP_PricesDeleted add TPD_TPKeyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление TPD_TPKeyNew в TP_PricesDeleted завершено', 'TP_PricesDeleted_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesDeleted_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'TPD_TPKeyNew' and id = object_id(N'[dbo].[TP_PricesDeleted]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from TP_PricesDeleted WHERE TPD_TPKeyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(TPD_TPKey) from TP_PricesDeleted with(nolock)
			select @max_tpkey = max(TPD_TPKey) from TP_PricesDeleted with(nolock)

			-- копируем значения TPD_TPKey в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PricesDeleted SET TPD_TPKeyNew = TPD_TPKey where TPD_TPKey < (@cur_tpkey + 1000000) and TPD_TPKey >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)	
	
		-- удаляем колонку
		if exists (select 1 from dbo.syscolumns where name = 'TPD_TPKey' and id = object_id(N'[dbo].[TP_PricesDeleted]'))
			alter table TP_PricesDeleted DROP COLUMN TPD_TPKey 

		-- переименовываем колонку TPD_TPKeyNew в TPD_TPKey
		EXEC sp_rename 'dbo.TP_PricesDeleted.TPD_TPKeyNew', 'TPD_TPKey', 'COLUMN'
	END

	ALTER TABLE dbo.TP_PricesDeleted ALTER COLUMN TPD_TPKey bigint not null

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа TPD_TPKey в TP_PricesDeleted завершено', 'TP_PricesDeleted_change', HOST_NAME())
END
GO

exec RefreshViewForAll 'TP_PricesDeleted'
go

/*********************************************************************/
/* end (2014.04.15)_PriceKeyToBigInt_TP_PricesDeleted.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_TP_PricesDeleted.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_mwReplDeletedPricesTemp.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.04.15)_PriceKeyToBigInt_mwReplDeletedPricesTemp.sql */
/*********************************************************************/
if dbo.mwReplIsPublisher() > 0
begin

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Удаление статьи репликации mwReplDeletedPricesTemp начато', 'mwReplDeletedPricesTemp_drop', HOST_NAME())

	declare @pubArticlesExists as bit
	declare @pubArticlesExistsScript as nvarchar(max)

	set @pubArticlesExistsScript = 'if exists (select * 
											from distribution.dbo.msarticles
											where publisher_db = db_name()
											and source_object = ''mwReplDeletedPricesTemp''
											and publication_id = (select top 1 publication_id from distribution.dbo.mspublications
																	where publication = ''MW_PUB'' and publisher_db = db_name())
											)
								set @pubArticlesExists = 0
							else set @pubArticlesExists = 1'

	exec sp_executesql @pubArticlesExistsScript, N'@pubArticlesExists as bit output', @pubArticlesExists output 
	 

	if @pubArticlesExists = 0
	begin
	-- drop article
		exec sp_droparticle @publication = N'MW_PUB', @article = N'mwReplDeletedPricesTemp'
	end

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Удаление статьи репликации mwReplDeletedPricesTemp завершено', 'mwReplDeletedPricesTemp_drop', HOST_NAME())
	
END

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'mwReplDeletedPricesTemp_add')
BEGIN
	-- вставляем новую колонку в таблицу mwReplDeletedPricesTemp
	if not exists (select 1 from dbo.syscolumns where name = 'rdp_pricekeyNew' and id = object_id(N'[dbo].[mwReplDeletedPricesTemp]'))
		alter table mwReplDeletedPricesTemp add rdp_pricekeyNew bigint
		
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление rdp_pricekeyNew в mwReplDeletedPricesTemp завершено', 'mwReplDeletedPricesTemp_add', HOST_NAME()) 
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'mwReplDeletedPricesTemp_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'rdp_pricekeyNew' and id = object_id(N'[dbo].[mwReplDeletedPricesTemp]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from mwReplDeletedPricesTemp WHERE rdp_pricekeyNew is not NULL)
		BEGIN
			declare @cur_pricekey bigint, @max_pricekey bigint 
			select @cur_pricekey = min(rdp_pricekey) from mwReplDeletedPricesTemp with(nolock)
			select @max_pricekey = max(rdp_pricekey) from mwReplDeletedPricesTemp with(nolock)

			-- копируем значения rdp_pricekey в новую колонку
			while (@cur_pricekey <= @max_pricekey)
			begin
				update mwReplDeletedPricesTemp SET rdp_pricekeyNew = rdp_pricekey where rdp_pricekey < (@cur_pricekey + 1000000) and rdp_pricekey >= @cur_pricekey
				set @cur_pricekey = @cur_pricekey + 1000000
			end
		END
		'
		exec (@sql)	
		
		-- колонки для удаления
		declare @columns as ListNvarcharValue
		insert into @columns values ('rdp_pricekey')

		declare @tablename varchar(100)
		set @tablename = 'mwReplDeletedPricesTemp'

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumnsScript as nvarchar(max)
		set @dropColumnsScript = ''
		select @dropColumnsScript = @dropColumnsScript + '
			IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @tablename + ']''))
			begin
				alter table ' + @tablename + ' drop column ' + value + '
			end
		
			-- переименовываем колонку rdp_pricekeyNew в rdp_pricekey
			EXEC sp_rename ''dbo.mwReplDeletedPricesTemp.rdp_pricekeyNew'', ''rdp_pricekey'', ''COLUMN''
			'
		from @columns
				
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @tableName, @columns, @dropColumnsScript, 1, 0		
	END

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа rdp_pricekey в mwReplDeletedPricesTemp завершено', 'mwReplDeletedPricesTemp_change', HOST_NAME()) 
END

if dbo.mwReplIsPublisher() > 0 
begin
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление статьи репликации mwReplDeletedPricesTemp начато', 'mwReplDeletedPricesTemp_add', HOST_NAME())

	-- add article
	exec sp_addarticle @publication = N'MW_PUB', @article = N'mwReplDeletedPricesTemp', @source_owner = N'dbo', 
	@source_object = N'mwReplDeletedPricesTemp', @type = N'logbased', @description = N'', @creation_script = N'', 
	@pre_creation_cmd = N'drop', 
	@schema_option = 0x000000000803509F, @identityrangemanagementoption = N'manual', 
	@destination_table = N'mwReplDeletedPricesTemp', @destination_owner = N'dbo', @status = 8, @vertical_partition = N'false', 
	@ins_cmd = N'SQL', @del_cmd = N'SQL', @upd_cmd = N'SQL'

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление статьи репликации mwReplDeletedPricesTemp завершено', 'mwReplDeletedPricesTemp_add', HOST_NAME())
END
GO

exec RefreshViewForAll 'mwReplDeletedPricesTemp'
go

/*********************************************************************/
/* end (2014.04.15)_PriceKeyToBigInt_mwReplDeletedPricesTemp.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.04.15)_PriceKeyToBigInt_mwReplDeletedPricesTemp.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.09)_PriceKeyToBigInt_TP_PriceCleaner.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.09)_PriceKeyToBigInt_TP_PriceCleaner.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesCleaner_add')
BEGIN
	if not exists (select 1 from dbo.syscolumns where name = 'PC_TPKEYNew' and id = object_id(N'[dbo].[TP_PricesCleaner]'))
		alter table TP_PricesCleaner add PC_TPKEYNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление PC_TPKEYNew в TP_PricesCleaner завершено', 'TP_PricesCleaner_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesCleaner_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'PC_TPKEYNew' and id = object_id(N'[dbo].[TP_PricesCleaner]'))
	BEGIN		
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from TP_PricesCleaner WHERE PC_TPKEYNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(PC_TPKEY) from TP_PricesCleaner with(nolock)
			select @max_tpkey = max(PC_TPKEY) from TP_PricesCleaner with(nolock)

			-- копируем значения PC_TPKEY в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PricesCleaner SET PC_TPKEYNew = PC_TPKEY where PC_TPKEY < (@cur_tpkey + 1000000) and PC_TPKEY >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)
	
		-- удаляем колонку
		if exists (select 1 from dbo.syscolumns where name = 'PC_TPKEY' and id = object_id(N'[dbo].[TP_PricesCleaner]'))
			alter table TP_PricesCleaner DROP COLUMN PC_TPKEY 

		-- переименовываем колонку PC_TPKEYNew в PC_TPKEY
		EXEC sp_rename 'dbo.TP_PricesCleaner.PC_TPKEYNew', 'PC_TPKEY', 'COLUMN'
	END

	ALTER TABLE dbo.TP_PricesCleaner ALTER COLUMN PC_TPKEY bigint not null

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа PC_TPKEY в TP_PricesCleaner завершено', 'TP_PricesCleaner_change', HOST_NAME()) 

END
GO

exec RefreshViewForAll 'TP_PricesCleaner'
go

/*********************************************************************/
/* end (2014.06.09)_PriceKeyToBigInt_TP_PriceCleaner.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.09)_PriceKeyToBigInt_TP_PriceCleaner.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.05)_PriceKeyToBigInt_TP_PricesUpdated.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.05)_PriceKeyToBigInt_TP_PricesUpdated.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesUpdated_add')
BEGIN
	if not exists (select 1 from dbo.syscolumns where name = 'TPU_TPKeyNew' and id = object_id(N'[dbo].[TP_PricesUpdated]'))
		alter table TP_PricesUpdated add TPU_TPKeyNew bigint 

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Добавление TPU_TPKeyNew в TP_PricesUpdated завершено', 'TP_PricesUpdated_add', HOST_NAME())
END
GO

IF NOT EXISTS (SELECT TOP 1 1 FROM ScriptsSetupLogs WITH(NOLOCK) WHERE RC_STATUS LIKE 'TP_PricesUpdated_change')
BEGIN
	if exists (select 1 from dbo.syscolumns where name = 'TPU_TPKeyNew' and id = object_id(N'[dbo].[TP_PricesUpdated]'))
	BEGIN
		declare @sql varchar(4000)
	
		set @sql = '
		if not exists (select top 1 1 from TP_PricesUpdated WHERE TPU_TPKeyNew is not NULL)
		BEGIN
			declare @cur_tpkey bigint, @max_tpkey bigint 
			select @cur_tpkey = min(TPU_TPKey) from TP_PricesUpdated with(nolock)
			select @max_tpkey = max(TPU_TPKey) from TP_PricesUpdated with(nolock)

			-- копируем значения TPU_TPKey в новую колонку
			while (@cur_tpkey <= @max_tpkey)
			begin
				update TP_PricesUpdated SET TPU_TPKeyNew = TPU_TPKey where TPU_TPKey < (@cur_tpkey + 1000000) and TPU_TPKey >= @cur_tpkey
				set @cur_tpkey = @cur_tpkey + 1000000
			end
		END
		'
		exec (@sql)		
	
		-- удаляем колонку
		if exists (select 1 from dbo.syscolumns where name = 'TPU_TPKey' and id = object_id(N'[dbo].[TP_PricesUpdated]'))
			alter table TP_PricesUpdated DROP COLUMN TPU_TPKey 

		-- переименовываем колонку TPU_TPKeyNew в TPU_TPKey
		EXEC sp_rename 'dbo.TP_PricesUpdated.TPU_TPKeyNew', 'TPU_TPKey', 'COLUMN'
	END

	ALTER TABLE dbo.TP_PricesUpdated ALTER COLUMN TPU_TPKey bigint not null

	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(),  'Изменение типа TPU_TPKey в TP_PricesUpdated завершено', 'TP_PricesUpdated_change', HOST_NAME()) 

END
GO

exec RefreshViewForAll 'TP_PricesUpdated'
go

/*********************************************************************/
/* end (2014.06.05)_PriceKeyToBigInt_TP_PricesUpdated.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.05)_PriceKeyToBigInt_TP_PricesUpdated.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculate_MigrateToPrice.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculate_MigrateToPrice]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ReCalculate_MigrateToPrice]
GO

CREATE PROCEDURE [dbo].[ReCalculate_MigrateToPrice]
	-- <date>2014-04-02</date>
	-- <version>2009.2.21</version>
	(
		-- хранимка суммирует стоимость отдельных услуг и кладет их в TP_Prices		
		-- максимальное количество записей для переноса за 1 раз
		@countItem INT,  
		
		--ключи цен на перерасчет
		@tpKeys dbo.ListBigIntValue readonly,
		
		--ключ тура
		--если указан, @tpToursCount не учитывается - обрабатывается только один тур
		@toKey INT = NULL,

		--количество туров
		@tpToursCount INT = NULL --для совместимости с предыдущими версиями
	)
AS
BEGIN
	SET ARITHABORT ON;

	--Таблица для цен из TP_PriceComponents
	CREATE TABLE #tempGrossTable 
	(
		xPCId int,
		xTPKey bigint,
		xSummPrice money,
		xUpdateDate datetime,
		xSummPriceDeleted as (case when xSummPrice is null then 1 else 0 end) persisted
	)
	
	-- Таблица для ключей туров
	CREATE TABLE #calculatingTours 
	(
		xToKey int
	)

	CREATE NONCLUSTERED INDEX IX_tempGrossTable_xSummPriceDeleted ON #tempGrossTable(xSummPriceDeleted) INCLUDE(xTPKey)

	DECLARE @numRowsInserted int, @numRowsUpdated int, @numRowsDeleted int
	SET @numRowsInserted = 0
	SET @numRowsUpdated = 0
	SET @numRowsDeleted = 0

	DECLARE @numRowsUpdatedTotal int
	DECLARE @dtStarted datetime 
	SET @dtStarted = getdate()

	DECLARE @nullDate datetime 
	SET @nullDate = '1900-01-01'

	-- если указаны ключи цен, обрабатываем их
	IF (EXISTS(SELECT TOP 1 1 FROM @tpKeys))
	BEGIN
		PRINT 'R1: @countItem ' + cast(@countItem as nvarchar(32))
		
		INSERT INTO #calculatingTours(xToKey)
		SELECT DISTINCT PC_ToKey
		FROM @tpKeys inner join TP_PriceComponents ON value = PC_TPKey
		WHERE PC_State = 1
	END  
	ELSE
	BEGIN  
		--Если указан @toKey, обрабатываем только один тур
		IF (@toKey IS NOT NULL)
		BEGIN
			PRINT 'R2: @toKey ' + cast(@toKey as nvarchar(32)) + ' @countItem ' + cast(@countItem as nvarchar(32))
			
			INSERT INTO #calculatingTours(xToKey)
			VALUES (@toKey)
		END
   		ELSE
		BEGIN
			--Если указано количество туров, берем в обработкe @countItem цен @toursCount туров    
			IF (@tpToursCount IS NOT NULL)
			BEGIN      
				PRINT 'R3: @tpToursCount ' + cast(@tpToursCount as nvarchar(32)) + ' @countItem ' + cast(@countItem as nvarchar(32))

				INSERT INTO #calculatingTours(xToKey)
				SELECT DISTINCT TOP(@tpToursCount) t.to_key
				FROM TP_PriceComponents tp WITH(NOLOCK)
				INNER JOIN tp_tours t WITH(NOLOCK) ON t.TO_Key = tp.PC_TOKey and tp.PC_State = 1
			END
			-- Иначе обрабатываем первые @countItem записей из очереди         
			ELSE
			BEGIN
				PRINT 'R4: @countItem ' + cast(@countItem as nvarchar(32))

				INSERT INTO #calculatingTours(xToKey)
				SELECT DISTINCT TOP (@countItem) PC_ToKey
				FROM TP_PriceComponents
				WHERE PC_State = 1
			END
		END
	END

	DECLARE currReCalculate_MigrateToPrice CURSOR FAST_FORWARD READ_ONLY
	FOR SELECT xToKey FROM #calculatingTours

	OPEN currReCalculate_MigrateToPrice

	FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey

	WHILE @@FETCH_STATUS = 0
	BEGIN

		-- Очистка временной таблицы
		TRUNCATE TABLE #tempGrossTable

		-- Получение цен для обновления
		INSERT INTO #tempGrossTable (xPCId, xTPKey, xSummPrice, xUpdateDate)
		SELECT TOP (@countItem) PC_Id, PC_TPKey, PC_SummPrice, PC_UpdateDate
		FROM TP_PriceComponents
		WHERE PC_State = 1 AND PC_TOKey = @toKey
		SET @numRowsUpdatedTotal = ISNULL(@numRowsUpdatedTotal, 0) + @@ROWCOUNT

		INSERT INTO CalculatingPriceLists (CP_CreateDate,CP_PriceTourKey) VALUES (GETDATE(),@toKey) 
		DECLARE	@cpKey int
		SET @cpKey = SCOPE_IDENTITY()

		-- помечаем цены как удаленные в tp_prices - колонка tp_gross = null
		UPDATE tp
		SET TP_Gross = NULL, TP_CalculatingKey = @cpKey
		FROM #tempGrossTable
		INNER JOIN TP_Prices tp ON TP_Key = xTPKey AND xSummPriceDeleted = 1
		SET @numRowsDeleted = @@ROWCOUNT

		--восстанавливаем цены из таблицы удаленных цен
		UPDATE tp_prices
		SET tp_gross = CEILING(xSummPrice)
		FROM #tempGrossTable
		INNER JOIN TP_Prices tp ON TP_Key = xTPKey AND xSummPriceDeleted = 0
		WHERE TP_Gross IS NULL

		-- обновляем цены, которые ранее не были удалены и изменились, или ранее были удалены но сейчас востановились
		UPDATE tp
		SET 
			tp.TP_Gross = CEILING(ROUND(xSummPrice, 2)),
			tp.tp_updatedate = GETDATE(),
			tp.TP_CalculatingKey = @cpKey
		FROM #tempGrossTable
		INNER JOIN TP_Prices tp ON tp_key = xTPKey AND xSummPriceDeleted = 0
		SET @numRowsUpdated = @@ROWCOUNT

		IF EXISTS (SELECT TOP 1 1 FROM TP_Tours WHERE to_Key = @toKey AND to_isEnabled = 1)
		BEGIN
			-- Реплицируем только если тур уже выставлен в online
			IF (@numRowsInserted > 0 or @numRowsDeleted > 0)
			BEGIN
				EXEC FillMasterWebSearchFields @toKey, @cpKey
			END
			ELSE IF (@numRowsUpdated > 0)
			BEGIN
				-- нужно для корректной обработки необходимости обновления кэша в TourML
				UPDATE TP_Tours SET TO_UPDATETIME = GETDATE() WHERE TO_Key = @toKey

				IF dbo.mwReplIsPublisher() > 0
				BEGIN
					INSERT INTO mwReplTours(rt_trkey, rt_tokey, rt_date, rt_calckey, rt_updateOnlinePrices)
					SELECT TO_TRKey, TO_Key, GETDATE(), @cpKey, 2
					FROM tp_tours
					WHERE TO_Key = @toKey
				END
				ELSE
				BEGIN
					EXEC mwReplUpdatePriceEnabledAndValue @toKey, @cpKey
				END
			END
		END

		-- отметим что уже перенесли
		UPDATE pc
		SET 
			pc.PC_DateLastUpdateToPrice = GETDATE(),
			pc.PC_State = 0
		FROM #tempGrossTable
		INNER JOIN TP_PriceComponents pc ON pc.PC_Id = xPCId AND 
			ISNULL(pc.PC_UpdateDate, @nullDate) = ISNULL(xUpdateDate, @nullDate)

		FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey
	END

	CLOSE currReCalculate_MigrateToPrice
	DEALLOCATE currReCalculate_MigrateToPrice

	DECLARE @tsWorked int
	SET @tsWorked = DATEDIFF(SECOND, @dtStarted, GETDATE()) + 1

	PRINT 'Обработка завершена, общее кол-во обработаных цен: ' + CONVERT(nvarchar(max), @numRowsUpdatedTotal) 
		+ ', общее время работы: ' + CAST((@tsWorked / 60) as nvarchar(16)) + ' мин ' + CAST((@tsWorked % 60) as nvarchar(16)) + ' сек'
		+ ', средняя скорость обсчета: ' +  CAST((CAST(@numRowsUpdatedTotal as decimal) / @tsWorked * 60) as nvarchar(32)) + ' цен/мин'

END
GO

GRANT EXECUTE ON [dbo].[ReCalculate_MigrateToPrice]	TO PUBLIC
GO
/*********************************************************************/
/* end sp_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculate_MigrateToPrice.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCacheQuotaSearch.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCacheQuotaSearch.sql */
/*********************************************************************/
if object_id('dbo.mwCacheQuotaSearch', 'p') is not null
	drop proc dbo.mwCacheQuotaSearch
go

create procedure [dbo].[mwCacheQuotaSearch]
	@svkey	int,
	@code	int,
	@subcode1	int,
	@subcode2	int,
	@date	datetime,
	@day	int,
	@days	int,
	@prkey	int,
	@pkkey	int,
	@result varchar(256) output,
	@places int output,
	@step_index smallint output,
	@price_correction int output,
	@additional varchar(2000) output,
	@findFlight smallint,
	@airlineCodes varchar(max) = '',
	@nmen int = null
as
begin
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>
	set @result = NULL
	
	if @airlineCodes is null
		set @airlineCodes = ''
	set @airlineCodes = UPPER(LTRIM(@airlineCodes))

	select TOP 1 @result = cq_res, @places = cq_places,
			@step_index = cq_stepindex, @price_correction = cq_pricecorrection,
			@additional = cq_Additional
	FROM	CacheQuotas  with (nolock)
	WHERE	cq_svkey = @svkey and cq_code = @code
			and (@subcode1 = 0 OR @subcode1 = cq_rmkey)
			and (@subcode2 = 0 OR @subcode2 = cq_rckey)
			and cq_date = @date
			and cq_day = @day
			and cq_days = @days
			and ((@prkey = 0) OR (cq_prkey = @prkey))
			and ((cq_pkkey = 0) OR (cq_pkkey = @pkkey))
			and cq_findFlight = @findFlight
			and upper(cq_airlineCodes) = @airlineCodes
			and (@nmen is null or cq_nmen = @nmen)
end
GO

grant execute on [dbo].[mwCacheQuotaSearch] to public
GO
/*********************************************************************/
/* end sp_mwCacheQuotaSearch.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCacheQuotaSearch.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCacheQuotaInsert.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCacheQuotaInsert.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwCacheQuotaInsert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwCacheQuotaInsert]
GO

create procedure [dbo].[mwCacheQuotaInsert]
	@svkey	int,
	@code	int,
	@subcode1	int,
	@subcode2	int,
	@date	datetime,
	@day	int,
	@days	int,
	@prkey	int,
	@pkkey	int,
	@result varchar(256),
	@places int,
	@step_index smallint,
	@price_correction int,
	@additional varchar(2000),
	@findFlight smallint,
	@airlineCodes varchar(max) = '',	
	@nmen int = null	
as
begin
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>

	if @airlineCodes is null
		set @airlineCodes = ''
	set @airlineCodes = UPPER(LTRIM(@airlineCodes))

	insert into CacheQuotas(cq_svkey,cq_code,cq_rmkey,cq_rckey,cq_date,cq_day,cq_days,cq_prkey,cq_pkkey,cq_res,cq_places,cq_findFlight,cq_Additional,cq_airlineCodes,cq_nmen) 
	values(@svkey,@code,@subcode1,@subcode2,@date,@day,@days,@prkey,@pkkey,@result,@places,@findFlight,@additional, @airlineCodes,@nmen)
end	
GO

grant execute on [dbo].[mwCacheQuotaInsert] to public
GO
/*********************************************************************/
/* end sp_mwCacheQuotaInsert.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCacheQuotaInsert.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetSinglePriceSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetSinglePriceSettings.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetSinglePriceSettings]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetSinglePriceSettings]
GO

create procedure [dbo].[GetSinglePriceSettings]
-- получает настройки использования единственной цены и возвращает их в параметрах
--<VERSION>9.2.21</VERSION>
--<DATE>2014-07-15</DATE>
	@mwSinglePrice bit output					-- single price usage flag
	, @mwSinglePriceType nvarchar(10) output	-- 'last' or 'min'
	, @mwSinglePriceAllTours bit output			-- single price for tour
	, @mwSinglePriceAllHotelPrt bit output		-- single price for hotel partner 
	, @mwSinglePriceAllFlightPrt bit output		-- single price for flight partner
	, @mwSinglePriceAllTourTypes bit output		-- single price for tour type
	, @mwSinglePriceAllDeparts bit output		-- single price for all departs
as
begin
	-- вытащим сразу все настройки
	declare @systemSettings as table (name varchar(30), value varchar(254)) 
	INSERT into @systemSettings (name) VALUES ('mwSinglePrice')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceType')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceAllTours')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceAllHotelPrt')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceAllFlightPrt')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceAllTourTypes')
	INSERT into @systemSettings (name) VALUES ('mwSinglePriceAllDeparts')
	
	-- возьмём из SystemSettings
	update @systemSettings set value = 
	(select top 1 lower(rtrim(ltrim(ss_parmvalue)))
	from SystemSettings
	where ss_parmname = name AND value is null)

	select @mwSinglePrice = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePrice'

	select @mwSinglePriceType = isnull(value, N'last') from @systemSettings WHERE name = 'mwSinglePriceType'

	select @mwSinglePriceAllTours = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePriceAllTours' 

	select @mwSinglePriceAllHotelPrt = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePriceAllHotelPrt' 

	select @mwSinglePriceAllFlightPrt = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePriceAllFlightPrt' 

	select @mwSinglePriceAllTourTypes = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePriceAllTourTypes'

	select @mwSinglePriceAllDeparts = isnull(value, 0) from @systemSettings WHERE name = 'mwSinglePriceAllDeparts'
end
GO

GRANT EXECUTE on [dbo].[GetSinglePriceSettings] to public
GO
/*********************************************************************/
/* end sp_GetSinglePriceSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetSinglePriceSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSinglePrice.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwSinglePrice.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwSinglePrice]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwSinglePrice]
GO

CREATE PROCEDURE [dbo].[mwSinglePrice]
-- При выставлении тура отключает похожие цены по механизму единственной цены
-- При снятии тура включает похожие цены, ранее отключенные по механизму единственной цены
-- При @mode = 0 хранимая процедура должна вызываться до того, как соответствующим ключам проставлен pt_isenabled = 0
  (
	@mode smallint,						-- операция, 1 - выставление тура, 0 - снятие
	@tourKey int = null,				-- ключ тура (указывается при снятии тура или выставлении)
	@tempTableName varchar(50) = null,	-- название таблицы с ключами таблицы mwPriceDataTable, применяется в плагине удаления цен
	@priceTableName varchar(50) = null  -- название таблицы, в которой хранятся данные
  )
AS

--<VERSION>9.2.21</VERSION>
--<DATE>2014-08-29</DATE>
BEGIN
	-- настройки единственной цены
	declare @mwSinglePrice bit, @mwSinglePriceType nvarchar(10), @mwSinglePriceAllTours bit, @mwSinglePriceAllHotelPrt bit, @mwSinglePriceAllFlightPrt bit,
		@mwSinglePriceAllTourTypes bit, @mwSinglePriceAllDeparts bit
	exec GetSinglePriceSettings @mwSinglePrice output, @mwSinglePriceType output, @mwSinglePriceAllTours output,
		@mwSinglePriceAllHotelPrt output, @mwSinglePriceAllFlightPrt output, @mwSinglePriceAllTourTypes output, @mwSinglePriceAllDeparts output

	if @mwSinglePrice = 0
		return

	declare @cnKey int, @ctKeyFrom int, @tableName sysname, @sql nvarchar(max), @params nvarchar(max)

	if (@priceTableName is null and @tourKey is not null)
	begin
		declare @tableNameInner varchar(100), @tourExists bit

		declare tableCursor cursor local fast_forward for 
		select name 
		from sysobjects with(nolock) 
		where name like 'mwPriceDataTable[_]%' and xtype = 'u'

		open tableCursor
		fetch next from tableCursor into @tableNameInner
		while (@@FETCH_STATUS = 0)
		begin
			set @sql = '
			if exists (select top 1 1 from ' + @tableNameInner + ' with(nolock) where pt_tourkey = ' + ltrim(str(@tourKey)) + ')
				set @tourExistsOut = 1
			else
				set @tourExistsOut = 0'
			set @params = '@tourExistsOut bit output'
			EXECUTE sp_executesql @sql, @params, @tourExistsOut = @tourExists output

			if (@tourExists = 1)
			begin
				set @tableName = @tableNameInner
				break
			end

			fetch next from tableCursor into @tableNameInner
		end

		close tableCursor
		deallocate tableCursor

	end
	else if (@priceTableName is not null)
	begin
		set @tableName = @priceTableName
	end

	if (@tableName is null)
	BEGIN
		RAISERROR ('Cannot find value of the variable @tableName', 16, 1)
		return
	END

	-- таблица с группами цен на отели. созданы колонки для всех параметров единственной цены
	-- если в соответствии с параметрами какая-то колонка не используется, то она имеет default(null)
	create table #priceGroups 
	(
		xKey int not null primary key identity(1,1),
		pt_hdkey int,
		pt_rmkey int,
		pt_rckey int,
		pt_ackey int,
		pt_pnkey int,
		pt_tourdate datetime,
		pt_days int,
		pt_nights int,
		pt_tourkey int null,
		pt_hdpartnerkey int null,
		pt_chprkey int null,
		pt_tourtype int null
	)

	create nonclustered index X_SINGLEPRICE on #priceGroups (pt_hdkey, pt_rmkey, pt_rckey, pt_ackey, pt_pnkey, pt_tourdate, pt_days, pt_nights, pt_tourtype)	

	-- список полей, по которым надо группировать записи в ценовой таблице
	declare @groupFields as table
	(
		fieldName sysname,
		fieldTypeName sysname
	)

	insert into @groupFields values ('pt_hdkey', 'int')
	insert into @groupFields values ('pt_rmkey', 'int')
	insert into @groupFields values ('pt_rckey', 'int')
	insert into @groupFields values ('pt_ackey', 'int')
	insert into @groupFields values ('pt_pnkey', 'int')
	insert into @groupFields values ('pt_tourdate', 'datetime')
	insert into @groupFields values ('pt_days', 'int')
	insert into @groupFields values ('pt_nights', 'int')

	if(@mwSinglePriceAllTours = '0') -- single price for all tours
		insert into @groupFields values ('pt_tourkey', 'int')

	if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
		insert into @groupFields values ('pt_hdpartnerkey', 'int')

	if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
		insert into @groupFields values ('pt_chprkey', 'int')

	if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
		insert into @groupFields values ('pt_tourtype', 'int')

	declare @groupExpression as varchar(max)
	select @groupExpression = coalesce(@groupExpression + ',', '') + fieldName
	from @groupFields

	declare @groupOrderField as sysname
	if @mwSinglePriceType = 'min' 
		set @groupOrderField = 'pt_price'
	else if @mwSinglePriceType = 'last'
		set @groupOrderField = 'pt_tourcreated desc'

	declare @whereExpression as varchar(max)
	select @whereExpression = coalesce(@whereExpression + ' and ', '') + 'x.' + fieldName + '= main.' + fieldName
	from @groupFields

	set @sql = 'insert into #priceGroups (@groupExpression)
			select distinct @groupExpression
			from @tableName with(nolock)'

	if (@tourKey is not null)
	begin
		set @sql = @sql + '
			where pt_tourkey = ' + cast(@tourKey as nvarchar(20))
	end
	else
	begin
		set @sql = @sql + '
			where pt_key in (select xptkey from ' + @tempTableName + ')'
	end

	set @sql = replace(@sql, '@groupExpression', @groupExpression)
	set @sql = replace(@sql, '@tableName', @tableName)
	
	exec (@sql)

	-- ключи для включения или отключения (в зависимости от @mode) признака pt_isenabled
	create table #keysToProcess (xtpKey bigint primary key)
	if (@mode = 1)
	begin
		if @mwSinglePriceType = 'min'
		begin
			set @sql = '
			;with cte as 
			(
				select pt_key, ROW_NUMBER() OVER (PARTITION BY @groupExpression ORDER BY @groupOrderField) as rowNum 
				from @tableName as main  with(nolock)
				where exists (select 1 from #priceGroups as x
					where @whereExpression)
					and pt_tourkey in (select to_key from tp_tours with (nolock))
			)

			insert into #keysToProcess (xtpkey)
			select pt_key
			from cte as main
			where rowNum = 1

			while (1 = 1)
			begin
				update top (50000) @tableName set pt_isenabled = 1, pt_autodisabled = 0
				where pt_key in (select xtpKey from #keysToProcess)
				and pt_isenabled = 0

				if (@@ROWCOUNT = 0)
					break
			end

			truncate table #keysToProcess

			;with cte as 
			(
				select pt_key, ROW_NUMBER() OVER (PARTITION BY @groupExpression ORDER BY @groupOrderField) as rowNum 
				from @tableName as main  with(nolock)
				where exists (select 1 from #priceGroups as x
					where @whereExpression)
					and pt_tourkey in (select to_key from tp_tours with (nolock))
			) 

			insert into #keysToProcess (xtpkey)
			select pt_key
			from cte as main
			where rowNum > 1
			'

			set @sql = replace(@sql, '@tableName', @tableName)
			set @sql = replace(@sql, '@whereExpression', @whereExpression)
			set @sql = replace(@sql, '@groupOrderField', @groupOrderField)
			set @sql = replace(@sql, '@groupExpression', @groupExpression)
		end
		else
		begin
			-- 'last' min price type
			set @sql = '
			insert into #keysToProcess (xtpKey) 
			select pt_key 
			from ' + @tableName + ' as main  with(nolock)
			where main.pt_tourkey <> ' + cast(@tourKey as nvarchar(20)) + '
			and exists (select 1 from #priceGroups as x
				where @whereExpression)'
		
			set @sql = replace(@sql, '@whereExpression', @whereExpression)
		end

		exec (@sql)

		if exists (select 1 from #keysToProcess)
		begin
			set @sql = '
			while (1 = 1)
			begin
				update top (50000) ' + @tableName + ' set pt_isenabled = 0, pt_autodisabled = 1
				where pt_key in (select xtpKey from #keysToProcess)
				and pt_isenabled = 1

				if (@@ROWCOUNT = 0)
					break
			end'

			exec (@sql)
		end

	end
	else if (@mode = 0)
	begin
	
		create table #tourMainPrices 
		(
			xKey bigint primary key identity(1,1), 
			pt_hdkey int, 
			pt_rmkey int, 
			pt_rckey int, 
			pt_ackey int, 
			pt_pnkey int, 
			pt_tourdate datetime, 
			pt_days int, 
			pt_nights int, 
			pt_tourkey int null,
			pt_hdpartnerkey int null,
			pt_chprkey int null,
			pt_tourtype int null
		)

		set @sql = '
			with cte as
			(
				select pt_key, @groupExpression, ROW_NUMBER() OVER (PARTITION BY @partGroupExpression ORDER BY @groupOrderField) as rowNum 
				from @tableName as main  with(nolock)
				where exists (select 1 from #priceGroups as x
								where @whereExpression)
						and pt_isenabled = 1
			) 

			insert into #tourMainPrices (@groupExpression)
			select distinct @groupExpression
			from cte 
			where rowNum = 1 '

		if (@tourKey is not null)
		begin
			set @sql = @sql + ' and pt_tourkey = @tourKey'
			set @sql = replace(@sql, '@tourKey', cast(@tourKey as nvarchar(20)))
		end
		else
		begin
			set @sql = @sql + ' and pt_key in (select xptkey from @tempTableName)'
			set @sql = replace(@sql, '@tempTableName', @tempTableName)
		end

		set @sql = replace(@sql, '@whereExpression', @whereExpression)

		if exists (select top 1 1 from @groupFields where fieldName = 'pt_tourkey')
			set @sql = replace(@sql, '@groupExpression', @groupExpression)
		else
			set @sql = replace(@sql, '@groupExpression', 'pt_tourkey, ' + @groupExpression)

		set @sql = replace(@sql, '@partGroupExpression', @groupExpression)

		set @sql = replace(@sql, '@groupOrderField', @groupOrderField)
		set @sql = replace(@sql, '@tableName', @tableName)

		exec (@sql)

		set @sql = '
		with cte as 
		(
			select pt_key, @groupExpression, ROW_NUMBER() OVER (PARTITION BY @partGroupExpression ORDER BY @groupOrderField) as rowNum 
			from @tableName as main  with(nolock)
			where exists (select 1 from #priceGroups as x
				where @whereExpression) 
				and isnull(pt_autodisabled, 0) = 1
				and pt_isenabled = 0
				and @keysCondition
		)

		insert into #keysToProcess (xtpkey)
		select pt_key
		from cte as main
		where exists (select 1
					  from #tourMainPrices as x
					  where @whereExpression)
			and rowNum = 1
		'

		set @sql = replace(@sql, '@tableName', @tableName)
		set @sql = replace(@sql, '@whereExpression', @whereExpression)
		set @sql = replace(@sql, '@groupOrderField', @groupOrderField)

		if exists (select top 1 1 from @groupFields where fieldName = 'pt_tourkey')
			set @sql = replace(@sql, '@groupExpression', @groupExpression)
		else
			set @sql = replace(@sql, '@groupExpression', 'pt_tourkey, ' + @groupExpression)

		set @sql = replace(@sql, '@partGroupExpression', @groupExpression)

		if @tourKey is not null
			set @sql = replace(@sql, '@keysCondition', 'pt_tourkey <> ' + cast(@tourKey as nvarchar(20)))
		else
			set @sql = replace(@sql, '@keysCondition', 'pt_key not in (select xptkey from ' + @tempTableName + ')' )

		exec (@sql)

		if exists (select 1 from #keysToProcess)
		begin
			set @sql = '
			while (1 = 1)
			begin
				update top (50000) @tableName set pt_isenabled = 1, pt_autodisabled = 0
				where pt_key in (select xtpKey from #keysToProcess)
				and isnull(pt_autodisabled, 0) = 1

				if (@@ROWCOUNT = 0)
					break
			end'

			set @sql = replace(@sql, '@tableName', @tableName)
			exec (@sql)
		end
		
	end
END
GO

GRANT EXECUTE on [dbo].[mwSinglePrice] to public
GO
/*********************************************************************/
/* end sp_mwSinglePrice.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSinglePrice.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwRemoveDeleted.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwRemoveDeleted.sql */
/*********************************************************************/
 IF  EXISTS (SELECT * FROM sys.objects WHERE name = 'mwRemoveDeleted' and type='P')
	DROP PROCEDURE [dbo].[mwRemoveDeleted]
GO

create proc [dbo].[mwRemoveDeleted] 
	@remove tinyint = 0
as
begin
	--<VERSION>9.2.21</VERSION>
	--<DATE>2014-08-25</DATE>

	declare @mwSearchType int
	declare @cnKey int, @ctKey int, @toKey int, @sql varchar(max)

	select @mwSearchType = isnull(SS_ParmValue, 0) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'

	-- обработка механизма единственной цены
	-- ключи-исключения для удаления из ценовых таблиц - верхние N ключей для каждой группы одинаковых цен
	-- в механизме единственной цены
	create table #excludedKeys
	(
		[key] int
	)

	-- шаблон сгенерированного кода для заполнения таблицы #excludedKeys
	-- в нем один параметр - подстрока @tableName для установки имени ценовой таблицы
	declare @fillExcludedKeysSqlTemplate as varchar(max)

	-- сгенерированный код для заполнения таблицы #excludedKeys с заполненным параметром
	declare @fillExcludedKeysSql as varchar(max)

	declare @mwSinglePrice bit, @mwSinglePriceType nvarchar(10), @mwSinglePriceAllTours bit, @mwSinglePriceAllHotelPrt bit, @mwSinglePriceAllFlightPrt bit,
		@mwSinglePriceAllTourTypes bit, @mwSinglePriceAllDeparts bit
	exec GetSinglePriceSettings @mwSinglePrice output, @mwSinglePriceType output, @mwSinglePriceAllTours output,
		@mwSinglePriceAllHotelPrt output, @mwSinglePriceAllFlightPrt output, @mwSinglePriceAllTourTypes output, @mwSinglePriceAllDeparts output

	if @mwSinglePrice = 1
	begin
		-- список полей, по которым надо группировать записи в ценовой таблице
		declare @groupFields as table
		(
			fieldName sysname,
			fieldTypeName sysname
		)

		insert into @groupFields values ('pt_hdkey', 'int')
		insert into @groupFields values ('pt_rmkey', 'int')
		insert into @groupFields values ('pt_rckey', 'int')
		insert into @groupFields values ('pt_ackey', 'int')
		insert into @groupFields values ('pt_pnkey', 'int')
		insert into @groupFields values ('pt_tourdate', 'datetime')
		insert into @groupFields values ('pt_days', 'int')
		insert into @groupFields values ('pt_nights', 'int')

		if(@mwSinglePriceAllTours = '0') -- single price for all tours
			insert into @groupFields values ('pt_tourkey', 'int')

		if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
			insert into @groupFields values ('pt_hdpartnerkey', 'int')

		if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
			insert into @groupFields values ('pt_chprkey', 'int')

		if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
			insert into @groupFields values ('pt_tourtype', 'int')

		-- выражения группировки, сортировки и фильтра для подстановки в итоговый скрипт поиска
		-- повторяющихся записей для механизма единственной цены
		declare @groupExpression as varchar(max)
		select @groupExpression = coalesce(@groupExpression + ',' + fieldName, fieldName)
		from @groupFields

		declare @groupsVariablesDeclareExpression as varchar(max)
		select @groupsVariablesDeclareExpression = coalesce(@groupsVariablesDeclareExpression + ', ', '') + '@' + fieldName + ' ' + fieldTypeName
		from @groupFields

		declare @groupsVariablesExpression as varchar(max)
		select @groupsVariablesExpression = coalesce(@groupsVariablesExpression + ', ', '') + '@' + fieldName
		from @groupFields

		declare @groupMatchExpression as varchar(max)
		select @groupMatchExpression = coalesce(@groupMatchExpression + ' and ', '@') + fieldName + ' = @' + fieldName
		from @groupFields

		declare @orderExpression as varchar(max)

		if @mwSinglePriceType = 'min'
		begin
			set @orderExpression = 'pt_price'
		end
		else if @mwSinglePriceType = 'last'
			set @orderExpression = 'pt_tourcreated desc'

		set @fillExcludedKeysSqlTemplate = '
		-- количество приоритетных записей, которые не будут удаляться
		declare @topRecordsCount as smallint
		set @topRecordsCount = 2

		-- сначала выберем группы по полям для анализа
		declare @groupsVariablesDeclareExpression

		declare groupsCursor cursor for
		select @groupExpression
		from @tableName with (nolock)
		group by @groupExpression
		having count(*) >= @topRecordsCount

		open groupsCursor

		fetch next from groupsCursor into @groupsVariablesExpression

		while @@fetch_status = 0
		begin

			-- выберем по каждой группе @topRecordsCount-1 верхних записей, которые не должны удаляться
			-- на одну меньше, потому что не берём запись с включенной ценой
			insert into #excludedKeys
			select top (@topRecordsCount-1) pt_key
			from @tableName with (nolock)
			where @groupMatchExpression
				and pt_isenabled = 0
				and isnull(pt_autodisabled, 0) = 1
			order by @orderExpression

			fetch next from groupsCursor into @groupsVariablesExpression

		end

		close groupsCursor
		deallocate groupsCursor
		'

		set @fillExcludedKeysSqlTemplate = replace(@fillExcludedKeysSqlTemplate, '@groupExpression', @groupExpression)
		set @fillExcludedKeysSqlTemplate = replace(@fillExcludedKeysSqlTemplate, '@groupsVariablesDeclareExpression', @groupsVariablesDeclareExpression)
		set @fillExcludedKeysSqlTemplate = replace(@fillExcludedKeysSqlTemplate, '@groupsVariablesExpression', @groupsVariablesExpression)
		set @fillExcludedKeysSqlTemplate = replace(@fillExcludedKeysSqlTemplate, '@groupMatchExpression', @groupMatchExpression)
		set @fillExcludedKeysSqlTemplate = replace(@fillExcludedKeysSqlTemplate, '@orderExpression', @orderExpression)
	end
	-- конец части механизма единственной цены

	if (@mwSearchType = 0)
	begin
		if @mwSinglePrice = 1
		begin
			-- заполним ключи-исключения для механизма ед. цены
			set @fillExcludedKeysSql = replace(@fillExcludedKeysSqlTemplate, '@tableName', 'mwPriceDataTable')
			exec (@fillExcludedKeysSql)
		end

		while (1 = 1)
		begin
			delete top (100000) from mwPriceDataTable  where pt_isenabled = 0
				and pt_key not in (select [key] from #excludedKeys)

			if (@@ROWCOUNT = 0)
				break
		end
	end
	else
	begin
		declare delCur cursor local fast_forward read_only for 
		select distinct sd_cnkey, sd_ctkeyfrom
		from mwSpoDataTable with(nolock)

		open delCur
		fetch delCur into @cnKey, @ctKey
		while (@@fetch_status = 0)
		begin
			declare @tableName as sysname
			set @tableName = 'mwPriceDatatable_' + ltrim(str(@cnKey)) + '_' + ltrim(str(@ctKey))

			if not exists (select top 1 1 from sys.tables where name = @tableName)
			begin
				fetch delCur into @cnKey, @ctKey
				continue
			end

			if @mwSinglePrice = 1
			begin
				-- заполним ключи-исключения для механизма ед. цены
				set @fillExcludedKeysSql = replace(@fillExcludedKeysSqlTemplate, '@tableName', @tableName)
				exec (@fillExcludedKeysSql)
			end

			set @sql = 'while (1 = 1)
			begin
				delete top (100000) from ' + @tableName + ' where pt_isenabled = 0
					and pt_key not in (select [key] from #excludedKeys)

				if (@@ROWCOUNT = 0)
					break
			end'

			exec (@sql)
			fetch delCur into @cnKey, @ctKey
		end
		close delCur
		deallocate delCur
	end

	declare @pubdb nvarchar(50), @source as nvarchar(50)
	set @pubdb = dbo.mwReplPublisherDB()
	set @source = ''
	if dbo.mwReplIsSubscriber() > 0
	begin
		set @source = 'mt.' + @pubdb + '.'
	end

	create table #tmpDeleted (del_key int)

	truncate table #tmpDeleted
	set @sql = 'insert into #tmpDeleted (del_key) select sd_key from dbo.mwSpoDataTable with(nolock) where not exists(select top (1) 1 from ' + @source + 'dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)'
	exec (@sql)
	delete from dbo.mwSpoDataTable where sd_key in (select del_key from #tmpDeleted)

	truncate table #tmpDeleted
	set @sql = 'insert into #tmpDeleted (del_key) select ph_key from dbo.mwPriceHotels with(nolock) where not exists(select top (1) 1 from ' + @source + 'dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)'
	exec (@sql)
	delete from dbo.mwPriceHotels where ph_key in (select del_key from #tmpDeleted)

	truncate table #tmpDeleted
	set @sql = 'insert into #tmpDeleted (del_key) select pd_key from dbo.mwPriceDurations with(nolock) where not exists(select top (1) 1 from ' + @source + 'dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)'
	exec (@sql)
	delete from dbo.mwPriceDurations where pd_key in (select del_key from #tmpDeleted)
	
	drop table #tmpDeleted

	drop table #excludedKeys

	set nocount off
end
GO

GRANT EXEC on [dbo].[mwRemoveDeleted] to public
GO
/*********************************************************************/
/* end sp_mwRemoveDeleted.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwRemoveDeleted.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_FillMasterWebSearchFields.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_FillMasterWebSearchFields.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[FillMasterWebSearchFields]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[FillMasterWebSearchFields]
GO

CREATE procedure [dbo].[FillMasterWebSearchFields](@tokey int, @calcKey int = null, @forceEnable smallint = null, @overwritePrices bit = null)
-- if @forceEnable > 0 (by default) then make call mwEnablePriceTour @calcKey, 1 at the end of the procedure
as
begin
	-- <date>2014-10-28</date>
	-- <version>2009.2.22</version>
	INSERT into Debug (db_Text, db_n1) VALUES ('Начало выполнения FillMasterWebSearchFields', @tokey)
	
	set @forceEnable = isnull(@forceEnable, 1)

	declare @findByAdultChild int, @newRecalcPrice int
	
	declare @counter int, @deleteCount int, @params nvarchar(500), @sql nvarchar(4000)
	
	set @findByAdultChild = isnull((select top 1 convert(int, SS_ParmValue) from SystemSettings where SS_ParmName = 'OnlineFindByAdultChild'), 0)
	set @newRecalcPrice = isnull((select top 1 convert(int, SS_ParmValue) from SystemSettings where SS_ParmName = 'NewReCalculatePrice'), 0)

	if (@tokey is null)
	begin
		print 'Procedure does not support NULL param. You must specify @tokey parameter.'
		return
	end

	DECLARE @departFromKey INT
	SELECT top 1 @departFromKey = TL_CTDepartureKey FROM tbl_TurList with (nolock)
	INNER JOIN tp_Tours with (nolock)
	ON TL_KEY = TO_TRKey
	WHERE TO_Key = @tokey
	
	IF EXISTS(SELECT 1 FROM mwSpoDataTable with (nolock) WHERE sd_tourkey = @tokey AND sd_ctkeyfrom <> @departFromKey)
	BEGIN
		SET @calcKey = null
		EXEC mwReplDisablePriceTour @tokey
	END

	update dbo.TP_Tours set TO_Progress = 0 where TO_Key = @tokey
	
	if dbo.mwReplIsSubscriber() > 0
	begin
		-- создаем временные таблицы для подписчика
		select top 0
			[TS_Key],
			[TS_TOKey],
			[TS_SVKey],
			[TS_Code],
			[TS_SubCode1],
			[TS_SubCode2],
			[TS_CNKey],
			[TS_CTKey],
			[TS_Day],
			[TS_Days],
			[TS_Men],
			[TS_Name],
			[TS_OpPartnerKey],
			[TS_OpPacketKey],
			[TS_Attribute],
			[TS_TEMPGROSS],
			[TS_CHECKMARGIN],
			[TS_CalculatingKey]
		into #tp_services
		from dbo.tp_services with(nolock)

		alter table #tp_services add primary key(ts_key)
	
		select top 0
			[TP_Key],
			[TP_TOKey],
			[TP_DateBegin],
			[TP_Gross],
			[TP_TIKey],
			[TP_CalculatingKey]
		into #tp_prices
		from dbo.tp_prices with(nolock)

		alter table #tp_prices add primary key(tp_key)
	
		select top 0
			[TL_Key],
			[TL_TOKey],
			[TL_TSKey],
			[TL_TIKey],
			[TL_CalculatingKey]
		into #tp_serviceLists
		from dbo.tp_servicelists with(nolock)

		alter table #tp_serviceLists add primary key(tl_key)

		select top 0
			ti_key,
			ti_tokey,
			ti_firsthdkey,
			ti_firstpnkey,
			ti_firsthrkey,
			ti_firsthotelday,
			ti_lasthotelday,
			ti_totaldays,
			ti_nights,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hoteldays,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hdpartnerkey,
			ti_firsthotelpartnerkey,
			ti_hdday,
			ti_hdnights,
			ti_chkey,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_ctkeyfrom,
			ti_chbackkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_ctkeyto,
			ti_apkeyfrom,
			ti_apkeyto,
			ti_firstctkey,
			ti_firstrskey,
			ti_firsthdstars,
			TI_CalculatingKey,
			ti_days
		into #tp_lists
		from tp_lists with(nolock)

		alter table #tp_lists add primary key(ti_key)
	end
	--
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Вызов mwFillTP', @tokey)
		
	if dbo.mwReplIsSubscriber() > 0
	begin
		exec dbo.mwFillTP @tokey, @calcKey
	end
		
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание mwFillTP', @tokey)

	declare @updateTpListsScript as nvarchar(max)
	declare @mod as varchar(1)

	if dbo.mwReplIsSubscriber() > 0
		set @mod = '#'
	else
		set @mod = ''

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200) collate database_default,
		thd_tourname nvarchar(200) collate database_default,
		thd_hdname nvarchar(200) collate database_default,
		thd_ctname nvarchar(200) collate database_default,
		thd_rsname nvarchar(200) collate database_default,
		thd_ctfromname nvarchar(200) collate database_default,
		thd_cttoname nvarchar(200) collate database_default,
		thd_tourtypename nvarchar(200) collate database_default,
		thd_pncode nvarchar(50) collate database_default,
		thd_hdorder int,
		thd_hotelkeys nvarchar(256) collate database_default,
		thd_pansionkeys nvarchar(256) collate database_default,
		thd_hotelnights nvarchar(256) collate database_default,
		thd_tourvalid datetime,
		thd_hotelurl varchar(254) collate database_default
	)

	-- создадим временную ценовую таблицу
	select top 1 * into #tempPriceTable from mwPriceDataTable with(nolock)
	truncate table #tempPriceTable	
	
	CREATE NONCLUSTERED INDEX [x_main] ON [dbo].[#tempPriceTable] 
	(
		pt_tourdate asc,
		pt_hdkey asc,
		pt_rmkey asc,
		pt_rckey asc,
		pt_ackey asc,
		pt_pnkey asc,
		pt_days asc,
		pt_nights asc,
		pt_tourtype asc,
		pt_ctkeyfrom asc
	)
	
	declare @source varchar(200)
	set @source = ''
	
	if dbo.mwReplIsSubscriber() > 0 and len(dbo.mwReplPublisherDB()) > 0
		set @source = '[mt].' + dbo.mwReplPublisherDB() + '.'
	
	-- Город отправления из свойств тура
	declare @ctdeparturekey int
	select	@ctdeparturekey = tl_ctdeparturekey
	from	tp_tours with(nolock)
		inner join tbl_turList with(nolock) on tbl_turList.tl_key = to_trkey
	where to_key = @tokey

	if (@ctdeparturekey is null or @ctdeparturekey = 0)
	begin
		-- Подбираем город вылета первого рейса
		exec GetCityDepartureKey @tokey, @ctdeparturekey output
	end
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Начало заполнения @firsthdday', @tokey)

	declare @firsthdday int
	set @sql = '
	select @firsthdday = (select min(ts_day) 
				from #.tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = @tokey)'
	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@firsthdday int output, @tokey int', @firsthdday = @firsthdday output, @tokey = @tokey

 	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание заполнения @firsthdday', @tokey)

	if dbo.mwReplIsSubscriber() = 1
	begin	
		INSERT into Debug (db_Text, db_n1) VALUES ('Начало заполнения таблицы #tp_lists', @tokey)

		set @sql = 
		'insert into #tp_lists (
			ti_key,
			ti_tokey,
			ti_firsthdkey,
			ti_firstpnkey,
			ti_firsthrkey,
			ti_firsthotelday,
			ti_lasthotelday,
			ti_totaldays,
			ti_nights,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hoteldays,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hdpartnerkey,
			ti_firsthotelpartnerkey,
			ti_hdday,
			ti_hdnights,
			ti_chkey,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_ctkeyfrom,
			ti_chbackkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_ctkeyto,
			ti_apkeyfrom,
			ti_apkeyto,
			ti_firstctkey,
			ti_firstrskey,
			ti_firsthdstars,
			TI_CalculatingKey,
			ti_days)
		select *
		from OPENQUERY (mt,''SELECT 
						ti_key,
						ti_tokey,
						ti_firsthdkey,
						ti_firstpnkey,
						ti_firsthrkey,
						' + str(@firsthdday) + ' as ti_firsthotelday,
						ti_lasthotelday,
						ti_totaldays,
						ti_nights,
						ti_hotelkeys,
						ti_hotelroomkeys,
						ti_hoteldays,
						ti_hotelstars,
						ti_pansionkeys,
						ti_hdpartnerkey,
						ti_firsthotelpartnerkey,
						ti_hdday,
						ti_hdnights,
						(
							select top 1 ts_code
							from tp_servicelists with(nolock) 
							inner join tp_services with(nolock) on tl_tskey = ts_key and ts_svkey = 1
							where tl_tikey = ti_key and ts_tokey = ' + str(@tokey) + ' and tl_tokey = ' + str(@tokey) + '
							and (ts_day <= ' + str(@firsthdday) + ' or (ts_day = 1 and ' + str(@firsthdday) + ' = 0)) and ts_subcode2 = ' + str(@ctdeparturekey) + '
						) as ti_chkey,
						ti_chday,
						ti_chpkkey,
						ti_chprkey,
						ti_ctkeyfrom,
						ti_chbackkey,
						ti_chbackday,
						ti_chbackpkkey,
						ti_chbackprkey,
						ti_ctkeyto,
						ti_apkeyfrom,
						ti_apkeyto,
						ti_firstctkey,
						ti_firstrskey,
						ti_firsthdstars,
						TI_CalculatingKey,
						ti_days
					FROM tp_lists with(nolock) 
					WHERE TI_TOKey = ' + str(@tokey)
						
		if @calcKey is not null
			set @sql = @sql + ' and TI_CalculatingKey = ' + str(@calcKey) 
				
		set @sql = @sql + ''')'

		exec (@sql)
	end
	else if dbo.mwReplIsSubscriber() = 0 and dbo.mwReplIsPublisher() = 0
	begin
		update tp_lists
		set ti_chkey =
					(
						select top 1 ts_code
						from tp_servicelists with(nolock) 
						inner join tp_services with(nolock) on tl_tskey = ts_key and ts_svkey = 1
						where tl_tikey = ti_key and ts_tokey = @tokey and tl_tokey = @tokey
							and (ts_day <= @firsthdday or (ts_day = 1 and @firsthdday = 0)) and ts_subcode2 = @ctdeparturekey
					),
			ti_firsthotelday = @firsthdday
		where ti_tokey = @toKey
	end
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание заполнения таблицы #tp_lists', @tokey)
	
	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @countryKey int
	declare @cityFromKey int

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	set @updateTpListsScript = '
	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from #.TP_Prices with(nolock) 
				left join #.TP_Lists with(nolock) on ti_key = tp_tikey
				left join HotelRooms with(nolock) on hr_key = ti_firsthrkey				
			where TP_TOKey = TO_Key 
					and hr_main > 0 
					and (isnull(HR_AGEFROM, 0) <= 0 or isnull(HR_AGEFROM, 0) > 16)
		)
		where TO_Key = @tokey'
	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@tokey int', @tokey=@tokey

	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	set @updateTpListsScript = '
	update #.tp_lists
	set
		ti_lasthotelday = (select max(ts_day)
				from #.tp_servicelists  with (nolock)
					inner join #.tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3 and TS_TOKey = @tokey and TL_TOKey = @tokey)'

	if dbo.mwReplIsSubscriber() = 0
	begin
		set @updateTpListsScript = @updateTpListsScript + ' where ti_tokey = @toKey'
	end

	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@tokey int', @tokey=@tokey

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey	

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 30%...', @tokey)

	-- MEG00024548 Paul G 11.01.2009
	-- изменил логику подсчёта кол-ва ночей в туре
	-- раньше было сумма ночей проживания по всем отелям в туре
	-- теперь если проживания пересекаются, лишние ночи не суммируются
	select top 0
	null as xTotalDays, null as xFirstTiKey, null as xTiNights
	into #tmpTiNights
	from tp_lists

	set @sql = '
	insert into #tmpTiNights (xTotalDays, xFirstTiKey, xTiNights)
	select distinct ti_totaldays as xTotalDays, 
		(select top 1 ti_key from #.tp_lists as x where x.ti_tokey = @tokey and x.ti_totaldays = t.ti_totaldays) as xFirstTiKey, 
		null as xTiNights
	from #.tp_lists as t'

	if dbo.mwReplIsSubscriber() = 0
	begin
		set @sql = @sql + ' where t.ti_tokey = @tokey'
	end

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@tokey int', @tokey=@tokey

	declare @nights int, @currday int, @tiKeyCurrent int
	
	declare tempCurs cursor for
	select xFirstTiKey from #tmpTiNights
	open tempCurs
	fetch NEXT from tempCurs into @tiKeyCurrent

	-- вычисляем кол-во проживания в ночах на данное кол-во дней
	while @@FETCH_STATUS = 0
	begin
		set @nights = 0
		set @currday = 0
		
		set @sql = '
		declare @day int, @duration int

		declare curs cursor for
		select ts_day, ts_days
		from #.tp_servicelists with(nolock)
			inner join #.tp_services with(nolock) on tl_tskey = ts_key 
		where tl_tikey = @tiKeyCurrent and ts_svkey = 3
		order by ts_day
		open curs

		fetch NEXT from curs into @day, @duration

		while @@FETCH_STATUS = 0
		begin
			if @currday <= @day
			begin
				set @nights = @nights + @duration
				set @currday = @day + @duration
			end

			fetch NEXT from curs into @day, @duration
		end

		close curs
		deallocate curs'
		set @sql = replace(@sql, '#.', @mod)
		exec sp_executesql @sql, N'@currday int output, @nights int output, @tiKeyCurrent int', @currday=@currday output, @nights=@nights output, @tiKeyCurrent=@tiKeyCurrent
		
		update #tmpTiNights set xTiNights = @nights WHERE xFirstTiKey = @tiKeyCurrent
		
		fetch NEXT from tempCurs into @tiKeyCurrent
	end
	
	close tempCurs
	deallocate tempCurs	
	
	set @updateTpListsScript = '
	update #.tp_lists 
	set
		ti_nights = (select xTiNights from #tmpTiNights WHERE ti_totaldays = xTotalDays) 
	where ti_nights is null'

	if dbo.mwReplIsSubscriber() = 0
	begin
		set @updateTpListsScript = @updateTpListsScript + ' and ti_tokey = @toKey'
	end

	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@toKey int', @toKey=@toKey

	--koshelev
	--02.04.2012 MEG00040744
    declare @result nvarchar(256)
	set @result = N''

	set @sql = '    
    select @result = @result + rtrim(ltrim(str(tbl.ti_nights))) + N'', ''
	from 
	(
		select distinct ti_nights 
		from 
		(
			select ti_nights 
			from #.tp_lists
			where ti_tokey = @tokey
		
			union 

			select ti_nights 
			from tp_lists with(nolock) 
			where ti_tokey = @tokey
		) as tbl2
	) tbl 
	order by tbl.ti_nights'
	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@result nvarchar(256) output, @tokey int', @result=@result output, @tokey=@tokey

    declare @len int
    set @len = len(@result)
    if(@len > 0)
		set @result = substring(@result, 1, @len - 1)

    update TP_Tours set TO_HotelNights = @result where TO_Key = @tokey

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 40%...', @tokey)
	
	set @updateTpListsScript = '
	update #.tp_lists 
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where ti_tokey = @tokey

	update #.tp_lists
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from #.tp_servicelists with (nolock)
		inner join #.tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and TS_TOKey = @tokey and TL_TOKey = @tokey'

	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@tokey int', @tokey=@tokey

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 50%...', @tokey)
		
	declare @existBackCharter smallint

	set @updateTpListsScript = '
	-- город вылета + прямой перелет
	update #.tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from #.tp_servicelists with(nolock) 
	inner join #.tp_services with(nolock) on tl_tskey = ts_key and ts_svkey = 1
	where	tl_tikey = ti_key 
		and (ts_day <= ti_firsthotelday or (ts_day = 1 and ti_firsthotelday = 0))
		and ts_code = ti_chkey 
		and ts_subcode2 = @ctdeparturekey
		and TS_TOKey = @tokey 
		and TL_TOKey = @tokey
		and ti_tokey = @toKey

	update #.tp_lists
	set ti_ctkeyfrom = @ctdeparturekey
	where ti_tokey = @toKey

	-- Проверка наличия перелетов в город вылета
	select	@existBackCharter = count(ts_key)
	from	#.tp_services with(nolock)
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = @ctdeparturekey'

	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@existBackCharter int output, @tokey int, @ctdeparturekey int', @existBackCharter=@existBackCharter output, @tokey=@tokey, @ctdeparturekey=@ctdeparturekey

	set @updateTpListsScript = '
	-- город прилета + обратный перелет
	update #.tp_lists
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from #.tp_servicelists with(nolock)
		inner join #.tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours with(nolock) on ts_tokey = to_key 
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = @ctdeparturekey and @existBackCharter > 0)
		and TI_TOKey = @tokey
		and TS_TOKey = @tokey 
		and TL_TOKey = @tokey

	-- _ключ_ аэропорта вылета
	update #.tp_lists 
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport with(nolock), charter with(nolock) 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where ti_tokey = @toKey

	-- _ключ_ аэропорта прилета
	update #.tp_lists
	set 
		ti_apkeyto = (select top 1 ap_key from airport with(nolock), charter with(nolock) 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where ti_tokey = @toKey

	-- ключ города и ключ курорта + звезды
	update #.tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary with(nolock)
	where 
		ti_firsthdkey = hd_key
		and ti_tokey = @toKey'

	set @updateTpListsScript = replace(@updateTpListsScript, '#.', @mod)
	exec sp_executesql @updateTpListsScript, N'@ctdeparturekey int, @existBackCharter smallint, @tokey int', @ctdeparturekey=@ctdeparturekey, @existBackCharter=@existBackCharter, @tokey=@tokey

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 60%...', @tokey)

	if dbo.mwReplIsPublisher() > 0
	begin
		declare @trkey int
		select @trkey = to_trkey from dbo.tp_tours with(nolock) where to_key = @tokey
		
		insert into dbo.mwReplTours (rt_trkey, rt_tokey, rt_date, rt_CalcKey)
		values (@trkey, @tokey, getdate(), @calcKey)
		
		update CalculatingPriceLists set CP_Status = 0 where CP_PriceTourKey = @tokey and cp_key = @calcKey
		update dbo.TP_Tours 
		set TO_Update = 0, 
			TO_Progress = 100,
			TO_IsEnabled = 1
		where TO_Key = @tokey
		
		return
	end
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки и обновления в #tmpHotelData', @tokey)

	set @sql = '
	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid,
		thd_hotelurl
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		@forceEnable, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid,
		hd_http
	from #.tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join #.tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join #.tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @tokey 
		and to_datevalid >= getdate() 
		and TS_TOKey = @tokey 
		and TL_TOKey = @tokey
		and ti_tokey = @toKey'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@tokey int, @forceEnable smallint', @tokey = @tokey, @forceEnable = @forceEnable

	set @sql = 'update #tmpHotelData 
	set thd_hdorder = (
		select min(ts_day) 
		from #.tp_services with(nolock) 
		where ts_tokey = thd_tourkey 
			and ts_svkey = 3 
			and ts_code = thd_hdkey
			and ts_tokey = @toKey
	)'
	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@tokey int', @tokey = @tokey

	update #tmpHotelData set thd_rsname = rs_name from resorts with(nolock) where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary with(nolock) where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary with(nolock) where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки и обновления #tmpHotelData', @tokey)
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 70%...', @tokey)

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings with(nolock)
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'

	if (@calcKey is null)
	begin
		delete from dbo.mwSpoDataTable where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations where sd_tourkey = @tokey
	end
	else
	begin
		--saifullina 16.01.2013 если мы изменили название и дозаписываем тур, то должны дозаписать с новым названием
		update dbo.mwSpoDataTable set sd_tourname=(select to_name from TP_Tours with(nolock) where TO_Key=@tokey) where sd_tourkey = @tokey
	end

	INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки и обновления #tempTourHotelsInfo', @tokey)
	create table #tempTourHotelsInfo (
		tt_tikey int,		
		tt_tourhotels varchar(256) collate database_default
	)

	set @sql = 'insert into #tempTourHotelsInfo (tt_tikey, tt_tourhotels)
	select ti_key, dbo.mwGetTourHotels(ti_key)
	from #.tp_lists with(nolock)'
	
	--set @sql = '
	--insert into #tempTourHotelsInfo (tt_tikey, tt_tourhotels)
	--select ti_key, isnull(ltrim(str(ts_code)),'''') + '':''
	--				+ isnull(ltrim(str(hr_rmkey)),'''') + '':'' 
	--				+ isnull(ltrim(str(hr_rckey)),'''') + '':'' 
	--				+ isnull(ltrim(str(ts_day)),'''') + '':''
	--				+ isnull(ltrim(str(ts_days)),'''') + '':'' 
	--				+ isnull(ltrim(str(TS_OpPartnerKey)),'''') + '':'' 
	--				+ isnull(ltrim(str(TS_subcode1)),'''') + '':'' 
	--				+ isnull(ltrim(str(TS_subcode2)),'''')
	--from
	--	#.tp_services with(nolock)
	--	inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
	--	inner join #.tp_lists with(nolock) on ti_key = tl_tikey
	--	inner join HotelRooms with(nolock) on  hr_key = ts_subcode1
	--where
	--	ts_svkey = 3'

	if dbo.mwReplIsSubscriber() = 0
	begin
		set @sql = @sql + ' where ti_tokey = @toKey'
	end

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@tokey int', @tokey = @toKey

	--End MEG00026692	
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки и обновления #tempTourHotelsInfo', @tokey)
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки и обновления #tempTourChartersInfo', @tokey)
	-- данные по авиаперелётам одинаковы в пределах каждого CalculatingKey
	create table #tempTourChartersInfo (
		tt_tiCalcKey int,
		tt_charterto varchar(256) collate database_default,
		tt_charterback varchar(256) collate database_default,
		tt_directFlightAttribute int,
		tt_backFlightAttribute int
	)

	set @sql = '
	declare @tiCalcKeyTemp as int
	declare calcKeysCursor cursor for
	select distinct ti_calculatingKey
	from #.tp_lists
	where ti_tokey = @toKey

	open calcKeysCursor

	fetch next from calcKeysCursor into @tiCalcKeyTemp

	-- заполнение данных по авиаперелётам
	while @@fetch_status = 0
	begin
		declare @dirCharters as varchar(256), @backCharters as varchar(256)
		set @dirCharters = null
		select 
			@dirCharters = coalesce(@dirCharters + '','', '''')
				+ isnull(ltrim(str(ts_code)),'''') + '':'' + isnull(ltrim(str(ts_day)),'''') + '':'' 
				+ isnull(ltrim(str(TS_OpPartnerKey)),'''') + '':'' + isnull(ltrim(str(TS_OpPacketKey)),'''')
		from 
			#.tp_services with(nolock)
				inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
				inner join #.tp_lists with(nolock) on ti_key = tl_tikey
		where
			ts_svkey = 1
			and ts_tokey = @toKey
			and tl_tokey = @toKey
			and ti_tokey = @toKey
			and tl_tikey in (select top 1 ti_key from #.tp_lists where ti_calculatingKey = @tiCalcKeyTemp and ti_tokey = @toKey)
			and ts_day <= ti_days / 2
		order by
			ts_day

		set @backCharters = null
		select 
			@backCharters = coalesce(@backCharters + '','', '''')
				+ isnull(ltrim(str(ts_code)),'''') + '':'' + isnull(ltrim(str(ts_day)),'''') + '':'' 
				+ isnull(ltrim(str(TS_OpPartnerKey)),'''') + '':'' + isnull(ltrim(str(TS_OpPacketKey)),'''')
		from 
			#.tp_services with(nolock)
				inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
				inner join #.tp_lists with(nolock) on ti_key = tl_tikey
		where
			ts_svkey = 1
			and ts_tokey = @toKey
			and tl_tokey = @toKey
			and ti_tokey = @toKey
			and tl_tikey in (select top 1 ti_key from #.tp_lists where ti_calculatingKey = @tiCalcKeyTemp and ti_tokey = @toKey)
			and ts_day > ti_days / 2
		order by
			ts_day

		declare @directFlightAttr as int, @backFlightAttr as int
		set @directFlightAttr = null
		select TOP 1 
			@directFlightAttr = ts_attribute
		from 
			#.tp_services with(nolock)
				inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
				inner join #.tp_lists with(nolock) on ti_key = tl_tikey
		where
			ts_svkey = 1
			and ts_tokey = @toKey
			and tl_tokey = @toKey
			and ti_tokey = @toKey
			and tl_tikey in (select top 1 ti_key from #.tp_lists where ti_calculatingKey = @tiCalcKeyTemp and ti_tokey = @toKey)
			and ts_day <= ti_days / 2
		order by
			ts_day

		set @backFlightAttr = null
		select TOP 1 
			@backFlightAttr = ts_attribute
		from 
			#.tp_services with(nolock)
				inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
				inner join #.tp_lists with(nolock) on ti_key = tl_tikey
		where
			ts_svkey = 1
			and ts_tokey = @toKey
			and tl_tokey = @toKey
			and ti_tokey = @toKey
			and tl_tikey in (select top 1 ti_key from #.tp_lists where ti_calculatingKey = @tiCalcKeyTemp and ti_tokey = @toKey)
			and ts_day > ti_days / 2
		order by
			ts_day

		insert into #tempTourChartersInfo (tt_tiCalcKey, tt_charterto, tt_charterback, tt_directFlightAttribute, tt_backFlightAttribute)
		values (@tiCalcKeyTemp, @dirCharters, @backCharters, @directFlightAttr, @backFlightAttr)

		fetch next from calcKeysCursor into @tiCalcKeyTemp

	end

	close calcKeysCursor
	deallocate calcKeysCursor'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@tokey int', @tokey = @toKey
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки и обновления #tempTourChartersInfo', @tokey)
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки в #tempPriceTable', @tokey)

	set @sql = 'insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_ctkeyto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_rate],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor],
		pt_hddetails,
		pt_directFlightAttribute,
		pt_backFlightAttribute
	)
	select 
			(	case when @mwAccomodationPlaces = ''0''
				then isnull(rm_nplaces, 0)
				else (	case when @findByAdultChild = 1 -- искать по взрослым
						then isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
						-- искать по основным
						else isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
						end)
				end),
			(	case when isnull(ac_nmenexbed, -1) = -1
				then (	case when @mwRoomsExtraPlaces <> ''0''
						then isnull(rm_nplacesex, 0)
						else isnull(ac_nmenexbed, 0)
						end)
				else (	case when @findByAdultChild = 1 -- искать по детям
						then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
						-- искать по дополнительным местам
						else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
						end)
				end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		to_rate,
		@forceEnable,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		tt_charterto,
		tt_charterback,
		to_pricefor,
		tt_tourhotels,
		tt_directFlightAttribute,
		tt_backFlightAttribute
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join #.tp_lists with(nolock) on ti_tokey = to_key
		inner join #.tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date = tp_datebegin)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
		inner join #tempTourHotelsInfo on tt_tikey = ti_key
		left join #tempTourChartersInfo on ti_calculatingKey = tt_tiCalcKey
	where
		to_key = @tokey
		and TP_TOKey = @tokey
		and (@calcKey is null or TP_CalculatingKey = @calcKey)'

	if dbo.mwReplIsSubscriber() = 0
	begin
		set @sql = @sql + ' and tp_tokey = @toKey and ti_tokey = @toKey'
	end

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@findByAdultChild int, @forceEnable smallint, @tokey int, @calcKey int, @mwAccomodationPlaces nvarchar(254), @mwRoomsExtraPlaces nvarchar(254)',
		@findByAdultChild=@findByAdultChild, @forceEnable=@forceEnable, @tokey=@tokey, @calcKey=@calcKey, @mwAccomodationPlaces=@mwAccomodationPlaces, @mwRoomsExtraPlaces=@mwRoomsExtraPlaces
			
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки в #tempPriceTable', @@rowcount)

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Прогресс выствления тура 80%...', @tokey)

	if dbo.mwReplIsPublisher() <= 0
	begin
		
		set @sql = '
		insert into dbo.mwPriceDurations (
			sd_tourkey,
			sd_tlkey,
			sd_days,
			sd_nights,
			sd_hdnights
		)
		select distinct
			ti_tokey,
			to_trkey,
			ti_totaldays,
			ti_nights,
			ti_hoteldays
		from #.tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key'

		if dbo.mwReplIsSubscriber() = 0
		begin
			set @sql = @sql + ' and ti_tokey = @toKey'
		end

		set @sql = replace(@sql, '#.', @mod)
		exec sp_executesql @sql, N'@toKey int', @toKey=@toKey

		-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
		update mwspodatatable 
		set sd_tourcreated = to_datecreated 
		from tp_tours with(nolock)
		where sd_tourkey = to_key 		
			and to_key = @tokey
			and sd_tourcreated != to_datecreated 

		set @counter = -1
		set @deleteCount = 50000
		set @params = '@counterOut int output'

		-- Переписываем данные из временной таблицы и уничтожаем ее
		if @mwSearchType = 0
		begin
			while(@counter <> 0)
			begin
				if (@calcKey is not null)
				begin
					set @sql = 'delete top (@deleteCount) from mwPriceDataTable where pt_pricekey in (select tp_key from #.tp_prices with(nolock) where TP_CalculatingKey = ' 
						+ cast(@calcKey as nvarchar(20)) + '); set @counterOut = @@ROWCOUNT'
					set @sql = replace(@sql, '#.', @mod)
					set @sql = replace(@sql, '@deleteCount', ltrim(STR(@deleteCount)))
				end
				else
				begin
					set @sql = 'delete top (@deleteCount) from mwPriceDataTable where pt_tourkey = ' + cast(@tokey as nvarchar(20)) + ';set @counterOut = @@ROWCOUNT'
					set @sql = replace(@sql, '@deleteCount', ltrim(STR(@deleteCount)))
				end
				EXECUTE sp_executesql @sql, @params, @counterOut = @counter output
			end
			
			INSERT into Debug (db_Text, db_n1) 	VALUES ('Начало вызова mwFillPriceTable', @tokey)
			exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
			INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вызова mwFillPriceTable', @tokey)
		end
		else
		begin			
			declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
			open cur
			fetch next from cur into @countryKey, @cityFromKey
			while @@fetch_status = 0
			begin
				INSERT into Debug (db_Text, db_n1) VALUES ('Начало вызова mwCreateNewPriceTable', @tokey)
				exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
				INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вызова mwCreateNewPriceTable', @tokey)

				set @counter = -1
				set @params = '@counterOut int output'
				while(@counter <> 0)
				begin
					if (@calcKey is not null)
					begin
						set @sql = 'delete top (@deleteCount) from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' where pt_pricekey in (select tp_key from #.tp_prices with(nolock) where TP_CalculatingKey = ' 
							+ cast(@calcKey as nvarchar(20)) + '); set @counterOut = @@ROWCOUNT'
						set @sql = replace(@sql, '#.', @mod)
						set @sql = replace(@sql, '@deleteCount', ltrim(STR(@deleteCount)))
					end
					else
					begin
						set @sql = 'delete top (@deleteCount) from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' where pt_tourkey = ' + cast(@tokey as nvarchar(20)) + '; set @counterOut = @@ROWCOUNT'
						set @sql = replace(@sql, '@deleteCount', ltrim(STR(@deleteCount)))
					end
					EXECUTE sp_executesql @sql, @params, @counterOut = @counter output
				end
				
				INSERT into Debug (db_Text, db_n1) VALUES ('Начало вызова mwFillPriceTable', @tokey)
				exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey
				INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вызова mwFillPriceTable', @tokey)
				
				fetch next from cur into @countryKey, @cityFromKey
			end		
			close cur
			deallocate cur
		end
	end
	
	if dbo.mwReplIsPublisher() <= 0
	begin

		update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey
		INSERT into Debug (db_Text, db_n1) 	VALUES ('Прогресс выствления тура 90%...', @tokey)
		
		INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки в mwPriceHotels', @tokey)
		insert into dbo.mwPriceHotels (
			sd_tourkey,
			sd_mainhdkey,
			sd_mainpnkey,
			sd_hdkey,
			sd_hdstars,
			sd_hdctkey,
			sd_hdrskey,
			sd_hrkey,
			sd_rmkey,
			sd_rckey,
			sd_ackey,
			sd_pnkey,
			sd_hdorder)
		select distinct 
			thd_tourkey, 
			thd_firsthdkey, 
			thd_firstpnkey,
			thd_hdkey, 
			thd_hdstars, 
			thd_ctkey, 
			thd_rskey, 
			thd_hrkey, 
			thd_rmkey, 
			thd_rckey, 
			thd_ackey, 
			thd_pnkey,
			thd_hdorder
		from #tmpHotelData
		INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки в mwPriceHotels', @@rowcount)
		
		INSERT into Debug (db_Text, db_n1) VALUES ('Начало вставки в mwSpoDataTable', @tokey)
		-- информация об отелях
		insert into mwSpoDataTable (
			sd_tourkey, 
			sd_cnkey, 
			sd_hdkey, 
			sd_hdstars, 
			sd_ctkey, 
			sd_rskey, 
			sd_ctkeyfrom, 
			sd_ctkeyto, 
			sd_tlkey, 
			sd_isenabled, 
			sd_tourcreated,
			sd_main,
			sd_pnkey,
			sd_tourtype,
			sd_cnname,
			sd_tourname,
			sd_hdname,
			sd_ctname,
			sd_rsname,
			sd_ctfromname,
			sd_cttoname,
			sd_tourtypename,
			sd_pncode,
			sd_hotelkeys,
			sd_pansionkeys,
			sd_tourvalid,

			sd_hotelurl,
			sd_hdprkey
		) 
		select distinct 
			thd_tourkey, 
			thd_cnkey, 
			thd_hdkey, 
			thd_hdstars, 
			thd_ctkey, 
			thd_rskey, 
			thd_ctkeyfrom, 
			thd_ctkeyto, 
			thd_tlkey, 
			thd_isenabled, 
			thd_tourcreated,
			thd_hdmain,
			thd_pnkey,
			thd_tourtype,
			thd_cnname,
			thd_tourname,
			thd_hdname,
			thd_ctname,
			thd_rsname,
			thd_ctfromname,
			thd_cttoname,
			thd_tourtypename,
			thd_pncode,
			thd_hotelkeys,
			thd_pansionkeys,
			thd_tourvalid,
			thd_hotelurl,
			thd_hdpartnerkey
		from #tmpHotelData 
		where thd_hdmain > 0
		
		INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вставки в mwSpoDataTable', @@rowcount)
		
		update mwPriceHotels set ph_sdkey = mwsdt.sd_key
			from mwSpoDataTable mwsdt with(nolock)
			where mwsdt.sd_tourkey = mwPriceHotels.sd_tourkey and mwsdt.sd_hdkey = mwPriceHotels.sd_mainhdkey
				and mwsdt.sd_tourkey = @tokey
				and mwPriceHotels.sd_tourkey = @tokey

		-- Указываем на необходимость обновления в таблице минимальных цен отеля
		update mwHotelDetails 
			set htd_needupdate = 1
			where htd_hdkey in (select thd_hdkey from #tmpHotelData)
			
	end

	INSERT into Debug (db_Text, db_n1) VALUES ('Вызов mwFillPriceListDetails', @tokey)
	EXECUTE mwFillPriceListDetails @tokey
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание вызова mwFillPriceListDetails', @tokey)
		
	if dbo.mwReplIsSubscriber() = 1
	begin
		INSERT into Debug (db_Text, db_n1) VALUES ('Начало удаления из временных tp_ таблиц', @tokey)
		DROP TABLE #tp_prices
		
		DROP TABLE #tp_serviceLists
	
		DROP TABLE #tp_services

		DROP TABLE #tp_lists
		INSERT into Debug (db_Text, db_n1) VALUES ('Окончание удаления из временных tp_ таблиц', @tokey)
	end
	
	if(@forceEnable > 0 and @calcKey is null)
	begin
		update tp_tours
		set to_isenabled = 1
		where to_key = @tokey
	end

	drop table #tempPriceTable

	update dbo.TP_Tours
	set TO_Update = 0,
		TO_Progress = 100,
		TO_DateCreated = GetDate()
	where
		TO_Key = @tokey

	if dbo.mwReplIsSubscriber() <= 0
	begin
		update dbo.TP_Tours 
		set TO_UpdateTime = GetDate()
		where
			TO_Key = @tokey
	end
	
	INSERT into Debug (db_Text, db_n1) VALUES ('Окончание выполнения FillMasterWebSearchFields', @tokey)
end
GO

GRANT EXECUTE on [dbo].[FillMasterWebSearchFields] to public
GO
/*********************************************************************/
/* end sp_FillMasterWebSearchFields.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_FillMasterWebSearchFields.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCleaner.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCleaner.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCleaner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwCleaner]
GO

CREATE PROCEDURE [dbo].[mwCleaner] @priceCount int = 1000000, @deleteToday smallint = 0
as
begin
	--<DATE>2015-01-16</DATE>
	--<VERSION>9.2.21.3</VERSION>
	declare @counter bigint
	declare @deletedRowCount bigint

	insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Запуск mwCleaner', 1)

	declare @today datetime
	set @today = getdate()
	if (@deleteToday <> 1)
	begin
		set @today = dateadd(day, -1, @today)
	end

	-- таблица с ключами туров для отложенного расчета
	create table #excludedTourKeys
	(
		xKey int identity(1,1) primary key,
		xToKey int
	)

	-- с момента запланированного запуска прошло менее недели, либо этот момент еще не наступил
	insert into #excludedTourKeys (xToKey)
	select distinct CP_PriceTourKey 
	from CalculatingPriceLists with(nolock) 
	where CP_StartTime is not null 
	and CP_PriceTourKey is not null
	and datediff(day, CP_StartTime, @today) < 7
	-- с момента запланированного запуска прошло менее недели, либо этот момент еще не наступил
	UNION
	SELECT to_key
	from tp_tours 
	where TO_UPDATE <> 0
	and datediff(day, to_updatetime, @today) < 7

	
	IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDeletedPricesTemp]') AND type in (N'U'))
	begin
		delete from mwReplDeletedPricesTemp
		where rdp_date < DATEADD(day, -3, @today)

		if not exists(select top 1 1 from mwReplDeletedPricesTemp)
		begin
			if (dbo.mwReplIsSubscriber() <= 0)
				DBCC CHECKIDENT('mwReplDeletedPricesTemp', RESEED, 0)
			else
				truncate table mwReplDeletedPricesTemp
		end
	end

	IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Megatec_StateDataPaging]') AND type in (N'U'))
	begin
		while (1 = 1)
		begin
			delete top (@priceCount) from Megatec_StateDataPaging
			where SDP_Date < DATEADD(MONTH, -1, @today)	

			if (@@ROWCOUNT = 0)
				break
		end
	end

	if dbo.mwReplIsSubscriber() > 0 or dbo.mwReplIsPublisher() = 0
	begin
		truncate table CacheQuotas
	end
	
	if dbo.mwReplIsSubscriber() <= 0
	begin
		-- очистка таблиц только на основной базе в случае репликации или если репликации нет

		-- Удаляем записи из таблицы TP_ServiceTours, если таких туров больше нету
		-- Тут количество записей будет не большим, поэтому можно не делить на пачки, туры удаляются редко в ДЦ
		SELECT ST_Id 
		into #Keys
		FROM TP_ServiceTours with(nolock)
		where not exists (select top 1 1 from TP_Tours with(nolock) where TO_Key = ST_TOKey)
		and st_tokey not in (select xToKey from #excludedTourKeys)
	
		delete TP_ServiceTours WHERE ST_Id in (select x.ST_Id from #Keys as x)
	
		drop table #Keys
	
		-- Удаляем неактуальные цены
		set @counter = 0
		while(1 = 1)
		begin
	
			delete 
			from dbo.tp_prices 
			where tp_key in (SELECT top (@priceCount/10) tp_key 
							 from dbo.tp_prices with(nolock) 
							 WHERE tp_datebegin < @today 
								   and tp_tokey not in (select xToKey from #excludedTourKeys)
							)
					
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_prices завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				--print 'Удаление tp_prices завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
				break
			end
			else
			begin
				print 'Удалено из tp_prices ' + ltrim(str(@deletedRowCount)) + ' записей'
				set @counter = @counter + @deletedRowCount
			end
		end

		-- Удаляем неактуальные удаленные цены из TP_PricesDeleted (ДЦ)
		set @counter = 0
		while(1 = 1)
		begin
			delete 
			from dbo.tp_pricesDeleted 
			where tpd_id in (select top (@priceCount/5) tpd_id 
							 from dbo.tp_pricesDeleted with(nolock)
							 where tpd_datebegin < @today 
								   and tpd_tokey not in (select xToKey from #excludedTourKeys)
			)
		
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_pricesDeleted завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				print 'Удаление tp_pricesDeleted завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
				break
			end
			else
			begin
				print 'Удалено из tp_pricesDeleted ' + ltrim(str(@deletedRowCount)) + ' записей'
				set @counter = @counter + @deletedRowCount
			end
		end	
	
		-- Удаляем неактуальные удаленные цены из TP_PriceComponents (ДЦ)
		set @counter = 0
		while(1 = 1)
		begin
			delete 
			from dbo.TP_PriceComponents 
			where PC_ID in (SELECT top (@priceCount/50) PC_ID 
							FROM dbo.TP_PriceComponents with(nolock) 
							WHERE PC_TourDate < @today
							and pc_tokey not in (select xToKey from #excludedTourKeys)
			)
		
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_PriceComponents завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				--print 'Удаление TP_PriceComponents завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
				break
			end
			else
			begin
				print 'Удалено из TP_PriceComponents ' + ltrim(str(@deletedRowCount)) + ' записей'
				set @counter = @counter + @deletedRowCount
			end			
		end	
	
		-- Удаляем неактуальные удаленные цены из TP_ServiceCalculateParametrs (ДЦ)
		set @counter = 0
		while(1 = 1)
		begin
			delete 
			from dbo.TP_ServiceCalculateParametrs 
			where SCP_ID in (select top (@priceCount) SCP_ID 
							 from dbo.TP_ServiceCalculateParametrs 
							 WHERE SCP_DateCheckIn < @today)
						 
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_ServiceCalculateParametrs завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				break
			end
			else
				set @counter = @counter + @deletedRowCount
		end	
	end

	-- Удаляем неактуальные удаленные цены из tp_turdates
	set @counter = 0
	while (1 = 1)
	begin
		delete 
		from dbo.tp_turdates 
		where td_key in (select top (@priceCount/10) td_key 
							from dbo.tp_turdates with(nolock) 
							where td_date < @today 
							and td_tokey not in (select xToKey from #excludedTourKeys)
		)
			
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_turdates завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end
		
	if dbo.mwReplIsSubscriber() <= 0
	begin
		-- tp_servicelists, tp_lists, tp_services		
		create table #tikeys (tikey int, tokey int)
		CREATE NONCLUSTERED INDEX [IX_Index1]
		ON #tikeys ([tokey])
		INCLUDE ([tikey])

		declare @toKey int
		declare tourCursor cursor local fast_forward for
		select to_key
		from tp_tours with(nolock)
		where TO_Key not in (select xToKey from #excludedTourKeys)
		order by to_key desc

		set @counter = 0

		open tourCursor
		fetch tourCursor into @toKey
		while (@@FETCH_STATUS = 0)
		begin
			insert into #tikeys 
			select ti_key, ti_tokey 
			from dbo.tp_lists with(nolock) 
			where not exists (select 1 from tp_prices with(nolock) where ti_key = tp_tikey and tp_tokey = TI_TOKey)
			and not exists (select 1 from TP_PricesDeleted with(nolock) where ti_key = tpd_tikey and tpd_tokey = TI_TOKey)
			and ti_tokey = @toKey

			delete 
			from dbo.tp_servicelists
			where exists (select 1 from #tikeys where tikey = TL_TIKey and tokey = TL_TOKey)
			and tl_tokey = @toKey

			set @counter = @counter + @@ROWCOUNT

			delete 
			from dbo.tp_lists 
			where ti_key in (select tikey from #tikeys where tokey = TI_TOKey) 
			and ti_tokey = @toKey

			set @counter = @counter + @@ROWCOUNT

			delete 
			from dbo.tp_services 
			where TS_Key not in (select TL_TSKey from TP_ServiceLists with(nolock) where TL_TOKey = TS_TOKey)
			and TS_TOKey = @toKey

			set @counter = @counter + @@ROWCOUNT

			truncate table #tikeys

			fetch tourCursor into @toKey
		end
		close tourCursor
		deallocate tourCursor

		drop table #tikeys

		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_servicelists, tp_lists, tp_services завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)		
	end
	else
	begin
		exec dbo.mwClearOldData
	end

	declare @mwSearchType int
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'
	
	if dbo.mwReplIsSubscriber() <= 0
	begin
		-- Удаляем неактуальные туры
		set @counter = 0
		while(1 = 1)
		begin

			delete 
			from dbo.TP_Tours 
			where to_key in (SELECT TOP 1 TO_Key 
							 FROM TP_Tours 
							 WHERE to_datevalid < @today
							 and to_key not in (select xToKey from #excludedTourKeys)
			)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_Tours завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)		
				break
			end
			else
				set @counter = @counter + @deletedRowCount
		end

		create table #tours
		(
			xKey int identity(1,1),
			xToKey int
		)
	
		insert into #tours (xToKey)
		select TO_Key
		from tp_tours with(nolock) where to_update = 0 and exists(select top 1 1 from dbo.tp_turdates with(nolock) where td_tokey = to_key and td_date < @today)

		declare @currentKey int, @maxKey int
		set @currentKey = 0
		select @maxKey = MAX(xKey) from #tours
		while (@currentKey < @maxKey)
		begin
			set @currentKey = @currentKey + 1
		
			update dbo.tp_tours
			set to_pricecount = (select count(1) from dbo.tp_prices with(nolock) where tp_tokey = to_key), 
				to_updatetime = getdate()
			where to_key = (select xToKey from #tours where xKey = @currentKey)
		
		end
	
		drop table #tours
		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Обновление tp_tours завершено. Обновлено ' + ltrim(@deletedRowCount) + ' записей', 1)
	end

	if dbo.mwReplIsPublisher() <= 0
	begin

		if exists(select 1 from mwReplQueue with(nolock) where rq_tokey not in (select to_key from tp_tours with(nolock)) and rq_mode <> 4)
		begin
			delete 
			from mwReplQueue
			where rq_tokey not in (select to_key from tp_tours with(nolock))
			and rq_mode <> 4
		end

		if(@mwSearchType = 0)
		begin
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount) 
				from dbo.mwPriceDataTable
				 where pt_tourdate < @today 
				 and pt_tourkey not in (select xToKey from #excludedTourKeys)

				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
			
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount) 
				from dbo.mwSpoDataTable 
				where not exists (select 1 from dbo.mwPriceDataTable with(nolock) where pt_tourkey = sd_tourkey and sd_hdkey = pt_hdkey) 
				and sd_tourkey not in (select xToKey from #excludedTourKeys)

				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwSpoDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
			
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount) 
				from dbo.mwPriceDurations 
				where not exists(select 1 from dbo.mwPriceDataTable with(nolock) where pt_tourkey = sd_tourkey and pt_days = sd_days and pt_nights = sd_nights) 
				and sd_tourkey not in (select xToKey from #excludedTourKeys)

				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceDurations завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
		end
		else
		begin
			declare @objName nvarchar(50), @counterPart int
			declare @sql nvarchar(500), @params nvarchar(500)
			declare delCursor cursor fast_forward read_only for select distinct sd_cnkey, sd_ctkeyfrom from dbo.mwSpoDataTable
			declare @cnkey int, @ctkeyfrom int
			open delCursor
			fetch next from delCursor into @cnkey, @ctkeyfrom
			while(@@fetch_status = 0)
			begin
				set @objName = dbo.mwGetPriceTableName(@cnkey, @ctkeyfrom)
				set @counter = 0
				while(1 = 1)
				begin
					set @sql = 'delete top (' + ltrim(rtrim(str(@priceCount))) + ') from ' + @objName + ' where pt_tourdate < @today and pt_tourkey not in (select xToKey from #excludedTourKeys); set @counterOut = @@ROWCOUNT'
					set @params = '@today datetime, @counterOut int output'
				
					EXECUTE sp_executesql @sql, @params, @today = @today, @counterOut = @counterPart output
				
					if @counterPart = 0
					begin
						insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление ' + @objName + ' завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
						break
					end
					else
						set @counter = @counter + @counterPart
				end

				set @counter = 0
				while(1 = 1)
				begin
					set @sql = 'delete top (' + ltrim(rtrim(str(@priceCount))) + ') 
					from dbo.mwSpoDataTable 
					where sd_cnkey = ' + ltrim(rtrim(str(@cnkey))) + ' and sd_ctkeyfrom = ' + ltrim(rtrim(str(@ctkeyfrom))) + '
					and not exists (select 1 from ' + @objName + ' with(nolock) where pt_tourkey = sd_tourkey and sd_hdkey = pt_hdkey) 
					and sd_tourkey not in (select xToKey from #excludedTourKeys); set @counterOut = @@ROWCOUNT'

					set @params = '@counterOut int output'
					EXECUTE sp_executesql @sql, @params, @counterOut = @counterPart output
				
					if @counterPart = 0
					begin
						insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwSpoDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
						break
					end
					else
						set @counter = @counter + @counterPart
				end
				fetch next from delCursor into @cnkey, @ctkeyfrom
			end
			close delCursor
			deallocate delCursor
		end
	
		set @counter = 0
		while(1 = 1)
		begin
			delete top (@priceCount) 
			from dbo.mwPriceHotels 
			where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable with(nolock)) 
			and sd_tourkey not in (select xToKey from #excludedTourKeys)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceHotels завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				break
			end
			else
				set @counter = @counter + @deletedRowCount
		end
	end

	-- Удаляем неактуальные логи (остаются логи за последние 7 дней)
	set @counter = 0
	while(1 = 1)
	begin
		delete top (@priceCount) from dbo.SystemLog where SL_DATE < DATEADD(day, -7, @today)
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление systemLog завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end

	insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Окончание выполнения mwCleaner', 1)
end
GO

grant exec on dbo.mwCleaner to public
GO

/*********************************************************************/
/* end sp_mwCleaner.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCleaner.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwPriceListCleaner.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwPriceListCleaner.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwPriceListCleaner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwPriceListCleaner]
GO

create proc [dbo].[mwPriceListCleaner]
as
begin
	--<VERSION>2009.2.21.1</VERSION>
	--<DATE>2014-08-14</DATE>
	delete from dbo.tp_prices where TP_DateBegin < getdate()
	delete from mwSpoDataTable where sd_tourkey not in (select distinct to_key from tp_tours)
	delete from mwPriceHotels where sd_tourkey not in (select distinct to_key from tp_tours)
	delete from mwPriceDurations where sd_tourkey not in (select distinct to_key from tp_tours)

	declare @mwSearchType int 
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if @mwSearchType = 0
	begin
		delete from mwPriceDataTable where pt_tourdate < getdate()
		delete from mwPriceDataTable where pt_pricekey not in (select tp_key from tp_prices with(nolock))
	end
	else
	begin	
		declare jobcur cursor for 
		select name from sysobjects where name like 'mwPriceDataTable[_]%[_]%' and xtype = 'U '

		declare @name varchar(200)
		declare @sql varchar(8000)
		
		open jobcur
	
		fetch next from jobcur into @name
		while(@@fetch_status = 0)
		begin
			set @sql = '
				delete from ' + @name + ' where pt_tourdate < getdate()
				delete from ' + @name + ' where pt_pricekey not in (select tp_key from tp_prices with(nolock))'
			exec(@sql)
			fetch next from jobcur into @name
		end
	
		close jobcur
		deallocate jobcur
	end

end
GO

grant execute on [dbo].[mwPriceListCleaner] to public
GO
/*********************************************************************/
/* end sp_mwPriceListCleaner.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwPriceListCleaner.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDeletePriceTour.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwReplDeletePriceTour.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDeletePriceTour]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplDeletePriceTour]
GO

create proc [dbo].[mwReplDeletePriceTour] @tokey int, @rqId int = null
as
begin

	--<VERSION>2009.2.21.2</VERSION>
	--<DATE>2014-12-29</DATE>

	if dbo.mwReplIsSubscriber() <= 0
		return

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
		where SS_ParmName = 'MWDivideByCountry'

	if @mwSearchType = 0
	begin
		if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start insert into mwDeleted.'
		
		if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwPriceDataTable.'

		while (1 = 1)
		begin
			update top(100000) mwPriceDataTable 
			set pt_isenabled = 0 
			where pt_isenabled > 0 and pt_tourkey = @tokey	

			if (@@ROWCOUNT = 0)
				break
		end
	end
	else
	begin
		declare @tablename varchar(100), @sql varchar(8000)
		declare dCur cursor for 
		select name from sysobjects with(nolock) 
		where name like 'mwPriceDataTable[_]%' and xtype = 'u'

		open dCur

		if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start insert into mwDeleted and update mwPriceDataTables.'

		fetch next from dCur into @tablename

		while (@@fetch_status=0)
		begin
			set @sql = 'if exists(select 1 from ' + @tableName + ' with(nolock) where pt_tourkey = ' + ltrim(str(@tokey)) + ' and pt_isenabled = 1)
			begin
				while (1 = 1)
				begin
					update top(100000) ' + @tableName + ' 
					set pt_isenabled = 0, pt_autodisabled = 0
					where pt_isenabled = 1 and pt_tourkey = ' + ltrim(str(@tokey)) + '

					if (@@ROWCOUNT = 0)
						break
				end
			end'

			exec (@sql)

			fetch next from dCur into @tablename
		end
		close dCur
		deallocate dCur
	end
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwSpoDataTable.'
			
	update mwSpoDataTable
	set sd_isenabled = 0 
	where sd_isenabled > 0 and sd_tourkey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start delete from TP_Prices.'
	delete from TP_Prices where tp_tokey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start delete from TP_ServiceLists.'
	delete from TP_ServiceLists where tl_tokey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start delete from TP_Services.'
	delete from TP_Services where ts_tokey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start delete from TP_Lists.'
	delete from TP_Lists where ti_tokey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start delete from TP_Tours.'
	delete from TP_Tours where to_key = @tokey
end
GO

GRANT EXECUTE on [dbo].[mwReplDeletePriceTour] to public
GO

/*********************************************************************/
/* end sp_mwReplDeletePriceTour.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDeletePriceTour.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDisableDeletedPrices.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwReplDisableDeletedPrices.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDisableDeletedPrices]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplDisableDeletedPrices]
GO

CREATE procedure [dbo].[mwReplDisableDeletedPrices]
--<DATE>2014-11-18</DATE>
--<VERSION>9.2.21.2</VERSION>
as
begin
	declare @cnKey int
	declare @ctKeyFrom int
	declare @sql varchar (500)
	declare @wasError as bit
	declare @errorText as nvarchar(max)

	set @wasError = 0

	select top 100000 * into #mwReplDeletedPricesTemp from dbo.mwReplDeletedPricesTemp with(nolock) order by rdp_cnkey, rdp_ctdeparturekey;
	create index x_pricekey on #mwReplDeletedPricesTemp(rdp_pricekey);

	begin try
	if exists(select top 1 1 from #mwReplDeletedPricesTemp)
	begin
		if exists(select 1 from SystemSettings where SS_ParmName = 'MWDivideByCountry' and SS_ParmValue = 1)
		begin
			declare @wasErrorInCycle as bit
			set @wasErrorInCycle = 0
			
			create table #PriceDetailsToDelete (xPriceKey int primary key, xTourKey int)
			create index x_tourkey on #PriceDetailsToDelete(xTourKey);

			create table #delKeys (xKey int primary key)

			begin try
				--Используется секционирование ценовых таблиц
				declare mwPriceDataTableNameCursor cursor local fast_forward for
				select distinct dbo.mwGetPriceTableName(rdp_cnkey, rdp_ctdeparturekey) as ptn_tablename, rdp_cnkey, rdp_ctdeparturekey
				from #mwReplDeletedPricesTemp with(nolock);

				declare @mwPriceDataTableName varchar(200);
				open mwPriceDataTableNameCursor;
				fetch next from mwPriceDataTableNameCursor into @mwPriceDataTableName, @cnKey, @ctKeyFrom;

				while @@FETCH_STATUS = 0
				begin
					if exists (select * from sys.tables where @mwPriceDataTableName like '%' + name)
					begin
						truncate table #PriceDetailsToDelete

						-- удаляем цены из поисковой таблицы
						set @sql = 'insert into #PriceDetailsToDelete (xPriceKey, xTourKey)
						select pt_pricekey, pt_tourkey from ' + @mwPriceDataTableName + '
						where exists(select 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = pt_pricekey)'
						exec (@sql)

						set @sql='
							update ' + @mwPriceDataTableName + ' 
							set pt_isenabled = 0
							where pt_isenabled = 1
							and pt_pricekey in (select xPriceKey from #PriceDetailsToDelete)';
						exec (@sql)

						-- удаляем записи из поискового фильтра
						truncate table #delKeys
						
						set @sql = 'insert into #delKeys (xKey) 
							select sd_key
							from mwSpoDataTable
							where sd_isenabled = 1
							and sd_cnkey = ' + ltrim(str(@cnKey)) + ' and sd_ctkeyfrom = ' + ltrim(str(@ctKeyFrom)) + '
							and sd_tourkey in (select distinct xTourKey from #PriceDetailsToDelete)
							and not exists (select 1 from [dbo].[' + @mwPriceDataTableName + '] with(nolock) where pt_isenabled = 1 and pt_tourkey = sd_tourkey and sd_hdkey = pt_hdkey and pt_tourkey in (select distinct xTourKey from #PriceDetailsToDelete))'
						exec (@sql)

						set @sql = 'update mwSpoDataTable set sd_isenabled = 0 where sd_key in (select xKey from #delKeys)'
						exec (@sql)

						-- удаляем записи из таблицы продолжительностей						
						truncate table #delKeys

						set @sql = 'insert into #delKeys (xKey) 
							select pd_key
							from mwPriceDurations
							where sd_tourkey in (select distinct xTourKey from #PriceDetailsToDelete)
							and not exists (select 1 from [dbo].[' + @mwPriceDataTableName + '] with(nolock) where pt_isenabled = 1 and pt_tourkey = sd_tourkey and pt_tourkey in (select distinct xTourKey from #PriceDetailsToDelete) and pt_nights = sd_nights)'
						exec (@sql)

						set @sql = 'delete from mwPriceDurations where pd_key in (select xKey from #delKeys)'
						exec (@sql)
						
						
					end

					fetch next from mwPriceDataTableNameCursor into @mwPriceDataTableName, @cnKey, @ctKeyFrom;
				end
			end try
			begin catch
				set @wasErrorInCycle = 1
				set @errorText = ERROR_MESSAGE()
			end catch

			-- release resources
			close mwPriceDataTableNameCursor
			deallocate mwPriceDataTableNameCursor

			if @wasErrorInCycle = 1
			begin
				-- rethrow error after resources release
				raiserror(@errorText, 16, 1)
			end
		end
		else
		begin
			--Секционирование не используется
			truncate table #PriceDetailsToDelete

			-- удаляем цены из поисковой таблицы
			insert into #PriceDetailsToDelete (xPriceKey, xTourKey)
			select pt_pricekey, pt_tourkey 
			from mwPriceDataTable
			where exists(select 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = pt_pricekey)

			update mwPriceDataTable
			set pt_isenabled = 0
			where pt_isenabled = 1
			and pt_pricekey in (select xPriceKey from #PriceDetailsToDelete)

			truncate table #delKeys
						
			-- удаляем записи из поискового фильтра
			insert into #delKeys (xKey) 
			select sd_key
			from mwSpoDataTable
			where sd_isenabled = 1
			and sd_tourkey in (select distinct xTourKey from #PriceDetailsToDelete)
			and not exists (select 1 from [dbo].[mwPriceDataTable] with(nolock) where pt_isenabled = 1 and pt_tourkey = sd_tourkey and sd_hdkey = pt_hdkey and pt_tourkey in (select distinct xTourKey from #PriceDetailsToDelete))

			update mwSpoDataTable set sd_isenabled = 0 where sd_key in (select xKey from #delKeys) and sd_isenabled = 1
						
			truncate table #delKeys

			-- удаляем записи из таблицы продолжительностей
			insert into #delKeys (xKey) 
			select pd_key
			from mwPriceDurations
			where sd_tourkey in (select distinct xTourKey from #PriceDetailsToDelete)
			and not exists (select 1 from [dbo].[mwPriceDataTable] with(nolock) where pt_isenabled = 1 and pt_tourkey = sd_tourkey and pt_tourkey in (select distinct xTourKey from #PriceDetailsToDelete) and pt_nights = sd_nights)

			delete from mwPriceDurations where pd_key in (select xKey from #delKeys)
		end

		-- delete from source table only if processing was successful
		delete from mwReplDeletedPricesTemp
		where exists(select top 1 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = mwReplDeletedPricesTemp.rdp_pricekey)

	end

	end try
	begin catch
		set @wasError = 1
		set @errorText = ERROR_MESSAGE()
	end catch

	-- release resources
	drop index x_pricekey on #mwReplDeletedPricesTemp;
	drop table #mwReplDeletedPricesTemp;

	if @wasError = 1
	begin
		-- rethrow error after resources release
		raiserror(@errorText, 16, 1)
	end
end
GO

GRANT EXECUTE on [dbo].[mwReplDisableDeletedPrices] to public
GO
/*********************************************************************/
/* end sp_mwReplDisableDeletedPrices.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDisableDeletedPrices.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplUpdatePriceEnabledAndValue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwReplUpdatePriceEnabledAndValue.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwReplUpdatePriceEnabledAndValue]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwReplUpdatePriceEnabledAndValue]
GO

CREATE proc [dbo].[mwReplUpdatePriceEnabledAndValue] @tokey int, @calcKey int, @rqId int = null
as
begin
	-- <date>2014-08-14</date>
	-- <version>2009.2.21.1</version>
	
	declare @tableName varchar(500)
	declare @mwSearchType int
	declare @source varchar(200), @sql nvarchar(max)
	set @source = ''
	
	if dbo.mwReplIsSubscriber() > 0 and len(dbo.mwReplPublisherDB()) > 0
		set @source = '[mt].' + dbo.mwReplPublisherDB() + '.'
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start mwReplUpdatePriceEnabledAndValue'
		
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'
	
	if (@mwSearchType = 0)
	begin
		set @tableName = 'mwPriceDataTable'
	end
	else
	begin
		declare @ctFromKey int, @cnKey int

		select @ctFromKey = TL_CTDepartureKey, @cnKey = TO_CNKey
		from Turlist join TP_Tours on TL_KEY = TO_TRKey
		where TO_Key = @tokey
		
		set @tableName = dbo.mwGetPriceTableName(@cnKey, @ctFromKey)		
	end
	
	set @sql = '
		update @tableName set pt_isenabled = 1, pt_price = tp_gross
		from @source dbo.tp_prices
		where pt_pricekey = tp_key 
			and tp_calculatingkey = @calcKey
	'
	
	set @sql = replace(@sql, '@tableName', @tableName)
	set @sql = replace(@sql, '@source', @source)

	exec sp_executesql @sql, N'@calcKey int', @calcKey = @calcKey

	-- обнулим признак актуальности у цен, у которых tp_gross is null по текущему tp_calculatingKey
	set @sql = '
		update @tableName set pt_isenabled = 0
		from @source dbo.tp_prices
		where pt_pricekey = tp_key 
			and tp_calculatingkey = @calcKey
			and tp_tokey = @tokey
			and tp_gross is null
	'

	set @sql = replace(@sql, '@tableName', @tableName)
	set @sql = replace(@sql, '@source', @source)

	exec sp_executesql @sql, N'@calcKey int, @tokey int', @calcKey = @calcKey, @tokey = @tokey
	
	if (@rqId is not null)
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'End mwReplUpdatePriceEnabledAndValue'
end
GO

GRANT EXEC ON [dbo].[mwReplUpdatePriceEnabledAndValue] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwReplUpdatePriceEnabledAndValue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplUpdatePriceEnabledAndValue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwDeleteTour.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_mwDeleteTour.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[mwDeleteTour]'))
	DROP TRIGGER [dbo].[mwDeleteTour]
GO

CREATE trigger [dbo].[mwDeleteTour] on [dbo].[TP_Tours]
for delete
as
begin

	--<VERSION>2009.2.21.1</VERSION>
	--<DATE>2014-08-11</DATE>

	if dbo.mwReplIsSubscriber() > 0
	begin
		insert into mwReplQueue(rq_mode, rq_tokey, rq_cnkey, rq_ctkeyfrom)
		select 4, to_key, TO_CNKey, isnull(TL_CTDepartureKey, 0)
		from deleted
		join tbl_TurList on TL_Key = TO_TRKey
	end
	else if dbo.mwReplIsPublisher() <= 0
	begin
		declare @sql nvarchar(max), @params nvarchar(max), @tourExists int

		declare @tableName nvarchar(100), @tokey int, @cnKey int, @ctDepartureKey int
		if exists(select 1 from SystemSettings where SS_ParmName = 'MWDivideByCountry' and SS_ParmValue = 1)
		begin
			declare tourCursor cursor fast_forward read_only for
			select to_key from deleted
			open tourCursor
			fetch tourCursor into @tokey
			while (@@FETCH_STATUS = 0)
			begin
				--Используется секционирование ценовых таблиц
				declare disableCursor cursor fast_forward read_only for
				select name from sysobjects with(nolock) where name like 'mwPriceDataTable[_]%' and xtype = 'u'
				
				open disableCursor
				fetch next from disableCursor into @tableName
				while (@@FETCH_STATUS = 0)
				begin
					set @sql = 'if exists (select 1 from ' + @tableName + ' with(nolock) where pt_tourkey = ' + ltrim(str(@toKey)) + ')
					begin
						set @tourExistsOut = 1
					end
					else
					begin
						set @tourExistsOut = 0
					end'
					set @params = '@tourExistsOut int output'
					EXECUTE sp_executesql @sql, @params, @tourExistsOut = @tourExists output

					if (@tourExists = 1)
					begin
						set @sql = 'update ' + @tableName + ' set pt_isenabled = 0 where pt_isenabled > 0 and pt_tourkey = ' + ltrim(str(@toKey)) + '
									update mwSpoDataTable set sd_isenabled = 0 where sd_isenabled > 0 and sd_tourkey = ' + ltrim(str(@toKey))
						exec (@sql)
					end
					fetch next from disableCursor into @tableName
				end

				close disableCursor
				deallocate disableCursor
				
				delete from TP_Prices where tp_tokey = @tokey
				delete from TP_ServiceLists where tl_tokey = @tokey
				delete from TP_Services where ts_tokey = @tokey
				delete from TP_Lists where ti_tokey = @tokey

				fetch tourCursor into @tokey
			end
			close tourCursor
			deallocate tourCursor
		end
		else
		begin
			--Секционирование ценовых таблиц НЕ используется
			set @tableName = 'dbo.mwPriceDataTable'

			declare disableCursor cursor fast_forward read_only for
			select 
				to_key
			from 
				deleted 

			open disableCursor
		
			fetch next from disableCursor into @tokey
			while @@fetch_status = 0
			begin
				set @sql = 'if exists (select 1 from ' + @tableName + ' with(nolock) where pt_tourkey = ' + ltrim(str(@toKey)) + ')
				begin
					set @tourExistsOut = 1
				end
				else
				begin
					set @tourExistsOut = 0
				end'
				set @params = '@tourExistsOut int output'
				EXECUTE sp_executesql @sql, @params, @tourExistsOut = @tourExists output

				if (@tourExists = 1)
				begin
					set @sql = 'update ' + @tableName + ' set pt_isenabled = 0 where pt_isenabled > 0 and pt_tourkey = ' + ltrim(str(@tokey)) + '
								update mwSpoDataTable set sd_isenabled = 0 where sd_isenabled > 0 and sd_tourkey = ' + ltrim(str(@tokey))
					exec (@sql)
				end

				delete from TP_Prices where tp_tokey = @tokey				
				delete from TP_ServiceLists where tl_tokey = @tokey				
				delete from TP_Services where ts_tokey = @tokey				
				delete from TP_Lists where ti_tokey = @tokey				

				fetch next from disableCursor into @tokey
			end
		
			close disableCursor
			deallocate disableCursor
		end

	end

end
GO
/*********************************************************************/
/* end T_mwDeleteTour.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwDeleteTour.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.14)_Drop_Table_mwDeleted.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.14)_Drop_Table_mwDeleted.sql */
/*********************************************************************/
IF EXISTS(SELECT TOP 1 1 FROM sysobjects WHERE [name] LIKE 'mwDeleted')
BEGIN
	DROP TABLE mwDeleted
END
GO
/*********************************************************************/
/* end (2014.08.14)_Drop_Table_mwDeleted.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.14)_Drop_Table_mwDeleted.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckQuotesCycle.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCheckQuotesCycle.sql */
/*********************************************************************/
if object_id('dbo.mwCheckQuotesCycle', 'p') is not null
	drop proc dbo.mwCheckQuotesCycle
go

create procedure [dbo].[mwCheckQuotesCycle]
	--<VERSION>9.2.20</VERSION>
	--<DATE>2014-09-02</DATE>
@pagingType	smallint,
@pageNum	int,		-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
@pageSize	int,
@agentKey	int,
@hotelQuotaMask smallint,
@aviaQuotaMask smallint,
@flightGroups	varchar(256),
@checkAgentQuota smallint,
@checkCommonQuota smallint,
@checkNoLongQuota smallint,
@requestOnRelease smallint,
@expiredReleaseResult int,
@noPlacesResult int,
@findFlight smallint = 0,	-- параметр устарел, вместо него используется признак подбора перелета. Оставлен для совместимости.
-- 4864 gorshkov
-- признак того, что мы подбираем варианты для подмешивания в поиск
@smartSearch bit = 0,
@tableName varchar(256) = null,
@airlineCodes ListSysNameValue readonly
as
begin


	-- настройки проверки квот через веб-сервис
	declare @checkQuotesOnWebService as bit, @checkQuotesService as nvarchar(150), @wasErrorCallingService bit
	set @checkQuotesOnWebService = 0
	set @wasErrorCallingService = 0
	select top 1 @checkQuotesOnWebService = ss_parmvalue from systemsettings with (nolock) where ss_parmname = 'NewSetToQuota'

	declare @sAviaTariffFirst varchar(10), @sAviaTariffSecond varchar(10), 
	@nAviaTariffFirst smallint, @nAviaTariffSecond smallint
	
	declare @initialFindflight int
	set @initialFindflight = @findFlight

	declare @GREEN_LABEL smallint, @YELLOW_LABEL smallint, @RED_LABEL smallint
	set @GREEN_LABEL = 1
	set @YELLOW_LABEL = 4
	set @RED_LABEL = 2

	declare @step_index smallint, @price_correction int, @additional varchar(2000)
	
	if (@smartSearch = 1)
	begin
		-- хранит ключи отелей которые были подмешаны в поиск
		declare @smartSearchKeys table (hdKey int);
	end
	else
	begin
		-- настройка включающая SmartSearch
		declare @mwUseSmartSearch int
		select @mwUseSmartSearch=isnull(SS_ParmValue,0) from dbo.systemsettings 
		where SS_ParmName='mwUseSmartSearch'
		-- пока SmartSearch работает с только с ACTUALPLACES_PAGING
		if (@pagingType <> 2)
		begin
			set @mwUseSmartSearch = 0
		end
	end

	declare @mwCheckInnerAviaQuotes int
	select @mwCheckInnerAviaQuotes = isnull(SS_ParmValue,0) from dbo.systemsettings 
	where SS_ParmName = 'mwCheckInnerAviaQuotes'

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @tmpHotelQuota varchar(10), @tmpThereAviaQuota varchar(256), @tmpBackAviaQuota varchar(256), @allPlaces int,@places int,@actual smallint,@tmp varchar(256),
			@ptkey bigint,@pttourkey int, @ptpricekey bigint, @hdkey int,@rmkey int,@rckey int,@tourdate datetime,@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,	@chday int,@chpkkey int,@chprkey int,@chbackday int,
		@chbackpkkey int,@chbackprkey int,@days int, @rowNum int, @hdStep smallint, @reviewed int,@selected int, @hdPriceCorrection int, 
		@pt_directFlightAttribute int, @pt_backFlightAttribute int, @pt_mainplaces int, @pt_hrkey int, @sql varchar(max)

	declare @pt_chdirectkeys varchar(256), @pt_chbackkeys varchar(256)
	declare @tmpAllHotelQuota varchar(128),@pt_hddetails varchar(256)

	set @reviewed= @pageNum
	set @selected=0

	declare @sortedAirlineCodes ListSysNameValue
	insert into @sortedAirlineCodes select value from @airlineCodes order by upper([value])
				
	declare @airlineCodesStr varchar(max)
	select @airlineCodesStr = coalesce(@airlineCodesStr + ', ', '') + [value] from @sortedAirlineCodes order by [value]

	declare @now datetime, @percentPlaces float, @pos int
	declare @dateFrom datetime, @dateTo datetime
	set @now = getdate()
	set @pos = 0

	fetch next from quotaCursor into
	@ptkey,	
	@pttourkey,
	@ptpricekey,
	@hdkey,
	@rmkey,
	@rckey,
	@tourdate,
	@hdday,
	@hdnights,
	@hdprkey,
	@chday,
	@chpkkey,
	@chprkey,
	@chbackday,
	@chbackpkkey,
	@chbackprkey,
	@days,
	@chkey,
	@chbackkey,
	@rowNum, 
	@pt_chdirectkeys, 
	@pt_chbackkeys, 
	@pt_hddetails, 
	@pt_directFlightAttribute, 
	@pt_backFlightAttribute,
	@pt_mainplaces,
	@pt_hrkey

	declare @priceKeysPackIndex int; set @priceKeysPackIndex = 0;
	declare @priceKeysPackSize int; set @priceKeysPackSize = 100;
	declare @priceKeysPackString varchar(1800); set @priceKeysPackString = '';
	declare @serviceFlightSelection int; select @serviceFlightSelection = SS_ParmValue from SystemSettings with (nolock) where SS_ParmName = 'ServiceFlightSelection';
	
	while(@@fetch_status=0 and @selected < @pageSize)
	begin 
		if (@serviceFlightSelection = 1)
		begin			
			set @priceKeysPackIndex = @priceKeysPackIndex + 1;
			set @priceKeysPackString = @priceKeysPackString + ',' + @ptpricekey
		
			if (@priceKeysPackIndex = @priceKeysPackSize)
			begin
				insert into #paging (ptKey, pt_hdquota, ptpricekey, pt_chtherequota, pt_chbackquota, chkey, chbackkey, priceCorrection, pt_hdallquota, pt_smartSearch)
				exec WcfCheckQuotaCycle @priceKeysPackString;
				set @priceKeysPackString = '';
				set @priceKeysPackIndex = 0;
			end
			
		end
		else
		begin
			if (@pos >= @pageNum 
			-- для подмешиваемых вариантов - интересует только одно размещение для каждого отеля
			and (@smartSearch = 0 or not exists (select top 1 1 from @smartSearchKeys where hdKey = @hdkey)))
			begin

				set @actual=1
				if(@aviaQuotaMask > 0)
				begin		
					declare @editableCode int
					set @editableCode = 2
					declare @isEditableService bit
					set @tmpThereAviaQuota=null
					if(@chkey > 0)
					begin 
						if @pt_directFlightAttribute is null
						begin
							--kadraliev MEG00025990 03.11.2010 Если в туре запрещено менять рейс, устанавливаем @findFlight = 0
							exec dbo.mwGetServiceIsEditableAttribute @pttourkey, @chkey, @chday, @days, @chprkey, @chpkkey, @isEditableService output
							if (@isEditableService = 0)
								set @pt_directFlightAttribute = 0
							else
								set @pt_directFlightAttribute = 2
							if (@tableName is not null)
							begin
								set @sql = 'update ' + @tableName + ' set pt_directFlightAttribute = ' + ltrim(str(@pt_directFlightAttribute)) + ' where pt_key = ' + ltrim(str(@ptkey))
								exec (@sql)
							end
						end
						set @findFlight = (@pt_directFlightAttribute & 2) / 2
										
						set @places=0
						EXEC [dbo].[mwCacheQuotaSearch] 1, @chkey, 0, 0, @tourdate, @chday, @days, @chprkey, @chpkkey, 
							@tmpThereAviaQuota OUTPUT, @places output, @step_index output, @price_correction output, @additional output, @findFlight, @airlineCodesStr, @pt_mainplaces

						if (@tmpThereAviaQuota is null)
						begin		
							
							set @tmpThereAviaQuota = ''
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, 
								@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey,
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output, @chbackday, @pt_mainplaces, @airlineCodes
							if len(ISNULL(@tmpThereAviaQuota, '')) != 0
							begin
								set @nAviaTariffFirst=0
								set @nAviaTariffSecond=0
								if len(@tmpThereAviaQuota)!=0
								BEGIN
									select 
										@sAviaTariffFirst = LEFT(@tmpThereAviaQuota,PATINDEX('%:%',@tmpThereAviaQuota)-1),
										@sAviaTariffSecond = LEFT(
										SUBSTRING(@tmpThereAviaQuota,PATINDEX('%|%',@tmpThereAviaQuota)+1,LEN(@tmpThereAviaQuota)-PATINDEX('%|%',@tmpThereAviaQuota)),
										PATINDEX('%:%',SUBSTRING(@tmpThereAviaQuota,PATINDEX('%|%',@tmpThereAviaQuota)+1,LEN(@tmpThereAviaQuota)-PATINDEX('%|%',@tmpThereAviaQuota)))-1)
									IF ISNUMERIC(@sAviaTariffFirst)=1
										set @nAviaTariffFirst=CAST(@sAviaTariffFirst as smallint)
									IF ISNUMERIC(@sAviaTariffSecond)=1
										set @nAviaTariffSecond=CAST(@sAviaTariffSecond as smallint)
									SET @places = abs(@nAviaTariffFirst)+abs(@nAviaTariffSecond)
								END

								EXEC [dbo].[mwCacheQuotaInsert] 1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota, @places, 0, 0, @additional, @findFlight, @airlineCodesStr, @pt_mainplaces
							end
						end		
						
						if len(@tmpThereAviaQuota)!=0
						begin
							-- проверка наличия мест на прямом перелете на соответствие маске квот
							-- проверяются все классы перелетов, если хотя бы один подходит - результат принимается
							declare @curIndex as int
							set @curIndex = 1
							
							declare @quota as varchar(260)
							set @quota = @tmpThereAviaQuota + '|'

							set @actual=0

							while @curIndex <= LEN(@quota)
							begin

								declare @freePlaces as int
								declare @freePlacesString as varchar(20)
								
								set @freePlaces = 0
								
								set @freePlacesString = SUBSTRING(@quota, @curIndex, CHARINDEX(':', @quota, @curIndex)-@curIndex)
								if ISNUMERIC(@freePlacesString) = 1
									set @freePlaces = CAST(@freePlacesString as smallint)
								
								set @curIndex = CHARINDEX('|', @quota, @curIndex)+1

								declare @freePlacesMask as int

								if @freePlaces = 0
									set @freePlacesMask = 2	-- no places
								else if @freePlaces < 0
									set @freePlacesMask = 4	-- request
								else
									set @freePlacesMask = 1	-- yes
									
								if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
								begin
									-- прямой перелет удовлетворяет маске квот, прекращаем проверку
									set @actual=1
									break
								end
							end
						end
						else
							set @actual=0
					end
					if(@actual > 0)
					begin
						set @tmpBackAviaQuota=null
						if(@chbackkey > 0)
						begin
							if @pt_backFlightAttribute is null
							begin

								--karimbaeva MEG00038768 17.11.2011 получаем редактируемый атрибут услуги
								exec dbo.mwGetServiceIsEditableAttribute @pttourkey, @chbackkey, @chbackday, @days, @chbackprkey, @chbackpkkey, @isEditableService output
								if (@isEditableService = 0)
									set @pt_backFlightAttribute = 0
								else
									set @pt_backFlightAttribute = 2
								if (@tableName is not null)
								begin
									set @sql = 'update ' + @tableName + ' set pt_backFlightAttribute = ' + ltrim(str(@pt_backFlightAttribute)) + ' where pt_key = ' + ltrim(str(@ptkey))
									exec (@sql)
								end
			
							end

							set @findFlight = (@pt_backFlightAttribute & 2) / 2

							EXEC [dbo].[mwCacheQuotaSearch] 1, @chbackkey, 0, 0, @tourdate, @chbackday, @days, @chbackprkey, @chbackpkkey, 
								@tmpBackAviaQuota OUTPUT, @places output, @step_index output, @price_correction output, @additional output, @findFlight, @airlineCodesStr, @pt_mainplaces

							if (@tmpBackAviaQuota is null)
							begin
								
								set @tmpBackAviaQuota = ''												
								
								exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups, @agentKey, @chbackprkey, @tourdate,
									@chbackday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 
									@findFlight, @chbackpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output, @chday, @pt_mainplaces, @airlineCodes

								if len(ISNULL(@tmpBackAviaQuota, '')) != 0
								begin
									set @nAviaTariffFirst=0
									set @nAviaTariffSecond=0
									if len(@tmpBackAviaQuota)!=0
									BEGIN
										select 
										@sAviaTariffFirst = LEFT(@tmpBackAviaQuota,PATINDEX('%:%',@tmpBackAviaQuota)-1),
										@sAviaTariffSecond = LEFT(
										SUBSTRING(@tmpBackAviaQuota,PATINDEX('%|%',@tmpBackAviaQuota)+1,LEN(@tmpBackAviaQuota)-PATINDEX('%|%',@tmpBackAviaQuota)),
										PATINDEX('%:%',SUBSTRING(@tmpBackAviaQuota,PATINDEX('%|%',@tmpBackAviaQuota)+1,LEN(@tmpBackAviaQuota)-PATINDEX('%|%',@tmpBackAviaQuota)))-1)
										IF ISNUMERIC(@sAviaTariffFirst)=1
											set @nAviaTariffFirst=CAST(@sAviaTariffFirst as smallint)
										IF ISNUMERIC(@sAviaTariffSecond)=1
											set @nAviaTariffSecond=CAST(@sAviaTariffSecond as smallint)
										SET @places = abs(@nAviaTariffFirst)+abs(@nAviaTariffSecond)
									END
															
									EXEC [dbo].[mwCacheQuotaInsert] 1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota, @places, 0, 0, @additional, @findFlight, @airlineCodesStr, @pt_mainplaces
								end
							end

							if len(@tmpBackAviaQuota)!=0
							begin
								-- проверка наличия мест на обратном перелете на соответствие маске квот
								-- проверяются все классы перелетов, если хотя бы один подходит - результат принимается
								set @curIndex = 1						
								set @quota = @tmpBackAviaQuota + '|'
								set @actual=0

								while @curIndex <= LEN(@quota)
								begin
									
									set @freePlaces = 0
									
									set @freePlacesString = SUBSTRING(@quota, @curIndex, CHARINDEX(':', @quota, @curIndex)-@curIndex)
									if ISNUMERIC(@freePlacesString) = 1
										set @freePlaces = CAST(@freePlacesString as smallint)
									
									set @curIndex = CHARINDEX('|', @quota, @curIndex)+1
									if @freePlaces = 0
										set @freePlacesMask = 2	-- no places
									else if @freePlaces < 0
										set @freePlacesMask = 4	-- request
									else
										set @freePlacesMask = 1	-- yes
									
								if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
									begin
										-- обратный перелет удовлетворяет маске квот, прекращаем проверку
										set @actual=1
										break
									end

								end
							
							end
							else
								set @actual=0				
								
						end
					end
				end			
				if(@hotelQuotaMask > 0)
				begin
					set @tmpAllHotelQuota = ''
					if(@actual > 0)
					begin
						if not (@pt_hddetails is not null and charindex(',', @pt_hddetails, 0) > 0)
						begin
							-- один отель
							set @tmpHotelQuota=null
							set @hdStep = 0
							set @hdPriceCorrection = 0
							set @places = 0
							
							EXEC [dbo].[mwCacheQuotaSearch] 3, @hdkey, @rmkey, @rckey, @tourdate, @hdday, @hdnights, @hdprkey, 0, 
								@tmpHotelQuota OUTPUT, @places output, @hdStep output, @hdPriceCorrection output, @additional output, 0, ''

							if (@tmpHotelQuota is null)
							begin
								if @checkQuotesOnWebService = 1
								begin
									declare @checkQuotesResult as nvarchar(max)
									set @dateFrom = dateadd(day, @hdday - 1, @tourdate)
									set @dateTo = dateadd(day, @hdnights - 1, @dateFrom)
									
									-- включена проверка квот через веб-сервис								
									begin try
										exec mwCheckQuotaOneResult  1, 3, @hdkey, @pt_hrkey, @dateFrom, @dateTo, @hdprkey, 
												@agentKey, @hdnights, 1, null, @checkQuotesResult output, @places output, @allPlaces output
									end try
									begin catch
										-- Ошибка при вызове веб-сервиса. Логируем, отправляем письмо и отключаем проверку через сервис
										set @wasErrorCallingService = 1
									end catch
											
									if @checkQuotesResult in ('StopSale', 'NoPlaces')
										set @freePlacesMask = 2	-- no places
									else if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
									begin
										set @freePlacesMask = 4	-- request
										set @places = -1
									end
									else if @checkQuotesResult = 'QuotaExist'
										set @freePlacesMask = 1	-- yes
									
								end
								
								-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
								-- ошибки работы с веб-сервисом проверки квот
								if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
								begin
									select @places=qt_places,@allPlaces=qt_allPlaces,@additional=qt_additional 
									from dbo.mwCheckQuotesEx2(3,@hdkey,@rmkey,@rckey, @agentKey, @hdprkey,@tourdate,@hdday,@hdnights, 
										@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0,
										@expiredReleaseResult, DEFAULT, @airlineCodes)
										
									if @places = 0
										set @freePlacesMask = 2	-- no places
									else if @places < 0
									begin
										set @freePlacesMask = 4	-- request
									end
									else
										set @freePlacesMask = 1	-- yes
								end
								
								set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
								if(@pagingType = @DYNAMIC_SPO_PAGING and @places > 0)
								begin
									exec dbo.GetDynamicCorrections @now,@tourdate,3,@hdkey,@rmkey,@rckey,@places, @hdStep output, @hdPriceCorrection output
								end

								EXEC [dbo].[mwCacheQuotaInsert] 3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places,@hdStep,@hdPriceCorrection, @additional, 0, ''
							end
						end 
						else
						-----------------------------------------------
						--=== Check quotes for all hotels in tour ===--
						--===              [BEGIN]                -----
						begin
							set @places = 10000			-- первоначальное значение для дальнейшего сравнения и выбора наименьшего количества мест
														-- в многоотельном туре
						
							set @tmpAllHotelQuota = ''
							-- Mask for hotel details column :
							-- [HotelKey]:[RoomKey]:[RoomCategoryKey]:[HotelDay]:[HotelDays]:[HotelPartnerKey],...
							declare @curHotelKey int, @curRoomKey int , @curRoomCategoryKey int , @curHotelDay int , @curHotelDays int , @curHotelPartnerKey int
							declare @curHotelRoomKey as int

							declare @curHotelDetails varchar(256)
							declare @tempPlaces int
							declare @tempAllPlaces int
							declare @curPosition int
								set @curPosition = 0
							declare @prevPosition int
								set @prevPosition = 0
							declare @curHotelQuota  varchar(256)
							while (1 = 1)
							begin
								set @curPosition = charindex(',', @pt_hddetails, @curPosition + 1)
								if (@curPosition = 0)
									set @curHotelDetails  = substring(@pt_hddetails, @prevPosition, 256)
								else
									set @curHotelDetails  = substring(@pt_hddetails, @prevPosition, @curPosition - @prevPosition)
								
								-- Get details by current hotel
								begin try
									exec mwParseHotelDetails @curHotelDetails, @curHotelKey output, @curRoomKey output, @curRoomCategoryKey output, 
										@curHotelDay output, @curHotelDays output, @curHotelPartnerKey output, @curHotelRoomKey output
								end try
								begin catch
									--произошла ошибка, последующие отели просто не будут проверяться на наличие мест
									break
								end catch
								-----
								set @curHotelQuota = null
								EXEC [dbo].[mwCacheQuotaSearch] 3, @curHotelKey, @curRoomKey, @curRoomCategoryKey, @tourdate, @curHotelDay, @curHotelDays, @curHotelPartnerKey, 0, 
									@curHotelQuota OUTPUT, @tempPlaces output, @hdStep output, @hdPriceCorrection output, @additional output, 0, ''

								if (@curHotelQuota is null)
								begin
									if @checkQuotesOnWebService = 1
									begin
										begin try
											set @dateFrom = dateadd(day, @curHotelDay - 1, @tourdate)
											set @dateTo = dateadd(day, @curHotelDays - 1, @dateFrom)
											
											-- включена проверка квот через веб-сервис
											exec mwCheckQuotaOneResult 1, 3, @curHotelKey, @curHotelRoomKey, @dateFrom, @dateTo, @curHotelPartnerKey, 
													@agentKey, @curHotelDays, 1, null, @checkQuotesResult output, @tempPlaces output, @tempAllPlaces output
													
											-- отдельный случай для статуса "Запрос": сервис возвращает количество мест 0, а ожидается -1
											if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
												set @tempPlaces = -1
													
										end try
										begin catch
											set @wasErrorCallingService = 1
										end catch									
									end
									
									-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
									-- ошибки работы с веб-сервисом проверки квот
									if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
									begin
										select @tempPlaces=qt_places,@tempAllPlaces=qt_allPlaces,@additional=qt_additional 
										from dbo.mwCheckQuotesEx2(3,@curHotelKey,@curRoomKey,@curRoomCategoryKey, @agentKey, @curHotelPartnerKey,@tourdate,@curHotelDay,@curHotelDays, 
												@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0, @expiredReleaseResult, DEFAULT, @airlineCodes)
									end
									
									set @curHotelQuota=ltrim(str(@tempPlaces)) + ':' + ltrim(str(@tempAllPlaces))

									EXEC [dbo].[mwCacheQuotaInsert] 3,@curHotelKey,@curRoomKey,@curRoomCategoryKey,@tourdate,@curHotelDay,@curHotelDays,@curHotelPartnerKey,0,@curHotelQuota,@tempPlaces,0,0, @additional, 0, ''
								end
								-----
								set @tmpAllHotelQuota = @tmpAllHotelQuota + @curHotelQuota + '|'
								
								if (@tempPlaces < @places or (@places < 0 and @tempPlaces = 0)) and not (@places = 0 and @tempPlaces < 0)
								begin
									
									-- @places - результирующее значение количества мест в текущей строке. Оно принимается как
									-- минимальное из всех отелей в случае многоотельного тура
									-- Условие написано с учетом того, что в данном случае -1 > 0 (нет мест - более сильный статус, чем запрос)
									set @places = @tempPlaces
									set @tmpHotelQuota = @curHotelQuota

								end

								if (@curPosition = 0)
									break
								set @prevPosition = @curPosition + 1
							end
							
							-- Remove comma at the end of string
							if(len(@tmpAllHotelQuota) > 0)
								set @tmpAllHotelQuota = substring(@tmpAllHotelQuota, 1, len(@tmpAllHotelQuota) - 1)
						end
						--===                [END]                -----
						--=== Check quotes for all hotels in tour ===--
						-----------------------------------------------
						
						if @places = 0
							set @freePlacesMask = 2	-- no places
						else if @places < 0
						begin
							set @freePlacesMask = 4	-- request
						end
						else
							set @freePlacesMask = 1	-- yes
								
						if (@hotelQuotaMask & @freePlacesMask) = @freePlacesMask
							set @actual = 1
						else
							set @actual = 0
						
						--if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
						--	set @actual=0
					end
				end



		------==============================================================================================------
		--============================ Check inner avia quotes if needed by settings ===========================--
		--========																						========--
				if(@actual > 0 and @mwCheckInnerAviaQuotes > 0)
				begin
					-- Direct flights
					if (@pt_chdirectkeys is not null and charindex(',', @pt_chdirectkeys, 0) > 0)
					begin
						set @findFlight = @initialFindflight
						exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chdirectkeys, 
								@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
								@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output, @pt_chbackkeys, @airlineCodes
						if (len(@tmpThereAviaQuota) = 0)
							set @actual = 0
					end 

					-- Back flights
					if(@actual > 0)
					begin
						if (@pt_chbackkeys is not null and charindex(',', @pt_chbackkeys, 0) > 0)
						begin
							set @findFlight = @initialFindflight
							exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chbackkeys,   
								@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
								@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output, @pt_chdirectkeys, @airlineCodes
							if (len(@tmpBackAviaQuota) = 0)
								set @actual = 0
						end 
					end
				end
		--========																						========--
		--============================                                               ===========================--
		------==============================================================================================------
				
				if(@actual > 0)
				begin
					if (@smartSearch = 1)
					begin
						-- сохраним ключ отеля для которого уже было добавлено размещение
						insert into @smartSearchKeys(hdKey) values (@hdkey)
						set @selected=@selected + 1
						-- pt_smartSearch = 1 (для выделения подмешанных вариантов)
						insert into #Paging(ptKey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection, pt_hdallquota, pt_smartSearch)
						values(@ptkey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection, @tmpAllHotelQuota, 1)
					end
					-- если используется SmartSearch (глобально - включена настройка, но mwCheckQuotesCycle вызвана НЕ для подмешанных вариантов) 
					-- то возможна ситуация когда данный ptKey уже был добавлен в #Paging как подмешанный
					else if (@mwUseSmartSearch = 0 or not exists (select top 1 1 from #Paging where ptKey = @ptkey))
					begin
						set @selected=@selected + 1
						insert into #Paging(ptKey,ptpricekey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection, pt_hdallquota)
						values(@ptkey,@ptpricekey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection, @tmpAllHotelQuota)
					end
				end

				set @reviewed=@reviewed + 1
			end
			fetch next from quotaCursor into @ptkey,@pttourkey,@ptpricekey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,
				@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys, 
				@pt_hddetails, @pt_directFlightAttribute, @pt_backFlightAttribute, @pt_mainplaces, @pt_hrkey
			set @pos = @pos + 1
			if (@serviceFlightSelection = 1 and @priceKeysPackIndex > 0 and @@fetch_status <> 0)
			begin
				insert into #paging (ptKey, pt_hdquota, ptpricekey, pt_chtherequota, pt_chbackquota, chkey, chbackkey, priceCorrection, pt_hdallquota, pt_smartSearch)
				exec WcfCheckQuotaCycle @priceKeysPackString;
			end
		end
	end

	if (@smartSearch=0)
	begin
		select @reviewed
	end
end
GO

grant exec on dbo.mwCheckQuotesCycle to public
go

/*********************************************************************/
/* end sp_mwCheckQuotesCycle.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCheckQuotesCycle.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_Paging.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_Paging.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Paging]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[Paging]
GO

	--<VERSION>9.2.21</VERSION>
	--<DATE>2014-12-25</DATE>
CREATE PROCEDURE [dbo].[Paging]
	@pagingType	smallint=2,
	@countryKey	int,
	@departFromKey	int,
	@filter		varchar(MAX),
	@sortExpr	varchar(1024),
	@pageNum	int=0,						-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
	@pageSize	int=9999,
	@agentKey	int=0,
	@hotelQuotaMask smallint=0,
	@aviaQuotaMask smallint=0,
	@getServices	smallint=0,
	@flightGroups	varchar(256),
	@checkAgentQuota smallint,
	@checkCommonQuota smallint,
	@checkNoLongQuota smallint,
	@requestOnRelease smallint,
	@expiredReleaseResult int,
	@noPlacesResult int,
	@findFlight smallint,
	@checkFlightPacket smallint,
	@checkAllPartnersQuota smallint = null,
	@calculateVisaDeadLine smallint = 0,
	@noSmartSearch bit = 0,
	@HideWithNotStartedSaleDate bit = 0,	-- не показывать цены по турам, дата продажи которых еще не наступила.
	@airlineCodes ListSysNameValue readonly,
	@showCOName bit = 0						-- отображать ли в QD название ценового блока, из которого берется цена проживания
AS
set nocount on


--koshelev
--@noPlacesResult должен быть больше 0
--2012-08-17
if (@noPlacesResult > 0 or @filter like '%in ()%')
	return

declare @beginTime datetime
set @beginTime = getDate()

/******************************************************************************
**		Parameters:

		@filter		varchar(1024),	 - поисковый фильтр (where-фраза)
		@sortExpr	varchar(1024),	 - выражение сортировки
		@pageNum	int=1,	 - № страницы
		@pageSize	int=9999	 - размер страницы
		@transform	smallint=0	 - преобразовывать ли полученные данные для расположения продолжительностей по горизонтали
		@noSmartSearch bit = 0	- запрещает подмешивать варианты в поиск (приоритетней чем настройка в SystemSettings) - используется при недефолтной сортировке
*******************************************************************************/

-- vinge 9.08.2012 перенес в начало файла объявление таблицы с результатами
create table #resultsTable(
	paging_id int,
	pt_key bigint,			-- MEG00038762. Golubinsky. 20.12.2011. Увеличил тип до bigint
	pt_ctkeyfrom int,
	pt_cnkey int,
	pt_tourdate datetime,
	pt_pnkey int,
	pt_hdkey int,
	pt_hrkey int,
	pt_tourkey int,
	pt_tlkey int,
	pt_tourtype int,
	pt_tourname varchar(256),
	pt_toururl varchar(256),
	pt_hdname varchar(60),
	pt_hdstars varchar(12),
	pt_ctkey int,
	pt_rskey int,
	pt_hotelurl varchar(256),
	pt_pncode varchar(30),
	pt_rate varchar(3),
	pt_rmkey int,
	pt_rckey int,
	pt_ackey int,
	-- MEG00025561 Paul G 08.02.2010
	-- чтоб возраст ребёнка можно было отображать в прайсе
	pt_childagefrom int,
	pt_childageto int,
	pt_childagefrom2 int,
	pt_childageto2 int,
	-- End MEG00025561
	pt_cnname varchar(50),
	pt_ctname varchar(50),
	pt_rsname varchar(50),		
	pt_rmname varchar(60),
	pt_rcname varchar(60),
	pt_acname varchar(30),
	pt_chkey int,
	pt_chbackkey int,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelnights varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_actual smallint,
	pt_visadeadline datetime
)


-- vinge 9.08.2012 без этой проверки хранимка вылетает с ошибкой
if (@hotelQuotaMask = 0) and (@aviaQuotaMask = 0)
begin
	select 0
	select 0
	select * from #resultsTable

	return
end

---=== Если это пейджинг для пакса, то перенаправляемся в его хранимку ===---
if (@pagingType = 4)
begin
	exec PagingPax @countryKey, @departFromKey, @filter, @sortExpr, @pageNum, @pageSize
			, @agentKey, @hotelQuotaMask,  @aviaQuotaMask, @flightGroups, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota
			, @requestOnRelease, @expiredReleaseResult, @noPlacesResult, @findFlight, @checkFlightPacket
	return
end

declare @mwSearchType int
select @mwSearchType=isnull(SS_ParmValue,1) from dbo.systemsettings 
where SS_ParmName='MWDivideByCountry'

-- BEGIN Added by Allen to prevent latest price selection
declare @mwLatestPrices int
select @mwLatestPrices = isnull(SS_ParmValue,1) from dbo.systemsettings 
where SS_ParmName='MW_PACLatestPrices'

-- BEGIN Added by Allen to prevent latest price selection
declare @tableName varchar(256)
declare @viewName varchar(256)
if(@mwSearchType=0)
begin
	set @tableName='mwPriceTable'
	set @viewName='dbo.mwPriceTableView'
	set @filter=' pt_cnkey= ' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom= ' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
end
else 
begin
	set @tableName=dbo.mwGetPriceViewName(@countryKey,@departFromKey)
	set @viewName=REPLACE(@tableName,'PriceTable','PriceTableView')
end

declare @MAX_ROWCOUNT int
set @MAX_ROWCOUNT=1000 -- если @pageSize больше этого числа,что пейджинг производиться не будет
declare @SIMPLE_PAGING smallint
set @SIMPLE_PAGING=1
declare @ACTUALPLACES_PAGING smallint
set @ACTUALPLACES_PAGING=2
declare @DYNAMIC_SPO_PAGING smallint
set @DYNAMIC_SPO_PAGING=3
declare @QUOTAMASK_NO smallint
set @QUOTAMASK_NO=0
declare @QUOTAMASK_ALL smallint
set @QUOTAMASK_ALL=7

-- настройка включающая SmartSearch
declare @mwUseSmartSearch int
select @mwUseSmartSearch=isnull(SS_ParmValue,0) from dbo.systemsettings 
where SS_ParmName='mwUseSmartSearch'
-- пока SmartSearch работает с только с ACTUALPLACES_PAGING
-- параметр @noSmartSearch - блокирует подмешивание
if (@pagingType <> @ACTUALPLACES_PAGING or @noSmartSearch = 1)
begin
	set @mwUseSmartSearch = 0
end

-- направление сортировки
declare @sortType smallint
set @sortType=1 -- по возр
declare @spageNum varchar(30)
declare @spageSize varchar(30)
set @spageNum=LTRIM(STR(@pageNum))
set @spageSize=LTRIM(STR(@pageSize))


if(@pagingType = @DYNAMIC_SPO_PAGING)
	set @findFlight = 0

if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
begin
		create table #checked(
			svkey int,
			code int,
			rmkey int,
			rckey int,
			date datetime,
			day int,
			days int,
			prkey int,
			pkkey int,
			res varchar(256),
			places int,
			step_index smallint,
			price_correction int,
			find_flight bit default(0)	-- 07.02.2012. Golubinsky. Для правильного кеширования результатов при подборе перелета
		)
end

declare @sql nvarchar(MAX)
set @sql=''
if (@pagingType = 0 or @pagingType = 5)
begin
	declare @zptPos int
	declare @prefix varchar(1024)
	set @zptPos = charindex(',',@sortExpr)
	if(@zptPos > 0)
		set @prefix = substring(@sortExpr, 1, @zptPos)
	else
	set @prefix = @sortExpr

	if(charindex('desc', @prefix) > 0)
		set @sortType=-1

	if(@sortType <= 0)
	begin
		set @viewName=replace(@viewName,'mwPriceTableView','mwPriceTableViewDesc')
	end
	else
	begin
		set @viewName=replace(@viewName,'mwPriceTableView','mwPriceTableViewAsc')
	end

	create table #days(
		days int,
		nights int
	)

	if (@pagingType = 5)
		set @sql='select distinct top 5 pt_days,pt_nights from '
	else if (@pagingType = 0)
		set @sql='select distinct top 5 pt_days,pt_nights from '


	if(@mwSearchType=0)
-- BEGIN Removed by Allen
--			set @sql=@sql + @tableName +  ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
--		on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
--			and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
--				t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
-- END Removed by Allen


-- BEGIN Added by Allen
	 begin
		if (@mwLatestPrices=0 and charindex('pt_tourkey', @filter) > 0)	
			set @sql=@sql + @tableName +  ' t1 with(nolock) where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
		else
			set @sql=@sql + @tableName +  ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
		on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
			and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
				t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
	end	
-- END Added by Allen
	else
		set @sql=@sql + @tableName + ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
	on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
		and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
			t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where ' + @filter

	set @sql=@sql + ' order by pt_days,pt_nights'
	insert into #days exec(@sql)

	declare @sKeysSelect varchar(2024)
	set @sKeysSelect=''
	declare @sAlter varchar(2024)
	set @sAlter=''

	if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
	begin
		create table #quotaCheckTable(
			pt_key bigint,			-- MEG00038762. Golubinsky. 20.12.2011. Увеличил тип до bigint
			pt_pricekey bigint,
			pt_tourdate datetime,			
			pt_days int,
			pt_nights int,
			pt_hdkey int,		
			pt_hdday int,
			pt_hdnights int,			
			pt_hdpartnerkey int,
			pt_rmkey int,
			pt_rckey int,
			pt_chkey int,
			pt_chday int,
			pt_chpkkey int,
			pt_chprkey int,
			pt_chbackkey int,
			pt_chbackday int,
			pt_chbackpkkey int,
			pt_chbackprkey int,
			pt_hdquota varchar(10),
			pt_chtherequota varchar(256),
			pt_chbackquota varchar(256),	
			pt_hdallquota varchar(128)
		)
	end

	declare @d int
	declare @n int
	declare @sdays varchar(10)
	declare @sWhere varchar(2024)
	set @sWhere=''
	declare @sAddSelect varchar(2024)
	set @sAddSelect=''
	declare @sAddIN varchar(2024)
	set @sAddIN=''
	declare @sAddDeclare varchar(2024)
	set @sAddDeclare=''
	declare @sJoin varchar(2024)
	set @sJoin=''
	declare @sUpdateList varchar(8000)
	set @sUpdateList=''
	declare @sTmp varchar(8000)
	set @sTmp=''
	declare @rowCount int
	declare @priceFilter nvarchar(512)
	set @priceFilter = N''
	declare @priceKeyFilter nvarchar(512)
	set @priceKeyFilter = N''

	declare @pricePart nvarchar(100)
	declare @nightsPart nvarchar(256)
	declare @hotelNightsPart nvarchar(256)

	set @pricePart = dbo.mwGetFilterPart(@filter, 'pt_price')

	declare dCur cursor for select days,nights from #days
	open dCur
	fetch next from dCur into @d,@n
	while (@@fetch_status=0)
	begin
		set @sdays=LTRIM(STR(@d)) + '_' + LTRIM(STR(@n))
		if(substring(@sortExpr, 1, 1) = '*')
		begin
			set @sortExpr = 'p_' + @sdays + substring(@sortExpr, 2, len(@sortExpr) - 1)
		end

		if(len(@sKeysSelect) > 0)
			set @sKeysSelect=@sKeysSelect + ','

		if (@pagingType = 5)
			set @sKeysSelect=@sKeysSelect + 'p_' + @sdays + ',pk_' + @sdays + ',null prk_' + @sdays + ',null hq_' + @sdays +',null cq_' + @sdays + ',null cbq_' + @sdays
		else if (@pagingType = 0)
			set @sKeysSelect=@sKeysSelect + 'p_' + @sdays + ',pk_' + @sdays 

		if(@pricePart is not null)
		begin
			if(len(@priceFilter) > 0)
				set @priceFilter = @priceFilter  + ' or '

			set @priceFilter = @priceFilter + replace(@pricePart, 'pt_price', 'p_' + @sdays)
		end

		if(len(@priceKeyFilter) > 0)
			set @priceKeyFilter = @priceKeyFilter  + ' or '

		set @priceKeyFilter = @priceKeyFilter + 'pk_' + @sdays + ' > 0'

		if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
		begin

			if(len(@sAlter) > 0)
				set @sAlter=@sAlter + ','

			if(len(@sAddSelect) > 0)
				set @sAddSelect=@sAddSelect + ','

			if (@pagingType = 5)
			begin
				set @sAlter=@sAlter + 'p_' + @sdays + ' float,pk_' + @sdays + ' int,prk_' + @sdays + ' int,hq_' + @sdays + ' varchar(10),cq_' + @sdays + ' varchar(256),cbq_' + @sdays + ' varchar(256)'

--				if(len(@sUpdateList) > 0)
--					set @sUpdateList=@sUpdateList + ','
				set @sUpdateList=@sUpdateList + '
				if exists(select pt_key from #quotaCheckTable where pt_days = ' + LTRIM(STR(@d)) + ' and pt_nights = ' + LTRIM(STR(@n)) + ')
				update #resultsTable set'

				set @sUpdateList = @sUpdateList + '
					prk_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_pricekey end),
					hq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_hdquota end),
					cq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_chtherequota end),
					cbq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_chbackquota end)' 

				set @sUpdateList=@sUpdateList + '
				from (select * from #quotaCheckTable where pt_days = ' + LTRIM(STR(@d)) + ' and pt_nights = ' + LTRIM(STR(@n)) + ') tbl
				where CURRENT OF dataCursor'

				if(len(@sAddDeclare) > 0)
					set @sAddDeclare=@sAddDeclare + ','

				set @sAddDeclare=@sAddDeclare + '@pk_' + @sdays + ' int'

				set @sAddSelect=@sAddSelect + '@pk_' + @sdays + ' = pk_' + @sdays

				if(len(@sAddIN) > 0)
					set @sAddIN=@sAddIN + ','

				set @sAddIN=@sAddIN + '@pk_' + @sdays
			end
			else if (@pagingType = 0)
			begin
				set @sAlter=@sAlter + 'p_' + @sdays + ' float,pk_' + @sdays + ' int'

				if(len(@sWhere) > 0)
					set @sWhere=@sWhere + ' or '

				set @sWhere=@sWhere + 'pt_key in (select pk_' + @sdays + ' from #resultsTable)'

				set @sAddSelect=@sAddSelect + ' t_' + @sdays + '.pt_pricekey prk_' + @sdays + ', t_' + @sdays + '.pt_hdquota hq_' + @sdays + ', t_' + @sdays + '.pt_chtherequota cq_' + @sdays + ', t_' + @sdays + '.pt_chbackquota cbq_' + @sdays

				set @sJoin=@sJoin + ' left outer join #quotaCheckTable t_' + @sdays + ' on t.pk_' + @sdays + ' = t_' + @sdays + '.pt_key'

			end
		end

		fetch next from dCur into @d,@n
	end
	close dCur
	deallocate dCur

	if(len(@sKeysSelect) > 0 and(@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
	begin
		set @sTmp = 'alter table #resultsTable add ' + @sAlter
		exec(@sTmp)

		if(@pricePart is not null)
		begin
			set @filter = REPLACE(@filter, @pricePart, '1 = 1')
			set @filter = @filter + ' and (' + @priceFilter + ')'
			set @sWhere = @sWhere + ' and ' + @pricePart
		end

		set @nightsPart = dbo.mwGetFilterPart(@filter, 'pt_nights')
		if(@nightsPart is not null)
			set @filter = REPLACE(@filter, @nightsPart, '1 = 1')

		set @hotelNightsPart = dbo.mwGetFilterPart(@filter, 'pt_hotelnights')
		while(@hotelNightsPart is not null)
		begin
			set @filter = REPLACE(@filter, @hotelNightsPart, '1 = 1')
			set @hotelNightsPart = dbo.mwGetFilterPart(@filter, 'pt_hotelnights')
		end

		set @filter = @filter + ' and (' + @priceKeyFilter + ')'
		
		--MEG00038933 Tkachuk 16-02-2012
		--вызываем с последним параметром=null, иначе пытается записать в #resultsTable доп.столбец, и падает с ошибкой
		insert into #resultsTable exec PagingSelect @pagingType,@sKeysSelect,@spageNum,@spageSize,@filter,@sortExpr,@tableName,@viewName, null
		
		--MEG00038933 Tkachuk 16-02-2012
		--получаем количество строк не через output-переменную в предыдущей строке, а через select в результирующей таблице
		Set @rowCount = (select COUNT(*) from #resultsTable)
		Select @rowCount

		declare @aviaMask smallint

		if (@pagingType = 5)
		begin
			declare dataCursor cursor for
				select paging_id from #resultsTable
			for update

			open dataCursor

			declare @paging_id int, @reviewed int, @selected int, @actual smallint, @actualRow smallint

			set @aviaMask = @aviaQuotaMask
			set @reviewed = @pageNum
			set @selected = 0

			fetch next from dataCursor into @paging_id
		end
		else if (@pagingType = 0)
		begin
			set @aviaMask = null
		end
		while (@pagingType = 0 or (@@fetch_status = 0 and @selected < @pageSize))
		begin
			if (@pagingType = 5)
			begin
				set @actualRow = 0

				set @sTmp = 'declare ' + @sAddDeclare + '
							select ' + @sAddSelect + ' from #resultsTable where paging_id = ' + ltrim(str(@paging_id)) + '
							select pt_key, pt_pricekey, pt_tourdate, pt_days,	pt_nights, pt_hdkey, pt_hdday,
									pt_hdnights, pt_hdpartnerkey, pt_rmkey,	pt_rckey, pt_chkey,	pt_chday, pt_chpkkey,
									pt_chprkey, pt_chbackkey, pt_chbackday, pt_chbackpkkey, pt_chbackprkey, null, null, null, null
							from ' + @tableName + ' with(nolock)
							where pt_key in (' + @sAddIN + ')'
			end
			else if (@pagingType = 0)
			begin
				set @sTmp = 'select pt_key, pt_pricekey, pt_tourdate, pt_days,	pt_nights, pt_hdkey, pt_hdday,
									pt_hdnights, pt_hdpartnerkey, pt_rmkey,	pt_rckey, pt_chkey,	pt_chday, pt_chpkkey,
									pt_chprkey, pt_chbackkey, pt_chbackday, pt_chbackpkkey, pt_chbackprkey, null, null, null, null
							from ' + @tableName + ' with(nolock)
							where ' + @sWhere
			end

			insert into #quotaCheckTable exec(@sTmp)

			declare quotaCursor cursor for
			select pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,
				pt_chkey,pt_chbackkey,
				pt_hdday,pt_hdnights,(case when isnull(@checkAllPartnersQuota, 0) > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when @checkFlightPacket > 0 then pt_chpkkey else -1 end) as pt_chpkkey,
				(case when isnull(@checkAllPartnersQuota, 0) > 0 then -1 else pt_chprkey end),pt_chbackday,(case when @checkFlightPacket > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey, 
				(case when isnull(@checkAllPartnersQuota, 0) > 0 then -1 else pt_chbackprkey end),pt_days
			from #quotaCheckTable
			for update of pt_hdquota,pt_chtherequota,pt_chbackquota

			declare @hdkey int,@rmkey int,@rckey int,@tourdate datetime,
				@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,
				@chday int,@chpkkey int,@chprkey int,@chbackday int,
				@chbackpkkey int,@chbackprkey int,@days int

			open quotaCursor

			fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
				@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
				@chday,@chpkkey,@chprkey,@chbackday,
				@chbackpkkey,@chbackprkey,@days

			declare @tmpHotelQuota varchar(10)
			declare @tmpThereAviaQuota varchar(256)		
			declare @tmpBackAviaQuota varchar(256)		
			declare @allPlaces int,@places int

			while(@@fetch_status=0)
			begin
				set @actual=1		
	
				if(@aviaQuotaMask > 0)
				begin
					set @tmpThereAviaQuota=null
					if(@chkey > 0)
					begin 
						select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
						if (@tmpThereAviaQuota is null)
						begin
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @days, @expiredReleaseResult, @aviaMask, @tmpThereAviaQuota output
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota)
						end
						if(len(@tmpThereAviaQuota)=0)
							set @actual=0						
					end
					set @tmpBackAviaQuota=null
					if(@chbackkey > 0)
					begin
						select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
						if (@tmpBackAviaQuota is null)
						begin
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups,@agentKey,@chbackprkey, @tourdate,@chbackday,@requestOnRelease,@noPlacesResult,@checkAgentQuota,@checkCommonQuota,@checkNoLongQuota,@findFlight,@chbackpkkey,@days,@expiredReleaseResult,@aviaMask, @tmpBackAviaQuota output
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota)
						end
						if(len(@tmpBackAviaQuota)=0)
							set @actual=0
					end
				end
				if(@hotelQuotaMask > 0)
				begin
					set @tmpHotelQuota=null
					select @tmpHotelQuota=res,@places=places from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
					if (@tmpHotelQuota is null)
					begin
						select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey,@hdprkey,@tourdate,@hdday,@hdnights,@requestOnRelease,@noPlacesResult,@checkAgentQuota,@checkCommonQuota,@checkNoLongQuota,0,0,0,0,0,@expiredReleaseResult)
						set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
						insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res,places) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places)
					end
			
					if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
						set @actual=0
				end
				update #quotaCheckTable set pt_hdquota=@tmpHotelQuota,
					pt_chtherequota=@tmpThereAviaQuota,
					pt_chbackquota=@tmpBackAviaQuota
				where CURRENT OF quotaCursor
				
				if (@pagingType = 5)
				begin
					if (@actual > 0)
						set @actualRow = 1
				end

				fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
					@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
					@chday,@chpkkey,@chprkey,@chbackday,
					@chbackpkkey,@chbackprkey,@days
			end

			close quotaCursor
			deallocate quotaCursor

			if (@pagingType = 5)
			begin
				if(@actualRow > 0)
				begin
					set @sTmp = @sUpdateList--'update #resultsTable set ' + @sUpdateList + ', pt_actual = 1 from #quotaCheckTable where CURRENT OF dataCursor'
					set @sTmp = @sTmp + '
					update #resultsTable set pt_actual = 1 where CURRENT OF dataCursor
					'
					
					exec (@sTmp)
					
					set @selected = @selected + 1
				end

				truncate table #quotaCheckTable
				
				set @reviewed=@reviewed + 1

				fetch next from dataCursor into @paging_id
			end
			else if (@pagingType = 0)
			begin
				set @sTmp = 'select t.*, ' + @sAddSelect + ' from #resultsTable t ' + @sJoin + ' order by t.paging_id'
				exec(@sTmp)
				break
			end
		end

		if (@pagingType = 5)
		begin
			close dataCursor
			deallocate dataCursor
			
			select @reviewed
			select * from #resultsTable where pt_actual = 1 order by paging_id
		end
	end
	else if(len(@sKeysSelect) > 0)
		exec PagingSelect @pagingType,@sKeysSelect,@spageNum,@spageSize,@filter,@sortExpr,@tableName,@viewName, 1
	else
	begin
		select 0
		if (@pagingType = 5)
			select 0
		select * from #resultsTable
	end
end
else
begin

	-- @pageSize > @MAX_ROWCOUNT=считаем,что в этом случае пейджинг не нужен - тянется все
	if(@pageSize > @MAX_ROWCOUNT)
	begin
		set @sql=@sql + '
			select 0
			select
			'
	end
	else -- реализуем пейджинг
	begin
		create table #Paging(
			pgId int identity,
			ptKey bigint primary key,
			ptpricekey bigint,
			newPrice money,
			pt_hdquota varchar(10),
			pt_chtherequota varchar(256),
			pt_chbackquota varchar(256),
			chkey int,
			chbackkey int,
			stepId int,
			priceCorrection float,
			pt_hdallquota varchar(256),
			-- признак того что вариант был подмешан (нужно для выделения)
			pt_smartSearch bit default 0
		)
		
		if((@pagingType <> @ACTUALPLACES_PAGING and @pagingType <> @DYNAMIC_SPO_PAGING) or (@hotelQuotaMask <= 0 and @aviaQuotaMask <= 0))
			set @sql=@sql + ' 
			insert into #Paging(ptkey) select ' 
		else
		begin

			-- Подмешивание отелей (SmartSearch) работает только для первой страницы
			if (@mwUseSmartSearch = 1 and @pageNum = 0)
			begin
				-- максимально возможное количество результов, которые могут быть подмешаны
				declare @maxSmartSearchResult tinyint; set @maxSmartSearchResult = 3;
				declare @smaxSmartSearchResult varchar(3); set @smaxSmartSearchResult=LTRIM(STR(@maxSmartSearchResult))
				
				-- количество реально подмешанных вариантов
				declare @realDashVariantsNumber smallint;
				
				set @sql=@sql + '
				declare quotaCursor cursor fast_forward read_only for
				select pt_key,pt_tourkey,pt_pricekey
				,pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,pt_hdday,pt_hdnights, (case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,
				(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_chprkey end),pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,
				(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_chbackprkey end),pt_days,pt_chkey, pt_chbackkey, 0, '''' pt_chdirectkeys, '''' pt_chbackkeys, '''' pt_hddetails
				, pt_directFlightAttribute, pt_backFlightAttribute, pt_mainplaces, pt_hrkey
				from ' + @tableName + ' with(nolock) inner join hotelPriorities with(nolock) on pt_hdkey = hp_hdkey'
				
				if @HideWithNotStartedSaleDate = 1
					set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid) '
					
				set @sql = @sql + ' where (' + @filter
				-- null не может быть для ВСЕХ одновременно приоритетов присутствующих в фильтах
				-- т.к. по стране фильтруем всегда, то приоритет для страны проверяем на null тоже всегда
				set @sql = @sql + ') and (HP_CountryPriority is not null'
				-- если есть фильтр для города, то проверяем на null приоритет для города
				if (charindex('pt_ctkey',@filter) > 0)
				begin
					set @sql = @sql + ' or HP_CityPriority is not null '
				end
				-- если есть фильтр для курорта, то проверяем на null приоритет для курорта
				if (charindex('pt_rskey',@filter) > 0)
				begin
					set @sql = @sql + ' or HP_ResortPriority is not null '
				end
				set @sql = @sql + ') '
				set @sql = @sql + '
				-- фильтр по отсутсвию инфанта
				and not exists (select top 1 1 from accmdmentype where ac_key=pt_ackey and ac_name like ''%инфант%'')
				order by '
				
				-- если в фильтре есть город
				if (charindex('pt_ctkey',@filter) > 0)
				begin
					set @sql = @sql + 'case when HP_CityPriority is null then 1 else 0 end, hp_cityPriority, '
				end
				
				-- если в фильтре есть курорт
				if (charindex('pt_rskey',@filter) > 0)
				begin
					set @sql = @sql + 'case when HP_ResortPriority is null then 1 else 0 end, hp_resortPriority, '
				end
				
				-- по стране и стандартной сортировке сортируем в любом случае
				set @sql = @sql + 'case when HP_CountryPriority is null then 1 else 0 end, hp_countryPriority, ' + @sortExpr

				-- запустим mwCheckQuotesCycle с последним параметром = 1 (индикатор того, что ищем подмешанные варианты)
				-- маски квот для подмешанных вариантов:
				-- отель: 1 - есть
				-- перелет: 1 - есть
				set @sql=@sql + '
				open quotaCursor

				exec dbo.mwCheckQuotesCycle ' + ltrim(str(@pagingType))+ ', ' + @spageNum + ', ' + @smaxSmartSearchResult + ', ' + ltrim(str(@agentKey)) + ', 1, 1, ''' + @flightGroups + ''', ' + ltrim(str(@checkAgentQuota)) + ', ' + ltrim(str(@checkCommonQuota)) + ', ' + ltrim(str(@checkNoLongQuota)) + ', ' + ltrim(str(@requestOnRelease)) + ', ' + ltrim(str(@expiredReleaseResult)) + ', ' + ltrim(str(@noPlacesResult)) + ', ' + ltrim(str(@findFlight)) + ', 1, null, @airlineCodes

				close quotaCursor
				deallocate quotaCursor
				'

				EXECUTE sp_executesql @sql, 
									  N'@airlineCodes ListSysNameValue READONLY', 
								      @airlineCodes

				set @sql = '';
				-- после этого в #Paginge - хранится столько строк сколько мы подмешали (0-3)
				-- уменьшим pageSize на это число, чтобы сохранить общее кол-во выводимых строк
				select @realDashVariantsNumber = count(1) from #Paging;
				set @pageSize = @pageSize - @realDashVariantsNumber;
				set @spageSize=ltrim(str(@pageSize));
			end

			set @sql=@sql + ' 
			declare quotaCursor cursor fast_forward read_only for '
			if(@pagingType = @DYNAMIC_SPO_PAGING)
				set @sql = @sql + ' with Prices as (select '
			else
				set @sql = @sql + ' select '
		end

		if(@pageSize < @MAX_ROWCOUNT)
		begin
			if(@pagingType=@SIMPLE_PAGING)
				set @sql=@sql + ' top ' + str(@MAX_ROWCOUNT)
			else if((@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING) and @hotelQuotaMask=0 and @aviaQuotaMask=0)
				set @sql=@sql + ' top ' + @spageSize
		end
	
		set @sql=@sql + ' pt_key,pt_tourkey, pt_pricekey '
		if((@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING) and (@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
		begin
			set @sql=@sql + ',pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,pt_hdday,pt_hdnights, (case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,
				(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_chprkey end),pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,
				(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_chbackprkey end),pt_days, '
			if(@pagingType <> @DYNAMIC_SPO_PAGING)
				set @sql = @sql + ' pt_chkey, pt_chbackkey, 0, pt_chdirectkeys, pt_chbackkeys, pt_hddetails '
			else
				set @sql = @sql + ' ch_key as pt_chkey, chb_key as pt_chbackkey, row_number() over(order by ' + @sortExpr + ') as rowNum '
		end
		set @sql=@sql + ' , pt_directFlightAttribute, pt_backFlightAttribute, pt_mainplaces, pt_hrkey from ' + @tableName + ' with(nolock) '
		
		if @HideWithNotStartedSaleDate = 1
			set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid) '

		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ' left outer join 
			(select pt_tourdate as tourdate, pt_chbackday as chbackday, pt_chkey as chkey, pt_chbackkey as chbackkey, ch.ch_key as ch_key, chb.ch_key as chb_key 
				from (select distinct pt_tourdate, pt_chbackday, pt_chkey, pt_chbackkey from ' + @tableName + ' where ' + @filter + ') ptd 
				left outer join charter ptch with(nolock) on (ptch.ch_key = pt_chkey) left outer join charter ptchb with(nolock) on (ptchb.ch_key = pt_chbackkey)
				left outer join charter ch with(nolock) on (ptch.ch_citykeyfrom = ch.ch_citykeyfrom and ptch.ch_citykeyto = ch.ch_citykeyto) left outer join charter chb with(nolock) on (ptchb.ch_citykeyto = chb.ch_citykeyto and ptchb.ch_citykeyfrom = chb.ch_citykeyfrom and chb.ch_airlinecode = ch.ch_airlinecode) 
			left outer join airseason a with(nolock) on (a.as_chkey = ch.ch_key and ptd.pt_tourdate between a.as_datefrom and a.as_dateto and a.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, -1, ptd.pt_tourdate))))+ ''%'')) left outer join airseason ab with(nolock) on (ab.as_chkey = chb.ch_key and dateadd(day, pt_chbackday - 1, ptd.pt_tourdate) between ab.as_datefrom and ab.as_dateto and ab.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, pt_chbackday - 2, ptd.pt_tourdate)))) + ''%''))) pt1
		on (pt_tourdate = tourdate and pt_chkey = chkey and pt_chbackkey = chbackkey and pt_chbackday = chbackday)'

		if (@mwSearchType=0)
			set @sql=@sql + ' where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' +  LTRIM(STR(@departFromKey)) + ' and ' + @filter
		else 
			set @sql=@sql + ' where ' + @filter
			

		if((@pagingType=@ACTUALPLACES_PAGING) and @pageNum > 0)
		begin
			declare @a int
--			--и еще добавим невключающее условие по количеству предварительно просмотренных записей
--			set @sql=@sql + ' and pt_key not in (select top '+@spageNum+' pt_key '
--
--			if (@mwSearchType=0)
--				set @sql=@sql + ' from dbo.mwPriceTable  with(nolock) where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
--			else
--				set @sql=@sql + ' from ' + dbo.mwGetPriceViewName (@countryKey,@departFromKey) + ' with(nolock) where ' + @filter
--
--			if len(isnull(@sortExpr,'')) > 0
--				set @sql=@sql + ' order by '+ @sortExpr
--			set @sql=@sql + ') '
		end
		else if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ') select * from Prices where rowNum > ' + @spageNum
		
		if(substring(@sortExpr, 1, 1) = '*')					-- begin tkachuk 21.02.2012 Исправлена ошибка, возникающая при некотором наборе параметров
		begin
			set @sortExpr = SUBSTRING(@sortExpr, 2, LEN(@sortExpr) - 1)
			set @sortExpr = LTRIM(@sortExpr)
			
			if(SUBSTRING(@sortExpr, 1, 1) = ',')
			begin
				set @sortExpr = SUBSTRING(@sortExpr, 2, LEN(@sortExpr) - 1)
				set @sortExpr = LTRIM(@sortExpr)
			end
		end														-- end tkachuk 21.02.2012

		if (len(isnull(@sortExpr,'')) > 0 and @pagingType <> @DYNAMIC_SPO_PAGING)
			set @sql=@sql + ' order by '+ @sortExpr
	
		if(@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING)
		begin
			if (@pageNum=0) -- количество записей возвращаем только при запросе первой страницы
			begin
				set @sql=@sql + ' 
				select count(*) from ' + @tableName + ' with(nolock) '
				
				if @HideWithNotStartedSaleDate = 1
					set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid)'
				
				if(@pagingType = @DYNAMIC_SPO_PAGING)
					set @sql = @sql + ' left outer join 
						(select pt_tourdate tourdate, pt_chbackday chbackday, pt_chkey chkey, pt_chbackkey chbackkey, ch.ch_key as ch_key, chb.ch_key as chb_key 
							from (select distinct pt_tourdate, pt_chbackday, pt_chkey, pt_chbackkey from ' + @tableName + ' where ' + @filter + ') ptd 
							left outer join charter ptch with(nolock) on (ptch.ch_key = pt_chkey) left outer join charter ptchb with(nolock) on (ptchb.ch_key = pt_chbackkey) left outer join charter ch with(nolock) on (ptch.ch_citykeyfrom = ch.ch_citykeyfrom and ptch.ch_citykeyto = ch.ch_citykeyto)
						left outer join charter chb with(nolock) on (ptchb.ch_citykeyto = chb.ch_citykeyto and ptchb.ch_citykeyfrom = chb.ch_citykeyfrom and chb.ch_airlinecode = ch.ch_airlinecode) left outer join airseason a with(nolock) on (a.as_chkey = ch.ch_key and ptd.pt_tourdate between a.as_datefrom and a.as_dateto and a.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, -1, ptd.pt_tourdate))))+ ''%''))
						left outer join airseason ab with(nolock) on (ab.as_chkey = chb.ch_key and dateadd(day, pt_chbackday - 1, ptd.pt_tourdate) between ab.as_datefrom and ab.as_dateto and ab.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, pt_chbackday - 2, ptd.pt_tourdate)))) + ''%''))) pt1
					on (pt_tourdate = tourdate and pt_chkey = chkey and pt_chbackkey = chbackkey and pt_chbackday = chbackday)'
				if (@mwSearchType=0)
					set @sql = @sql + ' where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
				else
					set @sql = @sql + ' where ' + @filter
			end
			else
				set @sql=@sql + ' select 0 '

			if(@hotelQuotaMask=0 and @aviaQuotaMask=0)
				set @sql=@sql + ' 
					select ' + ltrim(str(@pageNum + @pageSize))
			else
			begin
				set @sql=@sql + '
				open quotaCursor

				exec dbo.mwCheckQuotesCycle ' + ltrim(str(@pagingType))+ ', ' + @spageNum + ', ' + @spageSize + ', ' + ltrim(str(@agentKey)) + ', ' + ltrim(str(@hotelQuotaMask)) + ', ' + ltrim(str(@aviaQuotaMask)) + ', ''' + @flightGroups + ''', ' + ltrim(str(@checkAgentQuota)) + ', ' + ltrim(str(@checkCommonQuota)) + ', ' + ltrim(str(@checkNoLongQuota)) + ', ' + ltrim(str(@requestOnRelease)) + ', ' + ltrim(str(@expiredReleaseResult)) + ', ' + ltrim(str(@noPlacesResult)) + ', ' + ltrim(str(@findFlight)) + ', 0, ''' + @tableName + ''', @airlineCodes

				close quotaCursor
				deallocate quotaCursor
				'
				if(@pagingType = @DYNAMIC_SPO_PAGING)
					set @sql = @sql + 'select dbo.GetDynamicRulesStepValue(getdate())'
			end
		end
		else
		begin

			set @sql=@sql + '
			select @@rowCount'
		end
		
		EXECUTE sp_executesql @sql, N'@airlineCodes ListSysNameValue READONLY', @airlineCodes		
		
		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql ='
			DECLARE @firstRecord int,@lastRecord int
			SET @firstRecord=('+ @spageNum + ' - 1) * ' + @spageSize+ ' + 1
			SET @lastRecord=('+ @spageNum +' *'+ @spageSize + ') 
			select '
		end
		else
			set @sql= ' select '

	end

	set @sql=@sql + '
		pt_tourdate,
		pt_days,
		pt_nights,
		pt_cnkey,
		pt_ctkeyfrom,
		pt_ctkeyto,
		pt_tourkey,
		pt_tourtype,
		pt_tlkey,
		pt_main,
		pt_pricelistkey,
		pt_pricekey,'
	if (@pagingType = 1)
	begin
		set @sql=@sql + 'pt_price,'
	end
	else
	begin
		set @sql=@sql + 'case when newPrice is not null then newPrice else pt_price end as pt_price,'
	end		
	set @sql=@sql + 'pt_hdkey,
		pt_hdpartnerkey,
		pt_rskey,
		pt_ctkey,
		hd_stars as pt_hdstars,
		pt_pnkey,
		pt_hrkey,
		pt_rmkey,
		pt_rckey,
		pt_ackey,
		pt_childagefrom,
		pt_childageto,
		pt_childagefrom2,
		pt_childageto2,
		hd_name as pt_hdname,
		tl_nameweb as pt_tourname,
		PN_NAME as pt_pnname,
		PN_CODE as pt_pncode,
		RM_Name as pt_rmname,
		RM_Code as pt_rmcode,
		RC_Name as pt_rcname,
		RC_Code as pt_rccode,
		AC_Name as pt_acname,
		AC_Code as pt_accode,
		RS_Name as pt_rsname,
		CT_Name as pt_ctname,
		RM_Order as pt_rmorder,
		RC_Order as pt_rcorder,
		AC_Order as pt_acorder,
		pt_rate,
		tl_webhttp as pt_toururl,
		hd_http as pt_hotelurl,
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_key,
		pt_hddetails,
		pt_topricefor,'		-- MEG00031932. Golubinsky. 06.07.2011. Включение в результат типа цены
	
	if (exists(select top 1 1 from SystemSettings where SS_ParmName='NewReCalculatePrice' and SS_ParmValue='1')
		and @showCOName=1)
	begin
		--находим название ценового блока, из которого берется цена проживания
		set @sql = @sql +
			'ISNULL((select top 1 CO_Name from CostOffers with(nolock)
				inner join CostOfferServices with(nolock) on COS_COID=CO_Id
				inner join tbl_Costs with(nolock) on CS_COID=CO_Id
				inner join Turlist with(nolock) on TL_KEY=pt_tlkey
				inner join TurService with(nolock) on TS_TRKEY=TL_KEY
				where COS_SVKey=3
				and TS_SVKEY=3
				and CS_SVKey=3
				and CO_SVKey=3
				and COS_Code=pt_hdkey
				and CS_Code=pt_hdkey
				and CO_PKKey=TS_PKKEY
				and
				(
					ISNULL(CS_DATE,''1900-01-01'') <= DATEADD(DAY,pt_days,pt_tourdate) and ISNULL(CS_DATEEND,''2300-01-01'') >= pt_tourdate
					and
					ISNULL(CS_CHECKINDATEBEG,''1900-01-01'') <= pt_tourdate and ISNULL(CS_CHECKINDATEEND,''2300-01-01'') >= pt_tourdate
				)
				and GETDATE() between ISNULL(CO_SaleDateBeg,''1900-01-01'') and ISNULL(CO_SaleDateEnd,''2050-01-01'')
				and CS_PRKey=pt_hdpartnerkey
				and CO_PartnerKey=pt_hdpartnerkey
				and CO_State=1
				and CO_DateClose is null
				order by ISNULL(CO_DateLastPublish,''1900-01-01'') desc,ISNULL(CO_DateActive,''1900-01-01'') desc),'''') as co_name,'
	end
	else
	begin
		set @sql = @sql + ''''' as co_name,'
	end
	
	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @sql = @sql + '
		chkey as	pt_chkey,
		chbackkey as pt_chbackkey,
		stepId as pt_hdstepindex,
		priceCorrection as pt_hdpricecorrection
	'
	else
		set @sql = @sql + '
		[pt_chkey],
		[pt_chbackkey]
	'

	if (@pagingType = @ACTUALPLACES_PAGING)
	begin
		set @sql = @sql + '
		,[pt_smartSearch]
	'
	end

	if(@getServices > 0)
		set @sql=@sql + ',dbo.mwGetServiceClasses(pt_pricelistkey) pt_srvClasses'
	if (@pagingType <> @SIMPLE_PAGING)
	begin
		if(@hotelQuotaMask > 0)
			set @sql=@sql + ',pt_hdquota,pt_hdallquota '
		if(@aviaQuotaMask > 0)
			set @sql=@sql + ',pt_chtherequota,pt_chbackquota '
	end
	if(@calculateVisaDeadLine > 0)
		set @sql=@sql + ',dbo.mwGetVisaDeadlineDate(pt_tlkey, pt_tourdate, pt_ctkeyfrom) pt_visadeadline '

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @sql = @sql + ', (''<nobr><b>'' + isnull(ch.ch_airlinecode, '''') + '' '' + isnull(ch.ch_flight, '''') + ''</b>'' + ''('' + isnull(ltrim(str(datepart(hh, a.as_timefrom))), '''') + '':'' + isnull(ltrim(str(datepart(mi, a.as_timefrom))), '''') + ''-'' + isnull(ltrim(str(datepart(hh, a.as_timeto))), '''') + '':'' + isnull(ltrim(str(datepart(mi, a.as_timeto))), '''') + '')</nobr><br/>'' + isnull(ch.ch_aircraft, '''') + ''&nbsp;('' + isnull(ch.ch_portcodefrom, '''') + ''-'' + isnull(ch.ch_portcodeto, '''') + '')'') as pt_chinfo
						,(''<nobr><b>'' + isnull(chb.ch_airlinecode, '''') + '' '' + isnull(chb.ch_flight, '''') + ''</b>''  + ''('' + isnull(ltrim(str(datepart(hh, ab.as_timefrom))), '''') + '':'' + isnull(ltrim(str(datepart(mi, ab.as_timefrom))), '''') + ''-'' + isnull(ltrim(str(datepart(hh, ab.as_timeto))), '''') + '':'' + isnull(ltrim(str(datepart(mi, ab.as_timeto))), '''') + '')</nobr><br/>'' + isnull(chb.ch_aircraft, '''') + ''&nbsp;('' + isnull(chb.ch_portcodefrom, '''') + ''-'' + isnull(chb.ch_portcodeto, '''') + '')'') as pt_chbackinfo'

	if(@pagingType=@SIMPLE_PAGING and (@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
		set @sql=@sql + ' into #resultsTable '

	if (@mwSearchType=0)
		set @sql=@sql + ' from mwPriceTable'
	else
		set @sql=@sql + ' from ' + dbo.mwGetPriceViewName (@countryKey,@departFromKey)
	set @sql=@sql + ' inner join hoteldictionary with(nolock) on pt_hdkey=hd_key 
	inner join tbl_turlist with(nolock) on pt_tlkey=tl_key  
	join Pansion with(nolock) on pt_pnkey = PN_KEY
	join Rooms with(nolock) on pt_rmkey = RM_Key
	join RoomsCategory with(nolock) on RC_Key = pt_rckey
	join AccmdMentype with(nolock) on AC_Key = pt_ackey 
	join CityDictionary with(nolock) on CT_Key = pt_ctkey 
	left join Resorts with(nolock) on RS_Key = pt_rskey '

	if(@pageSize > @MAX_ROWCOUNT)
	begin
		set @sql=@sql + ' where ' + @filter

		if len(isnull(@sortExpr,'')) > 0
			set @sql=@sql + ' order by '+ @sortExpr

		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql=@sql + '
			select * from #resultsTable
			'
		end
	end
	else
	begin
		set @sql=@sql + ' inner join #Paging on (pt_key=ptKey) '
		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ' left outer join Charter ch with(nolock) on chkey = ch.ch_key left outer join airseason a with(nolock) on (pt_chkey = a.as_chkey and pt_tourdate between a.as_datefrom and a.as_dateto and charindex(cast(datepart(dw, dateadd(day, -1, pt_tourdate)) as varchar(1)), a.as_week) > 0)
					left outer join Charter chb with(nolock) on chbackkey = chb.ch_key left outer join airseason ab with(nolock) on (pt_chbackkey = ab.as_chkey and dateadd(day, pt_chbackday - 1, pt_tourdate) between ab.as_datefrom and ab.as_dateto and charindex(cast(datepart(dw, dateadd(day, pt_chbackday-2, pt_tourdate)) as varchar(1)), ab.as_week) > 0)'
		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql=@sql + ' where pgId between @firstRecord and @lastRecord order by pgId'

			if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
				set @sql=@sql + '

					declare quotaCursor cursor for
					select pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,
						pt_chkey,pt_chbackkey,
						pt_hdday,pt_hdnights,(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0)))+ ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket))+ ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,
						(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0)))+ ' > 0 then -1 else pt_chprkey end),
						pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket))+ ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,
						(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0)))+ ' > 0 then -1 else pt_chbackprkey end),pt_days
					from #resultsTable
					for update of pt_hdquota,pt_chtherequota,pt_chbackquota
	
					declare @hdkey int,@rmkey int,@rckey int,@tourdate datetime,
						@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,
						@chday int,@chpkkey int,@chprkey int,@chbackday int,
						@chbackpkkey int,@chbackprkey int,@days int
	
					open quotaCursor
	
					fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
						@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
						@chday,@chpkkey,@chprkey,@chbackday,
						@chbackpkkey,@chbackprkey,@days
	
					declare @tmpHotelQuota varchar(10)
					declare @tmpThereAviaQuota varchar(256)		
					declare @tmpBackAviaQuota varchar(256)		
					declare @allPlaces int,@places int
	
					while(@@fetch_status=0)
					begin
						'				
					if(@hotelQuotaMask > 0)
						set @sql=@sql + ' 
						set @tmpHotelQuota=null
						select @tmpHotelQuota=res from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
						if (@tmpHotelQuota is null)
						begin
							select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey,' + ltrim(str(@agentKey)) + ',@hdprkey,@tourdate,@hdday,@hdnights,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',0,0,0,0,0,' + ltrim(str(@expiredReleaseResult)) +')
							set @tmpHotelQuota=ltrim(str(@places)) + '':'' + ltrim(str(@allPlaces))
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota)
						end
						'
					if(@aviaQuotaMask > 0)
						set @sql=@sql + ' 
						set @tmpThereAviaQuota=null
						if(@chkey > 0)
						begin
							select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
							if (@tmpThereAviaQuota is null)
							begin
								exec dbo.mwCheckFlightGroupsQuotes ' + ltrim(str(@pagingType)) + ',@chkey,''' + @flightGroups + ''',' + ltrim(str(@agentKey)) + ',@chprkey, @tourdate,@chday,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',' + ltrim(str(@findFlight)) + ',@chpkkey,@days,' + ltrim(str(@expiredReleaseResult)) +',null, @tmpThereAviaQuota output
								insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota)
							end
						end

						set @tmpBackAviaQuota=null
						if(@chbackkey > 0)
						begin
							select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
							if (@tmpBackAviaQuota is null)
							begin
								exec dbo.mwCheckFlightGroupsQuotes ' + ltrim(str(@pagingType)) + ',@chbackkey,''' + @flightGroups + ''',' + ltrim(str(@agentKey)) + ',@chbackprkey, @tourdate,@chbackday,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',' + ltrim(str(@findFlight)) + ',@chbackpkkey,@days,' + ltrim(str(@expiredReleaseResult)) +',null, @tmpBackAviaQuota output
								insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota)
							end
						end
						'

					set @sql=@sql + '
						update #resultsTable set pt_hdquota=@tmpHotelQuota,
							pt_chtherequota=@tmpThereAviaQuota,
							pt_chbackquota=@tmpBackAviaQuota
						where CURRENT OF quotaCursor


						fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
							@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
							@chday,@chpkkey,@chprkey,@chbackday,
							@chbackpkkey,@chbackprkey,@days
					end

					close quotaCursor
					deallocate quotaCursor

					if (@calculateVisaDeadLine > 0)
					begin
						update #resultsTable
						set pt_visadeadline = dbo.mwGetVisaDeadlineDate(pt_tlkey, pt_tourdate, pt_ctkeyfrom)
					end

					select * from #resultsTable
				'
			end
			else
				set @sql=@sql + ' order by pgId '

	end

exec (@sql)

if exists (select 1 from SystemSettings where SS_ParmName like 'LogPagingState' and SS_ParmValue = '1')
begin
	declare @DurationQuery int
	SET @DurationQuery = DATEDIFF(millisecond, @beginTime, GetDate())
	INSERT INTO [dbo].[Megatec_StateDataPaging]
			   ([SDP_Code],[SDP_Name],[SDP_PagingType],[SDP_CountryKey]
			   ,[SDP_DepartFromKey],[SDP_Filter],[SDP_SortExpr],[SDP_PageNum],[SDP_PageSize]
			   ,[SDP_AgentKey],[SDP_HotelQuotaMask],[SDP_AviaQuotaMask],[SDP_GetServices],[SDP_FlightGroups]
			   ,[SDP_CheckAgentQuota],[SDP_CheckCommonQuota],[SDP_CheckNoLongQuota],[SDP_RequestOnRelease],[SDP_ExpiredReleaseResult]
			   ,[SDP_NoPlacesResult],[SDP_FindFlight],[SDP_CheckFlightPacket],[SDP_CheckAllPartnersQuota],[SDP_CalculateVisaDeadLine]
			   ,[SDP_NoSmartSearch],[SDP_Value],[SDP_AppName],[SDP_HostName])
		 VALUES
			   (10001 ,'Paging. Выполнение' ,@pagingType ,@countryKey
				,@departFromKey ,@filter ,@sortExpr ,@pageNum ,@pageSize
				,@agentKey ,@hotelQuotaMask ,@aviaQuotaMask ,@getServices ,@flightGroups
				,@checkAgentQuota ,@checkCommonQuota ,@checkNoLongQuota ,@requestOnRelease ,@expiredReleaseResult
				,@noPlacesResult ,@findFlight ,@checkFlightPacket ,@checkAllPartnersQuota ,@calculateVisaDeadLine
				,@noSmartSearch ,@DurationQuery, APP_NAME(),HOST_NAME())
end

end
GO

GRANT EXECUTE on [dbo].[Paging] to public
GO
/*********************************************************************/
/* end sp_Paging.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_Paging.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CopyTpPricesUpdatedToSubscriptions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CopyTpPricesUpdatedToSubscriptions.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CopyTpPricesUpdatedToSubscriptions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CopyTpPricesUpdatedToSubscriptions]
GO
CREATE PROCEDURE [dbo].[CopyTpPricesUpdatedToSubscriptions]
AS
-- копирует данные из таблицы TP_PricesUpdated на все подписчики
--<DATE>2014-10-07</DATE>
--<VERSION>9.2.21</VERSION>
begin
	if dbo.mwReplIsPublisher() > 0 
	begin
		DECLARE @Sub TABLE
		(
			[PublisherDBName] sysname,
			[PublisherName] sysname,
			[SubscriberName] sysname,
			[SubscriptionDBName] sysname
		)
		
		INSERT INTO @Sub EXEC mwGetSubscriptions
		
		insert into TpPricesUpdatedSubscriptions (TU_TUKey,TU_SubscriptionName)
		select pricesBatch.TPU_Key, (SubscriberName + '.' + SubscriptionDBName)
		from
		(
			select top 10000 TPU_Key from TP_PricesUpdated
			where not exists(select top 1 1 from TpPricesUpdatedSubscriptions with(nolock) where tu_tukey=tpu_key)
		) as pricesBatch
		inner join @sub on 1=1
		
		DECLARE @subName nvarchar(max)
		DECLARE @subscriptionLinkedServer sysname, @subscriptionDatabaseName sysname
		
		DECLARE subscriptionsCursor CURSOR FOR
		SELECT SubscriberName, SubscriptionDBName FROM @Sub
		
		declare @sql nvarchar(max)
		declare @source varchar(200)
		set @source = ''
		
		if exists(select top 1 1 from TpPricesUpdatedSubscriptions with(nolock))
		begin
			OPEN subscriptionsCursor
			
			FETCH NEXT FROM subscriptionsCursor INTO @subscriptionLinkedServer, @subscriptionDatabaseName
			
			WHILE @@Fetch_Status = 0
			BEGIN
				SET @source = '[' + @subscriptionLinkedServer + '].[' + @subscriptionDatabaseName + ']'
				
				BEGIN TRY
					SET @sql = '
						set xact_abort on
						begin transaction
						
						create table #TmpKeys (TK_ID bigint, TK_TUKey int)
						
						insert into #TmpKeys (TK_ID, TK_TUKey)
						SELECT TU_Key, TU_TUKEY 
						FROM TpPricesUpdatedSubscriptions with(nolock)
						where tu_isProcessed=0
								and tu_subscriptionName=''' + @subscriptionLinkedServer + '.' + @subscriptionDatabaseName + '''
						
						insert into ' + @source + '.dbo.TP_PricesUpdated (TPU_TPKey,TPU_IsChangeCostMode,TPU_TPGrossOld,TPU_TPGrossDelta,TPU_DateUpdate) 
						select TPU_TPKey,TPU_IsChangeCostMode,TPU_TPGrossOld,TPU_TPGrossDelta,TPU_DateUpdate 
						from TP_PricesUpdated src with(nolock)
						inner join #TmpKeys with(nolock) on TK_TUKey=TPU_Key
						where not exists (select top 1 1 from ' + @source + '.dbo.TP_PricesUpdated as dest with(nolock)
											where src.TPU_TPKey = dest.TPU_TPKey)
						
						update TpPricesUpdatedSubscriptions set tu_IsProcessed=1
							where tu_key in (select TK_Id from #TmpKeys with(nolock))
						
						commit transaction
					'
					
					exec sp_executesql @sql	
				END TRY
				BEGIN CATCH
					declare @errorMessage nvarchar(max)
					Set @errorMessage = ERROR_MESSAGE()
					print @errorMessage
					
					if @@trancount > 0
						rollback transaction

					RAISERROR (@errorMessage, 18, 100); 
				END CATCH			
				
				FETCH NEXT FROM subscriptionsCursor INTO @subscriptionLinkedServer, @subscriptionDatabaseName
			END
			CLOSE subscriptionsCursor
		end
		
		DEALLOCATE subscriptionsCursor
		
		delete from TP_PricesUpdated
		where exists(select top 1 1 from TpPricesUpdatedSubscriptions with (nolock) where TU_TUKey=TPU_Key)
			and not exists(select top 1 1 from TpPricesUpdatedSubscriptions with (nolock) where TU_TUKey=TPU_Key and tu_IsProcessed=0)
	end
end
GO
GRANT EXEC ON [dbo].[CopyTpPricesUpdatedToSubscriptions] TO PUBLIC
GO
/*********************************************************************/
/* end sp_CopyTpPricesUpdatedToSubscriptions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CopyTpPricesUpdatedToSubscriptions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2015-02-06)_Alter_Table_mwSpoDataHotelTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2015-02-06)_Alter_Table_mwSpoDataHotelTable.sql */
/*********************************************************************/
GRANT UPDATE on [dbo].[mwSpoDataHotelTable] to public
GO
/*********************************************************************/
/* end (2015-02-06)_Alter_Table_mwSpoDataHotelTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2015-02-06)_Alter_Table_mwSpoDataHotelTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(06.10.2014)_Insert_SystemSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (06.10.2014)_Insert_SystemSettings.sql */
/*********************************************************************/
--<VERSION>9.2.21</VERSION>
--<DATE>2014-10-06</DATE>
--<SUMMARY>
-- Настройка включает простановку стопов на обратное направление при прямом стопе
--</SUMMARY>

if not exists (select 1 from SystemSettings where SS_ParmName='BackWithDirectFlightStops')
begin
	insert into SystemSettings(SS_ParmName,SS_ParmValue, SS_Name)
	values ('BackWithDirectFlightStops', '0', 'Настройка включает простановку стопов на обратное направление при прямом стопе')
end
go
/*********************************************************************/
/* end (06.10.2014)_Insert_SystemSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(06.10.2014)_Insert_SystemSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(18.03.2014)_Insert_SystemSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (18.03.2014)_Insert_SystemSettings.sql */
/*********************************************************************/
--<VERSION>9.2.21</VERSION>
--<DATE>2014-03-18</DATE>
--<SUMMARY>
-- настройка для хранения даты, с которой следует подписывать платежи
--</SUMMARY>

if not exists (select 1 from SystemSettings where SS_ParmName='SYSDogovorSignStartDate')
begin
	insert into SystemSettings(SS_ParmName,SS_ParmValue, SS_Name)
	values ('SYSDogovorSignStartDate', '', 'Дата, с которой проверяем подписи платежей')
end
go
/*********************************************************************/
/* end (18.03.2014)_Insert_SystemSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(18.03.2014)_Insert_SystemSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013-12-09)_Alter_Data_Keys.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013-12-09)_Alter_Data_Keys.sql */
/*********************************************************************/
truncate table Key_TPTurDates
go
insert into Key_TPTurDates (ID)
values (isnull((select max(TD_Key) from TP_TurDates), 1))
go

truncate table Key_TPLists
go
insert into Key_TPLists (ID)
values (isnull((select max(TI_Key) from TP_Lists), 1))
go

truncate table Key_TPServices
go
insert into Key_TPServices (ID)
values (isnull((select max(TS_Key) from TP_Services), 1))
go

truncate table Key_TPTours
go
insert into Key_TPTours (ID)
values (isnull((select max(TO_Key) from TP_Tours), 1))
go

truncate table Key_TPServiceLists
go
insert into Key_TPServiceLists (ID)
values (isnull((select max(TL_Key) from TP_ServiceLists), 1))
go

truncate table Key_TPPrices
go
insert into Key_TPPrices (ID)
values (isnull((select max(TP_Key) from TP_Prices), 1))
go

truncate table Key_TURSERVICE
go
insert into Key_TURSERVICE (ID)
values (isnull((select max(TS_Key) from TurService), 1))
go

truncate table Key_TURIST
go
insert into Key_TURIST (ID)
values (isnull((select max(TU_KEY) from tbl_Turist), 1))
go

truncate table Key_TURLIST
go
insert into Key_TURLIST (ID)
values (isnull((select max(TL_KEY) from tbl_TurList), 1))
go

truncate table Key_TurMargin
go
insert into Key_TurMargin (ID)
values (isnull((select max(TM_Key) from TURMARGIN), 1))
go

truncate table Key_PRICELIST
go
insert into Key_PRICELIST (ID)
values (isnull((select max(PL_KEY) from PriceList), 1))
go

truncate table Key_PRICESERVICELINK
go
insert into Key_PRICESERVICELINK (ID)
values (isnull((select max(PS_Key) from PriceServiceLink), 1))
go

truncate table Key_PARTNERS
go
insert into Key_PARTNERS (ID)
values (isnull((select max(PR_KEY) from tbl_Partners), 1))
go

truncate table Key_DogovorList
go
insert into Key_DogovorList (ID)
values (isnull((select max(DL_Key) from tbl_DogovorList), 1))
go

/*Удалим значения из таблицы Keys*/
delete Keys
where KEY_TABLE in 
(
'TP_TurDates',
'TP_Lists',
'TP_Services',
'TP_Tours',
'TP_ServiceLists',
'TP_Prices',
'TurService',
'Turist',
'TURMARGIN',
'PriceList',
'PriceServiceLink',
'Partners',
'DogovorList'
)
go
/*********************************************************************/
/* end (2013-12-09)_Alter_Data_Keys.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013-12-09)_Alter_Data_Keys.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013-12-18)_Create_FK_TP_Price_mwPriceDataTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013-12-18)_Create_FK_TP_Price_mwPriceDataTable.sql */
/*********************************************************************/
--koshelev, закомментарил из-за ошибки 26750
--в mwPriceDataTable уже есть связь с tp_tours через tp_prices

--declare @tableName nvarchar(max)

--declare tableNameCursor cursor local fast_forward for
--select name
--from sys.tables
--where name like 'mwPriceDataTable%'

--open tableNameCursor
--fetch next from tableNameCursor into @tableName
--while (@@FETCH_STATUS = 0)
--begin	
--	declare @query nvarchar(max)	

--	set @query = '
--	if dbo.mwReplIsSubscriber() = 0 and dbo.mwReplIsPublisher() = 0 and not exists(select top 1 1 from sys.objects where name = ''FK_' + @tableName + '_TP_Tours'')
--	begin
--		ALTER TABLE ' + @tableName +' ADD CONSTRAINT FK_' + @tableName + '_TP_Tours
--		FOREIGN KEY	( pt_tourkey ) REFERENCES dbo.TP_Tours	( TO_Key )
--		ON UPDATE NO ACTION
--		ON DELETE CASCADE
--	end
--	'
--	--print @query
--	exec (@query)

--	fetch next from tableNameCursor into @tableName	
--end
--close tableNameCursor
--deallocate tableNameCursor
--go

/*********************************************************************/
/* end (2013-12-18)_Create_FK_TP_Price_mwPriceDataTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013-12-18)_Create_FK_TP_Price_mwPriceDataTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.07.31)_Insert_Action.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.07.31)_Insert_Action.sql */
/*********************************************************************/
--добавление action заполнение анкет туристов
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 76) 
	INSERT INTO Actions (AC_Key, AC_Name, AC_NameLat, AC_IsActionForRestriction) VALUES (76, 'Разрешить работу с анкетой туристов', 'Allow to work with tourists application form', 0)
Go

--добавление action справочник визовых анкет
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 99) 
	INSERT INTO Actions (AC_Key, AC_Name, AC_NameLat, AC_IsActionForRestriction) VALUES (99, 'Справочники -> Скрыть справочник визовых анкет', null, 1)
Go

--добавление action Запретить удаление квоты с возвратом в общую
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 144) 
	INSERT INTO Actions (AC_Key, AC_Name, AC_NameLat, AC_IsActionForRestriction) VALUES (144, 'Квоты -> Запретить удаление квоты с возвратом в общую', 'Quotas -> Disallow remove quota with return to the general', 1)
ELSE
	UPDATE Actions SET AC_IsActionForRestriction = 1 WHERE AC_Key = 144
Go
/*********************************************************************/
/* end (2013.07.31)_Insert_Action.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.07.31)_Insert_Action.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.10.16)_Create_Table_CalculateTourHosts.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.10.16)_Create_Table_CalculateTourHosts.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculateTourHosts]') AND type in (N'U'))
BEGIN
	CREATE TABLE [dbo].[CalculateTourHosts](
		[Id] [int] IDENTITY(1,1) NOT NULL,
		[Host] [nvarchar](max) NOT NULL,
		[Address] [nvarchar](450) NOT NULL,
		[UpdateDateTime] [smalldatetime] NOT NULL
	PRIMARY KEY CLUSTERED 
	(
		[Id] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
	UNIQUE NONCLUSTERED 
	(
		[Address] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
	) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
END
GO
GRANT SELECT, INSERT, UPDATE, DELETE ON [dbo].[CalculateTourHosts] TO PUBLIC
GO
/*********************************************************************/
/* end (2013.10.16)_Create_Table_CalculateTourHosts.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.10.16)_Create_Table_CalculateTourHosts.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Rename_Table.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.13)_Rename_Table.sql */
/*********************************************************************/
exec sp_rename 'reporttemplates', 'ReportTemplates'
go
/*********************************************************************/
/* end (2013.11.13)_Rename_Table.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.13)_Rename_Table.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.26)_Index_x_PricesHash_ToKey.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.26)_Index_x_PricesHash_ToKey.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_PricesHash]') AND name = N'x_PricesHash_ToKey')
begin
	CREATE NONCLUSTERED INDEX [x_PricesHash_ToKey] ON [dbo].[TP_PricesHash]
	(
		[ToKey] ASC
	)
	INCLUDE ( 	[TpKey],
		[Hash]) WITH (FILLFACTOR  = 80, PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end (2013.11.26)_Index_x_PricesHash_ToKey.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.26)_Index_x_PricesHash_ToKey.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.26)_INSERT_INTO_ACTIONS.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.26)_INSERT_INTO_ACTIONS.sql */
/*********************************************************************/
-- Добавление action Редактирование номера путевки
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 145) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) VALUES (145, 'Турпутевка->Запретить редактирование номера путевки', 'Запретить редактирование номера путевки', 'Reservation->Deny edit voucher number', 1);
END	
GO

-- Добавление action Перерасчет только на дату оформления путевки
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 146) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) VALUES (146, 'Турпутевка->Перерасчет только на дату оформления путевки', 'Запретить пересчет путевки на текущую или выбранную дату, пересчет только на дату оформления путевки', 'Reservation->Recalculation only on the create date of tour', 1);
END
GO

/*********************************************************************/
/* end (2013.11.26)_INSERT_INTO_ACTIONS.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.26)_INSERT_INTO_ACTIONS.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.29)_CreateTable_ProturServiceToQuota.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.11.29)_CreateTable_ProturServiceToQuota.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ProtourServiceToQuota]') AND type in (N'U'))
BEGIN
	create table ProtourServiceToQuota
	(
		PQ_Key int not null primary key identity(1, 1),
		PQ_HotelKey int,
		PQ_SubCode2 int,
		PQ_Date datetime,
		PQ_IsProcessed smallint not null default(0)
	)	
END
GO

grant select, insert, update, delete on ProtourServiceToQuota to public
GO
/*********************************************************************/
/* end (2013.11.29)_CreateTable_ProturServiceToQuota.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.11.29)_CreateTable_ProturServiceToQuota.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.02)_Insert_SystemSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.12.02)_Insert_SystemSettings.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM SYSTEMSETTINGS WHERE SS_PARMNAME='SYSChangeOfPaidServices')
BEGIN
	INSERT INTO SYSTEMSETTINGS(SS_PARMNAME,SS_PARMVALUE, SS_NAME)
	VALUES ('SYSChangeOfPaidServices', '0', 'Запретить изменение оплаченных услуг.')
END
GO

/*********************************************************************/
/* end (2013.12.02)_Insert_SystemSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.02)_Insert_SystemSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.11)_Create_SP_AllowChangeService.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.12.11)_Create_SP_AllowChangeService.sql */
/*********************************************************************/
IF EXISTS (SELECT * FROM SYSOBJECTS WHERE NAME = 'AllowChangeService' AND TYPE = 'P')
	drop procedure dbo.AllowChangeService
GO

create procedure dbo.AllowChangeService @p_nService int, @p_nError smallint output
as
begin
	set @p_nError = 0
	DECLARE @p_sError varchar(254)
	
	IF OBJECT_ID('FIN_AllowChangeSVPartner') IS NOT NULL
	BEGIN
		execute FIN_AllowChangeSVPartner @p_nService, @p_nError OUTPUT, @p_sError OUTPUT
	END
end
GO

grant execute on dbo.AllowChangeService to public
GO
/*********************************************************************/
/* end (2013.12.11)_Create_SP_AllowChangeService.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.11)_Create_SP_AllowChangeService.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.17)_Create_CalculateTourControlPanelSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2013.12.17)_Create_CalculateTourControlPanelSettings.sql */
/*********************************************************************/
--<DATE>2013-12-17</DATE>
--<VERSION>11.1</VERSION>
--<DESCRIPTION>Таблица настроек веб-панели нового расчета туров</DESCRIPTION>
IF NOT EXISTS (SELECT * FROM sys.objects WHERE name = 'CalculateTourControlPanelSettings' and type = 'U')
begin
CREATE TABLE dbo.CalculateTourControlPanelSettings
	(
	PS_TRKey int NOT NULL,
	PS_Settings nvarchar(MAX) NOT NULL
	)  ON [PRIMARY]
	 TEXTIMAGE_ON [PRIMARY]

ALTER TABLE dbo.CalculateTourControlPanelSettings ADD CONSTRAINT
	PK_CalculateTourControlPanelSettings PRIMARY KEY CLUSTERED 
	(
	PS_TRKey
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

ALTER TABLE dbo.CalculateTourControlPanelSettings ADD CONSTRAINT
	FK_CalculateTourControlPanelSettings_tbl_TurList FOREIGN KEY
	(
	PS_TRKey
	) REFERENCES dbo.tbl_TurList
	(
	TL_KEY
	) ON UPDATE  NO ACTION 
	 ON DELETE  CASCADE 
end

GO
grant select, insert, delete, update on dbo.CalculateTourControlPanelSettings to public
go

/*********************************************************************/
/* end (2013.12.17)_Create_CalculateTourControlPanelSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2013.12.17)_Create_CalculateTourControlPanelSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-01-08)_Create_Index_x_AddCosts_ChangeId.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-01-08)_Create_Index_x_AddCosts_ChangeId.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[AddCosts]') AND name = N'x_AddCosts_ChangeId')
begin
	CREATE NONCLUSTERED INDEX [x_AddCosts_ChangeId] ON [dbo].[AddCosts]
	(
		[ChangeId] ASC
	)
	INCLUDE ( 	
		[ADC_Id],
		[ADC_TypeId],
		[ADC_TLKey],
		[ADC_SVKey],
		[ADC_Code],
		[ADC_SubCode1],
		[ADC_SubCode2],
		[ADC_PansionKey],
		[ADC_CheckinDateBeg],
		[ADC_CheckinDateEnd],
		[ADC_LongMin],
		[ADC_LongMax],
		[ADC_PartnerKey],
		[ADC_IsCommission],
		[ADC_Rate],
		[ADC_Value],
		[ADC_ValueChild],
		[ADC_CreateDate],
		[ADC_DisableDate],
		[ADC_UpdateDate],
		[ADC_UpdateUserName],
		[ADC_UpdateUserKey],
		[ADC_Name],
		[ADC_ACNId],
		[ADC_IsDay],
		[ADC_Description]
		) WITH (FILLFACTOR = 80, PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end (2014-01-08)_Create_Index_x_AddCosts_ChangeId.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-01-08)_Create_Index_x_AddCosts_ChangeId.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-01-13)_Alter_TP_Price.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-01-13)_Alter_TP_Price.sql */
/*********************************************************************/
-- удаление ненужных индексов
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'IX_TourML1')
DROP INDEX [IX_TourML1] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'IX_UpdateDate')
DROP INDEX [IX_UpdateDate] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_mwTourList')
DROP INDEX [x_mwTourList] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_tp_tikey')
DROP INDEX [x_tp_tikey] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_tp_dateend')
DROP INDEX [x_tp_dateend] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_CorrectionCalculatedPrice')
DROP INDEX [x_CorrectionCalculatedPrice] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_tp_datebegin')
DROP INDEX [x_tp_datebegin] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_tp_prices_calc')
DROP INDEX [x_tp_prices_calc] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'X_MM1')
DROP INDEX [X_MM1] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_mwfill')
DROP INDEX [x_mwfill] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_mwTourList2')
DROP INDEX [x_mwTourList2] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_TP_Prices_CalculatingKey')
DROP INDEX [x_TP_Prices_CalculatingKey] ON [dbo].[TP_Prices]
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_TP_Prices_tptokey')
DROP INDEX [x_TP_Prices_tptokey] ON [dbo].[TP_Prices]
GO
-- удалим ненужные колонки 
if exists (select 1 from dbo.syscolumns where name = 'TP_UpdateDate' and id = object_id(N'[dbo].[TP_Prices]'))
	ALTER TABLE [dbo].[TP_Prices] drop column TP_UpdateDate
GO
-- удалим ненужные колонки
if exists (select 1 from dbo.syscolumns where name = 'TP_DateEnd' and id = object_id(N'[dbo].[TP_Prices]'))
	ALTER TABLE [dbo].[TP_Prices] drop column TP_DateEnd
GO


--пересоздание нужных
---------------------

/****** Index [X_MM1] ******/
CREATE NONCLUSTERED INDEX [X_MM1] ON [dbo].[TP_Prices]
(
	TP_TIKey, TP_DateBegin, TP_TOKey
)
INCLUDE (TP_Key, TP_Gross, TP_CalculatingKey) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
GO
/****** Index [x_mwfill] ******/
CREATE NONCLUSTERED INDEX [x_mwfill] ON [dbo].[TP_Prices]
(
	TP_TOKey, TP_CalculatingKey, TP_TIKey, TP_DateBegin
)
INCLUDE (TP_Gross, TP_Key) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
GO
/****** Index [x_mwTourList2] ******/
CREATE NONCLUSTERED INDEX [x_mwTourList2] ON [dbo].[TP_Prices]
(
	TP_DateBegin, TP_Gross
)
INCLUDE (TP_Key, TP_TOKey, TP_TIKey, TP_CalculatingKey) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
GO
/****** Index [x_TP_Prices_CalculatingKey] ******/
CREATE NONCLUSTERED INDEX [x_TP_Prices_CalculatingKey] ON [dbo].[TP_Prices]
(
	TP_CalculatingKey
)
INCLUDE (TP_Key, TP_TOKey, TP_DateBegin, TP_Gross, TP_TIKey) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
GO
/*********************************************************************/
/* end (2014-01-13)_Alter_TP_Price.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-01-13)_Alter_TP_Price.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-02-05)_Insert_SystemSettings_LogPagingState.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-02-05)_Insert_SystemSettings_LogPagingState.sql */
/*********************************************************************/
if not exists (select 1 from SystemSettings where SS_ParmName like 'LogPagingState')
begin
	insert into SystemSettings (SS_ParmName, SS_ParmValue)
	values ('LogPagingState', '0')
end
GO
/*********************************************************************/
/* end (2014-02-05)_Insert_SystemSettings_LogPagingState.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-02-05)_Insert_SystemSettings_LogPagingState.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-14)_Create_Index_X_TurService_CalculateTour.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-03-14)_Create_Index_X_TurService_CalculateTour.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TurService]') AND name = N'X_TurService_CalculateTour')
begin
	CREATE NONCLUSTERED INDEX X_TurService_CalculateTour
	ON [dbo].[TurService] ([TS_SVKEY])
	INCLUDE ([TS_TRKEY],[TS_CNKEY],[TS_CTKEY])
end
GO
/*********************************************************************/
/* end (2014-03-14)_Create_Index_X_TurService_CalculateTour.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-14)_Create_Index_X_TurService_CalculateTour.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-24)_AlterTable_ReCalculateAddCostResults.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-03-24)_AlterTable_ReCalculateAddCostResults.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'ACR_ADCId' and id = object_id(N'[dbo].[ReCalculateAddCostResults]'))
	ALTER TABLE [dbo].[ReCalculateAddCostResults] Add ACR_ADCId nvarchar(max) not null
GO
/*********************************************************************/
/* end (2014-03-24)_AlterTable_ReCalculateAddCostResults.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-03-24)_AlterTable_ReCalculateAddCostResults.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-06-06)_AlterTable_TP_PricesDeleted.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-06-06)_AlterTable_TP_PricesDeleted.sql */
/*********************************************************************/
if exists (select 1 from dbo.syscolumns where name = 'TPD_DateEnd' and id = object_id(N'[dbo].[TP_PricesDeleted]'))
	ALTER TABLE [dbo].[TP_PricesDeleted] drop column TPD_DateEnd
GO
/*********************************************************************/
/* end (2014-06-06)_AlterTable_TP_PricesDeleted.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-06-06)_AlterTable_TP_PricesDeleted.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-06-26)_AlterTable_Accmdmtype_AlterColumn_AcMain.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-06-26)_AlterTable_Accmdmtype_AlterColumn_AcMain.sql */
/*********************************************************************/
if exists ( select * from sysindexes where id = object_id(N'[dbo].[Accmdmentype]') and name = N'IX_ACMain' ) 
drop index IX_ACMain on [dbo].[Accmdmentype] 

BEGIN TRY
	update Accmdmentype set AC_MAIN = 0 where AC_MAIN is null
     alter table Accmdmentype alter column ac_main smallint not null
END TRY
BEGIN CATCH
		DECLARE @ErrorSeverity INT;
		DECLARE @ErrorState INT;
		
		SELECT 
			@ErrorSeverity = ERROR_SEVERITY(),
			@ErrorState = ERROR_STATE();
		RAISERROR ('Произошла ошибка при изменении столбца ac_main таблицы Accmdmentype. Обратитесь в техподдержку.',
               @ErrorSeverity,@ErrorState); 
END CATCH

if not exists ( select * from sysindexes where id = object_id(N'[dbo].[Accmdmentype]') and name = N'IX_ACMain' )
CREATE NONCLUSTERED INDEX [IX_ACMain] ON [dbo].[Accmdmentype] 
(
	[AC_MAIN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO







/*********************************************************************/
/* end (2014-06-26)_AlterTable_Accmdmtype_AlterColumn_AcMain.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-06-26)_AlterTable_Accmdmtype_AlterColumn_AcMain.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-07-24)_AlterTable_mwPriceDataTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-07-24)_AlterTable_mwPriceDataTable.sql */
/*********************************************************************/
--<VERSION>9.2.21</VERSION>
--<DATE>2014-07-27</DATE>
-- скрипт удаляет лишние колонки на поисковых таблицах

-- колонки для удаления
declare @columns as ListNvarcharValue

declare @tablename varchar(100), @sql varchar(8000)
declare tableCursor cursor local fast_forward for 
select name 
from sysobjects with(nolock) 
where name like 'mwPriceDataTable%' and xtype = 'u'
open tableCursor

fetch tableCursor into @tablename

-- пройдемся по всем поисковым таблицам
while (@@FETCH_STATUS = 0)
begin
	-- заполним стандартный список колонок
	delete from @columns
	insert into @columns values ('pt_apkeyfrom')
	insert into @columns values ('pt_apkeyto')
	insert into @columns values ('pt_quotadetails')
	insert into @columns values ('pt_quotastatus')
	insert into @columns values ('pt_AccmdType')
	insert into @columns values ('pt_spo')
	insert into @columns values ('pt_tlattribute')
	insert into @columns values ('pt_hash')
	insert into @columns values ('pt_hotelurl')
	insert into @columns values ('pt_toururl')
	insert into @columns values ('pt_acorder')
	insert into @columns values ('pt_rcorder')
	insert into @columns values ('pt_rmorder')
	insert into @columns values ('pt_ctname')
	insert into @columns values ('pt_rsname')
	insert into @columns values ('pt_accode')
	insert into @columns values ('pt_acname')
	insert into @columns values ('pt_rccode')
	insert into @columns values ('pt_rcname')
	insert into @columns values ('pt_rmcode')
	insert into @columns values ('pt_rmname')
	insert into @columns values ('pt_pncode')
	insert into @columns values ('pt_pnname')
	insert into @columns values ('pt_tourname')
	insert into @columns values ('pt_hdname')
	insert into @columns values ('pt_ctkeybackfrom')
	insert into @columns values ('pt_ctkeybackto')

	-- уберем те колонки, которых уже нет в таблице
	delete from @columns
	where not exists (select top 1 1 
					from sys.columns col 
					left join sys.tables tab on col.object_id = tab.object_id 
					where tab.name = @tableName
						and col.name = value)

	if exists (select top 1 1 from @columns)
	begin
		print 'Удаляем колонки, пересоздаем индексы на таблице ' + @tableName + '.'

		-- сгенерируем скрипт для удаления лишних колонок
		declare @dropColumnsScript as nvarchar(max)
		set @dropColumnsScript = ''
		select @dropColumnsScript = @dropColumnsScript + '
			IF exists (select 1 from dbo.syscolumns where name = ''' + value + ''' and id = object_id(N''[dbo].[' + @tablename + ']''))
			begin
				alter table ' + @tablename + ' drop column ' + value + '
			end'
		from @columns
		
		-- пересоздадим зависимые от выбранных колонок индексы, попутно удалив колонки
		exec RecreateDependentObjects @tableName, @columns, @dropColumnsScript, 1, 0

		-- обновим зависимые представления
		declare @viewName varchar(50)
		set @viewName = REPLACE(@tableName,'mwPriceDataTable','mwPriceTable')

		begin try
			set @sql = 'refreshviewforall ''' + @viewName + ''''
			exec (@sql)
		end try
		begin catch
			
			print 'Внимание!'
			print 'Одно из представлений (views) для таблицы ' + @tableName + ' на Вашей базе данных отличается от стандартного. Невозможно обновить его стандартным способом. Представления для этой таблицы будут пересозданы. '

			if (@@trancount > 0)
			begin
				-- откатим неудачную транзакцию
				rollback transaction
			end

			-- при обновлении произошла ошибка, поэтому попробуем пересоздать представления
			DECLARE @UserName varchar(128)
			DECLARE @UserID smallint
			DECLARE @ViewFullName varchar(128)

			DECLARE curSelectUser CURSOR FOR SELECT UID, Name FROM SYSUsers ORDER BY UID
			OPEN curSelectUser

			FETCH NEXT FROM curSelectUser INTO @UserID, @UserName

			WHILE @@FETCH_STATUS = 0
			BEGIN
				IF EXISTS (select 1 from sysviews where name = @ViewName and creator = @UserName)
				BEGIN
					SET @ViewFullName = @UserName + '.' + @ViewName
					if OBJECT_ID(@ViewFullName) is not null
					begin
						begin transaction recreateView

						set @sql = 'drop view @ViewFullName'
						set @sql = replace (@sql, '@ViewFullName', @ViewFullName)
						exec (@sql)
						
						set @sql = 'create view @ViewFullName as select * from @tableName with(nolock) where pt_isenabled > 0 and pt_tourvalid >= getdate()'
						set @sql = replace (@sql, '@ViewFullName', @ViewFullName)
						set @sql = replace (@sql, '@tableName', @tableName)
						exec (@sql)

						set @sql = 'grant select on @ViewFullName to public'
						set @sql = replace (@sql, '@ViewFullName', @ViewFullName)
						exec (@sql)
						
						commit transaction recreateView
					end
				END

				FETCH NEXT FROM curSelectUser INTO @UserID, @UserName
			END

			CLOSE curSelectUser
			DEALLOCATE curSelectUser

			print 'Представления (views) ' + @tableName + ' были успешно пересозданы. Обратитесь к системному администратору для восстановления индивидуальных параметров данных представлений.'
			print '---------------------------------------------------'
		end catch
	end

	fetch tableCursor into @tablename
end

close tableCursor
deallocate tableCursor
GO
/*********************************************************************/
/* end (2014-07-24)_AlterTable_mwPriceDataTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-07-24)_AlterTable_mwPriceDataTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-01)_X_SVKEY_TRKEY_TurService.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-09-01)_X_SVKEY_TRKEY_TurService.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TurService]') AND name = N'X_SVKEY_TRKEY')
	DROP INDEX [X_SVKEY_TRKEY] ON [dbo].[TurService] WITH ( ONLINE = OFF )
GO

CREATE NONCLUSTERED INDEX [X_SVKEY_TRKEY] ON [dbo].[TurService]
(
	[TS_SVKEY] ASC,
	[TS_TRKEY] ASC
)
INCLUDE
(
	TS_PKKey,
	TS_CTKey,
	TS_SubCode2
)
WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
GO
/*********************************************************************/
/* end (2014-09-01)_X_SVKEY_TRKEY_TurService.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-09-01)_X_SVKEY_TRKEY_TurService.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-11-26)_Create_Debug_Indexes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-11-26)_Create_Debug_Indexes.sql */
/*********************************************************************/
if not exists (select * from syscolumns where name='db_key' and id=object_id('dbo.Debug'))
begin
	alter table dbo.Debug add db_key int not null identity(1,1) primary key
end
go

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[Debug]') AND name = N'IX_MarginMigrate')
begin
	CREATE NONCLUSTERED INDEX [IX_MarginMigrate]
	ON [dbo].[Debug] ([db_Mod])
	INCLUDE ([db_n1])
end
GO

/*********************************************************************/
/* end (2014-11-26)_Create_Debug_Indexes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-11-26)_Create_Debug_Indexes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-12-17)_AlterTableTPServiceLists_BigInt.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-12-17)_AlterTableTPServiceLists_BigInt.sql */
/*********************************************************************/

if exists(SELECT 1 FROM information_schema.COLUMNS WHERE TABLE_NAME='TP_ServiceLists' AND COLUMN_NAME='TL_Key' AND DATA_TYPE = 'int')
begin
	ALTER TABLE TP_ServiceLists drop CONSTRAINT [PK_TP_ServiceLists]
	ALTER TABLE TP_ServiceLists ALTER COLUMN TL_Key bigint
	ALTER TABLE TP_ServiceLists ADD CONSTRAINT [PK_TP_ServiceLists] PRIMARY KEY CLUSTERED ( [TL_Key] ASC )
end
GO
/*********************************************************************/
/* end (2014-12-17)_AlterTableTPServiceLists_BigInt.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-12-17)_AlterTableTPServiceLists_BigInt.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-9-26)_Update_SystemSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014-9-26)_Update_SystemSettings.sql */
/*********************************************************************/
go
update systemsettings
set ss_parmvalue = 1
where ss_parmname = 'signDogovorsPayInfo'
go
/*********************************************************************/
/* end (2014-9-26)_Update_SystemSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014-9-26)_Update_SystemSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.01.14)_Add_Column_PD_Signature.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.01.14)_Add_Column_PD_Signature.sql */
/*********************************************************************/
--<VERSION>9.2.21</VERSION>
--<DATE>2014-01-14</DATE>
if not exists (select 1 from dbo.syscolumns where name = 'PD_Signature' and id = object_id(N'[dbo].[PaymentDetails]'))
	alter table dbo.PaymentDetails add PD_Signature varbinary(max)
go
/*********************************************************************/
/* end (2014.01.14)_Add_Column_PD_Signature.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.01.14)_Add_Column_PD_Signature.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.02.25)_Create_Table_CheckPluginVersionExclusion.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.02.25)_Create_Table_CheckPluginVersionExclusion.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT TOP 1 1 FROM SYS.TABLES WHERE NAME = 'CheckPluginVersionExclusions')
BEGIN
	CREATE TABLE [dbo].[CheckPluginVersionExclusions](
		[CPV_Key] [int] IDENTITY(1,1) NOT NULL,
		[CPV_PluginName] [nvarchar](150) NOT NULL,
	 CONSTRAINT [PK_CheckPluginVersionExclusions] PRIMARY KEY CLUSTERED 
	(
		[CPV_Key] ASC
	)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
	) ON [PRIMARY]
END

GRANT SELECT, INSERT, UPDATE, DELETE ON [dbo].[CheckPluginVersionExclusions] TO PUBLIC

GO
/*********************************************************************/
/* end (2014.02.25)_Create_Table_CheckPluginVersionExclusion.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.02.25)_Create_Table_CheckPluginVersionExclusion.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.08)_AlterTable_HistoryCost.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.05.08)_AlterTable_HistoryCost.sql */
/*********************************************************************/
if not exists (select 1 from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA = 'dbo' and COLUMNPROPERTY(object_id(TABLE_NAME), COLUMN_NAME, 'IsIdentity') = 1 and TABLE_NAME = 'HistoryCost')
begin
	if exists (select ind.name, * from sys.indexes ind
				left join sys.tables tab on ind.object_id = tab.object_id
				where tab.name = 'HistoryCost'
					and ind.name = 'IX_HistoryCost')
	begin
		DROP INDEX IX_HistoryCost ON dbo.HistoryCost
	end

	alter table HistoryCost drop column HC_Key

	alter table HistoryCost add HC_Key int not null identity(1, 1)

	CREATE UNIQUE CLUSTERED INDEX [IX_HistoryCost] ON [dbo].[HistoryCost] ([HC_Key] ASC)

end
GO
/*********************************************************************/
/* end (2014.05.08)_AlterTable_HistoryCost.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.08)_AlterTable_HistoryCost.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.19)_Insert_Actions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.05.19)_Insert_Actions.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 150) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (150, 'Скрыть колонку -> "Полная стоимость путевки"', 'Скрывать колонку "Полная стоимость путевки"', 'Hide columns -> "Dogovor total price"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 151) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (151, 'Скрыть колонку -> "Стоимость в национальной валюте"', 'Скрывать колонку "Стоимость в национальной валюте"', 'Hide columns -> "National price"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 152) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (152, 'Скрыть колонку -> "Оплата в национальной валюте"', 'Скрывать колонку "Оплата в национальной валюте"', 'Hide columns -> "Payment in national price"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 153) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (153, 'Скрыть колонку -> "Стоимость за вычетом скидки"', 'Скрывать колонку "Стоимость за вычетом скидки"', 'Hide columns -> "Price without discount"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 154) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (154, 'Скрыть колонку -> "Сумма к оплате"', 'Скрывать колонку "Сумма к оплате"', 'Hide columns -> "Payment amount"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 155) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (155, 'Скрыть колонку -> "Скидка на 1 человека"', 'Скрывать колонку "Скидка на одного человека"', 'Hide columns -> "Discount per person"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 156) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (156, 'Скрыть колонку -> "Оплата"', 'Скрывать колонку "Оплата"', 'Hide columns -> "Payment"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 157) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (157, 'Скрыть колонку -> "Нетто планируемое"', 'Скрывать колонку "Нетто планируемое"', 'Hide columns -> "Net planned"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 158) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (158, 'Скрыть колонку -> "Нетто по платежам партнеру"', 'Скрывать колонку "Нетто по платежам партнеру"', 'Hide columns -> "Net on payed to partner"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 159) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (159, 'Скрыть колонку -> "Нетто реальное"', 'Скрывать колонку "Нетто реальное"', 'Hide columns -> "Net real"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 160) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (160, 'Скрыть колонку -> "Прибыль планируемая"', 'Скрывать колонку "Прибыль планируемая"', 'Hide columns -> "Profit planned"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 161) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (161, 'Скрыть колонку -> "Прибыль планируемая %"', 'Скрывать колонку "Прибыль планируемая %"', 'Hide columns -> "Profit planned %"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 162) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (162, 'Скрыть колонку -> "Прибыль реальная"', 'Скрывать колонку "Прибыль реальная"', 'Hide columns -> "Profit real"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 163) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (163, 'Скрыть строку итогов экрана "Работа менеджеров"', 'Скрыть строку итогов экрана "Работа менеджеров"', 'Hide summary table', 1)
END
GO
/*********************************************************************/
/* end (2014.05.19)_Insert_Actions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.05.19)_Insert_Actions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.03)_Insert_ObjectAliases.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.03)_Insert_ObjectAliases.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310001)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310001, 'PaymentSystemQiwi', 'Платежная система QIWI', 63)
END
GO


IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310002)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310002, 'PaymentSystemLeader', 'Платежная система Leader', 63)
END
GO


IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310003)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310003, 'PaymentSystemTourPay', 'Платежная система TourPay', 63)
END
GO


IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310004)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310004, 'PaymentSystemPaytravel', 'Платежная система Paytravel', 63)
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310005)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310005, 'PaymentSystemPayonline', 'Платежная система Payonline', 63)
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310006)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310006, 'PaymentSystemAssist', 'Платежная система Assist', 63)
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310007)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310007, 'PaymentSystemChronopay', 'Платежная система Chronopay', 63)
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 310008)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID)
	VALUES (310008, 'PaymentSystemEpay', 'Платежная система Epay', 63)
END
GO
/*********************************************************************/
/* end (2014.06.03)_Insert_ObjectAliases.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.03)_Insert_ObjectAliases.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.03)_sp_RecalculatePriceListScheduler.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.03)_sp_RecalculatePriceListScheduler.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RecalculatePriceListScheduler]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[RecalculatePriceListScheduler]
GO

CREATE PROCEDURE [dbo].[RecalculatePriceListScheduler]
AS
--<DATE>2014-10-15</DATE>
---<VERSION>9.2.21.15</VERSION>
BEGIN

	declare @cpkey int
	declare @priceTOKey int
	declare @saleDate datetime
	declare @nullCostAsZero smallint
	declare @noFlight smallint
	declare @useHolidayRule smallint
	declare @isSellPeriodEnabled varchar(10)
	
	select top 1 @isSellPeriodEnabled=ISNULL(ss_parmValue,'0') from SystemSettings where SS_ParmName='SYSUseSellPeriod'

	begin tran
		select top 1 @cpkey = CP_Key 
		from CalculatingPriceLists WITH (XLOCK,ROWLOCK) 
		where CP_StartTime is not null and (CP_Update = 0 and CP_Status = 3 and CP_StartTime<=GETDATE()) order by CP_StartTime asc
		UPDATE CalculatingPriceLists Set CP_Status=1 where CP_Key=@cpkey
	commit tran
	if (@cpkey is not null)
	begin
		select @priceTOKey = CP_PriceTourKey, @saleDate = (case @isSellPeriodEnabled when '1' then CP_SaleDate else null end),
			 @nullCostAsZero = CP_NullCostAsZero, @noFlight = CP_NoFlight, @useHolidayRule = CP_UseHolidayRule
		from CalculatingPriceLists where CP_Key = @cpkey
		begin try
			exec CalculatePriceList @priceTOKey, @cpkey, @saleDate, @nullCostAsZero, @noFlight, 0, @useHolidayRule
		end try
		begin catch
			UPDATE CalculatingPriceLists with (rowlock) set CP_Status=2 where CP_Key=@cpkey
			--логируем ошибку
			DECLARE @ErrorMessage varchar(500)
			SELECT @ErrorMessage = ERROR_MESSAGE()
			EXEC dbo.InsHistory '', null, 11, @priceTOKey, 'ERR', @ErrorMessage, 'Ошибка при расчете тура', 0, ''
		end catch
	end

	-- проверяем расчеты, которые завершились с ошибкой
	DECLARE @ErrorHours int = 4, @CP_Key int

	DECLARE calc_cursor CURSOR FOR 
	SELECT	cp.CP_Key FROM dbo.CalculatingPriceLists cp
	JOIN dbo.TP_Tours tp ON cp.CP_TourKey = tp.TO_TRKey
	WHERE (cp.CP_Status = 1 OR cp.CP_StartTime IS NOT NULL) 
	AND tp.TO_PROGRESS != 100 and DATEDIFF(HOUR, tp.TO_UPDATETIME, GETDATE()) >= @ErrorHours
	ORDER BY cp.CP_StartTime ASC

	OPEN calc_cursor
	FETCH NEXT FROM calc_cursor 
	INTO @CP_Key

	WHILE @@FETCH_STATUS = 0
	BEGIN 
		if @CP_Key is NOT NULL
		BEGIN
			UPDATE dbo.CalculatingPriceLists
			SET CP_Status = 2 -- ошибка расчета
			WHERE CP_Key = @CP_Key
		END
	FETCH NEXT FROM calc_cursor
	INTO @CP_Key
	END
 
	CLOSE calc_cursor;
	DEALLOCATE calc_cursor;

END
GO

GRANT EXEC ON [dbo].[RecalculatePriceListScheduler] TO PUBLIC
GO
/*********************************************************************/
/* end (2014.06.03)_sp_RecalculatePriceListScheduler.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.03)_sp_RecalculatePriceListScheduler.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.23)_Enable_Change_Tracking.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.23)_Enable_Change_Tracking.sql */
/*********************************************************************/
-- включение слежения за изменениями на уровне БД
if not exists (select top 1 1 from sys.change_tracking_databases where database_id = DB_ID())
begin
	declare @sql nvarchar(max)
	set @sql = 'ALTER DATABASE [' + DB_NAME() + '] SET CHANGE_TRACKING = ON (CHANGE_RETENTION = 2 DAYS, AUTO_CLEANUP = ON)'	
	exec (@sql)
end
go

-- включение слежения за изменениями на уровне таблицы
if not exists (select top 1 1 from  sys.change_tracking_tables where object_id = OBJECT_ID('tbl_Costs'))
begin
	ALTER TABLE tbl_Costs ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
end
go
grant view change tracking on tbl_costs to public
go
if not exists (select top 1 1 from  sys.change_tracking_tables where object_id = OBJECT_ID('tbl_TurList'))
begin
	ALTER TABLE tbl_TurList ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
end
go
grant view change tracking on tbl_TurList to public
go
if not exists (select top 1 1 from  sys.change_tracking_tables where object_id = OBJECT_ID('TurService'))
begin
	ALTER TABLE TurService ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
end
go
grant view change tracking on TurService to public
go
if not exists (select top 1 1 from  sys.change_tracking_tables where object_id = OBJECT_ID('tbl_Country'))
begin
	ALTER TABLE tbl_Country ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
end
go
grant view change tracking on tbl_Country to public
go
if not exists (select top 1 1 from  sys.change_tracking_tables where object_id = OBJECT_ID('CityDictionary'))
begin
	ALTER TABLE CityDictionary ENABLE CHANGE_TRACKING WITH (TRACK_COLUMNS_UPDATED = ON)
end
go
grant view change tracking on CityDictionary to public
go
/*********************************************************************/
/* end (2014.06.23)_Enable_Change_Tracking.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.23)_Enable_Change_Tracking.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.30)_Insert_Actions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.06.30)_Insert_Actions.sql */
/*********************************************************************/
--добавление action Разрешить обновлять договора по заказам

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 164) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (164, 'Работа менеджеров -> Разрешить обновлять договора по заказам', 'Разрешить обновлять договора по заказам', 'Reservation list -> Allow update partner dogovors for orders', 0)
END
GO

/*********************************************************************/
/* end (2014.06.30)_Insert_Actions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.06.30)_Insert_Actions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.07.02)_Insert_ObjectTypes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.07.02)_Insert_ObjectTypes.sql */
/*********************************************************************/

IF NOT EXISTS (SELECT 1 FROM ObjectTypes WHERE OT_ID = 1002 AND OT_CODE = 'FilialsGroup')
	INSERT INTO ObjectTypes	VALUES (1002, 'FilialsGroup', 'Группа филиалов', 'Filials Group', 'Группа филиалов, которые выделенны в систему бронирования')
GO

/*********************************************************************/
/* end (2014.07.02)_Insert_ObjectTypes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.07.02)_Insert_ObjectTypes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.06)_Create_Table_PublicOfferSigns.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.06)_Create_Table_PublicOfferSigns.sql */
/*********************************************************************/
--<DATE>2014-08-07</DATE>
--<VERSION>9.2.20.18</VERSION>
--<SUMMARY>Таблица подтверждения ознакомления с публичной офертой</SUMMARY>

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_PublicOfferSigns_DupUsers]') AND parent_object_id = OBJECT_ID(N'[dbo].[PublicOfferSigns]'))
    ALTER TABLE [dbo].[PublicOfferSigns] DROP CONSTRAINT [FK_PublicOfferSigns_DupUsers]
GO

IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PublicOfferSigns]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[PublicOfferSigns](
	[POS_Id] [int] IDENTITY(1,1) NOT NULL,
	[POS_DupUserId] [int] NOT NULL,	
	[POS_Date] [datetime2] NOT NULL DEFAULT (getdate()),
	[POS_BranchesGroupId] [int] NULL
    
	CONSTRAINT [PK_PublicOfferSigns] PRIMARY KEY CLUSTERED 
    (
	    [POS_Id] ASC
    )
	WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

) ON [PRIMARY]
END

GRANT SELECT, INSERT, UPDATE, DELETE ON [dbo].[PublicOfferSigns] TO PUBLIC
GO

ALTER TABLE [dbo].[PublicOfferSigns] WITH CHECK ADD CONSTRAINT [FK_PublicOfferSigns_DupUsers] FOREIGN KEY([POS_DupUserId])
REFERENCES [dbo].[DUP_USER] ([US_Key])
GO

ALTER TABLE [dbo].[PublicOfferSigns] CHECK CONSTRAINT [FK_PublicOfferSigns_DupUsers]
GO
/*********************************************************************/
/* end (2014.08.06)_Create_Table_PublicOfferSigns.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.06)_Create_Table_PublicOfferSigns.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePax.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwPriceTablePax.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwPriceTablePax')
	drop view dbo.mwPriceTablePax
GO

Create view [dbo].[mwPriceTablePax] as
SELECT     dbo.mwPriceDataTable.pt_mainplaces, dbo.mwPriceDataTable.pt_addplaces, dbo.mwPriceDataTable.pt_main, dbo.mwPriceDataTable.pt_tourvalid, 
                      dbo.mwPriceDataTable.pt_tourcreated, dbo.mwPriceDataTable.pt_tourdate, dbo.mwPriceDataTable.pt_days, dbo.mwPriceDataTable.pt_nights, 
                      dbo.mwPriceDataTable.pt_cnkey, dbo.mwPriceDataTable.pt_ctkeyfrom, ti_apkeyfrom as pt_apkeyfrom, dbo.mwPriceDataTable.pt_ctkeyto, 
                      ti_apkeyto as pt_apkeyto, dbo.mwPriceDataTable.pt_tourkey, 
                      dbo.mwPriceDataTable.pt_tourtype, dbo.mwPriceDataTable.pt_tlkey, dbo.mwPriceDataTable.pt_pricelistkey, dbo.mwPriceDataTable.pt_pricekey, 
                      dbo.mwPriceDataTable.pt_price, dbo.mwPriceDataTable.pt_hdkey, dbo.mwPriceDataTable.pt_hdpartnerkey, dbo.mwPriceDataTable.pt_rskey, 
                      dbo.mwPriceDataTable.pt_ctkey, dbo.mwPriceDataTable.pt_hdstars, dbo.mwPriceDataTable.pt_pnkey, dbo.mwPriceDataTable.pt_hrkey, 
                      dbo.mwPriceDataTable.pt_rmkey, dbo.mwPriceDataTable.pt_rckey, dbo.mwPriceDataTable.pt_ackey, dbo.mwPriceDataTable.pt_childagefrom, 
                      dbo.mwPriceDataTable.pt_childageto, dbo.mwPriceDataTable.pt_childagefrom2, dbo.mwPriceDataTable.pt_childageto2, hd_name as pt_hdname, 
                      dbo.TP_Tours.TO_Name AS pt_tourname, pn_name, pn_code as pt_pncode, rm_name as pt_rmname, 
                      rm_code as pt_rmcode, RC_NAME as pt_rcname, rc_code as pt_rccode, ac_name as pt_acname, 
                      ac_code as pt_accode, rs_name as pt_rsname, ct_name as pt_ctname, rm_order as pt_rmorder, 
                      rc_order as pt_rcorder, ac_order as pt_acorder, dbo.mwPriceDataTable.pt_rate, TL_WEB as pt_toururl, 
                      hd_http as pt_hotelUrl, dbo.mwPriceDataTable.pt_isenabled, dbo.mwPriceDataTable.pt_chkey, dbo.mwPriceDataTable.pt_chbackkey, 
                      dbo.mwPriceDataTable.pt_hdday, dbo.mwPriceDataTable.pt_hdnights, dbo.mwPriceDataTable.pt_chday, dbo.mwPriceDataTable.pt_chpkkey, 
                      dbo.mwPriceDataTable.pt_chprkey, dbo.mwPriceDataTable.pt_chbackday, dbo.mwPriceDataTable.pt_chbackpkkey, dbo.mwPriceDataTable.pt_chbackprkey, 
                      dbo.mwPriceDataTable.pt_hotelkeys, dbo.mwPriceDataTable.pt_hotelroomkeys, dbo.mwPriceDataTable.pt_hotelstars, dbo.mwPriceDataTable.pt_pansionkeys, 
                      dbo.mwPriceDataTable.pt_hotelnights, dbo.mwPriceDataTable.pt_key, dbo.mwPriceDataTable.pt_chdirectkeys, dbo.mwPriceDataTable.pt_chbackkeys, 
                      dbo.mwPriceDataTable.pt_topricefor, dbo.mwPriceDataTable.pt_hddetails, tl_attribute as pt_tlattribute, dbo.mwPriceDataTable.pt_autodisabled, dbo.mwPriceDataTable.pt_directFlightAttribute, 
                      dbo.mwPriceDataTable.pt_backFlightAttribute, (CASE WHEN (pt_rmkey = 1 OR
                      pt_rmkey = 2) THEN 0 ELSE pt_rmkey END) AS pt_PaxRoomType
FROM         dbo.mwPriceDataTable WITH (nolock)
INNER JOIN TP_Lists WITH(nolock) on pt_pricelistkey=Ti_Key
INNER JOIN dbo.TP_Tours WITH(nolock) ON dbo.TP_Tours.TO_Key = dbo.mwPriceDataTable.pt_tourkey
INNER JOIN dbo.TurList WITH(NOLOCK) ON TO_TRKEY=TL_KEY
INNER JOIN HotelDictionary WITH(NOLOCK) ON pt_hdkey=hd_key
INNER JOIN Accmdmentype WITH(NOLOCK) ON pt_ackey=ac_key
INNER JOIN RoomsCategory WITH(NOLOCK) ON pt_rckey=rc_key
INNER JOIN Rooms WITH(NOLOCK) ON rm_key=pt_rmkey
INNER JOIN Resorts WITH(NOLOCK) ON rs_key=ISNULL(pt_rskey,-1)
INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY=PT_PNKEY
INNER JOIN CityDictionary WITH(NOLOCK) ON CT_KEY=pt_ctkey
WHERE     (dbo.mwPriceDataTable.pt_isenabled > 0)

GO

grant select on dbo.mwPriceTablePax to public
GO

refreshviewforall 'mwPriceTablePax'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwPriceTablePax.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePax.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePaxViewAsc.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwPriceTablePaxViewAsc.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwPriceTablePaxViewAsc')
	drop view dbo.mwPriceTablePaxViewAsc
GO

Create view [dbo].[mwPriceTablePaxViewAsc] as
SELECT	
		max(t1.pt_ctkey)	pt_ctkey,
		max(ct_name)		pt_ctname,
		t1.pt_hdkey			pt_hdkey,
		max(hd_name)		pt_hdname,
		max(t1.pt_hdstars)	pt_hdstars,
		t1.pt_pnkey			pt_pnkey,
		max(pn_code)		pt_pncode,
		max(t1.pt_rate)		pt_rate,
		max(t1.pt_rmkey)	pt_rmkey,
		max(rm_name)		pt_rmname,
		t1.pt_rckey			pt_rckey,
		max(rc_name)		pt_rcname,
		t1.pt_tourdate,
		t1.pt_cnkey,
		t1.pt_ctkeyfrom,
		t1.pt_tourtype,

		MIN(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE 999999999 END) p_2_1_DBL,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_DBL,
		MIN(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE 999999999 END) p_2_1_SGL,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_SGL,
		MIN(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE 999999999 END) p_2_1_EXB,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_EXB,
		MIN(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE 999999999 END) p_2_1_CHD,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_CHD,

		MIN(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_3_2_DBL,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_DBL,
		MIN(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_3_2_SGL,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_SGL,
		MIN(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_3_2_EXB,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_EXB,
		MIN(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_3_2_CHD,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_CHD,

		MIN(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_4_3_DBL,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_DBL,
		MIN(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_4_3_SGL,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_SGL,
		MIN(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_4_3_EXB,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_EXB,
		MIN(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_4_3_CHD,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_CHD,

		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_5_2_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_DBL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_5_2_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_SGL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_5_2_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_EXB,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_5_2_CHD,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_CHD,

		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_5_3_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_DBL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_5_3_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_SGL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_5_3_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_EXB,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_5_3_CHD,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_CHD,

		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_5_4_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_DBL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_5_4_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_SGL,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_5_4_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_EXB,
		MIN(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_5_4_CHD,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_CHD,

		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_6_2_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_DBL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_6_2_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_SGL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_6_2_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_EXB,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE 999999999 END) p_6_2_CHD,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_CHD,

		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_6_3_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_DBL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_6_3_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_SGL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_6_3_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_EXB,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_6_3_CHD,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_CHD,

		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_6_4_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_DBL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_6_4_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_SGL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_6_4_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_EXB,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_6_4_CHD,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_CHD,

		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_6_5_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_DBL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_6_5_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_SGL,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_6_5_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_EXB,
		MIN(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_6_5_CHD,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_CHD,

		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_7_3_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_DBL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_7_3_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_SGL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_7_3_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_EXB,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_7_3_CHD,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_CHD,

		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_7_4_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_DBL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_7_4_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_SGL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_7_4_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_EXB,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_7_4_CHD,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_CHD,

		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_7_5_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_DBL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_7_5_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_SGL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_7_5_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_EXB,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_7_5_CHD,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_CHD,

		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_7_6_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_DBL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_7_6_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_SGL,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_7_6_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_EXB,
		MIN(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_7_6_CHD,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_CHD,

		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_8_3_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_DBL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_8_3_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_SGL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_8_3_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_EXB,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE 999999999 END) p_8_3_CHD,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_CHD,

		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_8_4_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_DBL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_8_4_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_SGL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_8_4_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_EXB,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_8_4_CHD,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_CHD,

		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_8_5_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_DBL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_8_5_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_SGL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_8_5_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_EXB,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_8_5_CHD,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_CHD,

		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_8_6_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_DBL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_8_6_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_SGL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_8_6_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_EXB,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_8_6_CHD,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_CHD,

		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_8_7_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_DBL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_8_7_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_SGL,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_8_7_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_EXB,
		MIN(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_8_7_CHD,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_CHD,

		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_9_4_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_DBL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_9_4_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_SGL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_9_4_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_EXB,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE 999999999 END) p_9_4_CHD,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_CHD,

		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_9_5_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_DBL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_9_5_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_SGL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_9_5_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_EXB,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_9_5_CHD,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_CHD,

		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_9_6_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_DBL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_9_6_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_SGL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_9_6_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_EXB,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_9_6_CHD,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_CHD,

		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_9_7_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_DBL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_9_7_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_SGL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_9_7_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_EXB,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_9_7_CHD,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_CHD,

		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_9_8_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_DBL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_9_8_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_SGL,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_9_8_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_EXB,
		MIN(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_9_8_CHD,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_CHD,

		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_10_5_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_DBL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_10_5_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_SGL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_10_5_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_EXB,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE 999999999 END) p_10_5_CHD,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_CHD,

		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_10_6_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_DBL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_10_6_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_SGL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_10_6_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_EXB,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_10_6_CHD,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_CHD,

		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_10_7_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_DBL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_10_7_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_SGL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_10_7_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_EXB,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_10_7_CHD,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_CHD,

		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_10_8_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_DBL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_10_8_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_SGL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_10_8_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_EXB,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_10_8_CHD,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_CHD,

		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_10_9_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_DBL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_10_9_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_SGL,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_10_9_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_EXB,
		MIN(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_10_9_CHD,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_CHD,

		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_11_6_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_DBL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_11_6_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_SGL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_11_6_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_EXB,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE 999999999 END) p_11_6_CHD,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_CHD,

		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_11_7_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_DBL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_11_7_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_SGL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_11_7_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_EXB,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_11_7_CHD,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_CHD,

		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_11_8_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_DBL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_11_8_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_SGL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_11_8_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_EXB,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_11_8_CHD,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_CHD,

		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_11_9_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_DBL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_11_9_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_SGL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_11_9_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_EXB,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_11_9_CHD,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_CHD,

		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_11_10_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_DBL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_11_10_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_SGL,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_11_10_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_EXB,
		MIN(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_11_10_CHD,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_CHD,

		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_12_7_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_DBL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_12_7_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_SGL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_12_7_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_EXB,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE 999999999 END) p_12_7_CHD,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_CHD,

		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_12_8_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_DBL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_12_8_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_SGL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_12_8_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_EXB,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_12_8_CHD,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_CHD,

		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_12_9_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_DBL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_12_9_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_SGL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_12_9_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_EXB,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_12_9_CHD,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_CHD,

		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_12_10_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_DBL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_12_10_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_SGL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_12_10_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_EXB,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_12_10_CHD,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_CHD,

		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_12_11_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_DBL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_12_11_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_SGL,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_12_11_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_EXB,
		MIN(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_12_11_CHD,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_CHD,

		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_13_8_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_DBL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_13_8_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_SGL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_13_8_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_EXB,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE 999999999 END) p_13_8_CHD,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_CHD,

		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_13_9_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_DBL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_13_9_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_SGL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_13_9_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_EXB,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_13_9_CHD,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_CHD,

		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_13_10_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_DBL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_13_10_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_SGL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_13_10_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_EXB,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_13_10_CHD,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_CHD,

		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_13_11_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_DBL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_13_11_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_SGL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_13_11_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_EXB,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_13_11_CHD,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_CHD,

		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_13_12_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_DBL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_13_12_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_SGL,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_13_12_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_EXB,
		MIN(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_13_12_CHD,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_CHD,

		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_14_9_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_DBL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_14_9_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_SGL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_14_9_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_EXB,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE 999999999 END) p_14_9_CHD,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_CHD,

		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_14_10_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_DBL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_14_10_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_SGL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_14_10_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_EXB,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_14_10_CHD,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_CHD,

		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_14_11_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_DBL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_14_11_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_SGL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_14_11_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_EXB,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_14_11_CHD,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_CHD,

		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_14_12_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_DBL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_14_12_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_SGL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_14_12_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_EXB,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_14_12_CHD,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_CHD,

		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_14_13_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_DBL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_14_13_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_SGL,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_14_13_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_EXB,
		MIN(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_14_13_CHD,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_CHD,

		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_15_10_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_DBL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_15_10_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_SGL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_15_10_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_EXB,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_15_10_CHD,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_CHD,

		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_15_11_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_DBL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_15_11_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_SGL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_15_11_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_EXB,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_15_11_CHD,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_CHD,

		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_15_12_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_DBL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_15_12_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_SGL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_15_12_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_EXB,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_15_12_CHD,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_CHD,

		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_15_13_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_DBL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_15_13_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_SGL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_15_13_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_EXB,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_15_13_CHD,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_CHD,

		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_15_14_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_DBL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_15_14_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_SGL,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_15_14_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_EXB,
		MIN(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_15_14_CHD,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_16_10_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_16_10_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_16_10_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE 999999999 END) p_16_10_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_16_11_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_16_11_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_16_11_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE 999999999 END) p_16_11_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_16_12_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_16_12_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_16_12_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_16_12_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_16_13_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_16_13_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_16_13_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_16_13_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_16_14_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_16_14_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_16_14_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_16_14_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_CHD,

		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_16_15_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_DBL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_16_15_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_SGL,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_16_15_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_EXB,
		MIN(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_16_15_CHD,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_CHD,

		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_17_12_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_DBL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_17_12_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_SGL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_17_12_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_EXB,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE 999999999 END) p_17_12_CHD,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_CHD,

		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_17_13_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_DBL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_17_13_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_SGL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_17_13_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_EXB,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_17_13_CHD,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_CHD,

		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_17_14_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_DBL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_17_14_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_SGL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_17_14_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_EXB,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_17_14_CHD,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_CHD,

		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_17_15_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_DBL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_17_15_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_SGL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_17_15_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_EXB,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_17_15_CHD,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_CHD,

		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_17_16_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_DBL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_17_16_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_SGL,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_17_16_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_EXB,
		MIN(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_17_16_CHD,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_CHD,

		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_18_13_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_DBL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_18_13_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_SGL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_18_13_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_EXB,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE 999999999 END) p_18_13_CHD,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_CHD,

		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_18_14_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_DBL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_18_14_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_SGL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_18_14_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_EXB,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_18_14_CHD,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_CHD,

		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_18_15_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_DBL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_18_15_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_SGL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_18_15_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_EXB,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_18_15_CHD,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_CHD,

		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_18_16_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_DBL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_18_16_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_SGL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_18_16_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_EXB,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_18_16_CHD,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_CHD,

		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_18_17_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_DBL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_18_17_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_SGL,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_18_17_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_EXB,
		MIN(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_18_17_CHD,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_CHD,

		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_19_14_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_DBL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_19_14_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_SGL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_19_14_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_EXB,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE 999999999 END) p_19_14_CHD,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_CHD,		

		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_19_15_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_DBL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_19_15_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_SGL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_19_15_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_EXB,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_19_15_CHD,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_CHD,

		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_19_16_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_DBL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_19_16_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_SGL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_19_16_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_EXB,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_19_16_CHD,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_CHD,

		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_19_17_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_DBL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_19_17_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_SGL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_19_17_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_EXB,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_19_17_CHD,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_CHD,

		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_19_18_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_DBL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_19_18_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_SGL,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_19_18_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_EXB,
		MIN(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_19_18_CHD,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_CHD,

		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_20_15_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_DBL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_20_15_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_SGL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_20_15_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_EXB,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE 999999999 END) p_20_15_CHD,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_CHD,

		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_20_16_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_DBL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_20_16_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_SGL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_20_16_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_EXB,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_20_16_CHD,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_CHD,

		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_20_17_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_DBL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_20_17_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_SGL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_20_17_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_EXB,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_20_17_CHD,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_CHD,

		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_20_18_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_DBL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_20_18_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_SGL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_20_18_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_EXB,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_20_18_CHD,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_CHD,

		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_20_19_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_DBL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_20_19_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_SGL,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_20_19_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_EXB,
		MIN(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_20_19_CHD,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_CHD,

		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_21_16_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_DBL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_21_16_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_SGL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_21_16_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_EXB,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE 999999999 END) p_21_16_CHD,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_CHD,

		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_21_17_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_DBL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_21_17_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_SGL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_21_17_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_EXB,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_21_17_CHD,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_CHD,

		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_21_18_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_DBL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_21_18_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_SGL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_21_18_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_EXB,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_21_18_CHD,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_CHD,

		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_21_19_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_DBL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_21_19_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_SGL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_21_19_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_EXB,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_21_19_CHD,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_CHD,

		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_21_20_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_DBL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_21_20_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_SGL,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_21_20_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_EXB,
		MIN(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_21_20_CHD,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_CHD,

		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_22_17_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_DBL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_22_17_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_SGL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_22_17_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_EXB,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE 999999999 END) p_22_17_CHD,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_CHD,

		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_22_18_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_DBL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_22_18_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_SGL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_22_18_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_EXB,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_22_18_CHD,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_CHD,

		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_22_19_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_DBL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_22_19_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_SGL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_22_19_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_EXB,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_22_19_CHD,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_CHD,

		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_22_20_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_DBL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_22_20_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_SGL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_22_20_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_EXB,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_22_20_CHD,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_CHD,

		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_22_21_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_DBL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_22_21_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_SGL,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_22_21_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_EXB,
		MIN(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_22_21_CHD,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_CHD,

		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_23_18_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_DBL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_23_18_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_SGL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_23_18_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_EXB,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE 999999999 END) p_23_18_CHD,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_CHD,

		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_23_19_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_DBL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_23_19_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_SGL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_23_19_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_EXB,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_23_19_CHD,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_CHD,

		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_23_20_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_DBL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_23_20_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_SGL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_23_20_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_EXB,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_23_20_CHD,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_CHD,

		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_23_21_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_DBL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_23_21_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_SGL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_23_21_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_EXB,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_23_21_CHD,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_CHD,

		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_23_22_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_DBL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_23_22_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_SGL,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_23_22_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_EXB,
		MIN(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_23_22_CHD,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_CHD,

		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_24_19_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_DBL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_24_19_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_SGL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_24_19_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_EXB,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE 999999999 END) p_24_19_CHD,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_CHD,

		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_24_20_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_DBL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_24_20_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_SGL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_24_20_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_EXB,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_24_20_CHD,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_CHD,

		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_24_21_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_DBL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_24_21_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_SGL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_24_21_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_EXB,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_24_21_CHD,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_CHD,

		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_24_22_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_DBL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_24_22_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_SGL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_24_22_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_EXB,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_24_22_CHD,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_CHD,

		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_24_23_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_DBL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_24_23_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_SGL,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_24_23_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_EXB,
		MIN(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_24_23_CHD,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_CHD,

		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_25_20_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_DBL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_25_20_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_SGL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_25_20_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_EXB,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE 999999999 END) p_25_20_CHD,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_CHD,

		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_25_21_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_DBL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_25_21_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_SGL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_25_21_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_EXB,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_25_21_CHD,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_CHD,

		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_25_22_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_DBL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_25_22_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_SGL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_25_22_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_EXB,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_25_22_CHD,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_CHD,

		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_25_23_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_DBL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_25_23_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_SGL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_25_23_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_EXB,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_25_23_CHD,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_CHD,

		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_25_24_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_DBL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_25_24_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_SGL,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_25_24_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_EXB,
		MIN(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_25_24_CHD,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_CHD,

		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_26_21_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_DBL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_26_21_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_SGL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_26_21_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_EXB,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE 999999999 END) p_26_21_CHD,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_CHD,

		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_26_22_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_DBL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_26_22_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_SGL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_26_22_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_EXB,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE 999999999 END) p_26_22_CHD,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_CHD,

		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_26_23_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_DBL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_26_23_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_SGL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_26_23_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_EXB,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_26_23_CHD,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_CHD,

		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_26_24_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_DBL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_26_24_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_SGL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_26_24_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_EXB,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_26_24_CHD,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_CHD,

		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_26_25_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_DBL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_26_25_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_SGL,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_26_25_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_EXB,
		MIN(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_26_25_CHD,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_CHD,

		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_27_23_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_DBL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_27_23_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_SGL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_27_23_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_EXB,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE 999999999 END) p_27_23_CHD,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_CHD,

		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_27_24_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_DBL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_27_24_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_SGL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_27_24_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_EXB,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_27_24_CHD,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_CHD,

		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_27_25_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_DBL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_27_25_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_SGL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_27_25_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_EXB,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_27_25_CHD,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_CHD,

		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_27_26_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_DBL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_27_26_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_SGL,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_27_26_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_EXB,
		MIN(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_27_26_CHD,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_CHD,

		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_28_24_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_DBL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_28_24_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_SGL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_28_24_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_EXB,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE 999999999 END) p_28_24_CHD,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_CHD,

		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_28_25_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_DBL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_28_25_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_SGL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_28_25_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_EXB,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_28_25_CHD,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_CHD,

		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_28_26_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_DBL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_28_26_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_SGL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_28_26_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_EXB,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_28_26_CHD,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_CHD,

		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_28_27_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_DBL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_28_27_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_SGL,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_28_27_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_EXB,
		MIN(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_28_27_CHD,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_CHD,

		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_29_25_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_DBL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_29_25_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_SGL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_29_25_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_EXB,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE 999999999 END) p_29_25_CHD,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_CHD,

		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_29_26_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_DBL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_29_26_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_SGL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_29_26_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_EXB,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_29_26_CHD,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_CHD,

		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_29_27_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_DBL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_29_27_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_SGL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_29_27_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_EXB,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_29_27_CHD,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_CHD,

		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_29_28_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_DBL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_29_28_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_SGL,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_29_28_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_EXB,
		MIN(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_29_28_CHD,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_CHD,

		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_30_26_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_DBL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_30_26_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_SGL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_30_26_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_EXB,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE 999999999 END) p_30_26_CHD,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_CHD,

		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_30_27_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_DBL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_30_27_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_SGL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_30_27_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_EXB,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE 999999999 END) p_30_27_CHD,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_CHD,

		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_30_28_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_DBL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_30_28_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_SGL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_30_28_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_EXB,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE 999999999 END) p_30_28_CHD,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_CHD,

		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE 999999999 END) p_30_29_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_DBL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE 999999999 END) p_30_29_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_SGL,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE 999999999 END) p_30_29_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_EXB,
		MIN(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE 999999999 END) p_30_29_CHD,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_CHD

FROM	dbo.mwPriceTablePax t1 with(nolock)
INNER JOIN CityDictionary WITH(NOLOCK) ON ct_key=pt_ctkey
INNER JOIN RoomsCategory WITH(NOLOCK) ON RC_KEY=PT_RCKEY
INNER JOIN Rooms WITH(NOLOCK) ON RM_KEY=PT_RMKEY
INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY=PT_PNKEY
INNER JOIN HotelDictionary WITH(NOLOCK) ON HD_KEY=PT_HDKEY
WHERE	
	t1.pt_price <= ALL
	(
		SELECT	pt_price
		FROM	dbo.[mwPriceTablePax] t3 with(nolock)
		WHERE	t1.pt_tourtype	=t3.pt_tourtype 
			AND t1.pt_tourdate	=t3.pt_tourdate 
			AND t1.pt_pnkey		=t3.pt_pnkey 
			AND t1.pt_nights	=t3.pt_nights 
			AND t1.pt_days		=t3.pt_days 
			AND t1.pt_hdkey		=t3.pt_hdkey 
			AND t1.pt_rckey		=t3.pt_rckey 
	)
GROUP BY 
	t1.pt_cnkey,
	t1.pt_ctkeyfrom,
	t1.pt_tourtype, 
	t1.pt_tourdate,
	t1.pt_pnkey,
	t1.pt_hdkey,
	t1.pt_rckey

GO

grant select on dbo.mwPriceTablePaxViewAsc to public
GO

refreshviewforall 'mwPriceTablePaxViewAsc'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwPriceTablePaxViewAsc.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePaxViewAsc.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePaxViewDesc.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwPriceTablePaxViewDesc.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwPriceTablePaxViewDesc')
	drop view dbo.mwPriceTablePaxViewDesc
GO

Create view [dbo].[mwPriceTablePaxViewDesc] as
SELECT	
		max(t1.pt_ctkey)	pt_ctkey,
		max(ct_name)		pt_ctname,
		t1.pt_hdkey			pt_hdkey,
		max(hd_name)		pt_hdname,
		max(t1.pt_hdstars)	pt_hdstars,
		t1.pt_pnkey			pt_pnkey,
		max(pn_code)		pt_pncode,
		max(t1.pt_rate)		pt_rate,
		max(t1.pt_rmkey)	pt_rmkey,
		max(rm_name)		pt_rmname,
		t1.pt_rckey			pt_rckey,
		max(rc_name)		pt_rcname,
		t1.pt_tourdate,
		t1.pt_cnkey,
		t1.pt_ctkeyfrom,
		t1.pt_tourtype,

		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE -999999999 END ) p_2_1_DBL,
		SUM(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_DBL,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE -999999999 END ) p_2_1_SGL,
		SUM(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_SGL,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE -999999999 END ) p_2_1_EXB,
		SUM(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_EXB,
		MAX(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_price ELSE -999999999 END ) p_2_1_CHD,
		SUM(CASE WHEN (t1.pt_days=2 and t1.pt_nights=1) THEN t1.pt_key ELSE 0 END) pk_2_1_CHD,

		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_3_2_DBL,
		SUM(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_DBL,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_3_2_SGL,
		SUM(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_SGL,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_3_2_EXB,
		SUM(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_EXB,
		MAX(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_3_2_CHD,
		SUM(CASE WHEN (t1.pt_days=3 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_3_2_CHD,

		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_4_3_DBL,
		SUM(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_DBL,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_4_3_SGL,
		SUM(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_SGL,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_4_3_EXB,
		SUM(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_EXB,
		MAX(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_4_3_CHD,
		SUM(CASE WHEN (t1.pt_days=4 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_4_3_CHD,

		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_5_2_DBL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_5_2_SGL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_5_2_EXB,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_5_2_CHD,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_5_2_CHD,

		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_5_3_DBL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_5_3_SGL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_5_3_EXB,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_5_3_CHD,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_5_3_CHD,

		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_5_4_DBL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_DBL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_5_4_SGL,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_SGL,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_5_4_EXB,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_EXB,
		MAX(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_5_4_CHD,
		SUM(CASE WHEN (t1.pt_days=5 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_5_4_CHD,

		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_6_2_DBL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_6_2_SGL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_6_2_EXB,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_price ELSE -999999999 END ) p_6_2_CHD,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=2) THEN t1.pt_key ELSE 0 END) pk_6_2_CHD,

		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_6_3_DBL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_6_3_SGL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_6_3_EXB,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_6_3_CHD,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_6_3_CHD,

		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_6_4_DBL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_6_4_SGL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_6_4_EXB,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_6_4_CHD,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_6_4_CHD,

		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_6_5_DBL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_DBL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_6_5_SGL,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_SGL,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_6_5_EXB,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_EXB,
		MAX(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_6_5_CHD,
		SUM(CASE WHEN (t1.pt_days=6 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_6_5_CHD,

		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_7_3_DBL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_7_3_SGL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_7_3_EXB,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_7_3_CHD,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_7_3_CHD,

		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_7_4_DBL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_7_4_SGL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_7_4_EXB,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_7_4_CHD,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_7_4_CHD,

		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_7_5_DBL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_7_5_SGL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_7_5_EXB,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_7_5_CHD,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_7_5_CHD,

		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_7_6_DBL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_DBL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_7_6_SGL,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_SGL,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_7_6_EXB,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_EXB,
		MAX(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_7_6_CHD,
		SUM(CASE WHEN (t1.pt_days=7 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_7_6_CHD,

		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_8_3_DBL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_8_3_SGL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_8_3_EXB,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_price ELSE -999999999 END ) p_8_3_CHD,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=3) THEN t1.pt_key ELSE 0 END) pk_8_3_CHD,

		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_8_4_DBL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_8_4_SGL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_8_4_EXB,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_8_4_CHD,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_8_4_CHD,

		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_8_5_DBL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_8_5_SGL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_8_5_EXB,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_8_5_CHD,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_8_5_CHD,

		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_8_6_DBL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_8_6_SGL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_8_6_EXB,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_8_6_CHD,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_8_6_CHD,

		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_8_7_DBL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_DBL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_8_7_SGL,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_SGL,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_8_7_EXB,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_EXB,
		MAX(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_8_7_CHD,
		SUM(CASE WHEN (t1.pt_days=8 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_8_7_CHD,

		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_9_4_DBL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_9_4_SGL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_9_4_EXB,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_price ELSE -999999999 END ) p_9_4_CHD,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=4) THEN t1.pt_key ELSE 0 END) pk_9_4_CHD,

		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_9_5_DBL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_9_5_SGL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_9_5_EXB,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_9_5_CHD,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_9_5_CHD,

		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_9_6_DBL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_9_6_SGL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_9_6_EXB,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_9_6_CHD,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_9_6_CHD,

		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_9_7_DBL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_9_7_SGL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_9_7_EXB,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_9_7_CHD,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_9_7_CHD,

		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_9_8_DBL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_DBL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_9_8_SGL,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_SGL,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_9_8_EXB,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_EXB,
		MAX(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_9_8_CHD,
		SUM(CASE WHEN (t1.pt_days=9 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_9_8_CHD,

		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_10_5_DBL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_10_5_SGL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_10_5_EXB,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_price ELSE -999999999 END ) p_10_5_CHD,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=5) THEN t1.pt_key ELSE 0 END) pk_10_5_CHD,

		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_10_6_DBL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_10_6_SGL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_10_6_EXB,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_10_6_CHD,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_10_6_CHD,

		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_10_7_DBL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_10_7_SGL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_10_7_EXB,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_10_7_CHD,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_10_7_CHD,

		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_10_8_DBL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_10_8_SGL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_10_8_EXB,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_10_8_CHD,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_10_8_CHD,

		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_10_9_DBL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_DBL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_10_9_SGL,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_SGL,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_10_9_EXB,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_EXB,
		MAX(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_10_9_CHD,
		SUM(CASE WHEN (t1.pt_days=10 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_10_9_CHD,

		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_11_6_DBL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_11_6_SGL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_11_6_EXB,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_price ELSE -999999999 END ) p_11_6_CHD,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=6) THEN t1.pt_key ELSE 0 END) pk_11_6_CHD,

		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_11_7_DBL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_11_7_SGL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_11_7_EXB,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_11_7_CHD,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_11_7_CHD,

		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_11_8_DBL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_11_8_SGL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_11_8_EXB,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_11_8_CHD,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_11_8_CHD,

		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_11_9_DBL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_11_9_SGL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_11_9_EXB,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_11_9_CHD,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_11_9_CHD,

		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_11_10_DBL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_DBL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_11_10_SGL,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_SGL,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_11_10_EXB,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_EXB,
		MAX(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_11_10_CHD,
		SUM(CASE WHEN (t1.pt_days=11 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_11_10_CHD,

		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_12_7_DBL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_12_7_SGL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_12_7_EXB,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_price ELSE -999999999 END ) p_12_7_CHD,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=7) THEN t1.pt_key ELSE 0 END) pk_12_7_CHD,

		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_12_8_DBL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_12_8_SGL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_12_8_EXB,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_12_8_CHD,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_12_8_CHD,

		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_12_9_DBL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_12_9_SGL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_12_9_EXB,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_12_9_CHD,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_12_9_CHD,

		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_12_10_DBL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_12_10_SGL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_12_10_EXB,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_12_10_CHD,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_12_10_CHD,

		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_12_11_DBL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_DBL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_12_11_SGL,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_SGL,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_12_11_EXB,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_EXB,
		MAX(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_12_11_CHD,
		SUM(CASE WHEN (t1.pt_days=12 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_12_11_CHD,

		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_13_8_DBL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_13_8_SGL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_13_8_EXB,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_price ELSE -999999999 END ) p_13_8_CHD,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=8) THEN t1.pt_key ELSE 0 END) pk_13_8_CHD,

		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_13_9_DBL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_13_9_SGL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_13_9_EXB,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_13_9_CHD,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_13_9_CHD,

		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_13_10_DBL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_13_10_SGL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_13_10_EXB,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_13_10_CHD,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_13_10_CHD,

		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_13_11_DBL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_13_11_SGL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_13_11_EXB,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_13_11_CHD,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_13_11_CHD,

		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_13_12_DBL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_DBL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_13_12_SGL,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_SGL,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_13_12_EXB,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_EXB,
		MAX(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_13_12_CHD,
		SUM(CASE WHEN (t1.pt_days=13 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_13_12_CHD,

		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_14_9_DBL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_14_9_SGL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_14_9_EXB,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_price ELSE -999999999 END ) p_14_9_CHD,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=9) THEN t1.pt_key ELSE 0 END) pk_14_9_CHD,

		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_14_10_DBL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_14_10_SGL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_14_10_EXB,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_14_10_CHD,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_14_10_CHD,

		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_14_11_DBL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_14_11_SGL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_14_11_EXB,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_14_11_CHD,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_14_11_CHD,

		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_14_12_DBL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_14_12_SGL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_14_12_EXB,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_14_12_CHD,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_14_12_CHD,

		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_14_13_DBL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_DBL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_14_13_SGL,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_SGL,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_14_13_EXB,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_EXB,
		MAX(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_14_13_CHD,
		SUM(CASE WHEN (t1.pt_days=14 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_14_13_CHD,

		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_15_10_DBL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_15_10_SGL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_15_10_EXB,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_15_10_CHD,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_15_10_CHD,

		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_15_11_DBL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_15_11_SGL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_15_11_EXB,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_15_11_CHD,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_15_11_CHD,

		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_15_12_DBL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_15_12_SGL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_15_12_EXB,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_15_12_CHD,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_15_12_CHD,

		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_15_13_DBL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_15_13_SGL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_15_13_EXB,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_15_13_CHD,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_15_13_CHD,

		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_15_14_DBL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_DBL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_15_14_SGL,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_SGL,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_15_14_EXB,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_EXB,
		MAX(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_15_14_CHD,
		SUM(CASE WHEN (t1.pt_days=15 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_15_14_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_16_10_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_16_10_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_16_10_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_price ELSE -999999999 END ) p_16_10_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=10) THEN t1.pt_key ELSE 0 END) pk_16_10_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_16_11_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_16_11_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_16_11_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_price ELSE -999999999 END ) p_16_11_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=11) THEN t1.pt_key ELSE 0 END) pk_16_11_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_16_12_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_16_12_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_16_12_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_16_12_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_16_12_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_16_13_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_16_13_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_16_13_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_16_13_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_16_13_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_16_14_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_16_14_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_16_14_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_16_14_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_16_14_CHD,

		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_16_15_DBL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_DBL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_16_15_SGL,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_SGL,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_16_15_EXB,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_EXB,
		MAX(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_16_15_CHD,
		SUM(CASE WHEN (t1.pt_days=16 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_16_15_CHD,

		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_17_12_DBL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_17_12_SGL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_17_12_EXB,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_price ELSE -999999999 END ) p_17_12_CHD,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=12) THEN t1.pt_key ELSE 0 END) pk_17_12_CHD,

		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_17_13_DBL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_17_13_SGL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_17_13_EXB,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_17_13_CHD,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_17_13_CHD,

		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_17_14_DBL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_17_14_SGL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_17_14_EXB,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_17_14_CHD,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_17_14_CHD,

		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_17_15_DBL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_17_15_SGL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_17_15_EXB,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_17_15_CHD,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_17_15_CHD,

		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_17_16_DBL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_DBL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_17_16_SGL,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_SGL,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_17_16_EXB,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_EXB,
		MAX(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_17_16_CHD,
		SUM(CASE WHEN (t1.pt_days=17 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_17_16_CHD,

		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_18_13_DBL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_18_13_SGL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_18_13_EXB,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_price ELSE -999999999 END ) p_18_13_CHD,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=13) THEN t1.pt_key ELSE 0 END) pk_18_13_CHD,

		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_18_14_DBL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_18_14_SGL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_18_14_EXB,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_18_14_CHD,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_18_14_CHD,

		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_18_15_DBL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_18_15_SGL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_18_15_EXB,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_18_15_CHD,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_18_15_CHD,

		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_18_16_DBL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_18_16_SGL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_18_16_EXB,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_18_16_CHD,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_18_16_CHD,

		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_18_17_DBL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_DBL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_18_17_SGL,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_SGL,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_18_17_EXB,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_EXB,
		MAX(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_18_17_CHD,
		SUM(CASE WHEN (t1.pt_days=18 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_18_17_CHD,

		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_19_14_DBL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_19_14_SGL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_19_14_EXB,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_price ELSE -999999999 END ) p_19_14_CHD,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=14) THEN t1.pt_key ELSE 0 END) pk_19_14_CHD,

		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_19_15_DBL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_19_15_SGL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_19_15_EXB,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_19_15_CHD,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_19_15_CHD,

		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_19_16_DBL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_19_16_SGL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_19_16_EXB,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_19_16_CHD,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_19_16_CHD,

		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_19_17_DBL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_19_17_SGL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_19_17_EXB,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_19_17_CHD,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_19_17_CHD,

		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_19_18_DBL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_DBL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_19_18_SGL,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_SGL,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_19_18_EXB,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_EXB,
		MAX(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_19_18_CHD,
		SUM(CASE WHEN (t1.pt_days=19 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_19_18_CHD,

		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_20_15_DBL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_20_15_SGL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_20_15_EXB,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_price ELSE -999999999 END ) p_20_15_CHD,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=15) THEN t1.pt_key ELSE 0 END) pk_20_15_CHD,

		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_20_16_DBL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_20_16_SGL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_20_16_EXB,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_20_16_CHD,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_20_16_CHD,

		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_20_17_DBL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_20_17_SGL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_20_17_EXB,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_20_17_CHD,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_20_17_CHD,

		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_20_18_DBL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_20_18_SGL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_20_18_EXB,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_20_18_CHD,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_20_18_CHD,

		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_20_19_DBL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_DBL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_20_19_SGL,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_SGL,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_20_19_EXB,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_EXB,
		MAX(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_20_19_CHD,
		SUM(CASE WHEN (t1.pt_days=20 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_20_19_CHD,

		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_21_16_DBL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_21_16_SGL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_21_16_EXB,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_price ELSE -999999999 END ) p_21_16_CHD,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=16) THEN t1.pt_key ELSE 0 END) pk_21_16_CHD,

		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_21_17_DBL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_21_17_SGL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_21_17_EXB,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_21_17_CHD,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_21_17_CHD,

		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_21_18_DBL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_21_18_SGL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_21_18_EXB,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_21_18_CHD,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_21_18_CHD,

		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_21_19_DBL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_21_19_SGL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_21_19_EXB,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_21_19_CHD,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_21_19_CHD,

		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_21_20_DBL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_DBL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_21_20_SGL,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_SGL,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_21_20_EXB,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_EXB,
		MAX(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_21_20_CHD,
		SUM(CASE WHEN (t1.pt_days=21 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_21_20_CHD,

		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_22_17_DBL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_22_17_SGL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_22_17_EXB,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_price ELSE -999999999 END ) p_22_17_CHD,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=17) THEN t1.pt_key ELSE 0 END) pk_22_17_CHD,

		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_22_18_DBL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_22_18_SGL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_22_18_EXB,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_22_18_CHD,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_22_18_CHD,

		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_22_19_DBL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_22_19_SGL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_22_19_EXB,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_22_19_CHD,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_22_19_CHD,

		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_22_20_DBL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_22_20_SGL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_22_20_EXB,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_22_20_CHD,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_22_20_CHD,

		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_22_21_DBL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_DBL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_22_21_SGL,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_SGL,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_22_21_EXB,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_EXB,
		MAX(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_22_21_CHD,
		SUM(CASE WHEN (t1.pt_days=22 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_22_21_CHD,

		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_23_18_DBL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_23_18_SGL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_23_18_EXB,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_price ELSE -999999999 END ) p_23_18_CHD,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=18) THEN t1.pt_key ELSE 0 END) pk_23_18_CHD,

		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_23_19_DBL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_23_19_SGL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_23_19_EXB,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_23_19_CHD,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_23_19_CHD,

		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_23_20_DBL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_23_20_SGL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_23_20_EXB,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_23_20_CHD,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_23_20_CHD,

		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_23_21_DBL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_23_21_SGL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_23_21_EXB,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_23_21_CHD,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_23_21_CHD,

		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_23_22_DBL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_DBL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_23_22_SGL,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_SGL,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_23_22_EXB,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_EXB,
		MAX(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_23_22_CHD,
		SUM(CASE WHEN (t1.pt_days=23 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_23_22_CHD,

		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_24_19_DBL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_24_19_SGL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_24_19_EXB,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_price ELSE -999999999 END ) p_24_19_CHD,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=19) THEN t1.pt_key ELSE 0 END) pk_24_19_CHD,

		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_24_20_DBL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_24_20_SGL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_24_20_EXB,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_24_20_CHD,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_24_20_CHD,

		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_24_21_DBL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_24_21_SGL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_24_21_EXB,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_24_21_CHD,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_24_21_CHD,

		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_24_22_DBL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_24_22_SGL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_24_22_EXB,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_24_22_CHD,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_24_22_CHD,

		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_24_23_DBL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_DBL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_24_23_SGL,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_SGL,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_24_23_EXB,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_EXB,
		MAX(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_24_23_CHD,
		SUM(CASE WHEN (t1.pt_days=24 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_24_23_CHD,

		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_25_20_DBL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_25_20_SGL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_25_20_EXB,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_price ELSE -999999999 END ) p_25_20_CHD,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=20) THEN t1.pt_key ELSE 0 END) pk_25_20_CHD,

		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_25_21_DBL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_25_21_SGL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_25_21_EXB,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_25_21_CHD,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_25_21_CHD,

		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_25_22_DBL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_25_22_SGL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_25_22_EXB,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_25_22_CHD,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_25_22_CHD,

		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_25_23_DBL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_25_23_SGL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_25_23_EXB,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_25_23_CHD,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_25_23_CHD,

		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_25_24_DBL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_DBL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_25_24_SGL,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_SGL,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_25_24_EXB,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_EXB,
		MAX(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_25_24_CHD,
		SUM(CASE WHEN (t1.pt_days=25 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_25_24_CHD,

		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_26_21_DBL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_26_21_SGL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_26_21_EXB,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_price ELSE -999999999 END ) p_26_21_CHD,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=21) THEN t1.pt_key ELSE 0 END) pk_26_21_CHD,

		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_26_22_DBL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_26_22_SGL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_26_22_EXB,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_price ELSE -999999999 END ) p_26_22_CHD,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=22) THEN t1.pt_key ELSE 0 END) pk_26_22_CHD,

		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_26_23_DBL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_26_23_SGL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_26_23_EXB,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_26_23_CHD,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_26_23_CHD,

		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_26_24_DBL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_26_24_SGL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_26_24_EXB,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_26_24_CHD,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_26_24_CHD,

		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_26_25_DBL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_DBL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_26_25_SGL,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_SGL,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_26_25_EXB,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_EXB,
		MAX(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_26_25_CHD,
		SUM(CASE WHEN (t1.pt_days=26 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_26_25_CHD,

		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_27_23_DBL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_27_23_SGL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_27_23_EXB,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_price ELSE -999999999 END ) p_27_23_CHD,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=23) THEN t1.pt_key ELSE 0 END) pk_27_23_CHD,

		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_27_24_DBL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_27_24_SGL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_27_24_EXB,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_27_24_CHD,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_27_24_CHD,

		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_27_25_DBL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_27_25_SGL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_27_25_EXB,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_27_25_CHD,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_27_25_CHD,

		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_27_26_DBL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_DBL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_27_26_SGL,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_SGL,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_27_26_EXB,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_EXB,
		MAX(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_27_26_CHD,
		SUM(CASE WHEN (t1.pt_days=27 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_27_26_CHD,

		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_28_24_DBL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_28_24_SGL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_28_24_EXB,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_price ELSE -999999999 END ) p_28_24_CHD,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=24) THEN t1.pt_key ELSE 0 END) pk_28_24_CHD,

		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_28_25_DBL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_28_25_SGL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_28_25_EXB,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_28_25_CHD,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_28_25_CHD,

		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_28_26_DBL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_28_26_SGL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_28_26_EXB,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_28_26_CHD,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_28_26_CHD,

		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_28_27_DBL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_DBL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_28_27_SGL,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_SGL,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_28_27_EXB,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_EXB,
		MAX(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_28_27_CHD,
		SUM(CASE WHEN (t1.pt_days=28 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_28_27_CHD,

		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_29_25_DBL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_29_25_SGL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_29_25_EXB,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_price ELSE -999999999 END ) p_29_25_CHD,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=25) THEN t1.pt_key ELSE 0 END) pk_29_25_CHD,

		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_29_26_DBL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_29_26_SGL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_29_26_EXB,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_29_26_CHD,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_29_26_CHD,

		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_29_27_DBL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_29_27_SGL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_29_27_EXB,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_29_27_CHD,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_29_27_CHD,

		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_29_28_DBL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_DBL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_29_28_SGL,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_SGL,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_29_28_EXB,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_EXB,
		MAX(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_29_28_CHD,
		SUM(CASE WHEN (t1.pt_days=29 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_29_28_CHD,

		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_30_26_DBL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_30_26_SGL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_30_26_EXB,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_price ELSE -999999999 END ) p_30_26_CHD,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=26) THEN t1.pt_key ELSE 0 END) pk_30_26_CHD,

		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_30_27_DBL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_30_27_SGL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_30_27_EXB,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_price ELSE -999999999 END ) p_30_27_CHD,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=27) THEN t1.pt_key ELSE 0 END) pk_30_27_CHD,

		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_30_28_DBL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_30_28_SGL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_30_28_EXB,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_price ELSE -999999999 END ) p_30_28_CHD,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=28) THEN t1.pt_key ELSE 0 END) pk_30_28_CHD,

		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE -999999999 END ) p_30_29_DBL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_DBL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE -999999999 END ) p_30_29_SGL,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_SGL,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE -999999999 END ) p_30_29_EXB,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_EXB,
		MAX(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_price ELSE -999999999 END ) p_30_29_CHD,
		SUM(CASE WHEN (t1.pt_days=30 and t1.pt_nights=29) THEN t1.pt_key ELSE 0 END) pk_30_29_CHD

FROM	dbo.mwPriceTablePax t1 with(nolock)
INNER JOIN CityDictionary WITH(NOLOCK) ON ct_key=pt_ctkey
INNER JOIN RoomsCategory WITH(NOLOCK) ON RC_KEY=PT_RCKEY
INNER JOIN Rooms WITH(NOLOCK) ON RM_KEY=PT_RMKEY
INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY=PT_PNKEY
INNER JOIN HotelDictionary WITH(NOLOCK) ON HD_KEY=PT_HDKEY
WHERE	
	t1.pt_price <= ALL
	(
		SELECT	pt_price
		FROM	dbo.mwPriceTablePax t3 with(nolock)
		WHERE	t1.pt_tourtype	=t3.pt_tourtype 
			AND t1.pt_tourdate	=t3.pt_tourdate 
			AND t1.pt_pnkey		=t3.pt_pnkey 
			AND t1.pt_nights	=t3.pt_nights 
			AND t1.pt_days		=t3.pt_days 
			AND t1.pt_hdkey		=t3.pt_hdkey 
			AND t1.pt_rckey		=t3.pt_rckey 
	)
GROUP BY
	t1.pt_cnkey,
	t1.pt_ctkeyfrom,
	t1.pt_tourtype, 
	t1.pt_tourdate,
	t1.pt_pnkey,
	t1.pt_hdkey,
	t1.pt_rckey
GO

grant select on dbo.mwPriceTablePaxViewDesc to public
GO

refreshviewforall 'mwPriceTablePaxViewDesc'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwPriceTablePaxViewDesc.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTablePaxViewDesc.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTableViewAsc.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwPriceTableViewAsc.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwPriceTableViewAsc')
	drop view dbo.mwPriceTableViewAsc
GO

Create view [dbo].[mwPriceTableViewAsc] as
SELECT     t1.pt_cnkey, t1.pt_ctkeyfrom, t1.pt_tourtype, t1.pt_mainplaces, t1.pt_addplaces, t1.pt_tourdate, t1.pt_pnkey, t1.pt_hdkey, t1.pt_hdpartnerkey, t1.pt_hrkey, t1.pt_ctkey, 
                      t1.pt_tourkey, t1.pt_tlkey, tl_attribute as pt_tlattribute, t1.pt_topricefor, MAX(t1.pt_main) AS pt_main, MAX(t1.pt_rskey) AS pt_rskey, MAX(t1.pt_rmkey) AS pt_rmkey, 
                      MAX(rs_name) AS pt_rsname, MAX(ct_name) AS pt_ctname, MAX(rm_name) AS pt_rmname, MAX(rc_name) AS pt_rcname, MAX(ac_name) 
                      AS pt_acname, MAX(t1.pt_childagefrom) AS pt_childagefrom, MAX(t1.pt_childageto) AS pt_childageto, MAX(t1.pt_childagefrom2) AS pt_childagefrom2, 
                      MAX(t1.pt_childageto2) AS pt_childageto2, MAX(hd_name) AS pt_hdname, MAX(dbo.TP_Tours.TO_Name) AS pt_tourname, MAX(pn_code) AS pt_pncode, 
                      MAX(t1.pt_hdstars) AS pt_hdstars, t1.pt_hotelkeys, MAX(t1.pt_hotelnights) AS pt_hotelnights, MAX(t1.pt_hotelstars) AS pt_hotelstars, t1.pt_pansionkeys, MAX(t1.pt_key) 
                      AS pt_key, MIN(CASE WHEN (pt_days = 3 AND pt_nights = 2) THEN pt_price ELSE 999999999 END) AS p_3_2, SUM(CASE WHEN (pt_days = 3 AND pt_nights = 2) 
                      THEN pt_key ELSE 0 END) AS pk_3_2, MIN(CASE WHEN (pt_days = 4 AND pt_nights = 2) THEN pt_price ELSE 999999999 END) AS p_4_2, 
                      SUM(CASE WHEN (pt_days = 4 AND pt_nights = 2) THEN pt_key ELSE 0 END) AS pk_4_2, MIN(CASE WHEN (pt_days = 4 AND pt_nights = 3) 
                      THEN pt_price ELSE 999999999 END) AS p_4_3, SUM(CASE WHEN (pt_days = 4 AND pt_nights = 3) THEN pt_key ELSE 0 END) AS pk_4_3, 
                      MIN(CASE WHEN (pt_days = 5 AND pt_nights = 3) THEN pt_price ELSE 999999999 END) AS p_5_3, SUM(CASE WHEN (pt_days = 5 AND pt_nights = 3) 
                      THEN pt_key ELSE 0 END) AS pk_5_3, MIN(CASE WHEN (pt_days = 5 AND pt_nights = 4) THEN pt_price ELSE 999999999 END) AS p_5_4, 
                      SUM(CASE WHEN (pt_days = 5 AND pt_nights = 4) THEN pt_key ELSE 0 END) AS pk_5_4, MIN(CASE WHEN (pt_days = 6 AND pt_nights = 4) 
                      THEN pt_price ELSE 999999999 END) AS p_6_4, SUM(CASE WHEN (pt_days = 6 AND pt_nights = 4) THEN pt_key ELSE 0 END) AS pk_6_4, 
                      MIN(CASE WHEN (pt_days = 6 AND pt_nights = 5) THEN pt_price ELSE 999999999 END) AS p_6_5, SUM(CASE WHEN (pt_days = 6 AND pt_nights = 5) 
                      THEN pt_key ELSE 0 END) AS pk_6_5, MIN(CASE WHEN (pt_days = 7 AND pt_nights = 5) THEN pt_price ELSE 999999999 END) AS p_7_5, 
                      SUM(CASE WHEN (pt_days = 7 AND pt_nights = 5) THEN pt_key ELSE 0 END) AS pk_7_5, MIN(CASE WHEN (pt_days = 7 AND pt_nights = 6) 
                      THEN pt_price ELSE 999999999 END) AS p_7_6, SUM(CASE WHEN (pt_days = 7 AND pt_nights = 6) THEN pt_key ELSE 0 END) AS pk_7_6, 
                      MIN(CASE WHEN (pt_days = 8 AND pt_nights = 6) THEN pt_price ELSE 999999999 END) AS p_8_6, SUM(CASE WHEN (pt_days = 8 AND pt_nights = 6) 
                      THEN pt_key ELSE 0 END) AS pk_8_6, MIN(CASE WHEN (pt_days = 8 AND pt_nights = 7) THEN pt_price ELSE 999999999 END) AS p_8_7, 
                      SUM(CASE WHEN (pt_days = 8 AND pt_nights = 7) THEN pt_key ELSE 0 END) AS pk_8_7, MIN(CASE WHEN (pt_days = 9 AND pt_nights = 7) 
                      THEN pt_price ELSE 999999999 END) AS p_9_7, SUM(CASE WHEN (pt_days = 9 AND pt_nights = 7) THEN pt_key ELSE 0 END) AS pk_9_7, 
                      MIN(CASE WHEN (pt_days = 9 AND pt_nights = 8) THEN pt_price ELSE 999999999 END) AS p_9_8, SUM(CASE WHEN (pt_days = 9 AND pt_nights = 8) 
                      THEN pt_key ELSE 0 END) AS pk_9_8, MIN(CASE WHEN (pt_days = 10 AND pt_nights = 8) THEN pt_price ELSE 999999999 END) AS p_10_8, 
                      SUM(CASE WHEN (pt_days = 10 AND pt_nights = 8) THEN pt_key ELSE 0 END) AS pk_10_8, MIN(CASE WHEN (pt_days = 10 AND pt_nights = 9) 
                      THEN pt_price ELSE 999999999 END) AS p_10_9, SUM(CASE WHEN (pt_days = 10 AND pt_nights = 9) THEN pt_key ELSE 0 END) AS pk_10_9, 
                      MIN(CASE WHEN (pt_days = 11 AND pt_nights = 9) THEN pt_price ELSE 999999999 END) AS p_11_9, SUM(CASE WHEN (pt_days = 11 AND pt_nights = 9) 
                      THEN pt_key ELSE 0 END) AS pk_11_9, MIN(CASE WHEN (pt_days = 11 AND pt_nights = 10) THEN pt_price ELSE 999999999 END) AS p_11_10, 
                      SUM(CASE WHEN (pt_days = 11 AND pt_nights = 10) THEN pt_key ELSE 0 END) AS pk_11_10, MIN(CASE WHEN (pt_days = 12 AND pt_nights = 10) 
                      THEN pt_price ELSE 999999999 END) AS p_12_10, SUM(CASE WHEN (pt_days = 12 AND pt_nights = 10) THEN pt_key ELSE 0 END) AS pk_12_10, 
                      MIN(CASE WHEN (pt_days = 12 AND pt_nights = 11) THEN pt_price ELSE 999999999 END) AS p_12_11, SUM(CASE WHEN (pt_days = 12 AND pt_nights = 11) 
                      THEN pt_key ELSE 0 END) AS pk_12_11, MIN(CASE WHEN (pt_days = 13 AND pt_nights = 11) THEN pt_price ELSE 999999999 END) AS p_13_11, 
                      SUM(CASE WHEN (pt_days = 13 AND pt_nights = 11) THEN pt_key ELSE 0 END) AS pk_13_11, MIN(CASE WHEN (pt_days = 13 AND pt_nights = 12) 
                      THEN pt_price ELSE 999999999 END) AS p_13_12, SUM(CASE WHEN (pt_days = 13 AND pt_nights = 12) THEN pt_key ELSE 0 END) AS pk_13_12, 
                      MIN(CASE WHEN (pt_days = 14 AND pt_nights = 12) THEN pt_price ELSE 999999999 END) AS p_14_12, SUM(CASE WHEN (pt_days = 14 AND pt_nights = 12) 
                      THEN pt_key ELSE 0 END) AS pk_14_12, MIN(CASE WHEN (pt_days = 14 AND pt_nights = 13) THEN pt_price ELSE 999999999 END) AS p_14_13, 
                      SUM(CASE WHEN (pt_days = 14 AND pt_nights = 13) THEN pt_key ELSE 0 END) AS pk_14_13, MIN(CASE WHEN (pt_days = 15 AND pt_nights = 13) 
                      THEN pt_price ELSE 999999999 END) AS p_15_13, SUM(CASE WHEN (pt_days = 15 AND pt_nights = 13) THEN pt_key ELSE 0 END) AS pk_15_13, 
                      MIN(CASE WHEN (pt_days = 15 AND pt_nights = 14) THEN pt_price ELSE 999999999 END) AS p_15_14, SUM(CASE WHEN (pt_days = 15 AND pt_nights = 14) 
                      THEN pt_key ELSE 0 END) AS pk_15_14, MIN(CASE WHEN (pt_days = 16 AND pt_nights = 14) THEN pt_price ELSE 999999999 END) AS p_16_14, 
                      SUM(CASE WHEN (pt_days = 16 AND pt_nights = 14) THEN pt_key ELSE 0 END) AS pk_16_14, MIN(CASE WHEN (pt_days = 16 AND pt_nights = 15) 
                      THEN pt_price ELSE 999999999 END) AS p_16_15, SUM(CASE WHEN (pt_days = 16 AND pt_nights = 15) THEN pt_key ELSE 0 END) AS pk_16_15, 
                      MIN(CASE WHEN (pt_days = 17 AND pt_nights = 15) THEN pt_price ELSE 999999999 END) AS p_17_15, SUM(CASE WHEN (pt_days = 17 AND pt_nights = 15) 
                      THEN pt_key ELSE 0 END) AS pk_17_15, MIN(CASE WHEN (pt_days = 17 AND pt_nights = 16) THEN pt_price ELSE 999999999 END) AS p_17_16, 
                      SUM(CASE WHEN (pt_days = 17 AND pt_nights = 16) THEN pt_key ELSE 0 END) AS pk_17_16, MIN(CASE WHEN (pt_days = 18 AND pt_nights = 16) 
                      THEN pt_price ELSE 999999999 END) AS p_18_16, SUM(CASE WHEN (pt_days = 18 AND pt_nights = 16) THEN pt_key ELSE 0 END) AS pk_18_16, 
                      MIN(CASE WHEN (pt_days = 18 AND pt_nights = 17) THEN pt_price ELSE 999999999 END) AS p_18_17, SUM(CASE WHEN (pt_days = 18 AND pt_nights = 17) 
                      THEN pt_key ELSE 0 END) AS pk_18_17, MIN(CASE WHEN (pt_days = 19 AND pt_nights = 17) THEN pt_price ELSE 999999999 END) AS p_19_17, 
                      SUM(CASE WHEN (pt_days = 19 AND pt_nights = 17) THEN pt_key ELSE 0 END) AS pk_19_17, MIN(CASE WHEN (pt_days = 19 AND pt_nights = 18) 
                      THEN pt_price ELSE 999999999 END) AS p_19_18, SUM(CASE WHEN (pt_days = 19 AND pt_nights = 18) THEN pt_key ELSE 0 END) AS pk_19_18, 
                      MIN(CASE WHEN (pt_days = 20 AND pt_nights = 18) THEN pt_price ELSE 999999999 END) AS p_20_18, SUM(CASE WHEN (pt_days = 20 AND pt_nights = 18) 
                      THEN pt_key ELSE 0 END) AS pk_20_18, MIN(CASE WHEN (pt_days = 20 AND pt_nights = 19) THEN pt_price ELSE 999999999 END) AS p_20_19, 
                      SUM(CASE WHEN (pt_days = 20 AND pt_nights = 19) THEN pt_key ELSE 0 END) AS pk_20_19, MIN(CASE WHEN (pt_days = 21 AND pt_nights = 19) 
                      THEN pt_price ELSE 999999999 END) AS p_21_19, SUM(CASE WHEN (pt_days = 21 AND pt_nights = 19) THEN pt_key ELSE 0 END) AS pk_21_19, 
                      MIN(CASE WHEN (pt_days = 21 AND pt_nights = 20) THEN pt_price ELSE 999999999 END) AS p_21_20, SUM(CASE WHEN (pt_days = 21 AND pt_nights = 20) 
                      THEN pt_key ELSE 0 END) AS pk_21_20, MIN(CASE WHEN (pt_days = 22 AND pt_nights = 20) THEN pt_price ELSE 999999999 END) AS p_22_20, 
                      SUM(CASE WHEN (pt_days = 22 AND pt_nights = 20) THEN pt_key ELSE 0 END) AS pk_22_20, MIN(CASE WHEN (pt_days = 22 AND pt_nights = 21) 
                      THEN pt_price ELSE 999999999 END) AS p_22_21, SUM(CASE WHEN (pt_days = 22 AND pt_nights = 21) THEN pt_key ELSE 0 END) AS pk_22_21, 
                      MIN(CASE WHEN (pt_days = 23 AND pt_nights = 21) THEN pt_price ELSE 999999999 END) AS p_23_21, SUM(CASE WHEN (pt_days = 23 AND pt_nights = 21) 
                      THEN pt_key ELSE 0 END) AS pk_23_21, MIN(CASE WHEN (pt_days = 23 AND pt_nights = 22) THEN pt_price ELSE 999999999 END) AS p_23_22, 
                      SUM(CASE WHEN (pt_days = 23 AND pt_nights = 22) THEN pt_key ELSE 0 END) AS pk_23_22
FROM         dbo.mwPriceTable AS t1
INNER JOIN dbo.TP_Tours WITH(NOLOCK) ON dbo.TP_Tours.TO_Key = t1.pt_tourkey
INNER JOIN dbo.TurList WITH(NOLOCK) on TL_KEY=TO_TRKEY
INNER JOIN dbo.CityDictionary WITH(NOLOCK) ON CT_KEY=PT_CTKEY
INNER JOIN dbo.Resorts WITH(NOLOCK) ON RS_KEY=ISNULL(PT_RSKEY,-1)
INNER JOIN dbo.Accmdmentype WITH(NOLOCK) ON AC_KEY=PT_ACKEY
INNER JOIN dbo.RoomsCategory WITH(NOLOCK) ON RC_KEY=PT_RCKEY
INNER JOIN dbo.Rooms WITH(NOLOCK) ON RM_KEY=PT_RMKEY
INNER JOIN dbo.Pansion WITH(NOLOCK) ON PN_KEY=PT_PNKEY
INNER JOIN dbo.HotelDictionary WITH(NOLOCK) ON HD_KEY=PT_HDKEY
INNER JOIN
                          (SELECT     pt_cnkey AS cnkey, pt_ctkeyfrom AS ctkeyfrom, pt_tourtype AS tourtype, pt_mainplaces AS mainplaces, pt_addplaces AS addplaces, 
                                                   pt_tourdate AS tourdate, pt_pnkey AS pnkey, pt_pansionkeys AS pansionkeys, pt_days AS days, pt_nights AS nights, pt_hdkey AS hdkey, 
                                                   pt_hotelkeys AS hotelkeys, pt_hdpartnerkey AS hdpartnerkey, pt_hrkey AS hrkey, MAX(pt_key) AS ptkey
                            FROM          dbo.mwPriceTable WITH(NOLOCK)
                            GROUP BY pt_cnkey, pt_ctkeyfrom, pt_tourtype, pt_mainplaces, pt_addplaces, pt_tourdate, pt_pnkey, pt_pansionkeys, pt_nights, pt_days, pt_hdkey, pt_hotelkeys, 
                                                   pt_hdpartnerkey, pt_hrkey) AS t2 ON t1.pt_cnkey = t2.cnkey AND t1.pt_ctkeyfrom = t2.ctkeyfrom AND t1.pt_tourtype = t2.tourtype AND 
                      t1.pt_mainplaces = t2.mainplaces AND t1.pt_addplaces = t2.addplaces AND t1.pt_tourdate = t2.tourdate AND t1.pt_pnkey = t2.pnkey AND 
                      t1.pt_pansionkeys = t2.pansionkeys AND t1.pt_nights = t2.nights AND t1.pt_days = t2.days AND t1.pt_hdkey = t2.hdkey AND t1.pt_hotelkeys = t2.hotelkeys AND 
                      t1.pt_hdpartnerkey = t2.hdpartnerkey AND t1.pt_hrkey = t2.hrkey AND t1.pt_key = t2.ptkey
GROUP BY t1.pt_cnkey, t1.pt_ctkeyfrom, t1.pt_mainplaces, t1.pt_tourtype, t1.pt_addplaces, t1.pt_tourdate, t1.pt_pnkey, t1.pt_pansionkeys, t1.pt_tourkey, t1.pt_tlkey, 
                      tl_attribute, t1.pt_topricefor, t1.pt_hdkey, t1.pt_hotelkeys, t1.pt_hdpartnerkey, t1.pt_ctkey, t1.pt_hrkey

GO

grant select on dbo.mwPriceTableViewAsc to public
GO

refreshviewforall 'mwPriceTableViewAsc'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwPriceTableViewAsc.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTableViewAsc.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTableViewDesc.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwPriceTableViewDesc.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwPriceTableViewDesc')
	drop view dbo.mwPriceTableViewDesc
GO

CREATE VIEW [dbo].[mwPriceTableViewDesc]
AS
SELECT     t1.pt_cnkey, t1.pt_ctkeyfrom, t1.pt_tourtype, t1.pt_mainplaces, t1.pt_addplaces, t1.pt_tourdate, t1.pt_pnkey, t1.pt_hdkey, t1.pt_hdpartnerkey, t1.pt_hrkey, t1.pt_ctkey, 
                      t1.pt_tourkey, t1.pt_tlkey, tl_attribute as pt_tlattribute, t1.pt_topricefor, MAX(t1.pt_main) AS pt_main, MAX(t1.pt_rskey) AS pt_rskey, MAX(t1.pt_rmkey) AS pt_rmkey, 
                      MAX(rs_name) AS pt_rsname, MAX(ct_name) AS pt_ctname, MAX(rm_name) AS pt_rmname, MAX(rc_name) AS pt_rcname, MAX(ac_name) 
                      AS pt_acname, MAX(t1.pt_childagefrom) AS pt_childagefrom, MAX(t1.pt_childageto) AS pt_childageto, MAX(t1.pt_childagefrom2) AS pt_childagefrom2, 
                      MAX(t1.pt_childageto2) AS pt_childageto2, MAX(hd_name) AS pt_hdname, MAX(to_name) AS pt_tourname, MAX(pn_code) AS pt_pncode, 
                      MAX(t1.pt_hdstars) AS pt_hdstars, t1.pt_hotelkeys, MAX(t1.pt_hotelnights) AS pt_hotelnights, MAX(t1.pt_hotelstars) AS pt_hotelstars, t1.pt_pansionkeys, MAX(t1.pt_key) 
                      AS pt_key, MAX(CASE WHEN (pt_days = 3 AND pt_nights = 2) THEN pt_price ELSE - 999999999 END) AS p_3_2, SUM(CASE WHEN (pt_days = 3 AND pt_nights = 2) 
                      THEN pt_key ELSE 0 END) AS pk_3_2, MAX(CASE WHEN (pt_days = 4 AND pt_nights = 2) THEN pt_price ELSE - 999999999 END) AS p_4_2, 
                      SUM(CASE WHEN (pt_days = 4 AND pt_nights = 2) THEN pt_key ELSE 0 END) AS pk_4_2, MAX(CASE WHEN (pt_days = 4 AND pt_nights = 3) 
                      THEN pt_price ELSE - 999999999 END) AS p_4_3, SUM(CASE WHEN (pt_days = 4 AND pt_nights = 3) THEN pt_key ELSE 0 END) AS pk_4_3, 
                      MAX(CASE WHEN (pt_days = 5 AND pt_nights = 3) THEN pt_price ELSE - 999999999 END) AS p_5_3, SUM(CASE WHEN (pt_days = 5 AND pt_nights = 3) 
                      THEN pt_key ELSE 0 END) AS pk_5_3, MAX(CASE WHEN (pt_days = 5 AND pt_nights = 4) THEN pt_price ELSE - 999999999 END) AS p_5_4, 
                      SUM(CASE WHEN (pt_days = 5 AND pt_nights = 4) THEN pt_key ELSE 0 END) AS pk_5_4, MAX(CASE WHEN (pt_days = 6 AND pt_nights = 4) 
                      THEN pt_price ELSE - 999999999 END) AS p_6_4, SUM(CASE WHEN (pt_days = 6 AND pt_nights = 4) THEN pt_key ELSE 0 END) AS pk_6_4, 
                      MAX(CASE WHEN (pt_days = 6 AND pt_nights = 5) THEN pt_price ELSE - 999999999 END) AS p_6_5, SUM(CASE WHEN (pt_days = 6 AND pt_nights = 5) 
                      THEN pt_key ELSE 0 END) AS pk_6_5, MAX(CASE WHEN (pt_days = 7 AND pt_nights = 5) THEN pt_price ELSE - 999999999 END) AS p_7_5, 
                      SUM(CASE WHEN (pt_days = 7 AND pt_nights = 5) THEN pt_key ELSE 0 END) AS pk_7_5, MAX(CASE WHEN (pt_days = 7 AND pt_nights = 6) 
                      THEN pt_price ELSE - 999999999 END) AS p_7_6, SUM(CASE WHEN (pt_days = 7 AND pt_nights = 6) THEN pt_key ELSE 0 END) AS pk_7_6, 
                      MAX(CASE WHEN (pt_days = 8 AND pt_nights = 6) THEN pt_price ELSE - 999999999 END) AS p_8_6, SUM(CASE WHEN (pt_days = 8 AND pt_nights = 6) 
                      THEN pt_key ELSE 0 END) AS pk_8_6, MAX(CASE WHEN (pt_days = 8 AND pt_nights = 7) THEN pt_price ELSE - 999999999 END) AS p_8_7, 
                      SUM(CASE WHEN (pt_days = 8 AND pt_nights = 7) THEN pt_key ELSE 0 END) AS pk_8_7, MAX(CASE WHEN (pt_days = 9 AND pt_nights = 7) 
                      THEN pt_price ELSE - 999999999 END) AS p_9_7, SUM(CASE WHEN (pt_days = 9 AND pt_nights = 7) THEN pt_key ELSE 0 END) AS pk_9_7, 
                      MAX(CASE WHEN (pt_days = 9 AND pt_nights = 8) THEN pt_price ELSE - 999999999 END) AS p_9_8, SUM(CASE WHEN (pt_days = 9 AND pt_nights = 8) 
                      THEN pt_key ELSE 0 END) AS pk_9_8, MAX(CASE WHEN (pt_days = 10 AND pt_nights = 8) THEN pt_price ELSE - 999999999 END) AS p_10_8, 
                      SUM(CASE WHEN (pt_days = 10 AND pt_nights = 8) THEN pt_key ELSE 0 END) AS pk_10_8, MAX(CASE WHEN (pt_days = 10 AND pt_nights = 9) 
                      THEN pt_price ELSE - 999999999 END) AS p_10_9, SUM(CASE WHEN (pt_days = 10 AND pt_nights = 9) THEN pt_key ELSE 0 END) AS pk_10_9, 
                      MAX(CASE WHEN (pt_days = 11 AND pt_nights = 9) THEN pt_price ELSE - 999999999 END) AS p_11_9, SUM(CASE WHEN (pt_days = 11 AND pt_nights = 9) 
                      THEN pt_key ELSE 0 END) AS pk_11_9, MAX(CASE WHEN (pt_days = 11 AND pt_nights = 10) THEN pt_price ELSE - 999999999 END) AS p_11_10, 
                      SUM(CASE WHEN (pt_days = 11 AND pt_nights = 10) THEN pt_key ELSE 0 END) AS pk_11_10, MAX(CASE WHEN (pt_days = 12 AND pt_nights = 10) 
                      THEN pt_price ELSE - 999999999 END) AS p_12_10, SUM(CASE WHEN (pt_days = 12 AND pt_nights = 10) THEN pt_key ELSE 0 END) AS pk_12_10, 
                      MAX(CASE WHEN (pt_days = 12 AND pt_nights = 11) THEN pt_price ELSE - 999999999 END) AS p_12_11, SUM(CASE WHEN (pt_days = 12 AND pt_nights = 11) 
                      THEN pt_key ELSE 0 END) AS pk_12_11, MAX(CASE WHEN (pt_days = 13 AND pt_nights = 11) THEN pt_price ELSE - 999999999 END) AS p_13_11, 
                      SUM(CASE WHEN (pt_days = 13 AND pt_nights = 11) THEN pt_key ELSE 0 END) AS pk_13_11, MAX(CASE WHEN (pt_days = 13 AND pt_nights = 12) 
                      THEN pt_price ELSE - 999999999 END) AS p_13_12, SUM(CASE WHEN (pt_days = 13 AND pt_nights = 12) THEN pt_key ELSE 0 END) AS pk_13_12, 
                      MAX(CASE WHEN (pt_days = 14 AND pt_nights = 12) THEN pt_price ELSE - 999999999 END) AS p_14_12, SUM(CASE WHEN (pt_days = 14 AND pt_nights = 12) 
                      THEN pt_key ELSE 0 END) AS pk_14_12, MAX(CASE WHEN (pt_days = 14 AND pt_nights = 13) THEN pt_price ELSE - 999999999 END) AS p_14_13, 
                      SUM(CASE WHEN (pt_days = 14 AND pt_nights = 13) THEN pt_key ELSE 0 END) AS pk_14_13, MAX(CASE WHEN (pt_days = 15 AND pt_nights = 13) 
                      THEN pt_price ELSE - 999999999 END) AS p_15_13, SUM(CASE WHEN (pt_days = 15 AND pt_nights = 13) THEN pt_key ELSE 0 END) AS pk_15_13, 
                      MAX(CASE WHEN (pt_days = 15 AND pt_nights = 14) THEN pt_price ELSE - 999999999 END) AS p_15_14, SUM(CASE WHEN (pt_days = 15 AND pt_nights = 14) 
                      THEN pt_key ELSE 0 END) AS pk_15_14, MAX(CASE WHEN (pt_days = 16 AND pt_nights = 14) THEN pt_price ELSE - 999999999 END) AS p_16_14, 
                      SUM(CASE WHEN (pt_days = 16 AND pt_nights = 14) THEN pt_key ELSE 0 END) AS pk_16_14, MAX(CASE WHEN (pt_days = 16 AND pt_nights = 15) 
                      THEN pt_price ELSE - 999999999 END) AS p_16_15, SUM(CASE WHEN (pt_days = 16 AND pt_nights = 15) THEN pt_key ELSE 0 END) AS pk_16_15, 
                      MAX(CASE WHEN (pt_days = 17 AND pt_nights = 15) THEN pt_price ELSE - 999999999 END) AS p_17_15, SUM(CASE WHEN (pt_days = 17 AND pt_nights = 15) 
                      THEN pt_key ELSE 0 END) AS pk_17_15, MAX(CASE WHEN (pt_days = 17 AND pt_nights = 16) THEN pt_price ELSE - 999999999 END) AS p_17_16, 
                      SUM(CASE WHEN (pt_days = 17 AND pt_nights = 16) THEN pt_key ELSE 0 END) AS pk_17_16, MAX(CASE WHEN (pt_days = 18 AND pt_nights = 16) 
                      THEN pt_price ELSE - 999999999 END) AS p_18_16, SUM(CASE WHEN (pt_days = 18 AND pt_nights = 16) THEN pt_key ELSE 0 END) AS pk_18_16, 
                      MAX(CASE WHEN (pt_days = 18 AND pt_nights = 17) THEN pt_price ELSE - 999999999 END) AS p_18_17, SUM(CASE WHEN (pt_days = 18 AND pt_nights = 17) 
                      THEN pt_key ELSE 0 END) AS pk_18_17, MAX(CASE WHEN (pt_days = 19 AND pt_nights = 17) THEN pt_price ELSE - 999999999 END) AS p_19_17, 
                      SUM(CASE WHEN (pt_days = 19 AND pt_nights = 17) THEN pt_key ELSE 0 END) AS pk_19_17, MAX(CASE WHEN (pt_days = 19 AND pt_nights = 18) 
                      THEN pt_price ELSE - 999999999 END) AS p_19_18, SUM(CASE WHEN (pt_days = 19 AND pt_nights = 18) THEN pt_key ELSE 0 END) AS pk_19_18, 
                      MAX(CASE WHEN (pt_days = 20 AND pt_nights = 18) THEN pt_price ELSE - 999999999 END) AS p_20_18, SUM(CASE WHEN (pt_days = 20 AND pt_nights = 18) 
                      THEN pt_key ELSE 0 END) AS pk_20_18, MAX(CASE WHEN (pt_days = 20 AND pt_nights = 19) THEN pt_price ELSE - 999999999 END) AS p_20_19, 
                      SUM(CASE WHEN (pt_days = 20 AND pt_nights = 19) THEN pt_key ELSE 0 END) AS pk_20_19, MAX(CASE WHEN (pt_days = 21 AND pt_nights = 19) 
                      THEN pt_price ELSE - 999999999 END) AS p_21_19, SUM(CASE WHEN (pt_days = 21 AND pt_nights = 19) THEN pt_key ELSE 0 END) AS pk_21_19, 
                      MAX(CASE WHEN (pt_days = 21 AND pt_nights = 20) THEN pt_price ELSE - 999999999 END) AS p_21_20, SUM(CASE WHEN (pt_days = 21 AND pt_nights = 20) 
                      THEN pt_key ELSE 0 END) AS pk_21_20, MAX(CASE WHEN (pt_days = 22 AND pt_nights = 20) THEN pt_price ELSE - 999999999 END) AS p_22_20, 
                      SUM(CASE WHEN (pt_days = 22 AND pt_nights = 20) THEN pt_key ELSE 0 END) AS pk_22_20, MAX(CASE WHEN (pt_days = 22 AND pt_nights = 21) 
                      THEN pt_price ELSE - 999999999 END) AS p_22_21, SUM(CASE WHEN (pt_days = 22 AND pt_nights = 21) THEN pt_key ELSE 0 END) AS pk_22_21, 
                      MAX(CASE WHEN (pt_days = 23 AND pt_nights = 21) THEN pt_price ELSE - 999999999 END) AS p_23_21, SUM(CASE WHEN (pt_days = 23 AND pt_nights = 21) 
                      THEN pt_key ELSE 0 END) AS pk_23_21
FROM         dbo.mwPriceTable AS t1
INNER JOIN TP_TOURS WITH(NOLOCK) ON TO_KEY=PT_TOURKEY
INNER JOIN TurList WITH(NOLOCK) ON TL_KEY=TO_TRKEY
INNER JOIN CityDictionary WITH(NOLOCK) ON CT_KEY=PT_CTKEY
INNER JOIN Resorts WITH(NOLOCK) ON RS_KEY=ISNULL(PT_RSKEY,-1)
INNER JOIN Accmdmentype WITH(NOLOCK) ON AC_KEY=PT_ACKEY
INNER JOIN RoomsCategory WITH(NOLOCK) ON RC_KEY=PT_RCKEY
INNER JOIN Rooms WITH(NOLOCK) ON RM_KEY=PT_RMKEY
INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY=PT_PNKEY
INNER JOIN HotelDictionary WITH(NOLOCK) ON HD_KEY=PT_HDKEY
INNER JOIN (SELECT     pt_cnkey AS cnkey, pt_ctkeyfrom AS ctkeyfrom, pt_tourtype AS tourtype, pt_mainplaces AS mainplaces, pt_addplaces AS addplaces, 
                                                   pt_tourdate AS tourdate, pt_pnkey AS pnkey, pt_pansionkeys AS pansionkeys, pt_days AS days, pt_nights AS nights, pt_hdkey AS hdkey, 
                                                   pt_hotelkeys AS hotelkeys, pt_hdpartnerkey AS hdpartnerkey, pt_hrkey AS hrkey, MAX(pt_key) AS ptkey
                            FROM          dbo.mwPriceTable WITH(NOLOCK)
                            GROUP BY pt_cnkey, pt_ctkeyfrom, pt_tourtype, pt_mainplaces, pt_addplaces, pt_tourdate, pt_pnkey, pt_pansionkeys, pt_nights, pt_days, pt_hdkey, pt_hotelkeys, 
                                                   pt_hdpartnerkey, pt_hrkey) AS t2 ON t1.pt_cnkey = t2.cnkey AND t1.pt_ctkeyfrom = t2.ctkeyfrom AND t1.pt_tourtype = t2.tourtype AND 
                      t1.pt_mainplaces = t2.mainplaces AND t1.pt_addplaces = t2.addplaces AND t1.pt_tourdate = t2.tourdate AND t1.pt_pnkey = t2.pnkey AND 
                      t1.pt_pansionkeys = t2.pansionkeys AND t1.pt_nights = t2.nights AND t1.pt_days = t2.days AND t1.pt_hdkey = t2.hdkey AND t1.pt_hotelkeys = t2.hotelkeys AND 
                      t1.pt_hdpartnerkey = t2.hdpartnerkey AND t1.pt_hrkey = t2.hrkey AND t1.pt_key = t2.ptkey
GROUP BY t1.pt_cnkey, t1.pt_ctkeyfrom, t1.pt_mainplaces, t1.pt_tourtype, t1.pt_addplaces, t1.pt_tourdate, t1.pt_pnkey, t1.pt_pansionkeys, t1.pt_tourkey, t1.pt_tlkey, 
                      tl_attribute, t1.pt_topricefor, t1.pt_hdkey, t1.pt_hotelkeys, t1.pt_hdpartnerkey, t1.pt_ctkey, t1.pt_hrkey
GO

grant select on dbo.mwPriceTableViewDesc to public
GO

refreshviewforall 'mwPriceTableViewDesc'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwPriceTableViewDesc.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwPriceTableViewDesc.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwToursInfo.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.11)_Alter_View_mwToursInfo.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwToursInfo')
	drop view dbo.mwToursInfo
GO

Create view [dbo].mwToursInfo as
SELECT     prices.pt_cnkey, dbo.Country.CN_NAME, prices.pt_ctkeyfrom, dbo.CityDictionary.CT_NAME, prices.pt_tourkey, prices.pt_tourname, prices.pt_toururl, prices.pt_rate, 
                      dbo.mwTop5TourDates(prices.pt_cnkey, prices.pt_tourkey, prices.pt_tlkey, 0) AS dates, dbo.mwTourHotelNights(prices.pt_tourkey) AS nights, prices.min_price, 
                      CONVERT(varchar(10), prices.pt_tourdate, 21) AS pt_firsttourdate
FROM         (SELECT     MAX(dbo.mwPriceTable.pt_cnkey) AS pt_cnkey, MAX(dbo.mwPriceTable.pt_ctkeyfrom) AS pt_ctkeyfrom, dbo.mwPriceTable.pt_tourkey, 
                                              MAX(dbo.TP_Tours.TO_Name) AS pt_tourname, MAX(TL_WebHttp) AS pt_toururl, MAX(dbo.mwPriceTable.pt_tlkey) AS pt_tlkey, 
                                              MAX(dbo.mwPriceTable.pt_rate) AS pt_rate, MIN(dbo.mwPriceTable.pt_price) AS min_price, MIN(dbo.mwPriceTable.pt_tourdate) AS pt_tourdate
                       FROM          dbo.mwPriceTable WITH(NOLOCK)
					   INNER JOIN dbo.TP_Tours WITH(NOLOCK) ON dbo.TP_Tours.TO_Key = dbo.mwPriceTable.pt_tourkey
					   INNER JOIN TurList WITH(NOLOCK) ON TL_KEY=TO_TRKEY
                       WHERE      (dbo.mwPriceTable.pt_main > 0) AND (dbo.mwPriceTable.pt_rmkey = 2) AND (dbo.mwPriceTable.pt_tourdate >= GETDATE())
                       GROUP BY dbo.mwPriceTable.pt_tourkey) AS prices INNER JOIN
                      dbo.Country WITH(NOLOCK) ON prices.pt_cnkey = dbo.Country.CN_KEY INNER JOIN
                      dbo.CityDictionary WITH(NOLOCK) ON prices.pt_ctkeyfrom = dbo.CityDictionary.CT_KEY

GO

grant select on dbo.mwToursInfo to public
GO

refreshviewforall 'mwToursInfo'
GO
/*********************************************************************/
/* end (2014.08.11)_Alter_View_mwToursInfo.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.11)_Alter_View_mwToursInfo.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.26)_Insert_Actions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.26)_Insert_Actions.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 160) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (160, '"Работа менеджеров" -> Скрыть колонку "Прибыль планируемая"', 'Скрывать колонку "Прибыль планируемая" в экране "Работа менеджеров"', 'Window "Manager work" -> Hide columns "Profit planned"', 1)
END
ELSE
BEGIN
    UPDATE Actions SET AC_Name = '"Работа менеджеров" -> Скрыть колонку "Прибыль планируемая"', AC_Description =  'Скрывать колонку "Прибыль планируемая" в экране "Работа менеджеров"', AC_NameLat = 'Window "Manager work" -> Hide columns "Profit planned"'
        WHERE ac_key = 160
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 161) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (161, '"Работа менеджеров" -> Скрыть колонку "Прибыль планируемая, %"', 'Скрывать колонку "Прибыль планируемая %" в экране "Работа менеджеров"', 'Window "Manager work" -> Hide columns "Profit planned %"', 1)
END
BEGIN
    UPDATE Actions SET AC_Name = '"Работа менеджеров" -> Скрыть колонку "Прибыль планируемая, %"', AC_Description =  'Скрывать колонку "Прибыль планируемая %" в экране "Работа менеджеров"', AC_NameLat ='Window "Manager work" -> Hide columns "Profit planned %"'
        WHERE ac_key = 161
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 162) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (162, '"Работа менеджеров" -> Скрыть колонку "Прибыль реальная"', 'Скрывать колонку "Прибыль реальная" в экране  "Работа менеджеров"', 'Window "Manager work" -> Hide columns "Profit real"', 1)
END
BEGIN
    UPDATE Actions SET AC_Name = '"Работа менеджеров" -> Скрыть колонку "Прибыль реальная"', AC_Description =  'Скрывать колонку "Прибыль реальная" в экране  "Работа менеджеров"', AC_NameLat =  'Window "Manager work" -> Hide columns "Profit real"'
        WHERE ac_key = 162
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 170) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (170, '"Турпутевка" и "Оформление клиентов" -> Скрыть колонку "Прибыль планируемая"', 'Скрывать колонку "Прибыль планируемая" в экранах "Турпутевка" и "Оформление клиентов"', 'Window "Dogovor" and "Tour sale" -> Hide columns -> "Profit planned"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 171) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (171, '"Турпутевка" и "Оформление клиентов" -> Скрыть колонку "Прибыль планируемая, %"', 'Скрывать колонку "Прибыль планируемая %" в экранах "Турпутевка" и "Оформление клиентов"', 'Window "Dogovor" and "Tour sale" -> Hide columns -> "Profit planned %"', 1)
END
GO

IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 172) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) 
	VALUES (172, '"Турпутевка" и "Оформление клиентов" -> Скрыть колонку "Прибыль реальная"', 'Скрывать колонку "Прибыль реальная" в экранах "Турпутевка" и "Оформление клиентов"', 'Window "Dogovor" and "Tour sale" -> Hide columns -> "Profit real"', 1)
END
GO
/*********************************************************************/
/* end (2014.08.26)_Insert_Actions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.26)_Insert_Actions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.27)_Insert_Actions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.08.27)_Insert_Actions.sql */
/*********************************************************************/
--добавление action Разрешить просмотр панели итогов в экране 'Работа менеджеров'
IF NOT EXISTS (SELECT 1 FROM Actions WHERE ac_key = 148) 
BEGIN
	INSERT INTO Actions (AC_Key, AC_Name, AC_Description, AC_NameLat, AC_IsActionForRestriction) VALUES (148, 'Разрешить просмотр панели итогов в экране ''Работа менеджеров''', 'Разрешить просмотр панели итогов в экране ''Работа менеджеров''', 'Allow view summary panel in ManagerWork window', 0)
END
GO



/*********************************************************************/
/* end (2014.08.27)_Insert_Actions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.08.27)_Insert_Actions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.09.02)_Insert_SystemSettings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.09.02)_Insert_SystemSettings.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM SystemSettings WHERE SS_PARMNAME='IsNewManagerWorkWindow')
	INSERT INTO SystemSettings(SS_PARMNAME,SS_PARMVALUE) VALUES ('IsNewManagerWorkWindow', 0)
GO

IF NOT EXISTS (SELECT 1 FROM SystemSettings WHERE SS_PARMNAME='IsNewPaymentsToPartners')
    INSERT INTO SystemSettings(SS_PARMNAME,SS_PARMVALUE) VALUES ('IsNewPaymentsToPartners', 1)

GO

IF NOT EXISTS (SELECT 1 FROM SystemSettings WHERE SS_PARMNAME='IsNewPaymentsToAgents')
	INSERT INTO SystemSettings(SS_PARMNAME,SS_PARMVALUE) VALUES ('IsNewPaymentsToAgents', 1)
GO


/*********************************************************************/
/* end (2014.09.02)_Insert_SystemSettings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.09.02)_Insert_SystemSettings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.20)_Insert_ObjectAliases.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.11.20)_Insert_ObjectAliases.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 300004)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_NAMELAT, OA_TABLEID)
	VALUES (300004, 'WriteOffRepresentativeBonusesToPrice', 'Сумма, списанная со счёта бонусами представителя', 'Write-off representative bonuses price', 0)
END
ELSE
BEGIN
	UPDATE ObjectAliases 
	set OA_ALIAS = 'WriteOffRepresentativeBonusesToPrice', OA_NAME = 'Сумма, списанная со счёта бонусами представителя', OA_NAMELAT = 'Write-off representative bonuses price'
	where OA_ID = 300004
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 300006)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_NAMELAT, OA_TABLEID)
	VALUES (300006, 'WriteOffRepresentativeBonusesCount', 'Количество списанных баллов со счёта представителя', 'Write-off representative bonuses count', 0)
END
ELSE
BEGIN
	UPDATE ObjectAliases 
	set OA_ALIAS = 'WriteOffRepresentativeBonusesCount', OA_NAME = 'Количество списанных баллов со счёта представителя', OA_NAMELAT = 'Write-off representative bonuses count'
	where OA_ID = 300006
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 300009)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_NAMELAT, OA_TABLEID)
	VALUES (300009, 'WriteOffBonusesByAgencyKey', 'Ключ агентства', 'Write-off partner key', 0)
END
GO


IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 300010)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_NAMELAT, OA_TABLEID)
	VALUES (300010, 'WriteOffAgencyBonusesCount', 'Количество списанных баллов с агентского счёта', 'Write-off partner bonuses count', 0)
END
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 300011)
BEGIN
	INSERT INTO ObjectAliases (OA_ID, OA_ALIAS, OA_NAME, OA_NAMELAT, OA_TABLEID)
	VALUES (300011, 'WriteOffAgencyBonusesToPrice', 'Сумма, списанная со счёта бонусами агентства', 'Write-off partner bonuses price', 0)
END
GO
/*********************************************************************/
/* end (2014.11.20)_Insert_ObjectAliases.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.20)_Insert_ObjectAliases.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_Accmdmentype.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.11.28)_AlterTable_Accmdmentype.sql */
/*********************************************************************/
--Скрипт делает следующее:
--1. Удаляет зависящие от колонок объекты;
--2. Заменяет значения null в колонках на пустую строку;
--3. Делает колонки not null;
--4. Воссоздает зависящие от колонок объекты.

declare @colName as ListNvarcharValue

insert into @colName values ('AC_CODE')
exec RecreateDependentObjects 'Accmdmentype', @colName,
	'
		UPDATE Accmdmentype SET AC_CODE='''' WHERE AC_CODE IS NULL
		ALTER TABLE Accmdmentype ALTER column AC_CODE VARCHAR(70) NOT NULL
	'

delete from @colName
insert into @colName values ('AC_NAME')
exec RecreateDependentObjects 'Accmdmentype', @colName,
	'
		UPDATE Accmdmentype SET AC_NAME='''' WHERE AC_NAME IS NULL
		ALTER TABLE Accmdmentype ALTER column AC_NAME VARCHAR(70) NOT NULL
	'

delete from @colName
insert into @colName values ('AC_NAMELAT')
exec RecreateDependentObjects 'Accmdmentype', @colName,
	'
		UPDATE Accmdmentype SET AC_NAMELAT='''' WHERE AC_NAMELAT IS NULL
		ALTER TABLE Accmdmentype ALTER column AC_NAMELAT VARCHAR(70) NOT NULL
	'

GO
/*********************************************************************/
/* end (2014.11.28)_AlterTable_Accmdmentype.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_Accmdmentype.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_Rooms.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.11.28)_AlterTable_Rooms.sql */
/*********************************************************************/
--Скрипт делает следующее:
--1. Удаляет зависящие от колонок объекты;
--2. Заменяет значения null в колонках на пустую строку;
--3. Делает колонки not null;
--4. Воссоздает зависящие от колонок объекты.

declare @colName as ListNvarcharValue

insert into @colName values ('RM_CODE')
exec RecreateDependentObjects 'Rooms', @colName,
	'
		UPDATE Rooms SET RM_CODE='''' WHERE RM_CODE IS NULL
		ALTER TABLE Rooms ALTER column RM_CODE VARCHAR(25) NOT NULL
	'

delete from @colName
insert into @colName values ('RM_NAME')
exec RecreateDependentObjects 'Rooms', @colName,
	'
		UPDATE Rooms SET RM_NAME='''' WHERE RM_NAME IS NULL
		ALTER TABLE Rooms ALTER column RM_NAME VARCHAR(60) NOT NULL
	'

delete from @colName
insert into @colName values ('RM_NAMELAT')
exec RecreateDependentObjects 'Rooms', @colName,
	'
		UPDATE Rooms SET RM_NAMELAT='''' WHERE RM_NAMELAT IS NULL
		ALTER TABLE Rooms ALTER column RM_NAMELAT VARCHAR(60) NOT NULL
	'

GO
/*********************************************************************/
/* end (2014.11.28)_AlterTable_Rooms.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_Rooms.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_RoomsCategory.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.11.28)_AlterTable_RoomsCategory.sql */
/*********************************************************************/
--Скрипт делает следующее:
--1. Удаляет зависящие от колонок объекты;
--2. Заменяет значения null в колонках на пустую строку;
--3. Делает колонки not null;
--4. Воссоздает зависящие от колонок объекты.

declare @colName as ListNvarcharValue

insert into @colName values ('RC_CODE')
exec RecreateDependentObjects 'RoomsCategory', @colName,
	'
		UPDATE RoomsCategory SET RC_CODE='''' WHERE RC_CODE IS NULL
		ALTER TABLE RoomsCategory ALTER column RC_CODE VARCHAR(40) NOT NULL
	'

delete from @colName
insert into @colName values ('RC_NAME')
exec RecreateDependentObjects 'RoomsCategory', @colName,
	'
		UPDATE RoomsCategory SET RC_NAME='''' WHERE RC_NAME IS NULL
		ALTER TABLE RoomsCategory ALTER column RC_NAME VARCHAR(60) NOT NULL
	'

delete from @colName
insert into @colName values ('RC_NAMELAT')
exec RecreateDependentObjects 'RoomsCategory', @colName,
	'
		UPDATE RoomsCategory SET RC_NAMELAT='''' WHERE RC_NAMELAT IS NULL
		ALTER TABLE RoomsCategory ALTER column RC_NAMELAT VARCHAR(60) NOT NULL
	'

GO
/*********************************************************************/
/* end (2014.11.28)_AlterTable_RoomsCategory.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.11.28)_AlterTable_RoomsCategory.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.12.05)_Create_Table_TourInPriceExpressQueue.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.12.05)_Create_Table_TourInPriceExpressQueue.sql */
/*********************************************************************/
--создаём таблицу [TourInPriceExpressQueue] для хранения очереди расчёта тура в новой табличном формате
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[TourInPriceExpressQueue]') AND type in (N'U'))
begin
	CREATE TABLE [dbo].[TourInPriceExpressQueue](
		[TPE_TrKey] [int] NOT NULL,
		[TPE_CreateDate] [datetime] NULL,
		[TPE_PlannedCalculatedTime] [datetime] NULL,
		[TPE_CalculateStatus] [tinyint] NULL,
		[TPE_BalanserStatus] [tinyint] NULL,
		[TPE_CaclulatedBeginTime] [datetime] NULL,
		[TPE_CaclulatedEndTime] [datetime] NULL,
		[TPE_CalculatedServerAddress] [nvarchar](256) NULL,
		[TPE_CalculateException] [nvarchar](max) NULL,
		[TPE_BalanserHost] [nvarchar](256) NULL,
		[TPE_BalanserLastAccess] [datetime] NULL,
		[TPE_Priority] [tinyint] NULL,
	 CONSTRAINT [PK_TourInPriceExpressQueue] PRIMARY KEY ([TPE_TrKey]),
	 CONSTRAINT [FK_TourInPriceExpressQueue_tbl_TurList] FOREIGN KEY ([TPE_TrKey]) REFERENCES [dbo].[tbl_TurList]([TL_KEY]) ON DELETE CASCADE)
end
GO
GRANT SELECT, INSERT, UPDATE, DELETE ON [dbo].[TourInPriceExpressQueue] TO PUBLIC
GO
/*********************************************************************/
/* end (2014.12.05)_Create_Table_TourInPriceExpressQueue.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.12.05)_Create_Table_TourInPriceExpressQueue.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.12.16)_Alter_Table_InsuranceAdditionalRisks.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014.12.16)_Alter_Table_InsuranceAdditionalRisks.sql */
/*********************************************************************/
--<DATE>2014-12-16</DATE>
--<VERSION>9.2.21</VERSION>
if not exists (select * from syscolumns where name='IAR_CNKey' and id=object_id('dbo.InsuranceAdditionalRisks'))
	and EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InsuranceAdditionalRisks]') AND type in (N'U'))
begin
	alter table dbo.InsuranceAdditionalRisks add IAR_CNKey int not NULL
end
go

if not exists (select * from syscolumns where name='IAR_PeriodFrom' and id=object_id('dbo.InsuranceAdditionalRisks'))
	and EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InsuranceAdditionalRisks]') AND type in (N'U'))
begin
	alter table dbo.InsuranceAdditionalRisks add IAR_PeriodFrom int null
end
go

if not exists (select * from syscolumns where name='IAR_PeriodTo' and id=object_id('dbo.InsuranceAdditionalRisks'))
	and EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InsuranceAdditionalRisks]') AND type in (N'U'))
begin
	alter table dbo.InsuranceAdditionalRisks add IAR_PeriodTo int null
end
go
/*********************************************************************/
/* end (2014.12.16)_Alter_Table_InsuranceAdditionalRisks.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014.12.16)_Alter_Table_InsuranceAdditionalRisks.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014_06_19)_AlterTable_BillsToBills.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin (2014_06_19)_AlterTable_BillsToBills.sql */
/*********************************************************************/
if exists(select * from sys.foreign_keys k left join sys.tables t on k.parent_object_id = t.object_id where k.name = 'BB_BLIN' and t.name = 'BillsToBills')
begin
	ALTER TABLE [dbo].[BillsToBills] DROP CONSTRAINT [BB_BLIN];
end

ALTER TABLE [dbo].[BillsToBills]  WITH NOCHECK 
	ADD CONSTRAINT [BB_BLIN] FOREIGN KEY([BB_BLIN]) 
	REFERENCES [dbo].[Bills] ([BL_KEY])
    ON DELETE CASCADE;

GO
/*********************************************************************/
/* end (2014_06_19)_AlterTable_BillsToBills.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '(2014_06_19)_AlterTable_BillsToBills.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddInfoColumn_Communications.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin AddInfoColumn_Communications.sql */
/*********************************************************************/
if not exists (select 1 from dbo.syscolumns where name = 'CM_Info' and id = object_id(N'[dbo].[communications]'))
    alter table [communications]
    add [CM_Info] varchar(1000)
go

/*********************************************************************/
/* end AddInfoColumn_Communications.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddInfoColumn_Communications.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddMISToCheckPluginVersionExclusions.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin AddMISToCheckPluginVersionExclusions.sql */
/*********************************************************************/
IF (NOT EXISTS(SELECT * FROM CheckPluginVersionExclusions WHERE CPV_PluginName='Megatec.MasterTour.Plugins.ImportManager.dll'))
    INSERT INTO CheckPluginVersionExclusions VALUES ('Megatec.MasterTour.Plugins.ImportManager.dll')

go

/*********************************************************************/
/* end AddMISToCheckPluginVersionExclusions.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'AddMISToCheckPluginVersionExclusions.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'ALTER_Mappings_MP_Value.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin ALTER_Mappings_MP_Value.sql */
/*********************************************************************/

-- расширяет поле MP_Value таблицы Mappings до 100 символов

ALTER TABLE [Mappings] ALTER COLUMN [MP_Value] VARCHAR(100) NOT NULL

GO

/*********************************************************************/
/* end ALTER_Mappings_MP_Value.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'ALTER_Mappings_MP_Value.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DeleteUnusedScriptsWithFnPrefix.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin DeleteUnusedScriptsWithFnPrefix.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetAccmdNameByHRKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetAccmdNameByHRKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetHRKeyByRCKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetHRKeyByRCKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetHRKeyByRCKeyAndRMKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetHRKeyByRCKeyAndRMKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetHRKeyByRMKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetHRKeyByRMKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetRCKeyByHRKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetRCKeyByHRKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetRMKeyByHRKey]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetRMKeyByHRKey]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetRoomCtgrName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetRoomCtgrName]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetRoomName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetRoomName]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetSVCodeName]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetSVCodeName]

GO
/*********************************************************************/
/* end DeleteUnusedScriptsWithFnPrefix.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DeleteUnusedScriptsWithFnPrefix.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DeleteUnusedScriptsWithSPPrefix.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin DeleteUnusedScriptsWithSPPrefix.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_AddPartnerOld]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_AddPartnerOld]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_ChangeIvalidReservationState]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_ChangeIvalidReservationState]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_CollapsePartner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_CollapsePartner]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_CollapsePartnerUpdateSearchTables]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_CollapsePartnerUpdateSearchTables]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_DelClient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_DelClient]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_DelPartner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_DelPartner]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetClientEMailList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetClientEMailList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetClientFaxList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetClientFaxList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetClientList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetClientList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetClientTypeList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetClientTypeList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetPartnerEMailList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPartnerEMailList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetPartnerFaxList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPartnerFaxList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetPartnerList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPartnerList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetPartnerTypeList]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPartnerTypeList]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_is_member]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_is_member]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_MovePartner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_MovePartner]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_UpdatePartnerOld]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_UpdatePartnerOld]

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_VerifyEMailSubscription]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_VerifyEMailSubscription]

GO
/*********************************************************************/
/* end DeleteUnusedScriptsWithSPPrefix.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DeleteUnusedScriptsWithSPPrefix.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DisableTriggersOnSubscriber.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin DisableTriggersOnSubscriber.sql */
/*********************************************************************/
-- ===================== Disable triggers on all tables on subscriber (excluding some special tables)
if dbo.mwReplIsSubscriber() > 0
begin	

	-- do not disable triggers on this tables
	declare @excludedTables table
	(
		tableName varchar(50)
	)

	insert into @excludedTables values ('mwReplTours')
	insert into @excludedTables values ('tp_tours')
	insert into @excludedTables values ('Charter')

	declare @tabName as varchar(max)

	declare tabsCur cursor for
	select name
	from sys.tables
	where name not in (select tableName from @excludedTables)
	order by name

	open tabsCur

	declare @sql varchar(4000)

	fetch next from tabsCur into @tabName
	while @@fetch_status = 0
	begin

		set @sql = 'alter table [@tabName] disable trigger all'
		set @sql = replace(@sql, '@tabName', @tabName)

		exec (@sql)

		fetch next from tabsCur into @tabName

	end

	close tabsCur
	deallocate tabsCur
	
	begin try
		exec (@sql)
	end try
	begin catch
		declare @errMsg as nvarchar(max)
		set @errMsg = 'Не удалось отключить триггеры в таблицах поисковой базы. Пожалуйста, сообщите об этом службе поддержки. Причина: ' + error_message();
		RAISERROR(@errMsg, 1, 1)
	end catch
end

GO
/*********************************************************************/
/* end DisableTriggersOnSubscriber.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'DisableTriggersOnSubscriber.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetServiceLink.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_GetServiceLink.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetServiceLink]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetServiceLink]
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: 02.08.2010
-- Description:	Возвращает true если по классу услуг есть связь
-- =============================================
CREATE FUNCTION [dbo].[fn_GetServiceLink](@sv_key int)
RETURNS int
AS
BEGIN
	if ISNULL((SELECT ST_VERSION FROM Setting),'') like '7.2%' or ISNULL((SELECT ST_VERSION FROM Setting),'') like '8.1%' or ISNULL((SELECT ST_VERSION FROM Setting),'') like '9.2%'
	BEGIN
		-- если старая версия то проверяем только эти связи
		if (	EXISTS (SELECT dl_key FROM dbo.tbl_DogovorList WHERE dl_svkey = @sv_key) OR
				EXISTS (SELECT to_key FROM dbo.TourServiceList WHERE to_svkey = @sv_key) OR
				EXISTS (SELECT ts_key FROM dbo.TP_Services WHERE ts_svkey = @sv_key) OR
				EXISTS (SELECT sr_id FROM dbo.StatusRules WHERE SR_ExcludeServiceId = @sv_key)
			)	
		BEGIN
			RETURN(1)
		END
	END
	ELSE
	BEGIN
		-- если версия новее то проверяем все связи
		if (	EXISTS (SELECT dl_key FROM dbo.tbl_DogovorList WHERE dl_svkey = @sv_key) OR
				EXISTS (SELECT to_key FROM dbo.TourServiceList WHERE to_svkey = @sv_key) OR
				EXISTS (SELECT ts_key FROM dbo.TP_Services WHERE ts_svkey = @sv_key) OR
				EXISTS (SELECT co_id FROM dbo.CostOffers WHERE co_svkey = @sv_key) OR
				EXISTS (SELECT cos_id FROM dbo.CostOfferServices WHERE cos_svkey = @sv_key) OR
				EXISTS (SELECT st_id FROM dbo.ServiceTariffs WHERE st_svkey = @sv_key) OR
				EXISTS (SELECT sr_id FROM dbo.StatusRules WHERE SR_ExcludeServiceId = @sv_key)
			)	
		BEGIN
			RETURN(1)
		END
	END

	RETURN(0)
END
GO

GRANT EXEC ON [dbo].[fn_GetServiceLink] TO PUBLIC
GO


/*********************************************************************/
/* end fn_GetServiceLink.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetServiceLink.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetSvCode1Name.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_GetSvCode1Name.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetSvCode1Name]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetSvCode1Name]
GO

CREATE FUNCTION [dbo].[fn_GetSvCode1Name]
(
--<VERSION>9.2.20.0</VERSION>
--<DATE>2014-11-21</DATE>
--Используется в экране PacketCostsCopying
	@nSvKey INT,
	@nCode1 INT,
	@useLatinVersion BIT = 0
) RETURNS varchar(50)
BEGIN
DECLARE
	@sTitle varchar(50),
	@sName varchar(50),
	@sTitleLat varchar(50),
	@sNameLat varchar(50),
	@nRoom INT,
	@nCategory INT,
	@nAccmdmentype INT,
	@sNameCategory VARCHAR(800),
	@sNameCategoryLat VARCHAR(800),
	@nHrMain INT,
	@nAgeFrom INT,
	@nAgeTo INT,
	@sAcCode VARCHAR(800),
	@sAcCodeLat VARCHAR(800),
	@sTmp VARCHAR(800),
	@bTmp INT,

	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
		
	Set @sName = ''

	IF @nSvKey = @TYPE_FLIGHT
	BEGIN
		SET @sTitle = 'Тариф'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Tariff'
		SET @sNameLat = 'Any'

		IF EXISTS(SELECT * FROM dbo.AirService WHERE AS_Key = @nCode1) and (@nCode1 <> -1)
			SELECT	@sName = IsNull(AS_Code, '') + '-' + AS_NameRus,
				@sNameLat = IsNull(AS_Code, '') + '-' + IsNull(AS_NameLat, AS_NameRus)
			FROM 	dbo.AirService 
			WHERE	AS_Key = @nCode1
	END
	ELSE
	IF (@nSvKey = @TYPE_TRANSFER) or (@nSvKey = @TYPE_EXCUR)
	BEGIN
		SET @sTitle = 'Транспорт'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Transport'
		SET @sNameLat = 'Any'
		
		IF EXISTS(SELECT * FROM dbo.Transport WHERE TR_Key = @nCode1)
			SELECT 	@sName = TR_Name + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5)),
				@sNameLat = IsNull(TR_NameLat, TR_Name) + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5))
			FROM 	dbo.Transport 
			WHERE 	TR_Key = @nCode1
	END
	ELSE
	IF (@nSvKey = @TYPE_HOTEL OR @nSvKey = @TYPE_HOTELADDSRV)
	BEGIN
		IF @nCode1 = 0
			BEGIN
				SET @sName = 'Все категории'
			END
		ELSE	
			BEGIN
				SELECT @nCategory=HR_RCKEY FROM HotelRooms WITH(NOLOCK) WHERE HR_KEY=@nCode1
				
				If @nCategory = 0
				begin
					Set @sNameCategory = 'Все категории'
				end
				else
				begin	
					Set @sNameCategory = 'Неизвестная категория'
					SELECT @sNameCategory = RC_Name from dbo.RoomsCategory where RC_Key=@nCategory
				end

				Set @sName = @sNameCategory
			END
			
			if isnull((select SS_ParmValue from SystemSettings where SS_ParmName = 'CartAccmdMenTypeView'), 0) = 0
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Name, ''),  @sAcCodeLat = IsNull(AC_NameLat, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)				
			end
			else
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Code, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)
			end
	END
	ELSE
	if (@nSvKey = @TYPE_SHIPADDSRV or @nSvKey = @TYPE_SHIP)
	BEGIN
		IF @nCode1 = 0
		BEGIN
			Set @sTitle = 'Каюта'
			Set @sName = 'Все каюты'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'All cabins'
		END
		ELSE
		BEGIN
			SET @sTitle = 'Каюта'
			SET @sName = 'Любая'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'Any'

			IF EXISTS( SELECT * FROM dbo.Cabine WHERE CB_Key = @nCode1 )
				SELECT	@sName = CB_Code + ',' + CB_Category + ',' + CB_Name,
					@sNameLat = CB_Code + ',' + CB_Category + ',' + ISNULL(CB_NameLat,CB_Name)
				FROM dbo.Cabine 
				WHERE CB_Key = @nCode1
		END
	END
	ELSE if (@nSvKey = @TYPE_VISA)
	BEGIN
		Select @bTmp = SV_IsSubCode1 from [Service] with(nolock) where SV_Key=@TYPE_VISA
	
		IF @bTmp > 0
		BEGIN
			SET @sTitle = 'Доп.описание'
			SET @sName = 'Любое'
			SET @sTitleLat = 'Add.description'
			SET @sNameLat = 'Any'
			
			IF EXISTS(SELECT * FROM dbo.AddDescript1 WHERE A1_Key = @nCode1)
				SELECT	@sName = A1_Name + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END), 
					@sNameLat = ISNULL(A1_NameLat,A1_Name) + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END)
				FROM dbo.AddDescript1 
				WHERE A1_Key = @nCode1
		END
		ELSE
		BEGIN
			SET @sTitle = ''
			SET @sTitleLat = ''
		END
	END
	ELSE
	BEGIN
		Select @bTmp = SV_IsSubCode1 from [Service] with(nolock) where SV_Key=@nSvKey
	
		IF @bTmp > 0
		BEGIN
			SET @sTitle = 'Доп.описание'
			SET @sName = 'Любое'
			SET @sTitleLat = 'Add.description'
			SET @sNameLat = 'Any'
			
			IF EXISTS(SELECT * FROM dbo.AddDescript1 WHERE A1_Key = @nCode1)
				SELECT	@sName = A1_Name + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END), 
					@sNameLat = ISNULL(A1_NameLat,A1_Name) + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END)
				FROM dbo.AddDescript1 
				WHERE A1_Key = @nCode1
		END
		ELSE
		BEGIN
			SET @sName = 'Без доп.описания'
			SET @sTitle = ''
			SET @sTitleLat = ''
		END
	END
	
	if @useLatinVersion = 1
		return ISNULL(@sNameLat, @sName)
	return @sName
END
GO

GRANT EXEC ON [dbo].[fn_GetSvCode1Name] TO PUBLIC
GO
/*********************************************************************/
/* end fn_GetSvCode1Name.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetSvCode1Name.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetSvCode2Name.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_GetSvCode2Name.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_GetSvCode2Name]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_GetSvCode2Name]
GO

CREATE FUNCTION [dbo].[fn_GetSvCode2Name]
(
--<VERSION>9.2.20.0</VERSION>
--<DATE>2014-11-21</DATE>
--Используется в экране PacketCostsCopying
	@nSvKey INT,
	@nCode2 INT,
	@useLatinVersion BIT = 0
) RETURNS varchar(50)
BEGIN
	DECLARE
	@sResult varchar(50),
	@sResultLat varchar(50),
	@nMain INT,
	@nAgeFrom INT,
	@nAgeTo INT,
	
	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT,
	@sTempString VARCHAR(800),
	@nTempNumber INT
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
	
	Set @sResult = ''
	Set @sResultLat = ''
	
	-- Проживание
	IF @nSvKey = @TYPE_HOTEL 
		BEGIN
			IF EXISTS(SELECT * FROM	dbo.Pansion WHERE PN_Key = @nCode2)
				SELECT 	@sResult = IsNull(PN_Code, '') + ' ' + PN_Name,
					@sResultLat = IsNull(PN_Code, '') + ' ' + IsNull(PN_NameLat, PN_Name)
				FROM 	dbo.Pansion 
				WHERE 	PN_Key = @nCode2
		END	
	ELSE
	-- Круиз
	IF @nSvKey = @TYPE_SHIP
	BEGIN
		IF EXISTS(SELECT * FROM dbo.AccmdMenType WHERE AC_Key = @nCode2)
			SELECT  @sResult = IsNull(AC_Code, ''), 
				@sResultLat = IsNull(AC_Code, ''), 
				@nMain = IsNull(AC_Main, 0), 
				@nAgeFrom = IsNull(AC_AgeFrom, 0), 
				@nAgeTo = IsNull(AC_AgeTo, 0) 
			FROM 	dbo.AccmdMenType 
			WHERE 	AC_Key = @nCode2
	END
	ELSE
	-- Для всех остальных случаев
	BEGIN		
		--EXEC dbo.GetSvListParm @nSvKey, 'CODE2', @nTempNumber output
			
		DECLARE @bIsCode2 INT

		Select @bIsCode2 = SV_IsSubCode2 from dbo.Service where SV_Key=@nSvKey

		If @bIsCode2 <= 0
			Set @bIsCode2 = 0
		
		Set @nTempNumber = @bIsCode2
		
		IF @nTempNumber > 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.AddDescript2 WHERE A2_Key = @nCode2)
				SELECT	@sResult = A2_Name + (case when LEN(A2_Code) > 0 then ( ',' + IsNull(A2_Code, '') ) else '' end),
					@sResultLat = IsNull(A2_NameLat, A2_Name) + (case when LEN(A2_Code) > 0 then ( ',' + IsNull(A2_Code, '') ) else '' end)
				FROM dbo.AddDescript2 
				WHERE A2_Key = @nCode2
		END
	END
	
	IF (@nSvKey = @TYPE_SHIP) AND (@nCode2 > 0)
	BEGIN
		IF (@nMain > 0)
		BEGIN
			SET @sResult = @sResult + ',Осн'
			SET @sResultLat = @sResultLat + ',Main'
		END
		ELSE
		BEGIN
			SET @sResult = @sResult + ',доп'
			SET @sResultLat = @sResultLat + ',ex.b'
			IF @nAgeFrom >= 0
			BEGIN
				SET @sTempString = '(' + CAST( @nAgeFrom as varchar(5) ) + '-' +  CAST( @nAgeTo as varchar(5) ) + ')'
				SET @sResult = @sResult + @sTempString
				SET @sResultLat = @sResultLat + @sTempString
			END
		END
	END
	
	if @useLatinVersion = 1
		return ISNULL(@sResultLat, @sResult)
	return @sResult
END
GO

GRANT EXEC ON [dbo].[fn_GetSvCode2Name] TO PUBLIC
GO
/*********************************************************************/
/* end fn_GetSvCode2Name.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_GetSvCode2Name.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwGetFlightAndCommissionServicesCosts.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwGetFlightAndCommissionServicesCosts.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[fn_mwGetFlightAndCommissionServicesCosts]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[fn_mwGetFlightAndCommissionServicesCosts]
GO

-- Хранимка возвращает суммарные стоимости всех перелетов и всех комиссионных услуг, на момент рассчета прайса
-- <date>2014-02-10</date>
-- <version>2009.02.20.8</version>

CREATE FUNCTION [dbo].[fn_mwGetFlightAndCommissionServicesCosts] ( @priceKey int )
RETURNS @result TABLE
(
	flightGross money,
	commissionGross money
)
BEGIN
	declare @flightGross money
	declare @commissionGross money
	
	-- Сумма стоимостей всех перелетов
	select @flightGross = (
		(case when [SVKEY_1] = 1 then (case when [SCPId_1] is not null then [Gross_1] else 0 end) * (1 + (isnull( [MarginPercent_1], 0)/100) * (1 + (isnull( [IsCommission_1], 0) - 1) * isnull( [CommissionOnly_1], 0))) + isnull( [AddCostIsCommission_1], 0) * (1 + (isnull( [MarginPercent_1], 0)/100)) + isnull( [AddCostNoCommission_1], 0) * (1 + (isnull( [MarginPercent_1], 0)/100) * (1 - isnull( [CommissionOnly_1], 0))) else 0 end) +
		(case when [SVKEY_2] = 1 then (case when [SCPId_2] is not null then [Gross_2] else 0 end) * (1 + (isnull( [MarginPercent_2], 0)/100) * (1 + (isnull( [IsCommission_2], 0) - 1) * isnull( [CommissionOnly_2], 0))) + isnull( [AddCostIsCommission_2], 0) * (1 + (isnull( [MarginPercent_2], 0)/100)) + isnull( [AddCostNoCommission_2], 0) * (1 + (isnull( [MarginPercent_2], 0)/100) * (1 - isnull( [CommissionOnly_2], 0))) else 0 end) +
		(case when [SVKEY_3] = 1 then (case when [SCPId_3] is not null then [Gross_3] else 0 end) * (1 + (isnull( [MarginPercent_3], 0)/100) * (1 + (isnull( [IsCommission_3], 0) - 1) * isnull( [CommissionOnly_3], 0))) + isnull( [AddCostIsCommission_3], 0) * (1 + (isnull( [MarginPercent_3], 0)/100)) + isnull( [AddCostNoCommission_3], 0) * (1 + (isnull( [MarginPercent_3], 0)/100) * (1 - isnull( [CommissionOnly_3], 0))) else 0 end) +
		(case when [SVKEY_4] = 1 then (case when [SCPId_4] is not null then [Gross_4] else 0 end) * (1 + (isnull( [MarginPercent_4], 0)/100) * (1 + (isnull( [IsCommission_4], 0) - 1) * isnull( [CommissionOnly_4], 0))) + isnull( [AddCostIsCommission_4], 0) * (1 + (isnull( [MarginPercent_4], 0)/100)) + isnull( [AddCostNoCommission_4], 0) * (1 + (isnull( [MarginPercent_4], 0)/100) * (1 - isnull( [CommissionOnly_4], 0))) else 0 end) +
		(case when [SVKEY_5] = 1 then (case when [SCPId_5] is not null then [Gross_5] else 0 end) * (1 + (isnull( [MarginPercent_5], 0)/100) * (1 + (isnull( [IsCommission_5], 0) - 1) * isnull( [CommissionOnly_5], 0))) + isnull( [AddCostIsCommission_5], 0) * (1 + (isnull( [MarginPercent_5], 0)/100)) + isnull( [AddCostNoCommission_5], 0) * (1 + (isnull( [MarginPercent_5], 0)/100) * (1 - isnull( [CommissionOnly_5], 0))) else 0 end) +
		(case when [SVKEY_6] = 1 then (case when [SCPId_6] is not null then [Gross_6] else 0 end) * (1 + (isnull( [MarginPercent_6], 0)/100) * (1 + (isnull( [IsCommission_6], 0) - 1) * isnull( [CommissionOnly_6], 0))) + isnull( [AddCostIsCommission_6], 0) * (1 + (isnull( [MarginPercent_6], 0)/100)) + isnull( [AddCostNoCommission_6], 0) * (1 + (isnull( [MarginPercent_6], 0)/100) * (1 - isnull( [CommissionOnly_6], 0))) else 0 end) +
		(case when [SVKEY_7] = 1 then (case when [SCPId_7] is not null then [Gross_7] else 0 end) * (1 + (isnull( [MarginPercent_7], 0)/100) * (1 + (isnull( [IsCommission_7], 0) - 1) * isnull( [CommissionOnly_7], 0))) + isnull( [AddCostIsCommission_7], 0) * (1 + (isnull( [MarginPercent_7], 0)/100)) + isnull( [AddCostNoCommission_7], 0) * (1 + (isnull( [MarginPercent_7], 0)/100) * (1 - isnull( [CommissionOnly_7], 0))) else 0 end) +
		(case when [SVKEY_8] = 1 then (case when [SCPId_8] is not null then [Gross_8] else 0 end) * (1 + (isnull( [MarginPercent_8], 0)/100) * (1 + (isnull( [IsCommission_8], 0) - 1) * isnull( [CommissionOnly_8], 0))) + isnull( [AddCostIsCommission_8], 0) * (1 + (isnull( [MarginPercent_8], 0)/100)) + isnull( [AddCostNoCommission_8], 0) * (1 + (isnull( [MarginPercent_8], 0)/100) * (1 - isnull( [CommissionOnly_8], 0))) else 0 end) +
		(case when [SVKEY_9] = 1 then (case when [SCPId_9] is not null then [Gross_9] else 0 end) * (1 + (isnull( [MarginPercent_9], 0)/100) * (1 + (isnull( [IsCommission_9], 0) - 1) * isnull( [CommissionOnly_9], 0))) + isnull( [AddCostIsCommission_9], 0) * (1 + (isnull( [MarginPercent_9], 0)/100)) + isnull( [AddCostNoCommission_9], 0) * (1 + (isnull( [MarginPercent_9], 0)/100) * (1 - isnull( [CommissionOnly_9], 0))) else 0 end) +
		(case when [SVKEY_10] = 1 then (case when [SCPId_10] is not null then [Gross_10] else 0 end) * (1 + (isnull([MarginPercent_10], 0)/100) * (1 + (isnull([IsCommission_10], 0) - 1) * isnull([CommissionOnly_10], 0))) + isnull([AddCostIsCommission_10], 0) * (1 + (isnull([MarginPercent_10], 0)/100)) + isnull([AddCostNoCommission_10], 0) * (1 + (isnull([MarginPercent_10], 0)/100) * (1 - isnull([CommissionOnly_10], 0))) else 0 end) +
		(case when [SVKEY_11] = 1 then (case when [SCPId_11] is not null then [Gross_11] else 0 end) * (1 + (isnull([MarginPercent_11], 0)/100) * (1 + (isnull([IsCommission_11], 0) - 1) * isnull([CommissionOnly_11], 0))) + isnull([AddCostIsCommission_11], 0) * (1 + (isnull([MarginPercent_11], 0)/100)) + isnull([AddCostNoCommission_11], 0) * (1 + (isnull([MarginPercent_11], 0)/100) * (1 - isnull([CommissionOnly_11], 0))) else 0 end) +
		(case when [SVKEY_12] = 1 then (case when [SCPId_12] is not null then [Gross_12] else 0 end) * (1 + (isnull([MarginPercent_12], 0)/100) * (1 + (isnull([IsCommission_12], 0) - 1) * isnull([CommissionOnly_12], 0))) + isnull([AddCostIsCommission_12], 0) * (1 + (isnull([MarginPercent_12], 0)/100)) + isnull([AddCostNoCommission_12], 0) * (1 + (isnull([MarginPercent_12], 0)/100) * (1 - isnull([CommissionOnly_12], 0))) else 0 end) +
		(case when [SVKEY_13] = 1 then (case when [SCPId_13] is not null then [Gross_13] else 0 end) * (1 + (isnull([MarginPercent_13], 0)/100) * (1 + (isnull([IsCommission_13], 0) - 1) * isnull([CommissionOnly_13], 0))) + isnull([AddCostIsCommission_13], 0) * (1 + (isnull([MarginPercent_13], 0)/100)) + isnull([AddCostNoCommission_13], 0) * (1 + (isnull([MarginPercent_13], 0)/100) * (1 - isnull([CommissionOnly_13], 0))) else 0 end) +
		(case when [SVKEY_14] = 1 then (case when [SCPId_14] is not null then [Gross_14] else 0 end) * (1 + (isnull([MarginPercent_14], 0)/100) * (1 + (isnull([IsCommission_14], 0) - 1) * isnull([CommissionOnly_14], 0))) + isnull([AddCostIsCommission_14], 0) * (1 + (isnull([MarginPercent_14], 0)/100)) + isnull([AddCostNoCommission_14], 0) * (1 + (isnull([MarginPercent_14], 0)/100) * (1 - isnull([CommissionOnly_14], 0))) else 0 end) +
		(case when [SVKEY_15] = 1 then (case when [SCPId_15] is not null then [Gross_15] else 0 end) * (1 + (isnull([MarginPercent_15], 0)/100) * (1 + (isnull([IsCommission_15], 0) - 1) * isnull([CommissionOnly_15], 0))) + isnull([AddCostIsCommission_15], 0) * (1 + (isnull([MarginPercent_15], 0)/100)) + isnull([AddCostNoCommission_15], 0) * (1 + (isnull([MarginPercent_15], 0)/100) * (1 - isnull([CommissionOnly_15], 0))) else 0 end)
    )
    from TP_PRICECOMPONENTS with(nolock) where pc_tpkey = @priceKey
                              
	
	-- Сумма стоимостей всех услуг, на которые дается скидка
	
	select @commissionGross = (
		(case when [IsCommission_1] = 1 then (case when [SCPId_1] is not null then [Gross_1] else 0 end) * (1 + (isnull( [MarginPercent_1], 0)/100) * isnull( [CommissionOnly_1], 0)) + isnull( [AddCostIsCommission_1], 0) * (1 + (isnull( [MarginPercent_1], 0)/100)) else 0 end) +
		(case when [IsCommission_2] = 1 then (case when [SCPId_2] is not null then [Gross_2] else 0 end) * (1 + (isnull( [MarginPercent_2], 0)/100) * isnull( [CommissionOnly_2], 0)) + isnull( [AddCostIsCommission_2], 0) * (1 + (isnull( [MarginPercent_2], 0)/100)) else 0 end) +
		(case when [IsCommission_3] = 1 then (case when [SCPId_3] is not null then [Gross_3] else 0 end) * (1 + (isnull( [MarginPercent_3], 0)/100) * isnull( [CommissionOnly_3], 0)) + isnull( [AddCostIsCommission_3], 0) * (1 + (isnull( [MarginPercent_3], 0)/100)) else 0 end) +
		(case when [IsCommission_4] = 1 then (case when [SCPId_4] is not null then [Gross_4] else 0 end) * (1 + (isnull( [MarginPercent_4], 0)/100) * isnull( [CommissionOnly_4], 0)) + isnull( [AddCostIsCommission_4], 0) * (1 + (isnull( [MarginPercent_4], 0)/100)) else 0 end) +
		(case when [IsCommission_5] = 1 then (case when [SCPId_5] is not null then [Gross_5] else 0 end) * (1 + (isnull( [MarginPercent_5], 0)/100) * isnull( [CommissionOnly_5], 0)) + isnull( [AddCostIsCommission_5], 0) * (1 + (isnull( [MarginPercent_5], 0)/100)) else 0 end) +
		(case when [IsCommission_6] = 1 then (case when [SCPId_6] is not null then [Gross_6] else 0 end) * (1 + (isnull( [MarginPercent_6], 0)/100) * isnull( [CommissionOnly_6], 0)) + isnull( [AddCostIsCommission_6], 0) * (1 + (isnull( [MarginPercent_6], 0)/100)) else 0 end) +
		(case when [IsCommission_7] = 1 then (case when [SCPId_7] is not null then [Gross_7] else 0 end) * (1 + (isnull( [MarginPercent_7], 0)/100) * isnull( [CommissionOnly_7], 0)) + isnull( [AddCostIsCommission_7], 0) * (1 + (isnull( [MarginPercent_7], 0)/100)) else 0 end) +
		(case when [IsCommission_8] = 1 then (case when [SCPId_8] is not null then [Gross_8] else 0 end) * (1 + (isnull( [MarginPercent_8], 0)/100) * isnull( [CommissionOnly_8], 0)) + isnull( [AddCostIsCommission_8], 0) * (1 + (isnull( [MarginPercent_8], 0)/100)) else 0 end) +
		(case when [IsCommission_9] = 1 then (case when [SCPId_9] is not null then [Gross_9] else 0 end) * (1 + (isnull( [MarginPercent_9], 0)/100) * isnull( [CommissionOnly_9], 0)) + isnull( [AddCostIsCommission_9], 0) * (1 + (isnull( [MarginPercent_9], 0)/100)) else 0 end) +
		(case when [IsCommission_10] = 1 then (case when [SCPId_10] is not null then [Gross_10] else 0 end) * (1 + (isnull( [MarginPercent_10], 0)/100) * isnull( [CommissionOnly_10], 0)) + isnull( [AddCostIsCommission_10], 0) * (1 + (isnull( [MarginPercent_10], 0)/100)) else 0 end) +
		(case when [IsCommission_11] = 1 then (case when [SCPId_11] is not null then [Gross_11] else 0 end) * (1 + (isnull( [MarginPercent_11], 0)/100) * isnull( [CommissionOnly_11], 0)) + isnull( [AddCostIsCommission_11], 0) * (1 + (isnull( [MarginPercent_11], 0)/100)) else 0 end) +
		(case when [IsCommission_12] = 1 then (case when [SCPId_12] is not null then [Gross_12] else 0 end) * (1 + (isnull( [MarginPercent_12], 0)/100) * isnull( [CommissionOnly_12], 0)) + isnull( [AddCostIsCommission_12], 0) * (1 + (isnull( [MarginPercent_12], 0)/100)) else 0 end) +
		(case when [IsCommission_13] = 1 then (case when [SCPId_13] is not null then [Gross_13] else 0 end) * (1 + (isnull( [MarginPercent_13], 0)/100) * isnull( [CommissionOnly_13], 0)) + isnull( [AddCostIsCommission_13], 0) * (1 + (isnull( [MarginPercent_13], 0)/100)) else 0 end) +
		(case when [IsCommission_14] = 1 then (case when [SCPId_14] is not null then [Gross_14] else 0 end) * (1 + (isnull( [MarginPercent_14], 0)/100) * isnull( [CommissionOnly_14], 0)) + isnull( [AddCostIsCommission_14], 0) * (1 + (isnull( [MarginPercent_14], 0)/100)) else 0 end) +
		(case when [IsCommission_15] = 1 then (case when [SCPId_15] is not null then [Gross_15] else 0 end) * (1 + (isnull( [MarginPercent_15], 0)/100) * isnull( [CommissionOnly_15], 0)) + isnull( [AddCostIsCommission_15], 0) * (1 + (isnull( [MarginPercent_15], 0)/100)) else 0 end)
    )
    from TP_PRICECOMPONENTS with(nolock) where pc_tpkey = @priceKey
	
	insert into @result values (@flightGross, @commissionGross)
	
	RETURN
END
GO

/*********************************************************************/
/* end fn_mwGetFlightAndCommissionServicesCosts.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwGetFlightAndCommissionServicesCosts.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwTourChKeys.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwTourChKeys.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwTourChKeys]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwTourChKeys]
GO

create function [dbo].[mwTourChKeys] (@tourkey int) returns nvarchar(256)
as
begin
     declare @result nvarchar(256)
     set @result = N''
     select @result = @result + rtrim(ltrim(str(tbl.ti_chkey))) + N', ' from (select distinct ti_chkey from tp_lists with(nolock) where ti_tokey = @tourkey and ti_chkey is not null) 
tbl 
     declare @len int
     set @len = len(@result)
     if(@len > 0)
          set @result = substring(@result, 1, @len - 1)
	return @result
end
GO

GRANT EXEC ON [dbo].[mwTourChKeys] TO PUBLIC
GO
/*********************************************************************/
/* end fn_mwTourChKeys.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwTourChKeys.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwTourChNames.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_mwTourChNames.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwTourChNames]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwTourChNames]
GO

create function [dbo].[mwTourChNames] (@tourkey int) returns nvarchar(256)
as
begin
     declare @result nvarchar(256)
     set @result = N''
     select @result = @result + rtrim(ltrim((select top 1 al_name from dbo.charter  with(nolock), dbo.airline  with(nolock) where al_code=ch_airlinecode and ch_key=ti_chkey)))
     + N', ' from (select distinct ti_chkey as ti_chkey from tp_lists  with(nolock) where ti_tokey = @tourkey and ti_chkey is not null) tbl 
     declare @len int
     set @len = len(@result)
     if(@len > 0)
          set @result = substring(@result, 1, @len - 1)
	return @result
end
GO

GRANT EXEC ON [dbo].[mwTourChNames] TO PUBLIC
GO
/*********************************************************************/
/* end fn_mwTourChNames.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_mwTourChNames.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_ParseStrings.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin fn_ParseStrings.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ParseStrings]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[ParseStrings]
GO

CREATE function [dbo].[ParseStrings](@data as varchar(max)) 
	returns @keys table(xt_string varchar(max))
begin
	if(@data is null)
		return
            
	declare @start int, @end int, @tmp varchar(max)
    set @start = 0
    set @end = charindex(',', @data, @start)
	
    while(@end > 0)
    begin
		select @tmp = RTRIM(LTRIM(substring(@data, @start, @end - @start)))
		insert into @keys(xt_string) values(@tmp)
		
		set @start = @end + 1
		set @end = charindex(',', @data, @start)
	end
	
	select @tmp = RTRIM(LTRIM(substring(@data, @start, LEN(@data) - @start + 1)))
	insert into @keys(xt_string) values(@tmp)

	return
end
GO

GRANT SELECT ON [dbo].[ParseStrings] TO PUBLIC
GO
/*********************************************************************/
/* end fn_ParseStrings.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'fn_ParseStrings.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'JOB_ClearCacheQuotas.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin JOB_ClearCacheQuotas.sql */
/*********************************************************************/
declare @errorMessage nvarchar(max)
declare @serverVersion nvarchar(128)
declare @dbName nvarchar(128)
declare @jobName varchar(255)

-- либо поисковая база в случае реплики, либо единственная и реплики нет
if (dbo.mwReplIsPublisher() = 0)
begin
	select @serverVersion = cast(serverproperty('edition') as nvarchar)
	if (@serverVersion not like '%express%')
	begin
		set @dbName = DB_NAME()

		declare @jobNames table (xName varchar(255))

		insert into @jobNames (xName)
		SELECT name 
		FROM msdb.dbo.sysjobs_view 
		where job_id in (select job_id
						 from msdb.dbo.sysjobsteps 
						 where command like '%ClearQuotaCache%' 
						 and database_name like @dbName)

		if exists (select 1 from @jobNames)
		begin
			declare jobNamesCursor cursor local fast_forward for
			select xName
			from @jobNames

			open jobNamesCursor
			fetch jobNamesCursor into @jobName
			while (@@FETCH_STATUS = 0)
			begin
				EXEC msdb.dbo.sp_delete_job @job_name = @jobName, @delete_unused_schedule=1

				fetch jobNamesCursor into @jobName
			end
			close jobNamesCursor
			deallocate jobNamesCursor
		end

		set @jobName = DB_NAME() + '_ClearCacheQuotas'

		BEGIN TRANSACTION

			DECLARE @ReturnCode INT
			SELECT @ReturnCode = 0

			IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
			BEGIN
				EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
				IF (@@ERROR <> 0 OR @ReturnCode <> 0)
					GOTO QuitWithRollback
			END

			DECLARE @jobId BINARY(16)
			EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name=@jobName, 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'Удаляет неактуальные данные из таблицы CacheQuotas', 
			@category_name=N'[Uncategorized (Local)]', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

			EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'ClearCacheQuotas', 
					@step_id=1, 
					@cmdexec_success_code=0, 
					@on_success_action=1, 
					@on_success_step_id=0, 
					@on_fail_action=2, 
					@on_fail_step_id=0, 
					@retry_attempts=0, 
					@retry_interval=0, 
					@os_run_priority=0, @subsystem=N'TSQL', 
					@command=N'SET DATEFORMAT YMD
exec ClearQuotaCache', 
					@database_name=@dbName, 
					@flags=0
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'ClearCacheQuotas', 
					@enabled=1, 
					@freq_type=4, 
					@freq_interval=1, 
					@freq_subday_type=4, 
					@freq_subday_interval=1, --каждую 1 минуту
					@freq_relative_interval=0, 
					@freq_recurrence_factor=0, 
					@active_start_date=20131205, 
					@active_end_date=99991231, 
					@active_start_time=0, 
					@active_end_time=235959
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
		COMMIT TRANSACTION
		GOTO EndSave
		QuitWithRollback:
		IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
		EndSave:
	end
	ELSE
	begin
		set @errorMessage = 'Не удалось создать стандартное задание (job) на SQL-сервере. 
Либо редакция SQL-сервера не поддерживает установку заданий, либо не включен SQL Server Agent.
Вы можете использовать планировщик Windows для создания данного задания. 
Подробнее об использовании планировщика можно прочитать в описании: 
http://wiki.megatec.ru/Мастер-Тур:Создание_заданий_для_MS_SQL_Server_Express.'
		RAISERROR(@errorMessage, 16, 1)
	end
end
GO
/*********************************************************************/
/* end JOB_ClearCacheQuotas.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'JOB_ClearCacheQuotas.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'job_mwRemoveDeletedNightly.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin job_mwRemoveDeletedNightly.sql */
/*********************************************************************/
declare @errorMessage nvarchar(max)
declare @serverVersion nvarchar(128)

if (dbo.mwReplIsSubscriber() = 1)
begin
	select @serverVersion = cast(serverproperty('edition') as nvarchar)
	if (@serverVersion like '%express%')
	begin
		GOTO invalidServerVersion
	end
end

declare @dbName nvarchar(128), @jobname nvarchar(128)
set @jobname = DB_NAME() + '_mwRemoveDeletedNightly'
set @dbName = DB_NAME()

if (dbo.mwReplIsPublisher() <> 1)
begin
	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = @jobname)
		EXEC msdb.dbo.sp_delete_job @job_name = @jobname, @delete_unused_schedule=1
end

if (dbo.mwReplIsPublisher() <> 1)
begin
	BEGIN TRANSACTION
	DECLARE @ReturnCode INT
	SELECT @ReturnCode = 0
	IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
	BEGIN
	EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

	END

	DECLARE @jobId BINARY(16)
	EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name = @jobname, 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'Очищает рассчитанные цены на прошедшие даты, перестраивает индексы в поисковых таблицах.', 
			@category_name=N'[Uncategorized (Local)]', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	/****** Object:  Step [mwRemoveDeleted]    Script Date: 15.10.2013 17:02:15 ******/
	EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'mwRemoveDeleted', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_success_step_id=0, 
			@on_fail_action=2, 
			@on_fail_step_id=0, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, @subsystem=N'TSQL', 
			@command=N'SET DATEFORMAT YMD
exec dbo.mwRemoveDeleted', 
			@database_name=@dbName, 
			@flags=0
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'mwShedule', 
			@enabled=1, 
			@freq_type=4, 
			@freq_interval=1, 
			@freq_subday_type=1, 
			@freq_subday_interval=0, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=0, 
			@active_start_date=20100524, 
			@active_end_date=99991231, 
			@active_start_time=0, 
			@active_end_time=235959, 
			@schedule_uid=N'106a4084-5c98-487f-8120-a2bb3726dac6'

	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	COMMIT TRANSACTION

	GOTO EndSave
	QuitWithRollback:
		IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
end

	GOTO endsave

invalidServerVersion:
			set @errorMessage = 'Не удалось создать стандартное задание (job) на SQL-сервере. 
Либо редакция SQL-сервера не поддерживает установку заданий, либо не включен SQL Server Agent.
Вы можете использовать планировщик Windows для создания данного задания. 
Подробнее об использовании планировщика можно прочитать в описании: 
http://wiki.megatec.ru/Мастер-Тур:Создание_заданий_для_MS_SQL_Server_Express.'
		RAISERROR(@errorMessage, 16, 1)

EndSave:
GO
/*********************************************************************/
/* end job_mwRemoveDeletedNightly.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'job_mwRemoveDeletedNightly.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'job_mwSyncDataWithMainDB.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin job_mwSyncDataWithMainDB.sql */
/*********************************************************************/
declare @errorMessage nvarchar(max)
declare @serverVersion nvarchar(128)

if (dbo.mwReplIsSubscriber() = 1)
begin
	select @serverVersion = cast(serverproperty('edition') as nvarchar)
	if (@serverVersion like '%express%')
	begin
		GOTO invalidServerVersion
	end
end

declare @dbName nvarchar(128), @jobname nvarchar(128)
set @jobname = DB_NAME() + '_mwSyncDataWithMainDB'
set @dbName = DB_NAME()

if (dbo.mwReplIsSubscriber() = 1)
begin
	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = @jobname)
		EXEC msdb.dbo.sp_delete_job @job_name = @jobname, @delete_unused_schedule=1
end

if (dbo.mwReplIsSubscriber() = 1)
begin
	BEGIN TRANSACTION
	
	DECLARE @ReturnCode INT
	SELECT @ReturnCode = 0
	
	IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
	BEGIN
		EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
		IF (@@ERROR <> 0 OR @ReturnCode <> 0)
			GOTO QuitWithRollback
	END

	DECLARE @jobId BINARY(16)
	EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name = @jobname, 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'Переносит данные на поисковую базу данных по квотам, расписаниям и суточным ценам, которые стали актуальными.', 
			@category_name=N'[Uncategorized (Local)]', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
	
	IF (@@ERROR <> 0 OR @ReturnCode <> 0)
		GOTO QuitWithRollback
	
	EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'mwSyncDataWithMainDB', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_success_step_id=0, 
			@on_fail_action=2, 
			@on_fail_step_id=0, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, @subsystem=N'TSQL', 
			@command=N'exec mwSyncDataWithMainDB', 
			@database_name=@dbName, 
			@flags=0

	IF (@@ERROR <> 0 OR @ReturnCode <> 0)
		GOTO QuitWithRollback
		
	EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
	
	IF (@@ERROR <> 0 OR @ReturnCode <> 0)
		GOTO QuitWithRollback
	
	EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'mwSyncSchedule', 
		@enabled=1, 
		@freq_type=4, 
		@freq_interval=1, 
		@freq_subday_type=4, 
		@freq_subday_interval=10, 
		@freq_relative_interval=0, 
		@freq_recurrence_factor=0, 
		@active_start_date=20100820, 
		@active_end_date=99991231, 
		@active_start_time=0, 
		@active_end_time=235959, 
		@schedule_uid=N'd81715e0-c15e-4955-8c6c-d4773b98df96'
	
	IF (@@ERROR <> 0 OR @ReturnCode <> 0)
		GOTO QuitWithRollback
		
	EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
	
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) 
		GOTO QuitWithRollback
		
	COMMIT TRANSACTION
	
	GOTO EndSave

	QuitWithRollback:
		IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
end

	GOTO endsave

invalidServerVersion:
			set @errorMessage = 'Не удалось создать стандартное задание (job) на SQL-сервере. 
Либо редакция SQL-сервера не поддерживает установку заданий, либо не включен SQL Server Agent.
Вы можете использовать планировщик Windows для создания данного задания. 
Подробнее об использовании планировщика можно прочитать в описании: 
http://wiki.megatec.ru/Мастер-Тур:Создание_заданий_для_MS_SQL_Server_Express.'
		RAISERROR(@errorMessage, 16, 1)

EndSave:

GO
/*********************************************************************/
/* end job_mwSyncDataWithMainDB.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'job_mwSyncDataWithMainDB.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Job_mwSyncDictionaryData.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin Job_mwSyncDictionaryData.sql */
/*********************************************************************/
declare @errorMessage nvarchar(max)
declare @serverVersion nvarchar(128)

if (dbo.mwReplIsSubscriber() = 1)
begin
	select @serverVersion = cast(serverproperty('edition') as nvarchar)
	if (@serverVersion like '%express%')
	begin
		GOTO invalidServerVersion
	end
end

-- либо поисковая база в случае реплики, либо единственная и реплики нет

if (dbo.mwReplIsPublisher() <> 1)
begin
	declare @dbName nvarchar(128), @jobname nvarchar(128)
	set @jobname = DB_NAME() + '_mwSyncDictionaryData'
	set @dbName = DB_NAME()

	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = @jobname)
	EXEC msdb.dbo.sp_delete_job @job_name = @jobname, @delete_unused_schedule=1
end

if (dbo.mwReplIsPublisher() <> 1)
begin
	BEGIN TRANSACTION
	DECLARE @ReturnCode INT
	SELECT @ReturnCode = 0
	IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'MasterWeb_JobCategory' AND category_class=1)
	BEGIN
	EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'MasterWeb_JobCategory'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback

	END

	DECLARE @jobId BINARY(16)
	set @jobname = DB_NAME() + '_mwSyncDictionaryData'
	set @dbName = DB_NAME()
	EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name = @jobname, 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'Синхронизирует данные в поисковых таблицах с данными в справочниках.', 
			@category_name=N'MasterWeb_JobCategory', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	/****** Object:  Step [ExecProc]    Script Date: 15.10.2013 17:53:27 ******/
	EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'ExecProc', 
			@step_id=1, 
			@cmdexec_success_code=0, 
			@on_success_action=1, 
			@on_success_step_id=0, 
			@on_fail_action=2, 
			@on_fail_step_id=0, 
			@retry_attempts=0, 
			@retry_interval=0, 
			@os_run_priority=0, @subsystem=N'TSQL', 
			@command=N'exec mwSyncDictionaryData 1', 
			@database_name=@dbName, 
			@flags=0
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'SyncSchedule', 
			@enabled=1, 
			@freq_type=4, 
			@freq_interval=1, 
			@freq_subday_type=1, 
			@freq_subday_interval=0, 
			@freq_relative_interval=0, 
			@freq_recurrence_factor=0, 
			@active_start_date=20100820, 
			@active_end_date=99991231, 
			@active_start_time=0, 
			@active_end_time=235959, 
			@schedule_uid=N'd81715e0-c15e-4955-8c6c-d4773b98df96'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
	IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
	COMMIT TRANSACTION
	GOTO EndSave
	QuitWithRollback:
		IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
end

	GOTO endsave

invalidServerVersion:
			set @errorMessage = 'Не удалось создать стандартное задание (job) на SQL-сервере. 
Либо редакция SQL-сервера не поддерживает установку заданий, либо не включен SQL Server Agent.
Вы можете использовать планировщик Windows для создания данного задания. 
Подробнее об использовании планировщика можно прочитать в описании: 
http://wiki.megatec.ru/Мастер-Тур:Создание_заданий_для_MS_SQL_Server_Express.'
		RAISERROR(@errorMessage, 16, 1)

EndSave:

GO
/*********************************************************************/
/* end Job_mwSyncDictionaryData.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Job_mwSyncDictionaryData.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Job_ReCalculate_MigrateToPrice.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin Job_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/
declare @errorMessage nvarchar(max)
declare @serverVersion nvarchar(128)
declare @dbName nvarchar(128)
declare @jobName varchar(255)

-- либо поисковая база в случае реплики, либо единственная и реплики нет
if (dbo.mwReplIsPublisher() = 0)
begin
	select @serverVersion = cast(serverproperty('edition') as nvarchar)
	if (@serverVersion not like '%express%')
	begin
		set @dbName = DB_NAME()

		declare @jobNames table (xName varchar(255))

		declare @dataBaseNames table (xDBName varchar(255))

		insert into @jobNames (xName)
		SELECT name 
		FROM msdb.dbo.sysjobs_view 
		where job_id in (select job_id
						 from msdb.dbo.sysjobsteps 
						 where command like '%ReCalculate_MigrateToPrice%' 
						 and database_name like @dbName)

		if exists (select 1 from @jobNames)
		begin
			declare jobNamesCursor cursor local fast_forward for
			select xName
			from @jobNames

			open jobNamesCursor
			fetch jobNamesCursor into @jobName
			while (@@FETCH_STATUS = 0)
			begin
				EXEC msdb.dbo.sp_delete_job @job_name = @jobName, @delete_unused_schedule=1

				insert into @dataBaseNames (xDBName)
				values (DB_NAME())

				fetch jobNamesCursor into @jobName
			end
			close jobNamesCursor
			deallocate jobNamesCursor
		end

		declare qurs cursor local fast_forward for
		select xDBName
		from @dataBaseNames

		open qurs
		fetch qurs into @DBName
		while (@@FETCH_STATUS = 0)
		begin
			BEGIN TRANSACTION

			DECLARE @ReturnCode INT
			SELECT @ReturnCode = 0

			set @jobName = @DBName + '_DC_ReCalculate_MigrateToPrice'

			IF NOT EXISTS (SELECT name FROM msdb.dbo.syscategories WHERE name=N'[Uncategorized (Local)]' AND category_class=1)
			BEGIN
				EXEC @ReturnCode = msdb.dbo.sp_add_category @class=N'JOB', @type=N'LOCAL', @name=N'[Uncategorized (Local)]'
				IF (@@ERROR <> 0 OR @ReturnCode <> 0)
					GOTO QuitWithRollback
			END

			DECLARE @jobId BINARY(16)
			EXEC @ReturnCode =  msdb.dbo.sp_add_job @job_name = @jobName, 
			@enabled=1, 
			@notify_level_eventlog=0, 
			@notify_level_email=0, 
			@notify_level_netsend=0, 
			@notify_level_page=0, 
			@delete_level=0, 
			@description=N'No description available.', 
			@category_name=N'[Uncategorized (Local)]', 
			@owner_login_name=N'sa', @job_id = @jobId OUTPUT
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			/****** Object:  Step [1]    Script Date: 11/21/2012 16:11:10 ******/
			EXEC @ReturnCode = msdb.dbo.sp_add_jobstep @job_id=@jobId, @step_name=N'1', 
				@step_id=1, 
				@cmdexec_success_code=0, 
				@on_success_action=1, 
				@on_success_step_id=0, 
				@on_fail_action=2, 
				@on_fail_step_id=0, 
				@retry_attempts=0, 
				@retry_interval=0, 
				@os_run_priority=0, @subsystem=N'TSQL', 
				@command=N'SET DATEFORMAT YMD
				DECLARE @RC int
				DECLARE @countItem int
				DECLARE @tpKeys dbo.ListBigIntValue
				DECLARE @toKey int
				DECLARE @tpToursCount int

				SET @countItem = 20000
				SET @tpToursCount = 50

				EXECUTE [dbo].[ReCalculate_MigrateToPrice] @countItem, @tpKeys, @toKey, @tpToursCount', 
				@database_name=@dbName, 
				@flags=0
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_update_job @job_id = @jobId, @start_step_id = 1
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id=@jobId, @name=N'1', 
				@enabled=1, 
				@freq_type=4, 
				@freq_interval=1, 
				@freq_subday_type=2, 
				@freq_subday_interval=10, 
				@freq_relative_interval=0, 
				@freq_recurrence_factor=0, 
				@active_start_date=20121011, 
				@active_end_date=99991231, 
				@active_start_time=0, 
				@active_end_time=235959, 
				@schedule_uid=N'0b7f59b2-3166-4d4f-9603-e0604c47a166'
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			EXEC @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @jobId, @server_name = N'(local)'
			IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback
			COMMIT TRANSACTION
			GOTO EndSave
			QuitWithRollback:
				IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION
			EndSave:

			fetch qurs into @DBName
		end
		close qurs
		deallocate qurs			
			
	end
	ELSE
	begin
		set @errorMessage = 'Не удалось создать стандартное задание (job) ReCalculate_MigrateToPrice на SQL-сервере. 
Либо редакция SQL-сервера не поддерживает установку заданий, либо не включен SQL Server Agent.
Вы можете использовать планировщик Windows для создания данного задания. 
Подробнее об использовании планировщика можно прочитать в описании: 
http://wiki.megatec.ru/Мастер-Тур:Создание_заданий_для_MS_SQL_Server_Express.'
		RAISERROR(@errorMessage, 16, 1)
	end
end
GO
/*********************************************************************/
/* end Job_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Job_ReCalculate_MigrateToPrice.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceList.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CalculatePriceList.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculatePriceList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CalculatePriceList]
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@nCalculatingKey int,		-- ключ итерации дозаписи
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nUseHolidayRule smallint		-- Правило выходного дня: 0 - не использовать, 1 - использовать
  )
AS

--<DATE>2014-10-28</DATE>
--<VERSION>9.2.21</VERSION>

set nocount on

--проверяем настройку со страной, если совпала - запускаем новый CalculatePriceList
declare @toCnKey varchar(30), @setting varchar(260),@newpricesetting varchar 

select @toCnKey = rtrim(ltrim(str(to_cnkey))) from dbo.tp_tours where to_key = @nPriceTourKey

select @setting = rtrim(ltrim(ss_parmvalue)) from dbo.systemsettings where ss_parmname = 'MTDynamicCountries'

select @newpricesetting = SS_ParmValue from dbo.systemsettings where ss_parmname = 'NewReCalculatePrice'

if isnull(@newpricesetting,'') = '1'
begin
	if (IsNull(@setting, '') = '' OR exists (select top 1 1 from dbo.ParseKeys(@setting) where xt_key = convert(int, @toCnKey)))
	begin
		exec [dbo].[CalculatePriceListDynamic] @nPriceTourKey,@nCalculatingKey,@dtSaleDate,@nNullCostAsZero,@nNoFlight,@nUpdate,@nUseHolidayRule
		return
	end 
end

declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent bigint
declare @nTP_PriceKeyMax bigint
--
declare @fetchStatus smallint
declare @nDeltaProgress decimal(14, 8)
declare @nTotalProgress decimal(14, 8)
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @nettoDetail nvarchar(max)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @PricesCount int

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------
declare @ROUND_NOTWITHDISC int
declare @ROUND_SERVICE_MATH int
declare @ROUND_SERVICE0_5 int
declare @ROUND_PRICE0_5 int
declare @ROUND_SERVICE int
declare @ROUND_PRICE int
declare @ROUND_NOT int

Set @ROUND_NOTWITHDISC = 64
Set @ROUND_SERVICE_MATH = 32
Set @ROUND_SERVICE0_5 = 16
Set @ROUND_PRICE0_5 = 8
Set @ROUND_SERVICE = 4
Set @ROUND_PRICE = 2
Set @ROUND_NOT = 1
---------------------------------------------
declare @nIsEnabled smallint
select @nIsEnabled = TO_IsEnabled from dbo.TP_Tours with(nolock) where TO_Key = @nPriceTourKey
---------------------------------------------
declare @tpPricesCount int
declare @isPriceListPluginRecalculation smallint
select @tpPricesCount = count(1) from dbo.tp_prices with(nolock) where tp_tokey = @nPriceTourKey

Set @nTotalProgress = 1
update dbo.tp_tours set to_progress = @nTotalProgress, TO_UPDATETIME = GetDate() where to_key = @nPriceTourKey

--осуществляется пересчет прайса планировщиком
if (@tpPricesCount > 0 and @nUpdate = 0)
begin
	set @isPriceListPluginRecalculation = 1
	set @nCalculatingKey = null
	
	select top 1 @nCalculatingKey = CP_Key from dbo.CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey and CP_Update = 0
	update dbo.tp_turdates set td_update = 0 where td_tokey = @nPriceTourKey
	update dbo.tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
	
	set @nUpdate = 0
end
else
	set @isPriceListPluginRecalculation = 0

declare @nSign tinyint

create table #GetServiceCost(
	tid int identity primary key,
	svkey int,
	code int,
	subcode1 int,
	subcode2 int,
	prkey int,
	pkkey int,
	date datetime,
	days int,
	rate varchar(3),
	nmen int,
	margin money,
	marginType int,
	saleDate datetime,
	netto money,
	brutto money,
	discount money,
	details varchar(100),
	badrate varchar(3),
	baddate datetime,
	details2 varchar(100),
	spid int,
	row_sign tinyint
)

create index x_getservicecost on #GetServiceCost(svkey,code,subcode1,subcode2,prkey,pkkey,date,days,rate,nmen,margin,marginType,saleDate)
include (netto,brutto,discount,details,badRate,badDate,details2,spid,row_sign)

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

BEGIN

	--koshelev
	--MEG00027550
	if @nUpdate = 0
		update dbo.tp_tours set to_datecreated = GetDate() where to_key = @nPriceTourKey

	select @TrKey = to_trkey, @userKey = to_opkey from dbo.tp_tours with(nolock) where to_key = @nPriceTourKey

	if not exists (select 1 from dbo.CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey) and @nPriceTourKey is not null
	begin	
		insert into dbo.CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_TourKey, CP_UserKey, CP_Status, CP_UseHolidayRule)
		values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @TrKey, @userKey, 1, @nUseHolidayRule)
	end
	else if @nPriceTourKey is not null
	begin
		update dbo.CalculatingPriceLists set CP_Status = 1 where CP_Key = @nCalculatingKey
	end

	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours with(nolock) where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nUseHolidayRule = 0
		SET @sHI_Text = 'NO'
	ELSE
		SET @sHI_Text = 'YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11008, null, @sHI_Text, null, @nUpdate, null, null, 0

	--Засекаем время начала рассчета begin
	declare @beginPriceCalculate datetime
	set @beginPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@beginPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11009, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время начала рассчета end
	
	-- koshelev 15.02.2011
	-- для подбора перелетов
	if exists(select 1 from dbo.tp_lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_TotalDays is null)
	begin
		exec sp_executesql N'
		select TI_Key as xTI_Key, TI_TOKey as xTI_TOKey, TI_CalculatingKey as xTI_CalculatingKey, ti_totaldays as xti_totaldays
		into #tmp
		from tp_lists with(nolock)
		where TI_TOKey = @nPriceTourKey 
		and TI_TotalDays is null
		
		update #tmp
		set
			xti_totaldays = (select max(case ts_svkey 
							when 3 
							then ts_day + ts_days 
							else (case ts_days 
								when 0 
								then 1 
								else ts_days 
      								  end) + ts_day - 1 
 							   end)
					from dbo.tp_services with (nolock)
						inner join dbo.tp_servicelists with (nolock) on (tl_tskey = ts_key and TS_TOKey = @nPriceTourKey and TL_TOKey = @nPriceTourKey)
					where tl_tikey = xti_key)
		
		update dbo.TP_Lists
		set ti_totaldays = xti_totaldays
		from #tmp
		where xTI_Key = TI_Key
		', N'@nPriceTourKey int', @nPriceTourKey
	end

	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1

	set @SERV_NOTCALCULATE = 32768

	exec sp_executesql N'
	
	select distinct TO_Key, TD_Date + TS_Day - 1 as flight_day, TS_Code, TS_OpPartnerKey, TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, ti_totaldays, TD_Date
	into #TP_Flights
	from dbo.TP_Tours with(nolock) join dbo.TP_Services with(nolock) on TO_Key = TS_TOKey and TS_SVKey = 1
		join dbo.TP_ServiceLists with(nolock) on TL_TSKey = TS_Key and TS_TOKey = TO_Key
		join dbo.TP_Lists with(nolock) on TL_TIKey = TI_Key and TI_TOKey = TO_Key
		join dbo.TP_TurDates with(nolock) on TD_TOKey = TO_Key
	where TO_Key = @nPriceTourKey

	delete from #TP_Flights where exists (Select 1 From dbo.TP_Flights with(nolock) Where TF_TOKey=@nPriceTourKey and TF_Date=flight_day
		and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
		and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2 and TF_Days = ti_totaldays)
		
	insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_TourDate, TF_CalculatingKey)
	select *, @nCalculatingKey  from #tp_flights
	', N'@nPriceTourKey int, @nCalculatingKey int, @SERV_NOTCALCULATE int', @nPriceTourKey, @nCalculatingKey, @SERV_NOTCALCULATE

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре (с учетом цен в которых дата продажи NULL или больше/равна сегодняшней дате )----

	exec sp_executesql 
	N'
	select 
		TF_ID, null as TF_CodeNew, null as TF_SubCode1New, null as TF_PRKeyNew, TF_CalculatingKey, 
		TF_CodeOld, TF_Subcode2, TF_PRKeyOld, TF_CTKey, TF_Subcode1, TF_PKKey, TF_Date, TF_TourDate, TF_Days
	into #TP_Flights
	from dbo.TP_Flights with(nolock)
	where TF_TOKey = @nPriceTourKey

	create index X_TP_Flights ON #TP_Flights (TF_ID)
	include (TF_CodeNew, TF_PRKeyNew, TF_SubCode1New, TF_CalculatingKey)
	
	Update	#TP_Flights Set TF_CodeNew = TF_CodeOld, TF_PRKeyNew = TF_PRKeyOld, TF_SubCode1New = TF_SubCode1, TF_CalculatingKey = @nCalculatingKey
	Where	exists (SELECT 1 FROM dbo.AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE ''%''+cast(datepart(weekday, TF_Date)as varchar(1))+''%'')
			and exists (select 1 from dbo.Costs where CS_Code = TF_CodeOld and CS_SVKey = 1 and CS_SubCode1 = TF_Subcode1 and CS_PRKey = TF_PRKeyOld and CS_PKKey = TF_PKKey 
			and TF_Date BETWEEN ISNULL(CS_Date, ''1900-01-01'') AND ISNULL(CS_DateEnd, ''2053-01-01'') 
			and TF_TourDate BETWEEN ISNULL(CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(CS_CHECKINDATEEND, ''2053-01-01'')
			and (ISNULL(CS_Week, '''') = '''' or CS_Week LIKE ''%''+cast(datepart(weekday, TF_Date)as varchar(1))+''%'') 
			and (CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) 
			and (cs_DateSellBeg <= @dtSaleDate or cs_DateSellBeg is null) 
			and (cs_DateSellEnd >= @dtSaleDate or cs_DateSellEnd is null))

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT top 1 1 FROM #TP_Flights WHERE TF_CodeNew is Null)
		begin
			print ''Подбираем перелет''
			
			declare @newFlightsPartnerTable table
			(
				-- идентификатор
				xId int identity(1,1) primary key,
				-- ключ записи в таблице tp_flights
				xTFId int,
				-- ключ нового партнера
				xPRKeyNew int,
				-- ключ нового перелета
				xCHKeyNew int,
				-- ключ нового тарифа на перелет
				xASKeyNew int
			)

			-- подбираем подходящие нам перелеты
			SELECT TF_Id as xTFId, CS_Code as xCHKeyNew, CS_SubCode1 as xASKeyNew, CS_PRKey as xPRKeyNew,
			case
				when TF_PRKeyOld = CS_PRKey then 4
				else 0 
			end 
			+
			case
				when TF_CodeOld = CH_Key then 2
				else 0 
			end 
			+ 
			case
				when TF_SubCode1 = CS_SubCode1 then 1
				else 0 
			end as xPriority
			into #tmp
			FROM AirSeason with(nolock), Charter with(nolock), Costs with(nolock), #TP_Flights with(nolock)
			WHERE CH_CityKeyFrom = TF_Subcode2 and
			CH_CityKeyTo = TF_CTKey and
			CS_Code = CH_Key and
			AS_CHKey = CH_Key and
			CS_SVKey = 1 and
			(	isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = CS_SubCode1), '''')
				= 
				isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = TF_Subcode1), '''')
			)
			and (cs_DateSellBeg <= @dtSaleDate or cs_DateSellBeg is null) 
			and (cs_DateSellEnd >= @dtSaleDate or cs_DateSellEnd is null)
			and CS_PKKey = TF_PKKey and
			TF_Date BETWEEN AS_DateFrom and AS_DateTo and
			TF_Date BETWEEN CS_Date and CS_DateEnd and
			AS_Week LIKE ''%''+cast(datepart(weekday, TF_Date)as varchar(1))+''%'' and
			(ISNULL(CS_Week, '''') = '''' or CS_Week LIKE ''%''+cast(datepart(weekday, TF_Date)as varchar(1))+''%'') and
			(CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) and
			TF_CodeNew is Null;

			with max_priority as
			(
				select xTFId, max(xPriority) as xPriority
				from #tmp
				group by xTFId
			)
			insert into @newFlightsPartnerTable (xTFId, xCHKeyNew, xASKeyNew, xPRKeyNew)
			select x.xTFId, min(x.xCHKeyNew), min(x.xASKeyNew), min(x.xPRKeyNew)
			from #tmp as x
			where exists (	select 1 
							from max_priority as xmax
							where x.xTFId = xmax.xTFId
								and x.xPriority = xmax.xPriority)
			group by x.xTFId, x.xPriority
			
			-- обновляем информацию о найденом перелете
			update #TP_Flights
			set TF_CodeNew = xCHKeyNew,
			TF_SubCode1New = xASKeyNew,
			TF_PRKeyNew = xPRKeyNew,
			TF_CalculatingKey = @nCalculatingKey
			from @newFlightsPartnerTable
			where TF_Id = xTFId
			
			print ''Закончили подбор перелетов''
		end
	END
	
	update TF set 
		TF.TF_CodeNew = TF_Temp.TF_CodeNew, 
		TF.TF_PRKeyNew = TF_Temp.TF_PRKeyNew, 
		TF.TF_SubCode1New = TF_Temp.TF_SubCode1New, 
		TF.TF_CalculatingKey = TF_Temp.TF_CalculatingKey
	from TP_Flights TF
	inner join #TP_Flights TF_Temp on TF.TF_ID = TF_Temp.TF_ID
	', N'@nPriceTourKey int, @nCalculatingKey int, @nNoFlight smallint, @dtSaleDate datetime', @nPriceTourKey, @nCalculatingKey, @nNoFlight, @dtSaleDate
	
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------
	--if ISNULL((select to_update from [dbo].tp_tours with(nolock) where to_key = @nPriceTourKey),0) <> 1
	
	declare @calcPricesCount int

	exec sys.sp_executesql N'
	
	if (1 = 1)
	BEGIN

		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress = 4
		update dbo.tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		/*
			xTP_UpdateMode = 1 - обновление цены
			xTP_UpdateMode = 2 - добавление цены
			xTP_UpdateMode = 3 - удаление цены
		*/
		CREATE TABLE #TP_Prices
		(
			[xTP_Key] [bigint] NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL,
			[xTP_CalculatingKey] [int] NULL,
			[xTP_UpdateMode] [int] NOT NULL DEFAULT(0)
		)

		CREATE NONCLUSTERED INDEX [x_fields] ON [#TP_Prices] 
		(
			[xTP_TOKey] ASC,
			[xTP_TIKey] ASC,
			[xTP_DateBegin] ASC
		)

		DELETE FROM #TP_Prices
		--INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		
				
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from dbo.tp_tours with(nolock) where to_key = @nPriceTourKey
		
		set @nTotalProgress = 5
		update dbo.tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update dbo.tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM dbo.TurMargin with(nolock), dbo.tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM dbo.TurMargin with(nolock), dbo.tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from dbo.TurMargin with(nolock) WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

--		update dbo.TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey

		SELECT @round = ST_RoundService FROM dbo.Setting
		--MEG00036108 увеличил значение
		set @nProgressSkipLimit = 10000

		set @nProgressSkipCounter = 0
		--Set @nTotalProgress = @nTotalProgress + 1
		--update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		
		--считаем сколько записей надо посчитать
		declare @NumPrices int
		set @NumPrices = ((select count(1) from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates with(nolock) where td_tokey = @nPriceTourKey and td_update = @nUpdate))

		if @NumPrices <> 0
			set @nDeltaProgress = (97.0 - 5) / @NumPrices
		else
			set @nDeltaProgress = 97.0 - 5
		
		set @dtPrevDate = ''1899-12-31''
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = ''1899-12-31''
		set @prevHdKey = -1

		delete from #TP_Prices

		declare @calcPriceListCount int, @calcTurDates int
		select @calcPriceListCount = COUNT(1) from dbo.TP_Lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_UPDATE = @nUpdate
		select @calcTurDates = COUNT(1) from dbo.TP_TurDates with(nolock) where TD_TOKey = @nPriceTourKey and TD_UPDATE = @nUpdate
		select @calcPricesCount = @calcPriceListCount * @calcTurDates

		insert into #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xTP_Gross, xTP_TIKey) 
		select tp_key, tp_tokey, tp_dateBegin, TP_Gross, TP_TIKey
		from dbo.tp_prices with(nolock)
		where tp_tokey = @nPriceTourKey and 
			tp_tikey in (select ti_key from dbo.tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tp_datebegin in (select td_date from dbo.tp_turdates with(nolock) where td_tokey = @nPriceTourKey and td_update = @nUpdate)
			
		create table #CursorTable
		(	
			id int identity(1,1) primary key,
			ti_firsthdkey int, 
			ts_key int, 
			ti_key int, 
			td_date datetime, 
			ts_svkey int, 
			ts_code int, 
			ts_subcode1 int, 
			ts_subcode2 int, 
			ts_oppartnerkey int, 
			ts_oppacketkey int, 
			ts_day int, 
			ts_days int, 
			to_rate varchar(3), 
			ts_men int, 
			ts_tempgross float, 
			ts_checkmargin smallint, 
			td_checkmargin smallint, 
			ti_totaldays int, 
			ts_ctkey int, 
			ts_attribute int
		)
		
		insert into #CursorTable (ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_totaldays, ts_ctkey, ts_attribute)
		select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_totaldays, ts_ctkey, ts_attribute
		from dbo.tp_tours with(nolock), dbo.tp_services with(nolock), dbo.tp_lists with(nolock), dbo.tp_servicelists with(nolock), dbo.tp_turdates with(nolock)
		where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
			and ti_update = @nUpdate and td_update = @nUpdate and (@nUseHolidayRule = 0 or (case cast(datepart(weekday, td_date) as int) when 7 then 0 else cast(datepart(weekday, td_date) as int) end + ti_days) >= 8)
		order by ti_firsthdkey, td_date, ti_key
		
		update #CursorTable
		set ts_code = TF_CodeNew, ts_subcode1 = TF_SubCode1New, ts_oppartnerkey = TF_PRKeyNew
		from TP_Flights 
		where TF_TOKey = @nPriceTourKey 
			AND TF_CodeOld = ts_code 
			AND TF_PRKeyOld = ts_oppartnerkey 
			AND TF_Date = td_date + ts_day - 1 
			AND TF_Days = ti_totaldays 
			AND TF_Subcode1 = ts_subcode1
			AND ts_svkey = 1
			
		declare serviceCursor cursor local fast_forward for
		select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_totaldays, ts_ctkey, ts_attribute
		from #CursorTable
		
		open serviceCursor

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN

			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу #TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				--записываем данные в таблицу #TP_Prices
				if @nPrevVariant <> -1
				begin
				if @price_brutto is not null
				BEGIN
					exec dbo.RoundPriceList @round, @price_brutto output

						if exists(select 1 from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant)
						begin
							--if (@isPriceListPluginRecalculation = 0)
							--	update #TP_Prices set xtp_gross = @price_brutto, xtp_calculatingkey = @nCalculatingKey where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant
							--else
								update #TP_Prices set xtp_gross = @price_brutto, xTP_UpdateMode = 1 where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant and xtp_gross <> @price_brutto
						end
						else if (@isPriceListPluginRecalculation = 0)
						begin
							insert into #TP_Prices (xtp_tokey, xtp_datebegin, xtp_gross, xtp_tikey, xTP_UpdateMode) 
							values (@nPriceTourKey, @dtPrevDate, @price_brutto, @nPrevVariant, 2)
						end
					END
					ELSE
					BEGIN
						update #TP_Prices set xTP_UpdateMode = 3 where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant
						--delete from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant
					END
				end
			
				--очищаем данные
				if @@fetch_status = 0
				begin
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update dbo.tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END
			

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				set @prevHdKey = @hdKey
			end
			
			if @@fetch_status <> 0
				break
						
			---------------------------------------------------------------------------------

				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec dbo.GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
				
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
					begin
						set @nSign = null

						select
							@nNetto = netto,						
							@nBrutto = brutto,
							@nDiscount = discount,
							@sDetailed = details,
							@sBadRate = badRate,
							@dtBadDate = badDate,
							@sDetailed = details2,
							@nSPId = spid,
							@nSign = row_sign
						from
							#GetServiceCost
						where
							svkey = @nSvkey
							and code = @nCode
							and subcode1 = @nSubcode1
							and subcode2 = @nSubcode2
							and prkey = @nPrkey
							and pkkey = @nPacketkey
							and date = @servicedate
							and days = @nDays
							and rate = @sRate
							and nmen = @nMen
							and margin = @nMargin
							and marginType = @nMarginType
							and saleDate = @dtSaleDate

						if(@nSign is null) -- cost not found
						begin
							exec dbo.GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays,
							@sRate, @nMen, 0, @nMargin, @nMarginType,
							@dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output,
							@nettoDetail output, @sBadRate output, @dtBadDate output,
							@sDetailed output, @nSPId output, 0, @TrKey, @turdate, @TI_DAYS, 1
							
							if @nMen > 1 and @nPriceFor = 0
								set @nBrutto = @nBrutto / @nMen
							if @nBrutto is not null and (@round = @ROUND_SERVICE or @round = @ROUND_SERVICE0_5 or @round = @ROUND_SERVICE_MATH)
								exec dbo.RoundPriceList @round, @nBrutto output

							insert into #GetServiceCost(
								svkey,
								code,
								subcode1,
								subcode2,
								prkey,
								pkkey,
								date,
								days,
								rate,
								nmen,
								margin,
								marginType,
								saleDate,
								netto,
								brutto,
								discount,
								details,
								badrate,
								baddate,
								details2,
								spid,
								row_sign)
							values(
								@nSvkey,
								@nCode,
								@nSubcode1,
								@nSubcode2,
								@nPrkey,
								@nPacketkey,
								@servicedate,
								@nDays,
								@sRate,
								@nMen,
								@nMargin,
								@nMarginType,
								@dtSaleDate,
								@nNetto,
								@nBrutto,
								@nDiscount,
								@sDetailed,
								@sBadRate,
								@dtBadDate,
								@sDetailed,
								@nSPId,
								1)
						end
					end
					else
						set @nBrutto = null

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0	
		
				END

			set @price_brutto = @price_brutto + @nBrutto
			---------------------------------------------------------------------------------

			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 97
		update dbo.tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @cpKey int
		if exists (select 1 from #tp_prices where xTP_UpdateMode <> 0)
		begin
			--INSERT INTO dbo.CalculatingPriceLists (CP_CreateDate,CP_PriceTourKey) VALUES (GETDATE(),@nPriceTourKey) 
			--SET @cpKey = SCOPE_IDENTITY()
			SET @cpKey = @nCalculatingKey
		end

		-- изменение цен
		if exists (select 1 from #tp_prices where xTP_UpdateMode = 1)
		begin
			update dbo.tp_prices
			set tp_gross = xtp_gross,
			tp_calculatingkey = @cpKey
			from #tp_prices
			where TP_Key = xTP_Key
			and xTP_UpdateMode = 1
		end
		-- вставка цен
		else if exists (select 1 from #tp_prices where xTP_UpdateMode = 2)
		begin
			select @PricesCount = count(1) from #TP_Prices where xTP_UpdateMode = 2
			exec GetNBigintKeys ''TP_PRICES'', @PricesCount, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @PricesCount + 1

			update T set T.xTP_Key = @nTP_PriceKeyCurrent + rowNumber
			from 
			(
				  select 
					  xTP_Key,
					  row_number() over (order by xTP_Key desc) as rowNumber
				  from #tp_prices
				  where xTP_UpdateMode = 2 
			) as T option (maxdop 1)

			INSERT INTO dbo.TP_Prices (tp_key, tp_tokey, tp_dateBegin, TP_Gross, TP_TIKey, TP_CalculatingKey) 
			select xtp_key, xtp_tokey, xtp_dateBegin, xTP_Gross, xTP_TIKey, @cpKey
			from #TP_Prices 
			where  xTP_UpdateMode = 2
		end
		-- удаление
		else if exists (select 1 from #tp_prices where xTP_UpdateMode = 3)
		begin
			delete from dbo.tp_prices 
			where tp_tokey = @nPriceTourKey
			and tp_key in (select xtp_key from #TP_Prices where xTP_UpdateMode = 3)
		end

		if (@nIsEnabled = 1)
		begin

			declare @mwSinglePrice nvarchar(10), @countryKey int
			select @countryKey = to_cnkey from tp_tours where to_key = @nPriceTourKey
			select @mwSinglePrice = isnull(dbo.GetCountrySetting(@countryKey, ''mwSinglePrice''), N''0'')

			-- только обновили значения
			if exists (select 1 from #tp_prices where xTP_UpdateMode = 1) and not exists (select 1 from #tp_prices where xTP_UpdateMode in (2,3)) and @mwSinglePrice = ''0''
			begin
				IF dbo.mwReplIsPublisher() > 0
				BEGIN
					INSERT INTO mwReplTours(rt_trkey, rt_tokey, rt_date, rt_calckey, rt_updateOnlinePrices)
					SELECT TO_TRKey, TO_Key, GETDATE(), @cpKey, 2
					FROM tp_tours
					WHERE TO_Key = @nPriceTourKey
				END
				ELSE
				BEGIN
					EXEC mwReplUpdatePriceEnabledAndValue @nPriceTourKey, @cpKey
				END
			end
			else
			begin
				-- механизм единственной цены
				if (@mwSinglePrice <> ''0'')
				begin
					EXEC FillMasterWebSearchFields @nPriceTourKey, null
				end
				else
				begin
					-- удаляем из инета удаленные цены
					if exists (select 1 from #tp_prices where xTP_UpdateMode = 3)
					begin
						insert into dbo.mwReplDeletedPricesTemp (rdp_pricekey, rdp_cnkey, rdp_ctdeparturekey) 
						select xtp_key, TO_CNKey, TL_CTDepartureKey
						from #TP_Prices
						join tp_tours on xtp_tokey = to_key
						join tbl_TurList on tl_key = to_trkey
						where xTP_UpdateMode = 3	
					end

					-- только обновление цен (удаление было выше)
					if exists (select 1 from #tp_prices where xTP_UpdateMode = 1) and not exists (select 1 from #tp_prices where xTP_UpdateMode = 2)
					begin
						IF dbo.mwReplIsPublisher() > 0
						BEGIN
							INSERT INTO mwReplTours(rt_trkey, rt_tokey, rt_date, rt_calckey, rt_updateOnlinePrices)
							SELECT TO_TRKey, TO_Key, GETDATE(), @cpKey, 2
							FROM tp_tours
							WHERE TO_Key = @nPriceTourKey
						END
						ELSE
						BEGIN
							EXEC mwReplUpdatePriceEnabledAndValue @nPriceTourKey, @cpKey
						END
					end
					-- выставляем в интернет новые цены
					else if exists (select 1 from #tp_prices where xTP_UpdateMode in (1, 2))
					begin
						EXEC FillMasterWebSearchFields @nPriceTourKey, @cpKey
					end	
				end
			end
		end

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update dbo.tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update dbo.tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update dbo.tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From dbo.TP_Prices with(nolock) Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update dbo.tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey

	END

	--Заполнение полей в таблице tp_lists
	declare @toKey int, @add int
	set @toKey = @nPriceTourKey
	set @add = @nUpdate

	update dbo.tp_lists 
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key),
			ti_nights = dbo.mwGetTiNights(ti_key)
	where
		ti_tokey = @toKey 
		and ti_CalculatingKey = @nCalculatingKey
		and ti_hotelkeys is null
		
	update dbo.tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from dbo.tp_servicelists with (nolock)
		inner join dbo.tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey 
		and ti_CalculatingKey = @nCalculatingKey
	------------------------------------------------------------------------------

	Set @nTotalProgress = 100
	update dbo.tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
	', 
	N' @fetchStatus smallint
	, @hdKey int 
	, @isPriceListPluginRecalculation smallint
	, @nBrutto money
	, @nCode int
	, @nDiscount money
	, @nMargin money
	, @nMarginType int
	, @nMen int
	, @nNetto money
	, @nNullCostAsZero smallint
	, @nPDID int
	, @nPrevVariant int 
	, @nPriceTourKey int 
	, @nProgressSkipCounter smallint
	, @nSign tinyint
	, @nSPId int
	, @nSvkey int
	, @nTotalProgress decimal(14, 8)
	, @nTP_PriceKeyCurrent bigint
	, @nTP_PriceKeyMax bigint
	, @PricesCount int
	, @price_brutto money
	, @round smallint
	, @TI_DAYS int
	, @TrKey int
	, @TS_ATTRIBUTE int
	, @tsCheckMargin smallint
	, @turdate datetime
	, @variant int
	, @nServiceKey int
	, @nCalculatingKey int
	, @dtPrevDate datetime
	, @nDeltaProgress decimal(14, 8)
	, @nProgressSkipLimit smallint
	, @prevHdKey int
	, @tdCheckMargin smallint
	, @dtSaleDate datetime
	, @nDay int
	, @nDays int 
	, @SERV_NOTCALCULATE int
	, @sDetailed varchar(100)
	, @nSubcode1 int
	, @nPriceFor smallint
	, @ROUND_SERVICE int
	, @nNoFlight smallint
	, @nSubcode2 int
	, @nPacketkey int
	, @servicedate datetime 
	, @sBadRate varchar(3)
	, @ROUND_SERVICE0_5 int
	, @nPrkey int 
	, @dtBadDate datetime
	, @ROUND_SERVICE_MATH int
	, @sRate varchar(3)
	, @nTempGross money
	, @nettoDetail nvarchar(max)
	, @TS_CTKEY int
	, @calcPricesCount int output
	, @numDates int
	, @priceDate datetime
	, @priceListKey int
	, @nUpdate smallint
	, @nPrevGross money
	, @nPrevGrossDate datetime
	, @nIsEnabled smallint
	, @priceListGross int 
	, @nUseHolidayRule smallint'
	, @fetchStatus
	, @hdKey
	, @isPriceListPluginRecalculation
	, @nBrutto
	, @nCode
	, @nDiscount
	, @nMargin
	, @nMarginType
	, @nMen
	, @nNetto
	, @nNullCostAsZero
	, @nPDID
	, @nPrevVariant
	, @nPriceTourKey
	, @nProgressSkipCounter
	, @nSign
	, @nSPId
	, @nSvkey
	, @nTotalProgress
	, @nTP_PriceKeyCurrent
	, @PricesCount
	, @nTP_PriceKeyMax
	, @price_brutto
	, @round
	, @TI_DAYS
	, @TrKey
	, @TS_ATTRIBUTE
	, @tsCheckMargin
	, @turdate
	, @variant
	, @nServiceKey
	, @nCalculatingKey
	, @dtPrevDate
	, @nDeltaProgress
	, @nProgressSkipLimit
	, @prevHdKey
	, @tdCheckMargin
	, @dtSaleDate
	, @nDay
	, @nDays
	, @SERV_NOTCALCULATE
	, @sDetailed
	, @nSubcode1
	, @nPriceFor
	, @ROUND_SERVICE
	, @nNoFlight			
	, @nSubcode2
	, @nPacketkey
	, @servicedate
	, @sBadRate
	, @ROUND_SERVICE0_5
	, @nPrkey
	, @dtBadDate
	, @ROUND_SERVICE_MATH		
	, @sRate	
	, @nTempGross
	, @nettoDetail
	, @TS_CTKEY
	, @calcPricesCount output
	, @numDates
	, @priceDate
	, @priceListKey
	, @nUpdate
	, @nPrevGross
	, @nPrevGrossDate
	, @nIsEnabled	
	, @priceListGross
	, @nUseHolidayRule
	
	set DATEFIRST @nDateFirst


	--Засекаем время окончания рассчета begin
	declare @endPriceCalculate datetime
	set @endPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@endPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11010, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время окончания рассчета end

	--Записываем кол-во рассчитанных цен begin
	SET @sHI_Text = CONVERT(varchar(10),@calcPricesCount)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11011, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем кол-во рассчитанных цен end

	--Записываем скорость расчета цен begin
	declare @calculatingSpeed decimal(10,2), @seconds int
	set @seconds = datediff(ss,@beginPriceCalculate,@endPriceCalculate)
	if @seconds = 0
		set @seconds = 1
	set @calculatingSpeed = @calcPricesCount / @seconds
	SET @sHI_Text = CONVERT(varchar(10),@calculatingSpeed)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11012, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем скорость расчета цен end

	-- апдейтим таблицу CalculatingPriceLists
	update dbo.CalculatingPriceLists set CP_Status = 0, CP_StartTime = null where CP_Key = @nCalculatingKey
	
	set nocount off
	Return 0
END
GO

grant execute on [dbo].[CalculatePriceList] to public
GO
/*********************************************************************/
/* end sp_CalculatePriceList.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceList.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceListDynamic.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CalculatePriceListDynamic.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculatePriceListDynamic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CalculatePriceListDynamic]
GO

CREATE PROCEDURE [dbo].[CalculatePriceListDynamic]
(
	--<data>2014-06-06</data>
	--<version>9.2.21.9</version>
	@nPriceTourKey int,				-- ключ обсчитываемого тура
	@nCalculatingKey int,			-- ключ итерации дозаписи
	@dtSaleDate datetime,			-- дата продажи
	@nNullCostAsZero smallint,		-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,			-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,				-- признак дозаписи 0 - расчет, 1 - дозапись
	@nUseHolidayRule smallint		-- Правило выходного дня: 0 - не использовать, 1 - использовать
)
AS

SET ARITHABORT off;
set nocount on;
declare @beginTime datetime
set @beginTime = getDate()

declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent bigint
declare @nTP_PriceKeyMax bigint
declare @NumPrices int, @NumCalculated int, @PricesCount int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress decimal(14, 8)
declare @nTotalProgress decimal(14, 8)
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------
declare @ROUND_NOTWITHDISC int
declare @ROUND_SERVICE_MATH int
declare @ROUND_SERVICE0_5 int
declare @ROUND_PRICE0_5 int
declare @ROUND_SERVICE int
declare @ROUND_PRICE int
declare @ROUND_NOT int

Set @ROUND_NOTWITHDISC = 64
Set @ROUND_SERVICE_MATH = 32
Set @ROUND_SERVICE0_5 = 16
Set @ROUND_PRICE0_5 = 8
Set @ROUND_SERVICE = 4
Set @ROUND_PRICE = 2
Set @ROUND_NOT = 1
---------------------------------------------
declare @nIsEnabled smallint
--select @nIsEnabled = TO_IsEnabled from TP_Tours where TO_Key = @nPriceTourKey
--set @nIsEnabled = 0
---------------------------------------------
declare @tpPricesCount int
declare @isPriceListPluginRecalculation smallint
select @tpPricesCount = count(1) from tp_prices with(nolock) where tp_tokey = @nPriceTourKey

if exists(select top 1 1 from tp_lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_TotalDays is null)
begin
	select TI_Key as xTI_Key, TI_TOKey as xTI_TOKey, TI_CalculatingKey as xTI_CalculatingKey, ti_totaldays as xti_totaldays
	into #tmp2
	from tp_lists with(nolock)
	where TI_TOKey = @nPriceTourKey 
	and TI_TotalDays is null
		
	update #tmp2 with(rowlock)
	set
		xti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
      								end) + ts_day - 1 
 							end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on (tl_tskey = ts_key and TS_TOKey = @nPriceTourKey and TL_TOKey = @nPriceTourKey)
				where tl_tikey = xti_key)
		
	update TP_Lists
	set ti_totaldays = xti_totaldays
	from #tmp2
	where xTI_Key = TI_Key

	drop table #tmp2
end

if (@nCalculatingKey is null)
begin
	select top 1 @nCalculatingKey = CP_Key from CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey and CP_Update = 0
	update tp_turdates set td_update = 0 where td_tokey = @nPriceTourKey
	update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
	if (@tpPricesCount <> 0)
		set @isPriceListPluginRecalculation = 1
	else
		set @isPriceListPluginRecalculation = 0
end
else
	set @isPriceListPluginRecalculation = 0

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

print 'Инициализация: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @beginTime = getDate()

BEGIN		
	--koshelev
	--MEG00027550
	if @nUpdate = 0
	begin
		update tp_tours with(rowlock) set to_datecreated = GetDate() where to_key = @nPriceTourKey
	end

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours with(nolock) where to_key = @nPriceTourKey

	if not exists (select 1 from CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey) and @nPriceTourKey is not null
	begin	
		insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_TourKey, CP_UserKey, CP_Status, CP_UseHolidayRule)
		values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @TrKey, @userKey, 1, @nUseHolidayRule)
	end
	else if @nPriceTourKey is not null
	begin
		update CalculatingPriceLists with(rowlock) set CP_Status = 1 where CP_Key = @nCalculatingKey
	end

	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours with(nolock) where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nUseHolidayRule = 0
		SET @sHI_Text = 'NO'
	ELSE
		SET @sHI_Text = 'YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11008, null, @sHI_Text, null, @nUpdate, null, null, 0
	
	--Засекаем время начала рассчета begin
	declare @beginPriceCalculate datetime
	set @beginPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@beginPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11009, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время начала рассчета end
	
	print 'Запись в историю: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	Set @nTotalProgress=1
	update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	select distinct TO_Key, TD_Date + TS_Day - 1 as flight_day, TS_Code, TS_OpPartnerKey, TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, ti_totaldays, TD_Date
	into #TP_Flights1
	from TP_Tours with(nolock) join TP_Services with(nolock) on TO_Key = TS_TOKey and TS_SVKey = 1
		join TP_ServiceLists with(nolock) on TL_TSKey = TS_Key and TS_TOKey = TO_Key
		join TP_Lists with(nolock) on TL_TIKey = TI_Key and TI_TOKey = TO_Key
		join TP_TurDates with(nolock) on TD_TOKey = TO_Key
	where TO_Key = @nPriceTourKey

	delete from #TP_Flights1 where exists (Select 1 From TP_Flights with(nolock) Where TF_TOKey=@nPriceTourKey and TF_Date=flight_day
		and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
		and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2 and TF_Days = ti_totaldays)
		
	insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_TourDate, TF_CalculatingKey)
	select *, @nCalculatingKey  from #tp_flights1

	drop table #tp_flights1
	
	print 'Подбор перелетов 1: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	select 
		TF_ID, null as TF_CodeNew, null as TF_SubCode1New, null as TF_PRKeyNew, TF_CalculatingKey, 
		TF_CodeOld, TF_Subcode2, TF_PRKeyOld, TF_CTKey, TF_Subcode1, TF_PKKey, TF_Date, TF_TourDate, TF_Days
	into #TP_Flights
	from TP_Flights with(nolock)
	where TF_TOKey = @nPriceTourKey

	create index X_TP_Flights ON #TP_Flights (TF_ID)
	include (TF_CodeNew, TF_PRKeyNew, TF_SubCode1New, TF_CalculatingKey)
--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре (с учетом цен в которых дата продажи NULL или больше/равна сегодняшней дате )----
	Update	#TP_Flights Set TF_CodeNew = TF_CodeOld, TF_PRKeyNew = TF_PRKeyOld, TF_SubCode1New = TF_SubCode1, TF_CalculatingKey = @nCalculatingKey
	Where	exists (SELECT 1 FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%')
			and exists (select 1 from Costs where CS_Code = TF_CodeOld and CS_SVKey = 1 and CS_SubCode1 = TF_Subcode1 and CS_PRKey = TF_PRKeyOld and CS_PKKey = TF_PKKey 
			and TF_Date BETWEEN ISNULL(CS_Date, '1900-01-01') AND ISNULL(CS_DateEnd, '2053-01-01') 
			and TF_TourDate BETWEEN ISNULL(CS_CHECKINDATEBEG, '1900-01-01') AND ISNULL(CS_CHECKINDATEEND, '2053-01-01')
			and (ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') 
			and (CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) 
			and (cs_DateSellBeg <= @dtSaleDate or cs_DateSellBeg is null) 
			and (cs_DateSellEnd >= @dtSaleDate or cs_DateSellEnd is null))
	
	print 'Подбор перелетов 2: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----		
		IF exists(SELECT top 1 1 FROM #TP_Flights WHERE TF_CodeNew is Null)
		begin
			print 'Подбираем перелет'
			
			declare @newFlightsPartnerTable table
			(
				-- идентификатор
				xId int identity(1,1) primary key,
				-- ключ записи в таблице tp_flights
				xTFId int,
				-- ключ нового партнера
				xPRKeyNew int,
				-- ключ нового перелета
				xCHKeyNew int,
				-- ключ нового тарифа на перелет
				xASKeyNew int
			)

			-- подбираем подходящие нам перелеты
			SELECT TF_Id as xTFId, CS_Code as xCHKeyNew, CS_SubCode1 as xASKeyNew, CS_PRKey as xPRKeyNew,
			case
				when TF_PRKeyOld = CS_PRKey then 4
				else 0 
			end 
			+
			case
				when TF_CodeOld = CH_Key then 2
				else 0 
			end 
			+ 
			case
				when TF_SubCode1 = CS_SubCode1 then 1
				else 0 
			end as xPriority
			into #tmp
			FROM AirSeason with(nolock), Charter with(nolock), Costs with(nolock), #TP_Flights with(nolock)
			WHERE CH_CityKeyFrom = TF_Subcode2 and
			CH_CityKeyTo = TF_CTKey and
			CS_Code = CH_Key and
			AS_CHKey = CH_Key and
			CS_SVKey = 1 and
			(	isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = CS_SubCode1), '')
				= 
				isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = TF_Subcode1), '')
			)
			and (cs_DateSellBeg <= @dtSaleDate or cs_DateSellBeg is null) 
			and (cs_DateSellEnd >= @dtSaleDate or cs_DateSellEnd is null)
			and CS_PKKey = TF_PKKey and
			TF_Date BETWEEN AS_DateFrom and AS_DateTo and
			TF_Date BETWEEN CS_Date and CS_DateEnd and
			AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%' and
			(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') and
			(CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) and
			TF_CodeNew is Null;
			
			with max_priority as
			(
				select xTFId, max(xPriority) as xPriority
				from #tmp
				group by xTFId
			)
			insert into @newFlightsPartnerTable (xTFId, xCHKeyNew, xASKeyNew, xPRKeyNew)
			select x.xTFId, min(x.xCHKeyNew), min(x.xASKeyNew), min(x.xPRKeyNew)
			from #tmp as x
			where exists (	select 1 
							from max_priority as xmax
							where x.xTFId = xmax.xTFId
								and x.xPriority = xmax.xPriority)
			group by x.xTFId, x.xPriority
			
			-- обновляем информацию о найденом перелете
			update #TP_Flights
			set TF_CodeNew = xCHKeyNew,
			TF_SubCode1New = xASKeyNew,
			TF_PRKeyNew = xPRKeyNew,
			TF_CalculatingKey = @nCalculatingKey
			from @newFlightsPartnerTable
			where TF_Id = xTFId
			
			print 'Закончили подбор перелетов'		
		end
		
		print 'Подбор перелетов 3: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()	
	END

	update TF set 
		TF.TF_CodeNew = TF_Temp.TF_CodeNew, 
		TF.TF_PRKeyNew = TF_Temp.TF_PRKeyNew, 
		TF.TF_SubCode1New = TF_Temp.TF_SubCode1New, 
		TF.TF_CalculatingKey = TF_Temp.TF_CalculatingKey
	from TP_Flights TF
	inner join #TP_Flights TF_Temp on TF.TF_ID = TF_Temp.TF_ID

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------
	if (1 = 1)
	BEGIN
		update [dbo].tp_tours with(rowlock) set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices
		(
			[xTP_Key] bigint NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			-- формула расчета общей цены тура
			[xTP_Gross] as (((case when  [xSCPId_1] is not null then  [xGross_1] else 0 end) * (1 + (isnull( [xMarginPercent_1], 0)/100) * (1 + (isnull( [xIsCommission_1], 0) - 1) * isnull( [xCommissionOnly_1], 0))) + isnull( [xAddCostIsCommission_1], 0) * (1 + (isnull( [xMarginPercent_1], 0)/100)) + isnull( [xAddCostNoCommission_1], 0) * (1 + (isnull( [xMarginPercent_1], 0)/100) * (1 - isnull( [xCommissionOnly_1], 0)))) +
							((case when  [xSCPId_2] is not null then  [xGross_2] else 0 end) * (1 + (isnull( [xMarginPercent_2], 0)/100) * (1 + (isnull( [xIsCommission_2], 0) - 1) * isnull( [xCommissionOnly_2], 0))) + isnull( [xAddCostIsCommission_2], 0) * (1 + (isnull( [xMarginPercent_2], 0)/100)) + isnull( [xAddCostNoCommission_2], 0) * (1 + (isnull( [xMarginPercent_2], 0)/100) * (1 - isnull( [xCommissionOnly_2], 0)))) +
							((case when  [xSCPId_3] is not null then  [xGross_3] else 0 end) * (1 + (isnull( [xMarginPercent_3], 0)/100) * (1 + (isnull( [xIsCommission_3], 0) - 1) * isnull( [xCommissionOnly_3], 0))) + isnull( [xAddCostIsCommission_3], 0) * (1 + (isnull( [xMarginPercent_3], 0)/100)) + isnull( [xAddCostNoCommission_3], 0) * (1 + (isnull( [xMarginPercent_3], 0)/100) * (1 - isnull( [xCommissionOnly_3], 0)))) +
							((case when  [xSCPId_4] is not null then  [xGross_4] else 0 end) * (1 + (isnull( [xMarginPercent_4], 0)/100) * (1 + (isnull( [xIsCommission_4], 0) - 1) * isnull( [xCommissionOnly_4], 0))) + isnull( [xAddCostIsCommission_4], 0) * (1 + (isnull( [xMarginPercent_4], 0)/100)) + isnull( [xAddCostNoCommission_4], 0) * (1 + (isnull( [xMarginPercent_4], 0)/100) * (1 - isnull( [xCommissionOnly_4], 0)))) +
							((case when  [xSCPId_5] is not null then  [xGross_5] else 0 end) * (1 + (isnull( [xMarginPercent_5], 0)/100) * (1 + (isnull( [xIsCommission_5], 0) - 1) * isnull( [xCommissionOnly_5], 0))) + isnull( [xAddCostIsCommission_5], 0) * (1 + (isnull( [xMarginPercent_5], 0)/100)) + isnull( [xAddCostNoCommission_5], 0) * (1 + (isnull( [xMarginPercent_5], 0)/100) * (1 - isnull( [xCommissionOnly_5], 0)))) +
							((case when  [xSCPId_6] is not null then  [xGross_6] else 0 end) * (1 + (isnull( [xMarginPercent_6], 0)/100) * (1 + (isnull( [xIsCommission_6], 0) - 1) * isnull( [xCommissionOnly_6], 0))) + isnull( [xAddCostIsCommission_6], 0) * (1 + (isnull( [xMarginPercent_6], 0)/100)) + isnull( [xAddCostNoCommission_6], 0) * (1 + (isnull( [xMarginPercent_6], 0)/100) * (1 - isnull( [xCommissionOnly_6], 0)))) +
							((case when  [xSCPId_7] is not null then  [xGross_7] else 0 end) * (1 + (isnull( [xMarginPercent_7], 0)/100) * (1 + (isnull( [xIsCommission_7], 0) - 1) * isnull( [xCommissionOnly_7], 0))) + isnull( [xAddCostIsCommission_7], 0) * (1 + (isnull( [xMarginPercent_7], 0)/100)) + isnull( [xAddCostNoCommission_7], 0) * (1 + (isnull( [xMarginPercent_7], 0)/100) * (1 - isnull( [xCommissionOnly_7], 0)))) +
							((case when  [xSCPId_8] is not null then  [xGross_8] else 0 end) * (1 + (isnull( [xMarginPercent_8], 0)/100) * (1 + (isnull( [xIsCommission_8], 0) - 1) * isnull( [xCommissionOnly_8], 0))) + isnull( [xAddCostIsCommission_8], 0) * (1 + (isnull( [xMarginPercent_8], 0)/100)) + isnull( [xAddCostNoCommission_8], 0) * (1 + (isnull( [xMarginPercent_8], 0)/100) * (1 - isnull( [xCommissionOnly_8], 0)))) +
							((case when  [xSCPId_9] is not null then  [xGross_9] else 0 end) * (1 + (isnull( [xMarginPercent_9], 0)/100) * (1 + (isnull( [xIsCommission_9], 0) - 1) * isnull( [xCommissionOnly_9], 0))) + isnull( [xAddCostIsCommission_9], 0) * (1 + (isnull( [xMarginPercent_9], 0)/100)) + isnull( [xAddCostNoCommission_9], 0) * (1 + (isnull( [xMarginPercent_9], 0)/100) * (1 - isnull( [xCommissionOnly_9], 0)))) +
							((case when [xSCPId_10] is not null then [xGross_10] else 0 end) * (1 + (isnull([xMarginPercent_10], 0)/100) * (1 + (isnull([xIsCommission_10], 0) - 1) * isnull([xCommissionOnly_10], 0))) + isnull([xAddCostIsCommission_10], 0) * (1 + (isnull([xMarginPercent_10], 0)/100)) + isnull([xAddCostNoCommission_10], 0) * (1 + (isnull([xMarginPercent_10], 0)/100) * (1 - isnull([xCommissionOnly_10], 0)))) +
							((case when [xSCPId_11] is not null then [xGross_11] else 0 end) * (1 + (isnull([xMarginPercent_11], 0)/100) * (1 + (isnull([xIsCommission_11], 0) - 1) * isnull([xCommissionOnly_11], 0))) + isnull([xAddCostIsCommission_11], 0) * (1 + (isnull([xMarginPercent_11], 0)/100)) + isnull([xAddCostNoCommission_11], 0) * (1 + (isnull([xMarginPercent_11], 0)/100) * (1 - isnull([xCommissionOnly_11], 0)))) +
							((case when [xSCPId_12] is not null then [xGross_12] else 0 end) * (1 + (isnull([xMarginPercent_12], 0)/100) * (1 + (isnull([xIsCommission_12], 0) - 1) * isnull([xCommissionOnly_12], 0))) + isnull([xAddCostIsCommission_12], 0) * (1 + (isnull([xMarginPercent_12], 0)/100)) + isnull([xAddCostNoCommission_12], 0) * (1 + (isnull([xMarginPercent_12], 0)/100) * (1 - isnull([xCommissionOnly_12], 0)))) +
							((case when [xSCPId_13] is not null then [xGross_13] else 0 end) * (1 + (isnull([xMarginPercent_13], 0)/100) * (1 + (isnull([xIsCommission_13], 0) - 1) * isnull([xCommissionOnly_13], 0))) + isnull([xAddCostIsCommission_13], 0) * (1 + (isnull([xMarginPercent_13], 0)/100)) + isnull([xAddCostNoCommission_13], 0) * (1 + (isnull([xMarginPercent_13], 0)/100) * (1 - isnull([xCommissionOnly_13], 0)))) +
							((case when [xSCPId_14] is not null then [xGross_14] else 0 end) * (1 + (isnull([xMarginPercent_14], 0)/100) * (1 + (isnull([xIsCommission_14], 0) - 1) * isnull([xCommissionOnly_14], 0))) + isnull([xAddCostIsCommission_14], 0) * (1 + (isnull([xMarginPercent_14], 0)/100)) + isnull([xAddCostNoCommission_14], 0) * (1 + (isnull([xMarginPercent_14], 0)/100) * (1 - isnull([xCommissionOnly_14], 0)))) +
							((case when [xSCPId_15] is not null then [xGross_15] else 0 end) * (1 + (isnull([xMarginPercent_15], 0)/100) * (1 + (isnull([xIsCommission_15], 0) - 1) * isnull([xCommissionOnly_15], 0))) + isnull([xAddCostIsCommission_15], 0) * (1 + (isnull([xMarginPercent_15], 0)/100)) + isnull([xAddCostNoCommission_15], 0) * (1 + (isnull([xMarginPercent_15], 0)/100) * (1 - isnull([xCommissionOnly_15], 0))))),
			[xTP_TIKey] [int] NOT NULL,
			[xTP_HotelKey] [int] NOT NULL,
			[xTP_DepartureKey] [int] NOT NULL,
			[xTP_CalculatingKey] [int] NULL,
			[xTP_Days] [int] null,
			[xTP_Rate] [nvarchar](2) null,
			[xSCPId_1] [int] null,
			[xSCPId_2] [int] null,
			[xSCPId_3] [int] null,
			[xSCPId_4] [int] null,
			[xSCPId_5] [int] null,
			[xSCPId_6] [int] null,
			[xSCPId_7] [int] null,
			[xSCPId_8] [int] null,
			[xSCPId_9] [int] null,
			[xSCPId_10] [int] null,
			[xSCPId_11] [int] null,
			[xSCPId_12] [int] null,
			[xSCPId_13] [int] null,
			[xSCPId_14] [int] null,
			[xSCPId_15] [int] null,
			
			[xSvKey_1] [int] null,
			[xSvKey_2] [int] null,
			[xSvKey_3] [int] null,
			[xSvKey_4] [int] null,
			[xSvKey_5] [int] null,
			[xSvKey_6] [int] null,
			[xSvKey_7] [int] null,
			[xSvKey_8] [int] null,
			[xSvKey_9] [int] null,
			[xSvKey_10] [int] null,
			[xSvKey_11] [int] null,
			[xSvKey_12] [int] null,
			[xSvKey_13] [int] null,
			[xSvKey_14] [int] null,
			[xSvKey_15] [int] null,
			
			[xGross_1] [money] null,
			[xGross_2] [money] null,
			[xGross_3] [money] null,
			[xGross_4] [money] null,
			[xGross_5] [money] null,
			[xGross_6] [money] null,
			[xGross_7] [money] null,
			[xGross_8] [money] null,
			[xGross_9] [money] null,
			[xGross_10] [money] null,
			[xGross_11] [money] null,
			[xGross_12] [money] null,
			[xGross_13] [money] null,
			[xGross_14] [money] null,
			[xGross_15] [money] null,
			
			[xAddCostIsCommission_1] [money] null,
			[xAddCostIsCommission_2] [money] null,
			[xAddCostIsCommission_3] [money] null,
			[xAddCostIsCommission_4] [money] null,
			[xAddCostIsCommission_5] [money] null,
			[xAddCostIsCommission_6] [money] null,
			[xAddCostIsCommission_7] [money] null,
			[xAddCostIsCommission_8] [money] null,
			[xAddCostIsCommission_9] [money] null,
			[xAddCostIsCommission_10] [money] null,
			[xAddCostIsCommission_11] [money] null,
			[xAddCostIsCommission_12] [money] null,
			[xAddCostIsCommission_13] [money] null,
			[xAddCostIsCommission_14] [money] null,
			[xAddCostIsCommission_15] [money] null,
			
			[xAddCostNoCommission_1] [money] null,
			[xAddCostNoCommission_2] [money] null,
			[xAddCostNoCommission_3] [money] null,
			[xAddCostNoCommission_4] [money] null,
			[xAddCostNoCommission_5] [money] null,
			[xAddCostNoCommission_6] [money] null,
			[xAddCostNoCommission_7] [money] null,
			[xAddCostNoCommission_8] [money] null,
			[xAddCostNoCommission_9] [money] null,
			[xAddCostNoCommission_10] [money] null,
			[xAddCostNoCommission_11] [money] null,
			[xAddCostNoCommission_12] [money] null,
			[xAddCostNoCommission_13] [money] null,
			[xAddCostNoCommission_14] [money] null,
			[xAddCostNoCommission_15] [money] null,
			
			[xMarginPercent_1] [money] null,
			[xMarginPercent_2] [money] null,
			[xMarginPercent_3] [money] null,
			[xMarginPercent_4] [money] null,
			[xMarginPercent_5] [money] null,
			[xMarginPercent_6] [money] null,
			[xMarginPercent_7] [money] null,
			[xMarginPercent_8] [money] null,
			[xMarginPercent_9] [money] null,
			[xMarginPercent_10] [money] null,
			[xMarginPercent_11] [money] null,
			[xMarginPercent_12] [money] null,
			[xMarginPercent_13] [money] null,
			[xMarginPercent_14] [money] null,
			[xMarginPercent_15] [money] null,
			
			[xCommissionOnly_1] [bit] null,
			[xCommissionOnly_2] [bit] null,
			[xCommissionOnly_3] [bit] null,
			[xCommissionOnly_4] [bit] null,
			[xCommissionOnly_5] [bit] null,
			[xCommissionOnly_6] [bit] null,
			[xCommissionOnly_7] [bit] null,
			[xCommissionOnly_8] [bit] null,
			[xCommissionOnly_9] [bit] null,
			[xCommissionOnly_10] [bit] null,
			[xCommissionOnly_11] [bit] null,
			[xCommissionOnly_12] [bit] null,
			[xCommissionOnly_13] [bit] null,
			[xCommissionOnly_14] [bit] null,
			[xCommissionOnly_15] [bit] null,
			
			[xIsCommission_1] [bit] null,
			[xIsCommission_2] [bit] null,
			[xIsCommission_3] [bit] null,
			[xIsCommission_4] [bit] null,
			[xIsCommission_5] [bit] null,
			[xIsCommission_6] [bit] null,
			[xIsCommission_7] [bit] null,
			[xIsCommission_8] [bit] null,
			[xIsCommission_9] [bit] null,
			[xIsCommission_10] [bit] null,
			[xIsCommission_11] [bit] null,
			[xIsCommission_12] [bit] null,
			[xIsCommission_13] [bit] null,
			[xIsCommission_14] [bit] null,
			[xIsCommission_15] [bit] null
		)

		CREATE NONCLUSTERED INDEX [x_fields] ON [#TP_Prices] 
		(
			[xTP_TOKey] ASC,
			[xTP_TIKey] ASC,
			[xTP_DateBegin] ASC			
		)

		DELETE FROM #TP_Prices
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours with(nolock) where to_key = @nPriceTourKey
		set @nTotalProgress = 5
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services with(rowlock) set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates with(rowlock) set td_checkmargin = 1 where
			exists(select 1 from TurMargin with(nolock) WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		
		print 'Инициализация расчета цен: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
		
		declare @tempTO_Rate nvarchar(3), @tempTO_TRKey int
		
		select @tempTO_Rate = TO_Rate, @tempTO_TRKey = TO_TRKey from tp_tours with(nolock) where TO_Key = @nPriceTourKey
		
		create table #CursorTable
		( 
			id int identity(1,1) primary key,
			ti_firsthdkey int, 
			ts_key int, 
			ti_key int, 
			td_date datetime, 
			ts_svkey int, 
			ts_code int, 
			ts_subcode1 int, 
			ts_subcode2 int, 
			ts_oppartnerkey int, 
			ts_oppacketkey int, 
			ts_day int, 
			ts_days int,
			tempTO_Rate varchar(3), 
			to_rate varchar(3), 
			ts_men int, 
			ts_tempgross float, 
			ts_checkmargin smallint, 
			td_checkmargin smallint, 
			ti_days int, 
			ts_ctkey int, 
			ts_attribute int,
			tiCtKeyFrom int,
			sv_IsDuration smallint,
			ti_totaldays int
		)
		
	  insert into #CursorTable (ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, tempTO_Rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute, tiCtKeyFrom, sv_IsDuration, ti_totaldays)
	  select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, @tempTO_Rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute, (select TL_CTDepartureKey from tbl_TurList with(nolock) where @tempTO_TRKey = TL_KEY), SV_IsDuration, ti_totaldays
	  from tp_services with(nolock), tp_lists with(nolock), tp_servicelists with(nolock), tp_turdates with(nolock), [Service] with(nolock)
			where @nPriceTourKey = ts_tokey and @nPriceTourKey = ti_tokey and @nPriceTourKey = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and @nPriceTourKey = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate and (@nUseHolidayRule = 0 or (case cast(datepart(weekday, td_date) as int) when 7 then 0 else cast(datepart(weekday, td_date) as int) end + ti_days) >= 8)
				and ts_svkey = SV_KEY
			order by ti_firsthdkey, td_date, ti_key, case when ti_firsthdkey = ts_code and TS_SVKey = 3 then 0 else 1 end
			
		update #CursorTable
		set ts_code = TF_CodeNew, ts_subcode1 = TF_SubCode1New, ts_oppartnerkey = TF_PRKeyNew
		from TP_Flights 
		where TF_TOKey = @nPriceTourKey
			and TF_CodeOld = ts_code 
			and TF_CalculatingKey = @nCalculatingKey
			and TF_PRKeyOld = ts_oppartnerkey 
			and TF_Date = td_date + ts_day - 1
			and TF_Days = ti_days
			and TF_Subcode1 = ts_subcode1
			and TF_SubCode2 = ts_subcode2
			and ts_svkey = 1
			
		-- формирование темповых таблиц на основе данных по туру
		create table #ServiceComponents
		(
			xSC_ID int identity(-10,-1) primary key,
			xSC_ID_InDB int,
			xSC_SVKEY int,
			xSC_CODE int,
			xSC_SUBCODE1 int,
			xSC_SUBCODE2 int,
			xSC_PRKEY int
		)
		SET IDENTITY_INSERT #ServiceComponents ON;
		
		insert into #ServiceComponents (xsc_id, xsc_svkey, xsc_code, xsc_subcode1, xsc_subcode2, xsc_prkey)
		select sc_id, sc_svkey, sc_code, sc_subcode1, sc_subcode2, sc_prkey 
		from TP_ServiceComponents with(nolock)
		where exists(select top 1 1 
					 from #CursorTable
					 where SC_SVKey = ts_svkey 
					 and SC_Code = ts_code 
					 and SC_SubCode1 = ts_subcode1 
					 and SC_SubCode2 = ts_subcode2 
					 and SC_PRKey = ts_oppartnerkey)
						 
		SET IDENTITY_INSERT #ServiceComponents OFF;

		CREATE INDEX IX_addServiceComponents ON #ServiceComponents
		(
			xSC_SVKEY, 
			xSC_CODE, 
			xSC_SUBCODE1, 
			xSC_SUBCODE2, 
			xSC_PRKEY
		)
		INCLUDE (xSC_ID);
			
		create table #ServiceCalculateParametrs
		(
			xSCP_Id int identity(-10,-1) primary key,
			xSCP_Id_InDB int,
			xSCP_SCId int,
			xscp_SVKEY int,
			xSCP_Date datetime,
			xSCP_DateCheckIn datetime,
			xSCP_Men int,
			xSCP_Days int,
			xSCP_PKKey int,
			xSCP_TourDays int,
			xSCP_DeleteDate datetime
		)
		SET IDENTITY_INSERT #ServiceCalculateParametrs ON;
		
		insert into #ServiceCalculateParametrs (xscp_id, xscp_scid, xscp_svkey, xscp_date, xscp_datecheckin, xscp_men, xscp_days, xscp_pkkey, xscp_tourdays)
		select SCP_Id, SCP_SCId, SCP_SvKey, SCP_Date, SCP_DateCheckIn, SCP_Men, SCP_Days, SCP_PKKey, SCP_TourDays 
		from TP_ServiceCalculateParametrs with(nolock)
		where exists(select 1
					 from #CursorTable
					 where SCP_SvKey = ts_svkey
					 and SCP_Date = dateAdd(dd, ts_day-1, td_date)
					 and SCP_DateCheckIn = td_date
					 and SCP_Men = ts_men
					 and SCP_Days = ts_days
					 and SCP_PKKey = ts_oppacketkey
					 and SCP_TourDays = ti_totaldays)
		and SCP_SCId in (select xsc_id from #ServiceComponents)
		
		SET IDENTITY_INSERT #ServiceCalculateParametrs OFF;

		CREATE INDEX IX_addServiceCalculateParametrs ON #ServiceCalculateParametrs
		(
			[xSCP_SCId] ASC,
			[xSCP_Date] ASC,
			[xSCP_DateCheckIn] ASC,
			[xSCP_Men] ASC,
			[xSCP_Days] ASC,
			[xSCP_TourDays] ASC,
			[xSCP_PKKey] ASC,
			[xSCP_DeleteDate] ASC,
			[xSCP_Id] ASC
		);
		
		create table #ServiceTours
		(
			xST_ID int identity(-10,-1)  primary key,
			xST_SCID int,
			xST_TOKEY int,
			xST_TRKEY int,
			xST_SVKEY int
		)
		
		SET IDENTITY_INSERT #ServiceTours ON;
		
		insert into #ServiceTours (xst_id, xst_scid, xst_tokey, xst_trkey, xst_svkey)
		select st_id, st_scid, st_tokey, st_trkey, st_svkey 
		from TP_ServiceTours with(nolock)
		where st_tokey = @nPriceTourKey
			and st_scid in (select xsc_id from #ServiceComponents)
			
		SET IDENTITY_INSERT #ServiceTours OFF;

		CREATE INDEX IX_addServiceTours ON #ServiceTours
		(
			xST_SVKEY, 
			xST_SCID, 
			xST_TOKEY, 
			xST_TRKEY
		)
		
		create table #TourParametrs
		(
			xTP_ID int identity(-10,-1) primary key,
			xTP_TOKey int,
			xTP_TourDays int,
			xTP_DateCheckIn datetime
		)
		
		SET IDENTITY_INSERT #TourParametrs ON;
				
		insert into #TourParametrs (xtp_id, xtp_tokey, xtp_tourdays, xtp_datecheckin)
		select tp_id, tp_tokey, tp_tourdays, tp_datecheckin  
		from TP_TourParametrs with(nolock)
		where tp_datecheckin in (select td_date 
								 from TP_TurDates with(nolock)
								 where td_calculatingkey = @nCalculatingKey)
				and tp_tokey = @nPriceTourKey
		
		SET IDENTITY_INSERT #TourParametrs OFF;

		CREATE INDEX IX_addServiceTours ON #TourParametrs
		(
			xTP_TOKey, 
			xTP_TourDays, 
			xTP_DateCheckIn
		)
		
		create table #ServicePriceActualDate
		(
			xSPAD_Id int identity (-10,-1) primary key,
			xSPAD_SCPId int,
			xSPAD_IsCommission bit,
			xSPAD_Rate varchar(3),
			xSPAD_SaleDate datetime,
			xSPAD_Gross money,
			xspad_Netto money,
			xspad_DateLastChange datetime,
			xspad_DateLastCalculate datetime,
			xSPAD_NeedApply int,
			xspad_AutoOnline int default 0
		)
		
		SET IDENTITY_INSERT #ServicePriceActualDate ON;
		
		insert into #ServicePriceActualDate (xSPAD_Id, xSPAD_SCPId, xSPAD_IsCommission, xSPAD_Rate, xSPAD_SaleDate, xSPAD_Gross, xspad_Netto, xspad_DateLastChange, xspad_DateLastCalculate, xSPAD_NeedApply, xspad_AutoOnline)
		select SPAD_Id, SPAD_SCPId, SPAD_IsCommission, SPAD_Rate, SPAD_SaleDate, SPAD_Gross,spad_Netto, spad_DateLastChange, spad_DateLastCalculate, SPAD_NeedApply, spad_AutoOnline
		from TP_ServicePriceActualDate with(nolock)
		where 
		SPAD_SaleDate is null 
		and SPAD_SCPId in (select xSCP_ID 
							 from #ServiceCalculateParametrs)
					  
		SET IDENTITY_INSERT #ServicePriceActualDate OFF;

		CREATE INDEX IX_INDEX2 ON #ServicePriceActualDate(xSPAD_SCPId, xSPAD_SaleDate, xSPAD_Rate, xSPAD_NeedApply)
		include (xSPAD_Gross, xSPAD_IsCommission)
		
		create table #GetServiceCost
		(
			id int not null identity(1,1) primary key,
			svKey int,
			code int,
			code1 int,
			code2 int,
			prKey int,
			packetKey int,
			tempdate datetime,
			tempdays int,
			resRate varchar(2),
			men int,
			discountPercent decimal(14,2),
			margin int,
			marginType decimal(14,2),
			sellDate datetime,
			tourKey int,
			tourDate datetime,
			tourDays int,
			netto decimal(14,2),
			brutto money, 
			nSPId int,
			discount decimal(14,2)
		)
		
		CREATE INDEX IX_INDEX1 ON #GetServiceCost(svKey, code, code1, code2, prKey, packetKey, tempdate, tempdays, resRate, men, discountPercent, margin, marginType, sellDate, tourDate, tourDays)
		include (netto, brutto, nSPId, discount)
		
		declare serviceCursor cursor local fast_forward for
		select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, @tempTO_Rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute,tiCtKeyFrom, sv_IsDuration, ti_totaldays
		from #CursorTable

		open serviceCursor
		
			
		SELECT @round = ST_RoundService FROM Setting
		--MEG00036108 увеличил значение
		set @nProgressSkipLimit = 10000
		set @nProgressSkipCounter = 0

		declare @calcPricesCount int, @calcPriceListCount int, @calcTurDates int, @oldPriceKeyCurrent int
		select @calcPriceListCount = COUNT(1) from TP_Lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_UPDATE = @nUpdate
		select @calcTurDates = COUNT(1) from TP_TurDates with(nolock) where TD_TOKey = @nPriceTourKey and TD_UPDATE = @nUpdate
		select @calcPricesCount = @calcPriceListCount * @calcTurDates
		set @NumPrices = @calcPricesCount
		
		if @NumPrices <> 0
			set @nDeltaProgress = (97.0 - 5) / @NumPrices
		else
			set @nDeltaProgress = 97.0 - 5

		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		delete from #TP_Prices
		
		declare @IsDuration smallint
		declare @tiCtKeyFrom int, @tiDays int, @titotaldays int
		declare @tsKey_1 int, @tsKey_2 int, @tsKey_3 int, @tsKey_4 int, @tsKey_5 int, @tsKey_6 int, @tsKey_7 int, @tsKey_8 int, @tsKey_9 int, @tsKey_10 int, @tsKey_11 int, @tsKey_12 int, @tsKey_13 int, @tsKey_14 int, @tsKey_15 int
		declare @tsSVKey_1 int, @tsSVKey_2 int, @tsSVKey_3 int, @tsSVKey_4 int, @tsSVKey_5 int, @tsSVKey_6 int, @tsSVKey_7 int, @tsSVKey_8 int, @tsSVKey_9 int, @tsSVKey_10 int, @tsSVKey_11 int, @tsSVKey_12 int, @tsSVKey_13 int, @tsSVKey_14 int, @tsSVKey_15 int
		declare @tsGross_1 money, @tsGross_2 money, @tsGross_3 money, @tsGross_4 money, @tsGross_5 money, @tsGross_6 money, @tsGross_7 money, @tsGross_8 money, @tsGross_9 money, @tsGross_10 money, @tsGross_11 money, @tsGross_12 money, @tsGross_13 money, @tsGross_14 money, @tsGross_15 money
		declare @tsAddIsCommission_1 money, @tsAddIsCommission_2 money, @tsAddIsCommission_3 money, @tsAddIsCommission_4 money, @tsAddIsCommission_5 money, @tsAddIsCommission_6 money, @tsAddIsCommission_7 money, @tsAddIsCommission_8 money, @tsAddIsCommission_9 money, @tsAddIsCommission_10 money, @tsAddIsCommission_11 money, @tsAddIsCommission_12 money, @tsAddIsCommission_13 money, @tsAddIsCommission_14 money, @tsAddIsCommission_15 money
		declare @tsAddNoCommission_1 money, @tsAddNoCommission_2 money, @tsAddNoCommission_3 money, @tsAddNoCommission_4 money, @tsAddNoCommission_5 money, @tsAddNoCommission_6 money, @tsAddNoCommission_7 money, @tsAddNoCommission_8 money, @tsAddNoCommission_9 money, @tsAddNoCommission_10 money, @tsAddNoCommission_11 money, @tsAddNoCommission_12 money, @tsAddNoCommission_13 money, @tsAddNoCommission_14 money, @tsAddNoCommission_15 money
		declare @tsMarginPercent_1 money, @tsMarginPercent_2 money, @tsMarginPercent_3 money, @tsMarginPercent_4 money, @tsMarginPercent_5 money, @tsMarginPercent_6 money, @tsMarginPercent_7 money, @tsMarginPercent_8 money, @tsMarginPercent_9 money, @tsMarginPercent_10 money, @tsMarginPercent_11 money, @tsMarginPercent_12 money, @tsMarginPercent_13 money, @tsMarginPercent_14 money, @tsMarginPercent_15 money
		declare @tsCommissionOnly_1 money, @tsCommissionOnly_2 money, @tsCommissionOnly_3 money, @tsCommissionOnly_4 money, @tsCommissionOnly_5 money, @tsCommissionOnly_6 money, @tsCommissionOnly_7 money, @tsCommissionOnly_8 money, @tsCommissionOnly_9 money, @tsCommissionOnly_10 money, @tsCommissionOnly_11 money, @tsCommissionOnly_12 money, @tsCommissionOnly_13 money, @tsCommissionOnly_14 money, @tsCommissionOnly_15 money
		declare @tsIsCommission_1 bit, @tsIsCommission_2 bit, @tsIsCommission_3 bit, @tsIsCommission_4 bit, @tsIsCommission_5 bit, @tsIsCommission_6 bit, @tsIsCommission_7 bit, @tsIsCommission_8 bit, @tsIsCommission_9 bit, @tsIsCommission_10 bit, @tsIsCommission_11 bit, @tsIsCommission_12 bit, @tsIsCommission_13 bit, @tsIsCommission_14 bit, @tsIsCommission_15 bit
		-- если при записи в tp_prices оказывается, что @priceIsCorrect = 1, записываем цену
		declare @priceIsCorrect bit
		set @priceIsCorrect = 1


		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE, @tiCtKeyFrom, @IsDuration, @titotaldays
		
		set @fetchStatus = @@fetch_status	
			
		print 'Расчет цен 0: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
		While (@fetchStatus = 0)
		BEGIN
			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
		--очищаем переменные, записываем данные в таблицу #TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN				
				--записываем данные в таблицу #TP_Prices
				if @nPrevVariant <> -1
				begin
					if exists(select 1 from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant)
					begin
						--select @nCalculatingKey
						update #TP_Prices set xtp_calculatingkey = @nCalculatingKey where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_tikey = @nPrevVariant and xtp_gross <> @price_brutto
						
					end
					else if (@isPriceListPluginRecalculation = 0)
					begin
						--select @nCalculatingKey
						if (@priceIsCorrect = 1)
						begin
							insert into #TP_Prices (xtp_tokey, xtp_datebegin, xtp_tikey, xTP_CalculatingKey, xTP_Days, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
							, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
							, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
							, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
							, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
							, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
							, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
							, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
							, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15)
							values (@nPriceTourKey, @dtPrevDate, @nPrevVariant, @nCalculatingKey, @tiDays, @sRate, @hdKey, @tiCtKeyFrom
							, @tsKey_1, @tsKey_2, @tsKey_3, @tsKey_4, @tsKey_5, @tsKey_6, @tsKey_7, @tsKey_8, @tsKey_9, @tsKey_10, @tsKey_11, @tsKey_12, @tsKey_13, @tsKey_14, @tsKey_15
							, @tsSVKey_1, @tsSVKey_2, @tsSVKey_3, @tsSVKey_4, @tsSVKey_5, @tsSVKey_6, @tsSVKey_7, @tsSVKey_8, @tsSVKey_9, @tsSVKey_10, @tsSVKey_11, @tsSVKey_12, @tsSVKey_13, @tsSVKey_14, @tsSVKey_15
							, @tsGross_1, @tsGross_2, @tsGross_3, @tsGross_4, @tsGross_5, @tsGross_6, @tsGross_7, @tsGross_8, @tsGross_9, @tsGross_10, @tsGross_11, @tsGross_12, @tsGross_13, @tsGross_14, @tsGross_15
							, @tsAddIsCommission_1, @tsAddIsCommission_2, @tsAddIsCommission_3, @tsAddIsCommission_4, @tsAddIsCommission_5, @tsAddIsCommission_6, @tsAddIsCommission_7, @tsAddIsCommission_8, @tsAddIsCommission_9, @tsAddIsCommission_10, @tsAddIsCommission_11, @tsAddIsCommission_12, @tsAddIsCommission_13, @tsAddIsCommission_14, @tsAddIsCommission_15
							, @tsAddNoCommission_1, @tsAddNoCommission_2, @tsAddNoCommission_3, @tsAddNoCommission_4, @tsAddNoCommission_5, @tsAddNoCommission_6, @tsAddNoCommission_7, @tsAddNoCommission_8, @tsAddNoCommission_9, @tsAddNoCommission_10, @tsAddNoCommission_11, @tsAddNoCommission_12, @tsAddNoCommission_13, @tsAddNoCommission_14, @tsAddNoCommission_15
							, @tsMarginPercent_1, @tsMarginPercent_2, @tsMarginPercent_3, @tsMarginPercent_4, @tsMarginPercent_5, @tsMarginPercent_6, @tsMarginPercent_7, @tsMarginPercent_8, @tsMarginPercent_9, @tsMarginPercent_10, @tsMarginPercent_11, @tsMarginPercent_12, @tsMarginPercent_13, @tsMarginPercent_14, @tsMarginPercent_15
							, @tsCommissionOnly_1, @tsCommissionOnly_2, @tsCommissionOnly_3, @tsCommissionOnly_4, @tsCommissionOnly_5, @tsCommissionOnly_6, @tsCommissionOnly_7, @tsCommissionOnly_8, @tsCommissionOnly_9, @tsCommissionOnly_10, @tsCommissionOnly_11, @tsCommissionOnly_12, @tsCommissionOnly_13, @tsCommissionOnly_14, @tsCommissionOnly_15
							, @tsIsCommission_1, @tsIsCommission_2, @tsIsCommission_3, @tsIsCommission_4, @tsIsCommission_5, @tsIsCommission_6, @tsIsCommission_7, @tsIsCommission_8, @tsIsCommission_9, @tsIsCommission_10, @tsIsCommission_11, @tsIsCommission_12, @tsIsCommission_13, @tsIsCommission_14, @tsIsCommission_15)
						end
										
						set @priceIsCorrect = 1			
						set @tiDays = null
						
						set @tsKey_1 = null
						set @tsKey_2 = null
						set @tsKey_3 = null
						set @tsKey_4 = null
						set @tsKey_5 = null
						set @tsKey_6 = null
						set @tsKey_7 = null
						set @tsKey_8 = null
						set @tsKey_9 = null
						set @tsKey_10 = null
						set @tsKey_11 = null
						set @tsKey_12 = null
						set @tsKey_13 = null
						set @tsKey_14 = null
						set @tsKey_15 = null
						
						set @tsSVKey_1 = null
						set @tsSVKey_2 = null
						set @tsSVKey_3 = null
						set @tsSVKey_4 = null
						set @tsSVKey_5 = null
						set @tsSVKey_6 = null
						set @tsSVKey_7 = null
						set @tsSVKey_8 = null
						set @tsSVKey_9 = null
						set @tsSVKey_10 = null
						set @tsSVKey_11 = null
						set @tsSVKey_12 = null
						set @tsSVKey_13 = null
						set @tsSVKey_14 = null
						set @tsSVKey_15 = null
						
						set @tsGross_1 = null
						set @tsGross_2 = null
						set @tsGross_3 = null
						set @tsGross_4 = null
						set @tsGross_5 = null
						set @tsGross_6 = null
						set @tsGross_7 = null
						set @tsGross_8 = null
						set @tsGross_9 = null
						set @tsGross_10 = null
						set @tsGross_11 = null
						set @tsGross_12 = null
						set @tsGross_13 = null
						set @tsGross_14 = null
						set @tsGross_15 = null
						
						set @tsAddIsCommission_1 = null
						set @tsAddIsCommission_2 = null
						set @tsAddIsCommission_3 = null
						set @tsAddIsCommission_4 = null
						set @tsAddIsCommission_5 = null
						set @tsAddIsCommission_6 = null
						set @tsAddIsCommission_7 = null
						set @tsAddIsCommission_8 = null
						set @tsAddIsCommission_9 = null
						set @tsAddIsCommission_10 = null
						set @tsAddIsCommission_11 = null
						set @tsAddIsCommission_12 = null
						set @tsAddIsCommission_13 = null
						set @tsAddIsCommission_14 = null
						set @tsAddIsCommission_15 = null
						
						set @tsAddNoCommission_1 = null
						set @tsAddNoCommission_2 = null
						set @tsAddNoCommission_3 = null
						set @tsAddNoCommission_4 = null
						set @tsAddNoCommission_5 = null
						set @tsAddNoCommission_6 = null
						set @tsAddNoCommission_7 = null
						set @tsAddNoCommission_8 = null
						set @tsAddNoCommission_9 = null
						set @tsAddNoCommission_10 = null
						set @tsAddNoCommission_11 = null
						set @tsAddNoCommission_12 = null
						set @tsAddNoCommission_13 = null
						set @tsAddNoCommission_14 = null
						set @tsAddNoCommission_15 = null
						
						set @tsMarginPercent_1 = null
						set @tsMarginPercent_2 = null
						set @tsMarginPercent_3 = null
						set @tsMarginPercent_4 = null
						set @tsMarginPercent_5 = null
						set @tsMarginPercent_6 = null
						set @tsMarginPercent_7 = null
						set @tsMarginPercent_8 = null
						set @tsMarginPercent_9 = null
						set @tsMarginPercent_10 = null
						set @tsMarginPercent_11 = null
						set @tsMarginPercent_12 = null
						set @tsMarginPercent_13 = null
						set @tsMarginPercent_14 = null
						set @tsMarginPercent_15 = null
						
						set @tsCommissionOnly_1 = null
						set @tsCommissionOnly_2 = null
						set @tsCommissionOnly_3 = null
						set @tsCommissionOnly_4 = null
						set @tsCommissionOnly_5 = null
						set @tsCommissionOnly_6 = null
						set @tsCommissionOnly_7 = null
						set @tsCommissionOnly_8 = null
						set @tsCommissionOnly_9 = null
						set @tsCommissionOnly_10 = null
						set @tsCommissionOnly_11 = null
						set @tsCommissionOnly_12 = null
						set @tsCommissionOnly_13 = null
						set @tsCommissionOnly_14 = null
						set @tsCommissionOnly_15 = null
						
						set @tsIsCommission_1 = null
						set @tsIsCommission_2 = null
						set @tsIsCommission_3 = null
						set @tsIsCommission_4 = null
						set @tsIsCommission_5 = null
						set @tsIsCommission_6 = null
						set @tsIsCommission_7 = null
						set @tsIsCommission_8 = null
						set @tsIsCommission_9 = null
						set @tsIsCommission_10 = null
						set @tsIsCommission_11 = null
						set @tsIsCommission_12 = null
						set @tsIsCommission_13 = null
						set @tsIsCommission_14 = null
						set @tsIsCommission_15 = null
					end
				end
				
				--очищаем данные
				if @@fetch_status = 0
				begin
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				set @prevHdKey = @hdKey
			end
			
				if @@fetch_status <> 0
					break	
										
				declare @margin float, @marginType int, @addCostValueIsCommission money, @addCostValueNoCommission money
				declare @scId int -- ключ найденой записи в таблице TP_ServiceComponents
				declare @scpId int -- ключ найденой записи в таблице TP_ServiceCalculateParametrs
				declare @spadId  int -- ключ найденой записи в тиблице TP_ServiePriceActualDate
				
				---- gorshkov поднял дату сюда т.к. она нужна при замене дефолтного перелета на подобранный
				set @servicedate = dateAdd(dd, @nDay-1, @turdate)
				
				---- gorshkov проверка на то что данную услугу вообще нужно расчитывать
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				begin
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
					
				end
				else
				begin
					 --если есть ключ услуги то расчитываем, иначе проставляем null
					if (@nCode is not null)
					begin					
						set @tiDays = @TI_DAYS
						
						/*создадим структуру таблиц если ее нету*/
						exec ReCalculate_CreateServiceCalculateParametrs @TrKey, @nPriceTourKey, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nDay, @turdate, @nMen, @nDays, @nPacketkey, @titotaldays, @scId output, @scpId output
						declare @gross money, @addCostIsCommission money, @addCostNoCommission money, @addCostFromAdult money, @addCostFromChild money, @marginPercent money, @CommissionOnly bit, @isCommission bit, @tourRate varchar(2)
						
						/*Производим расчет стоимости услуги*/
						exec ReCalculateCosts_CalculatePriceList @scpId, @nBrutto output, @isCommission output, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, null, @nNetto, @nDiscount, @sDetailed, @sBadRate, @dtBadDate, @sDetailed, @nSPId, @TrKey, @turdate, @TI_DAYS, @IsDuration
						set @gross = @nBrutto
		
						/*Производим расчет наценки*/
						--промежуточная хранимка для работы с кэшем (TP_TourMarginActualDate)
						exec ReCalculateMargins_CalculatePriceList @TrKey, @nPriceTourKey, @turdate, @margin output, @marginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
						set @marginPercent = @margin
						set @CommissionOnly = @marginType
						
						/*Производим расчет доплаты*/
						exec GetServiceAddCosts @TrKey, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @turdate, @TI_DAYS, @nDays, @nMen, null, null, @addCostValueIsCommission output, @addCostValueNoCommission output, @addCostFromAdult output, @addCostFromChild output, @tourRate output
						set @addCostIsCommission = @addCostValueIsCommission
						set @addCostNoCommission = @addCostValueNoCommission
					end
					else
					begin
						set @gross = null
						set @addCostIsCommission = null
						set @addCostNoCommission = null
						set @marginPercent = null
						set @CommissionOnly = null
						set @isCommission = null
					end

						--проверям считать ли null цены = 0					
					if @nNullCostAsZero = 1 and @gross is null and @nSvkey not in (1,3)
						set @gross = 0
					if @nNullCostAsZero = 1 and @gross is null and @nSvkey = 1 and @nNoFlight = 0
						set @gross = 0

					-- если мы пытались расчитать цену, но у нас не получилось даже с настройками, значит цену записывать в tp_prices нельзя
					if (@gross is null)
						set @priceIsCorrect = 0
					
					-- запишем ключи TS_Key в таблицу (получим список услуг из которых состоит TP_Prices)
					if (@tsKey_1 is null)
					begin
						set @tsKey_1 = @scpId
						set @tsSVKey_1 = @nSvkey
						set @tsGross_1 = @gross
						set @tsAddIsCommission_1 = @addCostIsCommission
						set @tsAddNoCommission_1 = @addCostNoCommission
						set @tsMarginPercent_1 = @marginPercent
						set @tsCommissionOnly_1 = @CommissionOnly
						set @tsIsCommission_1 = @isCommission
					end
					else if (@tsKey_2 is null)
					begin
						set @tsKey_2 = @scpId
						set @tsSVKey_2 = @nSvkey
						set @tsGross_2 = @gross
						set @tsAddIsCommission_2 = @addCostIsCommission
						set @tsAddNoCommission_2 = @addCostNoCommission
						set @tsMarginPercent_2 = @marginPercent
						set @tsCommissionOnly_2 = @CommissionOnly
						set @tsIsCommission_2 = @isCommission
					end
					else if (@tsKey_3 is null)
					begin
						set @tsKey_3 = @scpId
						set @tsSVKey_3 = @nSvkey
						set @tsGross_3 = @gross
						set @tsAddIsCommission_3 = @addCostIsCommission
						set @tsAddNoCommission_3 = @addCostNoCommission
						set @tsMarginPercent_3 = @marginPercent
						set @tsCommissionOnly_3 = @CommissionOnly
						set @tsIsCommission_3 = @isCommission
					end
					else if (@tsKey_4 is null)
					begin
						set @tsKey_4 = @scpId
						set @tsSVKey_4 = @nSvkey
						set @tsGross_4 = @gross
						set @tsAddIsCommission_4 = @addCostIsCommission
						set @tsAddNoCommission_4 = @addCostNoCommission
						set @tsMarginPercent_4 = @marginPercent
						set @tsCommissionOnly_4 = @CommissionOnly
						set @tsIsCommission_4 = @isCommission
					end
					else if (@tsKey_5 is null)
					begin
						set @tsKey_5 = @scpId
						set @tsSVKey_5 = @nSvkey
						set @tsGross_5 = @gross
						set @tsAddIsCommission_5 = @addCostIsCommission
						set @tsAddNoCommission_5 = @addCostNoCommission
						set @tsMarginPercent_5 = @marginPercent
						set @tsCommissionOnly_5 = @CommissionOnly
						set @tsIsCommission_5 = @isCommission
					end
					else if (@tsKey_6 is null)
					begin
						set @tsKey_6 = @scpId
						set @tsSVKey_6 = @nSvkey
						set @tsGross_6 = @gross
						set @tsAddIsCommission_6 = @addCostIsCommission
						set @tsAddNoCommission_6 = @addCostNoCommission
						set @tsMarginPercent_6 = @marginPercent
						set @tsCommissionOnly_6 = @CommissionOnly
						set @tsIsCommission_6 = @isCommission
					end
					else if (@tsKey_7 is null)
					begin
						set @tsKey_7 = @scpId
						set @tsSVKey_7 = @nSvkey
						set @tsGross_7 = @gross
						set @tsAddIsCommission_7 = @addCostIsCommission
						set @tsAddNoCommission_7 = @addCostNoCommission
						set @tsMarginPercent_7 = @marginPercent
						set @tsCommissionOnly_7 = @CommissionOnly
						set @tsIsCommission_7 = @isCommission
					end
					else if (@tsKey_8 is null)
					begin
						set @tsKey_8 = @scpId
						set @tsSVKey_8 = @nSvkey
						set @tsGross_8 = @gross
						set @tsAddIsCommission_8 = @addCostIsCommission
						set @tsAddNoCommission_8 = @addCostNoCommission
						set @tsMarginPercent_8 = @marginPercent
						set @tsCommissionOnly_8 = @CommissionOnly
						set @tsIsCommission_8 = @isCommission
					end
					else if (@tsKey_9 is null)
					begin
						set @tsKey_9 = @scpId
						set @tsSVKey_9 = @nSvkey
						set @tsGross_9 = @gross
						set @tsAddIsCommission_9 = @addCostIsCommission
						set @tsAddNoCommission_9 = @addCostNoCommission
						set @tsMarginPercent_9 = @marginPercent
						set @tsCommissionOnly_9 = @CommissionOnly
						set @tsIsCommission_9 = @isCommission
					end
					else if (@tsKey_10 is null)
					begin
						set @tsKey_10 = @scpId
						set @tsSVKey_10 = @nSvkey
						set @tsGross_10 = @gross
						set @tsAddIsCommission_10 = @addCostIsCommission
						set @tsAddNoCommission_10 = @addCostNoCommission
						set @tsMarginPercent_10 = @marginPercent
						set @tsCommissionOnly_10 = @CommissionOnly
						set @tsIsCommission_10 = @isCommission
					end
					else if (@tsKey_11 is null)
					begin
						set @tsKey_11 = @scpId
						set @tsSVKey_11 = @nSvkey
						set @tsGross_11 = @gross
						set @tsAddIsCommission_11 = @addCostIsCommission
						set @tsAddNoCommission_11 = @addCostNoCommission
						set @tsMarginPercent_11 = @marginPercent
						set @tsCommissionOnly_11 = @CommissionOnly
						set @tsIsCommission_11 = @isCommission
					end
					else if (@tsKey_12 is null)
					begin
						set @tsKey_12 = @scpId
						set @tsSVKey_12 = @nSvkey
						set @tsGross_12 = @gross
						set @tsAddIsCommission_12 = @addCostIsCommission
						set @tsAddNoCommission_12 = @addCostNoCommission
						set @tsMarginPercent_12 = @marginPercent
						set @tsCommissionOnly_12 = @CommissionOnly
						set @tsIsCommission_12 = @isCommission
					end
					else if (@tsKey_13 is null)
					begin
						set @tsKey_13 = @scpId
						set @tsSVKey_13 = @nSvkey
						set @tsGross_13 = @gross
						set @tsAddIsCommission_13 = @addCostIsCommission
						set @tsAddNoCommission_13 = @addCostNoCommission
						set @tsMarginPercent_13 = @marginPercent
						set @tsCommissionOnly_13 = @CommissionOnly
						set @tsIsCommission_13 = @isCommission
					end
					else if (@tsKey_14 is null)
					begin
						set @tsKey_14 = @scpId
						set @tsSVKey_14 = @nSvkey
						set @tsGross_14 = @gross
						set @tsAddIsCommission_14 = @addCostIsCommission
						set @tsAddNoCommission_14 = @addCostNoCommission
						set @tsMarginPercent_14 = @marginPercent
						set @tsCommissionOnly_14 = @CommissionOnly
						set @tsIsCommission_14 = @isCommission
					end
					else if (@tsKey_15 is null)
					begin
						set @tsKey_15 = @scpId
						set @tsSVKey_15 = @nSvkey
						set @tsGross_15 = @gross
						set @tsAddIsCommission_15 = @addCostIsCommission
						set @tsAddNoCommission_15 = @addCostNoCommission
						set @tsMarginPercent_15 = @marginPercent
						set @tsCommissionOnly_15 = @CommissionOnly
						set @tsIsCommission_15 = @isCommission
					end

				end
		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE, @tiCtKeyFrom, @IsDuration, @titotaldays
		END
		
		close serviceCursor
		deallocate serviceCursor

		Set @nTotalProgress = 97
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		
		/* Заполнения основных таблиц, на основе темповых данных */

		declare @step int
		-- таблица сопоставления ключей ServiceComponents
		--если есть данные с отрицательными ключами - это новые данные, их надо добавить в основную таблицу
		if exists (select top 1 1 from #ServiceComponents where xsc_id < 0)
		begin
			insert into TP_ServiceComponents (sc_svkey, sc_code, sc_subcode1, sc_subcode2, sc_prkey)
			select xsc_svkey, xsc_code, xsc_subcode1, xsc_subcode2, xsc_prkey 
			from #ServiceComponents 
			where xsc_id < 0

			update #ServiceComponents
			set xSC_ID_InDB = sc_id
			from TP_ServiceComponents with(nolock)
			where 
			sc_svkey = xSC_SVKEY
			and sc_code = xSC_CODE
			and isnull(sc_subcode1,0) = isnull(xSC_SUBCODE1,0)
			and isnull(sc_subcode2,0) = isnull(xSC_SUBCODE2,0)
			and isnull(sc_prkey,0) = isnull(xSC_PRKEY,0) 			
			and xsc_id < 0
		end

		-- тут ничего не меняется колонка xSC_ID_InDB = xSC_ID
		update #ServiceComponents
		set xSC_ID_InDB = xSC_ID
		where xSC_ID > 0
		-------------------------------

		-- если есть данные с отрицательными ключами - это новые данные, их надо добавить в основную таблицу
		insert into TP_TourParametrs (tp_tokey, tp_tourdays, tp_datecheckin)
		select xtp_tokey, xtp_tourdays, xtp_datecheckin
		from #TourParametrs
		where xTP_ID < 0
		
		-- TP_ServiceTours
		insert into TP_ServiceTours (ST_SCId, ST_SVKey, ST_TOKey, ST_TRKey)
		select xSC_ID_InDB, xST_SVKey, xST_TOKey, xST_TRKey
		from #ServiceTours
		join #ServiceComponents on xSC_ID = xST_SCId
		where xST_ID < 0
		------------------

		-- TP_ServiceCalculateParametrs
		if exists (select top 1 1 from #ServiceCalculateParametrs where xSCP_Id < 0)
		begin
			insert into TP_ServiceCalculateParametrs (SCP_SCId, SCP_SvKey, SCP_Date, SCP_DateCheckIn, SCP_Men, SCP_Days, SCP_PKKey, SCP_TourDays)
			select xSC_ID_InDB, xSCP_SvKey, xSCP_Date, xSCP_DateCheckIn, xSCP_Men, xSCP_Days, xSCP_PKKey, xSCP_TourDays
			from #ServiceCalculateParametrs
			join #ServiceComponents on xSC_ID = xSCP_SCId
			where xSCP_Id < 0

			update #ServiceCalculateParametrs
			set xSCP_Id_InDB = scp_id
			from TP_ServiceCalculateParametrs with(nolock)
			join #ServiceComponents on scp_scid = xSC_ID_InDB
			where
			xSC_ID = xSCP_SCId
			and scp_date = xscp_date
			and scp_datecheckin = xscp_datecheckin
			and scp_men = xscp_men
			and scp_days = xscp_days
			and isnull(scp_tourdays,0) = isnull(xscp_tourdays,0)
			and scp_pkkey = xscp_pkkey
			and isnull(scp_deletedate, '19000101') = isnull(xscp_deletedate, '19000101')			
			and xSCP_Id < 0
		end

		update #ServiceCalculateParametrs
		set xSCP_Id_InDB = xSCP_Id
		where xSCP_Id > 0
		-------------------------------
		
		-- в таблице #TP_Prices для  новых (отрицательных) ST_SCPId происходит замена согласно таблице сопоставления ключей
		update #TP_Prices set xSCPId_1 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_1) where xSCPId_1 < 0
		update #TP_Prices set xSCPId_2 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_2) where xSCPId_2 < 0
		update #TP_Prices set xSCPId_3 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_3) where xSCPId_3 < 0
		update #TP_Prices set xSCPId_4 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_4) where xSCPId_4 < 0
		update #TP_Prices set xSCPId_5 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_5) where xSCPId_5 < 0
		update #TP_Prices set xSCPId_6 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_6) where xSCPId_6 < 0
		update #TP_Prices set xSCPId_7 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_7) where xSCPId_7 < 0
		update #TP_Prices set xSCPId_8 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_8) where xSCPId_8 < 0
		update #TP_Prices set xSCPId_9 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_9) where xSCPId_9 < 0
		update #TP_Prices set xSCPId_10 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_10) where xSCPId_10 < 0
		update #TP_Prices set xSCPId_11 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_11) where xSCPId_11 < 0
		update #TP_Prices set xSCPId_12 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_12) where xSCPId_12 < 0
		update #TP_Prices set xSCPId_13 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_13) where xSCPId_13 < 0
		update #TP_Prices set xSCPId_14 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_14) where xSCPId_14 < 0
		update #TP_Prices set xSCPId_15 = (select xSCP_Id_InDB from #ServiceCalculateParametrs where xSCP_Id = xSCPId_15) where xSCPId_15 < 0

		-- записи цен которые перерасчитались, обновляем из темповой таблицы 
		update TP_ServicePriceActualDate
		set SPAD_IsCommission = xSPAD_IsCommission,
			SPAD_Gross = xSPAD_Gross,			
			SPAD_Netto = xSPAD_Netto,
			SPAD_DateLastCalculate = xSPAD_DateLastCalculate,
			SPAD_NeedApply = ISNULL(xSPAD_NeedApply, 0)
		from #ServicePriceActualDate
		where xSPAD_Id = SPAD_Id 
		and xSPAD_Id > 0
		
		-- записи цен которых не было
		insert into TP_ServicePriceActualDate (SPAD_SCPId, SPAD_IsCommission, SPAD_Rate, SPAD_SaleDate, SPAD_Gross, spad_Netto, spad_DateLastChange, spad_DateLastCalculate, SPAD_NeedApply, spad_AutoOnline)
		select xSCP_Id_InDB, xSPAD_IsCommission, xSPAD_Rate, xSPAD_SaleDate, xSPAD_Gross, xspad_Netto, xspad_DateLastChange, xspad_DateLastCalculate, xSPAD_NeedApply, xspad_AutoOnline
		from #ServicePriceActualDate 
		join #ServiceCalculateParametrs on xSPAD_SCPId = xSCP_Id 
		where xSPAD_Id < 0 
		and xSPAD_NeedApply is not null
		
		print 'Расчет цен END: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 98
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		
		--удаление из веба
		if (@nIsEnabled = 1)
		begin
			if (@isPriceListPluginRecalculation = 0)
				EXEC ClearMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
			else
				EXEC ClearMasterWebSearchFields @nPriceTourKey, null
		end
		
		-- запомним ключи цен которые потом нужно будет удалить из TP_PriceComponents
		declare @tpKeysForDelete table
		(
			xtp_key bigint
		)
		
		insert into @tpKeysForDelete
		select tp_key from tp_prices with(nolock)
		where tp_tokey = @nPriceTourKey and 
			tp_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tp_DateBegin in (select td_date from TP_TurDates with(nolock) where td_tokey = @nPriceTourKey and TD_Update = @nUpdate)
		union
		select tpd_tpkey from dbo.TP_PricesDeleted with(nolock)
		where tpd_tokey = @nPriceTourKey and 
			tpd_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tpd_DateBegin in (select td_date from TP_TurDates with(nolock) where td_tokey = @nPriceTourKey and TD_Update = @nUpdate)
		
		insert into TP_PricesCleaner(PC_TRKEY, PC_TOKEY, PC_TPKEY, PC_CalculatingKey)
		select @trKey, TP_TOKEY, TP_KEY, @nCalculatingKey from dbo.TP_Prices with(nolock)
		where TP_Key in (select xtp_key from @tpKeysForDelete)	

		delete from dbo.TP_Prices with(rowlock)
		where TP_Key in (select xtp_key from @tpKeysForDelete)	
		
		delete from dbo.TP_PricesDeleted with(rowlock)
		where TPD_TPKey in (select xtp_key from @tpKeysForDelete)	
		
		delete from dbo.TP_PriceComponents with(rowlock)
		where PC_TPKey in (select xtp_key from @tpKeysForDelete)	
		
		-- удалим цены которые не посчитались
		delete #TP_Prices
		where xTP_Gross is null
			
		--чтобы не было просадки в ключах
		select @PricesCount = count(1) from #TP_Prices
		exec GetNBigintKeys 'TP_PRICES', @PricesCount, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @PricesCount
		
		update #tp_prices 
		set xTP_Key = @nTP_PriceKeyCurrent, @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
		
		-- заносим детализацию по посчитанному туру
		declare @insertedTpKeys table(
			tpkey bigint not null
		)

		while (exists(select top 1 1 from #TP_Prices with(nolock)))
		begin
			insert into @insertedTpKeys
			select top 50000 xtp_key
			from #TP_Prices with(nolock)
		
			INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, TP_Gross, TP_TIKey, TP_CalculatingKey)
			select xtp_key, xtp_tokey, xtp_dateBegin, CEILING(ROUND(xTP_Gross, 2)), xTP_TIKey, xTP_CalculatingKey 
			from #TP_Prices with(nolock) where xtp_key in (select tpkey from  @insertedTpKeys)

			insert into TP_PriceComponents (PC_TIKey, PC_TOKey, PC_TRKey, PC_TourDate, PC_TPKey, PC_Days, PC_Rate, PC_HotelKey, PC_DepartureKey
			, SCPId_1, SCPId_2, SCPId_3, SCPId_4, SCPId_5, SCPId_6, SCPId_7, SCPId_8, SCPId_9, SCPId_10, SCPId_11, SCPId_12, SCPId_13, SCPId_14, SCPId_15
			, SVKey_1, SVKey_2, SVKey_3, SVKey_4, SVKey_5, SVKey_6, SVKey_7, SVKey_8, SVKey_9, SVKey_10, SVKey_11, SVKey_12, SVKey_13, SVKey_14, SVKey_15
			, Gross_1, Gross_2, Gross_3, Gross_4, Gross_5, Gross_6, Gross_7, Gross_8, Gross_9, Gross_10, Gross_11, Gross_12, Gross_13, Gross_14, Gross_15
			, AddCostIsCommission_1, AddCostIsCommission_2, AddCostIsCommission_3, AddCostIsCommission_4, AddCostIsCommission_5, AddCostIsCommission_6, AddCostIsCommission_7, AddCostIsCommission_8, AddCostIsCommission_9, AddCostIsCommission_10, AddCostIsCommission_11, AddCostIsCommission_12, AddCostIsCommission_13, AddCostIsCommission_14, AddCostIsCommission_15
			, AddCostNoCommission_1, AddCostNoCommission_2, AddCostNoCommission_3, AddCostNoCommission_4, AddCostNoCommission_5, AddCostNoCommission_6, AddCostNoCommission_7, AddCostNoCommission_8, AddCostNoCommission_9, AddCostNoCommission_10, AddCostNoCommission_11, AddCostNoCommission_12, AddCostNoCommission_13, AddCostNoCommission_14, AddCostNoCommission_15
			, MarginPercent_1, MarginPercent_2, MarginPercent_3, MarginPercent_4, MarginPercent_5, MarginPercent_6, MarginPercent_7, MarginPercent_8, MarginPercent_9, MarginPercent_10, MarginPercent_11, MarginPercent_12, MarginPercent_13, MarginPercent_14, MarginPercent_15
			, CommissionOnly_1, CommissionOnly_2, CommissionOnly_3, CommissionOnly_4, CommissionOnly_5, CommissionOnly_6, CommissionOnly_7, CommissionOnly_8, CommissionOnly_9, CommissionOnly_10, CommissionOnly_11, CommissionOnly_12, CommissionOnly_13, CommissionOnly_14, CommissionOnly_15
			, IsCommission_1, IsCommission_2, IsCommission_3, IsCommission_4, IsCommission_5, IsCommission_6, IsCommission_7, IsCommission_8, IsCommission_9, IsCommission_10, IsCommission_11, IsCommission_12, IsCommission_13, IsCommission_14, IsCommission_15)
			select xTP_TIKey, xtp_tokey, @TrKey, xtp_dateBegin, xtp_key, xTP_Days, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
			, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
			, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
			, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
			, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
			, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
			, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
			, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
			, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15
			from #TP_Prices with(nolock) where xtp_key in (select tpkey from  @insertedTpKeys)

			delete #TP_Prices where xtp_key in (select tpkey from  @insertedTpKeys)
			delete from @insertedTpKeys
		end
				
		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------
		Set @nTotalProgress = 99
		update tp_lists with(rowlock) set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates with(rowlock) set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices with(nolock) Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services with(rowlock) set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey	
		
		print 'Запись результатов: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	END

	--Заполнение полей в таблице tp_lists
	declare @toKey int, @add int
	set @toKey = @nPriceTourKey
	set @add = @nUpdate

	update tp_lists 
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key),
			ti_nights = dbo.mwGetTiNights(ti_key)
	where
		ti_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey
	
	update tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey	


update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary with(nolock)
	where 
		ti_firsthdkey = hd_key
		and ti_tokey = @toKey
		and ti_firstctkey is null

	declare @ctdeparturekey int
	select	@ctdeparturekey = tl_ctdeparturekey
	from	tp_tours with(nolock)
		inner join tbl_turList with(nolock) on tbl_turList.tl_key = to_trkey
	where to_key = @tokey

	if (@ctdeparturekey is null or @ctdeparturekey = 0)
	begin
		-- Подбираем город вылета первого рейса
		exec GetCityDepartureKey @tokey, @ctdeparturekey output
	end

	update tp_lists
	set 
		ti_ctkeyfrom = @ctdeparturekey
	where ti_tokey = @tokey
	and ti_ctkeyfrom is null

	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = @ctdeparturekey

	update tp_lists
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists with(nolock)
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours with(nolock) on ts_tokey = to_key 
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = @ctdeparturekey or @existBackCharter = 0)
		and TI_TOKey = @tokey
		and TS_TOKey = @tokey 
		and TL_TOKey = @tokey
		and ti_chbackkey is null

	------------------------------------------------------------------------------

	Set @nTotalProgress = 100
	update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	
	select @nIsEnabled = TO_IsEnabled from TP_Tours where TO_Key = @nPriceTourKey
	
	
	--Засекаем время окончания рассчета begin
	declare @endPriceCalculate datetime
	set @endPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@endPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11010, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время окончания рассчета end

	--Записываем кол-во рассчитанных цен begin
	SET @sHI_Text = CONVERT(varchar(10),@calcPricesCount)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11011, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем кол-во рассчитанных цен end

	--Записываем скорость расчета цен begin
	declare @calculatingSpeed decimal(10,2), @seconds int
	set @seconds = datediff(ss,@beginPriceCalculate,@endPriceCalculate)
	if @seconds = 0
		set @seconds = 1
	set @calculatingSpeed = @calcPricesCount / @seconds
	SET @sHI_Text = CONVERT(varchar(10),@calculatingSpeed)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11012, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем скорость расчета цен end

	if (@nIsEnabled = 1)
	begin
		if (@isPriceListPluginRecalculation = 0)
			EXEC FillMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
		else
			EXEC FillMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
	end
	
	print 'Выставление в инет: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	--апдейтим таблицу CalculatingPriceLists
	update CalculatingPriceLists with(rowlock) set CP_Status = 0, CP_StartTime = null where CP_Key = @nCalculatingKey

	Return 0
END
go 

grant exec on CalculatePriceListDynamic to public

go
/*********************************************************************/
/* end sp_CalculatePriceListDynamic.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceListDynamic.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceListInit.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CalculatePriceListInit.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceListInit]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[CalculatePriceListInit]
GO

CREATE PROCEDURE [dbo].[CalculatePriceListInit]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nUseHolidayRule smallint		-- Правило выходного дня: 0 - не использовать, 1 - использовать
  )
AS
--<DATE>2014-10-28</DATE>
--<VERSION>9.2.21</VERSION>
BEGIN
	declare @tourKey int
	declare @userKey int
	declare @nCPKey int
	select @tourKey = TO_TRKey from TP_Tours where TO_Key = @nPriceTourKey
	exec GetUserKey @userKey output
	
	update TP_Tours set TO_UPDATE = 1 where TO_Key = @nPriceTourKey
	
	insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_TourKey, CP_UserKey, CP_Status, CP_UseHolidayRule, CP_CreateDate)
	values(@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @tourKey, @userKey, 1, @nUseHolidayRule, GETDATE())
	
	Set @nCPKey = SCOPE_IDENTITY()

	Return @nCPKey
END
GO

GRANT EXEC ON [dbo].[CalculatePriceListInit] TO PUBLIC
GO
/*********************************************************************/
/* end sp_CalculatePriceListInit.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculatePriceListInit.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculateReRunReplication.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CalculateReRunReplication.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculateReRunReplication]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CalculateReRunReplication]
GO

CREATE PROCEDURE [dbo].[CalculateReRunReplication]
(
	--<VERSION>9.2.20.3</VERSION>
	--<DATA>2013-12-17</DATA>
	@toKey int, -- ключ тура
	@cpKey int, -- ключ из таблицы CalculatePriceList
	@coutRowTPPriceChange bit -- изменилось количество цен в туре
) 
as
begin
	-- хранимка перезапускает руплику после обновления цен в таблице TP_Price
	-- сделана на основе ReCalculate_MigrateToPrice

	IF EXISTS (SELECT TOP 1 1 FROM TP_Tours WHERE to_Key = @toKey AND to_isEnabled = 1)
	BEGIN
		-- Реплицируем только если тур уже выставлен в online
		IF (@coutRowTPPriceChange = 1)
		BEGIN
			EXEC FillMasterWebSearchFields @toKey, @cpKey
		END
		ELSE
		BEGIN
			-- нужно для корректной обработки необходимости обновления кэша в TourML
			UPDATE TP_Tours SET TO_UPDATETIME = GETDATE() WHERE TO_Key = @toKey

			IF dbo.mwReplIsPublisher() > 0
			BEGIN
				INSERT INTO mwReplTours(rt_trkey, rt_tokey, rt_date, rt_calckey, rt_updateOnlinePrices)
				SELECT TO_TRKey, TO_Key, GETDATE(), @cpKey, 2
				FROM tp_tours
				WHERE TO_Key = @toKey
			END
			ELSE
			BEGIN
				EXEC mwReplUpdatePriceEnabledAndValue @toKey, @cpKey
			END
		END
	END
end
go
GRANT EXEC ON [dbo].[CalculateReRunReplication] TO PUBLIC
GO
/*********************************************************************/
/* end sp_CalculateReRunReplication.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CalculateReRunReplication.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CheckQuotaExist.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CheckQuotaExist.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CheckQuotaExist]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CheckQuotaExist]
GO

CREATE PROCEDURE [dbo].[CheckQuotaExist]
(
--<DATE>2014-06-19</VERSION>
--<VERSION>2009.2.27</VERSION>
	@SVKey int,
	@Code int,
	@SubCode1 int,
	@DateBeg datetime, 
	@DateEnd datetime,
	@DateFirst datetime,
	@PRKey int,
	@AgentKey int,
	@TourDuration smallint,
	@FilialKey int,				--пока не обрабатывается 
	@CityDepartment int,		--пока не обрабатывается 
	--возвращаемые параметры
	--при наличии Stop-Sale возвращаем

--	Убрал, не нужны более
--	@StopExist int output, --ключ стопа
--	@StopDate smalldatetime output, --дата стопа 

	--переехали из [CheckQuotaInfo]
	@TypeOfResult smallint =null,			
	/*	тип результата 
			0-возвращение полной таблицы данных (без фильтров) используется в экране проверки мест, 
			1-информация о первой подходящей квоте, 
			2-максимальное доступное число мест по всем квотам */	
	@Pax smallint =null,					--кол-во туристов по услуге
	--возвращаемые параметры, в случае @TypeOfResult=2 (попытка проверить возможность постановки услуги на квоту)
	@Wait smallint =null, --в случае не надо снимать квоту,
	@Quota_CheckState smallint =null output,
	/*	0 - RQ (можно бронировать только под запрос)
		1 - OK (можно посадить на квоту)
		2 - STOP (стоп, мест на сущ.квотах недостаточно)
		3 - RELEASE (стопа нет, есть релиз, мест на сущ.квотах недостаточно)	*/
	@Quota_CheckDate smalldatetime =null output,
	/*  если @Quota_Check=2, то в этом поле дата на которую стоит стоп */
	@Quota_CheckInfo smallint =null output,
	/*  если @Quota_Check in (0,3), то в этом поле сколько мест не хватает */

	--возвращаемые параметры, в случае @TypeOfResult=1 (возвращаем характеристики оптимальной квоты)
	@Quota_Count int =null output,
	@Quota_AgentKey int =null output,
	@Quota_Type smallint =null output,
	@Quota_ByRoom bit =null output,
	@Quota_PRKey int =null output, 
	@Quota_FilialKey int =null output,
	@Quota_CityDepartments int =null output,
	@Quota_Duration smallint =null output,
	@Quota_SubCode1 int =null output,
	@Quota_SubCode2 int =null output
	
) AS

if (@Wait=1 AND @TypeOfResult=2)
BEGIN
	set @Quota_CheckState=0
	return 0
end

declare @quoted smallint

select @quoted = isnull(SV_Quoted, 0) from Service where SV_Key = @SVKEY

if (@quoted = 0)
BEGIN
	set @Quota_CheckState=1
	return 0
end
Set @DateFirst=ISNULL(@DateFirst,@DateBeg)

declare @LimitAgentQuote bit, @LimitQuoteLong bit
set @LimitAgentQuote = 0
set @LimitQuoteLong = 0

IF EXISTS(SELECT top 1 1 FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote' and SS_ParmValue = 1)
	set @LimitAgentQuote = 1
IF EXISTS(SELECT top 1 1 FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong' and SS_ParmValue = 1)
	set @LimitQuoteLong = 1

--Проверка отсутствия Стопа
declare @StopExist int, @StopDate smalldatetime

exec CheckStopInfo 1,null,@SVKey,@Code,@SubCode1,@PRKey,@DateBeg,@DateEnd,@StopExist output,@StopDate output

declare @Q_QTID int, @Q_Partner int, @Q_ByRoom int, @Q_Type int, @Q_Release int, 
		@Q_FilialKey int, @Q_CityDepartments int, @Q_AgentKey int, @Q_Duration smallint,
		@Q_Places smallint, @ServiceWithDuration bit, @SubQuery varchar(5000), @Query varchar(5000),
		@Q_SubCode1 int, @Q_SubCode2 int, @Q_QTID_Prev int, @DaysCount int, @Q_IsByCheckIn smallint

SET @DaysCount=DATEDIFF(DAY,@DateBeg,@DateEnd)+1
SET @Q_QTID_Prev=0

SELECT @ServiceWithDuration=ISNULL(SV_IsDuration,0) FROM [Service] WHERE SV_Key=@SVKey
IF @ServiceWithDuration=1
	SET @TourDuration=DATEDIFF(DAY,@DateBeg,@DateEnd)+1

-- создаем таблицу со стопами
CREATE TABLE #StopSaleTemp
(SST_Code int, SST_SubCode1 int, SST_SubCode2 int, SST_QOID int, SST_PRKey int, SST_Date smalldatetime,
SST_QDID int, SST_Type smallint, SST_State smallint, SST_Comment varchar(255)
)

-- Task 9148 31.10.2012 ошибка при преобразовании datetime в smalldatetime
if @DateBeg<'1900-01-01'
	set @DateBeg='1900-01-01'
--
INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails NULL, @Q_QTID, @DateBeg, @DaysCount, null, null, @SVKey, @Code, @SubCode1, @PRKey

IF @SVKey = 3
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms
		where	QO_SVKey=@SVKey and QO_Code=@Code and HR_Key=@SubCode1 and (QO_SubCode1=HR_RMKey or QO_SubCode1=0) and (QO_SubCode2=HR_RCKey or QO_SubCode2=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_Date = QD_Date
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
			and not exists(select top 1 1
							from #StopSaleTemp 
							where SST_PRKey = QT_PRKey
							and SST_QOID = QO_ID
							and SST_QDID = QD_ID
							and SST_Date = QD_Date
							and SST_State is not null)
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
ELSE
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts
		where	
			QO_SVKey = @SVKey and QO_Code = @Code and (QO_SubCode1=@SubCode1 or QO_SubCode1=0) and QO_QTID=QT_ID
			and QD_QTID = QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and QP_Date = QD_Date
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
			and not exists(select top 1 1
							from #StopSaleTemp 
							where SST_PRKey = QT_PRKey
							and SST_QOID = QO_ID
							and SST_QDID = QD_ID
							and SST_Date = QD_Date
							and SST_State is not null)
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		order by QP_AgentKey DESC, QT_PRKey DESC
END
open CheckQuotaExistСursor
fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
									@Q_Type, 
									@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
									@Q_SubCode1, @Q_SubCode2, @Q_IsByCheckIn

CREATE TABLE #Tbl (	TMP_Count int, TMP_QTID int, TMP_AgentKey int, TMP_Type smallint, TMP_Date datetime, 
					TMP_ByRoom bit, TMP_Release smallint, TMP_Partner int, TMP_Durations nvarchar(25) COLLATE Cyrillic_General_CI_AS, TMP_FilialKey int, 
					TMP_CityDepartments int, TMP_SubCode1 int, TMP_SubCode2 int, TMP_IsByCheckIn smallint, TMP_DurationsCheckIn nvarchar(25))

While (@@fetch_status = 0)
BEGIN
	SET @SubQuery = 'QD_QTID = QT_ID and QP_QDID = QD_ID 
		and QT_ID=' + CAST(@Q_QTID as varchar(10)) + '
		and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(1)) + ' 
		and QD_Type=' + CAST(@Q_Type as varchar(1)) + ' 
		and QO_SVKey=' + CAST(@SVKey as varchar(10)) + '
		and QO_Code=' + CAST(@Code as varchar(10)) + ' 
		and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10)) + ' 
		and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10)) + '	
		and (QD_Date between ''' + CAST((@DateBeg) as varchar(20)) + ''' and ''' + CAST(@DateEnd as varchar(20)) + ''') and QD_IsDeleted is null'

	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))		
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') '
	IF @Q_Partner =''
		SET @SubQuery = @SubQuery + ' and QT_PRKey = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_Partner as varchar(10))
	IF @Q_IsByCheckIn is null
		SET @SubQuery = @SubQuery + ' and QT_IsByCheckIn is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_IsByCheckIn=' + CAST(@Q_IsByCheckIn as varchar(10))

	declare @SubCode2 int
	
	IF (@Q_IsByCheckIn = 0 or @Q_IsByCheckIn is null)
		SET @Query = 
		'
		INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
							TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
							TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn)
			SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
					QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
					QP_CityDepartments, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn, '''' 
			FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
			WHERE	QO_ID = SST_QOID and QD_ID = SST_QDID and SST_State is null and ' + @SubQuery
	
	IF @Q_IsByCheckIn = 1
		SET @Query = 
		'
		INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
							TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
							TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn)
			SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
					QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
					QP_CityDepartments, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn, convert(nvarchar(max) ,QD_LongMin) + ''-'' + convert(nvarchar(max) ,QD_LongMax)
			FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
			WHERE	QO_ID = SST_QOID and QD_ID = SST_QDID and SST_State is null and ' + @SubQuery
			
	--print @Query

	exec (@Query)
	
	SET @Q_QTID_Prev=@Q_QTID
	fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
										@Q_Type, 
										@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
										@Q_SubCode1, @Q_SubCode2, @Q_IsByCheckIn	
END

--select * from #tbl

/*
Обработаем настройки
						При наличии квоты на агенство, запретить бронирование из общей квоты
						При наличии квоты на продолжительность, запретить бронировать из квоты без продолжительности
*/

-- если стоят 2 настройки и параметры пришли и на продолжительность и на агенство и есть такая квота сразу на агенство и на продолжительность,
-- то удалим остальные
if ((@LimitAgentQuote = 1) and (@LimitQuoteLong = 1))
begin
	if ((isnull(@AgentKey, 0) != 0) and (isnull(@TourDuration, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey and isnull(TMP_Durations, 0) = @TourDuration)))
	begin
		delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey or isnull(TMP_Durations, 0) != @TourDuration
	end
	
	--бывают случаии когда обе настройки включены, но найти нужно только по одному из параметров
	if (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey))
	begin
		delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey
	end
	if (exists (select top 1 1 from #Tbl where isnull(TMP_Durations, 0) = @TourDuration))
	begin
		delete #Tbl where isnull(TMP_Durations, 0) != @TourDuration
	end
end
-- если стоит настройка только на агенство и нам пришол параметром агенство и квота на агенство есть,
-- то удалим остальные
else if ((@LimitAgentQuote = 1) and (@LimitQuoteLong = 0) and (isnull(@AgentKey, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey)))
begin
	delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey
end
-- если есть настройка на продолжительность, и нам пришол параметр продолжительность и есть квота на продолжительность,
-- то удалим остальные
else if ((@LimitAgentQuote = 0) and (@LimitQuoteLong = 1) and (isnull(@TourDuration, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_Durations, 0) = @TourDuration)))
begin
	delete #Tbl where isnull(TMP_Durations, 0) != @TourDuration	
end

DELETE FROM #Tbl WHERE exists 
		(SELECT top 1 1  FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
		WHERE	QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=TMP_Type and QT_ByRoom=TMP_ByRoom
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QT_ID=TMP_QTID
				and ISNULL(QP_FilialKey,-1)=ISNULL(TMP_FilialKey,-1) and ISNULL(QP_CityDepartments,-1)=ISNULL(TMP_CityDepartments,-1)
				and ISNULL(QP_AgentKey,-1)=ISNULL(TMP_AgentKey,-1) and ISNULL(QT_PRKey,-1)=ISNULL(TMP_Partner,-1)
				and QP_Durations=TMP_Durations and ISNULL(QD_Release,-1)=ISNULL(TMP_Release,-1)
				and QD_Date=@DateFirst and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))

close CheckQuotaExistСursor
deallocate CheckQuotaExistСursor

DECLARE @Tbl_DQ Table 
 		(TMP_Count smallint, TMP_AgentKey int, TMP_Type smallint, TMP_ByRoom bit, 
				TMP_Partner int, TMP_Duration smallint, TMP_FilialKey int, TMP_CityDepartments int,
				TMP_SubCode1 int, TMP_SubCode2 int, TMP_ReleaseIgnore bit, TMP_IsByCheckIn smallint, TMP_DurationsCheckIn nvarchar(25))

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
-- Разрешим посадить в квоту с релиз периодом 0 текущим числом
set @DATETEMP = DATEADD(day, -1, @DATETEMP)
if exists (select top 1 1 from systemsettings where SS_ParmName='SYSAddQuotaPastPermit' and SS_ParmValue=1 and @DateBeg < @DATETEMP)
	SET @DATETEMP='01-JAN-1900'
INSERT INTO @Tbl_DQ
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, 0 as TMP_ReleaseIgnore, TMP_IsByCheckIn, TMP_DurationsCheckIn FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
		FROM	#Tbl
		WHERE	(TMP_Date >= @DATETEMP + ISNULL(TMP_Release,0) OR (TMP_Date < GETDATE() - 1))
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1
	UNION
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, 1 as TMP_ReleaseIgnore, TMP_IsByCheckIn, TMP_DurationsCheckIn FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
		FROM	#Tbl
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1

/*
Комментарии к запросу выше!!!
Заполняем таблицу квот, которые могут нам подойти (группируя квоты по всем разделяемым параметрам, кроме релиз-периода
Все строки в таблице дублируются (важно! 11-ый параметр): 
	квоты с учетом релиз-периода (0) --TMP_ReleaseIgnore
	квоты без учета релиз-периода (1)--TMP_ReleaseIgnore
При выводе всех доступных квот требуется отсекать строки без учета релиз-периода и с количеством мест <=0 
*/

DECLARE @IsCommitmentFirst bit
IF Exists (SELECT SS_ID FROM dbo.SystemSettings WHERE SS_ParmName='SYS_Commitment_First' and SS_ParmValue='1')
	SET @IsCommitmentFirst=1

If @TypeOfResult is null or @TypeOfResult=0
BEGIN
	IF @IsCommitmentFirst=1
		select * from @Tbl_DQ order by TMP_IsByCheckIn DESC
	ELSE
		select * from @Tbl_DQ order by TMP_IsByCheckIn DESC
END

DECLARE @Priority int;
SELECT @Priority=QPR_Type FROM   QuotaPriorities 
WHERE  QPR_Date=@DateFirst and QPR_SVKey = @SVKey and QPR_Code=@Code and QPR_PRKey=@PRKey

IF @Priority is not null
	SET @IsCommitmentFirst=@Priority-1

If @TypeOfResult=1 --(возвращаем характеристики оптимальной квоты)
BEGIN
	If exists (SELECT top 1 1 FROM @Tbl_DQ)
	BEGIN
		IF @Quota_Type=1 or @IsCommitmentFirst=1
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
		ELSE
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	END
END

	--Проверим на стоп	
	--если есть два стопа, то это либо общий стоп, либо два отдельных стопа
	if @StopExist > 1
		and exists(select 1 from #StopSaleTemp where SST_State is not null and SST_Date between @DateBeg and @DateEnd and SST_Type=1)
		and exists(select 1 from #StopSaleTemp where SST_State is not null and SST_Date between @DateBeg and @DateEnd and SST_Type=2)
	BEGIN
		Set @Quota_CheckState = 2
		Set @Quota_CheckDate = @StopDate
		return
	END
	
	--если существуют стоп на один тип квот, а другой тип квот заведен неполностью или не заведен вовсе
	if (@StopExist > 0
			and
			(
				exists(select 1 from #StopSaleTemp where SST_Date between @DateBeg and @DateEnd and SST_Type=1 and SST_State is not null)
				and (select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=1) and TMP_Type=1) > 0
				and (select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=2) and TMP_Type=2) < @DaysCount
				or
				exists(select 1 from #StopSaleTemp where SST_Date between @DateBeg and @DateEnd and SST_Type=2 and SST_State is not null)
				and (select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=2) and TMP_Type=2) > 0
				and (select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=1) and TMP_Type=1) < @DaysCount
			)
		)
	BEGIN
		Set @Quota_CheckState = 2
		Set @Quota_CheckDate = @StopDate
		return
	END

	--если существуют два стопа и нет дней с незаведенными квотами
	if (@StopExist > 0 and
		exists(select 1 from #StopSaleTemp where SST_Date between @DateBeg and @DateEnd and SST_Type=1 and SST_State is not null) and
		exists(select 1 from #StopSaleTemp where SST_Date between @DateBeg and @DateEnd and SST_Type=2 and SST_State is not null) and
		((select COUNT(distinct SST_Date) from #StopSaleTemp where SST_Type=1) = @DaysCount) and
			((select COUNT(distinct SST_Date) from #StopSaleTemp where SST_Type=2) = @DaysCount))
	BEGIN
		Set @Quota_CheckState = 2
		Set @Quota_CheckDate = @StopDate
		return
	END

	--если есть стоп на commitment и закончился релиз-период на alotment, или наоборот...
	if (not exists(select 1 from #Tbl where TMP_Type=2 and TMP_Date = @DateBeg and dateadd(day, -1, GETDATE()) < (@DateBeg - ISNULL(TMP_Release, 0)))
		and
		(select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=TMP_Type) and TMP_Type=1) < @DaysCount
		or
		not exists(select 1 from #Tbl where TMP_Type=1 and TMP_Date = @DateBeg and dateadd(day, -1, GETDATE()) < (@DateBeg - ISNULL(TMP_Release, 0)))
		and
		(select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=TMP_Type) and TMP_Type=2) < @DaysCount)
	begin
		if exists(select 1 from #Tbl where TMP_Release is not null and TMP_Release!=0 and TMP_Date = @DateBeg AND dateadd(day, -1, GETDATE()) >= (@DateBeg - ISNULL(TMP_Release, 0)))
		begin
			set @Quota_CheckState = 3	-- наступил РЕЛИЗ-Период
			return
		end
	end
	
	--если существует стоп и на первый день нет квот
	If @StopExist > 0 and not exists (select 1 from #Tbl where TMP_Count > 0 and TMP_Date = @DateBeg)
	BEGIN
		Set @Quota_CheckState = 2						--Возвращаем "Внимание STOP"
		Set @Quota_CheckDate = @StopDate
		return
	END
	
	--Проверим на наличие квот
	if not exists (select 1 from #Tbl where TMP_Count > 0)
	begin
		Set @Quota_CheckState = 0
		return
	end

If @TypeOfResult=2 --(попытка проверить возможность постановки услуги на квоту)
BEGIN
	DECLARE @Places_Count int, @Rooms_Count int,		 --доступное количество мест/номеров в квотах
			@Places_Count_ReleaseIgnore int, @Rooms_Count_ReleaseIgnore int,		 --доступное количество мест/номеров в квотах
			@PlacesNeed_Count smallint,					-- количество мест, которых недостаточно для оформления услуги
			@PlacesNeed_Count_ReleaseIgnore smallint					-- количество мест, которых недостаточно для оформления услуги
	
	If exists (SELECT top 1 1 FROM @Tbl_DQ)
	BEGIN
		set @PlacesNeed_Count = 0
		set @PlacesNeed_Count_ReleaseIgnore = 0
		
		select @Places_Count = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 0 and TMP_ReleaseIgnore = 0
		select @Places_Count_ReleaseIgnore = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 0 and TMP_ReleaseIgnore = 1
		
		If (@SVKey in (3) or (@SVKey=8 and EXISTS(SELECT TOP 1 1 FROM [Service] WHERE SV_KEY=@SVKey AND SV_QUOTED=1)))
		begin
			select @Rooms_Count = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 1 and TMP_ReleaseIgnore = 0
			select @Rooms_Count_ReleaseIgnore = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 1 and TMP_ReleaseIgnore = 1
		end
		
		Set @Places_Count = ISNULL(@Places_Count,0)
		Set @Rooms_Count = ISNULL(@Rooms_Count,0)
		Set @Places_Count_ReleaseIgnore = ISNULL(@Places_Count_ReleaseIgnore,0)
		Set @Rooms_Count_ReleaseIgnore = ISNULL(@Rooms_Count_ReleaseIgnore,0)
		
		SET @StopExist = ISNULL(@StopExist, 0)
		
		--проверяем достаточно ли будет текущего кол-ва мест для бронирования, если нет устанавливаем статус бронирования под запрос
		declare @nPlaces smallint, @nRoomsService smallint
		If ((@SVKey in (3) OR (@SVKey=8 and EXISTS(SELECT TOP 1 1 FROM [Service] WHERE SV_KEY=@SVKey AND SV_QUOTED=1))) and @Rooms_Count > 0)
		BEGIN
			Set @nRoomsService = 1
			
			if (@SVKey = 3)
				exec GetServiceRoomsCount @Code, @SubCode1, @Pax, @nRoomsService output
			
			If @nRoomsService > @Rooms_Count
			begin
				Set @PlacesNeed_Count = @nRoomsService - @Rooms_Count
				Set @Quota_CheckState = 0
			end
			
			If @nRoomsService > @Rooms_Count_ReleaseIgnore
			begin
				Set @PlacesNeed_Count_ReleaseIgnore = @nRoomsService - @Rooms_Count_ReleaseIgnore
				Set @Quota_CheckState = 0
			end
		END
		ELSE
		begin
			If @Pax > @Places_Count
			begin
				Set @PlacesNeed_Count = @Pax - @Places_Count
				Set @Quota_CheckState = 0
			end 
			
			If @Pax > @Places_Count_ReleaseIgnore
			begin
				Set @PlacesNeed_Count_ReleaseIgnore = @Pax - @Places_Count_ReleaseIgnore
				Set @Quota_CheckState = 0
			end
		end
		
		-- проверим на релиз
		If @PlacesNeed_Count_ReleaseIgnore <= 0 --мест в квоте хватило
			Set @Quota_CheckState = 3						--Возвращаем "Release" (мест не достаточно, но наступил РЕЛИЗ-Период)"
		
		If @PlacesNeed_Count <= 0 --мест в квоте хватило
			Set @Quota_CheckState = 1						--Возвращаем "Ok (квоты есть)"
		else
			set @Quota_CheckInfo = @PlacesNeed_Count
	END
	else
	begin
		-- если выборка пустая
		Set @Quota_CheckState = 0
	end
END
GO

grant exec on [dbo].[CheckQuotaExist] to public
go
/*********************************************************************/
/* end sp_CheckQuotaExist.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CheckQuotaExist.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CorrectionCalculatedPrice_Run.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CorrectionCalculatedPrice_Run.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CorrectionCalculatedPrice_Run]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CorrectionCalculatedPrice_Run]
GO

CREATE PROCEDURE [dbo].[CorrectionCalculatedPrice_Run]
	(
		-- version 9.2.21.5
		-- date 2014-08-13
		@deltaCost decimal(14,2),
		@itogCostMin decimal(14,2),
		@operation bit, -- 1 - изменяем цену, 0 - удаляем цену
		@costInPercent bit, -- 1 - цена в процентах, 0 - цена в у.е.
		@perPerson bit, -- 1 - за человека, 0 - нет
		@serviceTypeKey int,
		@serviceCodeList xml,
		@dateList xml,
		@turList xml,
		@durationList xml,
		@hotelKeys xml
	)
AS
BEGIN
	SET NOCOUNT ON;
	SET ARITHABORT ON;

	declare @round smallint
	SELECT @round = ST_RoundService FROM Setting

	declare @cost decimal(14,2)
	set @cost = @deltaCost;
	
	if (@operation = 0)
	begin
		set @cost = 0;
	end
	
	declare @partUpdate int
	
	set @partUpdate = 5000 -----100000
	select @partUpdate = SS_ParmValue from SystemSettings where SS_ParmName = 'PartCorrectionPrice'
	
	declare @divide int, @mwReplIsPublisher int, @mwReplIsSubscriber int
	
	set @mwReplIsPublisher = dbo.mwReplIsPublisher()
	set @mwReplIsSubscriber = dbo.mwReplIsSubscriber()

	set @divide = 0

	select @divide = CONVERT(int, isnull(SS_ParmValue, '0'))
	from SystemSettings
	where SS_ParmName = 'MWDivideByCountry'

	select TI_Key
	into #tmp_CorrectionCalculatedPrice_Run
	from TP_ServiceLists with (nolock) join TP_Services with (nolock) on TL_TSKey = TS_Key
	join TP_Lists with (nolock) on TL_TIKey = TI_Key
	where TI_TOKey in (select tbl.res.value('.', 'int') from @turList.nodes('/ArrayOfInt/int') as tbl(res) join TP_Tours on tbl.res.value('.', 'int') = TO_Key where TO_UPDATE != 1)
	and TS_Code in (select tbl.res.value('.', 'int') from @serviceCodeList.nodes('/ArrayOfInt/int') as tbl(res))
	and (@serviceTypeKey != 3 or (TS_SubCode1 in (select tbl.res.value('.', 'int') from @hotelKeys.nodes('/ArrayOfInt/int') as tbl(res))))
	and TS_SVKey = @serviceTypeKey
	and ti_totaldays in (select tbl.res.value('.', 'int') from @durationList.nodes('/ArrayOfInt/int') as tbl(res))
	
	while ((select COUNT(*) from #tmp_CorrectionCalculatedPrice_Run) > 0)
	begin
		-- выборка цен
		select TP_Key as TPU_TPKey, TP_Gross as TPU_TPGrossOld, case when @costInPercent = 0 then
																									convert(int, case when @perPerson = 1 then
																														@cost * (	select top 1 TS_Men
																														from TP_Services with (nolock) join TP_ServiceLists with (nolock) on TS_Key = TL_TSKey 
																														where TS_SVKey = 3
																														and TL_TIKey = TP_TIKey)
																													else 
																														@cost 
																													end)
																								else
																									 convert(int, case when @perPerson = 1 then 
																														TP_Gross * (@cost / 100) * (	select top 1 TS_Men
																																						from TP_Services with (nolock) join TP_ServiceLists with (nolock) on TS_Key = TL_TSKey 
																																						where TS_SVKey = 3
																																						and TL_TIKey = TP_TIKey)
																													else 
																														TP_Gross * (@cost / 100)
																													end)
																								end as TPU_TPGrossDelta
		into #tmp_tpPricesUpdated
		from TP_Prices with (nolock)
		where TP_TIKey in ( select top (@partUpdate) TI_Key from #tmp_CorrectionCalculatedPrice_Run)
		and TP_DateBegin in (select res.value('.', 'datetime') from @dateList.nodes('/ArrayOfDateTime/dateTime') as tbl(res))
				
		if (@operation = 1)
		begin
			select
				TP_Key as tpKey, 
				dbo.RoundPrice(@round,TPU_TPGrossOld + TPU_TPGrossDelta) as tmp_Gross
			into #tmp_tpPrices
			from TP_Prices join #tmp_tpPricesUpdated on TP_Key = TPU_TPKey
			order by TP_Key
			
			create table #tmp_tpPricesCurrentUpdated (
			tmp_tpKey int,
			tmp_Gross int
			)
			
			while EXISTS(select 1 from #tmp_tpPrices)
			begin
				insert into #tmp_tpPricesCurrentUpdated (tmp_tpKey, tmp_Gross)
				SELECT top(10000) tpKey, tmp_Gross
				from #tmp_tpPrices
				
				-- если изменяем цены
				update TP_Prices
				set TP_Gross = tmp_Gross
				from TP_Prices with (nolock) join #tmp_tpPricesCurrentUpdated on tmp_tpKey = TP_Key
				
				DELETE from #tmp_tpPrices WHERE tpKey in (SELECT tmp_tpKey from #tmp_tpPricesCurrentUpdated)  
				DELETE from #tmp_tpPricesCurrentUpdated
			end
			
			drop table #tmp_tpPrices
			drop table #tmp_tpPricesCurrentUpdated
		end
		else
		begin
			insert into dbo.mwReplDeletedPricesTemp (rdp_pricekey, rdp_cnkey, rdp_ctdeparturekey) 
			select TPU_TPKey, TO_CNKey, TL_CTDepartureKey
			from #tmp_tpPricesUpdated
			join TP_Prices with (nolock) on TP_Key = TPU_TPKey
			join tp_tours with (nolock) on tp_tokey = to_key
			join tbl_TurList with (nolock) on tl_key = to_trkey
			
			while (1 = 1)
			begin
				-- удаляем цены
				DELETE top(10000) TP_Prices
				from TP_Prices with (nolock) join #tmp_tpPricesUpdated on TP_Key = TPU_TPKey
					
				if (@@ROWCOUNT = 0)
					break
			end
		end

		-- запишем время изменения в туре
		update TP_Tours
		set to_updatetime = getdate()
		from TP_Tours join @turList.nodes('/ArrayOfInt/int') as tbl(res) on tbl.res.value('.', 'int') = to_key
		
		if (@mwReplIsPublisher <= 0 and @mwReplIsSubscriber <= 0)
		begin
			if (@divide = 0)
			begin
				if (@operation = 1)
				begin
					update mwPriceDataTable
					set pt_price = dbo.RoundPrice(@round,TPU_TPGrossOld + TPU_TPGrossDelta)
					from mwPriceDataTable join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey
				end
				else
				begin
					delete from mwPriceDataTable
					where pt_pricekey in (select TPU_TPKey from #tmp_tpPricesUpdated)
				end
			end
			else
			begin
				declare @sql nvarchar(4000), @tableName nvarchar(100)
				declare cur cursor fast_forward read_only for
				select name
				from sysobjects
				where xtype = 'U' and name like 'mwPriceDataTable[_]%'

				open cur
				fetch next from cur into @tableName
				while (@@FETCH_STATUS = 0)
				begin
					if (@operation = 1)
					begin
						set @sql = 'update ' + @tableName + '
									set pt_price = dbo.RoundPrice(@round,TPU_TPGrossOld + TPU_TPGrossDelta)
									from ' + @tableName + ' join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey'
					end
					else
					begin
						set @sql = 'delete ' + @tableName + '
									from ' + @tableName + ' join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey'
					end
					
					exec (@sql)
					fetch next from cur into @tableName
				end
				
				close cur
				deallocate cur
			end
		end
		
		insert into TP_PricesUpdated(TPU_TPKey, TPU_TPGrossDelta, TPU_TPGrossOld, TPU_IsChangeCostMode)
		select TPU_TPKey, TPU_TPGrossDelta, TPU_TPGrossOld, @operation
		from #tmp_tpPricesUpdated

		delete top (@partUpdate) #tmp_CorrectionCalculatedPrice_Run
		drop table #tmp_tpPricesUpdated
	end
	
END
GO

GRANT EXEC ON [dbo].[CorrectionCalculatedPrice_Run] TO PUBLIC
GO
/*********************************************************************/
/* end sp_CorrectionCalculatedPrice_Run.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CorrectionCalculatedPrice_Run.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CorrectionCalculatedPrice_RunSubscriber.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CorrectionCalculatedPrice_RunSubscriber.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CorrectionCalculatedPrice_RunSubscriber]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[CorrectionCalculatedPrice_RunSubscriber]
GO

CREATE PROCEDURE [dbo].[CorrectionCalculatedPrice_RunSubscriber]
AS
BEGIN
	declare @partUpdate int
	
	set @partUpdate = 100000
	select @partUpdate = SS_ParmValue from SystemSettings where SS_ParmName = 'PartCorrectionPrice'
	
	declare @divide int, @mwReplIsPublisher int
	
	set @mwReplIsPublisher = dbo.mwReplIsPublisher()

	set @divide = 0

	select @divide = CONVERT(int, isnull(SS_ParmValue, '0'))
	from SystemSettings
	where SS_ParmName = 'MWDivideByCountry'

	-- копируем таблицу TP_PricesUpdated
	select *
	into #tmp_CorrectionCalculatedPrice_Run
	from TP_PricesUpdated
	
	while ((select COUNT(*) from #tmp_CorrectionCalculatedPrice_Run) > 0)
	begin
		-- берем порцию
		select top (@partUpdate) *
		into #tmp_tpPricesUpdated
		from #tmp_CorrectionCalculatedPrice_Run
	
		if (@mwReplIsPublisher = 0)
		begin
			if (@divide = 0)
			begin
				update mwPriceDataTable
				set pt_price = TPU_TPGrossOld + TPU_TPGrossDelta
				from mwPriceDataTable join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey
				where TPU_IsChangeCostMode = 1
				
				delete mwPriceDataTable
				from mwPriceDataTable join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey
				where TPU_IsChangeCostMode = 0
			end
			else
			begin
				declare @sql nvarchar(4000), @tableName nvarchar(100)
				declare cur cursor fast_forward read_only for
				select name
				from sysobjects
				where xtype = 'U' and name like 'mwPriceDataTable[_]%'

				open cur
				fetch next from cur into @tableName
				while (@@FETCH_STATUS = 0)
				begin
					set @sql = 'update ' + @tableName + '
								set pt_price = TPU_TPGrossOld + TPU_TPGrossDelta
								from ' + @tableName + ' join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey
								where TPU_IsChangeCostMode = 1
								
								delete ' + @tableName + '
								from ' + @tableName + ' join #tmp_tpPricesUpdated on pt_pricekey = TPU_TPKey
								where TPU_IsChangeCostMode = 0'
					print (@sql)
					exec (@sql)
					fetch next from cur into @tableName
				end
				
				close cur
				deallocate cur
			end
		end
		
		-- очищаем временную таблицу #tmp_CorrectionCalculatedPrice_Run
		delete #tmp_CorrectionCalculatedPrice_Run
		from #tmp_CorrectionCalculatedPrice_Run 
		where exists (select top 1 1 
						from #tmp_tpPricesUpdated
						where #tmp_CorrectionCalculatedPrice_Run.TPU_Key = #tmp_tpPricesUpdated.TPU_Key)
		-- очищаем основнцю таблмцу TP_PricesUpdated
		delete TP_PricesUpdated
		from TP_PricesUpdated 
		where exists (select top 1 1 
						from #tmp_tpPricesUpdated
						where TP_PricesUpdated.TPU_Key = #tmp_tpPricesUpdated.TPU_Key)
		-- удаляем таблицу порцию
		drop table #tmp_tpPricesUpdated
	end
	
END
GO

GRANT EXECUTE on [dbo].[CorrectionCalculatedPrice_RunSubscriber] to public
GO
/*********************************************************************/
/* end sp_CorrectionCalculatedPrice_RunSubscriber.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CorrectionCalculatedPrice_RunSubscriber.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CostOfferChangeState.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CostOfferChangeState.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CostOfferChangeState]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[CostOfferChangeState]
GO

CREATE PROCEDURE [dbo].[CostOfferChangeState]
	(
		-- ключ ЦБ
		-- null - если вызов ХП осуществляется без передачи параметров, и тогда берем первый попавшийся ЦБ
		@coId int=null,
		-- ключ операции 1 - активировать, 2 - деактивировать, 3 - публиковать
		@operationId smallint=null
	)
AS

--<VERSION>2009.2.20.1</VERSION>
--<DATE>2014-11-24</DATE>
--хранимка активирует, деактивирует или публикует ЦБ

declare @datefirst int
set @datefirst = @@datefirst
set datefirst 1

BEGIN TRY

	Set NOCOUNT OFF
	-- проверяем, что было перадано процедуре во входных параметрах
	-- если входные параметры отсут-т, то выбираем 1ый ЦБ из очереди, который ожидает обработки 
	-- или в противном случае берем тот, который в прошлый раз завершился с ошибкой
	-- 0(ожидает), 1 (в обработке), -1(завершилось с ошибкой)
	
	DECLARE @rowcount INT
	DECLARE @COQueuesCount INT
	if(@coId is null Or @operationId is null)
	BEGIN 		
		-- кол-во костофферов в таблице очереди [QueuesCostOffers]
		declare @costOffersCount int
		select @costOffersCount = COUNT(*) from [dbo].[QueuesCostOffers] where [QCO_State] = 0 or [QCO_State] = -1
		if(@costOffersCount > 0)
		begin
			select top 1 @coId = [QCO_COId], @operationId = [QCO_OperationId] from [QueuesCostOffers]
			where [QCO_State] = 0 or [QCO_State] = -1
			order by [QCO_State] desc, QCO_QueuedDate
		end
		ELSE
		begin
			PRINT 'В таблице отсутствуют ценовые блоки для обработки'
            RETURN
		end
	END

	-- обновляем состояние очереди для текущего ЦБ в 1, чтобы проинформировать о процессе обработки ЦБ
	update [QueuesCostOffers]
	set [QCO_State] = 1
	where [QCO_COId] = @coId and [QCO_OperationId] = @operationId
	SET @rowcount = @@ROWCOUNT
	
	BEGIN TRANSACTION
	
	IF @rowcount = 1
	begin
		-- временная таблица для цен
		create table #spadIdTable
		(
			spadId bigint		
		)
		
		-- временная таблица для цен на будущие даты
		create table #spndIdTable
		(
			spndId bigint
		)

		-- активация ценового блока или деактивация
		if (@operationId = 1 or @operationId = 2)
		begin	
			insert into #spadIdTable (spadId)
			select spad.SPAD_Id
			from (dbo.TP_ServicePriceActualDate as spad with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spad.SPAD_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on co.CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on co.CO_SeasonId = seas.SN_Id)
			where
				[co].CO_Id = @coId
				-- должны публиковаться только последние актуальные цены
				and spad.SPAD_SaleDate is null
				and seas.SN_IsActive = 1			
				and SC_SVKey = co.CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = co.CO_PKKey
				and SC_PRKey = co.CO_PartnerKey
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = co.CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
				--kadraliev 20120625 день недели должен покрываться аттрибутом cs_week цены, если он задан
				and exists(select top 1 1 from dbo.tbl_costs with(nolock) where CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey and (cs_week is null or len(cs_week) = 0 or cs_week like ('%' + ltrim(rtrim(str(DATEPART(dw, scp.SCP_Date)))) + '%')))  
			
			-- в ценах которые расчитали на будущее, тоже нужно пересчитать	
			insert into #spndIdTable (spndId)
			select spnd.SPND_Id
			from (dbo.TP_ServicePriceNextDate as spnd with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spnd.SPND_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on [co].CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on [co].CO_SeasonId = seas.SN_Id)
			where			
				[co].CO_Id = @coId
				and seas.SN_IsActive = 1
				and SC_SVKey = [co].CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = [co].CO_PKKey
				and SC_PRKey = [co].CO_PartnerKey
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = [co].CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--kadraliev 20120625 день недели должен покрываться аттрибутом cs_week цены, если он задан
				and exists(select top 1 1 from dbo.tbl_costs with(nolock) where CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey and (cs_week is null or len(cs_week) = 0 or cs_week like ('%' + ltrim(rtrim(str(DATEPART(dw, scp.SCP_Date)))) + '%')))  
				
			while(exists (select top 1 1 from #spadIdTable inner join dbo.TP_ServicePriceActualDate with(nolock) on SPAD_Id = spadId))
			begin			
				update top (10000) spad
				set 
				spad.SPAD_NeedApply = 1,
				spad.SPAD_DateLastChange = getdate()
				from dbo.TP_ServicePriceActualDate as spad join #spadIdTable on spad.SPAD_Id = spadId
				
				delete #spadIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceActualDate as spad with(nolock) 
								where spad.SPAD_Id = spadId 
								and (spad.SPAD_NeedApply = 1))
			end
				
			while(exists (select top 1 1 from #spndIdTable inner join dbo.TP_ServicePriceNextDate with(nolock) on SPND_Id = spndId))
			begin			
				update top (10000) spnd
				set spnd.SPND_NeedApply = 1,
				spnd.SPND_DateLastChange = getdate()
				from dbo.TP_ServicePriceNextDate as spnd join #spndIdTable on spnd.SPND_Id = spndId
				
				delete #spndIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceNextDate as spnd with(nolock) 
								where spnd.SPND_Id = spndId
								and spnd.SPND_NeedApply = 1)
			end

			if (@operationId = 1)
			begin
				-- переводим ЦБ в активное состояние и состояние очереди ЦБ в FALSE
				-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
				select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
				where [QCO_COId] = @coId
				if (@COQueuesCount > 1)
				begin
					update CostOffers
					set CO_State = 1, CO_DateActive = ISNULL(CO_DateActive, getdate())
					where CO_Id = @coId
				end
				else
				begin
					update CostOffers
					set CO_State = 1, CO_DateActive = ISNULL(CO_DateActive, getdate()),[CO_InQueue] = 0
					where CO_Id = @coId
				end
			end
			else if (@operationId = 2)
			begin
				-- переводим ЦБ в закрытое состояние и состояние очереди ЦБ в FALSE			
				-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
				select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
				where [QCO_COId] = @coId
				if (@COQueuesCount > 1)
				begin	
					update CostOffers
					set CO_State = 2, CO_DateClose = getdate()
					where CO_Id = @coId
				end
				else
				begin
					update CostOffers
					set CO_State = 2, CO_DateClose = getdate(), [CO_InQueue] = 0
					where CO_Id = @coId
				end
			end

		end	
		-- публикация ценового блока
		else if (@operationId = 3)
		begin
			insert into #spadIdTable (spadId)
			select spad.SPAD_Id
			from (dbo.TP_ServicePriceActualDate as spad with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spad.SPAD_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on [co].CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on [co].CO_SeasonId = seas.SN_Id)
			where
				[co].CO_Id = @coId
				-- должны публиковаться только последние актуальные цены
				and spad.SPAD_SaleDate is null
				and seas.SN_IsActive = 1			
				and SC_SVKey = [co].CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = [co].CO_PKKey
				and SC_PRKey = [co].CO_PartnerKey
				-- и дата продажи ценового блока должна быть вокруг текущей даты
				and getdate() between isnull([co].CO_SaleDateBeg, '1900-01-01') and isnull([co].CO_SaleDateEnd, '2072-01-01')
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = [co].CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--kadraliev 20120625 день недели должен покрываться аттрибутом cs_week цены, если он задан
				and exists(select top 1 1 from dbo.tbl_costs with(nolock) where CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey and (cs_week is null or len(cs_week) = 0 or cs_week like ('%' + ltrim(rtrim(str(DATEPART(dw, scp.SCP_Date)))) + '%')))  
				
			while(exists (select top 1 1 from #spadIdTable inner join dbo.TP_ServicePriceActualDate with(nolock) on SPAD_Id = spadId))
			begin			
				update top (10000) spad
				set 		
				spad.SPAD_NeedApply = 1,	
				spad.SPAD_AutoOnline = 1,
				spad.SPAD_DateLastChange = getdate()
				from dbo.TP_ServicePriceActualDate as spad join #spadIdTable on spad.SPAD_Id = spadId
				
				delete #spadIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceActualDate as spad with(nolock) 
								where spad.SPAD_Id = spadId 
								and (spad.SPAD_AutoOnline = 1))
			end
			
			-- обновим дату публикации и состояние очереди ЦБ в FALSE
			-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
			select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
			where [QCO_COId] = @coId
			if (@COQueuesCount > 1)
			begin	
				update CostOffers
				set CO_DateLastPublish = getdate()
				where CO_Id = @coId
			end
			else
			begin
				update CostOffers
				set CO_DateLastPublish = getdate(), [CO_InQueue] = 0
				where CO_Id = @coId
			end
		end
		-- удаляем очередь для текущего ЦБ
		delete from [dbo].[QueuesCostOffers]
		where [QCO_COId] = @coId and [QCO_OperationId] = @operationId
	end

	COMMIT TRANSACTION

END TRY

BEGIN CATCH
	ROLLBACK TRANSACTION
	-- ставим состояние очереди ЦБ в -1, если произошла ошибка
	update [QueuesCostOffers]
	set [QCO_State] = -1
	where [QCO_COId] = @coId
END CATCH;

set datefirst @datefirst
GO

grant exec on [dbo].[CostOfferChangeState] to public
go
/*********************************************************************/
/* end sp_CostOfferChangeState.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CostOfferChangeState.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CostSplitStr.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_CostSplitStr.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CostSplitStr]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CostSplitStr]
GO




CREATE PROCEDURE [dbo].[CostSplitStr]
	@p_dtSplit DATETIME,
	@p_nServiceKey INT,
	@p_sCodes VARCHAR (8000),
	@p_sSubCodes1 VARCHAR (8000),
	@p_sSubCodes2 VARCHAR (8000),
	@p_sPartnerKeys VARCHAR (8000),
	@p_sPacketKeys VARCHAR (8000),
	@p_sPeriodKeys VARCHAR (8000),
	@p_bTypeOfDate bit=null				--0 - CS_DATE, 1 - CS_DATECHECKIN 
AS
--<VERSION>9.2</VERSION>
--<DATE>2014-05-21</DATE>
DECLARE @tsROWID int
DECLARE @dtSplit1 DATETIME
DECLARE @sQuery VARCHAR (8000)
DECLARE @sSplitDateBegColumnName VARCHAR (20)
DECLARE @sSplitDateEndColumnName VARCHAR (20)
DECLARE @sDateBegColumnName VARCHAR (20)
DECLARE @sDateEndColumnName VARCHAR (20)
DECLARE @nUserKey INT

SET @dtSplit1 = @p_dtSplit - 1

EXEC dbo.GetUserKey @nUserKey output

SET @sSplitDateBegColumnName = 'CS_Date'
SET @sSplitDateEndColumnName = 'CS_DateEnd'
SET @sDateBegColumnName = 'CS_CHECKINDATEBEG'
SET @sDateEndColumnName = 'CS_CHECKINDATEEND'

IF @p_bTypeOfDate = 1
BEGIN
	SET @sSplitDateBegColumnName = 'CS_CHECKINDATEBEG'
	SET @sSplitDateEndColumnName = 'CS_CHECKINDATEEND'
	SET @sDateBegColumnName = 'CS_Date'
	SET @sDateEndColumnName = 'CS_DateEnd'
END

--print @sSplitDateBegColumnName
--print @sSplitDateEndColumnName
--print @sDateBegColumnName
--print @sDateEndColumnName


CREATE TABLE #tmpCostSplitStr (CS_ID int)
SET @sQuery =  '
	INSERT INTO #tmpCostSplitStr (CS_ID)
	SELECT	CS_ID
	FROM	Costs
	WHERE	''' + CAST (@p_dtSplit AS VARCHAR (30)) + ''' 
			BETWEEN ' + @sSplitDateBegColumnName + ' + 1 AND ' + @sSplitDateEndColumnName + ' AND
			CS_SVKey = ' + STR (@p_nServiceKey)
IF NOT (@p_sCodes IS NULL OR @p_sCodes = '')
	SET @sQuery = @sQuery + ' AND CS_Code IN (' + @p_sCodes + ')'
IF NOT (@p_sSubCodes1 IS NULL OR @p_sSubCodes1 = '')
	SET @sQuery = @sQuery + ' AND CS_SubCode1 IN (' + @p_sSubCodes1 + ')'
IF NOT (@p_sSubCodes2 IS NULL OR @p_sSubCodes2 = '')
	SET @sQuery = @sQuery + ' AND CS_SubCode2 IN (' + @p_sSubCodes2 + ')'
IF NOT (@p_sPartnerKeys IS NULL OR @p_sPartnerKeys = '')
	SET @sQuery = @sQuery + ' AND CS_PRKey IN (' + @p_sPartnerKeys + ')'
IF NOT (@p_sPacketKeys IS NULL OR @p_sPacketKeys = '')
	SET @sQuery = @sQuery + ' AND CS_PKKey IN (' + @p_sPacketKeys + ')'
IF NOT (@p_sPeriodKeys IS NULL OR @p_sPeriodKeys = '')	
    SET @sQuery = @sQuery + ' AND CS_BYDAY IN (' + @p_sPeriodKeys + ')'
if ( exists( select top 1 1 from SystemSettings where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))    
	SET @sQuery = @sQuery + ' AND exists (select 1 from costoffers where co_id = cs_coid and co_state = 0) '
    
EXEC (@sQuery)

--Select * from #tmpCostSplitStr
--print @sQuery

DECLARE curCosts CURSOR
LOCAL FAST_FORWARD FOR SELECT CS_ID FROM #tmpCostSplitStr
OPEN curCosts
FETCH NEXT FROM	curCosts INTO @tsROWID
WHILE @@FETCH_STATUS = 0
	BEGIN
	SET @sQuery = 'INSERT INTO tbl_Costs
			(CS_SVKey, CS_Code, CS_SubCode1, CS_SubCode2,
			CS_PRKey, CS_PKKey, ' + @sSplitDateBegColumnName + ', ' + @sSplitDateEndColumnName + ', 
			CS_Week, CS_CostNetto, CS_Cost, CS_Discount, CS_Type,
			CS_Rate, CS_LongMin, CS_Long , CS_ByDay, CS_FirstDayNetto, CS_FirstDayBrutto, CS_Profit,
			CS_Creator, CS_UpdDate
			, CS_DATESELLBEG, CS_DATESELLEND, ' + @sDateBegColumnName + ',' + @sDateEndColumnName + ', CS_COID)
		SELECT
			CS_SVKey, CS_Code, CS_SubCode1, CS_SubCode2,
			CS_PRKey, CS_PKKey, ''' + CAST(@p_dtSplit as varchar(30)) + ''', ' + @sSplitDateEndColumnName + ', 
			CS_Week, CS_CostNetto, CS_Cost, CS_Discount, CS_Type,
			CS_Rate, CS_LongMin, CS_Long , CS_ByDay, CS_FirstDayNetto, CS_FirstDayBrutto, CS_Profit ,' + 
			CAST(@nUserKey  as varchar(10)) + ', GETDATE ()
			, CS_DATESELLBEG, CS_DATESELLEND, ' + @sDateBegColumnName + ',' + @sDateEndColumnName + ', CS_COID
		FROM	Costs
		WHERE	CS_ID = ' + CAST(@tsROWID as varchar(30))
--print @sQuery
	EXEC (@sQuery)
	SET @sQuery = ' UPDATE	Costs
			SET	' + @sSplitDateEndColumnName + ' = ''' + CAST(@dtSplit1 as varchar(30)) + ''',
			CS_Creator = ' + CAST(@nUserKey  as varchar(10)) + ',
			CS_UpdDate = GETDATE ()
		WHERE	CS_ID = ' + CAST(@tsROWID as varchar(30))
--print @sQuery
	EXEC (@sQuery)
		
		FETCH NEXT FROM	curCosts INTO @tsROWID


	END
CLOSE curCosts
DEALLOCATE curCosts

go

grant exec on CostSplitStr to public
go

/*********************************************************************/
/* end sp_CostSplitStr.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_CostSplitStr.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_DogListToQuotas.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_DogListToQuotas.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DogListToQuotas]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[DogListToQuotas]
GO

CREATE PROCEDURE [dbo].[DogListToQuotas]
(
	--<VERSION>9.20.14</VERSION>
	--<DATA>17.07.2014</DATA>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null,
	@SetOkIfRequest bit = 0, -- запуск из тригера T_UpdDogListQuota
	@OldSetToQuota bit = 0, -- запустить старый механизм посадки
	@ToSetQuotaDateFrom datetime = null,
	@ToSetQuotaDateTo datetime = null
) 
AS

declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, @DgKey int,
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint,
		@SdStateOld int, @SdStateNew int, @nHIID int, @dgCode nvarchar(10), @dlName nvarchar(max), @Long smallint
		
declare @sOldValue nvarchar(max), @sNewValue nvarchar(max), @AddServiceDLKey int

DECLARE @dlControl int
-- если включена настройка то отрабатывает новый метод посадки и рассадки в квоту
if exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota' and SS_ParmValue = 1) and @OldSetToQuota = 0
begin
	-- запоминаем старый статус услуги
	select @SdStateOld = max(SD_State) from ServiceByDate with(nolock) where SD_DLKey = @DLKey


	exec WcfSetServiceToQuota @DLKey, @SetQuotaType, @ToSetQuotaDateFrom, @ToSetQuotaDateTo
	
	-- находим новый статус
	select @SdStateNew = max(SD_State) from ServiceByDate with(nolock) where SD_DLKey = @DLKey

	-- устанавливаем новый статус
	Declare @dlControlNew int
	exec SetServiceStatusOk @DLKey, @dlControlNew output

	-- запись в историю, только если статус услуги поменялся
	if exists(select top 1 1 from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory' and SS_ParmValue = '1') and @SdStateOld != @SdStateNew
	begin
		IF ISNULL(@SdStateOld, 0) = 0
			SET @sOldValue = ''
		ELSE IF @SdStateOld = 1
			SET @sOldValue = 'Allotment'
		ELSE IF @SdStateOld = 2
			SET @sOldValue = 'Commitment'
		ELSE IF @SdStateOld = 3
			SET @sOldValue = 'Confirmed'
		ELSE IF @SdStateOld = 4
			SET @sOldValue = 'Wait'

		IF ISNULL(@SdStateNew, 0) = 0
			SET @sNewValue = ''
		ELSE IF @SdStateNew = 1
			SET @sNewValue = 'Allotment'
		ELSE IF @SdStateNew = 2
			SET @sNewValue = 'Commitment'
		ELSE IF @SdStateNew = 3
			SET @sNewValue = 'Confirmed'
		ELSE IF @SdStateNew = 4
			SET @sNewValue = 'Wait'

		EXEC @nHIID = dbo.InsHistory @dgCode, @DgKey, 19, '', 'UPD', @dlName, '', 0, ''
		EXECUTE dbo.InsertHistoryDetail @nHIID, 19001, @sOldValue, @sNewValue, @SdStateOld, @SdStateNew, '', '', 0
	end

	return
end

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0),
		@DgKey = DL_DGKEY,
		@dgCode = DG_CODE,
		@dlName = DL_NAME
FROM	DogovorList join Dogovor on DL_DGKey = DG_Key
WHERE	DL_Key = @DLKey

-- сохраним старое значение квотируемости
select @SdStateOld = MAX(SD_State) from ServiceByDate with(nolock) where SD_DLKey = @DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null	-- изменение
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @DLKey
	end
	
	return 0
END

SELECT @SVQUOTED=isnull(SV_Quoted,0) from [service] with(nolock) where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey

	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @DLKey
	end
	
	return 0
END

-- ДОБАВЛЕНА НАСТРОЙКА ЗАПРЕЩАЮЩАЯ СНЯТИЕ КВОТЫ ДЛЯ УСЛУГИ, 
-- ТАК КАК В КВОТАХ НЕТ РЕАЛЬНОЙ ИНФОРМАЦИИ, А ТОЛЬКО ПРИЗНАК ИХ НАЛИЧИЯ (ПЕРЕДАЕТСЯ ИЗ INTERLOOK)
IF (@SetQuotaType in (1,2) or @SetQuotaType is null) and  EXISTS (SELECT 1 FROM dbo.SystemSettings WHERE SS_ParmName='IL_SyncILPartners' and SS_ParmValue LIKE '%/' + CAST(@PRKey as varchar(20)) + '/%')
Begin
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @dlkey
	end
	
	return 0
End

--необходимо проставить доп.услугам статусы основных услуг
--вызывать только в случае оформления путевки
if (@SVKey=3 and exists(select top 1 1 from HotelRooms with(nolock) where HR_KEY=@SubCode1 and HR_MAIN=0) and @SetQuotaByRoom is null and @SetQuotaType is null)
begin
	Declare @SDRLID int, @RMKEY int

	SET @SDRLID = null
	SET @RMKEY = null
	
	select @RMKEY=HR_RMKEY from HotelRooms with(nolock) where HR_KEY=@SubCode1
	
	--считаем, что доп.услуга сидит в одной комнате с основным местом
	select top 1 @SDRLID=SD_RLID from ServiceByDate with(nolock) where SD_DLKEY=@dlkey
	
	if @SDRLID is not null and @RMKEY is not null
	begin
		if exists(select top 1 1 from Dogovorlist with(nolock)
					inner join ServiceByDate with(nolock) on SD_DLKey=DL_Key
					inner join QuotaParts with(nolock) on QP_ID=SD_QPID
					inner join QuotaDetails with(nolock) on QP_QDID=QD_ID
					inner join Quotas with(nolock) on QD_QTID=QT_ID
					inner join HotelRooms with(nolock) on HR_Key=DL_SUBCODE1
					inner join RoomPlaces with(nolock) on RP_ID=SD_RPID
					where DL_CODE=@Code
					and RTRIM(DL_DGCOD)=RTRIM(@dgCode)
					and SD_RLID=@SDRLID
					and QT_ByRoom=1
					and HR_MAIN=1
					and HR_RMKEY=@RMKEY
					and RP_Type=0
				)
		begin
			exec SetStatusInRoom @DLKey
			
			-- хранимка простановки статусов у услуг
			EXEC dbo.SetServiceStatusOk @DLKey,@dlControl
			return 0
		end
	end
end

-- проверим если это доп место в комнате, то ее нельзя посадить в квоты, сажаем внеквоты и эта квота за человека
if exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaForAddPlaces' and SS_ParmValue=1)
begin
	if (exists (select top 1 1 from ServiceByDate with(nolock) join RoomPlaces with(nolock) on SD_RPID = RP_ID where SD_DLKey = @DLKey and RP_Type = 1) and (@SetQuotaByRoom = 0))
	begin
		set @SetQuotaType = 3
	end
end

declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query nvarchar(max), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @Result_Exist bit, @nTemp smallint, @Quota_CheckState smallint, @dTemp datetime

--karimbaeva 19-04-2012  по умолчанию если не хватает квот на всех туристов, то ставим их всех на запрос, если установлена настройка 
-- SYSSetQuotaToTourist - 1 - ставим туристов на запрос, 0- снимаем квоты на кого хватает, остальных ставим на запрос
if not exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaToTourist' and SS_ParmValue=0)
begin
	If exists (SELECT top 1 1 FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null)
	BEGIN
		declare @QT_ByRoom_1 bit
		create table #DlKeys_1
		(
			dlKey int
		)

		insert into #DLKeys_1
			select dl_key 
			from dogovorlist with(nolock)
			where dl_dgkey in (
								select dl_dgkey 
								from dogovorlist with(nolock) 
								where dl_key = @DLKey
							   )
			and dl_svkey = 3
			
		SELECT @QT_ByRoom_1=QT_ByRoom FROM Quotas with(nolock),QuotaDetails with(nolock),QuotaParts with(nolock) WHERE QD_QTID=QT_ID and QD_ID=QP_QDID 
		and QP_ID = (select top 1 SD_QPID
					from ServiceByDate with(nolock) join RoomPlaces with(nolock) on SD_RLID = RP_RLID  
					where RP_Type = 0 and sd_dlkey in (select dlKey from #DlKeys_1) and SD_RLID = (select TOP 1 SD_RLID from ServiceByDate with(nolock) where sd_dlkey=@DlKey))
		
		if (@QT_ByRoom_1=0 or @QT_ByRoom_1 is null)
		begin
			SET @Q_DateBeg=@ServiceDateBeg
			SET @Q_DateEnd=@ServiceDateEnd
			SET @Q_DateFirst=@ServiceDateBeg
		
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
					@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
					@FilialKey,	@CityDepartment, 2, @Pax,@IsWait, 
					@Quota_CheckState output, @dTemp output, @nTemp output,
					@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
					@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
							
			if @Quota_CheckState = 0	
			begin
				UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
				
				-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
				if @SetQuotaByRoom = 0 and @SVKey = 3
				begin
					exec SetStatusInRoom @dlkey
				end
				
				-- хранимка простановки статусов у услуг
				EXEC dbo.SetServiceStatusOk @DlKey,@dlControl
				
				return 0
			end	
		end	
	END
end 

--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
	begin
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
			and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails with(nolock),QuotaParts with(nolock),ServiceByDate with(nolock)
							WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	end
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2
	
	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails with(nolock),QuotaParts with(nolock) Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
		else
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
		else
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
	END
	
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
	begin
		-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
		if @SVKey = 3
		begin
			DECLARE DLCURSOR CURSOR FAST_FORWARD FOR
			select distinct SD_DLKey from ServiceByDate SD1 with(nolock)
				inner join Dogovorlist DL1 with(nolock) on SD1.SD_DLKey=DL1.DL_KEY
				inner join HotelRooms with(nolock) on HR_KEY=DL1.DL_SUBCODE1
				where DL1.DL_DGKEY in (select DL2.DL_DGKEY from Dogovorlist DL2 with(nolock)
										inner join ServiceByDate SD2 on DL2.DL_KEY=SD2.SD_DLKey
										where DL2.DL_KEY=@DLKey
										and DL2.DL_SVKEY=3
										and SD2.SD_RLID=SD1.SD_RLID
									)
				and DL1.DL_Key<>@DLKey
				and DL1.DL_SVKEY=3
				and HR_MAIN=0
			OPEN DLCURSOR
			FETCH NEXT FROM DLCURSOR INTO @AddServiceDLKey
			WHILE @@FETCH_STATUS = 0
			BEGIN
				--устанавливаем статус доп.услугам, выделенным в отдельную услугу, но сидящим в том же номере
				exec SetStatusInRoom @AddServiceDLKey
				
				EXEC dbo.SetServiceStatusOk @AddServiceDLKey,@dlControl
			END
			FETCH NEXT FROM DLCURSOR INTO @AddServiceDLKey
			CLOSE DLCURSOR
			DEALLOCATE DLCURSOR
		end
		
		-- хранимка простановки статусов у услуг
		EXEC dbo.SetServiceStatusOk @DlKey,@dlControl
		return 0
	end

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT top 1 1 FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'

If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'

If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

CREATE table #StopSales (SS_QDID int,SS_QOID int,SS_DATE dateTime)
CREATE table #Quotas1(QP_ID int,QD_QTID int,QD_ID int,QO_ID int,QD_Release smallint,QP_Durations varchar(20),
	QD_Date DateTime,QP_IsNotCheckIn bit,QP_CheckInPlaces smallint,QP_CheckInPlacesBusy smallint,
	QP_Places smallint,QP_Busy smallint,QT_ID int,QO_QTID int,QO_SVKey int,QO_Code int,QO_SubCode1 int,QO_SubCode2 int)

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
-- Разрешим посадить в квоту с релиз периодом 0 текущим числом
set @DATETEMP = DATEADD(day, -1, @DATETEMP)

if exists (select top 1 1 from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1) OR exists (select top 1 1 from systemsettings where SS_ParmName='SYSAddQuotaPastPermit' and SS_ParmValue=1 and @Q_DateFirst < @DATETEMP)
	SET @DATETEMP='10-JAN-1900'

WHILE (exists(SELECT top 1 1 FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0))
BEGIN
	set @n=@n+1

	SET @Long=DATEDIFF(DAY,@Q_DateBeg,@Q_DateEnd)+1
	
	DECLARE @n1 smallint, @n2 smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
	DECLARE @ServiceKeys Table (SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime)

	IF (@SetQuotaType is null or @SetQuotaType < 0) --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN
		IF (@Q_ByRoom = 1)
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null
		ELSE
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null
		end
		ELSE IF @Q_ByRoom=1
		BEGIN
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_State is null
		END
		ELSE IF @Q_ByRoom=0
		BEGIN
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_State is null
		END

		SET @Error=0
		SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
		
		Set @prev = null
		
		WHILE @SK_Current is not null and @Error=0
		BEGIN
			SET @n1=1
			
			WHILE @n1<=@Long and @Error=0
			BEGIN
				SET @QP_ID=null
				SET @n2=0
				
				WHILE (@QP_ID is null) and @n2<2
				BEGIN
					truncate table #Quotas1
					truncate table #StopSales
					
					insert into #Quotas1 (QP_ID,QD_QTID,QD_ID,QO_ID,QD_Release,QP_Durations,QD_Date,QP_IsNotCheckIn,QP_CheckInPlaces,QP_CheckInPlacesBusy,QP_Places,QP_Busy,QT_ID,QO_QTID,QO_SVKey,QO_Code,QO_SubCode1,QO_SubCode2)
						select QP_ID,QD_QTID,QD_ID,QO_ID,QD_Release,QP_Durations,QD_Date,QP_IsNotCheckIn,QP_CheckInPlaces,QP_CheckInPlacesBusy,QP_Places,QP_Busy,QT_ID,QO_QTID,QO_SVKey,QO_Code,QO_SubCode1,QO_SubCode2
						FROM QuotaParts as QP1 with(nolock)
						inner join QuotaDetails as QD1 with(nolock) on QP_QDID=QD_ID and QD_Date = QP_Date
						inner join Quotas with(nolock) on QT_ID=QD_QTID
						inner join QuotaObjects with(nolock) on QO_QTID=QT_ID
						WHERE QD_Type=@Q_Type
						and QT_ByRoom=@Q_ByRoom
						and QD_IsDeleted is null
						and QP_IsDeleted is null
						and QO_SVKey=@SVKey
						and QO_Code=@Code
						and QO_SubCode1=@Q_SubCode1
						and QO_SubCode2=CASE
											WHEN @SVKey=3 THEN @Q_SubCode2
											WHEN @SVKey<>3 AND EXISTS(SELECT TOP 1 1 FROM [Service] WHERE SV_KEY=@SVKey AND SV_ISSUBCODE2=1)
												THEN (SELECT DL_Subcode2 FROM tbl_DogovorList WITH(NOLOCK) WHERE DL_Key=@DLKey)
											ELSE QO_SubCode2 END
						and ISNULL(QP_FilialKey, -100) = ISNULL(@Q_FilialKey, -100)
						and ISNULL(QP_CityDepartments, -100) = ISNULL(@Q_CityDepartments, -100)
						and ISNULL(QP_AgentKey, -100) = ISNULL(@Q_AgentKey, -100)
						and ISNULL(QT_PRKey, -100) = ISNULL(@Q_PRKey, -100)
						and QP_Durations = CASE WHEN @Q_Duration=0 THEN '' ELSE QP_Durations END
						and QD_Date between @Q_DateBeg and DATEADD(DAY,@Long,@Q_DateBeg)
						and (QP_Places-QP_Busy) > 0
						and (isnull(QP_Durations, '') = ''
						or (isnull(QP_Durations, '') != '' and (QP_IsNotCheckIn = 1 or QP_CheckInPlaces - QP_CheckInPlacesBusy > 0))
						or (isnull(QP_Durations, '') != '' and (QP_IsNotCheckIn = 0 or QP_Places - QP_Busy > 0))
						or (isnull(QP_Durations, '') != '' and QD_Date = @Q_DateFirst))
						and (QD1.QD_Date > @DATETEMP + ISNULL(QD1.QD_Release,-1) OR (QD1.QD_Date < getdate() - 1))
						and ((QP_IsNotCheckIn = 0) or (QP_IsNotCheckIn = 1 and exists (select top 1 1 from QuotaDetails as tblQD with(nolock)
																							inner join QuotaParts as tblQP with(nolock)
																							on tblQP.QP_QDID = tblQD.QD_ID and tblQP.QP_Date = tblQD.QD_Date
																							where tblQP.QP_IsNotCheckIn = 0
																							and tblQD.QD_Date=@Q_DateFirst
																							and tblQD.QD_QTID=QD1.QD_QTID)))
						and QP_ID not in
						(SELECT QP_ID FROM QuotaParts QP2 with(nolock)
								inner join QuotaDetails QD2 with(nolock) on QP_QDID=QD_ID and QD_Date=QP_Date
								inner join Quotas QT2 with(nolock) on QT_ID=QD_QTID
								WHERE QD2.QD_Type=@Q_Type
								and QT2.QT_ByRoom=@Q_ByRoom
								and QD2.QD_IsDeleted is null
								and QP2.QP_IsDeleted is null
								and ISNULL(QP2.QP_FilialKey, -100) = ISNULL(@Q_FilialKey, -100)
								and ISNULL(QP2.QP_CityDepartments, -100) = ISNULL(@Q_CityDepartments, -100)
								and ISNULL(QP2.QP_AgentKey, -100) = ISNULL(@Q_AgentKey, -100)
								and ISNULL(QT2.QT_PRKey, -100) = ISNULL(@Q_PRKey, -100)
								and ((@Q_Duration=0 and QP2.QP_Durations = '') or (@Q_Duration <> 0 and QP2.QP_ID in (Select QL_QPID From QuotaLimitations with(nolock) Where QL_Duration = @Q_Duration)))
								and QD2.QD_Date=@Q_DateFirst
								and (QP2.QP_IsNotCheckIn=1 or QP2.QP_CheckInPlaces-QP2.QP_CheckInPlacesBusy <= 0)
								and QO_QTID=QT2.QT_ID
								and ISNULL(QD2.QD_Release,0)=ISNULL(QD1.QD_Release,0)
								and QP2.QP_Durations COLLATE DATABASE_DEFAULT = QP1.QP_Durations COLLATE DATABASE_DEFAULT)

						if (@Q_Duration<>0)
						begin
							delete from #Quotas1 where QP_ID not in (Select QL_QPID From QuotaLimitations with(nolock) Where QL_Duration=@Q_Duration)
						end

						insert into #StopSales SELECT SS_QDID, SS_QOID, SS_Date FROM StopSales with(nolock) inner join #Quotas1 on SS_QOID=#Quotas1.QO_ID and SS_QDID=#Quotas1.QD_ID WHERE isnull(SS_IsDeleted, 0) = 0

						delete from #Quotas1 where exists (SELECT top 1 1 FROM #StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=QD_Date)
					
					IF @prev=1
					begin
						SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release
						FROM #Quotas1 AS Q1
						WHERE QD_Date=DATEADD(DAY,@n1-1,@Q_DateBeg) and QP_Durations=@durations_prev and QD_Release=@release_prev
						ORDER BY ISNULL(QD_Release,0) DESC, (select count(distinct QD_QTID) from QuotaDetails as QDP with(nolock)
								join QuotaParts as QPP with(nolock) on QDP.QD_ID = QPP.QP_QDID and QDP.QD_Date = QPP.QP_Date
								where exists (select top 1 1 from @ServiceKeys as SKP
												where SKP.SK_QPID = QPP.QP_ID)
								and QDP.QD_QTID = Q1.QD_QTID) DESC
					end
					ELSE
					begin
						SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release
						FROM #Quotas1 as Q1
						WHERE QD_Date=DATEADD(DAY,@n1-1,@Q_DateBeg)
						ORDER BY ISNULL(QD_Release,0) DESC, (select count(distinct QD_QTID) from QuotaDetails as QDP with(nolock)
								join QuotaParts as QPP on QDP.QD_ID = QPP.QP_QDID and QDP.QD_Date = QPP.QP_Date
								where exists (select top 1 1 from @ServiceKeys as SKP
												where SKP.SK_QPID = QPP.QP_ID)
								and QDP.QD_QTID = Q1.QD_QTID) DESC
					end
					
					SET @n2=@n2+1
					
					IF @QP_ID is null
					BEGIN
						SET @prev=1
					END
					ELSE
						UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@Q_DateBeg)
					END
					
					If @QP_ID is null
						SET @Error=1
					
					SET @n1=@n1+1
				END

				IF @Error=0
				begin
					IF @Q_ByRoom = 1
					begin
						if exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaToTourist' and SS_ParmValue=0)
						begin
							UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT MIN(SK_QPID) FROM @ServiceKeys join QuotaParts on SK_QPID=QP_ID WHERE SK_Date=SD_Date and SK_Key=SD_RLID and QP_Places-QP_Busy>0)
								WHERE SD_DLKey=@DLKey and SD_RLID=@SK_Current and SD_State is null and SD_Date between @ServiceDateBeg and @ServiceDateEnd
						end
						else
						begin
							UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT MIN(SK_QPID) FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=SD_RLID)
								WHERE SD_DLKey=@DLKey and SD_RLID=@SK_Current and SD_State is null and SD_Date between @ServiceDateBeg and @ServiceDateEnd
						end
					end
					ELSE
					begin
						if exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaToTourist' and SS_ParmValue=0)
						begin
							UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT MIN(SK_QPID) FROM @ServiceKeys join QuotaParts on SK_QPID=QP_ID WHERE SK_Date=SD_Date and SK_Key=SD_RPID and QP_Places-QP_Busy>0)
								WHERE SD_DLKey=@DLKey and SD_RPID=@SK_Current and SD_State is null and SD_Date between @ServiceDateBeg and @ServiceDateEnd
						end
						else
						begin
							UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT MIN(SK_QPID) FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=SD_RPID)
								WHERE SD_DLKey=@DLKey and SD_RPID=@SK_Current and SD_State is null and SD_Date between @ServiceDateBeg and @ServiceDateEnd
						end
					end
				end
				
				SET @SK_Current=null
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END

	declare @QTByRoom bit
	
	SELECT top 1 @QTByRoom = QT_ByRoom 
		FROM Quotas with(nolock)
		join QuotaObjects with(nolock) on QT_ID = QO_QTID
		where QO_Code = @Code
		and QO_SVKey = 3
	
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3 and @QTByRoom = 0
	begin
		exec SetStatusInRoom @dlkey
	end
	
	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN
		If exists (SELECT top 1 1 FROM ServiceByDate with(nolock) WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
				@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
				@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
				@nTemp output, @dTemp output, @nTemp output,
				@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
				@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END

--все квоты уже заняты (такие услуги попали в условие QP_Places-QP_Busy>0), для оставшихся проставляем статус запрос
IF @SetQuotaByRoom=1 and @SVKey=3
BEGIN
	IF @SetQuotaRLKey is null
	BEGIN
		UPDATE ServiceByDate SET SD_State = 4 where SD_DLKey = @DLKey and SD_QPID is null
	END
	ELSE
	BEGIN
		UPDATE ServiceByDate SET SD_State = 4 where SD_DLKey = @DLKey and SD_RLID = @SetQuotaRLKey and SD_QPID is null
	END
END
ELSE
BEGIN
	IF @SetQuotaRPKey is null
	BEGIN
		UPDATE ServiceByDate SET SD_State = 4 where SD_DLKey = @DLKey and SD_QPID is null
	END
	ELSE
	BEGIN
		UPDATE ServiceByDate SET SD_State = 4 where SD_DLKey = @DLKey and SD_RPID = @SetQuotaRPKey and SD_QPID is null
	END
END

if exists(select top 1 1 from ServiceByDate with(nolock) where SD_DLKey=@DLKey and SD_State is null) and @SVKey = 3
begin
	exec SetStatusInRoom @dlkey
end

drop table #StopSales
drop table #Quotas1

UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null

-- сохраним новое значение квотируемости
select @SdStateNew = MAX(SD_State) from ServiceByDate with(nolock) where SD_DLKey = @DLKey

-- запись в историю
if exists(select top 1 1 from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory' and SS_ParmValue = '1')
begin
	IF ISNULL(@SdStateOld, 0) = 0
		SET @sOldValue = ''
	ELSE IF @SdStateOld = 1
		SET @sOldValue = 'Allotment'
	ELSE IF @SdStateOld = 2
		SET @sOldValue = 'Commitment'
	ELSE IF @SdStateOld = 3
		SET @sOldValue = 'Confirmed'
	ELSE IF @SdStateOld = 4
		SET @sOldValue = 'Wait'

	IF ISNULL(@SdStateNew, 0) = 0
		SET @sNewValue = ''
	ELSE IF @SdStateNew = 1
		SET @sNewValue = 'Allotment'
	ELSE IF @SdStateNew = 2
		SET @sNewValue = 'Commitment'
	ELSE IF @SdStateNew = 3
		SET @sNewValue = 'Confirmed'
	ELSE IF @SdStateNew = 4
		SET @sNewValue = 'Wait'

	EXEC @nHIID = dbo.InsHistory @dgCode, @DgKey, 19, '', 'UPD', @dlName, '', 0, ''
	EXECUTE dbo.InsertHistoryDetail @nHIID, 19001, @sOldValue, @sNewValue, @SdStateOld, @SdStateNew, '', '', 0
end

-- 2012-10-12 tkachuk, task 8473 - меняем статус для услуг, привязанных к изменившимся квотам

EXEC dbo.SetServiceStatusOk @DlKey,@dlControl
GO

GRANT EXEC ON [dbo].[DogListToQuotas] TO PUBLIC
GO
/*********************************************************************/
/* end sp_DogListToQuotas.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_DogListToQuotas.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ExportToDCTables.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ExportToDCTables.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ExportToDCTables]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ExportToDCTables]
GO

--<VERSION>2009.2.19.1</VERSION>
--<DATE>2013-05-16</DATE>
CREATE PROCEDURE [dbo].[ExportToDCTables]
	(
		@exportList [dbo].[StructToExportAllDCTables] readonly
	)
AS
BEGIN	
	CREATE TABLE #TP_Prices
		(
			[xTP_TIKey] [int] NOT NULL,
			[xTP_TOKey] [int] NOT NULL,
			[xTP_TRKey] [int] NOT NULL,
			[xTP_TourDate] [datetime] NOT NULL,
			[xTP_Key] [bigint] PRIMARY KEY NOT NULL,			
			[xTP_HotelKey] [int] NOT NULL,
			[xTP_DepartureKey] [int] NOT NULL,
			[xTP_Rate] [nvarchar](2) null,
			[xTP_Days] [int] null,			

			[xSCPId_1] [int] null,
			[xSCPId_2] [int] null,
			[xSCPId_3] [int] null,
			[xSCPId_4] [int] null,
			[xSCPId_5] [int] null,
			[xSCPId_6] [int] null,
			[xSCPId_7] [int] null,
			[xSCPId_8] [int] null,
			[xSCPId_9] [int] null,
			[xSCPId_10] [int] null,
			[xSCPId_11] [int] null,
			[xSCPId_12] [int] null,
			[xSCPId_13] [int] null,
			[xSCPId_14] [int] null,
			[xSCPId_15] [int] null,
			
			[xSvKey_1] [int] null,
			[xSvKey_2] [int] null,
			[xSvKey_3] [int] null,
			[xSvKey_4] [int] null,
			[xSvKey_5] [int] null,
			[xSvKey_6] [int] null,
			[xSvKey_7] [int] null,
			[xSvKey_8] [int] null,
			[xSvKey_9] [int] null,
			[xSvKey_10] [int] null,
			[xSvKey_11] [int] null,
			[xSvKey_12] [int] null,
			[xSvKey_13] [int] null,
			[xSvKey_14] [int] null,
			[xSvKey_15] [int] null,
			
			[xGross_1] [money] null,
			[xGross_2] [money] null,
			[xGross_3] [money] null,
			[xGross_4] [money] null,
			[xGross_5] [money] null,
			[xGross_6] [money] null,
			[xGross_7] [money] null,
			[xGross_8] [money] null,
			[xGross_9] [money] null,
			[xGross_10] [money] null,
			[xGross_11] [money] null,
			[xGross_12] [money] null,
			[xGross_13] [money] null,
			[xGross_14] [money] null,
			[xGross_15] [money] null,
			
			[xAddCostIsCommission_1] [money] null,
			[xAddCostIsCommission_2] [money] null,
			[xAddCostIsCommission_3] [money] null,
			[xAddCostIsCommission_4] [money] null,
			[xAddCostIsCommission_5] [money] null,
			[xAddCostIsCommission_6] [money] null,
			[xAddCostIsCommission_7] [money] null,
			[xAddCostIsCommission_8] [money] null,
			[xAddCostIsCommission_9] [money] null,
			[xAddCostIsCommission_10] [money] null,
			[xAddCostIsCommission_11] [money] null,
			[xAddCostIsCommission_12] [money] null,
			[xAddCostIsCommission_13] [money] null,
			[xAddCostIsCommission_14] [money] null,
			[xAddCostIsCommission_15] [money] null,
			
			[xAddCostNoCommission_1] [money] null,
			[xAddCostNoCommission_2] [money] null,
			[xAddCostNoCommission_3] [money] null,
			[xAddCostNoCommission_4] [money] null,
			[xAddCostNoCommission_5] [money] null,
			[xAddCostNoCommission_6] [money] null,
			[xAddCostNoCommission_7] [money] null,
			[xAddCostNoCommission_8] [money] null,
			[xAddCostNoCommission_9] [money] null,
			[xAddCostNoCommission_10] [money] null,
			[xAddCostNoCommission_11] [money] null,
			[xAddCostNoCommission_12] [money] null,
			[xAddCostNoCommission_13] [money] null,
			[xAddCostNoCommission_14] [money] null,
			[xAddCostNoCommission_15] [money] null,
			
			[xMarginPercent_1] [money] null,
			[xMarginPercent_2] [money] null,
			[xMarginPercent_3] [money] null,
			[xMarginPercent_4] [money] null,
			[xMarginPercent_5] [money] null,
			[xMarginPercent_6] [money] null,
			[xMarginPercent_7] [money] null,
			[xMarginPercent_8] [money] null,
			[xMarginPercent_9] [money] null,
			[xMarginPercent_10] [money] null,
			[xMarginPercent_11] [money] null,
			[xMarginPercent_12] [money] null,
			[xMarginPercent_13] [money] null,
			[xMarginPercent_14] [money] null,
			[xMarginPercent_15] [money] null,
			
			[xCommissionOnly_1] [bit] null,
			[xCommissionOnly_2] [bit] null,
			[xCommissionOnly_3] [bit] null,
			[xCommissionOnly_4] [bit] null,
			[xCommissionOnly_5] [bit] null,
			[xCommissionOnly_6] [bit] null,
			[xCommissionOnly_7] [bit] null,
			[xCommissionOnly_8] [bit] null,
			[xCommissionOnly_9] [bit] null,
			[xCommissionOnly_10] [bit] null,
			[xCommissionOnly_11] [bit] null,
			[xCommissionOnly_12] [bit] null,
			[xCommissionOnly_13] [bit] null,
			[xCommissionOnly_14] [bit] null,
			[xCommissionOnly_15] [bit] null,
			
			[xIsCommission_1] [bit] null,
			[xIsCommission_2] [bit] null,
			[xIsCommission_3] [bit] null,
			[xIsCommission_4] [bit] null,
			[xIsCommission_5] [bit] null,
			[xIsCommission_6] [bit] null,
			[xIsCommission_7] [bit] null,
			[xIsCommission_8] [bit] null,
			[xIsCommission_9] [bit] null,
			[xIsCommission_10] [bit] null,
			[xIsCommission_11] [bit] null,
			[xIsCommission_12] [bit] null,
			[xIsCommission_13] [bit] null,
			[xIsCommission_14] [bit] null,
			[xIsCommission_15] [bit] null
		)
		
		declare @tsKey_1 int, @tsKey_2 int, @tsKey_3 int, @tsKey_4 int, @tsKey_5 int, @tsKey_6 int, @tsKey_7 int, @tsKey_8 int, @tsKey_9 int, @tsKey_10 int, @tsKey_11 int, @tsKey_12 int, @tsKey_13 int, @tsKey_14 int, @tsKey_15 int
		declare @tsSVKey_1 int, @tsSVKey_2 int, @tsSVKey_3 int, @tsSVKey_4 int, @tsSVKey_5 int, @tsSVKey_6 int, @tsSVKey_7 int, @tsSVKey_8 int, @tsSVKey_9 int, @tsSVKey_10 int, @tsSVKey_11 int, @tsSVKey_12 int, @tsSVKey_13 int, @tsSVKey_14 int, @tsSVKey_15 int
		declare @tsGross_1 money, @tsGross_2 money, @tsGross_3 money, @tsGross_4 money, @tsGross_5 money, @tsGross_6 money, @tsGross_7 money, @tsGross_8 money, @tsGross_9 money, @tsGross_10 money, @tsGross_11 money, @tsGross_12 money, @tsGross_13 money, @tsGross_14 money, @tsGross_15 money
		declare @tsAddIsCommission_1 money, @tsAddIsCommission_2 money, @tsAddIsCommission_3 money, @tsAddIsCommission_4 money, @tsAddIsCommission_5 money, @tsAddIsCommission_6 money, @tsAddIsCommission_7 money, @tsAddIsCommission_8 money, @tsAddIsCommission_9 money, @tsAddIsCommission_10 money, @tsAddIsCommission_11 money, @tsAddIsCommission_12 money, @tsAddIsCommission_13 money, @tsAddIsCommission_14 money, @tsAddIsCommission_15 money
		declare @tsAddNoCommission_1 money, @tsAddNoCommission_2 money, @tsAddNoCommission_3 money, @tsAddNoCommission_4 money, @tsAddNoCommission_5 money, @tsAddNoCommission_6 money, @tsAddNoCommission_7 money, @tsAddNoCommission_8 money, @tsAddNoCommission_9 money, @tsAddNoCommission_10 money, @tsAddNoCommission_11 money, @tsAddNoCommission_12 money, @tsAddNoCommission_13 money, @tsAddNoCommission_14 money, @tsAddNoCommission_15 money
		declare @tsMarginPercent_1 money, @tsMarginPercent_2 money, @tsMarginPercent_3 money, @tsMarginPercent_4 money, @tsMarginPercent_5 money, @tsMarginPercent_6 money, @tsMarginPercent_7 money, @tsMarginPercent_8 money, @tsMarginPercent_9 money, @tsMarginPercent_10 money, @tsMarginPercent_11 money, @tsMarginPercent_12 money, @tsMarginPercent_13 money, @tsMarginPercent_14 money, @tsMarginPercent_15 money
		declare @tsCommissionOnly_1 money, @tsCommissionOnly_2 money, @tsCommissionOnly_3 money, @tsCommissionOnly_4 money, @tsCommissionOnly_5 money, @tsCommissionOnly_6 money, @tsCommissionOnly_7 money, @tsCommissionOnly_8 money, @tsCommissionOnly_9 money, @tsCommissionOnly_10 money, @tsCommissionOnly_11 money, @tsCommissionOnly_12 money, @tsCommissionOnly_13 money, @tsCommissionOnly_14 money, @tsCommissionOnly_15 money
		declare @tsIsCommission_1 bit, @tsIsCommission_2 bit, @tsIsCommission_3 bit, @tsIsCommission_4 bit, @tsIsCommission_5 bit, @tsIsCommission_6 bit, @tsIsCommission_7 bit, @tsIsCommission_8 bit, @tsIsCommission_9 bit, @tsIsCommission_10 bit, @tsIsCommission_11 bit, @tsIsCommission_12 bit, @tsIsCommission_13 bit, @tsIsCommission_14 bit, @tsIsCommission_15 bit

		-- ���������� ����������� ����
		declare @prevTPKey bigint, @prevToKey int, @prevTiKey int, @prevTRKey int, @prevDays int, @prevRate nvarchar(10), @prevHotelKey int, @prevDepartureKey int, @prevTourDate datetime
		set @prevTPKey = -100500

		declare @xTPKey bigint, @xToKey int, @xTiKey int, @xTRKey int, @xTourDate datetime, @xDays int, @xRate nvarchar(10),
		@xHotelKey int, @xDepartureKey int, @xSVKey int, @xCode int, @xSubCode1 int, @xSubCode2 int, @xPRKey int, @xDate datetime,
		@xMen int, @xServiceDays int, @xPkKey int, @xNetto money, @xBrutto money, @xIsCommission bit, @xMargin money, @xCommissionOnly bit,
		@xAddCostIsCommission money, @xAddCostNoCommission money, @xServiceOrder bit

		declare exportServiceCursor cursor local fast_forward for
		select [TPKey], [ToKey], [TiKey], [TRKey], [TourDate], [Days], [Rate], [HotelKey], [DepartureKey], [SVKey], [Code], [SubCode1], [SubCode2], [PRKey],
		[Date], [Men], [ServiceDays], [PkKey], [Netto], [Brutto], [IsCommission], [Margin], [CommissionOnly], [AddCostIsCommission], [AddCostNoCommission],
		case when [SVKey] = 3 and [HotelKey] = [Code] then 0 else 1 end as [ServiceOrder]
		from @exportList
		union
		--������� 1 ������ � �����, ��� �� � ������� ������ ��� ������������������ ���������
		select 2147483647, null, null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null,
		0 as [ServiceOrder]
		order by [TPKey], [ServiceOrder]

		print '�������������'
		print CONVERT(TIME, GETDATE())

		open exportServiceCursor
		fetch exportServiceCursor into @xTPKey, @xToKey, @xTiKey, @xTRKey, @xTourDate, @xDays, @xRate,
		@xHotelKey, @xDepartureKey, @xSVKey, @xCode, @xSubCode1, @xSubCode2, @xPRKey, @xDate,
		@xMen, @xServiceDays, @xPkKey, @xNetto, @xBrutto, @xIsCommission, @xMargin, @xCommissionOnly,
		@xAddCostIsCommission, @xAddCostNoCommission, @xServiceOrder

		print '�������� �������'
		print CONVERT(TIME, GETDATE())

		while (@@FETCH_STATUS = 0)
		begin
			-- ���� ���� �������� �� ����� �������� ���������� ������ �� ��������� �������
			if (@prevTPKey != @xTPKey and @prevTPKey != -100500)
			begin
				insert into #TP_Prices (xtp_key, xtp_tokey, xtp_tikey, xtp_trkey, xTP_Days, xTP_TourDate, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
				, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
				, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
				, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
				, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
				, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
				, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
				, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
				, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15)
				values (@prevTPKey, @prevToKey, @prevTiKey, @prevTRKey, @prevDays, @prevTourDate, @prevRate, @prevHotelKey, @prevDepartureKey
				, @tsKey_1, @tsKey_2, @tsKey_3, @tsKey_4, @tsKey_5, @tsKey_6, @tsKey_7, @tsKey_8, @tsKey_9, @tsKey_10, @tsKey_11, @tsKey_12, @tsKey_13, @tsKey_14, @tsKey_15
				, @tsSVKey_1, @tsSVKey_2, @tsSVKey_3, @tsSVKey_4, @tsSVKey_5, @tsSVKey_6, @tsSVKey_7, @tsSVKey_8, @tsSVKey_9, @tsSVKey_10, @tsSVKey_11, @tsSVKey_12, @tsSVKey_13, @tsSVKey_14, @tsSVKey_15
				, @tsGross_1, @tsGross_2, @tsGross_3, @tsGross_4, @tsGross_5, @tsGross_6, @tsGross_7, @tsGross_8, @tsGross_9, @tsGross_10, @tsGross_11, @tsGross_12, @tsGross_13, @tsGross_14, @tsGross_15
				, @tsAddIsCommission_1, @tsAddIsCommission_2, @tsAddIsCommission_3, @tsAddIsCommission_4, @tsAddIsCommission_5, @tsAddIsCommission_6, @tsAddIsCommission_7, @tsAddIsCommission_8, @tsAddIsCommission_9, @tsAddIsCommission_10, @tsAddIsCommission_11, @tsAddIsCommission_12, @tsAddIsCommission_13, @tsAddIsCommission_14, @tsAddIsCommission_15
				, @tsAddNoCommission_1, @tsAddNoCommission_2, @tsAddNoCommission_3, @tsAddNoCommission_4, @tsAddNoCommission_5, @tsAddNoCommission_6, @tsAddNoCommission_7, @tsAddNoCommission_8, @tsAddNoCommission_9, @tsAddNoCommission_10, @tsAddNoCommission_11, @tsAddNoCommission_12, @tsAddNoCommission_13, @tsAddNoCommission_14, @tsAddNoCommission_15
				, @tsMarginPercent_1, @tsMarginPercent_2, @tsMarginPercent_3, @tsMarginPercent_4, @tsMarginPercent_5, @tsMarginPercent_6, @tsMarginPercent_7, @tsMarginPercent_8, @tsMarginPercent_9, @tsMarginPercent_10, @tsMarginPercent_11, @tsMarginPercent_12, @tsMarginPercent_13, @tsMarginPercent_14, @tsMarginPercent_15
				, @tsCommissionOnly_1, @tsCommissionOnly_2, @tsCommissionOnly_3, @tsCommissionOnly_4, @tsCommissionOnly_5, @tsCommissionOnly_6, @tsCommissionOnly_7, @tsCommissionOnly_8, @tsCommissionOnly_9, @tsCommissionOnly_10, @tsCommissionOnly_11, @tsCommissionOnly_12, @tsCommissionOnly_13, @tsCommissionOnly_14, @tsCommissionOnly_15
				, @tsIsCommission_1, @tsIsCommission_2, @tsIsCommission_3, @tsIsCommission_4, @tsIsCommission_5, @tsIsCommission_6, @tsIsCommission_7, @tsIsCommission_8, @tsIsCommission_9, @tsIsCommission_10, @tsIsCommission_11, @tsIsCommission_12, @tsIsCommission_13, @tsIsCommission_14, @tsIsCommission_15)
										
				set @tsKey_1 = null
				set @tsKey_2 = null
				set @tsKey_3 = null
				set @tsKey_4 = null
				set @tsKey_5 = null
				set @tsKey_6 = null
				set @tsKey_7 = null
				set @tsKey_8 = null
				set @tsKey_9 = null
				set @tsKey_10 = null
				set @tsKey_11 = null
				set @tsKey_12 = null
				set @tsKey_13 = null
				set @tsKey_14 = null
				set @tsKey_15 = null
						
				set @tsSVKey_1 = null
				set @tsSVKey_2 = null
				set @tsSVKey_3 = null
				set @tsSVKey_4 = null
				set @tsSVKey_5 = null
				set @tsSVKey_6 = null
				set @tsSVKey_7 = null
				set @tsSVKey_8 = null
				set @tsSVKey_9 = null
				set @tsSVKey_10 = null
				set @tsSVKey_11 = null
				set @tsSVKey_12 = null
				set @tsSVKey_13 = null
				set @tsSVKey_14 = null
				set @tsSVKey_15 = null
						
				set @tsGross_1 = null
				set @tsGross_2 = null
				set @tsGross_3 = null
				set @tsGross_4 = null
				set @tsGross_5 = null
				set @tsGross_6 = null
				set @tsGross_7 = null
				set @tsGross_8 = null
				set @tsGross_9 = null
				set @tsGross_10 = null
				set @tsGross_11 = null
				set @tsGross_12 = null
				set @tsGross_13 = null
				set @tsGross_14 = null
				set @tsGross_15 = null
						
				set @tsAddIsCommission_1 = null
				set @tsAddIsCommission_2 = null
				set @tsAddIsCommission_3 = null
				set @tsAddIsCommission_4 = null
				set @tsAddIsCommission_5 = null
				set @tsAddIsCommission_6 = null
				set @tsAddIsCommission_7 = null
				set @tsAddIsCommission_8 = null
				set @tsAddIsCommission_9 = null
				set @tsAddIsCommission_10 = null
				set @tsAddIsCommission_11 = null
				set @tsAddIsCommission_12 = null
				set @tsAddIsCommission_13 = null
				set @tsAddIsCommission_14 = null
				set @tsAddIsCommission_15 = null
						
				set @tsAddNoCommission_1 = null
				set @tsAddNoCommission_2 = null
				set @tsAddNoCommission_3 = null
				set @tsAddNoCommission_4 = null
				set @tsAddNoCommission_5 = null
				set @tsAddNoCommission_6 = null
				set @tsAddNoCommission_7 = null
				set @tsAddNoCommission_8 = null
				set @tsAddNoCommission_9 = null
				set @tsAddNoCommission_10 = null
				set @tsAddNoCommission_11 = null
				set @tsAddNoCommission_12 = null
				set @tsAddNoCommission_13 = null
				set @tsAddNoCommission_14 = null
				set @tsAddNoCommission_15 = null
						
				set @tsMarginPercent_1 = null
				set @tsMarginPercent_2 = null
				set @tsMarginPercent_3 = null
				set @tsMarginPercent_4 = null
				set @tsMarginPercent_5 = null
				set @tsMarginPercent_6 = null
				set @tsMarginPercent_7 = null
				set @tsMarginPercent_8 = null
				set @tsMarginPercent_9 = null
				set @tsMarginPercent_10 = null
				set @tsMarginPercent_11 = null
				set @tsMarginPercent_12 = null
				set @tsMarginPercent_13 = null
				set @tsMarginPercent_14 = null
				set @tsMarginPercent_15 = null
						
				set @tsCommissionOnly_1 = null
				set @tsCommissionOnly_2 = null
				set @tsCommissionOnly_3 = null
				set @tsCommissionOnly_4 = null
				set @tsCommissionOnly_5 = null
				set @tsCommissionOnly_6 = null
				set @tsCommissionOnly_7 = null
				set @tsCommissionOnly_8 = null
				set @tsCommissionOnly_9 = null
				set @tsCommissionOnly_10 = null
				set @tsCommissionOnly_11 = null
				set @tsCommissionOnly_12 = null
				set @tsCommissionOnly_13 = null
				set @tsCommissionOnly_14 = null
				set @tsCommissionOnly_15 = null
						
				set @tsIsCommission_1 = null
				set @tsIsCommission_2 = null
				set @tsIsCommission_3 = null
				set @tsIsCommission_4 = null
				set @tsIsCommission_5 = null
				set @tsIsCommission_6 = null
				set @tsIsCommission_7 = null
				set @tsIsCommission_8 = null
				set @tsIsCommission_9 = null
				set @tsIsCommission_10 = null
				set @tsIsCommission_11 = null
				set @tsIsCommission_12 = null
				set @tsIsCommission_13 = null
				set @tsIsCommission_14 = null
				set @tsIsCommission_15 = null
			end
			
			-- ���� ��� �� ��������� ������
			if (@xTPKey != 9223372036854775807)
			begin
				declare @scId int, @scpId bigint, @spadId bigint, @stId bigint, @tmadId int
				-- �� ��������� ��������������� ������� � �������� ����� ������ ��� �������
				declare @modificationDate datetime
				set @modificationDate = getdate()
								
				-- ������� ����� ������ ��� ���� ������
				set @scId = isnull((select top 1 SC_Id
									from TP_ServiceComponents with (nolock)
									where SC_SVKey = @xSVKey
									and SC_Code = @xCode
									and SC_SubCode1 = @xSubCode1
									and SC_SubCode2 = @xSubCode2
									and SC_PRKey = @xPRKey), null)
				-- ���� �� ����� �� ������� �����
				if (@scId is null)
				begin
					insert into TP_ServiceComponents (SC_SVKey, SC_Code, SC_SubCode1, SC_SubCode2, SC_PRKey)
					values (@xSVKey, @xCode, @xSubCode1, @xSubCode2, @xPRKey)
		
					set @scId = SCOPE_IDENTITY()
				end

				-- ��������� TP_ServiceTours
				-- �������� ���� �� ������ � ������� TP_ServiceTours
				set @stId = isnull((select top 1 ST_Id
									from TP_ServiceTours with (nolock)
									where ST_SVKey = @xSVKey
									and ST_SCId = @scId
									and ST_TRKey = @xTRKey
									and ST_TOKey = @xToKey), null)
				if (@stId is null)
				begin
					insert into TP_ServiceTours (ST_SVKey, ST_SCId, ST_TRKey, ST_TOKey)
					values (@xSVKey, @scId, @xTRKey, @xToKey)
		
					set @stId = SCOPE_IDENTITY()
				end

				-- ��������� TP_ServiceCalculateParametrs
				set @scpId = isnull((	select top 1 SCP_Id
										from TP_ServiceCalculateParametrs with (nolock)
										where SCP_SCId = @scId
										and SCP_Date = @xDate
										and SCP_DateCheckIn = @xTourDate
										and SCP_Men = @xMen
										and SCP_Days = @xServiceDays
										and SCP_TourDays = @xDays
										and SCP_PKKey = @xPkKey
										and SCP_DeleteDate is null), null)

				-- ���� �� �����, �� ������� �����
				if (@scpId is null)
				begin
					insert into TP_ServiceCalculateParametrs(SCP_SCId, SCP_Date, SCP_DateCheckIn, SCP_Men, SCP_Days, SCP_PKKey, SCP_TourDays, SCP_SvKey)
					values (@scId, @xDate, @xTourDate, @xMen, @xServiceDays, @xPkKey, @xDays, @xSVKey)
		
					set @scpId = SCOPE_IDENTITY()
				end

				-- ��������� TP_ServicePriceActualDays
				set @spadId = isnull((	select top 1 SPAD_Id
										from TP_ServicePriceActualDate with (nolock)
										where SPAD_SCPId = @scpId
										and SPAD_SaleDate is null
										and SPAD_Rate = @xRate), null)
				-- ���� �� �����, �� ������� �����
				if (@spadId is null)
				begin					
					insert into TP_ServicePriceActualDate (SPAD_SCPId, SPAD_IsCommission, SPAD_Rate, SPAD_SaleDate, SPAD_Gross, SPAD_Netto, SPAD_DateLastChange, SPAD_DateLastCalculate, SPAD_NeedApply)
					values (@scpId, @xIsCommission, @xRate, null, @xBrutto, @xNetto, @modificationDate, @modificationDate , 0)
				end
				else	-- ���� ����� �� � ��������� ���������� �� ������� ��������
				begin
					if not exists (	select top 1 1 
									from TP_ServicePriceActualDate with (nolock)
									where SPAD_Id = @spadId
									and SPAD_IsCommission = @xIsCommission
									and SPAD_Gross = @xBrutto
									and SPAD_Netto = @xNetto)
					begin
						-- �������
						update TP_ServicePriceActualDate
						set SPAD_Gross = @xBrutto,
						SPAD_Netto = @xNetto,
						SPAD_IsCommission = @xIsCommission,
						SPAD_DateLastCalculate = getdate(),
						SPAD_NeedApply = 0,
						SPAD_AutoOnline = 1 -- � ������ ����� ���������� ���� � ������ �����
						where SPAD_SCPId = @scpId
					end
				end

				-- ��������� TP_TourMarginActualDays
				set @tmadId = isnull((	select top 1 1
										from TP_TourMarginActualDate with(nolock)
										where TMAD_TRKey = @xTRKey
										and TMAD_SvKey = @xSVKey
										and TMAD_DateCheckIn = @xTourDate
										and TMAD_Long = @xDays), null)
				-- ���� �� �����, �� ������� �����
				if (@tmadId is null)
				begin					
					insert into TP_TourMarginActualDate (TMAD_TRKey, TMAD_SvKey, TMAD_DateCheckIn, TMAD_Percent, TMAD_IsCommission, TMAD_Long, TMAD_DateLastChange, TMAD_DateLastCalculate, TMAD_NeedApply)
					values (@xTRKey, @xSVKey, @xTourDate, @xMargin, @xCommissionOnly, @xDays, @modificationDate, @modificationDate, 2)
				end

				-- ������, ��� ����� ��������
				-- ������ �� ������� ������ �� � ���� ��������� ��� TP_PriceComponents
				if (@tsKey_1 is null)
				begin
					set @tsKey_1 = @scpId
					set @tsSVKey_1 = @xSVKey
					set @tsGross_1 = @xBrutto
					set @tsAddIsCommission_1 = @xAddCostIsCommission
					set @tsAddNoCommission_1 = @xAddCostNoCommission
					set @tsMarginPercent_1 = @xMargin
					set @tsCommissionOnly_1 = @xCommissionOnly
					set @tsIsCommission_1 = @xIsCommission
				end
				else if (@tsKey_2 is null)
				begin
					set @tsKey_2 = @scpId
					set @tsSVKey_2 = @xSVKey
					set @tsGross_2 = @xBrutto
					set @tsAddIsCommission_2 = @xAddCostIsCommission
					set @tsAddNoCommission_2 = @xAddCostNoCommission
					set @tsMarginPercent_2 = @xMargin
					set @tsCommissionOnly_2 = @xCommissionOnly
					set @tsIsCommission_2 = @xIsCommission
				end
				else if (@tsKey_3 is null)
				begin
					set @tsKey_3 = @scpId
					set @tsSVKey_3 = @xSVKey
					set @tsGross_3 = @xBrutto
					set @tsAddIsCommission_3 = @xAddCostIsCommission
					set @tsAddNoCommission_3 = @xAddCostNoCommission
					set @tsMarginPercent_3 = @xMargin
					set @tsCommissionOnly_3 = @xCommissionOnly
					set @tsIsCommission_3 = @xIsCommission
				end
				else if (@tsKey_4 is null)
				begin
					set @tsKey_4 = @scpId
					set @tsSVKey_4 = @xSVKey
					set @tsGross_4 = @xBrutto
					set @tsAddIsCommission_4 = @xAddCostIsCommission
					set @tsAddNoCommission_4 = @xAddCostNoCommission
					set @tsMarginPercent_4 = @xMargin
					set @tsCommissionOnly_4 = @xCommissionOnly
					set @tsIsCommission_4 = @xIsCommission
				end
				else if (@tsKey_5 is null)
				begin
					set @tsKey_5 = @scpId
					set @tsSVKey_5 = @xSVKey
					set @tsGross_5 = @xBrutto
					set @tsAddIsCommission_5 = @xAddCostIsCommission
					set @tsAddNoCommission_5 = @xAddCostNoCommission
					set @tsMarginPercent_5 = @xMargin
					set @tsCommissionOnly_5 = @xCommissionOnly
					set @tsIsCommission_5 = @xIsCommission
				end
				else if (@tsKey_6 is null)
				begin
					set @tsKey_6 = @scpId
					set @tsSVKey_6 = @xSVKey
					set @tsGross_6 = @xBrutto
					set @tsAddIsCommission_6 = @xAddCostIsCommission
					set @tsAddNoCommission_6 = @xAddCostNoCommission
					set @tsMarginPercent_6 = @xMargin
					set @tsCommissionOnly_6 = @xCommissionOnly
					set @tsIsCommission_6 = @xIsCommission
				end
				else if (@tsKey_7 is null)
				begin
					set @tsKey_7 = @scpId
					set @tsSVKey_7 = @xSVKey
					set @tsGross_7 = @xBrutto
					set @tsAddIsCommission_7 = @xAddCostIsCommission
					set @tsAddNoCommission_7 = @xAddCostNoCommission
					set @tsMarginPercent_7 = @xMargin
					set @tsCommissionOnly_7 = @xCommissionOnly
					set @tsIsCommission_7 = @xIsCommission
				end
				else if (@tsKey_8 is null)
				begin
					set @tsKey_8 = @scpId
					set @tsSVKey_8 = @xSVKey
					set @tsGross_8 = @xBrutto
					set @tsAddIsCommission_8 = @xAddCostIsCommission
					set @tsAddNoCommission_8 = @xAddCostNoCommission
					set @tsMarginPercent_8 = @xMargin
					set @tsCommissionOnly_8 = @xCommissionOnly
					set @tsIsCommission_8 = @xIsCommission
				end
				else if (@tsKey_9 is null)
				begin
					set @tsKey_9 = @scpId
					set @tsSVKey_9 = @xSVKey
					set @tsGross_9 = @xBrutto
					set @tsAddIsCommission_9 = @xAddCostIsCommission
					set @tsAddNoCommission_9 = @xAddCostNoCommission
					set @tsMarginPercent_9 = @xMargin
					set @tsCommissionOnly_9 = @xCommissionOnly
					set @tsIsCommission_9 = @xIsCommission
				end
				else if (@tsKey_10 is null)
				begin
					set @tsKey_10 = @scpId
					set @tsSVKey_10 = @xSVKey
					set @tsGross_10 = @xBrutto
					set @tsAddIsCommission_10 = @xAddCostIsCommission
					set @tsAddNoCommission_10 = @xAddCostNoCommission
					set @tsMarginPercent_10 = @xMargin
					set @tsCommissionOnly_10 = @xCommissionOnly
					set @tsIsCommission_10 = @xIsCommission
				end
				else if (@tsKey_11 is null)
				begin
					set @tsKey_11 = @scpId
					set @tsSVKey_11 = @xSVKey
					set @tsGross_11 = @xBrutto
					set @tsAddIsCommission_11 = @xAddCostIsCommission
					set @tsAddNoCommission_11 = @xAddCostNoCommission
					set @tsMarginPercent_11 = @xMargin
					set @tsCommissionOnly_11 = @xCommissionOnly
					set @tsIsCommission_11 = @xIsCommission
				end
				else if (@tsKey_12 is null)
				begin
					set @tsKey_12 = @scpId
					set @tsSVKey_12 = @xSVKey
					set @tsGross_12 = @xBrutto
					set @tsAddIsCommission_12 = @xAddCostIsCommission
					set @tsAddNoCommission_12 = @xAddCostNoCommission
					set @tsMarginPercent_12 = @xMargin
					set @tsCommissionOnly_12 = @xCommissionOnly
					set @tsIsCommission_12 = @xIsCommission
				end
				else if (@tsKey_13 is null)
				begin
					set @tsKey_13 = @scpId
					set @tsSVKey_13 = @xSVKey
					set @tsGross_13 = @xBrutto
					set @tsAddIsCommission_13 = @xAddCostIsCommission
					set @tsAddNoCommission_13 = @xAddCostNoCommission
					set @tsMarginPercent_13 = @xMargin
					set @tsCommissionOnly_13 = @xCommissionOnly
					set @tsIsCommission_13 = @xIsCommission
				end
				else if (@tsKey_14 is null)
				begin
					set @tsKey_14 = @scpId
					set @tsSVKey_14 = @xSVKey
					set @tsGross_14 = @xBrutto
					set @tsAddIsCommission_14 = @xAddCostIsCommission
					set @tsAddNoCommission_14 = @xAddCostNoCommission
					set @tsMarginPercent_14 = @xMargin
					set @tsCommissionOnly_14 = @xCommissionOnly
					set @tsIsCommission_14 = @xIsCommission
				end
				else if (@tsKey_15 is null)
				begin
					set @tsKey_15 = @scpId
					set @tsSVKey_15 = @xSVKey
					set @tsGross_15 = @xBrutto
					set @tsAddIsCommission_15 = @xAddCostIsCommission
					set @tsAddNoCommission_15 = @xAddCostNoCommission
					set @tsMarginPercent_15 = @xMargin
					set @tsCommissionOnly_15 = @xCommissionOnly
					set @tsIsCommission_15 = @xIsCommission
				end
			end

			-- ���������� �������� �������� ����, ��� ������� �� ��������� ����
			set @prevTPKey = @xTPKey
			set @prevToKey = @xToKey
			set @prevTiKey = @xTiKey
			set @prevTRKey = @xTRKey
			set @prevDays = @xDays
			set @prevTourDate = @xTourDate
			set @prevRate = @xRate
			set @prevHotelKey = @xHotelKey
			set @prevDepartureKey = @xDepartureKey

			fetch exportServiceCursor into @xTPKey, @xToKey, @xTiKey, @xTRKey, @xTourDate, @xDays, @xRate,
			@xHotelKey, @xDepartureKey, @xSVKey, @xCode, @xSubCode1, @xSubCode2, @xPRKey, @xDate,
			@xMen, @xServiceDays, @xPkKey, @xNetto, @xBrutto, @xIsCommission, @xMargin, @xCommissionOnly,
			@xAddCostIsCommission, @xAddCostNoCommission, @xServiceOrder
		end
		close exportServiceCursor
		deallocate exportServiceCursor

		print '������ �������'
		print CONVERT(TIME, GETDATE())

		-- ��������� ������������ ������� TP_PriceComponents
		--select * from #TP_Prices

		-- �������� ���������
		insert into TP_PriceComponents (PC_TIKey, PC_TOKey, PC_TRKey, PC_TourDate, PC_TPKey, PC_Days, PC_Rate, PC_HotelKey, PC_DepartureKey
		, SCPId_1, SCPId_2, SCPId_3, SCPId_4, SCPId_5, SCPId_6, SCPId_7, SCPId_8, SCPId_9, SCPId_10, SCPId_11, SCPId_12, SCPId_13, SCPId_14, SCPId_15
		, SVKey_1, SVKey_2, SVKey_3, SVKey_4, SVKey_5, SVKey_6, SVKey_7, SVKey_8, SVKey_9, SVKey_10, SVKey_11, SVKey_12, SVKey_13, SVKey_14, SVKey_15
		, Gross_1, Gross_2, Gross_3, Gross_4, Gross_5, Gross_6, Gross_7, Gross_8, Gross_9, Gross_10, Gross_11, Gross_12, Gross_13, Gross_14, Gross_15
		, AddCostIsCommission_1, AddCostIsCommission_2, AddCostIsCommission_3, AddCostIsCommission_4, AddCostIsCommission_5, AddCostIsCommission_6, AddCostIsCommission_7, AddCostIsCommission_8, AddCostIsCommission_9, AddCostIsCommission_10, AddCostIsCommission_11, AddCostIsCommission_12, AddCostIsCommission_13, AddCostIsCommission_14, AddCostIsCommission_15
		, AddCostNoCommission_1, AddCostNoCommission_2, AddCostNoCommission_3, AddCostNoCommission_4, AddCostNoCommission_5, AddCostNoCommission_6, AddCostNoCommission_7, AddCostNoCommission_8, AddCostNoCommission_9, AddCostNoCommission_10, AddCostNoCommission_11, AddCostNoCommission_12, AddCostNoCommission_13, AddCostNoCommission_14, AddCostNoCommission_15
		, MarginPercent_1, MarginPercent_2, MarginPercent_3, MarginPercent_4, MarginPercent_5, MarginPercent_6, MarginPercent_7, MarginPercent_8, MarginPercent_9, MarginPercent_10, MarginPercent_11, MarginPercent_12, MarginPercent_13, MarginPercent_14, MarginPercent_15
		, CommissionOnly_1, CommissionOnly_2, CommissionOnly_3, CommissionOnly_4, CommissionOnly_5, CommissionOnly_6, CommissionOnly_7, CommissionOnly_8, CommissionOnly_9, CommissionOnly_10, CommissionOnly_11, CommissionOnly_12, CommissionOnly_13, CommissionOnly_14, CommissionOnly_15
		, IsCommission_1, IsCommission_2, IsCommission_3, IsCommission_4, IsCommission_5, IsCommission_6, IsCommission_7, IsCommission_8, IsCommission_9, IsCommission_10, IsCommission_11, IsCommission_12, IsCommission_13, IsCommission_14, IsCommission_15)
		select xTP_TIKey, xtp_tokey, xtp_trkey, xTP_TourDate, xtp_key, xTP_Days, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
		, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
		, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
		, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
		, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
		, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
		, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
		, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
		, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15
		from #TP_Prices

		print '������� ����������'
		print CONVERT(TIME, GETDATE())
END
GO

GRANT EXECUTE ON [dbo].[ExportToDCTables]	TO PUBLIC
GO
/*********************************************************************/
/* end sp_ExportToDCTables.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ExportToDCTables.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetCalendarTourDates.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetCalendarTourDates.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetCalendarTourDates]') AND type in (N'P', N'PC'))
BEGIN
	DROP PROCEDURE [dbo].[GetCalendarTourDates]
END
GO

--<VERSION>9.2.20.12</VERSION>
--<DATE>2014-04-09</DATE>
CREATE PROCEDURE [dbo].[GetCalendarTourDates]
	@departFromKeys VARCHAR(200),
	@countryKeys VARCHAR(200),
	@tourKeys VARCHAR(200) = null,
	@resortKeys VARCHAR(200) = null,
	@tourTypeKeys VARCHAR(200) = null,
	@cityKeys VARCHAR(200) = null
AS
BEGIN
	SET DATEFIRST 1
	
	DECLARE @mwSearchType INT
	SELECT @mwSearchType = LTRIM(RTRIM(ISNULL(SS_ParmValue, ''))) FROM dbo.SystemSettings 
		WHERE SS_ParmName = 'MWDivideByCountry'
	
	DECLARE @tableName NVARCHAR(100)
	IF (@mwSearchType = 0)
	BEGIN
		SET @tableName = 'dbo.mwPriceDataTable'
	END
	ELSE
	BEGIN
		SET @tableName = dbo.mwGetPriceTableName(@countryKeys, @departFromKeys)
	END

	DECLARE @exceptNoPlacesAviaQuota INT
	SELECT @exceptNoPlacesAviaQuota = LTRIM(RTRIM(ISNULL(SS_ParmValue, ''))) FROM dbo.SystemSettings
		WHERE SS_ParmName = 'ExceptTourDatesWithNoAQ'

	-- Исключение дат, на которые заведены квоты на перелет, но мест в квоте нет
	DECLARE @quotaNeedFromPart NVARCHAR(2000)
	DECLARE @quotaNeedWherePart NVARCHAR(100)
	if (@exceptNoPlacesAviaQuota = 1)
	BEGIN
		SET @quotaNeedFromPart =
			' LEFT JOIN
			 (
				SELECT DISTINCT TD_Date
				FROM TP_TurDates
					INNER JOIN QuotaDetails ON QD_Date = TD_Date
					INNER JOIN Quotas ON QD_QTID = QT_ID
					INNER JOIN QuotaObjects ON QT_ID = QO_QTID AND QO_SVKey = 1
					INNER JOIN Charter ON QO_Code = CH_KEY
					LEFT JOIN StopSales as s1 ON s1.SS_QDID = QD_ID
					LEFT JOIN StopSales as s2 ON s2.SS_QOID = QO_ID
				WHERE QO_CNKey IN (' + @countryKeys + ') AND CH_CITYKEYFROM IN (' + @departFromKeys + ') AND
					((QD_Places - QD_Busy) = 0
					OR (s1.SS_ID IS NOT NULL AND ISNULL(s1.SS_IsDeleted, 0) <> 1)
					OR (s2.SS_ID IS NOT NULL AND ISNULL(s2.SS_IsDeleted, 0) <> 1))
				) AS t ON t.TD_Date = TP_TurDates.TD_Date '

		SET @quotaNeedWherePart = ' AND t.TD_Date IS NULL '
	END
	ELSE
	BEGIN
		SET @quotaNeedFromPart = ''
		SET @quotaNeedWherePart = ''
	END

	DECLARE @tempTableIfNeed NVARCHAR(100)
	IF (@tourKeys IS NOT NULL)
		SET @tempTableIfNeed = 'INTO #CalendarTourDates'
	ELSE
		SET @tempTableIfNeed = ''

	DECLARE @sql NVARCHAR(MAX)
	SET @sql = 'SELECT DISTINCT DATEDIFF(ss, ''1970-01-01'', TP_TurDates.TD_Date) AS [key],
					CONVERT(varchar, TP_TurDates.TD_Date, 4) AS name,
					TP_TurDates.TD_Date ' + @tempTableIfNeed + '
				FROM TP_TurDates 
					INNER JOIN mwSpoData with(nolock) ON TP_TurDates.TD_TOKey = mwSpoData.sd_tourkey ' +
				@quotaNeedFromPart + 
				'WHERE TP_TurDates.TD_Date > DATEADD(day, - 1, GETDATE())
					AND mwSpoData.sd_ctkeyfrom IN (' + @departFromKeys + ')
					AND mwSpoData.sd_cnkey IN (' + @countryKeys + ')' +
				@quotaNeedWherePart
             
	IF (@resortKeys IS NOT NULL)
	BEGIN
		SET @sql += ' AND mwSpoData.sd_rskey IN (' + @resortKeys + ')'
	END

	if (@tourTypeKeys IS NOT NULL)
	BEGIN
		SET @sql += ' AND mwSpoData.sd_tourtype IN (' + @tourTypeKeys + ')'
	END

	if (@cityKeys IS NOT NULL)
	BEGIN
		SET @sql += ' AND mwSpoData.sd_ctkey IN (' + @cityKeys + ')'
	END
    
	IF (@tourKeys IS NOT NULL)
	BEGIN
		SET @sql += ' AND mwSpoData.sd_tourkey IN (' + @tourKeys + ') 
		SELECT * FROM #CalendarTourDates 
		WHERE exists(SELECT TOP 1 1 FROM ' + @tableName + ' WHERE pt_tourkey IN (' + @tourKeys + ') AND pt_tourdate = TD_Date) 
		ORDER BY TD_Date'
	END
	ELSE
	BEGIN
    SET @sql += ' ORDER BY TP_TurDates.TD_Date '
	END

    EXEC sp_executesql @sql
END

GO

grant exec on [dbo].[GetCalendarTourDates] to public
GO
/*********************************************************************/
/* end sp_GetCalendarTourDates.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetCalendarTourDates.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNKey.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetNKey.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetNKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[GetNKey]
GO
CREATE PROCEDURE [dbo].[GetNKey]
  (
	  @sTable varchar(50) = null,
	  @nNewKey int = null output
  )
AS
	--<VERSION>9.2.20.4</VERSION>
	--<DATE>2013-12-10</DATE>
	--<SUMMARY>Возвращает ключ для таблицы</SUMMARY>
	exec GetNKeys @sTable, 1, @nNewKey out	
GO
GRANT EXECUTE ON [dbo].[GetNKey] TO Public
GO
/*********************************************************************/
/* end sp_GetNKey.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetNKey.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPricePage_Rename.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetPricePage_Rename.sql */
/*********************************************************************/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[sp_GetPricePage]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[sp_GetPricePage]
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetPricePage]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetPricePage]
GO

CREATE PROCEDURE [dbo].[GetPricePage]
(
--<VERSION>2009.2.18</VERSION>
--<DATE>2013-02-04</DATE>
     @TurKey   int,
     @MinID     bigint,
     @SizePage     int
)
AS

DECLARE @TP_PRICES TABLE(xTP_Key [bigint] NOT NULL PRIMARY KEY CLUSTERED, xTP_TIKEY [int])

--tkachuk 11195
--если приходит минимальный ключ = -1, возвращаем все цены без фильтрации по ключу
if @MinID != -1
begin
	insert into @TP_PRICES(xTP_Key,xTP_TIKEY)
	SELECT  TOP (@SizePage) TP_KEY, TP_TIKEY
	FROM TP_PRICES WITH(NOLOCK)
	WHERE  TP_TOKEY = @TurKey
	and TP_KEY > @MinID
	ORDER BY TP_KEY

end

else

begin
	insert into @TP_PRICES(xTP_Key,xTP_TIKEY)
	SELECT  TOP (@SizePage) TP_KEY, TP_TIKEY
	FROM TP_PRICES WITH(NOLOCK)
	WHERE  TP_TOKEY = @TurKey
	ORDER BY TP_KEY

end



--get output results

select * from TP_PRICES WITH(NOLOCK)

WHERE TP_Key IN (SELECT xTP_Key FROM @TP_PRICES)

order by TP_KEY



-- Получаем все ServiceSet (варианты набора услуг).

SELECT DISTINCT xTP_TIKEY AS 'TP_TIKey' FROM @TP_PRICES



--Console.WriteLine("||  Получаем все связи услуг");

SELECT * FROM TP_SERVICELISTS WITH(NOLOCK)

WHERE TL_TIKEY in (SELECT DISTINCT xTP_TIKEY FROM @TP_PRICES)

ORDER BY TL_TIKEY

GO
GRANT EXECUTE ON [dbo].[GetPricePage] TO Public
GO

/*********************************************************************/
/* end sp_GetPricePage_Rename.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPricePage_Rename.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPricePage_VP_Rename.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetPricePage_VP_Rename.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[sp_GetPricePage_VP]') AND xtype in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPricePage_VP]
GO

IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[GetPricePage_VP]') AND xtype in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetPricePage_VP]
GO


--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-24</DATE>

-- Версия sp_GetPricePage для динамического ценообразования
CREATE PROCEDURE [dbo].[GetPricePage_VP]
     @TourKey		int,			-- ключ тура (из таблицы TP_Tours)
     @calcKeyFrom	bigint,			-- начальный ключ calculatingKey
     @calcKeyTo		bigint			-- конечный ключ calculatingKey
AS

create table #TP_PRICES
	(
		xTP_Key [bigint] NOT NULL PRIMARY KEY CLUSTERED, 
		xTP_TIKEY [int]
	)

INSERT INTO #TP_PRICES(xTP_Key,xTP_TIKEY) 
SELECT TP_KEY, TP_TIKEY  
FROM TP_PRICES WITH(NOLOCK)
WHERE  TP_TOKEY = @TourKey 
   and TP_CalculatingKey between @calcKeyFrom and @calcKeyTo
ORDER BY TP_KEY
option(maxdop 10);

--get output results
SELECT * 
FROM TP_PRICES WITH(NOLOCK) 
WHERE TP_Key IN (SELECT xTP_Key FROM #TP_PRICES)
ORDER BY TP_KEY
option(maxdop 10);

-- Получаем все ServiceSet (варианты набора услуг).
SELECT DISTINCT xTP_TIKEY AS 'TP_TIKey' FROM #TP_PRICES
option(maxdop 10);

--Console.WriteLine("||  Получаем все связи услуг");
SELECT * FROM TP_SERVICELISTS WITH(NOLOCK)
WHERE TL_TIKEY in (SELECT DISTINCT xTP_TIKEY FROM #TP_PRICES)
ORDER BY TL_TIKEY
option(maxdop 10);

-- Получаем список удаленных цен
SELECT DISTINCT TPD_TPKey, TPD_TOKey, TPD_DateBegin, TPD_DateBegin, TPD_Gross, TPD_TIKey FROM TP_PricesDeleted WITH(NOLOCK)
WHERE TPD_TOKey = @TourKey
	and TPD_CalculatingKey between @calcKeyFrom and @calcKeyTo
option(maxdop 10);

GO

GRANT EXECUTE ON [dbo].[GetPricePage_VP] TO Public
GO
/*********************************************************************/
/* end sp_GetPricePage_VP_Rename.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetPricePage_VP_Rename.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetServiceCost.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetServiceCost.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[GetServiceCost]
GO

--<DATE>2013-07-10</DATE>
--<VERSION>9.2.20.3</VERSION>
CREATE PROCEDURE [dbo].[GetServiceCost] 
	(
		--.18 gorshkov 12.03.2012 - для динамического ценообразования @CS_Profit заполняется нулями
		--.17 mv 06.02.2012 (MEG00040397) обработка продолжительности а/п
		--.15 mv 27.01.2012: Изменил обвязку рядом вокруг sp "GetServiceAddCosts"
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,6), @margin decimal(14,6) = 0, @marginType int =0,
		@sellDate dateTime, @netto decimal(14,6) output, @brutto decimal(14,6) output, @discount decimal(14,6) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output,
		@tourKey int = 0, @tourDate datetime, @tourDays int, @includeAddCost bit = 1, @isCommission bit = NULL output
	)
as
SET DATEFIRST 1
DECLARE @tourlong int

DECLARE @LONG_MAX int
SET @LONG_MAX = 99

declare @newReCalculatePrice bit
set @newReCalculatePrice = 0
if exists(select top 1 1 from SystemSettings with(nolock) where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1)
begin
	set @newReCalculatePrice = 1
end

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)) or (@svKey = 1 and isnull(@tourDays,0) > 0))
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,6), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates with(nolock) where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings with(nolock) where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices with(nolock) where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices with(nolock)
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,6)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,6), @CS_Cost decimal(14,6)
DECLARE @CS_Discount decimal(14,6), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,6), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (18,8), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint
DECLARE @serviceEndDate datetime

set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,6)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings with(nolock) where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs with(nolock)
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END
	
		
	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
	--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО
		
		if @UseTypeDivisionMode > 0
			declare costCursor cursor local fast_forward for
			select 
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CS_COST,
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
			ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
				from tbl_costs with(nolock)           
				WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					    CS_PrKey = @prKey and CS_PkKey = @packetKey
					--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
						and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
					    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
		            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
						and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
			    ORDER BY
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC, CS_ID desc
		else if (@newReCalculatePrice = 1)
			declare costCursor cursor local fast_forward for
			select 
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CS_COST,
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, 0 /* т.к. профиты конвертнулись в AddCosts */, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
			ISNULL(CO_SaleDateBeg, '1900-01-01'), ISNULL(CO_SaleDateEnd, '2072-01-01')
				from tbl_costs with(nolock) join CostOffers with(nolock) on CS_COID = CO_Id
				join Seasons with(nolock) on CO_SeasonId = SN_Id
				WHERE	isnull(SN_IsActive, 0) = 1
						-- проверим активность костофера на нужную нам дату продажи
						and ((@sellDate is null and CO_State = 1) 
							or (CO_State in (1,2) and @sellDate is not null and @sellDate between isnull(CO_DateActive, '1900-01-01') and isnull(CO_DateClose, '2072-01-01')))
						-- проверим период продажи ценового блока
						and isnull(@sellDate, getdate()) between isnull(CO_SaleDateBeg, '1900-01-01') and isnull(CO_SaleDateEnd, '2072-01-01')
						and CS_SVKey = @svKey
						and CS_Code = @code
						and CS_SubCode1 = @code1
						and CS_SubCode2 = @code2
						and CS_PrKey = @prKey
						and CS_PkKey = @packetKey
						and @date between isnull(CS_CheckInDateBEG, '1900-01-01') and isnull(CS_CheckInDateEnd, '2072-01-01')
						-- либо дата начала услуги лежит между началом и концом цены,
						-- либо дата начала цены лежит между датой начала и концом услуги
						and (CS_DATE is null 
								or @date between CS_DATE and CS_DATEEND
								or CS_DATE between @date and dateadd(dd, isnull(@days,0), @date))
				ORDER BY
						-- если не задана дата продажи то смотрим по текущему полю последней даты активации
						-- иначе смотрим по истории активации
						isnull(CO_DateActive,'1900-01-01') desc,
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC, CS_ID desc
		else
			declare costCursor cursor local fast_forward for
			select
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CS_COST,
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND,
			ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
				from tbl_costs with(nolock)
				WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and
					    CS_PrKey = @prKey and CS_PkKey = @packetKey
						and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null))
					    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
			    ORDER BY
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc,
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC, CS_ID desc

	Set @sellDate = ISNULL(@sellDate,GetDate())
	open costCursor
	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
		BEGIN
			If @@fetch_status = 0
			BEGIN

				declare @TMPTable Table 
 				( CL_Date datetime,
				CL_CostNetto decimal(14,6),
				CL_Cost decimal(14,6),
				CL_Discount smallint,
				CL_Type smallint,
				CL_Rate varchar(2),
				CL_Course decimal(14,6),
				CL_Pax smallint default 1,
				CL_ByDay smallint,
				CL_Part smallint,
				CL_Profit decimal(14,6))

				DECLARE @temp_date DATETIME
				SET @temp_date = @date + @days - 1

				while @temp_date >= @date 
				BEGIN -- begin while @temp_date >= @date 
					insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
					set @temp_date = @temp_date - 1 
				END  -- end while @temp_date >= @date 
			END
			Else
			BEGIN
				close costCursor
				deallocate costCursor
				return 0
			END

			set @COST_ID = 1 --идетификатор уникальности цены
			If @CS_ByDay = 2
				Set @nCostByDayExists = 1

			If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
				insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
		END

		set @NotCalculatedCosts = 1
		set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

	While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
	BEGIN -- While (@@fetch_status = 0)
		-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
		Set @IsFetchNormal = 1
			-- если не указаны даты периодов, то значит указаны даты заедов
			-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

		If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
			if CHARINDEX ( @WeekDate, @CS_Week ) = 0
				Set @IsFetchNormal = 0
			Else
				Set @CS_Week = ''

		If @tourlong > 0 and @svKey = 1
		Begin		
			If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
				Set @IsFetchNormal = @IsFetchNormal
			else
				Set @IsFetchNormal = 0
		end     

		If @svKey != 1
		begin
			If @CS_LongMin is not null and @CS_LongMin > @days
				Set @IsFetchNormal = 0
		end

		-- Если время не задано, то увеличиваем период продажи на один день. Иначе, смотрим точный период.
		If DATEPART(hour, @CS_DateSellEnd)+DATEPART(minute, @CS_DateSellEnd) = 0
			Set @CS_DateSellEnd = @CS_DateSellEnd + 1
		-- При переходе с 5.2 возможны цены с периодом продаж оганиченном только с одной стороны.
		If (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
			Set @IsFetchNormal = @IsFetchNormal 
		else
			Set @IsFetchNormal = 0
			
		if (@svKey = 3 or @svKey = 8)
			set @serviceEndDate = @date + @days - 1
		else
			set @serviceEndDate = @date + @days

		If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = @serviceEndDate -- смотрим может есть цена за период точно совпадает с периодом действия услуги
			Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
				CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

	--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
	--		Set @IsFetchNormal = 0
		If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
		BEGIN
			If CHARINDEX ( @WeekDate, @CS_Week ) > 0
				Set @IsFetchNormal = @IsFetchNormal 
			Else
				Set @IsFetchNormal = 0
		END

		If @Days = 1 and @CS_Date > @date
			Set @IsFetchNormal = 0

		If @Days = 1 and @CS_ByDay in (3,4)
			Set @IsFetchNormal = 0

	--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
	--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
	/*
		If 	@CS_CheckInDateBEG is not null
		BEGIN
			Set @CS_Date = null
			Set @CS_DateEnd = null
		END
	*/
			If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
			BEGIN			--цены подходят для поиска
				Set @CS_Date = (isnull(@CS_Date,@date))
				Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,@LONG_MAX))

				If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
				BEGIN
					update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
					if not exists (select * from @TMPTable where CL_Date = @date + @days)
						insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
					Set @nCostByDayExists = 1	
				END

				if @CS_Date < @date
					Set @CS_Date = @date
				if @CS_DateEnd > @date + @days
					Set @CS_DateEnd = @date + @days
				Set @CS_Discount = ISNULL(@CS_Discount,0)
				Set @TMP_Number_Period = null

				if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
				BEGIN -- if @CS_ByDay = 3
					if (@CS_DateEnd - @CS_Date + 1) >= 7 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null)
					BEGIN
						select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
						while @TMP_Number >= 7
						BEGIN
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
								CL_Pax = 1, CL_Profit = @CS_Profit
								WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
		
							UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
							SET @TMP_Number = @TMP_Number - 7
							SET @TMP_Date = @TMP_Date + 7
							SET @COST_ID = @COST_ID + 1
						END
					END
				END	-- if @CS_ByDay = 3

		--		print 'поиск'
				if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
				BEGIN -- if @CS_ByDay = 0
		--			print 'период'
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
						Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

					if @CS_Date < @TMP_Date and @date < @TMP_Date
					BEGIN
						select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
				--		print @TMP_Number_Period
						if @TMP_Number_Period is not null
						BEGIN					
							select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
							if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
							BEGIN
								select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
									Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
							END
						END
						Set @TMP_Number_Period = null
					END

					if @CS_Long is null or @CS_Long > @TMP_Number
					BEGIN
						--если предыдущий период захватывается полностью, то его надо включить
						--это делается только в случае, если цену указана за период
				--		print @TMP_Date + @TMP_Number
						select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
			--			print @TMP_Number_Period
						if @TMP_Number_Period is not null
						BEGIN 
							select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
		--					print @TMP_Date_Period
							if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
								Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
						END
					END

					--mv 06.02.2012 (MEG00040397) Сделал проверку только НЕ для а/п
					If @svKey != 1
					begin
						if @CS_Long is not null and @CS_Long < @TMP_Number
							set @TMP_Number = @CS_Long
					end

					--mv 06.02.2012 (MEG00040397) отдельная проверка на продолжительность а/п
					if @CS_LongMin is null or @CS_LongMin <= @TMP_Number 
						or (@svKey=1 and (@CS_LongMin is null or @tourDays >= @CS_LongMin) and (@CS_Long is null or @tourDays <= @CS_Long))
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @COST_ID = @COST_ID + 1
					END
				END	-- if @CS_ByDay = 0
		
				if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
				BEGIN -- if @CS_ByDay = 1/2
					if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
						Set @CS_DateEnd = @date + @CS_Long - 1
					if 1=1 -- временная заглушка, 
					BEGIN  -- если Цена удовлетворяет условиям
						SET @DayOfWeeks = @CS_Week
						While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
						BEGIN
							select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
							update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
								CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
								Where CL_Part = @TMP_Number
						END				

						IF @DayOfWeeks = ''
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,@LONG_MAX)
								WHERE CL_DATE between @CS_Date and @CS_DateEnd 
								and (CL_ByDay in (-1,4) or (@CS_CheckInDateBEG is not null and CL_ByDay in (-1,1,2,4) and exists(select 1 from @TMPTable where CL_ByDay in (-1,4) and CL_Date = @date)) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,@LONG_MAX)))
						ELSE
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,@LONG_MAX)
								WHERE CL_DATE between @CS_Date and @CS_DateEnd 
								and (CL_ByDay in (-1,4) or (@CS_CheckInDateBEG is not null and CL_ByDay in (-1,1,2,4) and exists(select 1 from @TMPTable where CL_ByDay in (-1,4) and CL_Date = @date)) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,@LONG_MAX))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

						SET @COST_ID = @COST_ID + 1
					END   -- если Цена удовлетворяет условиям
				END	-- if @CS_ByDay = 1

				if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
				BEGIN -- if @CS_ByDay = 4
					if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
						Set @CS_DateEnd = @date + @CS_Long - 1

					SET @DayOfWeeks = ''
					Set @CS_Week = REPLACE(@CS_Week,'.','');

					if @CS_Week != ''
					BEGIN			
						Set @TMP_Number = 1
						Set @DayOfWeeks = LEFT(@CS_Week,1)
						while @TMP_Number < LEN(@CS_Week)
						BEGIN
							Set @TMP_Number = @TMP_Number + 1
							Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
						END
					END
					
					-- доп.ночи могут только добивать в конец, первый день точно не к ним
					If @CS_Date = @date
						Set @CS_Date = @CS_Date + 1

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd /*and (CL_ByDay = -1)*/
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd /*and (CL_ByDay = -1)*/ AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
					SET @COST_ID = @COST_ID + 1
				END	-- if @CS_ByDay = 4
				select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
			END -- цены подходят для поиска и есть продолжительность
			ELSE
				If @IsFetchNormal = 1
					Set @NotCalculatedCosts = 0

		-- мы уже нашли цену на период, это 11-я версия
		-- да, может быть у нас остались более приоритетные цены на период, но в 11-ой версии это маловериятно
		-- для более ранних версий поведение не меняется
		If @NotCalculatedCosts = 0 and @CS_ByDay = 0 and @newReCalculatePrice = 1
			Set @FindCostByPeriod = 0
		else If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
		BEGIN
			fetch next from costCursor 
				into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
						@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
						@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

			If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1 and (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
				Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
			Else
				Set @FindCostByPeriod = 0
		END
	END -- While (@@fetch_status = 0)
	close costCursor
	deallocate costCursor


if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount),
				@isCommission = MAX(CL_Discount)
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @isCommission = @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

/*Посчитаем доплату*/
if (@includeAddCost = 1 and @newReCalculatePrice = 1)
begin
	declare @addCostValueIsCommission money, @addCostValueNoCommission money, @addCostFromAdult money, @addCostFromChild money, @addCostRate nvarchar(2)
	--print @tourKey
	exec GetServiceAddCosts @tourKey, @svKey, @code, @code1, @code2, @prKey, @tourDate, @tourDays, @days, @men, @sellDate, null, @addCostValueIsCommission output, @addCostValueNoCommission output, @addCostFromAdult output, @addCostFromChild output, @addCostRate output
	/*
	print @addCostValueIsCommission
	print @addCostValueNoCommission
	*/
	--конвертируем доплаты в валюту расчета из валюты тура (в которой они задавались)
	If @addCostValueIsCommission is not null
		exec ExchangeCost @addCostValueIsCommission output, @addCostRate, @resRate, @date
	If @addCostValueNoCommission is not null
		exec ExchangeCost @addCostValueNoCommission output, @addCostRate, @resRate, @date
	
	if @addCostValueIsCommission is not null
		set @sum_with_commission = isnull(@sum_with_commission,0) + isnull(@addCostValueIsCommission, 0)
	set @brutto = @brutto + isnull(@addCostValueIsCommission, 0) + isnull(@addCostValueNoCommission, 0)
end

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

if (@newReCalculatePrice = 0)
begin
	DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
	DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

	If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
	BEGIN
		set @nettoDetail = '='
		set @sDetailed = '='
		while exists (select * from @TMPTable where CL_Course != 0)
		begin
			SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
							@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
			from			@TMPTable 
			where			CL_Course != 0	 
			Order By		CL_Date

			Set @TMP_Number = 0
			Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
			UPDATE @TMPTable SET CL_Course = 0 WHERE ISNULL(CL_Part, 0) = ISNULL(@TMP_Number_Part, 0)
			if @nettoDetail != '='
				Set @nettoDetail = @nettoDetail + ' +'
			if @sDetailed != '='
				Set @sDetailed = @sDetailed + ' +'

			Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
			Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

			if @TMP_Number != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
			end

			if @TMP_Number_Pax != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
			end

			if @TMP_Number_Course != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			end
		end

		If ISNULL(@profitValue,0) > 0
			Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

		if @marginCalcValue > 0
			Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

		If ISNULL(@discount,0) > 0
			Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
	END
end
GO

grant exec on [dbo].[GetServiceCost] to public
go
/*********************************************************************/
/* end sp_GetServiceCost.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetServiceCost.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetTourMargin.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_GetTourMargin.sql */
/*********************************************************************/
DROP PROCEDURE [dbo].[GetTourMargin]
GO
CREATE PROCEDURE [dbo].[GetTourMargin] 
	(	
		@TrKey int,
		@Date datetime,
		@margin float output,
		@marginType int output,
		@svKey int,
		@days int,
		@sellDate DateTime = null,
		@packetKey int
	)
as
	--<DATE>2013-12-16</DATE>
	--<VERSION>9.2.20.3</VERSION>
	SET DATEFIRST 1

	if @sellDate is null
		Set @sellDate = GetDate()

	set @margin = 0
	set @marginType = 0

	declare @nFromPacket int
	declare @dtSale DateTime
	Set @nFromPacket = 0
		
	SELECT TOP 1	@margin = TM_Margin, @marginType = TM_MarginType, @nFromPacket = TM_FromPacket, 
					@dtSale = ISNULL(TM_DateSellEnd,ISNULL(DATEADD(YEAR,10,TM_DateSellBeg),DATEADD(YEAR,15,GetDate())))
	FROM
		dbo.TurMargin
	WHERE
		TM_TlKey = @TrKey 
		and @Date Between TM_DateBeg and TM_DateEnd
		and TM_DeleteDate is null
		and (TM_SVKEY = @svKey or TM_SVKEY = 0)
		and (@sellDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
		and (@sellDate <= (TM_DateSellEnd + 1) or TM_DateSellEnd is null)
		and ((TM_Week like '%' + cast(datepart(weekday, @Date)as varchar(1)) + '%') or TM_Week like '.......' or TM_Week like '')
		and (TM_LONG = @days - 1 or TM_LONG = 0)
	ORDER BY TM_SVKEY DESC, TM_DateBeg DESC, TM_DateEnd, TM_LONG DESC

	if @nFromPacket = 1 AND @packetKey>0
	begin 
		set @margin = 0
		set @marginType = 0
		SELECT TOP 1	@margin = TM_Margin, @marginType = TM_MarginType, @nFromPacket = TM_FromPacket, 
						@dtSale = ISNULL(TM_DateSellEnd,ISNULL(DATEADD(YEAR,10,TM_DateSellBeg),DATEADD(YEAR,15,GetDate())))
		FROM
			dbo.TurMargin
		WHERE
			TM_TlKey = @packetKey
			and @Date Between TM_DateBeg and TM_DateEnd
			and TM_DeleteDate is null
			and (TM_SVKEY = @svKey or TM_SVKEY = 0)
			and (@sellDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@sellDate <= (TM_DateSellEnd + 1) or TM_DateSellEnd is null)
			and ((TM_Week like '%' + cast(datepart(weekday, @Date)as varchar(1)) + '%') or TM_Week like '.......' or TM_Week like '')
			and (TM_LONG <= @days - 1 or TM_LONG = 0)
			and TM_FromPacket = 0
		ORDER BY	TM_SVKEY DESC,  TM_DateBeg DESC, TM_DateEnd, TM_LONG DESC
	end

	if @margin is null
		Set @margin = 0
	If @marginType is null
		set @marginType = 0
	Return 0
GO

grant exec on [dbo].[GetTourMargin] to public
go
/*********************************************************************/
/* end sp_GetTourMargin.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_GetTourMargin.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ImportExchangeQuotaStops.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ImportExchangeQuotaStops]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[ImportExchangeQuotaStops]
GO

CREATE PROCEDURE [dbo].[ImportExchangeQuotaStops]
	(
		@dateBeg datetime,
		@dateEnd datetime,
		@HotelKey int,
		@prKey int
	)
AS
BEGIN	
	-- процедура импортирует информацию о квотах из тиблицы ExchangeQuotaStops
	--<version>2009.2.22</version>
	--<data>2014-03-24</data>

	SET NOCOUNT ON;
	
	declare @SvKey int, @Code int, @SubCode1 int, @SubCode2 int, @SubCode3 int, @Date datetime, @IsStop bit, @Places int, @PartnerKey int
	declare @qtKey int, @qoKey int, @qdKey int, @releaseConst int, @release int

	set @releaseConst = 365
	set @release = null
	
	declare ExchangeQuotaStops_cursor cursor local fast_forward for
	select EQS_SvKey, EQS_Code, EQS_SubCode1, EQS_SubCode2, EQS_SubCode3, EQS_Date, EQS_IsStop, EQS_Places, EQS_PartnerKey
	from ExchangeQuotaStops 
	where EQS_Date between @dateBeg and @dateEnd
		AND EQS_Code = @HotelKey
		and EQS_SvKey = 3
	order by EQS_Date, EQS_IsStop;

	open ExchangeQuotaStops_cursor;
	
	fetch next from ExchangeQuotaStops_cursor into @SvKey, @Code, @SubCode1, @SubCode2, @SubCode3, @Date, @IsStop, @Places, @PartnerKey;	
	while @@FETCH_STATUS = 0
	begin		
		-- пришли обычные квоты
		if (@IsStop = 0 and @Places >= 0)
		begin

			if (not exists (select 1
									from Quotas join QuotaObjects on QT_ID = QO_QTID
									where QT_PRKey = @PartnerKey
									and QO_SVKey = @SvKey
									and QO_Code = @Code
									and QO_SubCode1 = @SubCode1
									and QO_SubCode2 = @SubCode3))
			begin
				insert into Quotas (QT_PRKey, QT_ByRoom, QT_Comment)
				values (@PartnerKey, 1, 'Quotas from Interlook. Load: ' + convert(nvarchar(max), GETDATE(), 121))
				set @qtKey = SCOPE_IDENTITY()
					
				insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
				values (@qtKey, @SvKey, @Code, @SubCode1, @SubCode3)
				set @qoKey = SCOPE_IDENTITY()
			end
			else
			begin
				select @qtKey = QT_ID, @qoKey = QO_ID
				from Quotas join QuotaObjects on QT_ID = QO_QTID
				where QT_PRKey = @PartnerKey
				and QO_SVKey = @SvKey
				and QO_Code = @Code
				and QO_SubCode1 = @SubCode1
				and QO_SubCode2 = @SubCode3
			end

			if not exists (select 1 from QuotaDetails with(nolock) where QD_QTID = @qtKey and QD_Date = @Date and QD_Type = 1)
			begin
				insert into QuotaDetails(QD_QTID, QD_Date, QD_Type, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey, QD_Release)
				values (@qtKey, @Date, 1, @Places, 0, GETDATE(), [dbo].[GetUserId](), @release)
				set @qdKey = SCOPE_IDENTITY()
			end
			else
			begin
				select top(1) @qdKey = QD_ID
				from QuotaDetails with(nolock) 
				where QD_QTID = @qtKey 
				and QD_Date = @Date 
				and QD_Type = 1

				update QuotaDetails
				set QD_Places = @Places,
				QD_Busy = 0,
				QD_Release = @release,
				QD_IsDeleted = null
				where QD_ID = @qdKey
			end
				
			if not exists (select 1 from QuotaParts where QP_QDID = @qdKey and QP_Date = @Date and QP_IsNotCheckIn = 0 and QP_Durations = '')
			begin
				insert into QuotaParts(QP_QDID, QP_Date, QP_Places, QP_Busy, QP_Limit, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey)
				values (@qdKey, @Date, @Places, 0, 1, 0, '', GETDATE(), [dbo].[GetUserId]())
			end
			else
			begin
				declare @qpKey int

				select top(1) @qpKey = QP_ID
				from QuotaParts 
				where QP_QDID = @qdKey 
				and QP_Date = @Date 
				and QP_IsNotCheckIn = 0 
				and QP_Durations = ''

				update QuotaParts
				set QP_Places = @Places,
				QP_Busy = 0,
				QP_Limit = 1,
				QP_IsDeleted = null
				where QP_ID = @qpKey

			end
		end
		else if (@IsStop = 1)
		begin
			-- пришел новый стоп, добавляем его
			if (@Places >= 0)
			begin
				if not exists (	select 1
								from QuotaObjects
								where QO_SVKey = @SvKey
								and QO_Code = @Code
								and QO_SubCode1 = @SubCode1
								and QO_SubCode2 = @SubCode3
								and QO_QTID is null)
				begin
					insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
					values (null, @SvKey, @Code, @SubCode1, @SubCode3)
					set @qoKey = SCOPE_IDENTITY()
				end
				else
				begin
					select @qoKey = QO_ID
					from QuotaObjects
					where QO_SVKey = @SvKey
					and QO_Code = @Code
					and QO_SubCode1 = @SubCode1
					and QO_SubCode2 = @SubCode3
					and QO_QTID is null
				end
				
				insert into StopSales(SS_QOID, SS_QDID, SS_PRKey, SS_Date, SS_AllotmentAndCommitment, SS_Comment, SS_CreateDate, SS_CreatorKey)
				values (@qoKey, null, @PartnerKey, @Date, 0, 'Stops from Interlook. Load: ' + convert(nvarchar(max), GETDATE(), 121), GETDATE(), [dbo].[GetUserId]())
			end
			else
			begin
				-- стоп удален
				if exists (select 1 
						   from QuotaObjects 
						   join StopSales on SS_QOID = QO_ID 
						   where QO_SVKey = @SvKey
							   and QO_Code = @Code
							   and QO_SubCode1 = @SubCode1
							   and QO_SubCode2 = @SubCode3
							   and QO_QTID is null
							   and ISNULL(SS_IsDeleted, 0) = 0)
				begin
					update StopSales
					set SS_IsDeleted = 1
					from QuotaObjects
					where SS_QOID = QO_ID
						and QO_SVKey = @SvKey
						and QO_Code = @Code
						and QO_SubCode1 = @SubCode1
						and QO_SubCode2 = @SubCode3
						and QO_QTID is null
						and ISNULL(SS_IsDeleted, 0) = 0
						and SS_Date = @Date
				end
			end
		end		
	
		-- обновим информацию о городе и строне вставленной квоты
		update quotaobjects
		set qo_ctkey = (select hd_ctkey from HotelDictionary where hd_key = qo_code)
		where qo_svkey = 3
		and QO_ID = @qoKey
					
		update quotaobjects
		set qo_cnkey= (select ct_cnKey from citydictionary where ct_key=qo_ctkey) 
		where qo_cnkey is null 
		and qo_ctkey is not null
		and QO_ID = @qoKey

		fetch next from ExchangeQuotaStops_cursor into @SvKey, @Code, @SubCode1, @SubCode2, @SubCode3, @Date, @IsStop, @Places, @PartnerKey;		
	end
	
	close ExchangeQuotaStops_cursor;
	deallocate ExchangeQuotaStops_cursor;
END
GO

grant exec on [dbo].[ImportExchangeQuotaStops] to public
go
/*********************************************************************/
/* end sp_ImportExchangeQuotaStops.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops_Bulk.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ImportExchangeQuotaStops_Bulk.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ImportExchangeQuotaStops_Bulk]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[ImportExchangeQuotaStops_Bulk]
GO

CREATE PROCEDURE [dbo].[ImportExchangeQuotaStops_Bulk]
AS
BEGIN	
	-- процедура импортирует информацию о квотах из таблицы ExchangeQuotaStops
	--<version>2009.2.22</version>
	--<data>2014-03-24</data>

	SET NOCOUNT ON;
	
	declare @SvKey int, @Code int, @SubCode1 int, @SubCode2 int, @SubCode3 int, @Date datetime, @IsStop bit, @Places int, @PartnerKey int
	declare @qtKey int, @qoKey int, @qdKey int, @releaseConst int, @release int, @id int

	set @releaseConst = 365
	set @release = null
	
	declare ExchangeQuotaStops_cursor cursor local fast_forward for
	select EQS_ID, EQS_SvKey, EQS_Code, EQS_SubCode1, EQS_SubCode2, EQS_SubCode3, EQS_Date, EQS_IsStop, EQS_Places, EQS_PartnerKey
	from ExchangeQuotaStops 
	where EQS_IsProcessed = 0
	and EQS_SvKey = 3
	order by EQS_Date, EQS_IsStop;

	-- list of processed ExchangeQuotaStops keys
	create table #processedRecords
	(
		EQS_ID int
	)

	-- error during records processing flag
	declare @wasError as bit
	declare @errorMessage as nvarchar(max)
	set @wasError = 0

	begin try

		open ExchangeQuotaStops_cursor;
	
		fetch next from ExchangeQuotaStops_cursor into @id, @SvKey, @Code, @SubCode1, @SubCode2, @SubCode3, @Date, @IsStop, @Places, @PartnerKey;	
		while @@FETCH_STATUS = 0
		begin		
		
			-- пришли обычные квоты
			if (@IsStop = 0 and @Places >= 0)
			begin

				if (not exists (select 1
										from Quotas join QuotaObjects on QT_ID = QO_QTID
										where QT_PRKey = @PartnerKey
										and QO_SVKey = @SvKey
										and QO_Code = @Code
										and QO_SubCode1 = @SubCode1
										and QO_SubCode2 = @SubCode3))
				begin
					insert into Quotas (QT_PRKey, QT_ByRoom, QT_Comment)
					values (@PartnerKey, 1, 'Quotas from Interlook. Load: ' + convert(nvarchar(max), GETDATE(), 121))
					set @qtKey = SCOPE_IDENTITY()
					
					insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
					values (@qtKey, @SvKey, @Code, @SubCode1, @SubCode3)
					set @qoKey = SCOPE_IDENTITY()
				end
				else
				begin
					select @qtKey = QT_ID, @qoKey = QO_ID
					from Quotas join QuotaObjects on QT_ID = QO_QTID
					where QT_PRKey = @PartnerKey
					and QO_SVKey = @SvKey
					and QO_Code = @Code
					and QO_SubCode1 = @SubCode1
					and QO_SubCode2 = @SubCode3
				end

				if not exists (select 1 from QuotaDetails with(nolock) where QD_QTID = @qtKey and QD_Date = @Date and QD_Type = 1)
				begin
					insert into QuotaDetails(QD_QTID, QD_Date, QD_Type, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey, QD_Release)
					values (@qtKey, @Date, 1, @Places, 0, GETDATE(), [dbo].[GetUserId](), @release)
					set @qdKey = SCOPE_IDENTITY()
				end
				else
				begin
					select top(1) @qdKey = QD_ID
					from QuotaDetails with(nolock) 
					where QD_QTID = @qtKey 
					and QD_Date = @Date 
					and QD_Type = 1

					update QuotaDetails
					set QD_Places = @Places,
					QD_Busy = 0,
					QD_Release = @release,
					QD_IsDeleted = null
					where QD_ID = @qdKey
				end
				
				if not exists (select 1 from QuotaParts where QP_QDID = @qdKey and QP_Date = @Date and QP_IsNotCheckIn = 0 and QP_Durations = '')
				begin
					insert into QuotaParts(QP_QDID, QP_Date, QP_Places, QP_Busy, QP_Limit, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey)
					values (@qdKey, @Date, @Places, 0, 1, 0, '', GETDATE(), [dbo].[GetUserId]())
				end
				else
				begin
					declare @qpKey int

					select top(1) @qpKey = QP_ID
					from QuotaParts 
					where QP_QDID = @qdKey 
					and QP_Date = @Date 
					and QP_IsNotCheckIn = 0 
					and QP_Durations = ''

					update QuotaParts
					set QP_Places = @Places,
					QP_Busy = 0,
					QP_Limit = 1,
					QP_IsDeleted = null
					where QP_ID = @qpKey

				end
			end
			else if (@IsStop = 1)
			begin
				-- пришел новый стоп, добавляем его
				if (@Places >= 0)
				begin
					if not exists (	select 1
									from QuotaObjects
									where QO_SVKey = @SvKey
									and QO_Code = @Code
									and QO_SubCode1 = @SubCode1
									and QO_SubCode2 = @SubCode3
									and QO_QTID is null)
					begin
						insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
						values (null, @SvKey, @Code, @SubCode1, @SubCode3)
						set @qoKey = SCOPE_IDENTITY()
					end
					else
					begin
						select @qoKey = QO_ID
						from QuotaObjects
						where QO_SVKey = @SvKey
						and QO_Code = @Code
						and QO_SubCode1 = @SubCode1
						and QO_SubCode2 = @SubCode3
						and QO_QTID is null
					end
				
					insert into StopSales(SS_QOID, SS_QDID, SS_PRKey, SS_Date, SS_AllotmentAndCommitment, SS_Comment, SS_CreateDate, SS_CreatorKey)
					values (@qoKey, null, @PartnerKey, @Date, 0, 'Stops from Interlook. Load: ' + convert(nvarchar(max), GETDATE(), 121), GETDATE(), [dbo].[GetUserId]())
				end
				else
				begin
					-- стоп удален
					if exists (select 1 
							   from QuotaObjects 
							   join StopSales on SS_QOID = QO_ID 
							   where QO_SVKey = @SvKey
								   and QO_Code = @Code
								   and QO_SubCode1 = @SubCode1
								   and QO_SubCode2 = @SubCode3
								   and QO_QTID is null
								   and ISNULL(SS_IsDeleted, 0) = 0)
					begin
						update StopSales
						set SS_IsDeleted = 1
						from QuotaObjects
						where SS_QOID = QO_ID
							and QO_SVKey = @SvKey
							and QO_Code = @Code
							and QO_SubCode1 = @SubCode1
							and QO_SubCode2 = @SubCode3
							and QO_QTID is null
							and ISNULL(SS_IsDeleted, 0) = 0
							and SS_Date = @Date
					end
				end
			end	

			-- обновим информацию о городе и строне вставленной квоты
			update quotaobjects
			set qo_ctkey = (select hd_ctkey from HotelDictionary where hd_key = qo_code)
			where qo_svkey = 3
			and QO_ID = @qoKey
					
			update quotaobjects
			set qo_cnkey= (select ct_cnKey from citydictionary where ct_key=qo_ctkey) 
			where qo_cnkey is null 
			and qo_ctkey is not null
			and QO_ID = @qoKey

			-- mark record for update IsProcessed flag
			insert into #processedRecords (EQS_ID)
			values (@id)

			fetch next from ExchangeQuotaStops_cursor into @id, @SvKey, @Code, @SubCode1, @SubCode2, @SubCode3, @Date, @IsStop, @Places, @PartnerKey;		
		end
	
	end try
	begin catch
		set @wasError = 1
		set @errorMessage = error_message()
	end catch

	-- update IsProcessed flag in ExchangeQuotaStops table for processed records
	update ExchangeQuotaStops
	set EQS_IsProcessed = 1
	where EQS_ID in (select EQS_ID from #processedRecords)

	-- release resources
	close ExchangeQuotaStops_cursor;
	deallocate ExchangeQuotaStops_cursor;

	drop table #processedRecords

	-- rethrow error if needed
	if @wasError = 1
	begin
		RAISERROR(@errorMessage, 16, 1)
	end
END
GO

grant exec on [dbo].[ImportExchangeQuotaStops_Bulk] to public
go
/*********************************************************************/
/* end sp_ImportExchangeQuotaStops_Bulk.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops_Bulk.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops_Delete.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ImportExchangeQuotaStops_Delete.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ImportExchangeQuotaStops_Delete]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ImportExchangeQuotaStops_Delete]
GO

CREATE PROCEDURE [dbo].[ImportExchangeQuotaStops_Delete]
	(
		-- хранимка удаляет стопы и квоты которые пришли из интерука для удаления
		--<version>2009.2.20.2</version>
		--<data>2014-03-28</data>
		@SvKey int,
		@Code int,
		@SubCode1 int = null,
		@SubCode2 int = null,
		@Date datetime = null,
		@IsStop bit = null,
		@PartnerKey int
	)
AS
BEGIN	
	-- если это квота то снимаем с нее все услуги (если вдруг что то сидит, хотя не должно)
	if (@IsStop = 0 or @IsStop is null)
	begin
		-- пометим для удаления
		update QuotaDetails
		set QD_IsDeleted = 4 -- Request
		from QuotaDetails join Quotas on QT_ID = QD_QTID
		join QuotaObjects on QT_ID = QO_QTID
		where QO_Code = @Code
		and QO_SVKey = @SvKey
		and (@SubCode1 = -1 or @SubCode1 is null or QO_SubCode1 =@SubCode1)
		and (@SubCode2 = -1 or @SubCode2 is null or QO_SubCode2 =@SubCode2)
		and (QD_Date = @Date or @Date is null)
		and QT_PrKey = @PartnerKey
		
		-- удаляем записи из зависимых таблиц, чтобы не вызывалось DogListToQuotas, если только ключ партнера не равен 0
		if (@PartnerKey = 0)
		BEGIN
			exec QuotaDetailAfterDelete
		END
		ELSE
		BEGIN
			update QuotaParts 
			set QP_IsDeleted = 4 
			from QuotaParts 
			join QuotaDetails on QP_QDID = QD_ID 
			where QD_IsDeleted = 4

			DELETE FROM QuotaLimitations WHERE QL_QPID in (SELECT QP_ID FROM QuotaParts WHERE QP_IsDeleted = 4)				  
			DELETE QuotaParts where QP_IsDeleted = 4 
			DELETE FROM StopSales WHERE SS_QDID in (SELECT QD_ID FROM QuotaDetails with (nolock) WHERE QD_IsDeleted = 4) or SS_IsDeleted = 1
			DELETE FROM QuotaDetails WHERE QD_IsDeleted = 4
		END	
	end

	-- стопы бывают 2 видов 
	-- 1. На объект квотирования 
	delete StopSales
	from StopSales join QuotaObjects on SS_QOID = QO_ID
	where QO_Code = @Code
	and QO_SVKey = @SvKey
	and (@SubCode1 = -1 or @SubCode1 is null or QO_SubCode1 =@SubCode1)
	and (@SubCode2 = -1 or @SubCode2 is null or QO_SubCode2 =@SubCode2)
	and (SS_Date = @Date or @Date is null)
	and SS_QDID is null
	and QO_QTID is null
	and SS_PRKey = @PartnerKey
	
	-- 2. на саму квоту (QuotaDetails)
	delete StopSales
	from StopSales join QuotaObjects on SS_QOID = QO_ID
	join QuotaDetails on SS_QDID = QD_ID
	join Quotas on QT_ID = QD_QTID and QT_ID = QO_QTID
	where QO_Code = @Code
	and QO_SVKey = @SvKey
	and (@SubCode1 = -1 or @SubCode1 is null or QO_SubCode1 =@SubCode1)
	and (@SubCode2 = -1 or @SubCode2 is null or QO_SubCode2 =@SubCode2)
	and (SS_Date = @Date or @Date is null)
	and QT_PrKey = @PartnerKey
	
	
	-- теперь удалим объект квотирования и саму квоту, к которым не привязанно ни QuotaDetails ни StopSales
	delete QuotaObjects
	from QuotaObjects join Quotas on QO_QTID = QT_ID
	where not exists (select 1 from StopSales where SS_QOID = QO_ID)
	and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
	and QO_SVKey = @SvKey
	and QO_Code = @Code
	
	delete Quotas
	from Quotas join QuotaObjects on QT_ID = QO_QTID
	where not exists (select 1 from QuotaObjects where QO_QTID = QT_ID)
	and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
	and QO_SVKey = @SvKey
	and QO_Code = @Code
END

GO

GRANT EXECUTE on [dbo].[ImportExchangeQuotaStops_Delete] to public
GO

/*********************************************************************/
/* end sp_ImportExchangeQuotaStops_Delete.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ImportExchangeQuotaStops_Delete.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_InsertHistoryDetail.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_InsertHistoryDetail.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[InsertHistoryDetail]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[InsertHistoryDetail]
GO
create PROCEDURE [dbo].[InsertHistoryDetail]
(
--<VERSION>2007.2.22.1</VERSION>
	@nHIID int,
	@nOAId int,
	@sValueOld varchar(255),
	@sValueNew varchar(255),
	@nIntValueOld int = null,
	@nIntValueNew int = null,
	@dtDateTimeValueOld datetime = null,
	@dtDateTimeValueNew datetime = null,
	@nInvisible int = 0,
	@bNeedCommunicationUpdate smallint = null output
)
as
	declare @sAlias varchar(32), @sText varchar(255), @nCommunInfo smallint
	select @sAlias = left(OA_Alias, 32), @sText = OA_Name, @nCommunInfo=OA_CommunicationInfo from ObjectAliases with (nolock) where OA_Id = @nOAId
	If @nCommunInfo=1
		SET @bNeedCommunicationUpdate=1
	INSERT INTO dbo.HistoryDetail with (rowlock) (HD_HIID, HD_OAId, HD_Alias, HD_Text, HD_ValueOld, HD_ValueNew,
		HD_IntValueOld, HD_IntValueNew, HD_DateTimeValueOld, HD_DateTimeValueNew, HD_Invisible)
	VALUES (@nHIID, @nOAId, @sAlias, @sText, @sValueOld, @sValueNew,
		@nIntValueOld, @nIntValueNew, @dtDateTimeValueOld, @dtDateTimeValueNew, @nInvisible)

GO
grant exec on [dbo].[InsertHistoryDetail] to public
go


/*********************************************************************/
/* end sp_InsertHistoryDetail.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_InsertHistoryDetail.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_MarginMonitor_Geographic.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_MarginMonitor_Geographic.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MarginMonitor_Geographic]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[MarginMonitor_Geographic]
GO

--<version>2009.2.08</version>
--<data>2013-01-17</data>
-- Заполнение блока География в Маржинальном мониторе.
-- Последовательно загружает содержимое блока и позволяет заполнить весь блок одним запросом со стороны клиента.
-- Если не был передан ключ страны, то загружаются все страны и типы городов.
-- Если была передана страна, то загружаются все города, но список стран уже не загружается.
-- Если была передана страна и город прилета, то грузятся города проживания и вылета, но страны и города прилета не грузятся.
-- Если передан город прилета "Без перелета" (-1), то города вылета не грузятся.

CREATE procedure [dbo].[MarginMonitor_Geographic]
(
	@countryKey      int = null,                    -- ключ выбранной страны
	@flightCityKey   int = null,                    -- ключ выбранного города прилета ('-1' если выбрали "Без перелета")
	@targetCityKeys  xml (dbo.ArrayOfInt) = null    -- ключи выбранных городов проживания
) as begin

set nocount on

declare @beginTime datetime

declare @targetCityKeysTable table (targetCityKey int)
insert into @targetCityKeysTable(targetCityKey)
select tbl.res.value('.', 'int')
from @targetCityKeys.nodes('/ArrayOfInt/int') as tbl(res)


-- таблицы с результатами выборки стран и городов
declare @countriesTable       table (id int, name varchar(200))
declare @flightCitiesTable    table (id int, name varchar(200))
declare @targetCitiesTable    table (id int, name varchar(200))
declare @departureCitiesTable table (id int, name varchar(200))


set @beginTime = GETDATE()
-- выборка стран
if (@countryKey is null) begin
	insert into @countriesTable(id, name)
	select distinct CN_KEY, CN_NAME
	from TP_Tours with(nolock)
	join Country with(nolock) on CN_Key = TO_CNKey
	order by CN_Name asc
	
	-- в качестве выбранной страны берем первую
	set @countryKey = (select top 1 id from @countriesTable)
end
PRINT 'выборка стран: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))


set @beginTime = GETDATE()
-- выборка городов прилета
-- если есть туры без перелетов, то первое значение в выборке будет '-1'
if (@flightCityKey is null) begin
	insert into @flightCitiesTable(id, name)
	select distinct isnull(CT_Key, -1), CT_Name
	from TP_Tours with(nolock)
	left join TP_Services     with(nolock) on TS_TOKey = TO_Key and TS_SVKey = 1
	left join CityDictionary with(nolock) on CT_Key = TS_CTKey
	where (TO_CNKey = @countryKey) and (TS_Key is null or TS_Day = 1)
	order by CT_Name asc
	
	-- в качестве выбранного города прилета берем первый, который не равен значению "Без перелета"
	set @flightCityKey = (select top 1 id from @flightCitiesTable where id != -1)
end
PRINT 'выборка городов прилета: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))


set @beginTime = GETDATE()
-- выборка городов проживания
if (@targetCityKeys is null) 
begin
	if (@flightCityKey != -1)
	begin
		insert into @targetCitiesTable(id, name)
		select distinct CT_Key, CT_Name
		from CityDictionary
		where CT_Key in (select distinct h.TS_CTKey
						 from TP_Services h with(nolock)
						 where h.TS_SVKEY = 3
						 and h.TS_TOKey in (select distinct c.TS_TOKEY
											from TP_Services c with(nolock)
											where c.TS_SVKEY = 1
											and c.TS_TOKEY in (select to_key from tp_tours with(nolock) where to_cnkey = @countryKey)
											and @flightCityKey != -1
											and c.TS_CTKey = @flightCityKey 
											and c.TS_Day = 1))
		order by CT_Name asc
	end
	else
	begin
		insert into @targetCitiesTable(id, name)
		select distinct CT_Key, CT_Name
		from CityDictionary
		where CT_Key in (select distinct h.TS_CTKey
						 from TP_Services h with(nolock)
						 where h.TS_SVKEY = 3
						 and h.TS_TOKey in (select to_key from tp_tours with(nolock) where to_cnkey = @countryKey and not exists (select 1 from tp_services c with(nolock) where c.ts_svkey = 1 and c.TS_TOKey = TO_Key)))
		order by CT_Name asc
	end
	
	-- в качестве выбранного города проживания берем первый город
	insert into @targetCityKeysTable(targetCityKey)
	select top 1 id from @targetCitiesTable
end
PRINT 'выборка городов проживания: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))


set @beginTime = GETDATE()
-- выборка городов вылета
if (@flightCityKey != -1)
	insert into @departureCitiesTable(id, name)
	select distinct CT_Key, CT_Name
	from TP_Tours with(nolock)
	join TP_Services ch   with(nolock) on ch.TS_TOKey = TO_Key
	join TP_Services h    with(nolock) on h.TS_TOKEY = TO_Key and h.TS_SVKEY = 3
	join HotelDictionary with(nolock) on HD_Key = h.TS_CODE
	join CityDictionary  with(nolock) on CT_Key = ch.TS_SubCode2
	where (TO_CNKey = @countryKey) and
		  (ch.TS_SVKey = 1) and
		  (ch.TS_CTKey = @flightCityKey) and
		  (HD_CTKey in (select targetCityKey from @targetCityKeysTable)) and
		  (ch.TS_Day = 1)
	order by CT_Name asc
PRINT 'выборка городов вылета: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))


-- возвращаем результаты
select * from @countriesTable
select * from @flightCitiesTable
select * from @targetCitiesTable
select * from @departureCitiesTable

end
GO

grant exec on [dbo].[MarginMonitor_Geographic] to public
go
/*********************************************************************/
/* end sp_MarginMonitor_Geographic.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_MarginMonitor_Geographic.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_MarginMonitor_PriceFilter.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_MarginMonitor_PriceFilter.sql */
/*********************************************************************/
SET QUOTED_IDENTIFIER ON
GO

--реализация основных фильтров Маржинального монитора
--<version>2009.18.2</version>
--<data>2014-04-17</data>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MarginMonitor_PriceFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MarginMonitor_PriceFilter]
GO
CREATE PROCEDURE [dbo].[MarginMonitor_PriceFilter]
(
	@tourDates                    XML ([dbo].[ArrayOfDateTime]),      -- даты туров
	@hotelKeys                    XML ([dbo].[ArrayOfInt]),			  -- ключи отелей
	@roomCategoryKeys             XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи категорий комнат
	@pansionKeys                  XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи питаний
	@longList                     XML ([dbo].[ArrayOfInt]) = NULL,	  -- продолжительности
	@countryKey                   INT,                                -- страна
	@departCityKey                INT = NULL,                         -- город вылета
	@targetFlyCityKey             INT,                                -- город прилета
	@targetCitiesKeys             XML ([dbo].[ArrayOfInt]),           -- список городов проживания
	@priceMin                     MONEY = NULL,                       -- минимальная стоимость тура
	@priceMax                     MONEY = NULL,                       -- максимальная стоимость тура
	@isDeletedPriceOnly           BIT   = NULL,                       -- только снятые цены
	@isMinPrice                   BIT   = NULL,                       -- по минимальным ценам
	@isOnlineOnly                 BIT   = NULL,                       -- только выставленные в интернет туры
	@isModifyPriceOnly            BIT   = NULL,                       -- только измененные цены
	@isAllotment                  BIT   = NULL,                       -- для отелей по квотам элотмент
	@isCommitment                 BIT   = NULL,                       -- для отелей по квотам коммитмент
	@accmdDefaultKey              INT   = NULL,                       -- тип размещения по умолчанию
	@roomTypeDefaultKey           INT   = NULL,                       -- тип комнаты по умолчанию
	@isOnlyActualTourDates        BIT   = 1,                          -- 1-отбор по датам не ниже текущей    0-отбор по всем переданным датам
	@isAccommodationWithAdult     BIT   = 1,                          -- только размещения без доп. мест
	@isWholeHotel                 BIT   = 1,                          -- 1 - поиск по всему отелю, 0 - по категориям номеров
	@priceKeys                    XML ([dbo].[ArrayOfLong]) = NULL	  -- ключи уже отобранных цен (для работы кнопки "Применить фильтр к отобранным турам")
) AS BEGIN

SET ARITHABORT ON;
SET DATEFIRST 1;
SET NOCOUNT ON;

DECLARE @beginTime DATETIME, @debug varchar(255)

CREATE TABLE #tourDatesTable (tourDate DATETIME)
INSERT INTO #tourDatesTable (tourDate)
SELECT tbl.res.value('.', 'datetime')
FROM @tourDates.nodes('/ArrayOfDateTime/dateTime') AS tbl(res)
CREATE INDEX IX_tourDatesTable
ON #tourDatesTable(tourDate)

IF @isOnlyActualTourDates = 1
BEGIN
	DELETE #tourDatesTable
	WHERE tourDate < CONVERT(datetime, dateadd(day, -1, GETDATE()))
END

CREATE TABLE #targetCitiesKeysTable(cityKey INT)
INSERT INTO #targetCitiesKeysTable (cityKey)
SELECT tbl.res.value('.', 'int')
FROM @targetCitiesKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_targetCitiesKeysTable
ON #targetCitiesKeysTable(cityKey)

CREATE TABLE #hotelKeysTable (hotelKey INT)
INSERT INTO #hotelKeysTable (hotelKey)
SELECT tbl.res.value('.', 'int')
FROM @hotelKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_hotelKeysTable
ON #hotelKeysTable(hotelKey)

create table #tourKeysTable (tourKey int)
insert into #tourKeysTable (tourKey)
select distinct TI_TOKey 
from TP_Lists with(nolock) 
where ti_firsthdkey in (select hotelKey from #hotelKeysTable)
CREATE INDEX IX_tourKeysTable
ON #tourKeysTable(tourKey)

CREATE TABLE #roomCategoryKeysTable (rcKey INT)
INSERT INTO #roomCategoryKeysTable (rcKey)
SELECT tbl.res.value('.', 'int')
FROM @roomCategoryKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_roomCategoryKeysTable
ON #roomCategoryKeysTable(rcKey)

CREATE TABLE #pansionKeysTable(pansionKey INT)
INSERT INTO #pansionKeysTable(pansionKey)
SELECT tbl.res.value('.', 'int')
FROM @pansionKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_pansionKeysTable
ON #pansionKeysTable(pansionKey)

CREATE TABLE #longListTable (longValue SMALLINT)
INSERT INTO #longListTable (longValue)
SELECT tbl.res.value('.', 'int')
FROM @longList.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_longListTable
ON #longListTable(longValue)

CREATE TABLE #priceKeysTable  (priceKey BIGINT)
INSERT INTO #priceKeysTable(priceKey)
SELECT tbl.res.value('.', 'bigint')
FROM @priceKeys.nodes('/ArrayOfLong/long') AS tbl(res)
CREATE INDEX IX_priceKeysTable
ON #priceKeysTable(priceKey)

SELECT AC_KEY 
into #AccomType
FROM Accmdmentype WHERE (ISNULL(AC_NADMAIN, 0) > 0) AND (ISNULL(AC_NCHMAIN, 0) = 0) AND (ISNULL(AC_NCHISINFMAIN, 0) = 0)
CREATE INDEX IX_AccomType
ON #AccomType(AC_KEY)

-- прямые и обратные перелеты
CREATE TABLE #chartersTable 
(
	xCityFrom INT,
	xCityTo INT,
	xCH_Key BIGINT,
	xCharterDate DATETIME,
	xTS_PKKey BIGINT,
	xTS_SubCode1 BIGINT,
	xBusyPlaces INT,
	xTotalPlaces INT
)

-- выборка прямых и обратных перелетов
SET @beginTime = GETDATE()

INSERT INTO #chartersTable(xCityFrom, xCityTo, xCH_Key, xCharterDate, xTS_PKKey, xTS_SubCode1)
select distinct TF_SubCode2, TF_CTKey, TF_CodeNew, TF_Date, TF_PKKey, TF_SubCode1New
from TP_Flights with(nolock)
where TF_TourDate in (SELECT tourDate FROM #tourDatesTable)
and ((TF_Date = TF_TourDate and TF_CTKey = @targetFlyCityKey and TF_SubCode2 = @departCityKey) or (TF_Date <> TF_TourDate and TF_CTKey = @departCityKey and TF_SubCode2 = @targetFlyCityKey))
and TF_SubCode1New is not null
and TF_CodeNew is not null

--SELECT DISTINCT
--	TS_SubCode2, TS_CTKey, TS_Code,
--	case TS_Day when 1 then TD_Date else TD_Date + TI_Days - 1 end,
--	TS_OpPacketKey, TS_SubCode1
--FROM TP_Lists WITH(NOLOCK)
--JOIN TP_TurDates WITH(NOLOCK) ON TI_TOKey = TD_TOKey
--JOIN TP_Services WITH(NOLOCK) ON TS_TOKey = TI_TOKey AND TS_SVKey = 1
--WHERE
--	(TD_Date IN (SELECT tourDate FROM @tourDatesTable)) AND
--	(((TS_Day = 1) AND (TS_CTKey = @targetFlyCityKey) AND (TS_SubCode2 = @departCityKey)) OR
--	 ((TS_Day = TI_Days) AND (TS_CTKey = @departCityKey) AND (TS_SubCode2 = @targetFlyCityKey))
--	)

PRINT 'грузим прямые перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'грузим прямые перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SET @beginTime = GETDATE()

-- дополнительные перелеты
CREATE TABLE #addChartersTable 
(
	xCH_Key BIGINT,
	xAddChKey BIGINT,
	xCharterDate DATETIME,
	xTS_SubCode1 BIGINT,
	xTS_PKKey BIGINT,
	xAddFlight VARCHAR(4),
	xAddAirlineCode VARCHAR(3),
	xOrder INT DEFAULT 1,
	xAS_Week VARCHAR(7),
	xAS_TimeFrom DATETIME
)

CREATE INDEX IX_addChartersTable
ON #addChartersTable(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey,xAS_Week)
INCLUDE (xAddFlight,xAddAirlineCode,xOrder);

INSERT INTO #addChartersTable(xCH_Key, xAddChKey, xCharterDate, xTS_SubCode1, xTS_PKKey, xAddFlight, xAddAirlineCode, xAS_Week, xAS_TimeFrom)
SELECT DISTINCT ct.xCH_Key, CH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey, CH_FLIGHT, CH_AIRLINECODE, AS_WEEK, AS_TimeFrom
FROM AirSeason WITH(NOLOCK), Charter WITH(NOLOCK), Costs WITH(NOLOCK), #chartersTable ct
WHERE
	CH_CityKeyFrom = ct.xCityFrom AND
	CH_CityKeyTo = ct.xCityTo AND
	CS_Code = CH_Key AND
	AS_CHKey = CH_Key AND
	CS_SVKey = 1 AND
	(ISNULL((SELECT TOP 1 AS_GROUP FROM AIRSERVICE WITH(NOLOCK) WHERE AS_KEY = CS_SubCode1), '')
	 =
	 ISNULL((SELECT TOP 1 AS_GROUP FROM AIRSERVICE WITH(NOLOCK) WHERE AS_KEY = ct.xTS_SubCode1), '')
	) AND
	CS_PKKey = xTS_PKKey AND
	ct.xCharterDate BETWEEN AS_DateFrom AND AS_DateTo AND
	ct.xCharterDate BETWEEN CS_Date AND CS_DateEnd AND
	AS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, ct.xCharterDate)AS VARCHAR(1))+'%' AND
	(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, ct.xCharterDate) AS VARCHAR(1))+'%')

-- чтобы рейс, с которым был рассчитан тур, был первым
UPDATE #addChartersTable SET xOrder = 0 WHERE xCH_Key = xAddChKey

CREATE TABLE #addChartersTableString 
(
	xCH_Key bigint,                 -- исходный перелет
	xAddChKeyString nvarchar(max),  -- список доп. перелетов через запятую (включая исходный)
	xCharterDate datetime,
	xTS_SubCode1 bigint,
	xTS_PKKey bigint,
	xAS_Week varchar(7),
	xAS_TimeFrom nvarchar(max)
)

CREATE INDEX IX_addChartersTableString
ON #addChartersTableString(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey)
INCLUDE (xAddChKeyString, xAS_Week, xAS_TimeFrom);

-- все доп. перелеты соединяем через запятую в одну строку
insert into #addChartersTableString(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey, xAS_Week, xAddChKeyString, xAS_TimeFrom)
select distinct t1.xCH_Key, t1.xCharterDate, t1.xTS_SubCode1, t1.xTS_PKKey,
	-- xAS_Week
	(select top 1 xAS_Week
	from #addChartersTable t2
	where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
	order by len(xAS_Week) - len(replace(xAS_Week, '.', '')) desc),
 	-- xAddAirlineCode + xAddFlight
	(select xAddAirlineCode + xAddFlight + ', '
    from #addChartersTable t2
    where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
    order by xOrder asc, xAddAirlineCode + xAddFlight asc
    for xml path('')),
    -- xAS_TimeFrom
    (select SUBSTRING(CONVERT(VARCHAR(8), xAS_TimeFrom, 108),0,6) + ', '
    from #addChartersTable t2
    where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
    order by xOrder asc, xAddAirlineCode + xAddFlight asc
    for xml path(''))
from #addChartersTable t1

-- избавляемся от хвостовых запятых
update #addChartersTableString
set xAddChKeyString = LEFT(xAddChKeyString, LEN(xAddChKeyString) - 1),
    xAS_TimeFrom = LEFT(xAS_TimeFrom, LEN(xAS_TimeFrom) - 1)

UPDATE #chartersTable
SET xTotalPlaces = q.TotalPlaces, xBusyPlaces = q.BusyPlaces
FROM
   (SELECT ct.xCH_Key AS CH_Key, ct.xCharterDate AS CharterDate, SUM(QP_Places) AS TotalPlaces, SUM(QP_Busy) AS BusyPlaces
	FROM #chartersTable ct, QuotaDetails
	JOIN QuotaParts WITH(NOLOCK) ON QP_QDID = QD_ID
	JOIN QuotaObjects WITH(NOLOCK) ON QO_QTID = QD_QTID
	WHERE
		(QO_SVKey = 1) AND
		(QO_SubCode1 = ct.xTS_SubCode1) AND
		(QD_Date = ct.xCharterDate) AND
		(ISNULL(QP_IsDeleted,0) = 0) AND
		(ISNULL(QP_AgentKey,0) = 0) AND
		 QO_Code IN (SELECT act.xAddChKey FROM #addChartersTable act
					 WHERE (act.xCharterDate = ct.xCharterDate) AND
						   (act.xCH_Key = ct.xCH_Key) AND
						   (act.xTS_PKKey = ct.xTS_PKKey) AND
						   (act.xTS_SubCode1 = ct.xTS_SubCode1))
	GROUP BY ct.xCH_Key, ct.xCharterDate) AS q
WHERE xCH_Key = q.CH_Key AND xCharterDate = CharterDate

PRINT 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

--SELECT * from @chartersTable
--SELECT * from @addChartersTable
--SELECT * from @addChartersTableString

CREATE TABLE #tmpPriceTable 
(
	xTP_Key BIGINT,
	xTP_TOKey INT,
	xTP_DateBegin DATETIME,
	xTP_Gross MONEY,
	xTP_TIKey INT,
	xCH_Key INT,
	xCH_TSOpPacketKey INT,
	xCH_TSSubCode1 INT
)

CREATE INDEX IX_tmpPriceTable
ON #tmpPriceTable(xTP_TOKey, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
INCLUDE (xTP_Key, xTP_DateBegin, xTP_Gross);

-- только снятые цены
IF (ISNULL(@isDeletedPriceOnly, 0) = 0) BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTP_Gross, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
	SELECT TP_Key, TP_TOKey, TP_DateBegin, TP_Gross, TP_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1
	FROM TP_Prices WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TP_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	WHERE
		(TP_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		 -- отсев по продолжительностям
		(@longList IS NULL OR TI_DAYS IN (SELECT longValue FROM #longListTable))
		and TI_TOKey in (select tourKey from #tourKeysTable)
		and TP_TOKey in (select tourKey from #tourKeysTable)
END


IF ISNULL(@isOnlineOnly,0) = 0 BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTP_Gross, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
	SELECT TPD_TPKey, TPD_TOKey, TPD_DateBegin, null, TPD_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1
	FROM TP_PricesDeleted WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TPD_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	WHERE
		(TPD_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		 -- отсев по продолжительностям
		(@longList IS NULL OR TI_DAYS IN (SELECT longValue FROM #longListTable))
		and TPD_TOKey in (select tourKey from #tourKeysTable)
END


CREATE TABLE #prices 
(
	TourOldPrice                MONEY,
	TR_Key                      INT,
	TP_Key                      BIGINT,
	IsOnline                    BIT,
	TourName                    NVARCHAR(MAX),
	TourDate                    DATETIME,
	TourDays                    SMALLINT,
	HotelDays                   SMALLINT,
	AccommodationKey            INT,
	AccommodationName           NVARCHAR(MAX),
	RoomKey                     INT,
	HotelCityName               NVARCHAR(MAX),
	HotelKey                    INT,
	HotelName                   NVARCHAR(MAX),
	HotelRoomKey                INT,
	RoomName                    NVARCHAR(MAX),
	RoomCategoryKey             INT,
	RoomCategoryName            NVARCHAR(MAX),
	PansionKey                  INT,
	PansionName                 NVARCHAR(MAX),
	PansionCode                 VARCHAR(100),
	PartnerKey                  INT,
	Mens                        SMALLINT,
	Airport                     VARCHAR(100),
	Charters                    NVARCHAR(MAX),
	FlightDays                  VARCHAR(7),
	FlightTime                  NVARCHAR(MAX),
	CharterBusyPlaces           INT,
	CharterTotalPlaces          INT,
	CharterUnsolidBackPlaces    INT,
	AllotmentDaysCount          INT,
	CommitmentDaysCount         INT,
	HotelAllPlaces              INT,
	HotelBusyPlaces             INT,
	HotelCommitmentPlaces       INT,
	StopSale                    BIT
)

SET @beginTime = GETDATE()

INSERT INTO #prices
(
	TourOldPrice,
	TR_Key,
	TP_Key,
	IsOnline,
	TourName,
	TourDate,
	TourDays,
	HotelDays,
	AccommodationKey,
	AccommodationName,
	RoomKey,
	HotelCityName,
	HotelKey,
	HotelName,
	HotelRoomKey,
	RoomName,
	RoomCategoryKey,
	RoomCategoryName,
	PansionKey,
	PansionName,
	PansionCode,
	PartnerKey,
	Mens,
	Airport,
	Charters,
	FlightDays,
	FlightTime,
	CharterBusyPlaces,
	CharterTotalPlaces,
	CharterUnsolidBackPlaces,
	AllotmentDaysCount,
	CommitmentDaysCount,
	HotelAllPlaces,
	HotelBusyPlaces,
	HotelCommitmentPlaces,
	StopSale
)
SELECT DISTINCT
	pr.xTP_Gross AS TourOldPrice,
	TO_TRKey AS TR_Key,
	pr.xTP_Key AS TP_Key,
	TO_IsEnabled AS IsOnline,
	TO_Name AS TourName,
	pr.xTP_DateBegin AS TourDate,
	lst.TI_DAYS AS TourDays,
	hs.TS_Days AS HotelDays,
	hr.HR_ACKEY AS AccommodationKey,
	ac.AC_CODE AS AccommodationName,
	hr.HR_RMKEY AS RoomKey,
	ct.CT_NAME AS HotelCityName,
	lst.TI_FirstHDKey AS HotelKey,
	hd.HD_NAME AS HotelName,
	hs.TS_SubCode1 AS HotelRoomKey,
	rm.RM_NAME AS RoomName,
	hr.HR_RCKEY AS RoomCategoryKey,
	rc.RC_Name AS RoomCategoryName,
	lst.TI_FirstPNKey AS PansionKey,
	pn.PN_Name AS PansionName,
	pn.PN_Code AS PansionCode,
	hs.TS_OpPartnerKey AS PartnerKey,
	hs.TS_Men AS Mens,
	-- CharterPortCodeFrom
	(SELECT TOP 1 CH_PortCodeFrom FROM Charter WHERE CH_Key = pr.xCH_Key)
	AS Airport,
	-- Charters
	(SELECT TOP 1 xAddChKeyString FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS Charters,
	-- FlightDays
	(SELECT TOP 1 xAS_Week FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS FlightDays,
	-- FlightTime
	(SELECT TOP 1 xAS_TimeFrom FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS FlightTime,
	-- CharterBusyPlaces
	--(SELECT TOP 1 xBusyPlaces FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	NULL AS CharterBusyPlaces,
	-- CharterTotalPlaces
	--(SELECT TOP 1 xTotalPlaces FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	null AS CharterTotalPlaces,
	-- CharterUnsolidBackPlaces
	--(SELECT TOP 1 (xTotalPlaces - xBusyPlaces) FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin + lst.TI_Days - 1) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	null AS CharterUnsolidBackPlaces,
	-- AllotmentDaysCount
	--CASE @isAllotment WHEN 1 THEN
	--	dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Day, lst.TI_FirstHDKey, hr.HR_RMKEY, hr.HR_RCKEY, 1)
	--ELSE NULL END
	null AS AllotmentDaysCount,
	-- CommitmentDaysCount
	--CASE @isCommitment WHEN 1 THEN
	--	dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Day, lst.TI_FirstHDKey, hr.HR_RMKEY, hr.HR_RCKEY, 2)
	--ELSE NULL END
	null AS CommitmentDaysCount,
	-- HotelAllPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelAllPlaces,
	-- HotelBusyPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 0, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelBusyPlaces,
	-- HotelCommitmentPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, 2, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelCommitmentPlaces,
	-- Stop sale
--	(SELECT TOP 1 1 FROM StopSales WITH(NOLOCK)
--     INNER JOIN QuotaObjects WITH(NOLOCK) ON QO_ID = SS_QOID
--     WHERE
--        ISNULL(SS_IsDeleted, 0) = 0
--        AND SS_Date BETWEEN (pr.xTP_DateBegin + hs.TS_Day - 1) AND (pr.xTP_DateBegin + hs.TS_Day - 1 + hs.TS_Days - 1)
--	    AND QO_SVKey = 3
--		AND QO_Code = lst.TI_FirstHDKey
--		AND (QO_SubCode1 = HR_RMKEY OR QO_SubCode1 = 0)
--		AND (QO_SubCode2 = HR_RCKEY OR QO_SubCode2 = 0))
	null AS StopSale
FROM #tmpPriceTable       pr
JOIN TP_Tours             tour    WITH(NOLOCK) ON tour.TO_Key = pr.xTP_TOKey
JOIN TP_Lists             lst     WITH(NOLOCK) ON pr.xTP_TIKey = lst.TI_Key
JOIN HotelRooms           hr      WITH(NOLOCK) ON lst.TI_FirstHRKey = hr.HR_Key
JOIN Rooms                rm      WITH(NOLOCK) ON rm.RM_KEY = hr.HR_RMKey
JOIN RoomsCategory        rc      WITH(NOLOCK) ON hr.HR_RCKEY = rc.RC_Key
JOIN HotelDictionary      hd      WITH(NOLOCK) ON lst.TI_FirstHDKey = hd.HD_Key
JOIN TP_ServiceLists      slhs    WITH(NOLOCK) ON lst.TI_Key = slhs.TL_TIKey
JOIN TP_Services          hs      WITH(NOLOCK) ON slhs.TL_TSKey = hs.TS_Key AND hs.TS_SVKey = 3 AND hs.TS_Code = lst.TI_FirstHDKey
JOIN Pansion              pn      WITH(NOLOCK) ON lst.TI_FirstPNKey = pn.PN_Key
JOIN CityDictionary       ct      WITH(NOLOCK) ON hd.HD_CTKEY = ct.CT_KEY
JOIN Accmdmentype         ac      WITH(NOLOCK) ON hr.HR_ACKEY = ac.AC_KEY
WHERE
	TL_TOKey in (select tourKey from #tourKeysTable)
	and (ISNULL(@isAccommodationWithAdult, 0) = 0 OR (HR_ACKEY IN (SELECT AC_KEY FROM #AccomType))) AND
	-- фильтр по мин. ценам НЕ задан
	((ISNULL(@isMinPrice, 0) = 0 AND
	-- проверяем тур на те категории номеров и питаний, которые были переданы
	hr.HR_RCKEY IN (SELECT rcKey FROM #roomCategoryKeysTable) AND
	lst.TI_FirstPNKey IN (SELECT pansionKey FROM #pansionKeysTable))
	OR
	-- фильтр по мин. ценам задан
	(ISNULL(@isMinPrice, 0) != 0 AND
	-- проверяем по базовым привязкам отеля
	hr.HR_RCKEY = (SELECT TOP 1 ahc.AH_RcKey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	lst.TI_FirstPNKey = (SELECT TOP 1 ahc.ah_pnkey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	-- если заданы обе настройки с типом размещения и типом комнаты, то отсеиваем по ним
	(ISNULL(@accmdDefaultKey, 0) = 0 OR ISNULL(@roomTypeDefaultKey, 0) = 0 OR
	((hr.HR_ACKEY = @accmdDefaultKey) AND (hr.HR_RMKEY = @roomTypeDefaultKey))))
	) AND
	-- только выставленные в интернет туры
	(@isOnlineOnly IS NULL OR (@isOnlineOnly = CASE WHEN pr.xTP_Gross IS NULL THEN 0 ELSE TO_IsEnabled END)) AND
	-- отсев по ценам за тур
	(ISNULL(@priceMin, 0) = 0 OR (pr.xTP_Gross >= @priceMin)) AND
	(ISNULL(@priceMax, 0) = 0 OR (pr.xTP_Gross <= @priceMax))

-- только измененные цены
IF ISNULL(@isModifyPriceOnly, 0) != 0 BEGIN
	-- удаляем из @prices все неизмененные цены
	DELETE FROM #prices
	WHERE TP_Key IN (
		SELECT p.TP_Key FROM #prices p
		JOIN TP_PriceComponents pc ON p.TP_Key = pc.PC_TPKey
		WHERE NOT EXISTS(
		             SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_1  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_2  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_3  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_4  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_5  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_6  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_7  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_8  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_9  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_10 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_11 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_12 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_13 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_14 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_15 IS NOT NULL) AND (spad.SPAD_NeedApply != 0))
	)
END

	       
PRINT 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SET @beginTime = GETDATE()
-- актуализируем цены по отобранным турам
declare @tpKeys nvarchar(max)
set @tpKeys = ''
select @tpKeys = @tpKeys + convert(nvarchar(max), p.TP_Key) + ', '
from #prices p
create table #tmp
	(
		tpKey bigint,
		newPrice money
	)
--По настройке получаем актуальную цену через сервис или хранимкой
if exists (select top 1 1 from SystemSettings with (nolock) where SS_ParmName = 'ServiceGetActualPrice' and SS_ParmValue = 1)
	begin
		SET @tpKeys = RTRIM(@tpKeys)
		
		if (RIGHT(@tpKeys,1) = ',')
			SET @tpKeys = SUBSTRING(@tpKeys, 0, LEN(@tpKeys))
		
		print 'exec WcfGetActualPrice ' + '''' +  @tpKeys + ''''
		-- делаем инсерт во веременную таблицу, что бы результата не выводился при запуске этой хранимки
		exec WcfGetActualPrice @tpKeys
	end
else
	begin
		print 'exec ReCalculate_CheckActualPrice ' + '''' +  @tpKeys + ''''
		-- делаем инсерт во веременную таблицу, что бы результата не выводился при запуске этой хранимки
		insert into #tmp (tpKey, newPrice)
		exec ReCalculate_CheckActualPrice @tpKeys
	end
print 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SELECT p.*,
	pc.PC_Id AS PC_Id,
    pc.PC_Rate AS Rate,
	AddCostIsCommission_1,  AddCostNoCommission_1,  CommissionOnly_1,  Gross_1,  IsCommission_1,  MarginPercent_1,  SCPId_1,  SVKey_1,
	AddCostIsCommission_2,  AddCostNoCommission_2,  CommissionOnly_2,  Gross_2,  IsCommission_2,  MarginPercent_2,  SCPId_2,  SVKey_2,
	AddCostIsCommission_3,  AddCostNoCommission_3,  CommissionOnly_3,  Gross_3,  IsCommission_3,  MarginPercent_3,  SCPId_3,  SVKey_3,
	AddCostIsCommission_4,  AddCostNoCommission_4,  CommissionOnly_4,  Gross_4,  IsCommission_4,  MarginPercent_4,  SCPId_4,  SVKey_4,
	AddCostIsCommission_5,  AddCostNoCommission_5,  CommissionOnly_5,  Gross_5,  IsCommission_5,  MarginPercent_5,  SCPId_5,  SVKey_5,
	AddCostIsCommission_6,  AddCostNoCommission_6,  CommissionOnly_6,  Gross_6,  IsCommission_6,  MarginPercent_6,  SCPId_6,  SVKey_6,
	AddCostIsCommission_7,  AddCostNoCommission_7,  CommissionOnly_7,  Gross_7,  IsCommission_7,  MarginPercent_7,  SCPId_7,  SVKey_7,
	AddCostIsCommission_8,  AddCostNoCommission_8,  CommissionOnly_8,  Gross_8,  IsCommission_8,  MarginPercent_8,  SCPId_8,  SVKey_8,
	AddCostIsCommission_9,  AddCostNoCommission_9,  CommissionOnly_9,  Gross_9,  IsCommission_9,  MarginPercent_9,  SCPId_9,  SVKey_9,
	AddCostIsCommission_10, AddCostNoCommission_10, CommissionOnly_10, Gross_10, IsCommission_10, MarginPercent_10, SCPId_10, SVKey_10,
	AddCostIsCommission_11, AddCostNoCommission_11, CommissionOnly_11, Gross_11, IsCommission_11, MarginPercent_11, SCPId_11, SVKey_11,
	AddCostIsCommission_12, AddCostNoCommission_12, CommissionOnly_12, Gross_12, IsCommission_12, MarginPercent_12, SCPId_12, SVKey_12,
	AddCostIsCommission_13, AddCostNoCommission_13, CommissionOnly_13, Gross_13, IsCommission_13, MarginPercent_13, SCPId_13, SVKey_13,
	AddCostIsCommission_14, AddCostNoCommission_14, CommissionOnly_14, Gross_14, IsCommission_14, MarginPercent_14, SCPId_14, SVKey_14,
	AddCostIsCommission_15, AddCostNoCommission_15, CommissionOnly_15, Gross_15, IsCommission_15, MarginPercent_15, SCPId_15, SVKey_15
	FROM #prices p
	JOIN TP_PriceComponents pc WITH(NOLOCK) ON pc.PC_TPKey = p.TP_Key
	WHERE (@priceKeys IS NULL OR pc.PC_Id IN (SELECT priceKey FROM #priceKeysTable))
END
GO
grant exec on [dbo].[MarginMonitor_PriceFilter] to public
go
/*********************************************************************/
/* end sp_MarginMonitor_PriceFilter.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_MarginMonitor_PriceFilter.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwAutobusQuotes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwAutobusQuotes.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwAutobusQuotes]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwAutobusQuotes]
GO

CREATE PROCEDURE [dbo].[mwAutobusQuotes]
	@Filter varchar(2000),		
	@AgentKey int, 	
	@RequestOnRelease smallint,
	@NoPlacesResult int,
	@CheckAgentQuotes smallint,
	@CheckCommonQuotes smallint,
	@ExpiredReleaseResult int,
	@CountryKeys varchar(2000) = null,
	@CityKey int = null,
	@priceType varchar(10) = null
AS
--<DATE>2014-06-02</DATE>
---<VERSION>9.2.21.1</VERSION>

if PATINDEX('pt_main', @Filter) <= 0
begin
	if LEN(@Filter) > 0
		set @Filter = @Filter + ' and pt_main > 0 '
	else
		set @Filter = ' pt_main > 0 '
end

---=== СОЗДАНИЕ ВРЕМЕННОЙ ТАБЛИЦЫ ===---
CREATE TABLE #pricesTable
(	
	[TourMessage] varchar (1024) null,
	[CountryKey] [int] NOT NULL,
	[TourDate] [datetime] NULL,
	[TourKey] [int] NULL,
	[TurListKey] [int] NULL,
	[TourDuration] [int] null,--продолжительность тура в днях
	[TourDescription] varchar (2000) null,
	[HotelKey] [int] NULL,
	[HotelKeys] varchar(1024) NULL,
	[HotelPartnerKey] [int] null,
	[HotelDay] [int] null,
	[HotelNights] [int] null,
	[RoomKey] [int] null,
	[RoomCategoryKey] [int] null,
	[RoomCategoryName] [varchar](60) null,	
	[Nights] [int] NULL,	
	[TourName] [varchar](128) NULL,
	[TourTypeKey] [int] NULL,
	[TourTypeName] [varchar] (50) NULL,
	[HotelName] [varchar](60) NULL,		
	[Rate] [varchar](3) NULL,
	[TransportKey] int null,
	[TransferKey] int null,
	[TransferDay] int NULL,
	QuotaPlaces varchar(1024),
	QuotaAllPlaces varchar(1024)
)

declare @rmKey int, @script varchar(8000), @script2 varchar(8000), @mwSearchType int, @rmCount int, @PNames as varchar(4000), @hrKeys varchar(200),
	@cityKeyString as nvarchar(100), @countryKeyString as nvarchar(100)

--временная таблица с нужными типами номеров
--т.е. теми, на которые есть цены
create table #roomKeys (rm_key int null, rm_code varchar(35) null)

create table #minPricesTable (ptCNKey int, ptRMKey int, ptTourDate datetime, ptTourKey int, ptDays int, ptHDKey int, ptHDKeys varchar(2000), ptHDPartnerKey int,
	ptHDDay int, ptHDNights int, ptRCKey int, ptNights int, ptTourType int, ptPrice float)

--ключи размещений и признак - все ли размещения основные
create table #hrKeysStringsTable (hrkey varchar(200), hrmain int)

--данные из таблиц основной базы
create table #services (tl_tikey int,ts_subcode1 int,ts_code int,ts_day int)

select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) where SS_ParmName = 'MWDivideByCountry'

if (@mwSearchType=0)
begin
	set @script = 'select distinct(pt_hotelroomkeys), 0 from mwPriceDataTable with(nolock) where ' + @Filter
	print (@script)
	insert into #hrKeysStringsTable exec (@script)
	
	declare cur1 cursor fast_forward for select distinct hrkey from #hrKeysStringsTable
	open cur1
	fetch next from cur1 into @hrKeys
	while @@fetch_status = 0
		begin
			--вставляем данные об основных местах для размещений
			set @script = 'update #hrKeysStringsTable
								set hrmain=(select min(ac_main)
											from Accmdmentype with(nolock)
											where ac_key in(select distinct hr_ackey from hotelRooms where hr_key in(' + @hrKeys + '))
											)
								where hrkey=''' + @hrKeys + ''''
			exec (@script)
			fetch next from cur1 into @hrKeys
		end
	close cur1
	deallocate cur1
	
	delete from #hrKeysStringsTable where hrmain=0
	
	set @script = 'select distinct pt_rmkey, rm_code from mwPriceDataTable with(nolock) join Rooms with(nolock) on RM_Key = pt_rmkey where ' + @Filter

	INSERT INTO #roomKeys EXEC(@script)
	
	set @script = 'select pt_cnkey, pt_rmkey, pt_tourdate, pt_tourkey, pt_days, pt_hdkey, pt_hotelkeys, pt_hdpartnerkey,
					pt_hdday, pt_hdnights, pt_rckey, pt_nights, pt_tourtype, '
	
	if RTRIM(ISNULL(@priceType,'min'))='max'
		set @script = @script + 'max'
	else
		set @script = @script + 'min'
	
	set @script = @script + '(pt_price) from mwPriceDataTable with (nolock)
					inner join #hrKeysStringsTable on pt_hotelroomkeys=hrkey
					where ' + @Filter + '
					and pt_isEnabled=1
					group by pt_cnkey,pt_rmkey,pt_tourdate,pt_tourkey,pt_days,pt_hdkey,pt_hotelkeys,pt_hdpartnerkey,
						pt_hdday,pt_hdnights,pt_rckey,pt_nights,pt_tourkey,pt_tourtype'
	
	INSERT INTO #minPricesTable EXEC(@script)
	
	select @rmCount = count(rm_key) from #roomKeys
	
	if(@rmCount = 0)
		return
	
	declare roomCursor cursor for
		select rm_key from #roomKeys order by rm_key
	
	--добавляем колонки типов номеров в темповую таблицу
	OPEN roomCursor
	FETCH NEXT FROM roomCursor INTO @rmKey
	while @@fetch_status = 0
		begin
			set @script = 'alter table #pricesTable add rmkey_' +  convert(varchar,@rmKey) + ' int, pr_' + convert(varchar,@rmKey) + ' int' 
			
			exec (@script)
			FETCH NEXT FROM roomCursor INTO @rmKey
		end
	close roomCursor
	deallocate roomCursor
	
	-- Cобираем колонки типов номеров для запроса
	set @PNames = ''
	
	select @PNames = @PNames + ',' + '0 as ''rmkey_' + convert(varchar,rm_key) + ''',
		max(case when pt_rmkey = ' + convert(varchar,rm_key) + ' then pt_pricekey else 0 end) as ''pr_' + convert(varchar,rm_key) + ''''
		from #roomKeys
		order by rm_key
	
	set @PNames = substring(@PNames, 2, len(@PNames))
	
	set @script =
		'select '''' as TourMessage,pt_cnkey,pt_tourdate,pt_tourkey,pt_tlkey,pt_days,TL_DESCRIPTION,pt_hdkey,pt_hotelkeys,
			pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rmkey,pt_rckey,rc_name,pt_nights,isnull(tl_nameweb, isnull(to_name, tl_name)),pt_tourtype,tp_name,hd_name,pt_rate,ts_subcode1,ts_code,ts_day,-1,-1,'+ @PNames + '
		from mwpricedatatable with(nolock)
		inner join tp_tours with(nolock) on to_key = pt_tourkey
		inner join HotelDictionary with(nolock) on hd_key = pt_hdkey
		inner join #hrKeysStringsTable on pt_hotelroomkeys=hrkey
		inner join tiptur with(nolock) on pt_tourtype = tp_key
		inner join turlist with(nolock) on pt_tlkey = tl_key
		inner join roomscategory with(nolock) on pt_rckey = rc_key '
		
		if (((select dbo.mwReplIsSubscriber()) = 0) and (select dbo.mwReplIsPublisher()) = 0)
				begin
					set @script = @script
						+ '
						inner join tp_servicelists with(nolock) on tl_tikey = pt_pricelistkey
						inner join tp_services with(nolock) on ts_key = tl_tskey and ts_svkey = 2'
				end
				else
				begin
					set @script2 = '
						select tl_tikey,ts_subcode1,ts_code,ts_day from mt.' + dbo.mwReplPublisherDB() + '.dbo.tp_servicelists with(nolock)
						inner join mt.' + dbo.mwReplPublisherDB() + '.dbo.tp_services with(nolock) on ts_key = tl_tskey and ts_svkey = 2'
					
					insert into #services exec(@script2)
					
					set @script = @script + '
					inner join #services on #services.tl_tikey=pt_pricelistkey'
				end
		
		set @script = @script + '
		where ' + @Filter + '
		and exists(select top 1 1 from #minPricesTable
					where pt_rmkey=ptrmkey
					and pt_cnkey=ptcnkey
					and pt_tourdate=pttourdate
					and	pt_tourkey=pttourkey
					and pt_days=ptdays
					and pt_hdkey=pthdkey
					and pt_hdpartnerkey=pthdpartnerkey
					and pt_hdday=pthdday
					and pt_hdnights=pthdnights
					and	pt_rckey=ptrckey
					and pt_days=ptdays
					and pt_nights=ptnights
					and	pt_price=ptprice)
		and pt_isEnabled=1
		group by pt_cnkey,pt_tourdate,pt_tourkey,pt_tlkey,pt_days,TL_DESCRIPTION,pt_hdkey,pt_hotelkeys,pt_hdpartnerkey,pt_hdday,pt_hdnights,
			pt_rckey,rc_name,pt_rmkey,pt_nights,pt_tourkey,pt_tourtype,tp_name,hd_name,pt_rate,ts_subcode1,ts_code,ts_day,TL_NAMEWEB,TO_Name,TL_NAME
		order by pt_tourdate, pt_days, tp_name'
	
	INSERT INTO #pricesTable EXEC(@script)
end
else
begin
	declare @now datetime
	
	declare @tableNameString as nvarchar(100), @countryKey int
	
	create table #tables (tableName varchar(200))
	create table #countryKeys (cnkey int)
	
	if (@CountryKeys is not null)
	begin
		insert into #countryKeys select distinct * from dbo.ParseKeys(@CountryKeys)
	end
	else
	begin
		insert into #countryKeys select distinct to_cnkey from tp_tours where to_isEnabled=1
	end
	
	if (@cityKey is null or @cityKey=0)
		begin
			set @cityKeyString = '%'
		end
		else
		begin
			set @cityKeyString = CAST(@cityKey as varchar(100))
		end
	
	declare cur1 cursor fast_forward for select distinct cnkey from #countryKeys
	open cur1
	fetch next from cur1 into @countryKey
	while @@fetch_status = 0
	begin
		if (@countryKey is null or @countryKey=0)
		begin
			set @countryKeyString = '%'
		end
		else
		begin
			set @countryKeyString = CAST(@countryKey as varchar(100))
		end
		
		set @script = 'select distinct rtrim(name) from sys.tables where name like ''mwPriceDataTable_' + @countryKeyString + '_' + @cityKeyString + ''''
		
		insert into #tables exec(@script)
		
		fetch next from cur1 into @countryKey
	end
	close cur1
	deallocate cur1
	
	declare cur0 cursor fast_forward for select distinct tableName from #tables
	open cur0
	fetch next from cur0 into @tableNameString
	while @@FETCH_STATUS = 0
	begin
		set @script = 'select distinct pt_rmkey,rm_code from ' + @tableNameString + ' join Rooms on RM_Key = pt_rmkey where not exists(select top 1 1 from #roomKeys where rm_key=pt_rmkey) and ' + @Filter
		
		INSERT INTO #roomKeys EXEC(@script)
		
		declare roomCursor cursor for
				select rm_key from #roomKeys order by rm_key
		
		--добавляем колонки типов номеров в темповую таблицу
		OPEN roomCursor
		FETCH NEXT FROM roomCursor INTO @rmKey
		while @@fetch_status = 0
			begin
				set @script = 'alter table #pricesTable add rmkey_' +  convert(varchar,@rmKey) + ' int, pr_' + convert(varchar,@rmKey) + ' int'
				begin try
					exec (@script)
				end try
				begin catch
					print 'Column already added'
				end catch
				FETCH NEXT FROM roomCursor INTO @rmKey
			end
		close roomCursor
		deallocate roomCursor
		
		fetch next from cur0 into @tableNameString
	end
	close cur0
	deallocate cur0
	
	-- Cобираем колонки типов номеров для запроса
	set @PNames = ''
	
	select @PNames = @PNames + ',
		' + '0 as ''rmkey_' + convert(varchar,rm_key) + ''',max(case when pt_rmkey = ' + convert(varchar,rm_key) + ' then pt_priceKey else 0 end) as ''pr_' + convert(varchar,rm_key) + ''''
		from #roomKeys
		order by rm_key
	
	set @PNames = substring(@PNames, 2, len(@PNames))
	
	declare cur2 cursor fast_forward for select distinct tableName from #tables
	open cur2
	fetch next from cur2 into @tableNameString
	while @@FETCH_STATUS = 0
	begin
		delete from #hrKeysStringsTable
	
		set @script = 'select distinct(pt_hotelroomkeys), 0 from ' + @tableNameString + ' where ' + @Filter
	
		insert into #hrKeysStringsTable exec (@script)
		
		declare cur1 cursor fast_forward for select distinct hrkey from #hrKeysStringsTable
		open cur1
		fetch next from cur1 into @hrKeys
		while @@fetch_status = 0
			begin
				--вставляем данные об основных местах для размещений
				set @script = 'update #hrKeysStringsTable
									set hrmain=(select min(ac_main)
												from Accmdmentype with(nolock)
												where ac_key in(select distinct hr_ackey from hotelRooms where hr_key in(' + @hrKeys + '))
												)
									where hrkey=''' + @hrKeys + ''''
				exec (@script)
				fetch next from cur1 into @hrKeys
			end
		close cur1
		deallocate cur1
		
		delete from #hrKeysStringsTable where hrmain=0
		
		select @rmCount = count(rm_key) from #roomKeys
		
		if(@rmCount <> 0)
		begin
			delete from #minPricesTable
		
			set @script = 'select pt_cnkey,pt_rmkey,pt_tourdate,pt_tourkey,pt_days,pt_hdkey,pt_hotelkeys,
								pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rckey,pt_nights,pt_tourtype,'
			
			if RTRIM(ISNULL(@priceType,'min'))='max'
				set @script = @script + 'max'
			else
				set @script = @script + 'min'
				
			set @script=@script + '(pt_price) from ' + @tableNameString + ' with(nolock)
							where ' + @Filter + '
							and exists(select top 1 1 from #hrKeysStringsTable where pt_hotelroomkeys=hrkey)
							and pt_isEnabled=1
							group by pt_cnkey,pt_rmkey,pt_tourdate,pt_tourkey,pt_days,pt_hdkey,pt_hotelkeys,pt_hdpartnerkey,
								pt_hdday,pt_hdnights,pt_rckey,pt_nights,pt_tourtype'
			
			INSERT INTO #minPricesTable EXEC(@script)

			set @script =
				'select '''' as TourMessage,pt_cnkey,pt_tourdate,pt_tourkey,pt_tlkey,pt_days,TL_DESCRIPTION,pt_hdkey,pt_hotelkeys,
					pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rmkey,pt_rckey,rc_name,pt_nights,isnull(tl_nameweb, isnull(to_name, tl_name)),pt_tourtype,tp_name,hd_name,pt_rate,ts_subcode1,ts_code,ts_day,-1,-1,'+ @PNames + '
				from ' + @tableNameString + ' with(nolock)
				inner join tp_tours with(nolock) on to_key = pt_tourkey
				inner join HotelDictionary with(nolock) on hd_key = pt_hdkey
				inner join tipTur with(nolock) on pt_tourtype = tp_key
				inner join turList with(nolock) on pt_tlkey = tl_key
				inner join roomsCategory with(nolock) on pt_rckey = rc_key '
				
				if (((select dbo.mwReplIsSubscriber()) = 0) and (select dbo.mwReplIsPublisher()) = 0)
				begin
					set @script = @script
						+ '
						inner join tp_servicelists with(nolock) on tl_tikey = pt_pricelistkey
						inner join tp_services with(nolock) on ts_key = tl_tskey and ts_svkey = 2'
				end
				else
				begin
					set @script2 = null
					
					if (@CountryKeys is not null)
					begin
						set @script2 = ' where ts_cnkey in (' + @CountryKeys + ')'
					end
					
					set @script2 = 'select tl_tikey,ts_subcode1,ts_code,ts_day from mt.' + dbo.mwReplPublisherDB() + '.dbo.tp_servicelists with(nolock)
						inner join mt.' + dbo.mwReplPublisherDB() + '.dbo.tp_services with(nolock) on ts_key = tl_tskey and ts_svkey = 2 ' + isnull(@script2,'')

					insert into #services exec(@script2)
					
					set @script = @script + '
					inner join #services on #services.tl_tikey=pt_pricelistkey'
				end
				
				set @script = @script + '
				where ' + @Filter + '
				and exists(select top 1 1 from #minPricesTable
							where pt_rmkey=ptrmkey
							and pt_cnkey=ptcnkey
							and pt_tourdate=pttourdate
							and	pt_tourkey=pttourkey
							and pt_days=ptdays
							and pt_hdkey=pthdkey
							and pt_hdpartnerkey=pthdpartnerkey
							and pt_hdday=pthdday
							and pt_hdnights=pthdnights
							and	pt_rckey=ptrckey
							and pt_days=ptdays
							and pt_nights=ptnights
							and	pt_price=ptprice)
				and pt_isEnabled=1
				group by pt_cnkey,pt_tourdate,pt_tourkey,pt_tlkey,pt_days,TL_DESCRIPTION,pt_hdkey,pt_hotelkeys,pt_hdpartnerkey,
					pt_hdday,pt_hdnights,pt_rckey,rc_name,pt_rmkey,pt_nights,pt_tourtype,tp_name,hd_name,pt_rate,ts_subcode1,ts_code,ts_day,TL_NAMEWEB,TO_Name,TL_NAME
				order by pt_tourdate, pt_days, tp_name'
			
			INSERT INTO #pricesTable EXEC(@script)
		end
		fetch next from cur2 into @tableNameString
	end
	close cur2
	deallocate cur2
end

-- Формируем скрипт, заполняющий стоимость по ключу цены
declare @update_price as varchar(4000)
set @update_price = ''

if (((select dbo.mwReplIsSubscriber()) = 0) and (select dbo.mwReplIsPublisher()) = 0)
begin
	select @update_price = @update_price + 'update #pricesTable set rmkey_' + convert(varchar,rm_key) + ' = TP_Gross from dbo.TP_Prices where tp_key = pr_' + convert(varchar,rm_key) + '; '
	from #roomKeys order by rm_key
end
else
begin
	select @update_price = @update_price + 'update #pricesTable set rmkey_' + convert(varchar,rm_key) + ' = TP_Gross from mt.' + dbo.mwReplPublisherDB() + '.dbo.TP_Prices where tp_key = pr_' + convert(varchar,rm_key) + '; '
	from #roomKeys order by rm_key
end


exec (@update_price)

declare	@HotelKey int, @HotelKeys VARCHAR(1024), @RoomKey int, @RoomCategoryKey int, @FromDate datetime, @HotelPartnerKey int, @HotelDay int,
	@HotelNights int, @TourDuration int, @TourKey int, @TourMessage varchar (1024), @TurListKey int

DECLARE hSql CURSOR
	FOR
		SELECT HotelKey, HotelKeys, RoomKey, RoomCategoryKey,TourDate,HotelPartnerKey,HotelDay,HotelNights,TourDuration,TourKey,TourMessage,TurListKey FROM #pricesTable
	FOR UPDATE OF QuotaPlaces, QuotaAllPlaces, TourMessage

OPEN hSql
FETCH NEXT FROM hSql INTO @HotelKey, @HotelKeys, @RoomKey, @RoomCategoryKey, @FromDate, @HotelPartnerKey, @HotelDay,@HotelNights,@TourDuration,@TourKey,@TourMessage,@TurListKey

declare @qt_places int, @qt_allplaces int, @qt_tourMessage varchar (1024)

WHILE @@FETCH_STATUS = 0
BEGIN	      

	DECLARE @idx INT = 1      
	DECLARE @delimiter CHAR = ','
	DECLARE @slice VARCHAR(1024)
	DECLARE @quotas VARCHAR(1024) = ''
	DECLARE @allQuotas VARCHAR(1024) = ''
	DECLARE @hotelKeysVar VARCHAR(1024) = @HotelKeys
	DECLARE @curHotelKey as int
	
	WHILE @idx != 0       
	BEGIN       
		SET @idx = CHARINDEX(@delimiter, @hotelKeysVar)       
		IF @idx != 0       
			SET @slice = LEFT(@hotelKeysVar, @idx - 1)       
		ELSE       
			SET @slice = @hotelKeysVar    
			   
		SET @curHotelKey = CAST(@slice AS INT)

		SELECT TOP 1 @qt_places = qt_places, @qt_allplaces = qt_allplaces 
					 from mwCheckQuotesEx(3, @curHotelKey, @RoomKey, 
										  @RoomCategoryKey, @AgentKey, 
										  @HotelPartnerKey, @FromDate, 
										  @HotelDay, @HotelNights, 
										  @RequestOnRelease, @NoPlacesResult, 
										  @CheckAgentQuotes, @CheckCommonQuotes, 
										  1, 0, 0, 0, 0, 
										  @TourDuration, @ExpiredReleaseResult)		       
		if LEN(@quotas) > 0
			SET @quotas = @quotas + ',' + cast(@qt_places as VARCHAR(1024))
		else
			SET @quotas = cast(@qt_places as VARCHAR(1024))
		
		if LEN(@allQuotas) > 0
			SET @allQuotas = @allQuotas + ',' + cast(@qt_allplaces as VARCHAR(1024))
		else
			SET @allQuotas = cast(@qt_allplaces as VARCHAR(1024))
			 
			 
		set @hotelKeysVar = RIGHT(@hotelKeysVar, LEN(@hotelKeysVar) - @idx)       
		if LEN(@hotelKeysVar) = 0 break       
	END 
	
	 -- MEG00030302. Golubinsky. 07.06.2011
	SET @qt_tourMessage = ''
	SELECT TOP 1 @qt_tourMessage = MS_Text
	FROM [Messages] with (nolock) WHERE (( @FromDate between MS_ServiceDateBeg AND MS_ServiceDateEnd) AND MS_IsDeleted IS NULL OR MS_IsDeleted = 0) AND MS_LGId IN
			(SELECT DISTINCT LM_LGId FROM LimitationGroups, Limitations, LimitationTours WITH (NOLOCK)
				WHERE LM_ID = LD_LMId AND LG_ID = LM_LGId AND LD_TRKey = @TurListKey)
	ORDER BY MS_ServiceDateBeg, MS_ServiceDateEnd ASC
	-- MEG00030302 end
	
	UPDATE #pricesTable SET QuotaPlaces = @quotas, QuotaAllPlaces = @allQuotas, TourMessage = @qt_tourMessage
		WHERE current of hSql
	
	FETCH NEXT FROM hSql INTO @HotelKey, @HotelKeys, @RoomKey, @RoomCategoryKey, @FromDate, @HotelPartnerKey, @HotelDay,@HotelNights,@TourDuration,@TourKey,@TourMessage,@TurListKey
END
CLOSE hSql
DEALLOCATE hSql

select * from #pricesTable

drop table #pricesTable
drop table #roomKeys
drop table #minPricesTable
drop table #hrKeysStringsTable
GO

grant exec on [dbo].[mwAutobusQuotes] to public
go
/*********************************************************************/
/* end sp_mwAutobusQuotes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwAutobusQuotes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCreatePriceTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCreatePriceTable.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCreatePriceTable]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwCreatePriceTable]
GO

CREATE procedure [dbo].[mwCreatePriceTable] @countryKey int, @cityFromKey int
as
begin
	--<DATE>2014-07-24</DATE>
	--<VERSION>2009.2.18</VERSION>

	declare @sql varchar(8000)
	declare @tableName varchar(1024)
	set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)
	set @sql = 
	'CREATE TABLE ' + @tableName + ' (
		[pt_mainplaces] [int] NULL,
		[pt_addplaces] [int] NULL,
		[pt_main] [smallint] NULL,
		[pt_tourvalid] [datetime] NULL,
		[pt_tourcreated] [datetime] NULL,
		[pt_tourdate] [datetime] NULL,
		[pt_days] [int] NULL,
		[pt_nights] [int] NULL,
		[pt_cnkey]  int NOT NULL check(pt_cnkey = ' + cast(isnull(@countryKey, 0) as varchar) + '),
		[pt_ctkeyfrom] int NOT NULL  check(pt_ctkeyfrom = ' + cast(isnull(@cityFromKey, 0) as varchar) + '),
		[pt_ctkeyto] [int] NULL,
		[pt_tourkey] [int] NULL,
		[pt_tourtype] [int] NULL,
		[pt_tlkey] [int] NULL,
		[pt_pricelistkey] [int] NULL,
		[pt_pricekey] [bigint] NOT NULL,
		[pt_price] [float] NULL,
		[pt_hdkey] [int] NULL,
		[pt_hdpartnerkey] [int] NULL,
		[pt_rskey] [int] NULL,
		[pt_ctkey] [int] NULL,
		[pt_hdstars] [varchar](12) NULL,
		[pt_pnkey] [int] NULL,
		[pt_hrkey] [int] NULL,
		[pt_rmkey] [int] NULL,
		[pt_rckey] [int] NULL,
		[pt_ackey] [int] NULL,
		[pt_childagefrom] [int] NULL,
		[pt_childageto] [int] NULL,
		[pt_childagefrom2] [int] NULL,
		[pt_childageto2] [int] NULL,
		[pt_rate] [varchar](3) NULL,
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] [int] NULL,
		[pt_chbackkey] [int] NULL,
		[pt_hdday] [int] NULL,
		[pt_hdnights] [int] NULL,
		[pt_chday] [int] NULL,
		[pt_chpkkey] [int] NULL,
		[pt_chprkey] [int] NULL,
		[pt_chbackday] [int] NULL,
		[pt_chbackpkkey] [int] NULL,
		[pt_chbackprkey] [int] NULL,
		[pt_hotelkeys] [varchar](256) NULL,
		[pt_hotelroomkeys] [varchar](256) NULL,
		[pt_hotelstars] [varchar](256) NULL,
		[pt_pansionkeys] [varchar](256) NULL,
		[pt_hotelnights] [varchar](256) NULL,
		[pt_key] [int] IDENTITY PRIMARY KEY,
		[pt_chdirectkeys] [varchar](256) NULL,
		[pt_chbackkeys] [varchar](256) NULL,
		[pt_topricefor] [smallint] NOT NULL,
		[pt_hddetails] [varchar](256) NULL,
		[pt_autodisabled] [smallint] NULL,
		[pt_directFlightAttribute] [int] NULL,
		[pt_backFlightAttribute] [int] NULL)'
	exec(@sql)
	set @sql='grant select, delete, update, insert, alter on '+@tableName+' to public'
	exec(@sql)
end
GO

GRANT EXECUTE on [dbo].[mwCreatePriceTable] to public
GO
/*********************************************************************/
/* end sp_mwCreatePriceTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCreatePriceTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCreatePriceTableIndexes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwCreatePriceTableIndexes.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCreatePriceTableIndexes]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwCreatePriceTableIndexes]
GO

CREATE PROCEDURE [dbo].[mwCreatePriceTableIndexes]
	@countryKey int,
	@cityFromKey int
as
begin
	declare @tableName varchar(50)
	set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)
	declare @sql varchar(max)
	set @sql = '
	if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name not like ''PK[_]%''  and name like ''x[_]%'')
	begin
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_complex'')
			CREATE NONCLUSTERED INDEX [x_complex] ON ' + @tableName + '([pt_cnkey] ASC, [pt_ctkeyfrom] ASC, [pt_tourkey] ASC, [pt_tourdate] ASC) INCLUDE ( [pt_hdkey], [pt_pnkey])
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_date'')
			CREATE NONCLUSTERED INDEX [x_date] ON ' + @tableName + '([pt_tourdate] ASC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_enabled'')
			CREATE NONCLUSTERED INDEX [x_enabled] ON ' + @tableName + '([pt_isenabled] DESC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_hdkey'')
			CREATE NONCLUSTERED INDEX [x_hdkey] ON ' + @tableName + '([pt_hdkey] ASC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_mwHotelDetails'')
			CREATE NONCLUSTERED INDEX [x_mwHotelDetails] ON ' + @tableName + '([pt_isenabled] DESC,[pt_tourvalid] ASC,[pt_main] DESC,[pt_hdkey] ASC,[pt_price] ASC,[pt_tourdate] ASC,[pt_rate] ASC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_pricekey'')
			CREATE NONCLUSTERED INDEX [x_pricekey] ON ' + @tableName + '([pt_pricekey] ASC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_singleprice'')
			CREATE NONCLUSTERED INDEX [x_singleprice] ON ' + @tableName + '([pt_tourdate] ASC,[pt_hdkey] ASC,[pt_rmkey] ASC,[pt_rckey] ASC,[pt_ackey] ASC,[pt_pnkey] ASC,[pt_days] ASC,[pt_nights] ASC) INCLUDE ( [pt_hdpartnerkey],[pt_chprkey],[pt_tourtype],[pt_main],[pt_isenabled],[pt_autodisabled],[pt_tourkey],[pt_price],[pt_ctkeyfrom])
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_singleprice_tour'')
			CREATE NONCLUSTERED INDEX [x_singleprice_tour] ON ' + @tableName + '([pt_tourkey] ASC,[pt_main] ASC) INCLUDE ( [pt_tourdate],[pt_hdkey],[pt_rmkey],[pt_rckey],[pt_ackey],[pt_pnkey],[pt_days],[pt_nights],[pt_hdpartnerkey],[pt_chprkey],[pt_tourtype],[pt_ctkeyfrom])
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_tourkey'')
			CREATE NONCLUSTERED INDEX [x_tourkey] ON ' + @tableName + '([pt_tourkey] ASC)
		if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_main_persprice'')
		CREATE NONCLUSTERED INDEX [x_main_persprice] ON [dbo].[' + @tablename + ']
(
	[pt_cnkey] ASC,
	[pt_ctkeyfrom] ASC,
	[pt_tourdate] ASC,
	[pt_tourtype] ASC,
	[pt_rskey] ASC,
	[pt_ctkey] ASC,
	[pt_tourkey] ASC,
	[pt_nights] ASC,
	[pt_pnkey] ASC,
	[pt_hdstars] ASC
)
INCLUDE ( 	[pt_tlkey],
	[pt_hdkey],
	[pt_pricekey],
	[pt_price],
	[pt_rmkey],
	[pt_rckey],
	[pt_days],
	[pt_isenabled],
	[pt_chkey],
	[pt_chbackkey],
	[pt_hdday],
	[pt_hdnights],
	[pt_hdpartnerkey],
	[pt_chday],
	[pt_chpkkey],
	[pt_chprkey],
	[pt_chbackday],
	[pt_chbackpkkey],
	[pt_chbackprkey],
	[pt_childagefrom],
	[pt_childageto],
	[pt_childagefrom2],
	[pt_childageto2],
	[pt_main],
	[pt_tourvalid],
	[pt_chbackkeys],
	[pt_chdirectkeys],
	[pt_hddetails],
	[pt_topricefor],
	[pt_directFlightAttribute],
	[pt_backFlightAttribute],
	[pt_mainplaces],
	[pt_hrkey]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]

	if not exists(select id from sysindexes where id = object_id(''' + @tableName + ''') and indid > 0 and indid < 255 and name = ''x_main_roomprice'')
	CREATE NONCLUSTERED INDEX [x_main_roomprice] ON [dbo].[' + @tablename + ']
(
	[pt_cnkey] ASC,
	[pt_ctkeyfrom] ASC,
	[pt_mainplaces] ASC,
	[pt_addplaces] ASC,
	[pt_tourdate] ASC,
	[pt_tourtype] ASC,
	[pt_rskey] ASC,
	[pt_ctkey] ASC,
	[pt_tourkey] ASC,
	[pt_nights] ASC,
	[pt_pnkey] ASC,
	[pt_hdstars] ASC
)
INCLUDE ( 	[pt_tlkey],
	[pt_hdkey],
	[pt_pricekey],
	[pt_price],
	[pt_rmkey],
	[pt_rckey],
	[pt_days],
	[pt_isenabled],
	[pt_chkey],
	[pt_chbackkey],
	[pt_hdday],
	[pt_hdnights],
	[pt_hdpartnerkey],
	[pt_chday],
	[pt_chpkkey],
	[pt_chprkey],
	[pt_chbackday],
	[pt_chbackpkkey],
	[pt_chbackprkey],
	[pt_childagefrom],
	[pt_childageto],
	[pt_childagefrom2],
	[pt_childageto2],
	[pt_main],
	[pt_tourvalid],
	[pt_chbackkeys],
	[pt_chdirectkeys],
	[pt_hddetails],
	[pt_topricefor],
	[pt_directFlightAttribute],
	[pt_backFlightAttribute],
	[pt_hrkey]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
	if exists(select top 1 1 from SystemSettings where SS_ParmName = ''SYSPriceRemoverPluginUrl'') and not exists (select * from sys.indexes where object_id = object_id(N''' + @tablename + ''') and name = N''x_pricesFilter'')
	CREATE NONCLUSTERED INDEX [x_pricesFilter]
	ON [dbo].[' + @tablename + '] ([pt_isenabled], [pt_cnkey], [pt_tourkey],[pt_hdkey], [pt_tourdate], 
			    	    			[pt_nights], [pt_rmkey], [pt_rckey], [pt_ackey], [pt_pnkey])
	INCLUDE (pt_price, pt_rate)
end'
	
	exec(@sql)
end
GO

GRANT EXECUTE on [dbo].[mwCreatePriceTableIndexes] to public
GO
/*********************************************************************/
/* end sp_mwCreatePriceTableIndexes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwCreatePriceTableIndexes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwEnablePriceTourNewSinglePrice.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwEnablePriceTourNewSinglePrice.sql */
/*********************************************************************/
if exists (select * from [dbo].sysobjects where id = object_id(N'[dbo].[mwEnablePriceTourNewSinglePrice]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[mwEnablePriceTourNewSinglePrice]
GO

CREATE procedure [dbo].[mwEnablePriceTourNewSinglePrice] 
(
	@toKey int,
	@tempDataTableName varchar (1024)
)
as

begin

	if ISNULL(@tokey, 0) = 0
	return

	declare @today varchar(10)
	set @today = '''' + convert(varchar(10),getdate(), 112 ) + ''''

	declare @cityFromKey int
	declare @countryKey int

	select top 1 @countryKey = tl_cnkey, @cityFromKey = tl_ctdeparturekey
	from TurList with(nolock) join tp_tours with(nolock) on to_trkey = tl_key
	where to_key = @toKey

	declare @mwSinglePrice nvarchar(10)
	select @mwSinglePrice = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePrice'), N'0')

	if (dbo.mwReplIsPublisher() > 0)
		set @mwSinglePrice = '0'

	if @mwSinglePrice = '0'
	return

	declare @tableName varchar(100)

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
	 
	if (@mwSearchType = 0)
		set @tableName = 'dbo.mwPriceDataTable'
	else
		set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)

	declare @sql varchar(8000)
	declare @where varchar(8000)

	declare @mwSinglePriceType nvarchar(10) -- 'last' or 'min'
	select @mwSinglePriceType = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceType'), N'last') 

	declare @mwSinglePriceAllTours nvarchar(10) -- single price for tour
	select @mwSinglePriceAllTours = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllTours'), N'0') 

	declare @mwSinglePriceAllHotelPrt nvarchar(10) -- single price for hotel partner
	select @mwSinglePriceAllHotelPrt = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllHotelPrt'), N'0') 

	declare @mwSinglePriceAllFlightPrt nvarchar(10) -- single price for flight partner
	select @mwSinglePriceAllFlightPrt = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllFlightPrt'), N'0')

	declare @mwSinglePriceAllTourTypes nvarchar(10) -- single price for tour type
	select @mwSinglePriceAllTourTypes = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllTourTypes'), N'0')

	declare @mwSinglePriceAllDeparts nvarchar(10) -- single price for depart from
	select @mwSinglePriceAllDeparts = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllDeparts'), N'1')

	set @where = ' main.pt_main > 0 and main.pt_tourdate >= getdate() ' +
			 ' and main.pt_hdkey = temp.pt_hdkey ' + 
			 ' and main.pt_rmkey = temp.pt_rmkey ' + 
			 ' and main.pt_rckey = temp.pt_rckey ' + 
			 ' and main.pt_ackey = temp.pt_ackey ' + 
			 ' and main.pt_pnkey = temp.pt_pnkey ' + 
			 ' and main.pt_tourdate = temp.pt_tourdate ' + 
			 ' and main.pt_days = temp.pt_days ' + 
			 ' and main.pt_nights = temp.pt_nights ' 
						 
	if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
		set @where = @where + ' and main.pt_hdpartnerkey = temp.pt_hdpartnerkey ' 

	if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
		set @where = @where + ' and isnull(main.pt_chprkey, -1) = isnull(temp.pt_chprkey, -1) ' 

	if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
		set @where = @where + ' and main.pt_tourtype = temp.pt_tourtype ' 

	if(@mwSinglePriceAllDeparts = '0') -- single price for departfrom
		set @where = @where + ' and main.pt_ctkeyfrom = temp.pt_ctkeyfrom ' 

	if(@mwSinglePriceType = 'min')
		set @where = @where + ' and main.pt_price >= temp.pt_price ' 
	else if (@mwSinglePriceType = 'last')
		set @where = @where + ' and main.pt_tourcreated < temp.pt_tourcreated '

	if(@mwSinglePriceAllTours = '0')
		set @where = @where + ' and main.pt_tourkey = ' + ltrim(str(@tokey))
	else
		set @where = @where + ' and main.pt_tourkey != '+ ltrim(str(@tokey))

	create table #keysTable (xKey int, xPriceKey bigint, xTourKey int)
			
	set @sql = 'insert into #keysTable 
				select main.pt_key, main.pt_priceKey, main.pt_tourkey from ' + @tableName + ' main with(nolock), ' + @tempDataTableName + ' temp with(nolock) where ' + @where

	--print @sql
	exec(@sql)

	set @sql = 'update ' + @tableName + ' set pt_isenabled = 0, pt_autodisabled = 1 where pt_key in (select xKey from #keysTable)'
	--print @sql
	exec(@sql)

	-- выключаем вслед за ними соответствующие данные из tp_turdates
	set @sql = '
			update updturdates with(rowlock)
			set td_autodisabled = 1
			from tp_turdates updturdates
			where td_autodisabled = 0 and
				exists(select top (1) 1 from ' + @tableName + ' with(nolock) 
						where ' + @tableName + '.pt_tourkey = updturdates.td_tokey
								and ' + @tableName + '.pt_tourdate = updturdates.td_date
								and ' + @tableName + '.pt_pricekey in (select xPriceKey from #keysTable with (nolock)))
			and not exists (select top (1) 1 from ' +@tableName + ' with(nolock) 
						where ' + @tableName+ ' .pt_tourkey = updturdates.td_tokey
								and ' + @tableName + '.pt_tourdate = updturdates.td_date 
								and ' + @tableName + '.pt_isenabled = 1)'

	--print @sql
	exec (@sql)

	drop table #keysTable

	update dbo.mwSpoDataTable set sd_isenabled = 1 where sd_tourkey = @tokey
		
end

GO

GRANT exec ON [dbo].[mwEnablePriceTourNewSinglePrice] TO PUBLIC
GO

/*********************************************************************/
/* end sp_mwEnablePriceTourNewSinglePrice.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwEnablePriceTourNewSinglePrice.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillPriceListDetails.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwFillPriceListDetails.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwFillPriceListDetails]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[mwFillPriceListDetails]
GO

CREATE PROCEDURE [dbo].[mwFillPriceListDetails]
(
	@tokey int = null
)
AS
BEGIN
	--<VERSION>2009.2.21</VERSION>
	--<DATE>2014-10-08</DATE>

	declare @mwNeedFillPriceListDetails varchar(50)
	select @mwNeedFillPriceListDetails = ltrim(rtrim(isnull(SS_ParmValue, '0'))) from dbo.systemsettings with(nolock)
	where SS_ParmName = 'mwFillPriceListDetails'

	if @mwNeedFillPriceListDetails = '0'
		return
	
	declare @mod as varchar(1)

	if dbo.mwReplIsSubscriber() > 0
		set @mod = '#'
	else
		set @mod = ''

	declare @sql as nvarchar(max)
	declare @hotelCityNames varchar(256), @hotelKeys nvarchar(256), @hotelCityKeys nvarchar(256),
		@airlineNames nvarchar(256), @airlineKeys nvarchar(256), @serviceClassesNames varchar(8000)

	-- ============ @hotelCityNames ============
	set @sql = '
	set @hotelCityNames = N''''
	select @hotelCityNames = @hotelCityNames + rtrim(ltrim(ct_name)) + N'', ''
	from (select distinct ct_name 
		from CityDictionary with(nolock)
		where CT_Key in (select distinct ts_ctkey from #.tp_services with(nolock) where ts_svkey = 3 and ts_tokey = @tokey)
	) as tbl 
	order by tbl.ct_name

	declare @len int
	set @len = len(@hotelCityNames)
	if(@len > 0)
		set @hotelCityNames = substring(@hotelCityNames, 1, @len - 1)'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@hotelCityNames varchar(256) output, @tokey int', @hotelCityNames=@hotelCityNames, @tokey=@tokey

	-- ============ @hotelKeys ============
	set @sql = '
	set @hotelKeys = N''''

	select @hotelKeys = @hotelKeys + rtrim(ltrim(str(tbl.ts_ctkey))) + N'', '' from (select distinct ts_ctkey from #.tp_services with(nolock) where ts_svkey = 3 and ts_tokey = @tokey) tbl 

	declare @len int
	set @len = len(@hotelKeys)
	if(@len > 0)
		set @hotelKeys = substring(@hotelKeys, 1, @len - 1)'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@hotelKeys varchar(256) output, @tokey int', @hotelKeys=@hotelKeys, @tokey=@tokey
	
	-- ============ @hotelCityKeys ============
	set @sql = '
	set @hotelCityKeys = N''''

	select @hotelCityKeys = @hotelCityKeys + rtrim(ltrim(str(tbl.ts_ctkey))) + N'', '' from (select distinct ts_ctkey from #.tp_services with(nolock) where ts_tokey = @tokey and ts_svkey = 3) tbl 

	declare @len int
	set @len = len(@hotelCityKeys)
	if(@len > 0)
		set @hotelCityKeys = substring(@hotelCityKeys, 1, @len - 1)'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@hotelCityKeys varchar(256) output, @tokey int', @hotelCityKeys=@hotelCityKeys, @tokey=@tokey

	-- ============ @airlineNames ============
	set @sql = '
	set @airlineNames = N''''
	
	select @airlineNames = @airlineNames + rtrim(ltrim((select top 1 al_name from dbo.charter  with(nolock), dbo.airline  with(nolock) where al_code=ch_airlinecode and ch_key=ti_chkey)))
	+ N'', '' from (select distinct ti_chkey as ti_chkey from #.tp_lists with(nolock) where ti_tokey = @tokey and ti_chkey is not null) tbl 
	
	declare @len int
	set @len = len(@airlineNames)
	if(@len > 0)
		set @airlineNames = substring(@airlineNames, 1, @len - 1)'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@airlineNames varchar(256) output, @tokey int', @airlineNames=@airlineNames, @tokey=@tokey

	-- ============ @airlineKeys ============
	set @sql = '
	set @airlineKeys = N''''
	select @airlineKeys = @airlineKeys + rtrim(ltrim(str(tbl.ti_chkey))) + N'', '' from (select distinct ti_chkey from #.tp_lists with(nolock) where ti_tokey = @tokey and ti_chkey is not null) tbl 
	
	declare @len int
	set @len = len(@airlineKeys)
	if(@len > 0)
		set @airlineKeys = substring(@airlineKeys, 1, @len - 1)'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@airlineKeys varchar(256) output, @tokey int', @airlineKeys=@airlineKeys, @tokey=@tokey

	-- ============ @serviceClassesNames ============
	declare @servicesDelimeter VARCHAR(5), @detailsDelimeter VARCHAR(5)
	set @servicesDelimeter = ';'
	set @detailsDelimeter = ','

	set @sql = '
	declare @TourDate datetime
	select @TourDate = to_datebegin 
	from tp_lists 
	inner join tp_tours on ti_tokey=to_key 
	where to_key=@tokey

	set @serviceClassesNames = ''''
	select @serviceClassesNames = @serviceClassesNames + 
		case when CHARINDEX (@servicesDelimeter + ltrim(rtrim(sv_name)), @serviceClassesNames) = 0
			 then @servicesDelimeter + ltrim(rtrim(sv_name)) + '' : '' + sv_detail
			 else case when sv_key=3 then '''' else @detailsDelimeter + sv_detail end
		end
	from (select distinct
			sv_name, 
			sv_key, 
			case when sv_key=1 then isnull(ch_airlinecode, '''') + isnull(ch_flight, '''') + '' '' + isnull(ch_portcodefrom, '''') + ''('' + isnull(cityfrom.ct_name, '''') + '')''
					+ ''-'' + isnull(ch_portcodeto, '''') + ''('' + isnull(cityto.ct_name, '''') + '')''
				when sv_key=2 then isnull(tf_name, '''')
				when sv_key=3 then ''Отель(питание по программе)''
				when sv_key=4 then ed_name
				when sv_key>4 then IsNull(sl_name,'''')
			end sv_detail,
			ts_day
		from #.tp_services with(nolock)
			inner join #.tp_servicelists with(nolock) on tl_tskey = ts_key
			inner join service with(nolock) on sv_key = ts_svkey
			left join charter with(nolock) on ch_key=ts_code and sv_key=1
			left join citydictionary cityfrom with(nolock) on cityfrom.ct_key=ch_citykeyfrom and sv_key=1
			left join citydictionary cityto with(nolock) on cityto.ct_key=ch_citykeyto and sv_key=1
			left join transfer with(nolock) on tf_key=ts_code and sv_key=2
			left join excurdictionary with(nolock) on ed_key=ts_code and sv_key=4
			left join servicelist with(nolock) on sl_key=ts_code and sv_key>4
		where tl_tokey = @tokey and ((ts_attribute & 32832) = 0)) tbl
	order by sv_key,ts_day

	set @serviceClassesNames = isnull(@serviceClassesNames, '''')
	if len(@serviceClassesNames) > 0
		set @serviceClassesNames = substring(@serviceClassesNames, len(@servicesDelimeter) + 1, len(@serviceClassesNames) - len(@servicesDelimeter))
	'

	set @sql = replace(@sql, '#.', @mod)
	exec sp_executesql @sql, N'@serviceClassesNames varchar(256) output, @tokey int, @servicesDelimeter VARCHAR(5), @detailsDelimeter VARCHAR(5)',
		@serviceClassesNames=@serviceClassesNames output, @tokey=@tokey, @servicesDelimeter=@servicesDelimeter, @detailsDelimeter=@detailsDelimeter
	
	if not @tokey is null
	begin
		-- наполним детализацию только по переданному туру
		if not exists(select 1 from PriceListDetails where pld_tokey = @tokey)
		begin
			insert into PriceListDetails(pld_tokey)
			values(@tokey)
		end

		-- наполним таблицу с детализацией тура
		update PriceListDetails
		set [PLD_HotelCityNames] = @hotelCityNames,
			[PLD_HotelKeys] = @hotelKeys,
			[PLD_HotelCityKeys] = @hotelCityKeys,
			[PLD_AirlineNames] = @airlineNames,
			[PLD_AirlineKeys] = @airlineKeys,
			[PLD_ServiceClassesNames] = @serviceClassesNames
		where pld_tokey = @tokey
	end
	else
	begin
		-- наполним детализацию только по актульным турам без детализации
		declare @tourKeys table(tokey int)

		insert into @tourKeys(tokey)
		select to_key from tp_tours where to_isenabled = 1 and to_datevalid > getdate()
		and not exists(select 1 from PriceListDetails where pld_tokey = to_key)

		insert into PriceListDetails(pld_tokey)
		select tokey from @tourKeys

		-- наполним таблицу с детализацией тура
		update PriceListDetails
		set [PLD_HotelCityNames] = @hotelCityNames,
			[PLD_HotelKeys] = @hotelKeys,
			[PLD_HotelCityKeys] = @hotelCityKeys,
			[PLD_AirlineNames] = @airlineNames,
			[PLD_AirlineKeys] = @airlineKeys,
			[PLD_ServiceClassesNames] = @serviceClassesNames
		where pld_tokey in (select tokey from @tourKeys)
	end
END

GO
/*********************************************************************/
/* end sp_mwFillPriceListDetails.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillPriceListDetails.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillPriceTable.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwFillPriceTable.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwFillPriceTable')
	drop proc dbo.mwFillPriceTable
go

create procedure [dbo].[mwFillPriceTable] 
	@dataTableName varchar (1024),
	@countryKey int,
	@cityFromKey int
as
--<VERSION>9.2.21.2</VERSION>
--<DATE>2014-07-24</DATE>

declare @mwSearchType int
select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
where SS_ParmName = 'MWDivideByCountry'

declare @tableName varchar (1024)
if @mwSearchType = 0
	set @tableName = 'mwPriceDataTable'
else
	set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)
declare @sql varchar (8000)

set @sql = 'alter table @dataTableName add isProcessed bit null default(null)
create index IX_IsProcessed on @dataTableName(isProcessed)'

set @sql = replace(@sql, '@dataTableName', @dataTableName)

exec (@sql)

set @sql = '
	while 1=1
	begin
		-- определим записи к копированию в поисковую таблицу
		update top (50000) @dataTableName
		set isProcessed = 0
		where isProcessed is null

		if @@rowcount = 0
			break

		-- вставим эти записи
		insert into @tableName (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_ctkeyto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_rate],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys,
			pt_topricefor,
			pt_hddetails,
			pt_directFlightAttribute,
			pt_backFlightAttribute)
		select
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_ctkeyto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_rate],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys,
			pt_topricefor,
			pt_hddetails,
			pt_directFlightAttribute,
			pt_backFlightAttribute
		from @dataTableName as tab with (nolock)
		where tab.isProcessed = 0

		-- пометим записи как вставленные
		update @dataTableName
		set isProcessed = 1
		where isProcessed = 0

	end
'

set @sql = replace(@sql, '@tableName', @tableName)
set @sql = replace(@sql, '@dataTableName', @dataTableName)

exec (@sql)
go

grant exec on dbo.mwFillPriceTable to public
go

/*********************************************************************/
/* end sp_mwFillPriceTable.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillPriceTable.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillTP.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwFillTP.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwFillTP]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwFillTP]
GO

CREATE procedure [dbo].[mwFillTP] (@tokey int, @calcKey int = null)
as
begin
	-- <date>2014-10-24</date>
	-- <version>2009.2.21</version>

	if dbo.mwReplIsSubscriber() = 0
	begin
		return
	end

	declare @sql varchar(4000)
	
	declare @where as varchar(4000)
	declare @whereCycle as varchar(4000)

	declare @tokeyStr varchar (20)
	set @tokeyStr = cast(@tokey as varchar(20))

	declare @calcKeyStr varchar (20)
	set @calcKeyStr = cast(@calcKey as varchar(20))
	
	-------------- TP_TOURS
	if dbo.mwReplIsSubscriber() > 0 and len(dbo.mwReplPublisherDB()) > 0
		delete from dbo.tp_tours where to_key = @calcKey
		
	if not exists(select 1 from dbo.tp_tours with(nolock) where to_key = @tokey)
	begin
		set @sql =
		'insert into dbo.tp_tours (
			[TO_Key],
			[TO_TRKey],
			[TO_Name],
			[TO_PRKey],
			[TO_CNKey],
			[TO_Rate],
			[TO_DateCreated],
			[TO_DateValid],
			[TO_PriceFor],
			[TO_OpKey],
			[TO_XML],
			[TO_DateBegin],
			[TO_DateEnd],
			[TO_IsEnabled],
			[TO_PROGRESS],
			[TO_UPDATE],
			[TO_UPDATETIME],
			[TO_DateValidBegin],
			[TO_CalculateDateEnd],
			[TO_PriceCount],
			[to_attribute],
			[TO_MinPrice],
			[TO_HotelNights]
			)
		SELECT *
		FROM OPENQUERY (mt,''SELECT 
								[TO_Key],
								[TO_TRKey],
								[TO_Name],
								[TO_PRKey],
								[TO_CNKey],
								[TO_Rate],
								[TO_DateCreated],
								[TO_DateValid],
								[TO_PriceFor],
								[TO_OpKey],
								[TO_XML],
								[TO_DateBegin],
								[TO_DateEnd],
								[TO_IsEnabled],
								[TO_PROGRESS],
								[TO_UPDATE],
								[TO_UPDATETIME],
								[TO_DateValidBegin],
								[TO_CalculateDateEnd],
								[TO_PriceCount],
								[to_attribute],
								[TO_MinPrice],
								[TO_HotelNights]
							 FROM dbo.tp_tours with(nolock)
							 WHERE to_key = ' + @tokeyStr + ''')'
							 
		exec (@sql)
	end
	-------------- TP_TOURS

	-------------- TP_SERVICES
	INSERT into Debug (db_Text)
	VALUES ('Начало заполнения временной таблицы #tp_services')

	delete dbo.tp_services where ts_tokey = @tokey
	set @sql =
		'insert into #tp_services (
			[TS_Key],
			[TS_TOKey],
			[TS_SVKey],
			[TS_Code],
			[TS_SubCode1],
			[TS_SubCode2],
			[TS_CNKey],
			[TS_CTKey],
			[TS_Day],
			[TS_Days],
			[TS_Men],
			[TS_Name],
			[TS_OpPartnerKey],
			[TS_OpPacketKey],
			[TS_Attribute],
			[TS_TEMPGROSS],
			[TS_CHECKMARGIN],
			[TS_CalculatingKey]
			)
			select *
		from OPENQUERY (mt,''SELECT 
								[TS_Key],
								[TS_TOKey],
								[TS_SVKey],
								[TS_Code],
								[TS_SubCode1],
								[TS_SubCode2],
								[TS_CNKey],
								[TS_CTKey],
								[TS_Day],
								[TS_Days],
								[TS_Men],
								[TS_Name],
								[TS_OpPartnerKey],
								[TS_OpPacketKey],
								[TS_Attribute],
								[TS_TEMPGROSS],
								[TS_CHECKMARGIN],
								[TS_CalculatingKey]
							FROM tp_services with(nolock)
							WHERE TS_TOKey = ' + @tokeyStr

	if @calcKey is not null
		set @sql = @sql + ' and TS_CalculatingKey = ' + @calcKeyStr

	set @sql =  @sql + ''')'
	exec (@sql)

	INSERT into Debug (db_Text)
		VALUES ('Окончание заполнения временной таблицы #tp_services')
	-------------- TP_SERVICES

	-------------- TP_PRICES
	INSERT into Debug (db_Text)
	VALUES ('Начало заполнения временной таблицы #tp_prices')	
	
	delete from dbo.tp_prices where tp_tokey = @tokey
	set @sql = 
	'insert into #tp_prices (
		[TP_Key],
		[TP_TOKey],
		[TP_DateBegin],
		[TP_Gross],
		[TP_TIKey],
		[TP_CalculatingKey]
		)	
	select *
	from OPENQUERY (mt,''SELECT 
							[TP_Key],
							[TP_TOKey],
							[TP_DateBegin],
							[TP_Gross],
							[TP_TIKey],
							[TP_CalculatingKey]
						FROM tp_prices with(nolock)
						WHERE TP_TOKey = ' + @tokeyStr

	if @calcKey is not null
		set @sql = @sql + ' and TP_CalculatingKey = ' + @calcKeyStr
		
	set @sql =  @sql + ''')'
	exec (@sql)
	
	INSERT into Debug (db_Text)
		VALUES ('Окончание заполнения временной таблицы #tp_prices ')
	-------------- TP_PRICES
	
	-------------- TP_SERVICELISTS
	INSERT into Debug (db_Text)
	VALUES ('Начало заполнения временной таблицы #tp_serviceLists')

	delete from dbo.tp_servicelists where tl_tokey = @tokey
	set identity_insert #tp_serviceLists on
	set @sql = 
	'insert into #tp_serviceLists (
		[TL_Key],
		[TL_TOKey],
		[TL_TSKey],
		[TL_TIKey],
		[TL_CalculatingKey]
		)	
	select
		[TL_Key],
		[TL_TOKey],
		[TL_TSKey],
		[TL_TIKey],
		[TL_CalculatingKey]
	from OPENQUERY (mt,''SELECT 
							[TL_Key],
							[TL_TOKey],
							[TL_TSKey],
							[TL_TIKey],
							[TL_CalculatingKey]
							FROM tp_serviceLists with(nolock)
						WHERE TL_TOKey = ' + @tokeyStr

	if @calcKey is not null
		set @sql = @sql + ' and TL_CalculatingKey = ' +  @calcKeyStr
	
	set @sql =  @sql + ''')'
	exec (@sql)
		
	INSERT into Debug (db_Text)
		VALUES ('Окончание заполнения временной таблицы #tp_serviceLists')
	-------------- TP_SERVICELISTS
	
end
GO

GRANT EXEC ON [dbo].[mwFillTP] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwFillTP.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwFillTP.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetCalculatedPriceInfo.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetCalculatedPriceInfo.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[mwGetCalculatedPriceInfo]') AND xtype in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetCalculatedPriceInfo]
GO

--<VERSION>9.2.21.0</VERSION>
--<DATE>2014-10-15</DATE>

-- Версия sp_GetPricePage для динамического ценообразования
CREATE PROCEDURE [dbo].[mwGetCalculatedPriceInfo]
	@priceKey	bigint,
	@includeTourDescriptionText	tinyint,
	@includeBookingConditionsText	tinyint
AS
begin
	select TP_DateBegin as TourDate
		,  TI_TotalDays as TotalDays
		,  TI_Nights as Nights
		,  TO_Key as PriceTourKey
		,  TO_Name as PriceTourName
		,  TL_Key as TourKey
		,  TL_Name as TourName
		,  CASE WHEN @includeBookingConditionsText = 1 THEN TL_Description ELSE '' END as BookingConditions
		,  CASE WHEN @includeTourDescriptionText = 1 THEN TL_DopDesc ELSE '' END as TourDescription
		,  CN_Key as CountryKey
		,  CN_Name as CountryName
		,  dbo.mwGetServiceClassesNames(TI_Key, 1,', ', 1) as IncludedServices
	from TP_Prices with(nolock)
		join TP_Lists with(nolock) on TP_TIKey = TI_Key
		join TP_Tours with(nolock) on TP_TOKey = TO_Key
		join tbl_TurList on TO_TRKey = TL_Key
		join tbl_Country on TO_CNKey = CN_Key
	where TP_Key = @priceKey
end

GO

GRANT EXECUTE ON [dbo].[mwGetCalculatedPriceInfo] TO Public
GO
/*********************************************************************/
/* end sp_mwGetCalculatedPriceInfo.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetCalculatedPriceInfo.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetMinNearestTourPrices.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetMinNearestTourPrices.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[mwGetMinNearestTourPrices]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[mwGetMinNearestTourPrices]
GO

-- =============================================
-- Author:		Golubinsky
-- Create date: 26.03.2013
-- Description:	Возвращает минимальные цены по туру на ближайшую дату
-- =============================================
CREATE PROCEDURE [dbo].[mwGetMinNearestTourPrices] 
(
	@TourListKey int, 
	@RoomTypeKey int = null
)
AS
BEGIN

--<VERSION>ALL</VERSION>
--<DATE>2014-08-11</DATE>

	CREATE TABLE #result
	(
			[HotelKey] int					-- ключ отеля
			,[HotelName] nvarchar(100)		-- название отеля
			,[HotelCategory] nvarchar(100)	-- категория отеля
			,[TourMinPrice] decimal			-- минимальная цена
			,[Nights] int					-- количество ночей
			,[Days] int						-- количество дней
			,[Pansion] nvarchar(100)		-- питание в отеле
			,[PansionKey] int				-- ключ питания в отеле
			,[TourDate] datetime			-- дата заезда
			,[TourKey] int					-- ключ рассчитанного тура
	)
	
	-- проверка секционированности таблицы цен туров
	DECLARE @mwSearchType AS INT
	SELECT @mwSearchType=isnull(SS_ParmValue,1) FROM dbo.systemsettings 
	WHERE SS_ParmName='MWDivideByCountry'
	
	-- имя таблицы поиска
	DECLARE @searchTableName AS NVARCHAR(25)
	SET @searchTableName = N'mwPriceDataTable'
	
	IF(@mwSearchType <> 0)
	BEGIN
		-- таблица секционирована
		-- поиск ключа страны и города по ключу тура для получения имени
		-- секционированной таблицы цен туров
		DECLARE @CountryKey AS INT
		DECLARE @CityKey AS INT
		
		SELECT top 1 @CountryKey = tpt.TO_CNKey, @CityKey = tl.TL_CTDepartureKey
		FROM TP_Tours tpt
		INNER JOIN tbl_TurList tl
		ON tpt.TO_TRKey = tl.TL_KEY
		WHERE tl.TL_KEY = @TourListKey
		
		SET @searchTableName = dbo.mwGetPriceTableName(@CountryKey, @CityKey)
		
	END
	
	-- построение запроса
	DECLARE @QueryText AS NVARCHAR(4000)
	
	-- минимальная дата	
	SET @QueryText = 'DECLARE @minTourDate as datetime 	
	select top 1 @minTourDate = p.pt_tourdate from ' + @searchTableName + ' p
	where p.pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey) +
	' AND p.pt_tourdate > ''' + CONVERT(NVARCHAR(4000), GETUTCDATE(), 102) + ''''
	
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN
	
		SET @QueryText = @QueryText + ' AND p.pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey)
	
	END
	
	SET @QueryText = @QueryText + ' ORDER BY p.pt_tourdate asc; '
	
	-- цены на эту дату
	SET @QueryText = @QueryText + ' SELECT l.[HotelKey], r.[HotelName]
				, r.[HotelCategory]	
				, case 
					when r.pt_topricefor = 1 then r.[TourMinPrice]/r.[RM_NPLACES]	-- цены за номер, делим на количество мест
				 	else r.[TourMinPrice]											-- цены за человека
				  end as [TourMinPrice]
				, r.[Nights]		
				, r.[Days]		
				, r.[Pansion]		
				, r.[PansionKey]
				, r.[PansionCode]
				, r.[TourDate]
				, r.[PriceKey]
				, r.[Rate]
				, r.[HotelDescriptionUrl]
				, r.[CountryKey]
				, r.[DepartFromCityKey]
				, r.[TourKey]
from
( select pp.pt_HDKEY [HotelKey], min(pp.pt_price) pt_price
				FROM mwPriceDataTable pp WITH (NOLOCK)
				WHERE pp.pt_tourdate = @minTourDate 
				AND pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey)
				
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN

		SET @QueryText = @QueryText + ' AND pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey) + ' '

	END				
				
			SET @QueryText = @QueryText	 + ' GROUP BY pp.pt_hdkey, pp.pt_tourdate ) as l
left join (
SELECT 
				  h.HD_KEY [HotelKey]
				, hd_name [HotelName]
				, hd_stars [HotelCategory]	
				, p.pt_price [TourMinPrice]
				, pt_nights [Nights]		
				, pt_days [Days]		
				, pn_name [Pansion]		
				, p.pt_pnkey [PansionKey]
				, pp.pn_code [PansionCode]
				, p.pt_tourdate [TourDate]
				, MAX(p.pt_pricekey) [PriceKey]
				, p.pt_Rate [Rate]
				, h.HD_HTTP [HotelDescriptionUrl]
				, rr.RM_NPLACES as [RM_NPLACES]
				, p.pt_topricefor as [pt_topricefor]
				, p.pt_cnkey as [CountryKey]
				, p.pt_ctkeyfrom as [DepartFromCityKey]
				, p.pt_tourkey as [TourKey]
			FROM mwPriceDataTable p WITH (NOLOCK)
				LEFT JOIN HotelDictionary h WITH (NOLOCK) ON pt_hdkey = hd_key
				LEFT JOIN Rooms rr on p.pt_rmkey = rr.RM_KEY
				LEFT JOIN Pansion pp on p.pt_pnkey = pp.pn_key
			WHERE p.pt_tourdate = @minTourDate
			AND pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey)
			
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN

		SET @QueryText = @QueryText + ' AND pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey) + ' '

	END
			
		SET @QueryText = @QueryText + 'GROUP BY h.HD_KEY, hd_name, hd_stars, p.pt_price, pt_nights, pt_days, pp.pn_name,
						p.pt_pnkey, pp.pn_code, p.pt_tourdate, p.pt_Rate, h.hd_http, rr.RM_NPLACES,
						p.pt_topricefor, p.pt_cnkey, p.pt_ctkeyfrom, p.pt_tourkey) as r
on r.[HotelKey] = l.[HotelKey] and l.[pt_price] = r.[TourMinPrice]';
							
		-- выполнение запроса, наполнение выходной таблицы
	exec (@QueryText)
	
END

GO

GRANT EXECUTE ON [dbo].[mwGetMinNearestTourPrices] TO [public]
GO
/*********************************************************************/
/* end sp_mwGetMinNearestTourPrices.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetMinNearestTourPrices.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetSearchFilterDates.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetSearchFilterDates.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwGetSearchFilterDates]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwGetSearchFilterDates]
GO

--<VERSION>9.2.21.1</VERSION>
--<DATE>2015-01-22</DATE>
CREATE PROCEDURE [dbo].[mwGetSearchFilterDates]
	@tourKeys varchar(1000) = '',
	@datesInterval int = 30
AS
BEGIN
	SET NOCOUNT ON
		
	DECLARE @currentDate DATETIME
	SET @currentDate = CONVERT(DATETIME, CONVERT(VARCHAR(20), GETDATE(), 101));


	create table #tourKeys 
	(
		xKey int identity(1,1) primary key,
		xToKey int
	)
	
	create table #dates
	(
		xKey int identity(1,1) primary key,
		xToKey int,
		xDate datetime
	)
	
	insert into #tourKeys (xToKey)
	SELECT Item AS Id
	FROM dbo.DelimitedSplit(@tourKeys, ',')
	
	insert into #dates (xToKey, xDate)
	select td_tokey, td_date
	from tp_turdates
	where (td_tokey in (select xToKey from #tourKeys) or not exists (select 1 from #tourKeys))
	and TD_Date >= @currentDate
	AND TD_Date <= DATEADD(DAY, @datesInterval - 1, @currentDate)
	
	SELECT DISTINCT CONVERT(VARCHAR(10), xDate, 101) AS [Date],
		SUBSTRING(dateTourKeys, 1, LEN(dateTourKeys) - 1) AS TourKeys
	FROM #dates AS t1
	CROSS APPLY (
		SELECT CAST(xToKey AS VARCHAR) + ','
		FROM #dates AS t2
		WHERE t2.xDate = t1.xDate
		FOR XML PATH('')
		) D(dateTourKeys)
	WHERE dateTourKeys IS NOT NULL
	ORDER BY CONVERT(VARCHAR(10), xDate, 101)
END
GO

GRANT EXECUTE ON [dbo].[mwGetSearchFilterDates] TO Public
GO
/*********************************************************************/
/* end sp_mwGetSearchFilterDates.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetSearchFilterDates.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetServiceVariants.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetServiceVariants.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwGetServiceVariants')
	drop proc dbo.mwGetServiceVariants
go

--<VERSION>9.2.21.1</VERSION>
--<DATE>2014-10-03</DATE>

create procedure [dbo].[mwGetServiceVariants]
	@serviceDays int,
	@svKey	int,
	@pkKey int,
	@dateBegin varchar(10),
	@tourNDays smallint,
	@cityFromKey	int,
	@cityToKey	int,
	@additionalFilter varchar(1124),
	@tourKey int,
	@showCalculatedCostsOnly int
as
begin
	
	if (isnull(@serviceDays, 0)<=0 and @svKey != 3 and @svKey != 8)
		Set @serviceDays = 1
		
	-- 7693 neupokoev 29.08.2012
	-- Заточка под ДЦ
	declare @selectClause varchar(300)
	declare @fromClause varchar(300)
	declare @whereClause varchar(6000)
	declare @isNewReCalculatePrice bit

	-- Проверка на режим динамического ценообразования
	set @isNewReCalculatePrice = 0
	if (exists( select top 1 1 from SystemSettings with(nolock) where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))
		set @isNewReCalculatePrice = 1
	
	if (@isNewReCalculatePrice = 0)
	begin
		-- CRM04241L4F2 20.03.2012 kolbeshkin сделал distinct по CS_ID, т.к. были случаи дублирования одних и тех же записей в результирующем наборе
		set	@selectClause = ' SELECT CS_Code, CS_SubCode1, CS_SubCode2, CS_PrKey, CS_PkKey, CS_Profit, CS_Type, CS_Discount, CS_Creator, CS_Rate, CS_Cost 
		from costs
		where CS_ID in (select distinct cs1.cs_id '
		set	@fromClause   = ' FROM COSTS cs1 WITH(NOLOCK) '
		set	@whereClause  = ''
	end
	else
	begin 
		set	@selectClause = ' SELECT cs1.CS_Code, cs1.CS_SubCode1, cs1.CS_SubCode2, cs1.CS_PrKey, cs1.CS_PkKey, cs1.CS_Profit, cs1.CS_Type, cs1.CS_Discount, cs1.CS_Creator, cs1.CS_Rate, cs1.CS_Cost, CO_DateActive '
		set	@fromClause   = ' FROM COSTS cs1 WITH(NOLOCK) INNER JOIN COSTOFFERS WITH(NOLOCK) ON cs1.CS_Coid = CO_Id INNER JOIN Seasons WITH(NOLOCK) ON CO_SeasonId = SN_Id'
		set	@whereClause  = ' CO_State = 1 AND GETDATE() BETWEEN ISNULL(CO_SaleDateBeg, ''1900-01-01'') AND ISNULL(CO_SaleDateEnd, ''2050-01-01'') AND ISNULL(SN_IsActive, 0) = 1 AND '
	end
	
	set		@additionalFilter = replace(@additionalFilter, 'CS_', 'cs1.CS_')
		
	declare @orderClause varchar(100)
		set @orderClause  = 'CS_long'
	
	--MEG00027493 Paul G 15.07.2010
	if (@showCalculatedCostsOnly = 1)
	begin
		set @whereClause = @whereClause +
			'EXISTS(SELECT 1 FROM TP_SERVICES WITH(NOLOCK) WHERE TS_CODE=cs1.CS_CODE 
				AND TS_SVKEY=cs1.CS_SVKEY 
				AND TS_SUBCODE1=cs1.CS_SUBCODE1 
				AND TS_SUBCODE2=cs1.CS_SUBCODE2 
				AND TS_OPPARTNERKEY=cs1.CS_PRKEY
				AND TS_OPPACKETKEY=cs1.CS_PKKEY
				AND TS_TOKEY=(SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE TO_TRKEY='+ convert(varchar(50), @tourKey) +')) AND 
			'
	end
	
	set @whereClause = @whereClause + ' cs1.CS_SVKEY = ' + cast(@svKey as varchar)
	set @whereClause = @whereClause + ' AND cs1.CS_PKKEY = ' + cast(@pkKey as varchar)
	
	-- 8233 tfs neupokoev 
	-- При подборе вариантов не учитывались даты начала и окончания продаж
	if (@isNewReCalculatePrice = 0)
		set @whereClause = @whereClause + ' AND ' + 'GETDATE()' + ' BETWEEN ISNULL(cs1.CS_DATESELLBEG, ''1900-01-01'') AND ISNULL(cs1.CS_DATESELLEND, ''9000-01-01'') '
	
	set @whereClause = @whereClause + ' AND ''' + @dateBegin + ''' BETWEEN ISNULL(cs1.CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(cs1.CS_CHECKINDATEEND, ''9000-01-01'') ' + @additionalFilter
	
	if (@svKey=1)
	begin			
		set @whereClause = @whereClause + ' AND ' + cast(@tourNDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_LONG, 10000) '-- MEG00029229 Paul G 13.10.2010
				
		set @whereClause = @whereClause + ' AND EXISTS (SELECT CH_KEY FROM CHARTER WITH(NOLOCK)' 
										+ ' WHERE CH_KEY = cs1.CS_CODE AND CH_CITYKEYFROM = ' + cast(@cityFromKey as varchar) + ' AND CH_CITYKEYTO = ' + cast(@cityToKey as varchar)+')'
		-- Filter on day of week
		set @whereClause = @whereClause + ' AND (cs1.CS_WEEK is null or cs1.CS_WEEK = '''' or cs1.CS_WEEK like dbo.GetWeekDays(''' + @dateBegin + ''',''' + @dateBegin + '''))'
		-- Filter on CHECKIN DATE		
	end
	else 
	begin
		if (@serviceDays > 1)
		begin			
			-- buryak 2014.08.25 - Task 27453 : CRM-07178-V7X1 - Данко - множественное отображение услуг страховка в корзине
			-- Со "Спорным моментом"(см ниже) в расширенной корзине подбиралось 5 цен для дополнительной услуги-страховки, хотя по продолжительности тура должна была подходить лишь одна.
			-- Надо бы этот момент просто удалить, оставив between для продолжительности, но никто не знает для чего он делался (а он там очень давно). Решено оставить его только для квотируемых услуг, чтобы ничего не заломать.
			declare @isQuoted smallint
			select @isQuoted = SV_QUOTED from [Service] where SV_KEY = @svKey
			if(@isQuoted = 1)
			begin
				-- Спорный момент, но иначе не работает вариант, когда изначально берется цена с cs_long < @serviceDays, а потом добивается другими квотами с конца
				--set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_long, 10000)'
				set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' >= isnull(cs1.CS_longmin, -1)'
			end
			else begin
				set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_long, 10000)'
			end
			
			-- Exclude services that not have cost at last service day
			set @fromClause = @fromClause + ' INNER JOIN COSTS cs2 WITH(NOLOCK) ON cs1.CS_CODE = cs2.CS_CODE AND cs1.CS_SUBCODE1 = cs2.CS_SUBCODE1 AND cs1.CS_SUBCODE2 = cs2.CS_SUBCODE2'
			set @whereClause = @whereClause + ' AND ' + replace(@whereClause, 'cs1.', 'cs2.')
			set @whereClause = @whereClause + ' AND ISNULL(cs2.CS_DATE,    ''1900-01-01'') <= ''' + cast(dateadd(day, @serviceDays - 1, cast(@dateBegin as datetime)) as varchar) + ''''
			set @whereClause = @whereClause + ' AND ISNULL(cs2.CS_DATEEND, ''9000-01-01'') >= ''' + cast(DATEADD(day, @serviceDays - 1, cast(@dateBegin as datetime)) as varchar) + ''''
						
			if (len(@orderClause) > 0)
				set @orderClause = @orderClause + ', '
			set @orderClause = @orderClause + 'CS_UPDDATE DESC'
		end
		else
		begin				
			set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_long, 10000)'
		end
		-- 7443 tfs neupokoev 22.08.2012
		-- Фильтруем цены по дням неделии у других услуг тоже
	set @whereClause = @whereClause + ' AND (cs1.CS_WEEK is null or cs1.CS_WEEK = '''' or cs1.CS_WEEK like dbo.GetWeekDays(''' + @dateBegin + ''',''' + @dateBegin + '''))'	
	end	
	
	set @whereClause = @whereClause + ' AND ISNULL(cs1.CS_DATE,    ''1900-01-01'') <= ''' + @dateBegin + ''''
	set @whereClause = @whereClause + ' AND ISNULL(cs1.CS_DATEEND, ''9000-01-01'') >= ''' + @dateBegin + ''''

	-- neupokoev 29.08.2012
	-- Заточка под ДЦ
	if (@isNewReCalculatePrice = 0)
		begin
			exec (@selectClause + @fromClause + ' WHERE ' + @whereClause + ') ORDER BY '+ @orderClause)
		end
	else
		begin
			exec ('WITH SERVICEINFO AS (' + 
					@selectClause + @fromClause + ' WHERE ' + @whereClause +
					') 
					SELECT * FROM SERVICEINFO AS si1
						WHERE si1.CO_DateActive = 
							(
								SELECT MAX(si2.CO_DateActive) 
								FROM SERVICEINFO AS si2 
								WHERE si1.CS_Code = si2.CS_Code and si1.CS_SubCode1 = si2.CS_SubCode1 and 
								      si1.CS_SubCode2 = si2.cs_SubCode2 and si1.CS_PRKey = si2.CS_PRKey
							)')
		end	
end
go

grant exec on dbo.mwGetServiceVariants to public
go

/*********************************************************************/
/* end sp_mwGetServiceVariants.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetServiceVariants.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetTourInfo.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetTourInfo.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwGetTourInfo]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetTourInfo]
GO

create proc [dbo].[mwGetTourInfo](@cityFromKey int, @countryKey int, @tourType int, @cityKey int, @dateFrom datetime, @dateTo datetime, @checkQuota smallint, @agentKey int, @setRequestOnZeroRelease smallint, @noPlacesResult smallint, @checkAgentQuota smallint, @checkCommonQuota smallint, @checkNoLongQuota smallint, @expiredReleaseResult smallint, @quotaYes smallint, @sort varchar(256), @viewType smallint = null)
as
begin
-- <date>2013-04-23</date>
-- <version>9.2.17.2</version>
declare @sql nvarchar(4000)

--13337. Кошелевым было принято решение отключить получение квот из-за долгой работы загрузки
set @checkQuota = -1

if(@viewType is null)
begin
	create table #tmpTours(
		tlkey int,
		tourkey int,
		tourname varchar(256),
		tourlink varchar(512),
		tourdays int,
		tournights int,
		tourprice float,
		pricelink varchar(512),
		quota int
	)
	
	insert into #tmpTours
		select distinct to_trkey as tlkey, to_key as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, 
		isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(to_key)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
		ti_totaldays as tourdays, ti_nights as tournights, cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota
		from tp_tours with(nolock)
		inner join tbl_turlist with(nolock) on to_trkey = tl_key
		inner join tp_lists ti with(nolock) on ti_tokey = to_key
		where to_isenabled > 0
		and to_cnkey = @countryKey
		and ti_firstctkey = case @cityKey when -1 then ti_firstctkey else @cityKey end
		and TO_TRKey in (select TD_TRKEY from TurDate td with(nolock) where TD_DATE between @dateFrom and @dateTo)
										
	update #tmpTours set tourprice = (select min(tp_gross)
		from tp_prices with(nolock)
		where TP_TIKey in (select TI_Key 
						   from TP_Lists with(nolock)
						   where TI_FIRSTHRKEY in (select HR_KEY from HotelRooms with(nolock) where HR_MAIN > 0)
						   and ti_totaldays = tourdays
						   and ti_nights = tournights
						   and TI_TOKey = tourkey)
		and TP_DateBegin >= @dateFrom
		and TP_TOKey = tourkey)

	if (@checkQuota = -1)
	begin
		update #tmpTours set quota = -1
	end
	else
	begin
		declare qtCursor cursor fast_forward read_only for 
			select tlkey, tourkey, tourdays, tournights from #tmpTours

		declare @tlkey int, @tourkey int, @tourdays int, @tournights int
		
		open qtCursor
		fetch next from qtCursor into @tlkey, @tourkey, @tourdays, @tournights
		while(@@fetch_status = 0)
		begin
			print @tlkey
			print @tourkey
			print @tourdays
			print @tournights
			print @dateFrom
			print @dateTo
			print @agentKey
			print @setRequestOnZeroRelease
			print @noPlacesResult
			print @checkAgentQuota
			print @checkCommonQuota
			print @checkNoLongQuota
			print @expiredReleaseResult
			update #tmpTours set quota = dbo.mwCheckTourQuotes(@tlkey, @tourkey, @tourdays, @tournights, @dateFrom, @dateTo, @agentKey, @setRequestOnZeroRelease, @noPlacesResult,
															@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @expiredReleaseResult)
			
			fetch next from qtCursor into @tlkey, @tourkey, @tourdays, @tournights
		end

		close qtCursor
		deallocate qtCursor
	end
	
	update #tmpTours set pricelink = (ltrim(str(@countryKey)) + '|' + ltrim(str(tourkey)) 
		+ '|' + ltrim(str(datepart(yyyy, @dateFrom))) + '-' + ltrim(str(datepart(mm, @dateFrom))) + '-' + ltrim(str(datepart(dd, @dateFrom)))
		+ '|' + ltrim(str(datepart(yyyy, @dateTo))) + '-' + ltrim(str(datepart(mm, @dateTo))) + '-' + ltrim(str(datepart(dd, @dateTo)))
		+ '|' + ltrim(str(tourprice)))
	
	set @sql = N'select * from #tmpTours where tourprice is not null and quota <> case ' + ltrim(str(@quotaYes)) + ' when -1 then -10 else 0 end '
	
	if len(@sort) > 0
		set @sql = @sql + ' order by ' + @sort
	print @sql
	exec sp_executesql @sql
	
	drop table #tmpTours
end
else
begin
	create table #tmpTours1(
		cnname varchar(256),
		tourkey int,
		tourname varchar(256),
		tourtype int,
		tourtypename varchar(256),
		tourlink varchar(512),
		tourdates varchar(1024),
		hoteldays varchar(256),
		hotelstars varchar(256),
		tourprice float,
		pricelink varchar(512),
		quota int,
		cnkey int,
		tourrate varchar(3),
		departfrom varchar(256),
		tlkey int,
		t_id int identity primary key
	)

	if(@viewType = 1)
	begin
		insert into #tmpTours1
			select distinct cn_name as cnname, sd_tourkey as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, sd_tourtype, tp_name as tourtypename, 
			isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(sd_tourkey)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
			dbo.mwTop5TourDates(sd_cnkey, sd_tourkey, tl_key, 1) as tourdates, dbo.mwTourHotelNights(sd_tourkey) as hotelnights, dbo.mwTourHotelStars(sd_tourkey) as hotelstars, 
			cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota, sd_cnkey as cnkey, to_rate as tourrate, isnull(ct_name, '') as cityfrom, tl_key as tlkey
			from mwSpoData with(nolock) inner join 
			tp_tours with(nolock)  on sd_tourkey = to_key inner join 
			tbl_turlist with(nolock) on to_trkey = tl_key inner join
			tiptur with(nolock) on tl_tip = tp_key inner join 
			country with(nolock) on sd_cnkey = cn_key left outer join
			citydictionary with(nolock) on sd_ctkeyfrom = ct_key
			where (isnull(sd_ctkeyfrom, 0) = case @cityFromKey when - 1 then isnull(sd_ctkeyfrom, 0) else @cityFromKey end) and sd_cnkey = case @countryKey when -1 then sd_cnkey else @countryKey end and tl_tip = case @tourType when -1 then tl_tip else @tourType end and sd_ctkey = case @cityKey when -1 then sd_ctkey else @cityKey end
			and exists(select top 1 td_trkey from turdate where td_trkey = tl_key and td_date > getdate())
	end
	else
	if(@viewType = 2)
	begin
		insert into #tmpTours1
			select distinct cn_name as cnname, ti_tokey as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, tl_tip, tp_name as tourtypename, 
			isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(ti_tokey)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
			dbo.mwTop5TourDates(to_cnkey, ti_tokey, tl_key, 1) as tourdates, dbo.mwTourHotelNights(ti_tokey) as hotelnights, dbo.mwTourHotelStars(ti_tokey) as hotelstars, 
			cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota, to_cnkey as cnkey, to_rate as tourrate, isnull(ct_name, '') as cityfrom, tl_key as tlkey
			from tp_lists with(nolock) inner join 
			tp_tours with(nolock)  on ti_tokey = to_key inner join 
			tbl_turlist with(nolock) on to_trkey = tl_key inner join
			tiptur with(nolock) on tl_tip = tp_key inner join 
			country with(nolock) on to_cnkey = cn_key left outer join
			citydictionary with(nolock) on ti_ctkeyfrom = ct_key
			where (isnull(ti_ctkeyfrom, 0) = case @cityFromKey when -1 then isnull(ti_ctkeyfrom, 0) else @cityFromKey end) and to_cnkey = case @countryKey when -1 then to_cnkey else @countryKey end and tl_tip = case @tourType when -1 then tl_tip else @tourType end and ti_firstctkey = case @cityKey when -1 then ti_firstctkey else @cityKey end
			and exists(select top 1 td_trkey from turdate where td_trkey = tl_key and td_date > getdate()) and to_isenabled > 0
	end

	update #tmpTours1 set tourprice = (select min(tp_gross) from tp_prices where TP_DateBegin > getdate() and tp_tikey in (select ti_key from tp_lists inner join hotelrooms on ti_firsthrkey = hr_key where ti_tokey = tourkey and hr_main > 0 and tp_gross > 0)),
		quota = 0
 
	update #tmpTours1 set pricelink = (ltrim(str(cnkey)) + '|' + ltrim(str(tourkey)) + '|' + dbo.mwFirstTourDate(tlkey) + '|' + ltrim(str(tourprice)) + '|' + tourrate)
  
	set @sql = N'select * from #tmpTours1 where tourprice is not null and quota <> case ' + ltrim(str(@quotaYes)) + ' when -1 then -10 else 0 end '

	if len(@sort) > 0
		set @sql = @sql + ' order by ' + @sort

	exec sp_executesql @sql

	drop table #tmpTours1
	
	end
end
GO

grant execute on [dbo].[mwGetTourInfo] to public
GO
/*********************************************************************/
/* end sp_mwGetTourInfo.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetTourInfo.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetTourMonthesQuotas.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwGetTourMonthesQuotas.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwGetTourMonthesQuotas')
	drop proc dbo.mwGetTourMonthesQuotas
GO

--<DATE>2014-11-11</DATE>
--<VERSION>2009.2.20.14</VERSION>

CREATE proc [dbo].[mwGetTourMonthesQuotas] 
@month_count smallint,
@agent_key int,
@quoted_services nvarchar(100),
@cnkey int,
@tour_type int,
@checkAllPartnersQuota smallint,
@requestOnRelease smallint,
@noPlacesResult smallint,
@checkAgentQuotes smallint,
@checkCommonQuotes smallint,
@checkNoLongQuotes smallint,
@findFlight smallint,
@checkFlightPacket smallint,
@expiredReleaseResult smallint
as
begin
	create table #tourQuotas(
		tour_key int,
		tour_name nvarchar(250),
		tour_url nvarchar(500),
		tour_quotas nvarchar(4000)
	)
	
	declare tour_cursor cursor fast_forward read_only for
		select td_trkey, to_key, isnull(tl_nameweb, isnull(tl_name, '')), isnull(tl_webhttp, '') as tour_url, td_date, month(td_date), tl_nday
		from turdate with(nolock)
		inner join turlist with(nolock) on tl_key = td_trkey
		inner join tp_tours with(nolock) on to_trkey = td_trkey
		where td_date between getdate() 
			and dateadd(month, @month_count, getdate()) 
			and ((@cnkey >= 0 and tl_cnkey = @cnkey) or (@tour_type >= 0 and tl_tip = @tour_type))
			and to_isenabled = 1 
		order by isnull(tl_nameweb, isnull(tl_name, '')),td_date                 
	
	declare @tour_key int, @to_key int, @prev_tour_key int, @prev_month int, @tour_name nvarchar(250), @tour_url nvarchar(500), @tour_date datetime,
	@month int, @tour_quotas nvarchar(4000), @tour_duration int
	
	set @tour_key = -1
	set @to_key = -1
	set @prev_tour_key = -1
	set @prev_month = -1
	set @tour_name = ''
	set @tour_url = ''
	set @tour_date = '1800-01-01'
	set @month = 0
	set @tour_quotas = ''
	
	open tour_cursor
	
	create table #tp_Services(
		ts_svkey int,
		ts_code int,
		ts_subcode1 int,
		ts_subcode2 int,
		ts_day int,
		ts_ndays int,
		ts_partnerkey int,
		ts_pkkey int
	)
	
	declare @sql nvarchar(4000)
	
	fetch next from tour_cursor into @tour_key, @to_key, @tour_name, @tour_url, @tour_date, @month, @tour_duration
	while @@fetch_status = 0
	begin
		if (@tour_key != @prev_tour_key)
		begin
			insert into #tourQuotas (tour_key,	tour_name, tour_url) values (@tour_key, @tour_name, @tour_url)
			
			set @prev_month = -1
			
			if (@prev_tour_key > 0)
			begin
				update #tourQuotas set tour_quotas = @tour_quotas where tour_key = @prev_tour_key
			end
			
			set @tour_quotas = ''
			
			truncate table #tp_Services
			
			insert into #tp_Services
			select distinct ts_svkey, ts_code,
				(case TS_SVKEY when 3 then (select HR_RMKEY from HotelRooms with(nolock) where HR_KEY=t1.ts_subcode1) else t1.ts_subcode1 end) as ts_subcode1,
				(case TS_SVKEY when 3 then (select HR_RCKEY from HotelRooms with(nolock) where HR_KEY=t1.ts_subcode1) else t1.ts_subcode1 end) as ts_subcode2,
				ts_day, ts_days, ts_oppartnerkey, ts_oppacketkey
			from tp_services t1 with(nolock)
			where ts_tokey = @to_key and ts_svkey in (select item from dbo.DelimitedSplit(isnull(@quoted_services, N'3'), ','))
		end
		
		declare @svkey int, @code int, @subcode1 int, @subcode2 int, @day int, @ndays int,
			@partner_key int, @packet_key int, @places int, @allplaces int, @date_places int, @date_allplaces int
		
		if (@month != @prev_month or @tour_key != @prev_tour_key)
		begin
			if (len(@tour_quotas) > 0)         
			begin
				set @tour_quotas = @tour_quotas + '|' 
			end
			
			set @tour_quotas = @tour_quotas + LTRIM(STR(YEAR(@tour_date))) + ':' + LTRIM(STR(@month)) + '='
		end
		
		declare service_cursor cursor fast_forward read_only for
			select ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_day, ts_ndays,
				(case when @checkAllPartnersQuota > 0 then -1 else ts_partnerkey end),
				(case when ts_svkey = 1 and @checkFlightPacket > 0 then ts_pkkey else -1 end)
			from #tp_Services
		
		set @date_places = 1000
		set @date_allplaces = 1000
		set @places = null
		set @allplaces = null
		
		open service_cursor
		
		fetch next from service_cursor into @svkey, @code, @subcode1, @subcode2, @day, @ndays, @partner_key, @packet_key
		while @@fetch_status = 0
		begin
			select @places = qt_places, @allplaces = qt_allplaces
			from dbo.mwCheckQuotesEx(@svkey, 
				@code, 
				@subcode1, 
				@subcode2, 
				@agent_key, 
				@partner_key, 
				@tour_date,
				@day,
				@ndays,
				@requestOnRelease,
				@noPlacesResult,
				@checkAgentQuotes,
				@checkCommonQuotes,
				@checkNoLongQuotes,
				@findFlight,
				0,
				0,
				@packet_key,
				@tour_duration,
				@expiredReleaseResult)
			
			if (@places <> 0 or (@places = 0 and @date_places = 1000))
			begin
				set @date_places = @places
				set @date_allplaces = @allplaces
			end

			if (@places > 0)
			begin
				break
			end	
			
			fetch next from service_cursor into @svkey, @code, @subcode1, @subcode2, @day, @ndays, @partner_key, @packet_key
		end
		
		close service_cursor
		deallocate service_cursor
		
		if (@date_places is null)
		begin
			set @date_places = -1
			set @date_allplaces = 0
		end
		
		if(substring(@tour_quotas, len(@tour_quotas), 1) != '=')
		begin
			set @tour_quotas = @tour_quotas + ','
		end
		
		set @tour_quotas = @tour_quotas + ltrim(str(day(@tour_date))) + '#' + ltrim(str(@date_places)) + ':' + ltrim(str(@date_allplaces))
		set @prev_tour_key = @tour_key
		set @prev_month = @month
		
		fetch next from tour_cursor into @tour_key, @to_key, @tour_name, @tour_url, @tour_date, @month, @tour_duration
	end
	
	update #tourQuotas set tour_quotas = @tour_quotas where tour_key = @prev_tour_key
	
	close tour_cursor
	deallocate tour_cursor
	
	select * from #tourQuotas
end
GO

grant exec on dbo.mwGetTourMonthesQuotas to public
GO
/*********************************************************************/
/* end sp_mwGetTourMonthesQuotas.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwGetTourMonthesQuotas.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwHotelQuotes.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwHotelQuotes.sql */
/*********************************************************************/
if object_id('dbo.mwHotelQuotes', 'p') is not null
	drop proc dbo.mwHotelQuotes
go

create procedure [dbo].[mwHotelQuotes]
	-- хранимка получает сведения о квотах для отелей
	--<version>2009.2.22</version>
	--<date>2014-10-09</date> 
	@Filter varchar(2000),
	@DaysCount int,
	@AgentKey int, 
	@FromDate	datetime,
	@RequestOnRelease smallint,
	@NoPlacesResult int,
	@CheckAgentQuotes smallint,
	@CheckCommonQuotes smallint,
	@ExpiredReleaseResult int
as
begin
	-- создание временной таблицы
CREATE TABLE #tmp
(
	CityKey int,
	CityName varchar(50) COLLATE Cyrillic_General_BIN,
	HotelKey int,
	HotelName varchar(200) COLLATE Cyrillic_General_BIN,
	HotelHTTP varchar(254),
	RoomKey int,
	RoomName varchar(35) COLLATE Cyrillic_General_BIN,
	RoomCategoryKey int,
	RoomCategoryName varchar(60) COLLATE Cyrillic_General_BIN,
	Quotas varchar(2000),
	HotelRoomsKey int,
	HotelRoomsMain int
)

-- формирование данных
DECLARE	@HotelKey int
DECLARE	@RoomKey int 
DECLARE	@RoomCategoryKey int 
DECLARE @HotelRoomsKey int
DECLARE @HotelRoomsMain int
DECLARE @freePlacesMask int

DECLARE @script VARCHAR(4000)
SET @script = 'SELECT DISTINCT mwPriceHotels.sd_hdctkey, CityDictionary.CT_NAME, mwPriceHotels.SD_HDKEY, HotelDictionary.hd_name  + '' ('' + ISNULL(SD_RSNAME,  CityDictionary.CT_NAME) + '') '' + mwSpoDataTable.SD_HDSTARS as HotelName,
				ISNULL(HD_HTTP, ''''), SD_RMKEY, RM_NAME, SD_RCKEY, RC_NAME, '''', HR_Key, HR_Main
				FROM mwPriceHotels with(nolock)
					JOIN mwSpoDataTable with(nolock) ON mwPriceHotels.PH_SDKEY = mwSpoDataTable.SD_KEY
					JOIN CityDictionary with(nolock) ON CityDictionary.CT_KEY = mwPriceHotels.sd_hdctkey
					JOIN Rooms with(nolock) ON SD_RMKEY = RM_KEY
					JOIN RoomsCategory with(nolock) ON SD_RCKEY = RC_KEY
					JOIN HotelDictionary with(nolock) ON mwPriceHotels.SD_HDKEY = HotelDictionary.HD_KEY
					JOIN HotelRooms with(nolock) ON (SD_HRKey = HR_Key)
					WHERE ' + @filter + ' ORDER BY HotelName'
		
INSERT INTO #tmp EXEC(@script)

DECLARE hSql CURSOR local fast_forward for
	SELECT distinct HotelKey, RoomKey, RoomCategoryKey FROM #tmp

OPEN hSql
FETCH NEXT FROM hSql INTO @HotelKey, @RoomKey, @RoomCategoryKey

WHILE @@FETCH_STATUS = 0
BEGIN
	Declare @result varchar(256), @places int, @step_index smallint, @price_correction int, @additional varchar(2000), @findFlight smallint
	
	exec mwCacheQuotaSearch 3,@HotelKey,@RoomKey,@RoomCategoryKey,@FromDate,1,@DaysCount,0,0,@result output,@places output,@step_index output,
		@price_correction output,@additional output,0
	
	if (@result is not null)
	begin
		Update #tmp SET Quotas = @result where current of hSql
	end
	else
	begin
		select top 1 @result = qt_additional
									from mwCheckQuotesEx(3, @HotelKey, @RoomKey, @RoomCategoryKey, @AgentKey, -1, @FromDate, 1, @DaysCount,
									@RequestOnRelease, @NoPlacesResult, @CheckAgentQuotes, @CheckCommonQuotes, 1, 0, 0, 0, 0, -1, @ExpiredReleaseResult)
		
		UPDATE #tmp SET Quotas = @result where HotelKey = @HotelKey and RoomKey = @RoomKey and RoomCategoryKey = @RoomCategoryKey
	end
	
	FETCH NEXT FROM hSql INTO @HotelKey, @RoomKey, @RoomCategoryKey
END
CLOSE hSql
DEALLOCATE hSql

SELECT DISTINCT CityKey, CityName, HotelKey, HotelName, HotelHTTP, RoomKey, RoomName, RoomCategoryKey, RoomCategoryName, Quotas, min(HotelRoomsKey)
FROM #tmp
GROUP BY CityKey, CityName, HotelKey, HotelName, HotelHTTP, RoomKey, RoomName, RoomCategoryKey, RoomCategoryName, Quotas

-- удаление временной таблицы
DROP TABLE #tmp

end

GO
/*********************************************************************/
/* end sp_mwHotelQuotes.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwHotelQuotes.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDisablePriceTour.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwReplDisablePriceTour.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDisablePriceTour]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplDisablePriceTour]
GO

create proc [dbo].[mwReplDisablePriceTour] @tourkey int, @rqId int = null
as
begin
	-- <date>2014-08-06</date>
	-- <version>9.2.21.1</version>

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
		where SS_ParmName = 'MWDivideByCountry'

	if @mwSearchType = 0
	begin
		if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwPriceDataTable.'
			
		update mwPriceDataTable
		set pt_isenabled = 0
		where pt_tourkey = @tourkey
	end
	else
	begin
		declare @tableName varchar(100), @tokey int, @cnkey int
		declare @sql varchar(8000)

		select top 1 
			@tokey = to_key, 
			@cnkey = to_cnkey
		from 
			tp_tours with(nolock)
		where to_key = @tourkey

		DECLARE @cityFromKey INT
		DECLARE cur CURSOR LOCAL FAST_FORWARD FOR SELECT distinct sd_ctkeyfrom FROM mwSpoDataTable with (nolock) WHERE sd_tourkey = @tokey AND sd_isenabled > 0
		OPEN cur
		FETCH NEXT FROM cur INTO @cityFromKey
		WHILE @@fetch_status = 0
		BEGIN 
			set @tableName = dbo.mwGetPriceTableName(@cnkey, @cityFromKey)	
			if (@rqId is not null)
				insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwPriceDataTable.'
				
			IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@tableName) AND type in (N'U'))	
			BEGIN
				set @sql = 'update ' + @tableName + ' set pt_isenabled = 0, pt_autodisabled = 0 where pt_tourkey = ' + ltrim(str(@tokey))
				exec (@sql)
			END
			FETCH NEXT FROM cur INTO @cityFromKey
		END	
		CLOSE cur
		DEALLOCATE cur
	end

	if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwSpoDataTable.'
			
	update mwSpoDataTable
	set sd_isenabled = 0	
	where sd_tourkey = @tourkey
end
GO

GRANT EXECUTE on [dbo].[mwReplDisablePriceTour] to public
GO
/*********************************************************************/
/* end sp_mwReplDisablePriceTour.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplDisablePriceTour.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplProcessQueueDivide.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwReplProcessQueueDivide.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplProcessQueueDivide]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplProcessQueueDivide]
GO

create procedure [dbo].[mwReplProcessQueueDivide] 
(
	@jobId smallint = null,
	@countryKeysToProcess ListIntValue readonly,		-- ключи стран, которые должны обрабатываться (берутся только переданные страны)
	@countryKeysToNotProcess ListIntValue readonly	-- ключи стран, которые не должны обрабатываться (берутся все, кроме переданных стран)
	-- если переданы одновременно @countryKeysToProcess и @countryKeysToNotProcess, то произойдет ошибка
)
as
begin
	--<VERSION>2009.2.20</VERSION>
	--<DATE>2014-02-14</DATE>
	if dbo.mwReplIsSubscriber() <= 0
		return

	if exists(select top 1 1 from mwReplQueue with(nolock) where rq_state = 4 and DATEDIFF(MINUTE, rq_startdate, GETDATE()) > 10 and rq_priority > 0)
	begin
		delete from mwReplQueue where rq_tokey not in (select to_key from TP_Tours) and rq_mode <> 4 and (rq_startdate is null or rq_state = 4)
		
		update mwReplQueue set rq_state = 1, rq_startdate = null, rq_enddate = null, rq_priority = rq_priority - 1
		where rq_state = 4 
		and DATEDIFF(MINUTE, rq_startdate, GETDATE()) > 10
		and rq_priority > 0

	end

	if exists (select top 1 1 from @countryKeysToProcess)
		and exists (select top 1 1 from @countryKeysToNotProcess)
	begin
		RAISERROR('must pass only one of @countryKeysToProcess and @countryKeysToNotProcess or neither of them', 16, 1)
		return
	end

	-- обновляем инфу о стране и городе вылета по туру
	if exists(select 1 from mwReplQueue with(nolock) where rq_state = 1 and rq_cnkey is null)
	begin
		update mwReplQueue
		set rq_cnkey = TO_CNKey,
		rq_ctkeyfrom = TL_CTDepartureKey
		from tp_tours
		join tbl_TurList on tl_key = to_trkey
		where to_key = rq_tokey
		and rq_cnkey is null
		and rq_state = 1
	end
		
	if (@jobId is null)
		set @jobId = @@SPID
		
	-- такое может происходить, только если произошла аварийная остановка джоба и его повторный запуск
	-- апдейтим таблицу направлений и таблицу очереди
	if exists(select 1 from mwReplDirections where RD_IsUsed = @jobId)
	begin
		update mwReplQueue 
		set rq_state = 4 
		from mwReplDirections
		where RD_CNKey = rq_cnkey
		and RD_CTKeyFrom = rq_ctkeyfrom
		and rq_state = 3
		and RD_IsUsed = @jobId
		
		update mwReplDirections set RD_IsUsed = 0 where RD_IsUsed = @jobId		
	end
		
	declare @mwSearchType int
	declare @cnKey int, @ctKey int
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'

	declare @rqId int
	declare @rqMode int
	declare @rqToKey int
	declare @rqCalculatingKey int
	declare @rqOverwritePrices bit	
	declare @rqCnKey int
	declare @rqCtKey int

	declare @selectedDirections table(CNKey int, CTKey int)
	declare @currentQueue table(xrq_id int, xrq_mode int, xrq_tokey int, xrq_CalculatingKey int, xRQ_OverwritePrices bit, xrq_state int, xrq_enddate datetime, xrq_cnKey int, xrq_ctKey int)

	declare @directionsCount as smallint
	select @directionsCount = count(*) from @countryKeysToProcess

	if @directionsCount = 0
		select @directionsCount = count(*) from @countryKeysToProcess

	-- select directions
	if exists (select top 1 1 from @countryKeysToProcess)
	begin
		insert into @selectedDirections
		select isnull(rq_cnkey, 0), isnull(rq_ctkeyfrom, 0)
		from mwReplQueue with(nolock)
		join mwReplDirections with(nolock) on rd_cnkey = isnull(rq_cnkey, 0) and rd_ctkeyfrom = isnull(rq_ctkeyfrom, 0)
		where rd_isUsed = 0
		and (rq_state = 1 or rq_state = 2)
		and rq_mode <= 5
		and isnull(rq_cnkey, 0) in (select value from @countryKeysToProcess)
		order by rq_priority desc, rq_crdate
	end
	else if exists (select top 1 1 from @countryKeysToNotProcess)
	begin
		insert into @selectedDirections
		select isnull(rq_cnkey, 0), isnull(rq_ctkeyfrom, 0)
		from mwReplQueue with(nolock)
		join mwReplDirections with(nolock) on rd_cnkey = isnull(rq_cnkey, 0) and rd_ctkeyfrom = isnull(rq_ctkeyfrom, 0)
		where rd_isUsed = 0
		and (rq_state = 1 or rq_state = 2)
		and rq_mode <= 5
		and isnull(rq_cnkey, 0) not in (select value from @countryKeysToNotProcess)
		order by rq_priority desc, rq_crdate
	end
	else
	begin
		insert into @selectedDirections
		select top 1 isnull(rq_cnkey, 0), isnull(rq_ctkeyfrom, 0)
		from mwReplQueue with(nolock)
		join mwReplDirections with(nolock) on rd_cnkey = isnull(rq_cnkey, 0) and rd_ctkeyfrom = isnull(rq_ctkeyfrom, 0)
		where rd_isUsed = 0
		and (rq_state = 1 or rq_state = 2)
		and rq_mode <= 5
		order by rq_priority desc, rq_crdate
	end

	update mwReplDirections 
	set RD_IsUsed = @jobId
	where RD_IsUsed = 0 
		and exists (select top 1 1 from @selectedDirections where cnKey = rd_cnkey and ctKey = RD_CTKeyFrom)

	if not exists(select 1 from mwReplDirections where RD_IsUsed = @jobId)
		return
		
	-- select commands by directions
	insert into @currentQueue (xrq_id, xrq_mode, xrq_tokey, xrq_CalculatingKey, xRQ_OverwritePrices, xrq_cnKey, xrq_ctKey)
	select top 1 rq_id, rq_mode, rq_tokey, rq_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom
	from mwReplQueue 
	where (rq_state = 1 or rq_state = 2)
	and exists (select top 1 1 from @selectedDirections where cnKey = isnull(rq_cnkey, 0) and ctKey = isnull(rq_ctkeyfrom, 0))
	and rq_mode <= 5
	order by rq_priority desc, rq_crdate
	
	update mwReplQueue set [rq_state] = 3, [rq_startdate] = getdate() where rq_id in (select xrq_id from @currentQueue)

	declare @tableName varchar(256)
	
	declare queueCursor cursor local fast_forward for
	select xrq_id, xrq_mode, xrq_tokey, xrq_CalculatingKey, xRQ_OverwritePrices, xrq_cnKey, xrq_ctKey
	from @currentQueue
	
	-- process commands
	open queueCursor
	fetch queueCursor into @rqId, @rqMode, @rqToKey, @rqCalculatingKey, @rqOverwritePrices, @rqCnKey, @rqCtKey
	
	while (@@FETCH_STATUS = 0)
	begin

		update mwReplQueue set rq_startdate = getdate() where rq_id = @rqId
		
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
		select @rqId, 'Command start.'
			
		begin try	
			if (@rqMode = 1)
			begin
				exec FillMasterWebSearchFields @tokey = @rqToKey, @calcKey = @rqCalculatingKey, @overwritePrices = @rqOverwritePrices
				exec mwSinglePrice 1, @rqToKey
			end
			else if (@rqMode = 2)
			begin
				exec FillMasterWebSearchFields @tokey = @rqToKey, @calcKey = @rqCalculatingKey, @overwritePrices = @rqOverwritePrices
				exec mwSinglePrice 1, @rqToKey
			end
			else if (@rqMode = 3)
			begin
				if (@rqCnKey is not null and @rqCtKey is not null)
					set @tableName = dbo.mwGetPriceTableName(@rqCnKey, @rqCtKey)

				exec mwSinglePrice 0, @rqToKey, null, @tableName

				exec mwReplDisablePriceTour @rqToKey, @rqId
			end
			else if (@rqMode = 4)
			begin
				if (@rqCnKey is not null and @rqCtKey is not null)
					set @tableName = dbo.mwGetPriceTableName(@rqCnKey, @rqCtKey)

				exec mwSinglePrice 0, @rqToKey, null, @tableName

				exec mwReplDeletePriceTour @rqToKey, @rqId
			end
			else if (@rqMode = 5)
			begin
				exec mwReplUpdatePriceTourDateValid @rqToKey, @rqId
			end
			
			update mwReplQueue set rq_state = 5, rq_enddate = getdate() where rq_id = @rqId
			
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, 'Command complete.'
		
		end try
		begin catch
			update mwReplQueue set rq_state = 4, rq_enddate = getdate() where rq_id = @rqId
			
			declare @errMessage varchar(max)
			set @errMessage = 'Error at ' + isnull(ERROR_PROCEDURE(), '[mwReplProcessQueueDivide]') +' : ' + isnull(ERROR_MESSAGE(), '[msg_not_set]')
			
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, @errMessage
		end catch
		
		fetch queueCursor into @rqId, @rqMode, @rqToKey, @rqCalculatingKey, @rqOverwritePrices, @rqCnKey, @rqCtKey
		
	end
	
	close queueCursor
	deallocate queueCursor
	
	update mwReplDirections set rd_isUsed = 0 where rd_isUsed = @jobId
	
end
GO

grant exec on [dbo].[mwReplProcessQueueDivide] to public
GO
/*********************************************************************/
/* end sp_mwReplProcessQueueDivide.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwReplProcessQueueDivide.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSyncDataWithMainDB.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwSyncDataWithMainDB.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwSyncDataWithMainDB]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwSyncDataWithMainDB]
GO

CREATE PROCEDURE [dbo].[mwSyncDataWithMainDB] (@testMode smallint = null)
AS
begin

	--ХП для синхронизации данных между основной и поисковой базами
	--<DATE>2014-10-16</DATE>
	--<VERSION>2009.2.21</VERSION>

	-- koshelev
	-- хранимка должна запускаться только на поисковой базе
	if (dbo.mwReplIsSubscriber() <= 0)
	begin
		return
	end

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	declare @oldDate datetime
	set @oldDate = dateadd(day, -1, getdate())

	if (@testMode is null)
		set @testMode = 0

	declare @publisherDbName varchar(100), @sql nvarchar(max)
	select @publisherDbName = SS_ParmValue from SystemSettings where SS_ParmName like 'mwReplPublisherDB'
	if (ISNULL(@publisherDbName, '') = '')
		return

	create table #QuotaObjectKeys (xKey int)
	create table #QuotasKeys (xKey int)

	set @sql = '
	insert into #QuotasKeys (xKey)
	select distinct QD_QTID
	from mt.[' + @publisherDbName + '].dbo.QuotaDetails 
	where QD_Date >= dateadd(day, -1, getdate())
	and QD_QTID not in (select QT_ID from Quotas)
	union
	select distinct QO_QTID
	from mt.[' + @publisherDbName + '].dbo.QuotaObjects
	where QO_ID in (select distinct SS_QOID 
					from mt.[' + @publisherDbName + '].dbo.StopSales 
					where (SS_IsDeleted = 0 or SS_IsDeleted is null)
					and SS_Date >= dateadd(day, -1, getdate()))
	and QO_QTID not in (select QT_ID from Quotas)'
	exec (@sql)

	if (@testMode = 1)
	begin
		set @sql = 'select x.[QT_ID]
           ,x.[QT_ByRoom]
           ,x.[QT_Comment]
           ,x.[QT_PRKey]
           ,x.[QT_PrtDogsKey]
           ,x.[QT_IsByCheckIn]
		from mt.[' + @publisherDbName + '].dbo.Quotas as x
		where x.QT_ID in (select xKey from #QuotasKeys)'
		exec (@sql)
	end
	else
	begin
		set @sql = 'INSERT INTO [dbo].[Quotas]
			   ([QT_ID]
			   ,[QT_ByRoom]
			   ,[QT_Comment]
			   ,[QT_PRKey]
			   ,[QT_PrtDogsKey]
			   ,[QT_IsByCheckIn])
		select x.[QT_ID]
			   ,x.[QT_ByRoom]
			   ,x.[QT_Comment]
			   ,x.[QT_PRKey]
			   ,x.[QT_PrtDogsKey]
			   ,x.[QT_IsByCheckIn]
		from mt.[' + @publisherDbName + '].dbo.Quotas as x
		where x.QT_ID in (select xKey from #QuotasKeys)'
		exec (@sql)
	end
	
	set @sql = 'insert into #QuotaObjectKeys (xKey)
	select distinct SS_QOID
	from StopSales
	where SS_QOID not in (select QO_ID from QuotaObjects)
	union
	select QO_ID
	from mt.[' + @publisherDbName + '].dbo.QuotaObjects
	where QO_ID not in (select QO_ID from QuotaObjects)
	and (QO_QTID in (select xKey from #QuotasKeys) or QO_QTID in (select QD_QTID from QuotaDetails))'
	exec (@sql)
	
	if (@testMode = 1)
	begin
		set @sql = 'select x.[QO_ID]
			   ,x.[QO_SVKey]
			   ,x.[QO_Code]
			   ,x.[QO_SubCode1]
			   ,x.[QO_SubCode2]
			   ,x.[QO_QTID]
			   ,x.[QO_CNKey]
			   ,x.[QO_CTKey]
		from mt.[' + @publisherDbName + '].dbo.QuotaObjects as x
		where x.QO_ID in (select xKey from #QuotaObjectKeys)'
		exec (@sql)
	end
	else
	begin
		set @sql = 'INSERT INTO [dbo].[QuotaObjects]
			   ([QO_ID]
			   ,[QO_SVKey]
			   ,[QO_Code]
			   ,[QO_SubCode1]
			   ,[QO_SubCode2]
			   ,[QO_QTID]
			   ,[QO_CNKey]
			   ,[QO_CTKey])
		select x.[QO_ID]
			   ,x.[QO_SVKey]
			   ,x.[QO_Code]
			   ,x.[QO_SubCode1]
			   ,x.[QO_SubCode2]
			   ,x.[QO_QTID]
			   ,x.[QO_CNKey]
			   ,x.[QO_CTKey]
		from mt.[' + @publisherDbName + '].dbo.QuotaObjects as x
		where x.QO_ID in (select xKey from #QuotaObjectKeys)'
		exec (@sql)
	end

	if (@testMode = 1)
	begin
		set @sql = 'select r.[AS_CHKEY]
			   ,r.[AS_DATEFROM]
			   ,r.[AS_DATETO]
			   ,r.[AS_WEEK]
			   ,r.[AS_TIMEFROM]
			   ,r.[AS_TIMETO]
			   ,r.[AS_NextDayArriv]
			   ,r.[AS_ID]
			   ,r.[AS_Remark]
		from mt.[' + @publisherDbName + '].dbo.AirSeason as r where r.AS_ID not in (select AS_ID from AirSeason) and r.AS_DATETO >= @oldDate'

		exec sp_executesql @sql, N'@oldDate datetime', @oldDate = @oldDate
	end
	else
	begin
		set @sql = 'INSERT INTO [dbo].[AirSeason]
			   ([AS_CHKEY]
			   ,[AS_DATEFROM]
			   ,[AS_DATETO]
			   ,[AS_WEEK]
			   ,[AS_TIMEFROM]
			   ,[AS_TIMETO]
			   ,[AS_NextDayArriv]
			   ,[AS_ID]
			   ,[AS_Remark])
		select r.[AS_CHKEY]
			   ,r.[AS_DATEFROM]
			   ,r.[AS_DATETO]
			   ,r.[AS_WEEK]
			   ,r.[AS_TIMEFROM]
			   ,r.[AS_TIMETO]
			   ,r.[AS_NextDayArriv]
			   ,r.[AS_ID]
			   ,r.[AS_Remark]
		from mt.[' + @publisherDbName + '].dbo.AirSeason as r where r.AS_ID not in (select AS_ID from AirSeason) and r.AS_DATETO >= @oldDate'
		
		
		exec sp_executesql @sql, N'@oldDate datetime', @oldDate = @oldDate
	end

	if (@testMode = 1)
	begin
		set @sql = 'select r.[CS_SVKEY]
			   ,r.[CS_CODE]
			   ,r.[CS_SUBCODE1]
			   ,r.[CS_SUBCODE2]
			   ,r.[CS_PRKEY]
			   ,r.[CS_PKKEY]
			   ,r.[CS_DATE]
			   ,r.[CS_DATEEND]
			   ,r.[CS_WEEK]
			   ,r.[CS_COSTNETTO]
			   ,r.[CS_COST]
			   ,r.[CS_DISCOUNT]
			   ,r.[CS_TYPE]
			   ,r.[CS_CREATOR]
			   ,r.[CS_RATE]
			   ,r.[CS_UPDDATE]
			   ,r.[CS_LONG]
			   ,r.[CS_BYDAY]
			   ,r.[CS_FIRSTDAYNETTO]
			   ,r.[CS_FIRSTDAYBRUTTO]
			   ,r.[CS_PROFIT]
			   ,r.[CS_CINNUM]
			   ,r.[CS_TypeCalc]
			   ,r.[cs_DateSellBeg]
			   ,r.[cs_DateSellEnd]
			   ,r.[CS_CHECKINDATEBEG]
			   ,r.[CS_CHECKINDATEEND]
			   ,r.[CS_LONGMIN]
			   ,r.[CS_TypeDivision]
			   ,r.[CS_UPDUSER]
			   ,r.[CS_TRFId]
			   ,r.[CS_COID]
			   ,r.[CS_ID] 
		from mt.[' + @publisherDbName + '].dbo.tbl_Costs as r 
		where r.CS_SVKey = 1 
			and r.CS_ID not in (select CS_ID from tbl_Costs) 
			and  (r.CS_DateEnd >= @oldDate or r.CS_CHECKINDATEEND >= @oldDate)'
		
		exec sp_executesql @sql, N'@oldDate datetime', @oldDate = @oldDate
	end
	else
	begin
		set @sql = 'INSERT INTO [dbo].[tbl_Costs]
			   ([CS_SVKEY]
			   ,[CS_CODE]
			   ,[CS_SUBCODE1]
			   ,[CS_SUBCODE2]
			   ,[CS_PRKEY]
			   ,[CS_PKKEY]
			   ,[CS_DATE]
			   ,[CS_DATEEND]
			   ,[CS_WEEK]
			   ,[CS_COSTNETTO]
			   ,[CS_COST]
			   ,[CS_DISCOUNT]
			   ,[CS_TYPE]
			   ,[CS_CREATOR]
			   ,[CS_RATE]
			   ,[CS_UPDDATE]
			   ,[CS_LONG]
			   ,[CS_BYDAY]
			   ,[CS_FIRSTDAYNETTO]
			   ,[CS_FIRSTDAYBRUTTO]
			   ,[CS_PROFIT]
			   ,[CS_CINNUM]
			   ,[CS_TypeCalc]
			   ,[cs_DateSellBeg]
			   ,[cs_DateSellEnd]
			   ,[CS_CHECKINDATEBEG]
			   ,[CS_CHECKINDATEEND]
			   ,[CS_LONGMIN]
			   ,[CS_TypeDivision]
			   ,[CS_UPDUSER]
			   ,[CS_TRFId]
			   ,[CS_COID]
			   ,[CS_ID])
		select r.[CS_SVKEY]
			   ,r.[CS_CODE]
			   ,r.[CS_SUBCODE1]
			   ,r.[CS_SUBCODE2]
			   ,r.[CS_PRKEY]
			   ,r.[CS_PKKEY]
			   ,r.[CS_DATE]
			   ,r.[CS_DATEEND]
			   ,r.[CS_WEEK]
			   ,r.[CS_COSTNETTO]
			   ,r.[CS_COST]
			   ,r.[CS_DISCOUNT]
			   ,r.[CS_TYPE]
			   ,r.[CS_CREATOR]
			   ,r.[CS_RATE]
			   ,r.[CS_UPDDATE]
			   ,r.[CS_LONG]
			   ,r.[CS_BYDAY]
			   ,r.[CS_FIRSTDAYNETTO]
			   ,r.[CS_FIRSTDAYBRUTTO]
			   ,r.[CS_PROFIT]
			   ,r.[CS_CINNUM]
			   ,r.[CS_TypeCalc]
			   ,r.[cs_DateSellBeg]
			   ,r.[cs_DateSellEnd]
			   ,r.[CS_CHECKINDATEBEG]
			   ,r.[CS_CHECKINDATEEND]
			   ,r.[CS_LONGMIN]
			   ,r.[CS_TypeDivision]
			   ,r.[CS_UPDUSER]
			   ,r.[CS_TRFId]
			   ,r.[CS_COID]
			   ,r.[CS_ID] 
		from mt.[' + @publisherDbName + '].dbo.tbl_Costs as r 
		where r.CS_SVKey = 1 
		and r.CS_ID not in (select CS_ID from tbl_Costs) 
		and  (r.CS_DateEnd >= @oldDate or r.CS_CHECKINDATEEND >= @oldDate)'
		
		exec sp_executesql @sql, N'@oldDate datetime', @oldDate = @oldDate
	end
end
GO

GRANT EXECUTE on [dbo].[mwSyncDataWithMainDB] to public
GO
/*********************************************************************/
/* end sp_mwSyncDataWithMainDB.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSyncDataWithMainDB.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSyncDictionaryData.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwSyncDictionaryData.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwSyncDictionaryData]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwSyncDictionaryData]
GO

CREATE procedure [dbo].[mwSyncDictionaryData] 
	@update_search_table smallint = 0, -- нужно ли синхронизировать данные в mwPriceDataTable
	@update_fields varchar(1024) = NULL -- какие именно данные нужно синхронизировать
as
begin

	--<VERSION>2009.2.20.9</VERSION>
	--<DATE>2014-02-28</DATE>

	-- Список допустимых параметров для @update_fields (нечувствительны к регистру)
	-- COUNTRY
	-- HOTEL
	-- CITY
	-- RESORT
	-- TOUR
	-- TOURTYPE
	-- PANSION
	-- ROOM
	-- ROOMCATEGORY
	-- ACCOMODATION
	-- TP_TOUR     
	
	declare @mwSearchType int
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'     
	declare @sql as nvarchar(max)
	declare @tablesCondition as nvarchar(100), @tableName nvarchar(100)

	if @mwSearchType = 0
		set @tablesCondition = 'mwPriceDataTable'
	else
		set @tablesCondition = 'mwPriceDataTable[_]%'
	
	-- Признак того, откуда брать дополнительные места
	-- Если @isAddPlacesFromRooms = 1 и в таблице Accmdmentype по данному ключу NULL,
	-- дополнительные места беруться из таблицы Rooms, иначе из Accmdmentype
	declare @isAddPlacesFromRooms bit
	select @isAddPlacesFromRooms = SS_ParmValue
	from dbo.SystemSettings
	where SS_ParmName='MWRoomsExtraPlaces'
	
	--обновление синхронизируемых таблиц происходит пакетами; размер указывается в процентах
	declare @updatePackageSize real
	set @updatePackageSize = 10.0	--in

	declare @sdtUpdatePackageSize int
	set @sdtUpdatePackageSize = (select count(*) from mwSpoDataTable with(nolock)) * @updatePackageSize / 100.0
	
	if (@sdtUpdatePackageSize <= 0)
		set @sdtUpdatePackageSize = @updatePackageSize
		
	declare @pdtUpdatePackageSize int
	set @pdtUpdatePackageSize = 100000

	declare @fields table(fname varchar(20));
	declare @blUpdateAllFields smallint	

	-- если параметр @update_fields не задан, то будем выполнять синхронизацию по
	-- всем основным полям
	if @update_fields is null or @update_fields = ''
	begin
		set @blUpdateAllFields = 1
	end
	else
	begin
		set @blUpdateAllFields = 0

		-- произведём сплит строки @update_fields по запятой
		-- и запишем результат в таблицу @fields
		declare @nextString varchar(4000) 
		declare @pos int, @nextPos int 
		declare @commaCheck varchar(1) 
		declare @string varchar(4000)
		declare @delimiter varchar(1)
	 
		set @delimiter = ','
		set @nextString = '' 
		set @commaCheck = right(@update_fields, 1) 
		set @string = @update_fields + @delimiter 
	 
		set @pos = charindex(@delimiter, @string) 
		set @nextPos = 1 
		while (@pos <> 0) 
		begin 
			set @nextString = substring(@string, 1, @pos - 1) 
	 
			insert into @fields( fname) 
			values (upper(ltrim(rtrim(@nextString))))
	 
			set @string = substring(@string, @pos + 1, len(@string)) 
			set @nextPos = @pos 
			set @pos = charindex(@delimiter, @string) 
		end
	end

	declare @dateUpdate datetime
	set @dateUpdate = '2000-01-01'

	if @blUpdateAllFields = 1
	begin
		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'mwSyncDictionaryData: Start', 1)

		select top 1 @dateUpdate = sl_date
		from systemlog 
		where convert(varchar(max), sl_message) = 'mwSyncDictionaryData: End'
		order by sl_date desc
	end
	else
	begin
		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'mwSyncDictionaryData: Start ' + @update_fields, 1)

		select top 1 @dateUpdate = sl_date
		from systemlog 
		where convert(varchar(max), sl_message) = 'mwSyncDictionaryData: End '+ @update_fields
		order by sl_date desc
	end

	-- страна
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='COUNTRY')
	begin
		if (exists(select top 1 1 from tbl_country with (nolock) where cn_updatedate > @dateUpdate))
		begin
			-- mwSpoDataTable
			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
				where exists(select top 1 1 from tbl_country with(nolock) 
					where sd_cnkey = cn_key and cn_updatedate > @dateUpdate and isnull(sd_cnname, '-1') <> isnull(cn_name, '')))
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_cnname = isnull(cn_name, '')
				from
					tbl_country
				where
					sd_cnkey = cn_key and 
					cn_updatedate > @dateUpdate and
					(isnull(sd_cnname, '-1') <> isnull(cn_name, '') or LEN(sd_cnname) <> LEN(cn_name))
			end
		end
	end
	
	-- отель
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='HOTEL')
	begin
		if (exists(select top 1 1 from hoteldictionary with (nolock) where hd_updatedate > @dateUpdate))
		begin
			-- mwSpoDataTable
			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
				where exists(select top 1 1 from dbo.hoteldictionary with(nolock) where
					sd_hdkey = hd_key
					and hd_updatedate > @dateUpdate
					and (
						isnull(sd_hdstars, '-1') <> isnull(hd_stars, '') or 
						LEN(sd_hdstars) <> LEN(hd_stars) or 
						isnull(sd_ctkey, -1) <> isnull(hd_ctkey, 0) or 
						isnull(sd_rskey, -1) <> isnull(hd_rskey, 0) or 
						isnull(sd_hdname, '-1') <> isnull(hd_name, '') or 
						LEN(sd_hdname) <> LEN(hd_name) or 
						isnull(sd_hotelurl, '-1') <> isnull(hd_http, '') or
						LEN(sd_hotelurl) <> LEN(hd_http)
					)
				)
			)
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_hdstars = isnull(hd_stars, ''),
					sd_ctkey = isnull(hd_ctkey, 0),
					sd_rskey = isnull(hd_rskey, 0),
					sd_hdname = isnull(hd_name, ''),
					sd_hotelurl = isnull(hd_http, '')
				from
					dbo.hoteldictionary
				where
					sd_hdkey = hd_key
					and hd_updatedate > @dateUpdate 
					and (
						isnull(sd_hdstars, '-1') <> isnull(hd_stars, '') or 
						LEN(sd_hdstars) <> LEN(hd_stars) or 
						isnull(sd_ctkey, -1) <> isnull(hd_ctkey, 0) or 
						isnull(sd_rskey, -1) <> isnull(hd_rskey, 0) or 
						isnull(sd_hdname, '-1') <> isnull(hd_name, '') or 
						LEN(sd_hdname) <> LEN(hd_name) or 
						isnull(sd_hotelurl, '-1') <> isnull(hd_http, '') or
						LEN(sd_hotelurl) <> LEN(hd_http)
					)
			end
		
			-- mwPriceDataTable	
			if @update_search_table > 0
			begin

				declare tableCursor cursor for
				select name from sys.tables 
				where name like @tablesCondition

				open tableCursor
				fetch tableCursor into @tableName
				while @@FETCH_STATUS = 0
				begin
					set @sql = '
								while exists(select top 1 1 from @tableName with(nolock) 
								where exists(select top 1 1 from dbo.hoteldictionary with(nolock) where
									pt_hdkey = hd_key 
									and hd_updatedate > ''@dateUpdate''
									and (
										isnull(pt_hdstars, ''-1'') <> isnull(hd_stars, '''') or 
										LEN(pt_hdstars) <> LEN(hd_stars) or 
										isnull(pt_ctkey, -1) <> isnull(hd_ctkey, 0) or 
										isnull(pt_rskey, -1) <> isnull(hd_rskey, 0)
										)
									)
								)
								begin
									update top (@pdtUpdatePackageSize) @tableName
									set
										pt_hdstars = isnull(hd_stars, ''''),
										pt_ctkey = isnull(hd_ctkey, 0),
										pt_rskey = isnull(hd_rskey, 0)
									from
										dbo.hoteldictionary
									where
										pt_hdkey = hd_key 
										and hd_updatedate > ''@dateUpdate''
										and (
											isnull(pt_hdstars, ''-1'') <> isnull(hd_stars, '''') or 
											LEN(pt_hdstars) <> LEN(hd_stars) or 
											isnull(pt_ctkey, -1) <> isnull(hd_ctkey, 0) or 
											isnull(pt_rskey, -1) <> isnull(hd_rskey, 0)
										)
								end
					'

					set @sql = REPLACE(@sql, '@tableName', @tableName)
					set @sql = REPLACE(@sql, '@pdtUpdatePackageSize', @pdtUpdatePackageSize)
					set @sql = REPLACE(@sql, '@dateUpdate', convert(varchar(max), @dateUpdate))

					exec (@sql)

					fetch tableCursor into @tableName
				end
				close tableCursor
				deallocate tableCursor
			end
		end
	end
	
	-- город отправления
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='CITY')
	begin
		if (exists(select top 1 1 from citydictionary with (nolock) where ct_updatedate > @dateUpdate))
		begin
			-- mwSpoDataTable
			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
				where exists(select top 1 1 from citydictionary with(nolock) 
					where sd_ctkeyfrom <> 0 and sd_ctkeyfrom = ct_key and ct_updatedate > @dateUpdate and isnull(sd_ctfromname, '-1') <> isnull(ct_name, '')))
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_ctfromname = isnull(ct_name,'')
				from
					dbo.citydictionary
				where
					sd_ctkeyfrom <> 0	-- город отправления -Без перелета- не обновляем, это константа (см. FillMasterwebSearchFields)
					and sd_ctkeyfrom = ct_key
					and ct_updatedate > @dateUpdate
					and isnull(sd_ctfromname, '-1') <> isnull(ct_name, '')
			end

			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
				where exists(select top 1 1 from citydictionary with(nolock) 
					where sd_ctkey = ct_key and ct_updatedate > @dateUpdate and isnull(sd_ctname, '-1') <> isnull(ct_name, '')
				)
			)
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_ctname = isnull(ct_name,'')
				from
					dbo.citydictionary
				where
					sd_ctkey = ct_key 
					and ct_updatedate > @dateUpdate 
					and isnull(sd_ctname, '-1') <> isnull(ct_name, '')
			end
		
		end
	end
	
	--курорт
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='RESORT')
	begin
		if (exists(select top 1 1 from resorts with (nolock) where rs_updatedate > @dateUpdate))
		begin
			-- mwSpoDataTable
			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock)
				where exists(select top 1 1 from dbo.resorts with(nolock) where
					sd_rskey = rs_key and rs_updatedate > @dateUpdate and isnull(sd_rsname, '-1') <> isnull(rs_name, '')
				)
			)
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_rsname = isnull(rs_name,'')
				from
					dbo.resorts
				where
					sd_rskey = rs_key and rs_updatedate > @dateUpdate and
					isnull(sd_rsname, '-1') <> isnull(rs_name, '')
			end

		end
	end
	
	-- тур
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='TOUR')
	begin
		while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock)
			where exists(select top 1 1 from dbo.tbl_turlist with(nolock) where
				sd_tlkey = tl_key
				and (
					isnull(sd_tourname, '-1') <> isnull(tl_nameweb, '') or 
					isnull(sd_tourtype, -1) <> isnull(tl_tip, 0)
				)
			)
		)
		begin
			update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
			set
				sd_tourname = isnull(tl_nameweb, ''),
				sd_tourtype = isnull(tl_tip, 0)
			from
				dbo.tbl_turlist
			where
				sd_tlkey = tl_key
				and (
					isnull(sd_tourname, '-1') <> isnull(tl_nameweb, '') or 
					isnull(sd_tourtype, -1) <> isnull(tl_tip, 0)
				)
		end
		
		-- mwPriceDataTable	
		if @update_search_table > 0
		begin			
			declare tableCursor cursor for
			select name from sys.tables 
			where name like @tablesCondition

			open tableCursor
			fetch tableCursor into @tableName
			while @@FETCH_STATUS = 0
			begin
				set @sql = '
							while exists(select top 1 1 from @tableName with(nolock)
								where exists(select top 1 1 from dbo.tbl_turlist with(nolock) where
									pt_tlkey = tl_key
									and (
										isnull(pt_tourtype, -1) <> isnull(tl_tip, 0)
									)
								)
							)
							begin
								update top (@pdtUpdatePackageSize) @tableName
								set
									pt_tourtype = isnull(tl_tip, 0)
								from
									dbo.tbl_turlist
								where
									pt_tlkey = tl_key
									and (
										isnull(pt_tourtype, -1) <> isnull(tl_tip, 0)
									)
							end
				'

				set @sql = REPLACE(@sql, '@tableName', @tableName)
				set @sql = REPLACE(@sql, '@pdtUpdatePackageSize', @pdtUpdatePackageSize)
				exec (@sql)

				fetch tableCursor into @tableName

			end
			close tableCursor
			deallocate tableCursor
		end
	end
	
	-- тип тура
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='TOURTYPE')
	begin
		while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
			where exists(select top 1 1 from dbo.tiptur with(nolock) 
				where sd_tourtype = tp_key and isnull(sd_tourtypename, '-1') <> isnull(tp_name, '')
			)
		)
		begin
			update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
			set
				sd_tourtypename = isnull(tp_name, '')
			from
				dbo.tiptur
			where
				sd_tourtype = tp_key
				and isnull(sd_tourtypename, '-1') <> isnull(tp_name, '')
		end
	end

	-- питание
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='PANSION')
	begin
		while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock) 
			where exists(select top 1 1 from dbo.pansion with(nolock) 
				where sd_pnkey = pn_key and isnull(sd_pncode, '-1') <> isnull(pn_code, '')
			)
		)
		begin
			update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
			set
				sd_pncode = isnull(pn_code, '')
			from
				dbo.pansion
			where
				sd_pnkey = pn_key and 
				isnull(sd_pncode, '-1') <> isnull(pn_code, '')
		end	
	end
	
	-- размещение
	--kadraliev MEG00029412 29.09.2010 Добавил синхронизацию признака isMain, возрастов детей
	if ((@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='ACCOMODATION')) and @update_search_table > 0
	begin	
		if (exists(select top 1 1 from accmdmentype with (nolock) where ac_updatedate > @dateUpdate))
		begin
			declare tableCursor cursor for
			select name from sys.tables 
			where name like @tablesCondition

			open tableCursor
			fetch tableCursor into @tableName
			while @@FETCH_STATUS = 0
			begin
				set @sql = '
							while exists(select top 1 1 from @tableName with(nolock)
								where exists(select top 1 1 from dbo.accmdmentype with(nolock) where
									pt_ackey = ac_key 
									and ac_updatedate > ''@dateUpdate''
									and (
										isnull(pt_main, -1) <> isnull(ac_main, 0) or
										isnull(pt_childagefrom, -1) <> isnull(ac_agefrom, 0) or
										isnull(pt_childageto, -1) <> isnull(ac_ageto, 0) or
										isnull(pt_childagefrom2, -1) <> isnull(ac_agefrom2, 0) or
										isnull(pt_childageto2, -1) <> isnull(ac_ageto2, 0)					
									)
								)
							)
							begin
								update top (@pdtUpdatePackageSize) @tableName
								set
									pt_main = isnull(ac_main, 0),
									pt_childagefrom = isnull(ac_agefrom, 0),
									pt_childageto = isnull(ac_ageto, 0),
									pt_childagefrom2 = isnull(ac_agefrom2, 0),
									pt_childageto2 = isnull(ac_ageto2, 0)
								from
									dbo.accmdmentype
								where
									pt_ackey = ac_key 
									and ac_updatedate > ''@dateUpdate''
									and (
										isnull(pt_main, -1) <> isnull(ac_main, 0) or
										isnull(pt_childagefrom, -1) <> isnull(ac_agefrom, 0) or
										isnull(pt_childageto, -1) <> isnull(ac_ageto, 0) or
										isnull(pt_childagefrom2, -1) <> isnull(ac_agefrom2, 0) or
										isnull(pt_childageto2, -1) <> isnull(ac_ageto2, 0)	
									)
							end
				'
				set @sql = REPLACE(@sql, '@tableName', @tableName)
				set @sql = REPLACE(@sql, '@pdtUpdatePackageSize', @pdtUpdatePackageSize)
				set @sql = REPLACE(@sql, '@dateUpdate', convert(varchar(max), @dateUpdate))
				exec (@sql)

				fetch tableCursor into @tableName	
			end

			close tableCursor
			deallocate tableCursor
		end
	end

	--kadraliev MEG00029412 29.09.2010 номер и размещение (количество основных и дополнительных мест)
	if ((@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='ROOM' or fname='ACCOMODATION')) and @update_search_table > 0
	begin
		if (exists(select top 1 1 from rooms with (nolock) where rm_updatedate > @dateUpdate) or exists(select top 1 1 from accmdmentype with (nolock) where ac_updatedate > @dateUpdate))
		begin
			declare tableCursor cursor for
			select name from sys.tables 
			where name like @tablesCondition

			open tableCursor
			fetch tableCursor into @tableName
			while @@FETCH_STATUS = 0
			begin
				set @sql = '
				while exists(select top 1 1 
				from @tableName with(nolock)
				inner join rooms with(nolock) on pt_rmkey = rm_key
				inner join accmdmentype with(nolock) on pt_ackey = ac_key
				where
				pt_main > 0 
				and (ac_updatedate > ''@dateUpdate'' or rm_updatedate > ''@dateUpdate'')
				and isnull(pt_mainplaces,-1) <> (	case when @mwAccomodationPlaces = 0
													then 
														isnull(rm_nplaces, 0)
													else 
														case when @findByAdultChild = 1 -- искать по взрослым
														then 
															isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
															-- искать по основным
														else 
															isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
														end
													end)
											 or
				isnull(pt_addplaces,-1) <> (case when isnull(ac_nmenexbed, -1) = -1
											then 
												case when @mwRoomsExtraPlaces <> 0
												then isnull(rm_nplacesex, 0)
												else isnull(ac_nmenexbed, 0)
											end
											else 
												case when @findByAdultChild = 1 -- искать по детям
												then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
												-- искать по дополнительным местам
												else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
											end
											end)
			)
			begin
				update top (@pdtUpdatePackageSize) @tableName
				set
					pt_mainplaces = (case when @mwAccomodationPlaces = 0
									then 
										isnull(rm_nplaces, 0)
									else 
										case when @findByAdultChild = 1 -- искать по взрослым
										then 
											isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
											-- искать по основным
										else 
											isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
										end
									end),
					pt_addplaces =	(case when isnull(ac_nmenexbed, -1) = -1
									then 
										case when @mwRoomsExtraPlaces <> 0
										then isnull(rm_nplacesex, 0)
										else isnull(ac_nmenexbed, 0)
									end
									else 
										case when @findByAdultChild = 1 -- искать по детям
										then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
										-- искать по дополнительным местам
										else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
									end
									end)
				from @tableName orig with(nolock)
					left join rooms with(nolock) on orig.pt_rmkey = rm_key
					left join accmdmentype with(nolock) on orig.pt_ackey = ac_key
				where
					pt_main > 0 
					and (ac_updatedate > ''@dateUpdate'' or rm_updatedate > ''@dateUpdate'')
					and isnull(pt_mainplaces,-1) <> (	case when @mwAccomodationPlaces = 0
														then 
															isnull(rm_nplaces, 0)
														else 
															case when @findByAdultChild = 1 -- искать по взрослым
															then 
																isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
																-- искать по основным
															else 
																isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
															end
														end)
												 or
					isnull(pt_addplaces,-1) <> (case when isnull(ac_nmenexbed, -1) = -1
												then 
													case when @mwRoomsExtraPlaces <> 0
													then isnull(rm_nplacesex, 0)
													else isnull(ac_nmenexbed, 0)
												end
												else 
													case when @findByAdultChild = 1 -- искать по детям
													then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
													-- искать по дополнительным местам
													else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
												end
												end)
			end
				'

				-- Признак того, откуда брать основые места
				-- Если @isMainPlacesFromAccomodation = 1, основные места беруться из таблицы Accmdmentype, иначе из Rooms
				-- Синхронизация основных мест происходит если pt_main > 0
				declare @mwAccomodationPlaces bit
				select @mwAccomodationPlaces = SS_ParmValue
				from dbo.SystemSettings
				where SS_ParmName='MWAccomodationPlaces'

				-- Признак того, откуда брать дополнительные места
				-- Если @isAddPlacesFromRooms = 1 и в таблице Accmdmentype по данному ключу NULL,
				-- дополнительные места беруться из таблицы Rooms, иначе из Accmdmentype
				declare @mwRoomsExtraPlaces nvarchar(254)
				select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings with(nolock) 
				where SS_ParmName = 'MWRoomsExtraPlaces'

				declare @findByAdultChild int
				set @findByAdultChild = isnull((select top 1 convert(int, SS_ParmValue) from SystemSettings where SS_ParmName = 'OnlineFindByAdultChild'), 0)

				set @sql = REPLACE(@sql, '@mwAccomodationPlaces', @mwAccomodationPlaces)
				set @sql = REPLACE(@sql, '@findByAdultChild', @findByAdultChild)
				set @sql = REPLACE(@sql, '@mwRoomsExtraPlaces', @mwRoomsExtraPlaces)

				set @sql = REPLACE(@sql, '@tableName', @tableName)
				set @sql = REPLACE(@sql, '@pdtUpdatePackageSize', @pdtUpdatePackageSize)
				set @sql = REPLACE(@sql, '@dateUpdate', convert(varchar(max), @dateUpdate))
				exec (@sql)

				fetch tableCursor into @tableName	
			end

			close tableCursor
			deallocate tableCursor		
		end
	end

	-- расчитанный тур
	if (@blUpdateAllFields = 1) or exists(select top 1 1 from @fields where fname='TP_TOUR')
	begin
		if (exists(select top 1 1 from tp_tours with (nolock) where to_updatetime > @dateUpdate))
		begin
			while exists(select top 1 1 from dbo.mwSpoDataTable with(nolock)
				where exists(select top 1 1 from dbo.tp_tours with(nolock) where
					sd_tourkey = to_key
					and to_updatetime > @dateUpdate
					and (
						isnull(sd_tourcreated, '1900-01-02') <> isnull(to_datecreated, '1900-01-01') or 
						isnull(sd_tourvalid, '1900-01-02') <> isnull(to_datevalid, '1900-01-01')
					)
				)
			)
			begin
				update top (@sdtUpdatePackageSize) dbo.mwSpoDataTable
				set
					sd_tourcreated = isnull(to_datecreated, '1900-01-01'),
					sd_tourvalid = isnull(to_datevalid, '1900-01-01')
				from
					dbo.tp_tours
				where
					sd_tourkey = to_key
					and to_updatetime > @dateUpdate
					and (
						isnull(sd_tourcreated, '1900-01-02') <> isnull(to_datecreated, '1900-01-01') or 
						isnull(sd_tourvalid, '1900-01-02') <> isnull(to_datevalid, '1900-01-01')
					)
			end

			-- mwPriceDataTable
			if @update_search_table > 0
			begin		
				declare tableCursor cursor for
				select name from sys.tables 
				where name like @tablesCondition

				open tableCursor
				fetch tableCursor into @tableName
				while @@FETCH_STATUS = 0
				begin
					set @sql = '
								while exists(select top 1 1 from @tableName with(nolock)
									where exists(select top 1 1 from dbo.tp_tours with(nolock) where
										pt_tourkey = to_key 
										and to_updatetime > ''@dateUpdate''
										and (
											isnull(pt_tourcreated, ''1900-01-02'') <> isnull(to_datecreated, ''1900-01-01'') or 
											isnull(pt_tourvalid, ''1900-01-02'') <> isnull(to_datevalid, ''1900-01-01'') or 
											isnull(pt_rate, ''-1'') COLLATE DATABASE_DEFAULT <> isnull(to_rate, '''') COLLATE DATABASE_DEFAULT
										)
									)
								)
								begin
									update top (@pdtUpdatePackageSize) @tableName
									set
										pt_tourcreated = isnull(to_datecreated, ''1900-01-01''),
										pt_tourvalid = isnull(to_datevalid, ''1900-01-01''),
										pt_rate = isnull(to_rate, '''')
									from
										dbo.tp_tours
									where
										pt_tourkey = to_key 
										and to_updatetime > ''@dateUpdate''
										and (
											isnull(pt_tourcreated, ''1900-01-02'') <> isnull(to_datecreated, ''1900-01-01'') or 
											isnull(pt_tourvalid, ''1900-01-02'') <> isnull(to_datevalid, ''1900-01-01'') or 
											isnull(pt_rate, ''-1'') COLLATE DATABASE_DEFAULT <> isnull(to_rate, '''') COLLATE DATABASE_DEFAULT
										)
								end
					'

					set @sql = REPLACE(@sql, '@tableName', @tableName)
					set @sql = REPLACE(@sql, '@pdtUpdatePackageSize', @pdtUpdatePackageSize)
					set @sql = REPLACE(@sql, '@dateUpdate', convert(varchar(max), @dateUpdate))

					exec (@sql)
					fetch tableCursor into @tableName	
				end

				close tableCursor
				deallocate tableCursor
			
			end
		end
	end

	if @blUpdateAllFields = 1
		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'mwSyncDictionaryData: End', 1)
	else
		insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'mwSyncDictionaryData: End ' + @update_fields, 1)
end
GO

grant exec on [dbo].[mwSyncDictionaryData] to public
go
/*********************************************************************/
/* end sp_mwSyncDictionaryData.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwSyncDictionaryData.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwTourInfo.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_mwTourInfo.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwTourInfo]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwTourInfo]
GO

CREATE proc [dbo].[mwTourInfo](@onlySpo smallint = null, @tourKey int = null, @countryKey int = null, @cityFromKey int = null)
as
begin
	--<VERSION>9.20.1</VERSION>
	--<DATA>11.08.2014</DATA>
	select to_cnkey as pt_cnkey, 
		cn_name, 
		isnull(tl_ctdeparturekey,0) as pt_ctkeyfrom, 
		isnull(ct_name, '-Без перелета-') as ct_name, 
		pld_HotelCityNames as ct_name1,
		to_key as pt_tourkey,
		to_name as pt_tourname, 
		tl_webhttp as pt_toururl, 
		tl_rate as pt_rate,
		dbo.mwTop5TourDates(to_cnkey, to_key, tl_key, 0) as dates, 
		TO_HotelNights as nights,
		TO_MinPrice as min_price,
		to_DateCreated pt_tourcreated,
		to_trkey pt_trkey,
		pld_HotelKeys as hotelkeys,
		pld_HotelCityKeys as ctkeys,
		tp_name as pttourtype,
		tl_tip as pt_tourtype,
		to_attribute,
		pld_AirlineNames as airline,
		pld_AirlineKeys as airlinekeys,
		replace(replace(pld_ServiceClassesNames, ';', '<br/>'), ',', ' ') as tourdescr 
	from tp_tours with(nolock)
		left join PriceListDetails with(nolock) on pld_tokey = to_key
		left join turlist with(nolock) on tl_key = to_trkey
		left join tiptur with(nolock) on tp_key=tl_tip
		left join dbo.Country with(nolock) on to_cnkey = cn_key
		left join dbo.CityDictionary with(nolock) on tl_ctdeparturekey = ct_key
	where TO_IsEnabled > 0 
			and TO_DateValid >= getdate() 
			and (isnull(@onlySpo, 0) = 0 or (to_attribute & 1) > 0 )
			and (isnull(@tourKey, 0) in (0, to_key))
			and (isnull(@countryKey, 0) in (0, to_cnkey))
			and (isnull(@cityFromKey, 0) in (0, ct_key))
end
GO

GRANT EXEC on [dbo].[mwTourInfo] to public
GO
/*********************************************************************/
/* end sp_mwTourInfo.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_mwTourInfo.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_PagingPax.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_PagingPax.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PagingPax]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PagingPax]
GO

CREATE procedure [dbo].[PagingPax]
@countryKey	int,			
	@departFromKey	int,		
	@filter		varchar(max),	
	@sortExpr	varchar(1024),	
	@pageNum	int=0,			
	@pageSize	int=9999,		
	@agentKey	int=0,			
	@hotelQuotaMask smallint=0,	
	@aviaQuotaMask smallint=0,	
	@flightGroups	varchar(256),	
	@checkAgentQuota smallint,
	@checkCommonQuota smallint,
	@checkNoLongQuota smallint,
	@requestOnRelease smallint,
	@expiredReleaseResult int,
	@noPlacesResult int,
	@findFlight smallint,
	@checkFlightPacket smallint,
	@checkAllPartnersQuota smallint = null
AS
set nocount on

--<DATE>2014-02-17</DATE>
--<VERSION>2009.2.21</VERSION>

declare @pagingType int
	set @pagingType = 0

-- Move @countryKey and @departFromKey to filter
set @filter=' pt_cnkey= ' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom= ' + LTRIM(STR(@departFromKey)) + ' and ' + @filter

declare @MAX_ROWCOUNT int
	set @MAX_ROWCOUNT=1000 

declare @sortType smallint
	set @sortType = 1	

declare @spageNum varchar(30)		
	set @spageNum=LTRIM(STR(@pageNum))

declare @spageSize varchar(30)		
	set @spageSize=LTRIM(STR(@pageSize))

declare @sql varchar(max)
	set @sql=''

declare @zptPos int
declare @prefix varchar(1024)
set @zptPos = charindex(',',@sortExpr)
if(@zptPos > 0)
	set @prefix = substring(@sortExpr, 1, @zptPos)
else
	set @prefix = @sortExpr

if(charindex('desc', @prefix) > 0)
	set @sortType=-1

declare @viewName varchar(256)
if(@sortType <= 0)
	set @viewName='mwPriceTablePaxViewDesc'
else
	set @viewName='mwPriceTablePaxViewAsc'


CREATE TABLE #days
(
	days int,
	nights int
)

SET @sql='
	select		distinct pt_days,pt_nights 
	from		dbo.mwPriceTable t1 with(nolock) 
---- Берем только последние цены
--	inner join 
--	(	
--		select	pt_ctkeyfrom ctkeyfrom,	pt_cnkey cnkey, 		pt_tourtype tourtype,	pt_mainplaces mainplaces, 
--				pt_addplaces addplaces,	pt_tourdate tourdate,	pt_pnkey pnkey, 		pt_pansionkeys pansionkeys,
--				pt_days days,			pt_nights nights,		pt_hdkey hdkey,			pt_hotelkeys hotelkeys,
--				pt_hrkey hrkey,			max(pt_key) ptkey 
--		from	dbo.mwPriceTable with(nolock) 
--		group by 
--				pt_ctkeyfrom,			pt_cnkey,				pt_tourtype,			pt_mainplaces,
--				pt_addplaces,			pt_tourdate,			pt_pnkey,				pt_pansionkeys,
--				pt_nights,				pt_hotelnights,			pt_days,				pt_hdkey,
--				pt_hotelkeys,			pt_hrkey
--	) t2
--	on			t1.pt_ctkeyfrom=t2.ctkeyfrom 		and			t1.pt_cnkey=t2.cnkey 
--		and		t1.pt_tourtype = t2.tourtype 		and			t1.pt_mainplaces=t2.mainplaces 
--		and		t1.pt_addplaces=t2.addplaces 		and			t1.pt_tourdate=t2.tourdate
--		and		t1.pt_pnkey=t2.pnkey				and			t1.pt_nights=t2.nights
--		and		t1.pt_days=t2.days					and			t1.pt_hdkey=t2.hdkey 
--		and		t1.pt_hrkey=t2.hrkey				and			t1.pt_key=t2.ptkey 
	where ' + @filter + ' and pt_days is not null and pt_nights is not null and pt_days>=1 and pt_nights>=1		-- минимальная длина туров
	order by pt_days,pt_nights'
--print @sql
--print ' Before Execute GetDurationsScript: ' + CONVERT(VARCHAR(20), getdate(),114 )
INSERT INTO #days EXEC(@sql)
--print ' After  Execute GetDurationsScript: ' + CONVERT(VARCHAR(20), getdate(),114 )

	create table #checked(
		svkey int,		code int,
		rmkey int,		rckey int,
		date datetime,	[day] int,
		days int,		prkey int,
		pkkey int,		res varchar(256),
		places int,		step_index smallint,
		price_correction int
	)

	create table #resultsTable(
		paging_id int, 
		pt_ctkey int, 
		pt_ctname varchar(50), 
		pt_hdkey int, 
		pt_hdname varchar(60), 
		pt_hdstars varchar(12), 
		pt_hotelurl varchar(254),
		pt_pnkey int, 
		pt_pncode varchar(30), 
		pt_rate varchar(3), 
		pt_rmkey int, 
		pt_rmname varchar(35), 
		pt_rckey int, 
		pt_rcname varchar(35),
		pt_tourdate datetime
	)

	create table #quotaCheckTable(
		pt_key int,
		pt_pricekey bigint,
		pt_tourdate datetime,			
		pt_days int,
		pt_nights int,
		pt_hdkey int,		
		pt_hdday int,
		pt_hdnights int,			
		pt_hdpartnerkey int,
		pt_rmkey int,
		pt_rckey int,
		pt_chkey int,
		pt_chday int,
		pt_chpkkey int,
		pt_chprkey int,
		pt_chbackkey int,
		pt_chbackday int,
		pt_chbackpkkey int,
		pt_chbackprkey int,
		pt_hdquota varchar(10),
		pt_chtherequota varchar(256),
		pt_chbackquota varchar(256)		
	)

declare @d int
declare @n int
declare @sdays varchar(10)

declare @sKeysSelect varchar(2024)
	set @sKeysSelect=''

declare @sAlter varchar(2024)
	set @sAlter=''

declare @sWhere varchar(5000)
	set @sWhere=''

--declare @sAddSelect varchar(3950)
--	set @sAddSelect=''
--
--declare @sJoin varchar(3950)
--	set @sJoin=''

declare @sJoinTable varchar(20)
	set @sJoinTable=''

declare @sTmp varchar(8000)
	set @sTmp=''

declare @rowCount int

declare @priceFilter nvarchar(512)
	set @priceFilter = N''

declare @priceKeyFilter nvarchar(512)
	set @priceKeyFilter = N''

declare @nightsPart nvarchar(256)
declare @hotelNightsPart nvarchar(256)

declare @dml varchar(7950)
	set @dml = N''

DECLARE dCur CURSOR FOR SELECT days,nights FROM #days
OPEN dCur
FETCH NEXT FROM dCur INTO @d,@n
WHILE (@@fetch_status=0)
BEGIN
	set @sdays=LTRIM(STR(@d)) + '_' + LTRIM(STR(@n))
	if(substring(@sortExpr, 1, 1) = '*')
	begin
		set @sortExpr = 'p_' + @sdays + '_DBL' + substring(@sortExpr, 2, len(@sortExpr) - 1)
	end
	
----------------------------------------------------------
-- Prepare script for add quota columns to result table --
----------------------------------------------------------
 	if(len(@dml) > 0) 
		set @dml = @dml + ','

	set @dml = @dml + 'prk_' + @sdays + '_DBL varchar(256), hq_' + @sdays + '_DBL varchar(10), cq_' + @sdays + '_DBL varchar(256), cbq_' + @sdays + '_DBL varchar(256), ' +
		'prk_' + @sdays + '_SGL varchar(256), hq_' + @sdays + '_SGL varchar(10), cq_' + @sdays + '_SGL varchar(256), cbq_' + @sdays + '_SGL varchar(256), ' +
		'prk_' + @sdays + '_EXB varchar(256), hq_' + @sdays + '_EXB varchar(10), cq_' + @sdays + '_EXB varchar(256), cbq_' + @sdays + '_EXB varchar(256), ' +
		'prk_' + @sdays + '_CHD varchar(256), hq_' + @sdays + '_CHD varchar(10), cq_' + @sdays + '_CHD varchar(256), cbq_' + @sdays + '_CHD varchar(256)'

---------------------------------------------------------------------------------------
-- Prepare script for select price-duration columns values from View to result table --
---------------------------------------------------------------------------------------
 	if(len(@sKeysSelect) > 0)
		set @sKeysSelect=@sKeysSelect + ', '
	
	set @sKeysSelect=@sKeysSelect 
		+ '  p_' + @sdays + '_DBL' + ', pk_' + @sdays + '_DBL'
		+ ', p_' + @sdays + '_SGL' + ', pk_' + @sdays + '_SGL'
		+ ', p_' + @sdays + '_EXB' + ', pk_' + @sdays + '_EXB'
		+ ', p_' + @sdays + '_CHD' + ', pk_' + @sdays + '_CHD'

-------------------------------------------------------------------
-- Prepare script for add price-duration columns to result table --
-------------------------------------------------------------------
	if(len(@sAlter) > 0)
		set @sAlter=@sAlter + ','

	set @sAlter=@sAlter + 'p_' + @sdays + '_DBL float,pk_' + @sdays + '_DBL int'
		+ ',p_' + @sdays + '_SGL float,pk_' + @sdays + '_SGL int'
		+ ',p_' + @sdays + '_EXB float,pk_' + @sdays + '_EXB int'
		+ ',p_' + @sdays + '_CHD float,pk_' + @sdays + '_CHD int'

-----------------------------------------------
-- Prepare filter predicate for quotas table --
-----------------------------------------------
	if(len(@sWhere) > 0)
		set @sWhere=@sWhere + ' or '

	set @sWhere=@sWhere + 'pt_key in (select pk_' + @sdays + '_DBL from #resultsTable)'
		+ ' or pt_key in (select pk_' + @sdays + '_SGL from #resultsTable)'
		+ ' or pt_key in (select pk_' + @sdays + '_EXB from #resultsTable)'
		+ ' or pt_key in (select pk_' + @sdays + '_CHD from #resultsTable)'

--	if(len(@sAddSelect) > 0)
--		set @sAddSelect=@sAddSelect + ','
--
--	set @sAddSelect=@sAddSelect + ' t_' + @sdays + '_DBL.pt_pricekey prk_' + @sdays + '_DBL, t_' + @sdays + '_DBL.pt_hdquota hq_' + @sdays + '_DBL, t_' + @sdays + '_DBL.pt_chtherequota cq_' + @sdays + '_DBL, t_' + @sdays + '_DBL.pt_chbackquota cbq_' + @sdays + '_DBL'
--								+ ',t_' + @sdays + '_SGL.pt_pricekey prk_' + @sdays + '_SGL, t_' + @sdays + '_SGL.pt_hdquota hq_' + @sdays + '_SGL, t_' + @sdays + '_SGL.pt_chtherequota cq_' + @sdays + '_SGL, t_' + @sdays + '_SGL.pt_chbackquota cbq_' + @sdays + '_SGL'
--								+ ',t_' + @sdays + '_EXB.pt_pricekey prk_' + @sdays + '_EXB, t_' + @sdays + '_EXB.pt_hdquota hq_' + @sdays + '_EXB, t_' + @sdays + '_EXB.pt_chtherequota cq_' + @sdays + '_EXB, t_' + @sdays + '_EXB.pt_chbackquota cbq_' + @sdays + '_EXB'
--								+ ',t_' + @sdays + '_CHD.pt_pricekey prk_' + @sdays + '_CHD, t_' + @sdays + '_CHD.pt_hdquota hq_' + @sdays + '_CHD, t_' + @sdays + '_CHD.pt_chtherequota cq_' + @sdays + '_CHD, t_' + @sdays + '_CHD.pt_chbackquota cbq_' + @sdays + '_CHD'
--
--
--	set @sJoin=@sJoin + ' left outer join #quotaCheckTable t_' + @sdays + '_DBL on t.pk_' + @sdays + '_DBL = t_' + @sdays + '_DBL.pt_key'
--		+ ' left outer join #quotaCheckTable t_' + @sdays + '_SGL on t.pk_' + @sdays + '_SGL = t_' + @sdays + '_SGL.pt_key'
--		+ ' left outer join #quotaCheckTable t_' + @sdays + '_EXB on t.pk_' + @sdays + '_EXB = t_' + @sdays + '_EXB.pt_key'
--		+ ' left outer join #quotaCheckTable t_' + @sdays + '_CHD on t.pk_' + @sdays + '_CHD = t_' + @sdays + '_CHD.pt_key'

	FETCH NEXT FROM dCur INTO @d,@n
END
CLOSE dCur
DEALLOCATE dCur

if(len(@sKeysSelect) > 0)
begin
	set @sTmp = 'alter table #resultsTable add ' + @sAlter
	exec(@sTmp)

	declare @daysPart varchar(50)
	set @daysPart = dbo.mwGetFilterPart(@filter, 'pt_days')

	if(@daysPart is not null)
		set @filter = REPLACE(@filter, @daysPart, '1 = 1')

	--print ' Before Execute PagingSelect: ' + CONVERT(VARCHAR(20), getdate(),114 )

	declare @nSql nvarchar(4000)
	set @nSql=N'
	DECLARE @firstRecord int,@lastRecord int
	SET @firstRecord=('+ @spageNum + ' - 1) * ' + @spageSize+ ' + 1
	SET @lastRecord=('+ @spageNum +' *'+ @spageSize + ')
	select top 250 identity(int,1,1) 
	paging_id, 
	pt_ctkey, 
	ct_name pt_ctname, 
	pt_hdkey, 
	hd_name as pt_hdname, 
	hd_stars pt_hdstars, 
	hd_http as pt_hotelurl, 
	pt_pnkey, 
	pn_code pt_pncode, 
	pt_rate, 
	pt_rmkey, 
	rm_name pt_rmname, 
	pt_rckey, 
	rc_name pt_rcname, 
	pt_tourdate' 
	
	if(len(@sKeysSelect) > 0)
		set @nSql=@nSql + ',' + @sKeysSelect 
	
	set @nSql=@nSql + '
		into #pg from ' + @viewName + ' inner join hoteldictionary with(nolock) on pt_hdkey = hd_key 
		join CityDictionary with(nolock) on CT_Key = pt_ctkey 
		join Pansion with(nolock) on pt_pnkey = PN_KEY
		join Rooms with(nolock) on pt_rmkey = RM_Key
		join RoomsCategory with(nolock) on RC_Key = pt_rckey
		where ' + @filter

	if(len(isnull(@sortExpr,'')) > 0)
		set @nSql=@nSql + '		order by ' + @sortExpr 
		
	Set @rowCount = null
		
	if(@rowCount is not null)
		set @nSql = @nSql + '
	select @@RowCount as RowsCount'
	else
		set @nSql = @nSql + '
	set @rowCountOUT = @@RowCount'

	set @nSql=@nSql + ' 
	select paging_id, 
	pt_ctkey, 
	pt_ctname, 
	pt_hdkey, 
	pt_hdname, 
	pt_hdstars, 
	pt_hotelurl, 
	pt_pnkey, 
	pt_pncode, 
	pt_rate, 
	pt_rmkey, 
	pt_rmname, 
	pt_rckey, 
	pt_rcname, 
	pt_tourdate'
	if(len(@sKeysSelect) > 0)
		set @nSql=@nSql + ',' + @sKeysSelect 
	set @nSql = @nSql +
	'
	from #pg WHERE #pg.paging_id BETWEEN @firstRecord and @lastRecord order by paging_id
	'

	declare @ParamDef nvarchar(100)
	set @ParamDef = '@rowCountOUT int output'
	
--	print @nSql
	INSERT INTO #resultsTable
		exec sp_executesql @nSql, @ParamDef, @rowCountOUT = @rowCount output
	
	Set @rowCount = (select COUNT(*) from #resultsTable)		--MEG00038933 Tkachuk 16-02-2012 Получаем количество строк не через output-переменную в предыдущей строке, а через select в результирующей таблице
	Select @rowCount

--print ' After Filling #resultTable: ' + CONVERT(VARCHAR(20), getdate(), 114)
--print @nSql

	-- Add quota columns to result table
	set @dml = 'ALTER TABLE #resultsTable ADD  ' + @dml
	exec (@dml)

	SET @sTmp = 'select pt_key, 
	pt_pricekey, 
	pt_tourdate, 
	pt_days,	
	pt_nights, 
	pt_hdkey, 
	pt_hdday,
	pt_hdnights, 
	(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_hdpartnerkey end), 
	pt_rmkey,	
	pt_rckey, 
	pt_chkey,	
	pt_chday, 
	pt_chpkkey,
	pt_chprkey, 
	pt_chbackkey, 
	pt_chbackday, 
	pt_chbackpkkey, 
	pt_chbackprkey, 
	null, 
	null, 
	null
	from dbo.mwPriceTablePax
	where ' + @sWhere
--print ' Before Execute GetQuotaCheckTableScript: ' + CONVERT(VARCHAR(20), getdate(),114 )
--	print @sTmp
	INSERT INTO #quotaCheckTable exec(@sTmp)
--print ' After  Execute GetQuotaCheckTableScript: ' + CONVERT(VARCHAR(20), getdate(),114 )

	declare quotaCursor cursor for
	select pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,
		pt_chkey,pt_chbackkey,
		pt_hdday,pt_hdnights,pt_hdpartnerkey,pt_chday,(case when @checkFlightPacket > 0 then pt_chpkkey else -1 end) as pt_chpkkey,pt_chprkey,
		pt_chbackday,(case when @checkFlightPacket > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey, pt_chbackprkey,pt_days
	from #quotaCheckTable
	for update of pt_hdquota,pt_chtherequota,pt_chbackquota

	declare @hdkey int,@rmkey int,@rckey int,@tourdate datetime,
		@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,
		@chday int,@chpkkey int,@chprkey int,@chbackday int,
		@chbackpkkey int,@chbackprkey int,@days int

	open quotaCursor

	fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
		@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
		@chday,@chpkkey,@chprkey,@chbackday,
		@chbackpkkey,@chbackprkey,@days

	declare @tmpHotelQuota varchar(10)
	declare @tmpThereAviaQuota varchar(256)		
	declare @tmpBackAviaQuota varchar(256)		
	declare @allPlaces int,@places int

	while(@@fetch_status=0)
	begin
		if(@hotelQuotaMask > 0)
		begin
			set @tmpHotelQuota=null
			select @tmpHotelQuota=res from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
			if (@tmpHotelQuota is null)
			begin
				select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey,@hdprkey,@tourdate,@hdday,@hdnights,@requestOnRelease,@noPlacesResult,@checkAgentQuota,@checkCommonQuota,@checkNoLongQuota,0,0,0,0,0,@expiredReleaseResult)
				set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))

				insert into #checked(svkey,code,rmkey,rckey,date,[day],days,prkey,pkkey,res) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota)
			end
		end

		update #quotaCheckTable set pt_hdquota=@tmpHotelQuota,
			pt_chtherequota=@tmpThereAviaQuota,
			pt_chbackquota=@tmpBackAviaQuota
		where CURRENT OF quotaCursor


		fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
			@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
			@chday,@chpkkey,@chprkey,@chbackday,
			@chbackpkkey,@chbackprkey,@days
	end

	close quotaCursor
	deallocate quotaCursor

------------------------------------------------------------------------------------------
------------------------- Fill #resultsTable with data of quotes -------------------------
--																						--
	DECLARE @UpdateQuotesSQL varchar(8000)												--
		SET @UpdateQuotesSQL = N''														--
																						--
	DECLARE daysCursor CURSOR FOR SELECT days,nights FROM #days							--
	OPEN daysCursor																		--
	FETCH NEXT FROM daysCursor INTO @d,@n												--
	WHILE (@@fetch_status=0)															--
	BEGIN																				--
		SET @sdays = LTRIM(STR(@d)) + '_' + LTRIM(STR(@n))								--
																						--
		SET @UpdateQuotesSQL =															--
			'UPDATE #resultsTable SET ' +												--
				'prk_' + @sdays + '_DBL = pt_pricekey, ' +								--
				'hq_' + @sdays + '_DBL = pt_hdquota, ' +								--
				'cq_' + @sdays + '_DBL = pt_chtherequota, ' +							--
				'cbq_' + @sdays + '_DBL = pt_chbackquota ' +							--
			'FROM #quotaCheckTable WHERE pk_' + @sdays + '_DBL = pt_key '				--
		EXEC (@UpdateQuotesSQL)															--
																						--
		SET @UpdateQuotesSQL =															--
			'UPDATE #resultsTable SET ' +												--
				'prk_' + @sdays + '_SGL = pt_pricekey, ' +								--
				'hq_' + @sdays + '_SGL = pt_hdquota, ' +								--
				'cq_' + @sdays + '_SGL = pt_chtherequota, ' +							--
				'cbq_' + @sdays + '_SGL = pt_chbackquota ' +							--
			'FROM #quotaCheckTable WHERE pk_' + @sdays + '_SGL = pt_key '				--
		EXEC (@UpdateQuotesSQL)															--
																						--
		SET @UpdateQuotesSQL =															--
			'UPDATE #resultsTable SET ' +												--
				'prk_' + @sdays + '_EXB = pt_pricekey, ' +								--
				'hq_' + @sdays + '_EXB = pt_hdquota, ' +								--
				'cq_' + @sdays + '_EXB = pt_chtherequota, ' +							--
				'cbq_' + @sdays + '_EXB = pt_chbackquota ' +							--
			'FROM #quotaCheckTable WHERE pk_' + @sdays + '_EXB = pt_key '				--
		EXEC (@UpdateQuotesSQL)															--
																						--
		SET @UpdateQuotesSQL =															--
			'UPDATE #resultsTable SET ' +												--
				'prk_' + @sdays + '_CHD = pt_pricekey, ' +								--
				'hq_' + @sdays + '_CHD = pt_hdquota, ' +								--
				'cq_' + @sdays + '_CHD = pt_chtherequota, ' +							--
				'cbq_' + @sdays + '_CHD = pt_chbackquota ' +							--
			'FROM #quotaCheckTable WHERE pk_' + @sdays + '_CHD = pt_key '				--
		EXEC (@UpdateQuotesSQL)															--
																						--
		FETCH NEXT FROM daysCursor INTO @d,@n											--
	END																					--
	CLOSE daysCursor																	--
	DEALLOCATE daysCursor																--
--																						--
-------------------------										 -------------------------
------------------------------------------------------------------------------------------

select * from #resultsTable

end
else 
begin
	select 0
	select * from #resultsTable
end
GO

GRANT EXECUTE on [dbo].[PagingPax] to public
GO
/*********************************************************************/
/* end sp_PagingPax.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_PagingPax.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_PagingSelect.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_PagingSelect.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[PagingSelect]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[PagingSelect]
GO

CREATE procedure [dbo].[PagingSelect]
@pagingType int,
@sKeysSelect varchar(2024),
@spageNum varchar(30),
@spageSize varchar(30),
@filter	varchar(max),
@orderBy varchar (2024),
@tableName varchar(256),
@viewName varchar(256),
@rowCount int output
as
begin

--<DATE>2014-02-17</DATE>
--<VERSION>2009.2.21</VERSION>

create table #checked(
	svkey int,
	code int,
	rmkey int,
	rckey int,
	date datetime,
	day int,
	days int,
	prkey int,
	pkkey int,
	res varchar(10)
)	

declare @sql nvarchar(max)
declare @nRowCount int
set @nRowCount = 1000
set @sql=N'
DECLARE @firstRecord int,@lastRecord int
SET @firstRecord=('+ @spageNum + ' - 1) * ' + @spageSize+ ' + 1
SET @lastRecord=('+ @spageNum +' *'+ @spageSize + ')
select top ' + ltrim(str(@nRowCount)) + ' identity(int,1,1) paging_id, pt_key,pt_tourdate,pt_pnkey,pt_hdkey,pt_hrkey,pt_tourkey' 
if(len(@sKeysSelect) > 0)
	set @sql=@sql + ',' + @sKeysSelect 
set @sql=@sql + '
into #pg from ' + @viewName + ' where ' + @filter

if(len(isnull(@orderBy,'')) > 0)
	set @sql=@sql + ' order by ' + @orderBy 

if(@rowCount is not null)
	set @sql = @sql + '
		select @@RowCount as RowsCount'
else
	begin
		set @sql = @sql + '
			set @rowCountOUT = @@RowCount
'
	end
set @sql=@sql + ' 
select #pg.paging_id paging_id,
#pg.pt_key,
tbl.pt_ctkeyfrom,
tbl.pt_cnkey,
#pg.pt_tourdate,
#pg.pt_pnkey,
#pg.pt_hdkey,
#pg.pt_hrkey,
#pg.pt_tourkey,
tbl.pt_tlkey as pt_tlkey,
tl_tip as pt_tourtype,
tl_nameweb as pt_tourname,
tl_webhttp as pt_toururl,
hd_name pt_hdname,
hd_stars pt_hdstars,
hd_ctkey pt_ctkey,
hd_rskey pt_rskey,
hd_http pt_hotelurl,
pn_code pt_pncode,
tbl.pt_rate pt_rate,
tbl.pt_rmkey pt_rmkey,
tbl.pt_rckey pt_rckey,
tbl.pt_ackey pt_ackey,
tbl.pt_childagefrom pt_childagefrom,
tbl.pt_childageto pt_childageto,
tbl.pt_childagefrom2 pt_childagefrom2,
tbl.pt_childageto2 pt_childageto2, 
cn_name pt_cnname, 
ct_name pt_ctname, 
rs_name pt_rsname, 
rm_name pt_rmname,
rc_name pt_rcname,
ac_name pt_acname, 
tbl.pt_chkey pt_chkey, 
tbl.pt_chbackkey pt_chbackkey, 
tbl.pt_hotelkeys pt_hotelkeys, 
tbl.pt_hotelroomkeys pt_hotelroomkeys, 
tbl.pt_hotelnights pt_hotelnights, 
hd_stars pt_hotelstars, 
tbl.pt_pansionkeys pt_pansionkeys, 
tbl.pt_rckey pt_actual, 
dbo.mwGetVisaDeadlineDate(tbl.pt_tlkey, tbl.pt_tourdate, tbl.pt_ctkeyfrom) pt_visadeadline ' --MEG00038933 Tkachuk 16-02-2012: не хватало двух последних столбцов для корректной работы хранимой процедуры
if(len(@sKeysSelect) > 0)
	set @sql=@sql + ',' + @sKeysSelect 
set @sql = @sql +
'
from #pg inner join ' + @tableName + ' tbl on tbl.pt_key=#pg.pt_key 
inner join turlist on tl_key = tbl.pt_tlkey 
inner join country on tbl.pt_cnkey = cn_key 
inner join hoteldictionary on hd_key=#pg.pt_hdkey 
inner join pansion on #pg.pt_pnkey=pn_key 
inner join citydictionary on hd_ctkey = ct_key 
join Rooms with(nolock) on pt_rmkey = RM_Key
join RoomsCategory with(nolock) on RC_Key = pt_rckey
join AccmdMentype with(nolock) on AC_Key = pt_ackey 
left outer join resorts on hd_rskey = rs_key
WHERE #pg.paging_id '
if (@pagingType = 5)
	set @sql = @sql + '>' + @spageNum
else if (@pagingType = 0)
	set @sql = @sql + 'BETWEEN @firstRecord and @lastRecord'
set @sql = @sql + ' order by paging_id'
declare @ParamDef nvarchar(100)
--print @sql
set @ParamDef = '@rowCountOUT int output'
exec sp_executesql @sql, @ParamDef, @rowCountOUT = @rowCount output
end
GO

GRANT EXECUTE on [dbo].[PagingSelect] to public
GO
/*********************************************************************/
/* end sp_PagingSelect.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_PagingSelect.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ProtourSetServiceToQuota.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ProtourSetServiceToQuota.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ProtourSetServiceToQuota]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ProtourSetServiceToQuota]
GO

CREATE PROCEDURE [dbo].[ProtourSetServiceToQuota]
		--<VERSION>2009.2.20.3</VERSION>
		--<DATA>29.11.2013</DATA>
as
begin
	declare @dlkey int, @DLDateBeg datetime, @DLDateEnd datetime
	declare @dlKeyList table
	(
		dlKey int,
		pqKey int
	)	
	
	insert into @dlKeyList (dlKey, pqKey)
	select DL_Key, PQ_Key
	from Dogovorlist 
	join HotelRooms on DL_SUBCODE1 = HR_KEY
	join ProtourServiceToQuota on dl_code = PQ_HotelKey 
								  and (PQ_subCode2 = 0 or HR_RCKEY = PQ_subCode2)
								  and PQ_Date between DL_DateBeg and DL_DATEEND
	where dl_svkey = 3
	and PQ_IsProcessed = 0
	and isnull((select max(SD_State) from ServiceByDate where SD_DLKey = DL_Key), 4) = 4

	DECLARE cur_DogovorListAutoQuotesPlaces CURSOR FOR
		SELECT 	distinct DL_Key, DL_DateBeg, DL_DateEnd
		FROM	Dogovorlist 
		join @dlKeyList on dl_key = dlKey
		
	OPEN cur_DogovorListAutoQuotesPlaces
	FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLDateBeg, @DLDateEnd
	WHILE @@FETCH_STATUS = 0
	BEGIN

		--в этой хранимке будет выполнена попытка постановки услуги на квоту
		EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,null
				
		FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLDateBeg, @DLDateEnd
	
	END
	CLOSE cur_DogovorListAutoQuotesPlaces
	DEALLOCATE   cur_DogovorListAutoQuotesPlaces

	update ProtourServiceToQuota set PQ_IsProcessed = 1 where PQ_IsProcessed = 0 and PQ_Key in (select pqKey from @dlKeyList)

end
GO

grant execute on [dbo].[ProtourSetServiceToQuota] to public
GO
/*********************************************************************/
/* end sp_ProtourSetServiceToQuota.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ProtourSetServiceToQuota.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_QuotaDetailAfterDelete.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_QuotaDetailAfterDelete.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuotaDetailAfterDelete]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[QuotaDetailAfterDelete]
GO

CREATE PROCEDURE [dbo].[QuotaDetailAfterDelete]
AS
	--<VERSION>9.2.20.3</VERSION>
	--<DATE>2013-12-10</DATE>
	--Процедура освобождает удаленные квоты
	--QD_IsDeleted хранит статус, в который требуется поставить услуги, на данный момент находящиеся на данной квоте
	--QD_IsDeleted=3 - подтвердить (ВАЖНО подтверждается только те даты которые удаляются)
	--QD_IsDeleted=4 - Request (ВАЖНО на Request только те даты которые удаляются)
	--QD_IsDeleted=1 - попытка поставить на квоту (ВАЖНО на квоту пробуем поставить место, на всем протяжении услуги, то есть - если это проживание и только один день удаляем из квоты, то место снимается с квоты целиком и пытается сесть снова)

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SD_DLKey int
	DECLARE @ServiceByDateState int
	DECLARE @dateFrom datetime
	DECLARE @dateTo datetime

	IF Exists (SELECT top 1 1 
			   FROM QuotaDetails
			   join QuotaParts on QP_QDID = QD_ID
			   join ServiceByDate on SD_QPID=QP_ID
			   WHERE QD_IsDeleted in (3,4))
	BEGIN
		declare @DLKeysForUpdare table
		(
			DL_Key int,
			ServiceByDateState INT,
			DateFrom DATETIME,
			DateTo DATETIME
		)
		
		insert into @DLKeysForUpdare(DL_Key, ServiceByDateState, DateFrom, DateTo) 
		select SD_DLKey, 
			   MAX(QP_IsDeleted) AS ServiceByDateState,
			   MIN(QP_Date) as DateFrom,
			   MAX(QP_Date) as DateTo
		from ServiceByDate
		join QuotaParts on QP_ID = SD_QPID
		join QuotaDetails on QD_ID = QP_QDID
		where QD_IsDeleted in (3,4) GROUP BY SD_DLKey

		UPDATE ServiceByDate 
		SET SD_State = 3, SD_QPID = null 
		WHERE SD_QPID in (SELECT QP_ID 
						  FROM QuotaDetails
						  join QuotaParts on QP_QDID = QD_ID
						  WHERE QD_IsDeleted = 3)
						  
		UPDATE ServiceByDate 
		SET SD_State = 4, SD_QPID = null 
		WHERE SD_QPID in (SELECT QP_ID 
						  FROM QuotaDetails
						  join QuotaParts on QP_QDID = QD_ID
						  WHERE QD_IsDeleted=4)
		
		DECLARE cur_QuotaDetailDelete CURSOR local fast_forward FOR 
		SELECT DISTINCT DL_Key, ServiceByDateState, DateFrom, DateTo FROM @DLKeysForUpdare
		
		OPEN cur_QuotaDetailDelete
		FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey, @ServiceByDateState, @dateFrom, @dateTo
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC dbo.DogListToQuotas @SD_DLKey, 1, @SetQuotaType = @ServiceByDateState, @ToSetQuotaDateFrom = @dateFrom, @ToSetQuotaDateTo = @dateTo
			FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey, @ServiceByDateState, @dateFrom, @dateTo
		END
		CLOSE cur_QuotaDetailDelete
		DEALLOCATE cur_QuotaDetailDelete
	END

	IF Exists (SELECT top 1 1 
			   FROM QuotaDetails
			   join QuotaParts on QP_QDID = QD_ID
			   join ServiceByDate on SD_QPID = QP_ID 
			   WHERE QD_IsDeleted in (1))
	BEGIN
		DECLARE cur_QuotaDetailDelete CURSOR local fast_forward FOR 
			SELECT DISTINCT SD_DLKey 
			FROM ServiceByDate 
			WHERE SD_QPID in (SELECT QP_ID 
							  FROM QuotaDetails
							  join QuotaParts on QP_QDID = QD_ID
							  WHERE QD_IsDeleted=1)
		OPEN cur_QuotaDetailDelete
		FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC dbo.DogListToQuotas @SD_DLKey, 1
			FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		END
		CLOSE cur_QuotaDetailDelete
		DEALLOCATE cur_QuotaDetailDelete
	END

	update QuotaParts 
	set QP_IsDeleted = 1 
	from QuotaParts 
	join QuotaDetails on QP_QDID = QD_ID 
	where QD_IsDeleted in (1,3,4)

	DELETE FROM QuotaLimitations WHERE QL_QPID in (SELECT QP_ID FROM QuotaParts join QuotaDetails on QD_ID = QP_QDID WHERE QD_IsDeleted in (1,3,4))				  
	DELETE QuotaParts where exists(select top 1 1 from QuotaDetails WHERE QD_IsDeleted in (1,3,4) and QD_ID = QP_QDID) and not exists(select top 1 1 from ServiceByDate where SD_QPID=QP_ID) and QP_IsDeleted = 1
	DELETE FROM StopSales WHERE SS_QDID in (SELECT QD_ID FROM QuotaDetails with (nolock) WHERE QD_IsDeleted in (1,3,4))
	DELETE FROM QuotaDetails WHERE QD_IsDeleted in (1,3,4) and QD_ID not in (Select QP_QDID from ServiceByDate with (nolock), QuotaParts with (nolock) where SD_QPID=QP_ID and QP_QDID=QD_ID)
GO

GRANT EXECUTE on [dbo].[QuotaDetailAfterDelete] to public
GO
/*********************************************************************/
/* end sp_QuotaDetailAfterDelete.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_QuotaDetailAfterDelete.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculateCosts_CalculatePriceList.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ReCalculateCosts_CalculatePriceList.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateCosts_CalculatePriceList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculateCosts_CalculatePriceList]
GO
CREATE PROCEDURE [dbo].[ReCalculateCosts_CalculatePriceList]
	(
		@scpId int,
		@brutto money output,
		@IsCommission bit output,
		
		@svKey int,
		@code int,
		@code1 int,
		@code2 int,
		@prKey int,
		@packetKey int,
		@date datetime,
		@days int,
		@resRate varchar(2),
		@men int,
		@discountPercent decimal(14,6),
		@margin decimal(14,6),
		@marginType int,
		@sellDate dateTime, 
		@netto decimal(14,6),		
		@discount decimal(14,6),
		@nettoDetail varchar(100),
		@sBadRate varchar(2),
		@dtBadDate dateTime,
		@sDetailed varchar(100),
		@nSPId int,
		@tourKey int,
		@tourDate datetime,
		@tourDays int,
		@IsDuration smallint
	)
as

--<data>2013-07-23</data>
--<version>9.20</version>

BEGIN
	declare @useDiscountDays int
	
	-- если наща услуга без продолжительности то устанавливаем ей продолжительность равную продолжительности тура
	if (@svKey = 1)
	begin
		set @days = @tourDays
	end

	/*Нужно вставить логику которая идет перед расчетом услуги в старом CalculatePriceList*/

	set @brutto = null	
	set @sellDate = null
	set @margin = 0
	set @marginType = 0

	/*попробуем найти запись нужной нам цены*/
	-- gorshkov у строк вставленных этой хранимкой (там пониже есть инсерт)
	-- SPAD_DateLastChange = SPAD_DateLastCalculate = getdate()
	-- т.е. здесь нужно использовать <= а не <
	select	top 1 
		@brutto = xSPAD_Gross,
		@IsCommission = xSPAD_IsCommission
	from #ServicePriceActualDate with(nolock)
	where xSPAD_SCPId = @scpId
	and xSPAD_SaleDate is null
	-- или расчитана и перенесена или только расчитана но не перенесена
	and xSPAD_Rate = @resRate
	and xSPAD_NeedApply = 0
	
	if (@brutto is not null)
	begin
		--update Debug  set db_n1 = db_n1 +1 where db_Text = '- #GetServiceCost'
		return
	end
	
	-- не нашли расчитанной цены, нужно расчитать и записать результат в TP_ServicePriceActualDate
	exec GetServiceCost @svKey, @code, @code1, @code2, @prKey, @packetKey, @date, @days,
	@resRate, @men, @discountPercent, @margin, @marginType,
	@sellDate, @netto output, @brutto output, @discount output,
	@nettoDetail output, @sBadRate output, @dtBadDate output,
	@sDetailed output,  @nSPId output, @useDiscountDays output,
	@tourKey, @tourDate, @tourDays, 0, @IsCommission output
	
	--update Debug  set db_n1 = db_n1 +1 where db_Text = '+ #GetServiceCost'
	
	/*Нужно вствить логику на праверку устаревших данных по полю SPAD_SaleDate
	Если есть строки с SPAD_SaleDate <= getadte() то у ней, она должны быть нужно установить SPAD_SaleDate = null, а старые записи с SPAD_SaleDate = null удалить
	Пока не понятно как это будет работать нужно обсудить*/		
	
	if (not exists (select top 1 1
					from #ServicePriceActualDate with(nolock)
					where xSPAD_SCPId = @scpId
					and xSPAD_SaleDate is null
					and xSPAD_Rate = @resRate))
	begin
		-- gorshkov зафиксировал время, которое будет вставляться в SPAD_DateLastChange и SPAD_DateLastCalculate
		declare @modificationDate datetime;
		set @modificationDate=getdate();
		insert into #ServicePriceActualDate (xSPAD_SCPId, xSPAD_IsCommission, xSPAD_Rate, xSPAD_SaleDate, xSPAD_Gross, xSPAD_Netto, xSPAD_DateLastChange,
												xSPAD_DateLastCalculate, xSPAD_NeedApply)
		values (@scpId, @IsCommission, @resRate, null, @brutto, @netto, @modificationDate, @modificationDate , 0)
	end
	else
	begin
		-- обновим и скажем чтобы обновились цены в других турах
		update #ServicePriceActualDate
		set xSPAD_Gross = @brutto,
		xSPAD_Netto = @netto,
		xSPAD_IsCommission = @IsCommission,
		xSPAD_DateLastCalculate = getdate(),
		xSPAD_NeedApply = 0
		where xSPAD_SCPId = @scpId
		and xSPAD_SaleDate is null
		and xSPAD_Rate = @resRate
	end
END

GO

grant exec on [dbo].[ReCalculateCosts_CalculatePriceList] to public
go

/*********************************************************************/
/* end sp_ReCalculateCosts_CalculatePriceList.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculateCosts_CalculatePriceList.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculate_Delete.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ReCalculate_Delete.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculate_Delete]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ReCalculate_Delete]
GO

CREATE PROCEDURE [dbo].[ReCalculate_Delete]
	(
		-- хранимка удаляет цены из TP_PricesComponents
		--<version>2009.2.02</version>
		--<data>2012-08-22</data>
		-- список ключей @pcIds для удаления цен
		@pcIds xml ([dbo].[ArrayOfLong]) = null
	)
AS
BEGIN	
	SET ARITHABORT ON;
	set nocount on;
	declare @beginTime datetime
	set @beginTime = getDate()
	
	declare @tempGrossTable table
	(
		xPCId int,
		xTPKey bigint,
		xToKey int
	)
	
	declare @tempPCId table
	(
		xPCId int
	)
	
	insert into @tempPCId (xPCId)
	select tbl.res.value('.', 'bigint') from @pcIds.nodes('/ArrayOfLong/long') as tbl(res)
	
	insert into @tempGrossTable (xPCId,  xTPKey, xToKey)
	select PC_Id, PC_TPKey, PC_TOKey
	from TP_PriceComponents with(nolock)
	where PC_Id in (select xPCId from @tempPCId)
	
	print 'Заполнение временной таблицы: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
	
	declare currReCalculate_MigrateToPrice cursor for select distinct xToKey from @tempGrossTable
	declare @toKey int
	OPEN currReCalculate_MigrateToPrice
		FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey
		WHILE @@FETCH_STATUS = 0
		begin
	
			-- вставляем запись в CalculatingPriceLists
			insert into CalculatingPriceLists (CP_CreateDate,CP_PriceTourKey) values (GETDATE(),@toKey) 
			declare @cpKey int
			set @cpKey = scope_identity()
			
			print 'вставляем запись в CalculatingPriceLists' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
			set @beginTime = getDate()
			
			-- переносим цены в таблицу для удаленных цен
			insert into tp_pricesdeleted (TPD_TPKey, TPD_TOKey, TPD_TIKey, TPD_Gross, TPD_DateBegin, TPD_CalculatingKey)
			select TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, @cpKey 
			from tp_prices with(nolock)
			where tp_key in (	select xTPKey
								from @tempGrossTable
								where xToKey = @toKey)
								
			print 'переносим цены в таблицу для удаленных цен' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
			set @beginTime = getDate()
								
			-- удаляем цены из tp_prices
			delete from tp_prices
			where tp_key in (	select xTPKey
								from @tempgrosstable
								where xToKey = @toKey)
								
			print 'удаляем цены из tp_prices' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
			set @beginTime = getDate()
								
			-- удаляем из TP_PriceComponents
			delete TP_PriceComponents
			where PC_Id in (	select xPCId
								from @tempgrosstable
								where xToKey = @toKey)
								
			print 'удаляем из TP_PriceComponents' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
			set @beginTime = getDate()
								
			if exists (select top 1 1 from TP_Tours where to_Key = @toKey and to_isEnabled = 1)
			begin
				-- Реплицируем только если тур уже выставлен в online
				exec FillMasterWebSearchFields @toKey, @cpKey
				print 'Реплицируем только если тур уже выставлен в online' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
			set @beginTime = getDate()
			end
								
		FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey
		end

	CLOSE currReCalculate_MigrateToPrice
	DEALLOCATE currReCalculate_MigrateToPrice
END
GO

grant execute on [dbo].[ReCalculate_Delete] to public
GO
/*********************************************************************/
/* end sp_ReCalculate_Delete.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReCalculate_Delete.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReСalculateNationalRatePrice.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_ReСalculateNationalRatePrice.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReСalculateNationalRatePrice]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReСalculateNationalRatePrice]
GO
CREATE PROCEDURE [dbo].[ReСalculateNationalRatePrice]
(
	@DG_KEY INT,
	@NDG_RATE VARCHAR(3),
	@ODG_RATE VARCHAR(3),
	@ODG_CODE VARCHAR(10),
	@NDG_PRICE FLOAT,
	@ODG_PRICE FLOAT,
	@NDG_DISCOUNTSUM FLOAT,
	@NDG_SOR_CODE INT
)
AS
BEGIN
--<VERSION>9.2.20.10</VERSION>
--<DATE>2014-03-17</DATE>
-- Task 10558 tfs neupokoev 26.12.2012
-- Повторная фиксация курса валюты, в случае если он не зафиксировался
	DECLARE @HI_DATE DATETIME

	SELECT TOP 1 @HI_DATE = HI_DATE
	FROM HISTORY
	WHERE HI_DGKEY = @DG_KEY AND HI_OAID = 21 ORDER BY HI_DATE DESC
	
	IF @HI_DATE IS NOT NULL
		EXEC DBO.NationalCurrencyPrice2 @NDG_RATE, @ODG_RATE, @ODG_CODE, @NDG_PRICE, @ODG_PRICE, @NDG_DISCOUNTSUM, @HI_DATE, @NDG_SOR_CODE
END

GO

GRANT EXEC ON [dbo].[ReСalculateNationalRatePrice] TO PUBLIC
GO
/*********************************************************************/
/* end sp_ReСalculateNationalRatePrice.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_ReСalculateNationalRatePrice.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_SetServiceStatusOk.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_SetServiceStatusOk.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SetServiceStatusOK]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[SetServiceStatusOK]
GO

CREATE PROCEDURE [dbo].[SetServiceStatusOK]
	(
		--<VERSION>2009.2.20.1</VERSION>
		--<DATA>03.04.2014</DATA>
		-- хранимка определяет какой статус необходимо установить услуги, после изменения статуса квотирования
		@dlkey int,
		@dlcontrol int out -- новый статус
	)
AS
BEGIN
	set @dlcontrol = null
	-- теперь в завмсимости от настроек будем менять статусы на Ок
	-- 0 - все галки сняты
	-- 1 - Все услуги
	-- 2 - Авиаперелет
	-- 3 - Все услуги & Авиаперелет
	-- 4 - Проживание
	-- 5 - Все услуги & Проживание
	-- 6 - Авиаперелет & Проживание
	-- 7 - Все услуги & Авиаперелет & Проживание
	
	DECLARE @dlPartnerKey int, @svkey int, @sdState int, @svControl int, @svQuoted int, @oldDLControl int  
	
	-- Если это услуга из Интерлука, ничего не делаем
	select @dlPartnerKey=DL_PARTNERKEY, @svkey = dl_svkey, @oldDLControl = DL_Control, 
	@svControl = SV_CONTROL, @svQuoted = SV_QUOTED  
	from tbl_dogovorList join [service] on dl_svkey = sv_key 
	where dl_key = @dlkey and isnull(SV_QUOTED, 0) = 1
	
	if (exists (select top 1 1 from dbo.SystemSettings where SS_ParmName = 'IL_SyncILPartners' AND SS_ParmValue LIKE '%/' + convert(nvarchar(max) ,@dlPartnerKey) + '/%'))
		return
	
	select @sdState = MAX(COALESCE(SD_State, 4))
	from ServiceByDate 
	where SD_DLKey = @dlkey
	
	-- услуга сидит на квоте (Allotment или Commitment) и является квотируемой
	if (@sdState < 3 and @svQuoted = 1)
	begin 
		-- MEG00032041
		-- Теперь проверим есть ли на эту квоту запись в таблице QuotaStatuses
		-- которая говорит нам что нужно изменить статус услуги на тот который в этой таблице
		if exists(select 1 from QuotaStatuses join Quotas on QS_QTID = QT_ID						
					join QuotaDetails on QT_ID = QD_QTID
					join QuotaParts on QP_QDID = QD_ID
					join ServiceByDate on SD_QPID = QP_ID
					where SD_DLKey = @dlkey and SD_State = QS_Type) 
		begin
			select @dlcontrol = QS_CRKey
			from QuotaStatuses join Quotas on QS_QTID = QT_ID 
			join QuotaDetails on QT_ID = QD_QTID
			join QuotaParts on QP_QDID = QD_ID
			join ServiceByDate on SD_QPID = QP_ID
			where SD_DLKey = @dlkey and SD_State = QS_Type
		end
		-- Авиаперелет
		else if (@svkey = 1)
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('2', '3', '6', '7'))
			begin
				set @dlcontrol = 0
			end
		end
		-- Проживание
		else if (@svkey = 3)
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('4', '5', '6', '7'))
			begin
				set @dlcontrol = 0
			end
		end
		-- Остальные услуги
		else if (@svkey not in (1, 3))
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('1', '3', '5', '7'))
			begin
				set @dlcontrol = 0
			end
		end
	end
	-- Услуга сидит на "Вне квоты"
	else if (@sdState = 3 and @svQuoted = 1)
	begin
		set @dlcontrol = 0
	end
	-- Услуга сидит на Request
	else if (@sdState = 4 and @svQuoted = 1)
	begin 
		set @dlcontrol = 1
	end 	
	
	-- установим нашей услуге статус из справочника услуг
	if (@dlcontrol is null and @svControl != @oldDLControl and @svQuoted = 1 and @svControl is not null)
	begin
		set @dlcontrol = @svControl
	end

	if (@oldDLControl != @dlcontrol)
	begin
		update Dogovorlist set DL_Control = @dlcontrol where DL_Key = @dlKey 
	end

END
GO

GRANT EXECUTE on [dbo].[SetServiceStatusOK] to public
GO
/*********************************************************************/
/* end sp_SetServiceStatusOk.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_SetServiceStatusOk.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_StatusCheck_TaskService.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_StatusCheck_TaskService.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[StatusCheck_TaskService]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].StatusCheck_TaskService
GO

CREATE procedure [dbo].StatusCheck_TaskService
	(
		@FilialKeys varchar(max) = '-1',
		@ServiceStauses varchar(max) = null,
		@EarlierCheckIn bit = 0,
		@MonitorWaitListMode bit = 0,
		@ConfirmedEarlier bit = 0,
		@TypeService int,
		@ServiceKeys varchar(max),
		@Attribute int,
		@ServiceIds varchar(max),
		@Day int
	)
AS
-------------------------------
---<DATE>2014-12-18</DATE>
---<VERSION>9.2.21.1</VERSION>
---<COMMENT>Хранимая процедура формирует список путевок, по которым должно отработать задение Изменение статуса услуги с Мастер-Сервисе</COMMENT>
-------------------------------
DECLARE @Date date
DECLARE @Sql varchar(max)


CREATE TABLE #T1(
	xKey int  not null identity(1,1) primary key,
	xHI_ID int ,
	xHI_DGCOD varchar(10),
	xHI_DLKEY int NULL
)

CREATE TABLE #T2(
	xKey int  not null identity(1,1) primary key,
	xHI_ID int,
	xHI_DGCOD varchar(10),
	xHI_DLKEY int NULL 
)

CREATE TABLE #temptbl(
	xKey int  not null identity(1,1) primary key,
	xHI_ID int,
	xHI_DGCOD varchar(10) NULL,
	xHI_DGKey int,
	xHI_DATE datetime NULL,
	xHI_DLKEY int NULL
)

CREATE TABLE #temptbl_watelist(
	xKey int  not null identity(1,1) primary key,
	xHI_ID int,
	xHI_DGCOD varchar(10) NULL,
	xHI_DGKey int,
	xHI_DATE datetime NULL,
	xHI_DLKEY int NULL

)
		set @sql = '
				INSERT INTO #temptbl (xHI_ID, xHI_DGCOD, xHI_DGKey, xHI_DATE, xHI_DLKEY)
				SELECT HI_ID, HI_DGCOD, HI_DGKey, HI_DATE, HI_TYPECODE
				FROM HISTORY  WITH(NOLOCK) 
				WHERE  HI_OAID in (2) AND HI_DATE BETWEEN '''+ convert(varchar, DATEADD(DAY,-@Day, GETDATE()), 120) +''' AND GETDATE()
				   AND EXISTS(SELECT 1 FROM tbl_Dogovor WHERE DG_Key = HI_DGKEY AND DG_TURDATE > ''1900-01-01'' AND DG_FILIALKEY in ('+ @FilialKeys +'))
				   AND EXISTS(SELECT 1 FROM DogovorList WHERE '
		
		if ISNULL(@ServiceStauses, '') <> ''
			set @Sql = @Sql + 'DL_Control in ('+ @ServiceStauses +')'
		else 
			set @Sql = @Sql + ' DL_KEY = HI_TYPECODE '

		if @EarlierCheckIn <> 0
			set @Sql = @Sql + ' AND DL_TURDATE>GETDATE() AND DL_SVKEY IN ('+ @ServiceKeys +')
				   AND ((DL_ATTRIBUTE IS NULL) OR (DL_ATTRIBUTE & '+ CAST(@Attribute AS VARCHAR(MAX)) +' <> '+ CAST(@Attribute AS VARCHAR(MAX)) +')))
				   AND EXISTS(SELECT 1 FROM HISTORYDETAIL WHERE HI_ID=HD_HIID AND HI_MOD <> ''INS'' AND HD_OAID IN ('+ @ServiceIds +'))
					   AND HI_ID NOT IN (select ME_ValueInt from dbo.MasterEvents where ME_Type = '+ CAST(@TypeService AS VARCHAR(MAX)) +')'
		else
			set @Sql = @Sql +' AND DL_SVKEY IN ('+ @ServiceKeys +')
				   AND ((DL_ATTRIBUTE IS NULL) OR (DL_ATTRIBUTE & '+ CAST(@Attribute AS VARCHAR(MAX)) +' <> '+ CAST(@Attribute AS VARCHAR(MAX)) +')))
				   AND EXISTS(SELECT 1 FROM HISTORYDETAIL WHERE HI_ID=HD_HIID AND HI_MOD <> ''INS'' AND HD_OAID IN ('+ @ServiceIds +'))
				   AND HI_ID NOT IN (select ME_ValueInt from dbo.MasterEvents where ME_Type = '+ CAST(@TypeService AS VARCHAR(MAX)) +')'

		IF 	@ConfirmedEarlier <> 0
		BEGIN
			SET @Sql = @Sql + '
				insert into #T1 (xHI_ID, xHI_DGCOD, xHI_DLKEY)
				SELECT xHI_ID, xHI_DGCOD, xHI_DLKEY
				FROM #temptbl AS T
				  WHERE EXISTS (SELECT 1 FROM HistoryDetail 
					 INNER JOIN History ON hd_hiid = hi_id
					 WHERE HI_DGKey = xHI_DGKey AND HD_Alias = ''DG_SOR_Code'' AND HD_ValueNew = ''Ok'' AND HI_ID < T.xHI_ID)
				'
		END

	   exec(@Sql)

	If @MonitorWaitListMode = 1
	BEGIN
		set @sql = '
				insert into #temptbl_watelist (xHI_ID, xHI_DGCOD, xHI_DGKey, xHI_DATE, xHI_DLKEY)
				SELECT HI_ID, HI_DGCOD, HI_DGKey, HI_DATE, HI_TYPECODE
				FROM HISTORY  WITH(NOLOCK) 
				WHERE HI_OAID=2 AND HI_DATE BETWEEN '''+ convert(varchar, DATEADD(DAY,-@Day, GETDATE()), 120) +''' AND GETDATE() 
				  AND HI_MOD = ''+WL''
				  AND EXISTS(SELECT 1 FROM tbl_Dogovor WHERE DG_Key = HI_DGKey AND DG_TURDATE > ''1900-01-01'')
				  AND EXISTS(SELECT 1 FROM tbl_Dogovor WHERE DG_Key = HI_DGKey AND DG_FILIALKEY in ('+ @FilialKeys +'))
				  AND EXISTS(SELECT 1 FROM DOGOVORLIST WHERE DL_SVKEY IN ('
				  
		IF ISNULL(@ServiceKeys, '') <> ''
			SET @Sql = @Sql + ''+ @ServiceKeys +''
		ELSE
			SET @Sql = @Sql +'DL_SVKEY'

		SET @Sql = @Sql + ') AND DL_KEY=HI_TYPECODE AND DL_TURDATE>GETDATE())
				  AND HI_ID NOT IN (select ME_ValueInt from dbo.MasterEvents where ME_Type = '+ CAST(@TypeService AS VARCHAR(MAX)) +')'

		IF 	@ConfirmedEarlier <> 0
		BEGIN
			SET @Sql = @Sql + '
				INSERT INTO #T2 (xHI_ID, xHI_DGCOD, xHI_DLKEY)
				SELECT xHI_ID, xHI_DGCOD, xHI_DLKEY
				FROM #temptbl_watelist AS TW
				  WHERE EXISTS (SELECT 1 FROM HistoryDetail 
					 INNER JOIN History ON hd_hiid = hi_id
					 WHERE HI_DGKey = xHI_DGKey AND HD_Alias = ''DG_SOR_Code'' AND HD_ValueNew = ''Ok'' AND HI_ID < xHI_ID)'
	
			exec(@Sql)
		END

		if @ConfirmedEarlier <> 0
			BEGIN
				select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY from #T1
				UNION
				select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY From #T2
			END
		ELSE
			BEGIN
				select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY from #temptbl 
				UNION 
				select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY From #temptbl_watelist
			END
	END
	ELSE
	BEGIN
		if @ConfirmedEarlier <> 0
			select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY from #T1
		ELSE 
			select xHI_ID as HI_ID, xHI_DGCOD as HI_DGCOD, xHI_DLKEY as HI_DLKEY From #temptbl
	END

GO

GRANT EXEC on [dbo].[StatusCheck_TaskService] to public
GO
/*********************************************************************/
/* end sp_StatusCheck_TaskService.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_StatusCheck_TaskService.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_SyncTPTurDatesWithMainDB.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_SyncTPTurDatesWithMainDB.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SyncTPTurDatesWithMainDB]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[SyncTPTurDatesWithMainDB]
GO

CREATE PROCEDURE [dbo].[SyncTPTurDatesWithMainDB]
AS
begin
	--ХП для синхронизации дат заездов с основной базой (для подсветки календаря)
	--<DATE>2013-02-24</DATE>
	--<VERSION>2009.2.21</VERSION>

	declare @publisherDbName varchar(100), @sql varchar(max)
	select @publisherDbName = SS_ParmValue from SystemSettings where SS_ParmName like 'mwReplPublisherDB'
	if (ISNULL(@publisherDbName, '') = '')
		return

	set @sql = 'INSERT INTO [dbo].[TP_TurDates]
			   ([TD_Key]
			   ,[TD_TOKey]
			   ,[TD_Date]
			   ,[TD_UPDATE]
			   ,[TD_CHECKMARGIN]
			   ,[td_autodisabled]
			   ,[TD_CalculatingKey])
	select r.[TD_Key]
			   ,r.[TD_TOKey]
			   ,r.[TD_Date]
			   ,r.[TD_UPDATE]
			   ,r.[TD_CHECKMARGIN]
			   ,r.[td_autodisabled]
			   ,r.[TD_CalculatingKey]
	from mt.' + @publisherDbName + '.dbo.TP_TurDates as r 
	where r.TD_Key not in (select TD_Key from tp_turdates)
	and r.td_date > GETDATE()
	and r.TD_TOKey in (select to_key from tp_tours)'

	exec (@sql)
END
GO

GRANT EXECUTE on [dbo].[SyncTPTurDatesWithMainDB] to public
GO
/*********************************************************************/
/* end sp_SyncTPTurDatesWithMainDB.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_SyncTPTurDatesWithMainDB.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_UpdateDeleteCost.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin sp_UpdateDeleteCost.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[UpdateDeleteCost]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[UpdateDeleteCost]
GO

CREATE procedure [dbo].[UpdateDeleteCost]
(
	@sMode varchar(256), @nOldNetto float, @nOldBrutto float,  
	@dOldBeg datetime, @dOldEnd datetime, @nSvKey int, @nCode int, @nCode1 int, 
	@nCode2 int, @nPartner int, @nPaket int, @nNewNetto float, @nNewBrutto float, 
	@dNewBeg datetime, @dNewEnd datetime
)
AS
SET CONCAT_NULL_YIELDS_NULL OFF 
--<VERSION>2003.4</VERSION>
--<DATE>2004-05-20</DATE>
	declare @sOper varchar(256),
		@sText varchar(256),
		@sOldNetto varchar(256),
		@sOldBrutto varchar(256),
		@sNewNetto varchar(256),
		@sNewBrutto varchar(256),
		@sOldDateBeg varchar(256),
		@sOldDateEnd varchar(256),
		@sNewDateBeg varchar(256),
		@sNewDateEnd varchar(256)
	
	if	(@nOldNetto = @nNewNetto) and (@nOldBrutto = @nNewBrutto) and 
		(@dOldBeg = @dNewBeg) and (@dOldEnd = @dNewEnd) and (@sMode != 'DEL')
		Return 0

	Set @sOldNetto = CAST ( @nOldNetto  AS varchar )
	Set @sNewNetto = CAST ( @nNewNetto  AS varchar )
	Set @sOldBrutto = CAST ( @nOldBrutto  AS varchar )
	Set @sNewBrutto = CAST ( @nNewBrutto  AS varchar )
	Set @sOldDateBeg = CONVERT ( varchar , @dOldBeg, 105)
	Set @sNewDateBeg = CONVERT ( varchar , @dNewBeg, 105)
	Set @sOldDateEnd = CONVERT ( varchar , @dOldEnd, 105)
	Set @sNewDateEnd = CONVERT ( varchar , @dNewEnd, 105)

	EXEC dbo.CurrentUser @sOper output

	Set @sText = ''
	If @sMode != 'DEL'
	begin
		if @nOldNetto != @nNewNetto
		begin
			set @sText = 'Изменение нетто с ' + @sOldNetto + ' на ' + @sNewNetto + ' сезон ' + @sNewDateBeg + ' - ' + @sNewDateEnd
			
			Insert into HistoryCost (HC_Date, HC_Mod, HC_Who, HC_Text, HC_SvKey, HC_Code, HC_Code1, HC_Code2, HC_PrKey, HC_Paket)
			VALUES (GETDATE(), @sMode, @sOper, @sText, @nSvKey, @nCode, @nCode1,	@nCode2, @nPartner, @nPaket)
		end
		if @nOldBrutto != @nNewBrutto
		begin
			set @sText = 'Изменение брутто с ' + @sOldBrutto + ' на ' + @sNewBrutto + ' сезон ' + @sNewDateBeg + ' - ' + @sNewDateEnd
				
			Insert into HistoryCost (HC_Date, HC_Mod, HC_Who, HC_Text, HC_SvKey, HC_Code, HC_Code1, HC_Code2, HC_PrKey, HC_Paket)
			VALUES (GETDATE(), @sMode, @sOper, @sText, @nSvKey, @nCode, @nCode1, @nCode2, @nPartner, @nPaket)
		end
		Set @sText = ''
		if @dOldBeg != @dNewBeg
			set @sText = 'Изменение даты начала с ' + @sOldDateBeg + ' на ' + @sNewDateBeg
		if @dOldEnd != @dNewEnd
		begin
			if @sText != ''
				set @sText = @sText + ', окончания с '
			Else
				set @sText = @sText + 'Изменение даты окончания с '
				
			set @sText = @sText + @sOldDateEnd + ' на ' + @sNewDateEnd
		end
		IF @sText != '' 
		BEGIN		
			Insert into HistoryCost (HC_Date, HC_Mod, HC_Who, HC_Text, HC_SvKey, HC_Code, HC_Code1, HC_Code2, HC_PrKey, HC_Paket)
			VALUES (GETDATE(), @sMode, @sOper, @sText, @nSvKey, @nCode, @nCode1, @nCode2, @nPartner, @nPaket)
		END
	end
	else
	begin
		SET @sText = 'Удаление цены: нетто ' + @sOldNetto + ', брутто ' + @sOldBrutto + ', сезон с ' + @sOldDateBeg + ' по ' + @sOldDateEnd
		
		INSERT INTO HistoryCost (HC_Date, HC_Mod, HC_Who, HC_Text, HC_SvKey, HC_Code, HC_Code1, HC_Code2, HC_PrKey, HC_Paket)
		VALUES (GETDATE(), @sMode, @sOper, @sText, @nSvKey, @nCode, @nCode1, @nCode2, @nPartner, @nPaket)
	end
SET CONCAT_NULL_YIELDS_NULL ON
GO

grant exec on [dbo].[UpdateDeleteCost] to public
GO
/*********************************************************************/
/* end sp_UpdateDeleteCost.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'sp_UpdateDeleteCost.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'SynchronizeKeyTables.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin SynchronizeKeyTables.sql */
/*********************************************************************/
--удаление из таблицы Keys лишних записей (для которых есть таблица типа Key_ )
declare @tables table(
	tablekey nvarchar(50),
	tablename nvarchar(50)
)

insert into @tables
select key_table, name
from sys.objects 
inner join keys on key_table like replace(name, 'key_', '') 
where name like 'key_%' order by name

declare @sql nvarchar(max)
declare @tablekey nvarchar(50)
declare @tablename nvarchar(50)
declare cur cursor fast_forward read_only
for select tablekey, tablename from @tables

open cur

fetch next from cur into @tablekey, @tablename
while @@fetch_status = 0
begin
	set @sql = '
		declare @id int

		select @id = id from keys where key_table like ''' + @tablekey + '''

		update ' + @tablename + '
		set id = @id
		where id < @id

		delete from keys where key_table like ''' + @tablekey + '''
	'
	exec(@sql)
	fetch next from cur into @tablekey, @tablename
end

close cur
deallocate cur

go

/*********************************************************************/
/* end SynchronizeKeyTables.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'SynchronizeKeyTables.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CategoriesOfHotelUpdateName.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_CategoriesOfHotelUpdateName.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_CategoriesOfHotelUpdateName]'))
	DROP TRIGGER [dbo].[T_CategoriesOfHotelUpdateName]
GO

CREATE TRIGGER [dbo].[T_CategoriesOfHotelUpdateName]
   ON [dbo].[CategoriesOfHotel]
   AFTER UPDATE
AS 
BEGIN
	--<VERSION>9.2.21.1</VERSION>
	--<DATE>2014-12-17</DATE>

	if @@ROWCOUNT > 0 and UPDATE(COH_Name)
	begin
		update HotelDictionary 
		set HD_STARS = COH_Name
		from INSERTED
		where COH_Id = HD_COHId
	end
END
GO
/*********************************************************************/
/* end T_CategoriesOfHotelUpdateName.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CategoriesOfHotelUpdateName.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CheckDuplicates.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_CheckDuplicates.sql */
/*********************************************************************/
if exists (select id from sysobjects where xtype = 'TR' and name='T_CheckDuplicates')
	drop trigger dbo.T_CheckDuplicates
go

-- временно закрываем новый мастер переноса записей в связи с выходом SP
/*
CREATE TRIGGER dbo.T_CheckDuplicates
   on dbo.HotelRooms
   instead of insert, update
AS
-- <DATE>2014-08-28</DATE>
-- <VERSION>2009.2.21</VERSION>
-- Триггер запрещает вставлять новые или обновлять существующие записи таким образом,
-- чтобы создавались дублирующие по ключам HR_RMKEY, HR_RCKEY, HR_ACKEY записи
BEGIN

	declare @keyFieldsWasUpdated as bit
	set @keyFieldsWasUpdated = 0

	if (update(hr_rmKey) or update(hr_rcKey) or update(hr_acKey))
		set @keyFieldsWasUpdated = 1
	
	if @keyFieldsWasUpdated = 1 and
		exists (
			select top 1 1
			from HotelRooms as main
			inner join inserted as ins 
				on main.hr_key <> ins.hr_key
					and main.hr_rmKey = ins.hr_rmKey
					and main.hr_rcKey = ins.hr_rcKey
					and main.hr_acKey = ins.hr_acKey
				)
	begin
		declare @errMsg as nvarchar(max)

		if exists (select top 1 1 from deleted)
			set @errMsg = N'Cannot update records because it violates uniqueness of existing records with HR_RMKEY, HR_RCKEY, HR_ACKEY keys!'
		else
			set @errMsg = N'Cannot insert duplicate HR_RMKEY, HR_RCKEY, HR_ACKEY keys!'
			
		raiserror(@errMsg, 16, 1)
		return
	end

	if exists (select top 1 1 from deleted)
	begin
		UPDATE HotelRooms
		SET HR_RMKEY = ins.HR_RMKEY
			,HR_RCKEY = ins.HR_RCKEY
			,HR_MAIN = ins.HR_MAIN
			,HR_AGEFROM = ins.HR_AGEFROM
			,HR_AGETO = ins.HR_AGETO
			,HR_ACKEY = ins.HR_ACKEY
			,HR_StdKey = ins.HR_StdKey
			,HR_CINNUM = ins.HR_CINNUM
			,HR_DoNotGetILCosts = ins.HR_DoNotGetILCosts
			,HR_Unicode = ins.HR_Unicode
		 from inserted as ins
		 where ins.hr_key = HotelRooms.hr_key
	end
	else
	begin
		INSERT INTO HotelRooms
			   (HR_KEY
			   ,HR_RMKEY
			   ,HR_RCKEY
			   ,HR_MAIN
			   ,HR_AGEFROM
			   ,HR_AGETO
			   ,HR_ACKEY
			   ,HR_StdKey
			   ,HR_CINNUM
			   ,HR_DoNotGetILCosts
			   ,HR_Unicode)
		 select HR_KEY
			   ,HR_RMKEY
			   ,HR_RCKEY
			   ,HR_MAIN
			   ,HR_AGEFROM
			   ,HR_AGETO
			   ,HR_ACKEY
			   ,HR_StdKey
			   ,HR_CINNUM
			   ,HR_DoNotGetILCosts
			   ,HR_Unicode
		 from inserted
	end

END*/
GO
/*********************************************************************/
/* end T_CheckDuplicates.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_CheckDuplicates.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_DogovorListUpdate.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_DogovorListUpdate.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2009.2.21</VERSION>
--<DATE>2014-08-30</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_DateBeg datetime
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_DateEnd datetime
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_DateBeg datetime
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_DateEnd datetime
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int
  DECLARE @sDisableDogovorStatusChange varchar(254), @sUpdateMainDogovorStatuses varchar(254)

  DECLARE @dg_key INT

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  -- При включенной настройке BookingDBLogicInDotNet все связанное с вставкой путевки находится в BusinessRules
  IF (EXISTS (SELECT TOP 1 1 FROM SystemSettings WHERE SS_ParmName = 'BookingDBLogicInDotNet' AND SS_ParmValue = '1') AND @nDelCount = 0)
      RETURN

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, N.DL_DateBeg, N.DL_DateEnd,
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, O.DL_DateBeg, O.DL_DateEnd,
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, O.DL_DateBeg, O.DL_DateEnd,
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, N.DL_DateBeg, N.DL_DateEnd,
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_DateBeg, @ODL_DateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_DateBeg, @NDL_DateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @NDL_sDateBeg=CONVERT( char(10), @NDL_DateBeg, 104)
		SET @ODL_sDateBeg=CONVERT( char(10), @ODL_DateBeg, 104)
		SET @NDL_sDateEnd=CONVERT( char(10), @NDL_DateEnd, 104)
		SET @ODL_sDateEnd=CONVERT( char(10), @ODL_DateEnd, 104)

    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, '', 0, @nSVKey
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				/*
				IF @NDL_SvKey=1
				BEGIN
					-- mv26.04.2010
					-- Перенес вниз см. начиная с "-- ИНДИВИДУАЛЬНАЯ ОБРАБОТКА АВИАПЕРЕЛЕТОВ"
				END
				*/
				IF @NDL_SvKey!=1
				BEGIN
					exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old output, null
					exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New output, null
					IF @NDL_SvKey = 2
						EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
					ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
						EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
					ELSE IF @NDL_SvKey = 4
						EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
					ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
						EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
					ELSE 
						EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				END
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, @ODL_DateBeg, @NDL_DateBeg, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, @ODL_DateEnd, @NDL_DateEnd, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = left(convert(varchar, @ODL_RealNetto), 10)
				Set @sText_New = left(convert(varchar, @NDL_RealNetto), 10)				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
			-- ИНДИВИДУАЛЬНАЯ ОБРАБОТКА АВИАПЕРЕЛЕТОВ
			If (@NDL_SvKey = 1 AND ((ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) OR (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0)) OR ((ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0)))))
			BEGIN
				DECLARE @APFrom_Old varchar(50), @APTo_Old varchar(50), @AL_Old varchar(50)
				IF ISNULL(@ODL_Code, '') != ''
				BEGIN
					SELECT 
						@sText_Old=CH_AirLineCode + ' ' + CH_Flight,
						@APFrom_Old=(SELECT TOP 1 AP_Name FROM AirPort WHERE AP_Code=CH_PortCodeFrom), 
						@APTo_Old=(SELECT TOP 1 AP_Name FROM AirPort WHERE AP_Code=CH_PortCodeTo), 
						@AL_Old=(SELECT TOP 1 AL_Name FROM AirLine WHERE AL_Code=CH_AirLineCode) 
						FROM Charter WHERE CH_Key=@ODL_Code
				END
				DECLARE @APFrom_New varchar(50), @APTo_New varchar(50), @AL_New varchar(50)
				IF ISNULL(@NDL_Code, '') != ''
				BEGIN
					SELECT 
						@sText_New=CH_AirLineCode + ' ' + CH_Flight,
						@APFrom_New=(SELECT TOP 1 AP_Name FROM AirPort WHERE AP_Code=CH_PortCodeFrom), 
						@APTo_New=(SELECT TOP 1 AP_Name FROM AirPort WHERE AP_Code=CH_PortCodeTo), 
						@AL_New=(SELECT TOP 1 AL_Name FROM AirLine WHERE AL_Code=CH_AirLineCode) 
						FROM Charter WHERE CH_Key=@NDL_Code
				END
				If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				If (ISNULL(@APFrom_Old, '') != ISNULL(@APFrom_New, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1135, @APFrom_Old, @APFrom_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
				If (ISNULL(@APTo_Old, '') != ISNULL(@APTo_New, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1136, @APTo_Old, @APTo_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
				If (ISNULL(@AL_Old, '') != ISNULL(@AL_New, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1139, @AL_Old, @AL_New, null, null, null, null, 0, @bNeedCommunicationUpdate output

				DECLARE @sTimeBeg_Old varchar(5), @sTimeEnd_Old varchar(5), @sTimeBeg_New varchar(5), @sTimeEnd_New varchar(5)
				Declare @nday int
				IF (ISNULL(@ODL_Code, '') != '')
				BEGIN
					Set @nday = DATEPART(dw, @ODL_DateBeg)  + @@DATEFIRST - 1
					If @nday > 7 
		    			set @nday = @nday - 7
					SELECT	TOP 1 
						@sTimeBeg_Old=LEFT(CONVERT(varchar, AS_TimeFrom, 8),5),
						@sTimeEnd_Old=LEFT(CONVERT(varchar, AS_TimeTo, 8),5)
					FROM 	dbo.AirSeason
					WHERE 	AS_CHKey=@ODL_Code
						and CHARINDEX(CAST(@nday as varchar(1)),AS_Week)>0
						and @ODL_DateBeg between AS_DateFrom and AS_DateTo
					ORDER BY AS_TimeFrom DESC
				END

				IF (ISNULL(@NDL_Code, '') != '')
				BEGIN
					Set @nday = DATEPART(dw, @NDL_DateBeg)  + @@DATEFIRST - 1
					If @nday > 7 
						set @nday = @nday - 7
					SELECT	TOP 1 
						@sTimeBeg_New=LEFT(CONVERT(varchar, AS_TimeFrom, 8),5),
						@sTimeEnd_New=LEFT(CONVERT(varchar, AS_TimeTo, 8),5)
					FROM 	dbo.AirSeason
					WHERE 	AS_CHKey=@NDL_Code
						and CHARINDEX(CAST(@nday as varchar(1)),AS_Week)>0
						and @NDL_DateBeg between AS_DateFrom and AS_DateTo
					ORDER BY AS_TimeFrom DESC
				END
				If (ISNULL(@sTimeBeg_Old, '') != ISNULL(@sTimeBeg_New, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1137, @sTimeBeg_Old, @sTimeBeg_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
				If (ISNULL(@sTimeEnd_Old, '') != ISNULL(@sTimeEnd_New, ''))
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1138, @sTimeEnd_Old, @sTimeEnd_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		END
		
		/*Запись о том что нужно квотировать услугу*/
		-- только при измении этих полей нужно перезапустить механиз квотирования
		if ((isnull(@ODL_SvKey, '') != isnull(@NDL_SvKey, '')
			or isnull(@ODL_Code, '') != isnull(@NDL_Code, '')
			or isnull(@ODL_SubCode1, '') != isnull(@NDL_SubCode1, '')
			or isnull(@ODL_PartnerKey, '') != isnull(@NDL_PartnerKey, '')
			or isnull(@ODL_sDateBeg, '') != isnull(@NDL_sDateBeg, '')
			or isnull(@ODL_sDateEnd, '') != isnull(@NDL_sDateEnd, '')
			or isnull(@ODL_NMen, '') != isnull(@NDL_NMen, ''))
			and (exists (select top 1 1 from [Service] where SV_KEY = @NDL_SvKey and SV_QUOTED = 1))
			and (@sMod = 'UPD'))
		begin
			-- создаем запись о необходимости произвести рассадку в квоту
			insert into DogovorListNeedQuoted (DLQ_DLKey, DLQ_Date, DLQ_State, DLQ_Host, DLQ_User)
			values (@DL_Key, getdate(), 0, host_name(), user_name())
		end
		
		If @bNeedCommunicationUpdate=1
		BEGIN
			If @nSVKey=1 and ( 
					(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
					(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
					 )
			BEGIN
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
					UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
			END
			
			ELSE
			BEGIN
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END
		------------Аннуляция полиса при удаления услуги----------------------------------
		if (@sMod = 'DEL')
		BEGIN
			UPDATE InsPolicy
			SET IP_ARKEY = 0, IP_AnnulDate = GetDate()
			WHERE IP_DLKey = @DL_KEY AND IP_ARKEY IS NULL AND IP_ANNULDATE IS NULL
		END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, '', 0, @nSVKey

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, '', 0, @nSVKey
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, '', 0, @nSVKey
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_DateBeg, @ODL_DateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_DateBeg, @NDL_DateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO
/*********************************************************************/
/* end T_DogovorListUpdate.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_DogovorListUpdate.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_DogovorUpdate.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_DogovorUpdate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_DogovorUpdate]'))
	DROP TRIGGER [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>9.2.21</VERSION>
--<DATE>2014-11-26</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
	
    SELECT @nDelCount = COUNT(*) FROM DELETED
    SELECT @nInsCount = COUNT(*) FROM INSERTED
	
    -- При включенной настройке BookingDBLogicInDotNet все связанное с вставкой путевки находится в BusinessRules
    IF (EXISTS (SELECT TOP 1 1 FROM SystemSettings WHERE SS_ParmName = 'BookingDBLogicInDotNet' AND SS_ParmValue = '1') AND @nDelCount = 0)
        RETURN
		
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		datetime
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
    DECLARE @ODG_CTDepartureKey int
    DECLARE @ODG_Payed money
    DECLARE @ODG_ProTourFlag int
    DECLARE @NDG_ProTourFlag int
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		datetime
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
    DECLARE @NDG_Creator		int
    DECLARE @NDG_CTDepartureKey int
    DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int    
    
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint

	DECLARE @bUpdateNationalCurrencyPrice bit

	DECLARE @sUpdateMainDogovorStatuses varchar(254)
	
	DECLARE @nReservationNationalCurrencyRate smallint
	DECLARE @bReservationCreated smallint
	DECLARE @bCurrencyChangedPrevFixDate smallint
	DECLARE @bCurrencyChangedDate smallint
	DECLARE @bPriceChanged smallint
	DECLARE @bFeeChanged smallint
	DECLARE @bStatusChanged smallint
	DECLARE @statusChangedMultiplicity smallint
	DECLARE @changedDate datetime
	declare @dtCurrentDate datetime
	
    SELECT @nReservationNationalCurrencyRate = SS_PARMVALUE 
      FROM SystemSettings 
     WHERE SS_PARMNAME LIKE 'SYSReservationNCRate'
    SET @bReservationCreated = @nReservationNationalCurrencyRate & 1
    SET @bCurrencyChangedPrevFixDate = @nReservationNationalCurrencyRate & 2
    SET @bCurrencyChangedDate = @nReservationNationalCurrencyRate & 4
    SET @bPriceChanged = @nReservationNationalCurrencyRate & 8
    SET @bFeeChanged = @nReservationNationalCurrencyRate & 16
    SET @bStatusChanged = @nReservationNationalCurrencyRate & 32
	SET @changedDate = getdate()
	set @dtCurrentDate = GETDATE()

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, N.DG_TurDate, N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), 
		N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed, N.DG_ProTourFlag
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, O.DG_TurDate, O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, 
		O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed, O.DG_ProTourFlag,
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, O.DG_TurDate, O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP,
		O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		O.DG_ProTourFlag, N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, N.DG_TurDate, N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, 
		N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed, N.DG_ProTourFlag
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed, @ODG_ProTourFlag,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed, @NDG_ProTourFlag

    WHILE @@FETCH_STATUS = 0
    BEGIN	    
		DECLARE @ODG_TurDateS		varchar(10)
		Set @ODG_TurDateS = CONVERT( char(10), @ODG_TurDate, 104)
		DECLARE @NDG_TurDateS		varchar(10)
		Set @NDG_TurDateS = CONVERT( char(10), @NDG_TurDate, 104)
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)OR
			ISNULL(@ODG_ProTourFlag, 0) != ISNULL(@NDG_ProTourFlag, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		IF(@sMod = 'INS')
		BEGIN
			DECLARE @PrivatePerson int;
			EXEC @PrivatePerson = [dbo].[CheckPrivatePerson] @NDG_code;
			IF(@PrivatePerson = 0)
				IF(ISNULL(@NDG_DUPUSERKEY,-1) >= 0)
					EXEC [dbo].[UpdateReservationMainManByPartnerUser] @NDG_code;
		END
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF @bCurrencyChangedPrevFixDate > 0 OR @bCurrencyChangedDate > 0
					SET @bUpdateNationalCurrencyPrice = 1
				IF @bCurrencyChangedPrevFixDate > 0
					select @changedDate = MAX(HI_DATE) from history where HI_OAID = 20 and hi_dgcod = @ODG_CODE
			END
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF @bPriceChanged > 0
					SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
		BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
			IF @bFeeChanged > 0 
				SET @bUpdateNationalCurrencyPrice = 1
		END
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, '') != ISNULL(@NDG_TurDate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDateS, @NDG_TurDateS, null, null, null, null, 0, @bNeedCommunicationUpdate output

				Update DogovorList set DL_TURDATE = @NDG_TurDate where DL_DGKey = @DG_Key
				Update tbl_Turist set TU_TURDATE = @NDG_TurDate where TU_DGKey = @DG_Key

				--Путевка разаннулируется
				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN
					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
						exec dbo.SetReservationStatus @DG_Key
						-- 20611:CRM05885G9M9 Вызов перенесен в триггрер T_DogovorUpdate
						exec dbo.CreatePPaymentDate @NDG_Code, @NDG_TurDate, @dtCurrentDate
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
		begin
			-- если изменилась продолжительность путевки, то нужно пересадить все услуги которые сидят на квотах 
			-- на продолжительность и сами не имеют продолжительности
			declare @DLKey int, @DLDateBeg datetime, @DLDateEnd datetime
			
			declare curSetQuoted CURSOR FORWARD_ONLY for
						select DL_KEY, DL_DATEBEG, DL_DATEEND
						from Dogovorlist join [Service] on SV_KEY = DL_SVKEY
						where DL_DGKEY = @DG_Key
						and isnull(SV_IsDuration, 0) = 0
			OPEN curSetQuoted
			FETCH NEXT FROM curSetQuoted INTO @DLKey, @DLDateBeg, @DLDateEnd

			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- услуга сидит на квоте на продолжительность
				if (exists(select 1 from QuotaParts with(nolock) where LEN(ISNULL(QP_Durations, '')) > 0 and QP_ID in (select SD_QPID from ServiceByDate with(nolock) where SD_DLKey = @DLKey)))
					EXEC DogListToQuotas @DLKey, null, null, null, null, @DLDateBeg, @DLDateEnd, null, null
			
				FETCH NEXT FROM curSetQuoted INTO @DLKey, @DLDateBeg, @DLDateEnd
			end
			CLOSE curSetQuoted
			DEALLOCATE curSetQuoted
			
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		
		--MEG00040358 вынесла запись истории из условия if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0)),
		-- так как условие на вставку в этом блоке никогда не срабатывало, потому что в новой путевке @NDG_SOR_Code всегда нул , а @ODG_SOR_Code всегда ноль
		------путевка была создана--------------
		if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
		begin
			EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
			-- 20611:CRM05885G9M9 Вызов перенесен в триггрер T_DogovorUpdate
			exec dbo.CreatePPaymentDate @NDG_Code, @NDG_TurDate, @dtCurrentDate
		end

		
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				
				if @bStatusChanged > 0 and exists(select NC_Id from NationalCurrencyReservationStatuses with(nolock) where NC_OrderStatus = ISNULL(@NDG_SOR_Code, 0))
				begin
					-- Получаем кратность 
					select @statusChangedMultiplicity = NC_Multiplicity from NationalCurrencyReservationStatuses with(nolock) where NC_OrderStatus = ISNULL(@NDG_SOR_Code, 0)
					if (@statusChangedMultiplicity = 1 OR @bCurrencyChangedPrevFixDate > 0) -- Кратность: только один раз 
					begin -- либо включена опция, что при смене валюты стоимость пересчитывается по дате предыдущей фиксации
						-- пытаемя получить дату первой установки нужного статуса, либо текущую дату, если еще не фиксировали
						set @changedDate = ISNULL(dbo.GetFirstDogovorStatusDate (@DG_Key, @NDG_SOR_Code), GetDate())
					end
					if (@statusChangedMultiplicity = 2)	-- Кратность: каждый раз при смене статуса, берем текущую дату 
					begin
						set @changedDate = GetDate()
					end
					SET @bUpdateNationalCurrencyPrice = 1
				end
				-- 20611:CRM05885G9M9 Вызов перенесен в триггрер T_DogovorUpdate
				exec dbo.CreatePPaymentDate @NDG_Code, @NDG_TurDate, @dtCurrentDate
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				if (@nValue_Old is not null OR @nValue_New is not null)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end
		IF (ISNULL(@ODG_ProTourFlag, 0) != ISNULL(@NDG_ProTourFlag, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 399999, @ODG_ProTourFlag, @NDG_ProTourFlag, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key

		
		-- $$$ PRICE RECALCULATION $$$ --
		IF (@bUpdateNationalCurrencyPrice = 1 AND @sMod = 'UPD') OR (@sMod = 'INS' AND @bReservationCreated > 0)
		BEGIN
			--если не удалось определить дату, на которую рассчитывается и стоит настройка брать жату создания путевки, то ее и берем
			if @changedDate is null and @bReservationCreated > 0				
				select @changedDate = DG_CrDate from inserted i where i.dg_key = @DG_Key				   
				
			EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code
		END
	  END

		-- recalculate if exchange rate changes (another table) & saving from frmDogovor (tour.apl)
		-- + force-drop #RecalculateAction table in case hasn't been
		/*IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
		BEGIN
            DECLARE @AlwaysRecalcPrice int 
            SELECT  @AlwaysRecalcPrice = isnull(SS_ParmValue,0) FROM dbo.systemsettings  
            WHERE SS_ParmName = 'SYSAlwaysRecalcNational' 

			SELECT @DGCODE  = [DGCODE] FROM #RecalculateAction
			if @DGCODE = @NDG_Code
			begin
				SELECT @sAction = [Action] FROM #RecalculateAction
				DROP TABLE #RecalculateAction
				if @AlwaysRecalcPrice > 0
					EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
		    end
		END*/
		-- $$$ ------------------- $$$ --

        -- Task 7613. rozin. 27.08.2012. Добавление Предупреждений и Комментариев (таблица PrtWarns) по партнеру в историю при создании путевки
		IF(@sMod = 'INS')
		BEGIN
			DECLARE @warningTextPattern varchar(128)        
			DECLARE @warningText varchar(256)       
			DECLARE @warningType varchar(256)       
			DECLARE @warningMessage varchar(256) 
			DECLARE @partnerName varchar(256)
			DECLARE cur_PrtWarns CURSOR LOCAL FOR
				SELECT PW_Text, PW_Type
				FROM PrtWarns 
				WHERE PW_PRKey = @NDG_PartnerKey AND PW_IsAddToHistory = 1
	        
			SET @warningTextPattern = 'Прошу обратить внимание, что по заявке [1] у партнера [2] имеется [3]: [4]'
	        
			OPEN cur_PrtWarns
			FETCH NEXT FROM cur_PrtWarns INTO @warningText, @warningType
	        
			WHILE @@FETCH_STATUS = 0
			BEGIN 		
				SET @warningMessage = REPLACE(@warningTextPattern, '[1]', @NDG_Code)
				
				select @partnerName = pr_name from tbl_Partners where pr_key = @NDG_PartnerKey
				SET @warningMessage = REPLACE(@warningMessage, '[2]', @partnerName)
				
				IF (@warningType = 2)
					SET @warningMessage = REPLACE(@warningMessage, '[3]', 'предупреждение')
				ELSE IF (@warningType = 3)
					SET @warningMessage = REPLACE(@warningMessage, '[3]', 'комментарий')
				ELSE
					SET @warningMessage = REPLACE(@warningMessage, '[3]', '') -- таких сутуаций быть не должно
				
				SET @warningMessage = REPLACE(@warningMessage, '[4]', @warningText)
				
				EXEC dbo.InsHistory @NDG_Code, @DG_Key, NULL, NULL, 'MTM', @warningMessage, '', 0, '', 1
				FETCH NEXT FROM cur_PrtWarns INTO @warningText, @warningType
			END
	        
			CLOSE cur_PrtWarns
			DEALLOCATE cur_PrtWarns
		END
        -- END Task 7613
       
        DECLARE @DG_NATIONALCURRENCYPRICE int
	    DECLARE @DG_NATIONALCURRENCYDISCOUNTSUM int
		SET @DG_NATIONALCURRENCYPRICE = NULL
		SET @DG_NATIONALCURRENCYDISCOUNTSUM = NULL

		SELECT @DG_NATIONALCURRENCYPRICE = DG_NATIONALCURRENCYPRICE, @DG_NATIONALCURRENCYDISCOUNTSUM = DG_NATIONALCURRENCYDISCOUNTSUM FROM DOGOVOR 
		WHERE DG_KEY=@DG_Key
		 --Task 12886 04/04/2013 o.omelchenko - если идет инсерт и нац валюта не просчиталась, то считаем её на текущую дату
        if(@sMod = 'INS' and (@DG_NATIONALCURRENCYPRICE IS NULL OR @DG_NATIONALCURRENCYDISCOUNTSUM  IS NULL))
        BEGIN
            SET @changedDate = GETDATE()
            EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code, 0 
        END
		-- Task 10558 tfs neupokoev 26.12.2012
		-- Повторная фиксация курса валюты, в случае если он не зафиксировался
		IF(@sMod = 'UPD')
			BEGIN			

				IF(@DG_NATIONALCURRENCYPRICE IS NULL OR @DG_NATIONALCURRENCYDISCOUNTSUM  IS NULL)
					BEGIN
						EXEC dbo.ReСalculateNationalRatePrice @DG_KEY, @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @NDG_SOR_Code
					END 
					
			    -- Если нету фиксации, то перерасчитываем на текущую дату
				IF not exists(select * from History where HI_DGKEY =@DG_KEY and (HI_OAId = 20 or HI_OAId = 21))
				BEGIN					     
					  EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code, 0            
				END 
			END
		-- end Task 10558
        
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed, @ODG_ProTourFlag,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed, @NDG_ProTourFlag
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
/*********************************************************************/
/* end T_DogovorUpdate.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_DogovorUpdate.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwInsertTour.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_mwInsertTour.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[mwInsertTour]'))
	DROP TRIGGER [dbo].[mwInsertTour]
GO

CREATE trigger [dbo].[mwInsertTour] on [dbo].[mwReplTours] for insert
as
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-09</DATE>
	if dbo.mwReplIsSubscriber() > 0
	begin
		SELECT rt_tokey as trkey, RT_CalcKey as calcKey, rt_trkey as tlkey, rt_overwritePrices as overwritePrices, rt_updateOnlinePrices as updateOnlinePrices, TO_CNKey as cnkey, TL_CTDepartureKey as ctkeyfrom
		INTO #tmpKeys 
		FROM inserted
		join tbl_TurList on TL_KEY = rt_trkey
		join TP_Tours on TO_Key = rt_tokey

		declare replcur cursor fast_forward read_only for
		select trkey, calcKey, tlkey, overwritePrices, updateOnlinePrices, cnkey, ctkeyfrom from #tmpKeys

		declare @trkey int, @calcKey int, @tlkey int, @overwritePrices bit, @updateOnlinePrices smallint
		declare @cnKey int, @ctkeyfrom int

		open replcur

		fetch next from replcur into @trkey, @calcKey, @tlkey, @overwritePrices, @updateOnlinePrices, @cnKey, @ctkeyfrom
		while(@@fetch_status = 0)
		begin
			-- проверка: можно ли выставлять этот тур на этой базе
			-- MEG00040028. 09.02.2012. Golubinsky
			-- вынес проверку в функцию 
			if dbo.mwIsTourAllowedForPublish(@tlkey) = 1
			begin
				if (@calcKey = 0 or @calcKey is null)
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(1, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				else if (ISNULL(@updateOnlinePrices, 0) <> 2)
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(2, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				else
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(6, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				
				if not exists(select 1 from mwReplDirections with(nolock) where rd_cnkey = @cnKey and rd_ctkeyfrom = @ctkeyfrom)
				begin
					insert into mwReplDirections (rd_cnkey, rd_ctkeyfrom)
					values(@cnKey, ISNULL(@ctkeyfrom, 0))
				end
			end
			fetch next from replcur into @trkey, @calcKey, @tlkey, @overwritePrices, @updateOnlinePrices, @cnKey, @ctkeyfrom
		end
		
		close replcur
		deallocate replcur	
	end
end
GO
/*********************************************************************/
/* end T_mwInsertTour.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwInsertTour.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwUpdateHotel.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_mwUpdateHotel.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[mwUpdateHotel]'))
	DROP TRIGGER [dbo].[mwUpdateHotel]
GO

CREATE TRIGGER [dbo].[mwUpdateHotel] ON [dbo].[HotelDictionary] 
FOR UPDATE 
AS
IF @@ROWCOUNT > 0
begin

	--<VERSION>2009.2.20.26</VERSION>
	--<DATE>2014-12-25</DATE>

	if (UPDATE(HD_RSKEY) or UPDATE(HD_STARS) or UPDATE(HD_HTTP) or UPDATE(HD_NAME))
	begin

		update dbo.mwSpoDataTable 
		set sd_rskey = hd_rskey, 
			sd_hdstars = hd_stars,
			sd_hotelurl = hd_http,
			sd_hdname = hd_name
		from inserted where sd_hdkey = hd_key

	end
end
GO

/*********************************************************************/
/* end T_mwUpdateHotel.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwUpdateHotel.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwUpdatePriceTourEnabled.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_mwUpdatePriceTourEnabled.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[mwUpdatePriceTourEnabled]'))
	DROP TRIGGER [dbo].[mwUpdatePriceTourEnabled]
GO

create trigger [dbo].[mwUpdatePriceTourEnabled] on [dbo].[TP_Tours]
for update
as
begin
	--<VERSION>9.2.21.1</VERSION>
	--<DATE>2014-12-15</DATE>

	if @@rowcount > 0 and update(to_isenabled)
	begin

		if dbo.mwReplIsSubscriber() > 0
		begin
			select i.to_key as xrq_tokey, i.TO_TRKey as xrq_trkey, i.TO_CNKey as xrq_cnkey
			into #mwReplQueue
			from inserted i 
			inner join deleted d on i.to_key = d.to_key
			where i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0
			
			declare @DirTable table(xrq_cnkey int, xrq_ctkeyfrom int)
			
			insert into mwReplQueue(rq_mode, rq_tokey, rq_cnkey, rq_ctkeyfrom)
			output inserted.rq_cnkey, inserted.rq_ctkeyfrom into @DirTable (xrq_cnkey, xrq_ctkeyfrom)
			select 3, xrq_tokey, xrq_cnkey, ISNULL(TL_CTDepartureKey, 0)
			from #mwReplQueue
			join tbl_TurList on TL_KEY = xrq_trkey
			
			insert into mwReplDirections (rd_cnkey, rd_ctkeyfrom)
			select xrq_cnkey, isnull(xrq_ctkeyfrom, 0)
			from @DirTable
			left join mwReplDirections with(nolock) on xrq_cnkey = rd_cnkey and isnull(xrq_ctkeyfrom, 0) = rd_ctkeyfrom
			where rd_id is null
			
		end
		else if dbo.mwReplIsPublisher() <= 0
		begin

			declare @mwSearchType int
			select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
				where SS_ParmName = 'MWDivideByCountry'

			if @mwSearchType = 0
			begin
				update mwPriceDataTable with (rowlock)
				set pt_isenabled = 0
				from inserted i inner join deleted d on i.to_key = d.to_key			
				where pt_tourkey = i.to_key
					and i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0
			end
			else
			begin
				declare @tableName varchar(100), @tokey int, @cnkey int, @ctkey int
				declare @sql varchar(8000)

				create table #tmpPriceTours(
					to_key int
				)
				create index x_tokey on #tmpPriceTours(to_key)

				insert into #tmpPriceTours
				select i.to_key
				from inserted i inner join deleted d on i.to_key = d.to_key
				where i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0

				declare tblCursor cursor fast_forward read_only for 
				select 
					to_key, 
					to_cnkey, 
					tl_ctdeparturekey
				from 
					tp_tours tt with(nolock)
					inner join tbl_TurList with(nolock) on to_trkey = tl_key
				where
					exists(select 1 from #tmpPriceTours t where t.to_key = tt.to_key)

				open tblCursor

				fetch next from tblCursor into @tokey, @cnkey, @ctkey
				while @@fetch_status = 0
				begin	
					set @tableName = dbo.mwGetPriceTableName(@cnkey, @ctkey)
					IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@tableName) AND type in (N'U'))	
					BEGIN

						set @sql = 'while (1 = 1)
						begin
							update top 100000 ' + @tableName + ' set pt_isenabled = 0 where pt_tourkey = ' + ltrim(str(@tokey)) + ' and pt_isenabled = 1
							if (@@ROWCOUNT = 0)
								break
						end'

						exec (@sql)
					END
					fetch next from tblCursor into @tokey, @cnkey, @ctkey
				end

				close tblCursor
				deallocate tblCursor
			end

			update mwSpoDataTable with(rowlock)
			set sd_isenabled = 0
			from inserted i inner join deleted d on i.to_key = d.to_key			
			where sd_tourkey = i.to_key
				and i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0	

		end
	end
end
GO
/*********************************************************************/
/* end T_mwUpdatePriceTourEnabled.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_mwUpdatePriceTourEnabled.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_NCReservationStatusesUpdate.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_NCReservationStatusesUpdate.sql */
/*********************************************************************/
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_NCReservationStatusesUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	DROP TRIGGER [dbo].[T_NCReservationStatusesUpdate]
GO

CREATE TRIGGER [dbo].[T_NCReservationStatusesUpdate]
ON [dbo].[NationalCurrencyReservationStatuses] 
FOR INSERT, DELETE, UPDATE
AS
--<VERSION>9.2.21</VERSION>
--<DATE>2014-11-26</DATE>
IF @@ROWCOUNT > 0
BEGIN
	DECLARE @NC_ID int
	DECLARE @ONC_OrderStatus int
	DECLARE @NNC_OrderStatus int
	DECLARE @ONC_Multiplicity int
	DECLARE @NNC_Multiplicity int
	DECLARE @HIID int
	DECLARE @Mod varchar(3)
	DECLARE @HiText varchar(254)
	DECLARE @hostName varchar(25)
	DECLARE @bNeedCommunicationUpdate smallint
	DECLARE @DelCount int
	DECLARE @InsCount int
	DECLARE @oldValue int
	DECLARE @newValue int
	DECLARE @OAID int	
	SELECT @DelCount = COUNT(*) FROM DELETED
	SELECT @InsCount = COUNT(*) FROM INSERTED
	
	if(@DelCount = 0)
	BEGIN
		Set @Mod = 'INS'
		DECLARE cur_Modification CURSOR FOR	
		SELECT N.NC_ID
			 , null, null
			 , N.NC_OrderStatus, N.NC_Multiplicity
		FROM INSERTED N 	
	END
	ELSE IF(@InsCount = 0)
	BEGIN 
		Set @Mod = 'DEL'
		DECLARE cur_Modification CURSOR FOR	
		SELECT O.NC_ID
			 , O.NC_OrderStatus, O.NC_Multiplicity
			 , null, null
		FROM DELETED O 
	END
	ELSE
	BEGIN
		Set @Mod = 'UPD'	
		DECLARE cur_Modification CURSOR FOR	
		SELECT N.NC_ID
			 , O.NC_OrderStatus, O.NC_Multiplicity
			 , N.NC_OrderStatus, N.NC_Multiplicity
		FROM INSERTED N, DELETED O
		WHERE N.NC_ID = O.NC_ID
	END
	
	SET @hostName = SUBSTRING(HOST_NAME(),1,25);
	OPEN cur_Modification
    FETCH NEXT FROM cur_Modification INTO @NC_ID
										, @ONC_OrderStatus, @ONC_Multiplicity
										, @NNC_OrderStatus, @NNC_Multiplicity
    WHILE @@FETCH_STATUS = 0
    BEGIN 
		IF((@Mod = 'UPD' OR @Mod = 'INS' OR @Mod = 'DEL') AND 
		  ((ISNULL(@ONC_OrderStatus, 0) != ISNULL(@NNC_OrderStatus, 0)) OR
		   (ISNULL(@ONC_Multiplicity, 0) != ISNULL(@NNC_Multiplicity, 0))))
		BEGIN
			SET @oldValue = ISNULL(@ONC_OrderStatus, 0)
			SET @newValue = ISNULL(@NNC_OrderStatus, 0)
			IF(ISNULL(@ONC_OrderStatus, 0) != ISNULL(@NNC_OrderStatus, 0))
			BEGIN 
				SET @HiText = 'Значение колонки NC_OrderStatus изменилось с '+CAST(@oldValue AS varchar(3))+' на '+CAST(@newValue AS varchar(3))
				SET @OAID = 32001
				EXEC @HIID = dbo.InsHistory null, null, 32, @NC_ID, @Mod, @HiText, @hostName, 0, ''
				EXEC dbo.InsertHistoryDetail @HIID , @OAID, null, null, @oldValue, @newValue, null, null, 0, @bNeedCommunicationUpdate output
			END
			SET @oldValue = ISNULL(@ONC_Multiplicity, 0)
			SET @newValue = ISNULL(@NNC_Multiplicity, 0)
			IF(ISNULL(@ONC_Multiplicity, 0) != ISNULL(@NNC_Multiplicity, 0))
			BEGIN 
				SET @HiText = 'Значение колонки NC_Multiplicity изменилось с '+CAST(@oldValue AS varchar(3))+' на '+CAST(@newValue AS varchar(3))
				SET @OAID = 32002
				EXEC @HIID = dbo.InsHistory null, null, 32, @NC_ID, @Mod, @HiText, @hostName, 0, ''
				EXEC dbo.InsertHistoryDetail @HIID , @OAID, null, null, @oldValue, @newValue, null, null, 0, @bNeedCommunicationUpdate output
			END
		END
		FETCH NEXT FROM cur_Modification INTO @NC_ID
										, @ONC_OrderStatus, @ONC_Multiplicity
										, @NNC_OrderStatus, @NNC_Multiplicity
	END
	CLOSE cur_Modification
	DEALLOCATE cur_Modification
END
GO

/*********************************************************************/
/* end T_NCReservationStatusesUpdate.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_NCReservationStatusesUpdate.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_ServiceByDateChanged.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_ServiceByDateChanged.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='TR' and name='T_ServiceByDateChanged')
	-- удал¤ю лишний триггер
	drop trigger dbo.T_ServiceByDateChanged
go

CREATE TRIGGER [dbo].[T_ServiceByDateChanged] ON [dbo].[ServiceByDate]
AFTER INSERT, UPDATE, DELETE
AS
--<DATE>2014-10-16</DATE>
--<VERSION>2009.2.20.23</VERSION>
DECLARE @sMod varchar(3), @nHIID int, @sDGCode varchar(10), @nDGKey int, @sDLName varchar(150), @sTemp varchar(25), @sTemp2 varchar(255), @sTuristName varchar(55)
DECLARE @sOldValue varchar(255), @sNewValue varchar(255), @nOldValue int, @nNewValue int, @SDDate datetime
DECLARE @nRowsCount int, @sServiceStatusToHistory varchar(255)

DECLARE @SDID int, @N_SD_DLKey int, @N_SD_RLID int, @N_SD_TUKEY int, @N_SD_QPID int, @N_SD_State int, @N_SD_Date datetime,
		@O_SD_DLKey int, @O_SD_RLID int, @O_SD_TUKEY int, @O_SD_QPID int, @O_SD_State int, @O_SD_Date datetime, @QT_ByRoom bit,
		@nDelCount int, @nInsCount int, @DLDateBeg datetime, @DLNDays int, @QState int, @NewQState int, @QD_ID int

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR local FAST_FORWARD FOR 
    SELECT 	O.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
			null, null, null, null, null, null
    FROM DELETED O
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR local FAST_FORWARD FOR 
    SELECT 	N.SD_ID,
			null, null, null, null, null, null,
			N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM	INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key
	-- CRM01871H3T9 30.05.2012 kolbeshkin: отсеиваем неквотируемые услуги, дл¤ них триггер не должен отрабатывать
	where exists (select 1 from DogovorList,[Service] where DL_KEY=N.SD_DLKey and DL_SVKEY=SV_KEY 
    and ISNULL(SV_QUOTED,0)<>0)
END
ELSE 
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR local FAST_FORWARD FOR 
    SELECT 	N.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
	  		N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM DELETED O, INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key 
    WHERE N.SD_ID = O.SD_ID
	-- CRM01871H3T9 30.05.2012 kolbeshkin: отсеиваем неквотируемые услуги, дл¤ них триггер не должен отрабатывать
	and exists (select 1 from DogovorList,[Service] where DL_KEY=N.SD_DLKey and DL_SVKEY=SV_KEY 
    and ISNULL(SV_QUOTED,0)<>0)
END

select @sServiceStatusToHistory = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory'

declare @RLIDCount int

OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
				@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
				--@DLDateBeg, @DLNDays
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ISNULL(@O_SD_QPID,0)!=ISNULL(@N_SD_QPID,0) OR ISNULL(@O_SD_RLID,0)!=ISNULL(@N_SD_RLID,0)
	BEGIN
		If @O_SD_QPID is not null
		BEGIN			
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas inner join QuotaDetails on QD_QTID=QT_ID inner join QuotaParts on QD_ID=QP_QDID where QP_ID=@O_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) WHERE SD_QPID=@O_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@O_SD_QPID
				
				select @QD_ID = QP_QDID from QuotaParts where QP_ID = @O_SD_QPID
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_QDID=@QD_ID)				
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID = @QD_ID
				
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@O_SD_QPID AND isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) WHERE SD_QPID=@O_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@O_SD_QPID
				
				select @QD_ID = QP_QDID from QuotaParts where QP_ID = @O_SD_QPID
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_QDID=@QD_ID)				
				UPDATE QuotaDetails SET QD_Busy=(@RLIDCount) WHERE QD_ID = @QD_ID
				
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@O_SD_QPID and isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
		
		If @N_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@N_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				set @RLIDCount=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) WHERE SD_QPID=@N_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@N_SD_QPID
				
				select @QD_ID = QP_QDID from QuotaParts where QP_ID = @N_SD_QPID
				set @RLIDCount= (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_QDID=@QD_ID)
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID = @QD_ID
				
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WITH (NOLOCK) inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@N_SD_QPID AND isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				set @RLIDCount=(SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) WHERE SD_QPID=@N_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@N_SD_QPID
				
				select @QD_ID = QP_QDID from QuotaParts where QP_ID = @N_SD_QPID
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_QDID=@QD_ID)				
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID = @QD_ID
				
				set @RLIDCount=(SELECT COUNT(*) FROM ServiceByDate WITH (NOLOCK) inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@N_SD_QPID and isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
	END
	
	IF (ISNULL(@O_SD_STATE, 0) != ISNULL(@N_SD_STATE, 0) or 
		ISNULL(@O_SD_TUKEY,0)!=ISNULL(@N_SD_TUKEY,0)) and ISNULL(@sServiceStatusToHistory, '0') != '0'
	BEGIN
		Select @QState = QS_STATE from QuotedState where QS_DLID = @N_SD_DLKey and ISNULL(QS_TUID,0) = ISNULL(@N_SD_TUKEY,0)
		IF @QState is NULL and @N_SD_DLKey is not NULL
		BEGIN
			Set @QState = 4
			Insert into QuotedState (QS_DLID, QS_TUID, QS_STATE) values (@N_SD_DLKey, @N_SD_TUKEY, @QState)
		END

		Select @NewQState = MAX(SD_STATE) from ServiceByDate WITH (NOLOCK) where SD_DLKey = @N_SD_DLKey and ISNULL(SD_TUKEY,0) = ISNULL(@N_SD_TUKEY,0)
		
		if @NewQState is null
		 	set @NewQState = 4
		IF @QState <> @NewQState
			IF @N_SD_DLKey is not NULL
				Update QuotedState set QS_STATE = @NewQState where QS_DLID=@N_SD_DLKey and ISNULL(QS_TUID,0)=ISNULL(@N_SD_TUKEY,0)
			ELSE
				IF @O_SD_DLKey is not NULL
					Update QuotedState set QS_STATE = @NewQState where QS_DLID=@O_SD_DLKey and ISNULL(QS_TUID,0)=ISNULL(@N_SD_TUKEY,0)
	END
	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
					@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
					--@DLDateBeg, @DLNDays
END
IF @O_SD_DLKey is not null and @N_SD_DLKey is null
	IF exists (SELECT 1 FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate WITH (NOLOCK)))
		DELETE FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate WITH (NOLOCK))

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO

/*********************************************************************/
/* end T_ServiceByDateChanged.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_ServiceByDateChanged.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TSToServiceByDate.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_TSToServiceByDate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_TSToServiceByDate]'))
	DROP TRIGGER [dbo].[T_TSToServiceByDate]
GO

CREATE TRIGGER [dbo].[T_TSToServiceByDate]
   ON [dbo].[TuristService]
   AFTER INSERT, DELETE 
AS 
--<VERSION>2009.2.20.13</VERSION>
--<DATE>2014-04-29</DATE>
DECLARE @TUID int, @O_DLKey int, @O_TUKey int, @N_DLKey int,@N_TUKey int,
		@BestPlace int, @BestRL int, @nDelCount int, @nInsCount int

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED

-- Task 8984 24.10.2012 kolbeshkin
-- Перераспределение туристов по услугам, класс которых имеет признак "Индивидуальное бронирование":
-- в каждой услуге должно быть не более 1 туриста.
IF (@nDelCount = 0)
begin
	DECLARE @isIndividualService smallint
	DECLARE @newTU_DLKEY int
	DECLARE @DL_DGKEY int
	DECLARE @DL_SVKEY int
		
	DECLARE cur_individual CURSOR FOR 
	SELECT 	N.TU_IDKey,	N.TU_DLKey
	FROM	INSERTED N 
	OPEN cur_individual
	FETCH NEXT FROM cur_individual 
	INTO @TUID, @O_DLKey

	WHILE @@FETCH_STATUS = 0
	BEGIN
		select @isIndividualService = ISNULL(SV_IsIndividual, 0),@DL_SVKEY=DL_SVKEY,@DL_DGKEY=DL_DGKEY  
		from dbo.Service,dbo.Dogovorlist where DL_KEY = @O_DLKey and SV_Key = DL_SVKEY 
		if @isIndividualService > 0 and (select COUNT(*) from TuristService where TU_DLKEY = @O_DLKey) > 1
		begin
				set @newTU_DLKEY = (select top 1 DL_KEY from dbo.Dogovorlist where DL_DGKEY = @DL_DGKEY
					and DL_SVKEY = @DL_SVKEY and not exists (select 1 from TuristService where TU_DLKEY = DL_KEY))
				if @newTU_DLKEY is not null
					update TuristService set TU_DLKEY = @newTU_DLKEY where TU_IDKEY = @TUID
		end
		FETCH NEXT FROM cur_individual 
		INTO @TUID, @O_DLKey
	end
	CLOSE cur_individual
	DEALLOCATE cur_individual
end
set @TUID=null
set @O_DLKey=null
-- 

IF (@nInsCount = 0)
BEGIN
	DECLARE cur_T_TSToServiceByDate CURSOR FOR 
	SELECT 	O.TU_IDKey,
			O.TU_DLKey, O.TU_TUKey,
			null, null
	FROM DELETED O
END
ELSE IF (@nDelCount = 0)
BEGIN
	DECLARE cur_T_TSToServiceByDate CURSOR FOR 
	SELECT 	N.TU_IDKey,
			null, null,
			N.TU_DLKey, N.TU_TUKey
	FROM	INSERTED N 
END

OPEN cur_T_TSToServiceByDate
FETCH NEXT FROM cur_T_TSToServiceByDate 
	INTO @TUID, @O_DLKey, @O_TUKey, @N_DLKey, @N_TUKey
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @N_TUKey is not null
	BEGIN
		SET @BestRL = 0
		SET @BestPlace = 0
		SELECT @BestRL=Min(SD_RLID),@BestPlace=Min(SD_RPID) FROM ServiceByDate WHERE SD_DLKey=@N_DLKey and SD_TUKey is null
		If @BestRL is null
			UPDATE ServiceByDate SET SD_TUKey=@N_TUKey WHERE SD_DLKey=@N_DLKey and SD_RPID=@BestPlace and SD_RLID is null
		Else
		BEGIN
			SELECT @BestPlace=Min(SD_RPID) FROM ServiceByDate WHERE SD_DLKey=@N_DLKey and SD_RLID=@BestRL and SD_TUKey is null
			UPDATE ServiceByDate SET SD_TUKey=@N_TUKey WHERE SD_DLKey=@N_DLKey and SD_RPID=@BestPlace and SD_RLID=@BestRL
		END
	END
	ELSE IF @O_TUKey is not null
		UPDATE ServiceByDate SET SD_TUKey=null WHERE SD_DLKey=@O_DLKey AND SD_TUKey=@O_TUKey

	-- Golubinsky. 11.08.2012. 
	-- TFS 7219: бронирование авиаперелетов для инфантов: перелеты садятся на подтверждение вне квоты
	UPDATE ServiceByDate SET SD_State=3
	WHERE SD_DLKey = @N_DLKey
			AND SD_TUKey = @N_TUKey
			AND EXISTS (SELECT TOP 1 1 FROM tbl_DogovorList WHERE DL_KEY = SD_DLKey AND DL_SVKEY = 1)
			AND EXISTS (SELECT TOP 1 1 FROM tbl_Turist WHERE TU_KEY = SD_TUKey AND TU_SEX=3)

	FETCH NEXT FROM cur_T_TSToServiceByDate
		INTO @TUID, @O_DLKey, @O_TUKey, @N_DLKey, @N_TUKey
END
CLOSE cur_T_TSToServiceByDate
DEALLOCATE cur_T_TSToServiceByDate
GO
/*********************************************************************/
/* end T_TSToServiceByDate.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TSToServiceByDate.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TuristUpdate.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_TuristUpdate.sql */
/*********************************************************************/
update Turist set TU_ISMAIN = 0 where TU_KEY not in 
(
select MIN(tu_key)
from Dogovor, Turist where TU_DGKEY = DG_Key and TU_ISMAIN = 1 group by DG_Key having COUNT(*) > 1
)
and TU_DGKEY in 
(
select dg_key from Dogovor, Turist where TU_DGKEY = DG_Key and TU_ISMAIN = 1 group by DG_Key having COUNT(*) > 1
)
and TU_ISMAIN = 1

GO

IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_TuristUpdate]'))
DROP TRIGGER [dbo].[T_TuristUpdate]
GO

CREATE TRIGGER [dbo].[T_TuristUpdate]
ON [dbo].[tbl_Turist] 
FOR UPDATE, INSERT, DELETE
AS
--<DATE>2014-07-10</DATE>
--<VERSION>2009.2.20.17</VERSION>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @OTU_DGCod 		varchar(10)
    DECLARE @OTU_NameRus 		varchar(25)
    DECLARE @OTU_NameLat 		varchar(25)
    DECLARE @OTU_FNameRus 	varchar(15)
    DECLARE @OTU_FNameLat 		varchar(15)
    DECLARE @OTU_SNameRus 	varchar(15)
    DECLARE @OTU_SNameLat 		varchar(15)
    DECLARE @OTU_BirthDay 		varchar(10)
    DECLARE @OTU_PasportType 	varchar(10)
    DECLARE @OTU_PasportNum 	varchar(20)
    DECLARE @OTU_PaspRuSer 	varchar(10)
    DECLARE @OTU_PaspRuNum 	varchar(20)
    DECLARE @OTU_PasportDate 	varchar(10)
    DECLARE @OTU_PasportDateEnd 	varchar(10)
    DECLARE @OTU_PasportByWhoM 	varchar(20)
    DECLARE @OTU_PaspRuDate 	varchar(10)
    DECLARE @OTU_PaspRuByWhoM 	varchar(50)
    DECLARE @OTU_Sex 	int
    DECLARE @OTU_RealSex 	int
	DECLARE @OTU_DGKey		int
-- 
	DECLARE @OTU_BIRTHCOUNTRY varchar(25)
	DECLARE @OTU_BIRTHCITY varchar(25)
    DECLARE @OTU_CITIZEN varchar(50)
	DECLARE @OTU_POSTINDEX varchar(8)
	DECLARE @OTU_POSTCITY varchar(15)
	DECLARE @OTU_POSTSTREET varchar(25)
	DECLARE @OTU_POSTBILD varchar(6)
	DECLARE @OTU_POSTFLAT varchar(4)

	DECLARE @OTU_ISMAIN smallint
	DECLARE @OTU_PHONE varchar(30)
	DECLARE @OTU_EMAIL varchar(50)
    
    DECLARE @NTU_DGCod 		varchar(10)
    DECLARE @NTU_NameRus 		varchar(25)
    DECLARE @NTU_NameLat 		varchar(25)
    DECLARE @NTU_FNameRus 	varchar(15)
    DECLARE @NTU_FNameLat 		varchar(15)
    DECLARE @NTU_SNameRus 	varchar(15)
    DECLARE @NTU_SNameLat 		varchar(15)
    DECLARE @NTU_BirthDay 		varchar(10)
    DECLARE @NTU_PasportType 	varchar(10)
    DECLARE @NTU_PasportNum 	varchar(20)
    DECLARE @NTU_PaspRuSer 	varchar(10)
    DECLARE @NTU_PaspRuNum 	varchar(20)
    DECLARE @NTU_PasportDate 	varchar(10)
    DECLARE @NTU_PasportDateEnd 	varchar(10)
    DECLARE @NTU_PasportByWhoM 	varchar(20)
    DECLARE @NTU_PaspRuDate 	varchar(10)
    DECLARE @NTU_PaspRuByWhoM 	varchar(50)
    DECLARE @NTU_Sex 	int
    DECLARE @NTU_RealSex 	int
	DECLARE @NTU_DGKey		int
--
	DECLARE @NTU_BIRTHCOUNTRY varchar(25)
	DECLARE @NTU_BIRTHCITY varchar(25)
    DECLARE @NTU_CITIZEN varchar(50)
	DECLARE @NTU_POSTINDEX varchar(8)
	DECLARE @NTU_POSTCITY varchar(15)
	DECLARE @NTU_POSTSTREET varchar(25)
	DECLARE @NTU_POSTBILD varchar(6)
	DECLARE @NTU_POSTFLAT varchar(4)

	DECLARE @NTU_ISMAIN smallint
	DECLARE @NTU_PHONE varchar(30)
	DECLARE @NTU_EMAIL varchar(50)

	DECLARE @TU_Key int

	DECLARE @sTU_ShortName varchar(8)
	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int
	DECLARE @nHIID int
	DECLARE @sHI_Text varchar(254)

	DECLARE @sText_Old varchar(254)
	DECLARE @sText_New varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint
	DECLARE @nDGKey int
	DECLARE @sDGCod	varchar(10)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Turist CURSOR FOR 
      SELECT N.TU_Key, N.TU_ShortName,
			 N.TU_DGCod, N.TU_DGKey, null, null, null, null, 
	  	     null, null, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null,
			 null, null, null, null,
			 null, null, null, null, null, null, null,
		  	 N.TU_DGCod, N.TU_DGKey, N.TU_NameRus, N.TU_NameLat, N.TU_FNameRus, N.TU_FNameLat,
			 N.TU_SNameRus, N.TU_SNameLat, CONVERT( char(10),N.TU_BirthDay, 104), N.TU_PasportType, N.TU_PasportNum, N.TU_PaspRuSer,
			 N.TU_PaspRuNum, CONVERT( char(10),N.TU_PasportDate, 104), CONVERT( char(10),N.TU_PasportDateEnd, 104), N.TU_PasportByWhoM, CONVERT( char(10),N.TU_PaspRuDate, 104), N.TU_PaspRuByWhoM,
			 N.TU_Sex, N.TU_RealSex, 
				N.TU_BIRTHCOUNTRY,
				N.TU_BIRTHCITY,
				N.TU_CITIZEN,
				N.TU_POSTINDEX,
				N.TU_POSTCITY,
				N.TU_POSTSTREET,
				N.TU_POSTBILD,
				N.TU_POSTFLAT,
				N.TU_ISMAIN,
				N.TU_PHONE,
				N.TU_EMAIL
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Turist CURSOR FOR 
      SELECT O.TU_Key, O.TU_ShortName,
			 O.TU_DGCod, O.TU_DGKey, O.TU_NameRus, O.TU_NameLat, O.TU_FNameRus, O.TU_FNameLat,
			 O.TU_SNameRus, O.TU_SNameLat, CONVERT( char(10),O.TU_BirthDay, 104), O.TU_PasportType, O.TU_PasportNum, O.TU_PaspRuSer,
			 O.TU_PaspRuNum, CONVERT( char(10), O.TU_PasportDate, 104), CONVERT( char(10), O.TU_PasportDateEnd, 104), O.TU_PasportByWhoM, CONVERT( char(10), O.TU_PaspRuDate, 104), O.TU_PaspRuByWhoM, 
			 O.TU_Sex, O.TU_RealSex, 
				O.TU_BIRTHCOUNTRY,
				O.TU_BIRTHCITY,
				O.TU_CITIZEN,
				O.TU_POSTINDEX,
				O.TU_POSTCITY,
				O.TU_POSTSTREET,
				O.TU_POSTBILD,
				O.TU_POSTFLAT,
				O.TU_ISMAIN,
				O.TU_PHONE,
				O.TU_EMAIL,
		  	 O.TU_DGCod, O.TU_DGKey, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null,
			 null, null, null, null,
			 null, null, null, null, null, null, null
      FROM DELETED O 
  END
  ELSE 
  BEGIN
	SET @sMod = 'UPD'
    DECLARE cur_Turist CURSOR FOR 
      SELECT N.TU_Key, N.TU_ShortName,
			 O.TU_DGCod, O.TU_DGKey, O.TU_NameRus, O.TU_NameLat, O.TU_FNameRus, O.TU_FNameLat,
			 O.TU_SNameRus, O.TU_SNameLat, CONVERT( char(10),O.TU_BirthDay, 104), O.TU_PasportType, O.TU_PasportNum, O.TU_PaspRuSer,
			 O.TU_PaspRuNum, CONVERT( char(10), O.TU_PasportDate, 104), CONVERT( char(10), O.TU_PasportDateEnd, 104), O.TU_PasportByWhoM, CONVERT( char(10), O.TU_PaspRuDate, 104), O.TU_PaspRuByWhoM, 
			 O.TU_Sex, O.TU_RealSex, 
				O.TU_BIRTHCOUNTRY,
				O.TU_BIRTHCITY,
				O.TU_CITIZEN,
				O.TU_POSTINDEX,
				O.TU_POSTCITY,
				O.TU_POSTSTREET,
				O.TU_POSTBILD,
				O.TU_POSTFLAT,
				O.TU_ISMAIN,
				O.TU_PHONE,
				O.TU_EMAIL,
		  	 N.TU_DGCod, N.TU_DGKey, N.TU_NameRus, N.TU_NameLat, N.TU_FNameRus, N.TU_FNameLat, 
			 N.TU_SNameRus, N.TU_SNameLat, CONVERT( char(10),N.TU_BirthDay, 104), N.TU_PasportType, N.TU_PasportNum, N.TU_PaspRuSer,
			 N.TU_PaspRuNum, CONVERT( char(10),N.TU_PasportDate, 104), CONVERT( char(10),N.TU_PasportDateEnd, 104), N.TU_PasportByWhoM, CONVERT( char(10),N.TU_PaspRuDate, 104), N.TU_PaspRuByWhoM,
			 N.TU_Sex, N.TU_RealSex, 
				N.TU_BIRTHCOUNTRY,
				N.TU_BIRTHCITY,
				N.TU_CITIZEN,
				N.TU_POSTINDEX,
				N.TU_POSTCITY,
				N.TU_POSTSTREET,
				N.TU_POSTBILD,
				N.TU_POSTFLAT,
				N.TU_ISMAIN,
				N.TU_PHONE,
				N.TU_EMAIL
      FROM DELETED O, INSERTED N 
      WHERE N.TU_Key = O.TU_Key
  END

  OPEN cur_Turist
    FETCH NEXT FROM cur_Turist INTO @TU_Key, @sTU_ShortName,
				@OTU_DGCod, @OTU_DGKey, @OTU_NameRus, @OTU_NameLat, @OTU_FNameRus, @OTU_FNameLat,
				@OTU_SNameRus, @OTU_SNameLat, @OTU_BirthDay, @OTU_PasportType, @OTU_PasportNum,	@OTU_PaspRuSer,
				@OTU_PaspRuNum, @OTU_PasportDate, @OTU_PasportDateEnd, @OTU_PasportByWhoM, @OTU_PaspRuDate, @OTU_PaspRuByWhoM, 
				@OTU_Sex, @OTU_RealSex, 
				@OTU_BIRTHCOUNTRY,
				@OTU_BIRTHCITY,
				@OTU_CITIZEN,
				@OTU_POSTINDEX,
				@OTU_POSTCITY,
				@OTU_POSTSTREET,
				@OTU_POSTBILD,
				@OTU_POSTFLAT,
				@OTU_ISMAIN,
				@OTU_PHONE,
				@OTU_EMAIL,
				@NTU_DGCod, @NTU_DGKey, @NTU_NameRus, @NTU_NameLat,	@NTU_FNameRus, @NTU_FNameLat,
				@NTU_SNameRus, @NTU_SNameLat, @NTU_BirthDay, @NTU_PasportType, @NTU_PasportNum,	@NTU_PaspRuSer,
				@NTU_PaspRuNum, @NTU_PasportDate, @NTU_PasportDateEnd, @NTU_PasportByWhoM, @NTU_PaspRuDate, @NTU_PaspRuByWhoM,
				@NTU_Sex, @NTU_RealSex,
				@NTU_BIRTHCOUNTRY,
				@NTU_BIRTHCITY,
				@NTU_CITIZEN,
				@NTU_POSTINDEX,
				@NTU_POSTCITY,
				@NTU_POSTSTREET,
				@NTU_POSTBILD,
				@NTU_POSTFLAT,
				@NTU_ISMAIN,
				@NTU_PHONE,
				@NTU_EMAIL
    WHILE @@FETCH_STATUS = 0
    BEGIN 	
	  If ((((@sMod = 'UPD') AND (@OTU_DGCod = @NTU_DGCod)) OR (@sMod = 'INS') OR (@sMod = 'DEL')) AND
		(
			ISNULL(@OTU_NameRus, '') != ISNULL(@NTU_NameRus, '') OR
			ISNULL(@OTU_NameLat, '') != ISNULL(@NTU_NameLat, '') OR
			ISNULL(@OTU_FNameRus, '') != ISNULL(@NTU_FNameRus, '') OR
			ISNULL(@OTU_FNameLat, '') != ISNULL(@NTU_FNameLat, '') OR
			ISNULL(@OTU_SNameRus, '') != ISNULL(@NTU_SNameRus, '') OR
			ISNULL(@OTU_SNameLat, '') != ISNULL(@NTU_SNameLat, '') OR
			ISNULL(@OTU_BirthDay, 0) != ISNULL(@NTU_BirthDay, 0) OR
			ISNULL(@OTU_PasportType, 0) != ISNULL(@NTU_PasportType, 0) OR
			ISNULL(@OTU_PasportNum, 0) != ISNULL(@NTU_PasportNum, 0) OR
			ISNULL(@OTU_PaspRuSer, 0) != ISNULL(@NTU_PaspRuSer, 0) OR
			ISNULL(@OTU_PaspRuNum, 0) != ISNULL(@NTU_PaspRuNum, 0) OR
			ISNULL(@OTU_PasportDate, 0) != ISNULL(@NTU_PasportDate, 0) OR
			ISNULL(@OTU_PasportDateEnd, 0) != ISNULL(@NTU_PasportDateEnd, 0) OR
			ISNULL(@OTU_PasportByWhoM, 0) != ISNULL(@NTU_PasportByWhoM, 0) OR
			ISNULL(@OTU_PaspRuDate, 0) != ISNULL(@NTU_PaspRuDate, 0) OR
			ISNULL(@OTU_PaspRuByWhoM, 0) != ISNULL(@NTU_PaspRuByWhoM, 0)  OR
			ISNULL(@OTU_Sex, 0) != ISNULL(@NTU_Sex, 0)  OR
			ISNULL(@OTU_RealSex, 0) != ISNULL(@NTU_RealSex, 0) OR
--
			ISNULL(@OTU_BIRTHCOUNTRY, '') != ISNULL(@NTU_BIRTHCOUNTRY, '') OR
			ISNULL(@OTU_BIRTHCITY, '') != ISNULL(@NTU_BIRTHCITY, '') OR
			ISNULL(@OTU_CITIZEN, '') != ISNULL(@NTU_CITIZEN, '') OR
			ISNULL(@OTU_POSTINDEX, '') != ISNULL(@NTU_POSTINDEX, '') OR
			ISNULL(@OTU_POSTCITY, '') != ISNULL(@NTU_POSTCITY, '') OR
			ISNULL(@OTU_POSTSTREET, '') != ISNULL(@NTU_POSTSTREET, '') OR
			ISNULL(@OTU_POSTBILD, '') != ISNULL(@NTU_POSTBILD, '') OR
			ISNULL(@OTU_POSTFLAT, '') != ISNULL(@NTU_POSTFLAT, '') OR
			ISNULL(@OTU_ISMAIN, 0) != ISNULL(@NTU_ISMAIN, 0) OR 
			ISNULL(@OTU_EMAIL, '') != ISNULL(@NTU_EMAIL, '') OR 
			ISNULL(@OTU_PHONE, '') != ISNULL(@NTU_PHONE, '')
		))
	  BEGIN
	
		
		SET @nDGKey=@NTU_DGKey
		SET @sHI_Text = ISNULL(@NTU_NameRus, '') + ' ' + ISNULL(@sTU_ShortName, '')
		SET @sDGCod=@NTU_DGCod
		if (@sMod = 'DEL')
		BEGIN
			SET @nDGKey=@OTU_DGKey
			SET @sHI_Text = ISNULL(@OTU_NameRus, '') + ' ' + ISNULL(@sTU_ShortName, '')
			SET @sDGCod=@OTU_DGCod
		END
		EXEC @nHIID = dbo.InsHistory @sDGCod, @nDGKey, 3, @TU_Key, @sMod, @sHI_Text, '', 0, ''	
		if (ISNULL(@OTU_NameRus, '') != ISNULL(@NTU_NameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1051, @OTU_NameRus, @NTU_NameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_NameLat, '') != ISNULL(@NTU_NameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1052, @OTU_NameLat, @NTU_NameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_FNameRus, '') != ISNULL(@NTU_FNameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1053, @OTU_FNameRus, @NTU_FNameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_FNameLat, '') != ISNULL(@NTU_FNameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1054, @OTU_FNameLat, @NTU_FNameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_SNameRus, '') != ISNULL(@NTU_SNameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1055, @OTU_SNameRus, @NTU_SNameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_SNameLat, '') != ISNULL(@NTU_SNameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1056, @OTU_SNameLat, @NTU_SNameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_BirthDay, 0) != ISNULL(@NTU_BirthDay, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1057, @OTU_BirthDay, @NTU_BirthDay, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportType, '') != ISNULL(@NTU_PasportType, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1058, @OTU_PasportType, @NTU_PasportType, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportNum, '') != ISNULL(@NTU_PasportNum, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1059, @OTU_PasportNum, @NTU_PasportNum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuSer, '') != ISNULL(@NTU_PaspRuSer, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1060, @OTU_PaspRuSer, @NTU_PaspRuSer, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuNum, '') != ISNULL(@NTU_PaspRuNum, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1061, @OTU_PaspRuNum, @NTU_PaspRuNum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportDate, 0) != ISNULL(@NTU_PasportDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1062, @OTU_PasportDate, @NTU_PasportDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportDateEnd, 0) != ISNULL(@NTU_PasportDateEnd, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1063, @OTU_PasportDateEnd, @NTU_PasportDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportByWhoM, '') != ISNULL(@NTU_PasportByWhoM, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1064, @OTU_PasportByWhoM, @NTU_PasportByWhoM, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuDate, 0) != ISNULL(@NTU_PaspRuDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1065, @OTU_PaspRuDate, @NTU_PaspRuDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuByWhoM, '') != ISNULL(@NTU_PaspRuByWhoM, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1066, @OTU_PaspRuByWhoM, @NTU_PaspRuByWhoM, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_Sex, 0) != ISNULL(@NTU_Sex, 0))
			BEGIN
				IF not ((ISNULL(@OTU_Sex, 0) = 1 and ISNULL(@NTU_Sex, 0) = 0) or (ISNULL(@OTU_Sex, 0) = 0 and ISNULL(@NTU_Sex, 0) = 1))
				BEGIN
					IF @sMod != 'INS'
						SELECT @sText_Old = CASE ISNULL(@OTU_Sex, 0)
								WHEN 0 THEN 'Adult'
								WHEN 1 THEN 'Adult'
								WHEN 2 THEN 'Child'
								WHEN 3 THEN 'Infant'
								END
					ELSE
						SET @sText_Old = ''
					IF @sMod != 'DEL'
						SELECT @sText_New = CASE ISNULL(@NTU_Sex, 0)
								WHEN 0 THEN 'Adult'
								WHEN 1 THEN 'Adult'
								WHEN 2 THEN 'Child'
								WHEN 3 THEN 'Infant'
								END
					ELSE
						SET @sText_New = ''
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1067, @sText_Old, @sText_New, @OTU_Sex, @NTU_Sex, null, null, 0, @bNeedCommunicationUpdate output
				END
			END
		if (ISNULL(@OTU_RealSex, 0) != ISNULL(@NTU_RealSex, 0))
		BEGIN
				IF @sMod != 'INS'
					SELECT @sText_Old = CASE ISNULL(@OTU_RealSex, 0)
							WHEN 0 THEN 'Male'
							WHEN 1 THEN 'Female'
							END
				ELSE
					Set @sText_Old = ''
				IF @sMod != 'DEL'
					SELECT @sText_New = CASE ISNULL(@NTU_RealSex, 0)
							WHEN 0 THEN 'Male'
							WHEN 1 THEN 'Female'
							END
				ELSE
					Set	@sText_New = ''
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1068, @sText_Old, @sText_New, @OTU_RealSex, @NTU_RealSex, null, null, 0, @bNeedCommunicationUpdate output
		END

		if (ISNULL(@OTU_BIRTHCOUNTRY, '') != ISNULL(@NTU_BIRTHCOUNTRY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1126, @OTU_BIRTHCOUNTRY, @NTU_BIRTHCOUNTRY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_BIRTHCITY, '') != ISNULL(@NTU_BIRTHCITY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1127, @OTU_BIRTHCITY, @NTU_BIRTHCITY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_CITIZEN, '') != ISNULL(@NTU_CITIZEN, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1128, @OTU_CITIZEN, @NTU_CITIZEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTINDEX, '') != ISNULL(@NTU_POSTINDEX, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1129, @OTU_POSTINDEX, @NTU_POSTINDEX, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTCITY, '') != ISNULL(@NTU_POSTCITY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1130, @OTU_POSTCITY, @NTU_POSTCITY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTSTREET, '') != ISNULL(@NTU_POSTSTREET, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1131, @OTU_POSTSTREET, @NTU_POSTSTREET, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTBILD, '') != ISNULL(@NTU_POSTBILD, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1132, @OTU_POSTBILD, @NTU_POSTBILD, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTFLAT, '') != ISNULL(@NTU_POSTFLAT, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1133, @OTU_POSTFLAT, @NTU_POSTFLAT, null, null, null, null, 0, @bNeedCommunicationUpdate output
		-- 
		DECLARE @PrivatePerson int;
		DECLARE @NewMainTourist int;
		DECLARE @HaveMainMan int, @MainManSex int;
		DECLARE @Name varchar(35),
			@FName varchar(15),
			@SName varchar(15),
			@Phone varchar(60),
			@Email varchar(50),
			@PostIndex varchar(8),
			@PostCity varchar(60),
			@PostStreet varchar(25),
			@PostBuilding varchar(10),
			@PostFlat varchar(4),
			@PassportSeries varchar(10),
			@PassportNumber varchar(10);		
		IF (@sMod = 'UPD')
		BEGIN
			IF ISNULL(@OTU_ISMAIN, 0) != ISNULL(@NTU_ISMAIN, 0)
				BEGIN
					IF(ISNULL(@NTU_ISMAIN,0) >= 1)
						BEGIN
							UPDATE [dbo].[TBL_TURIST]
							SET TU_ISMAIN = 0
							WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @NTU_DGCod;
						
							UPDATE [dbo].[TBL_TURIST]
							SET TU_ISMAIN = 1
							WHERE TU_KEY = @TU_Key
						 
							EXEC @PrivatePerson = dbo.CheckPrivatePerson @NTU_DGCOD;
							IF(@PrivatePerson = 1)
								BEGIN
									EXEC [dbo].[UpdateReservationMainManByTourist] @NTU_NAMERUS, @NTU_FNAMERUS, @NTU_SNAMERUS, @NTU_PHONE, @NTU_EMAIL
																				 , @NTU_POSTINDEX, @NTU_POSTCITY, @NTU_POSTSTREET
																				 , @NTU_POSTBILD, @NTU_POSTFLAT, @NTU_PASPRUSER
																				 , @NTU_PASPRUNUM, @NTU_DGCOD;
								END
						END
					ELSE
						BEGIN
							SELECT @HaveMainMan = TU_KEY, @MainManSex = TU_SEX
								FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
								WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @NTU_DGCOD AND TU_ISMAIN = 1
							IF @HaveMainMan IS NULL
								BEGIN
									SELECT @NewMainTourist = TU_KEY 
									FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
									WHERE TU_KEY <> @TU_Key AND TU_SEX < 2 AND TU_DGCOD = @NTU_DGCOD;
									IF(@NewMainTourist IS NULL)
										BEGIN
											SELECT @NewMainTourist = TU_KEY 
											FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
											WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @NTU_DGCOD;
										END
									IF(@NewMainTourist IS NOT NULL)
										BEGIN
											UPDATE [dbo].[TBL_TURIST]
											SET TU_ISMAIN = 0
											WHERE TU_KEY <> @NewMainTourist AND TU_DGCOD = @NTU_DGCod;
									
											UPDATE [dbo].[TBL_TURIST]
											SET TU_ISMAIN = 1
											WHERE TU_KEY = @NewMainTourist;
										
											EXEC @PrivatePerson = dbo.CheckPrivatePerson @OTU_DGCOD;
											IF(@PrivatePerson = 1)
											BEGIN
												SELECT @Name = TU_NAMERUS, @FName = TU_FNAMERUS, @SName = TU_SNAMERUS, @Phone = TU_PHONE, @Email=TU_EMAIL
												, @PostIndex = TU_POSTINDEX, @PostCity = TU_POSTCITY, @PostStreet = TU_POSTSTREET
												, @PostBuilding = TU_POSTBILD, @PostFlat = TU_POSTFLAT, @PassportSeries = TU_PASPRUSER
												, @PassportNumber = TU_PASPRUNUM
												FROM [dbo].[tbl_turist]
												WHERE TU_KEY = @NewMainTourist;
												EXEC [dbo].[UpdateReservationMainManByTourist] @Name, @FName, @SName, @Phone, @Email
																					 , @PostIndex, @PostCity, @PostStreet
																					 , @PostBuilding, @PostFlat, @PassportSeries
																					 , @PassportNumber, @OTU_DGCOD;
											END
										END
								END	
						END
				END	
			ELSE IF ISNULL(@OTU_ISMAIN, 0) = ISNULL(@NTU_ISMAIN, 0) 
					AND  ISNULL(@NTU_ISMAIN, 0) >= 1					
					AND (ISNULL(@OTU_NameRus, '') != ISNULL(@NTU_NameRus, '') 
						OR ISNULL(@OTU_FNameRus, '') != ISNULL(@NTU_FNameRus, '')
						OR ISNULL(@OTU_SNameRus, '') != ISNULL(@NTU_SNameRus, '')
						OR ISNULL(@OTU_PHONE, '') != ISNULL(@NTU_PHONE, '')
						OR ISNULL(@OTU_EMAIL, '') != ISNULL(@NTU_EMAIL, '')
						OR ISNULL(@OTU_POSTINDEX, '') != ISNULL(@NTU_POSTINDEX, '')
						OR ISNULL(@OTU_POSTCITY, '') != ISNULL(@NTU_POSTCITY, '')
						OR ISNULL(@OTU_POSTSTREET, '') != ISNULL(@NTU_POSTSTREET, '')
						OR ISNULL(@OTU_POSTBILD, '') != ISNULL(@NTU_POSTBILD, '')
						OR ISNULL(@OTU_POSTFLAT, '') != ISNULL(@NTU_POSTFLAT, '')
						OR ISNULL(@OTU_PASPRUSER, '') != ISNULL(@NTU_PASPRUSER, '')
						OR ISNULL(@OTU_PASPRUNUM, '') != ISNULL(@NTU_PASPRUNUM, '')
						OR ISNULL(@OTU_DGCOD, '') != ISNULL(@NTU_DGCOD, ''))	
				BEGIN
					SELECT @HaveMainMan = TU_KEY, @MainManSex = TU_SEX
							FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
							WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @NTU_DGCOD AND TU_ISMAIN = 1
					IF 	@HaveMainMan IS NULL 
						BEGIN
							EXEC @PrivatePerson = dbo.CheckPrivatePerson @NTU_DGCOD;
							IF(@PrivatePerson = 1)
								BEGIN									
									EXEC [dbo].[UpdateReservationMainManByTourist] @NTU_NAMERUS, @NTU_FNAMERUS, @NTU_SNAMERUS, @NTU_PHONE, @NTU_EMAIL
																			 , @NTU_POSTINDEX, @NTU_POSTCITY, @NTU_POSTSTREET
																			 , @NTU_POSTBILD, @NTU_POSTFLAT, @NTU_PASPRUSER
																			 , @NTU_PASPRUNUM, @NTU_DGCOD;
								END
						END		
				END
		END
		ELSE IF (@sMod = 'DEL')
		BEGIN
			DECLARE @MainTouristExists int;
			SELECT @MainTouristExists = TU_KEY 
			  FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
			 WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @OTU_DGCOD AND TU_ISMAIN = 1;
		
			IF @MainTouristExists IS NULL
				BEGIN
					SELECT @NewMainTourist = TU_KEY 
					  FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
					 WHERE TU_KEY <> @TU_Key AND TU_SEX < 2 AND TU_DGCOD = @OTU_DGCOD;
					IF(@NewMainTourist IS NULL)
					BEGIN
						SELECT @NewMainTourist = TU_KEY 
						  FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
						 WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @OTU_DGCOD;
					END
					IF(@NewMainTourist IS NOT NULL)
					BEGIN
						UPDATE [dbo].[TBL_TURIST]
						   SET TU_ISMAIN = 1
						 WHERE TU_KEY = @NewMainTourist;
							EXEC @PrivatePerson = dbo.CheckPrivatePerson @OTU_DGCOD;
							IF(@PrivatePerson = 1)
							BEGIN
								SELECT @Name = TU_NAMERUS, @FName = TU_FNAMERUS, @SName = TU_SNAMERUS, @Phone = TU_PHONE, @Email=TU_EMAIL
									 , @PostIndex = TU_POSTINDEX, @PostCity = TU_POSTCITY, @PostStreet = TU_POSTSTREET
									 , @PostBuilding = TU_POSTBILD, @PostFlat = TU_POSTFLAT, @PassportSeries = TU_PASPRUSER
									 , @PassportNumber = TU_PASPRUNUM
								  FROM [dbo].[tbl_turist]
								 WHERE TU_KEY = @NewMainTourist;
								EXEC [dbo].[UpdateReservationMainManByTourist] @Name, @FName, @SName, @Phone, @Email
																			 , @PostIndex, @PostCity, @PostStreet
																			 , @PostBuilding, @PostFlat, @PassportSeries
																			 , @PassportNumber, @OTU_DGCOD;
							END
							ELSE
							BEGIN
								EXEC [dbo].[UpdateReservationMainMan] '','','','','',@OTU_DGCOD;
							END
						END
				END	
			END	
		ELSE IF(@sMod = 'INS')
		BEGIN
			SELECT @HaveMainMan = TU_KEY, @MainManSex = TU_SEX
			  FROM [dbo].[TBL_TURIST] WITH(NOLOCK)
			 WHERE TU_KEY <> @TU_Key AND TU_DGCOD = @NTU_DGCOD AND TU_ISMAIN = 1
			IF(@HaveMainMan IS NULL OR ((ISNULL(@MainManSex,0) >= 2) AND ISNULL(@NTU_SEX,99) < 2 AND ISNULL(@NTU_ISMAIN,0) = 1))
			BEGIN
				IF(@HaveMainMan IS NULL)
				BEGIN
					UPDATE [dbo].[TBL_TURIST]
					   SET TU_ISMAIN = 1
					 WHERE TU_KEY = @TU_Key;
				END
				ELSE
				BEGIN
					UPDATE [dbo].[TBL_TURIST]
					   SET TU_ISMAIN = 0
					 WHERE TU_KEY = @HaveMainMan;
				END				
					EXEC @PrivatePerson = dbo.CheckPrivatePerson @NTU_DGCOD;
					IF(@PrivatePerson = 1)
					BEGIN
						EXEC [dbo].[UpdateReservationMainManByTourist] @NTU_NAMERUS, @NTU_FNAMERUS, @NTU_SNAMERUS, @NTU_PHONE, @NTU_EMAIL
																	 , @NTU_POSTINDEX, @NTU_POSTCITY, @NTU_POSTSTREET
																	 , @NTU_POSTBILD, @NTU_POSTFLAT, @NTU_PASPRUSER
																	 , @NTU_PASPRUNUM, @NTU_DGCOD;
					END
				END		
			ELSE IF(@HaveMainMan IS NOT NULL AND ISNULL(@NTU_ISMAIN,0) = 1)
			BEGIN
				UPDATE [dbo].[TBL_TURIST]
				   SET TU_ISMAIN = 0
				 WHERE TU_KEY = @HaveMainMan; 
				
					EXEC @PrivatePerson = dbo.CheckPrivatePerson @NTU_DGCOD;
					IF(@PrivatePerson = 1)
					BEGIN
						EXEC [dbo].[UpdateReservationMainManByTourist] @NTU_NAMERUS, @NTU_FNAMERUS, @NTU_SNAMERUS, @NTU_PHONE, @NTU_EMAIL
																	 , @NTU_POSTINDEX, @NTU_POSTCITY, @NTU_POSTSTREET
																	 , @NTU_POSTBILD, @NTU_POSTFLAT, @NTU_PASPRUSER
																	 , @NTU_PASPRUNUM, @NTU_DGCOD; 
				END
			END
		END
		
		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey

	  ------------------------------------------------------------------------------------------------
	  END
    FETCH NEXT FROM cur_Turist INTO @TU_Key, @sTU_ShortName,
				@OTU_DGCod, @OTU_DGKey, @OTU_NameRus, @OTU_NameLat, @OTU_FNameRus, @OTU_FNameLat,
				@OTU_SNameRus, @OTU_SNameLat, @OTU_BirthDay, @OTU_PasportType, @OTU_PasportNum,	@OTU_PaspRuSer,
				@OTU_PaspRuNum, @OTU_PasportDate, @OTU_PasportDateEnd, @OTU_PasportByWhoM, @OTU_PaspRuDate, @OTU_PaspRuByWhoM, 
				@OTU_Sex, @OTU_RealSex, 
				@OTU_BIRTHCOUNTRY,
				@OTU_BIRTHCITY,
				@OTU_CITIZEN,
				@OTU_POSTINDEX,
				@OTU_POSTCITY,
				@OTU_POSTSTREET,
				@OTU_POSTBILD,
				@OTU_POSTFLAT,
				@OTU_ISMAIN,
				@OTU_PHONE,
				@OTU_EMAIL,
				@NTU_DGCod, @NTU_DGKey, @NTU_NameRus, @NTU_NameLat,	@NTU_FNameRus, @NTU_FNameLat,
				@NTU_SNameRus, @NTU_SNameLat, @NTU_BirthDay, @NTU_PasportType, @NTU_PasportNum,	@NTU_PaspRuSer,
				@NTU_PaspRuNum, @NTU_PasportDate, @NTU_PasportDateEnd, @NTU_PasportByWhoM, @NTU_PaspRuDate, @NTU_PaspRuByWhoM,
				@NTU_Sex, @NTU_RealSex,
				@NTU_BIRTHCOUNTRY,
				@NTU_BIRTHCITY,
				@NTU_CITIZEN,
				@NTU_POSTINDEX,
				@NTU_POSTCITY,
				@NTU_POSTSTREET,
				@NTU_POSTBILD,
				@NTU_POSTFLAT,
				@NTU_ISMAIN,
				@NTU_PHONE,
				@NTU_EMAIL
    END
  CLOSE cur_Turist
  DEALLOCATE cur_Turist
END

GO

/*********************************************************************/
/* end T_TuristUpdate.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_TuristUpdate.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_UpdateHotel.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_UpdateHotel.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[mwUpdateHotel]'))
	DROP TRIGGER [dbo].[mwUpdateHotel]
GO
/*********************************************************************/
/* end T_UpdateHotel.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_UpdateHotel.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_UpdDogListQuota.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin T_UpdDogListQuota.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_UpdDogListQuota]'))
DROP TRIGGER [dbo].[T_UpdDogListQuota]
GO

CREATE TRIGGER [dbo].[T_UpdDogListQuota]
ON [dbo].[tbl_DogovorList] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>9.2.21.0</VERSION>
--<DATE>2014-10-13</DATE>

-- тип триггера (DEL - удаление, INS - вставка, UPD - обновление)
-- если включена настройка то выходим, рассадка теперь работает по другому
IF (EXISTS (SELECT TOP 1 1
		    FROM SystemSettings WITH (NOLOCK)
		    WHERE SS_ParmName = 'NewSetToQuota' AND SS_ParmValue = 1))
BEGIN
	RETURN;
END

DECLARE @DLKey int, @DGKey int, @O_DLSVKey int, @O_DLCode int, @O_DLSubcode1 int, @O_DLDateBeg datetime, @O_DLDateEnd datetime, @O_DLNMen int, @O_DLAgentKey int, @O_DLPartnerKey int, @O_DLControl int, 
		@N_DLSVKey int, @N_DLCode int, @N_DLSubcode1 int, @N_DLDateBeg datetime, @N_DLDateEnd datetime, @N_DLNMen int, @N_DLAgentKey int, @N_DLPartnerKey int, @N_DLControl int,
		@O_DLSubcode2 int, @N_DLSubcode2 int,
		@Date datetime, @RLID int, @RPID int,
		@HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int,
		@RMPlacesMain smallint, @RMPlacesEx smallint,
		@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
		@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
		@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
		@RL_Use smallint, @From int, --@SDPlace smallint, 
		@nDelCount smallint, @nInsCount smallint, @Mod varchar(3), @SetToNewQuota bit,
		@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint,
		@Days smallint, @RPCount smallint, @NeedPlacesForMen smallint, @TUKey int,
		@SVQUOTED smallint

-- количество удаляемых записей
SELECT @nDelCount = COUNT(*)
FROM DELETED
-- количество вставляемых записей
SELECT @nInsCount = COUNT(*)
FROM INSERTED
SET @SetToNewQuota = 0

IF (@nInsCount = 0) -- если нет удаляемых записей, значит есть только вставляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR 
    FOR 
    SELECT O.DL_Key, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_AGENT, O.DL_PartnerKey, 
    		O.DL_Control, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, null, null
    FROM DELETED O
	SET @Mod = 'DEL'
END
ELSE IF (@nDelCount = 0) -- если нет вставляемых записей, есть только удаляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey,
			null, null, null, null, null, null, null, null, null, null,
			N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_AGENT, N.DL_PartnerKey, N.DL_Control
    FROM	INSERTED N 
	SET @Mod = 'INS'
END
ELSE -- если есть и удаляемые и вставляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey, 
		O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_Subcode2, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_AGENT, O.DL_PartnerKey, O.DL_Control,
		N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_Subcode2, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_AGENT, N.DL_PartnerKey, N.DL_Control
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
	SET @Mod = 'UPD'
END

OPEN cur_DogovorListChanged2
FETCH NEXT 
FROM cur_DogovorListChanged2 
INTO @DLKey, @DGKey, @O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLSubcode2, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLAgentKey, @O_DLPartnerKey, @O_DLControl, 
	@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLSubcode2, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLAgentKey, @N_DLPartnerKey, @N_DLControl
WHILE @@FETCH_STATUS = 0
BEGIN
	--18-10-2012 saifullina
	--при удалении услуги в путевке или аннулировании путевки -> удаляем путевку -> высвобождаем квоты
	IF (@N_DLDateBeg < '01-01-1901' AND @O_DLDateBeg >= '01-01-1901')
	BEGIN
		SET @Mod = 'DEL'
	END
	IF (@Mod = 'DEL'
		OR (@Mod = 'UPD' AND (ISNULL(@O_DLSVKey, 0) != ISNULL(@N_DLSVKey, 0))
			OR (ISNULL(@O_DLCode, 0) != ISNULL(@N_DLCode, 0))
			OR (ISNULL(@O_DLSubCode1, 0) != ISNULL(@N_DLSubCode1, 0))
			or (ISNULL(@O_DLSubCode2,0) != ISNULL(@N_DLSubCode2,0) AND ISNULL(@N_DLSVKey,0) not in (1,3)
				and EXISTS(SELECT TOP 1 1 FROM [Service] WITH(NOLOCK) WHERE SV_IsSubCode2=1 AND SV_Quoted=1 AND SV_Key=ISNULL(@N_DLSVKey,0)))
			OR (ISNULL(@O_DLPartnerKey, 0) != ISNULL(@N_DLPartnerKey, 0))
			OR (ISNULL(@O_DLAgentKey, 0) != ISNULL(@N_DLAgentKey, 0))
			OR (ISNULL(@O_DLDateBeg, 0) != ISNULL(@N_DLDateBeg, 0))
			OR (ISNULL(@O_DLDateEnd, 0) != ISNULL(@N_DLDateEnd, 0))))
	BEGIN	
		DELETE
		FROM ServiceByDate
		WHERE SD_DLKey = @DLKey

		SET @SetToNewQuota = 1
	END
		
	SELECT @SVQUOTED = ISNULL(SV_Quoted, 0)
	FROM [Service]
	WHERE SV_KEY = @N_DLSVKey

	EXEC InsMasterEvent 3, @DLKey

	IF ((@O_DLSVKey IN (3, 7)
	    AND (@N_DLCode != @O_DLCode
	        OR @N_DLSubCode1 != @O_DLSubCode1
	        OR @O_DLDateBeg != @N_DLDateBeg
	        OR @O_DLDateEnd != @N_DLDateEnd))
		OR (@O_DLSVKey IN (1, 2, 4) 
		    AND @O_DLDateBeg != @N_DLDateBeg))
	BEGIN
		UPDATE TuristService
		SET TU_NUMROOM = ''
		WHERE TU_DLKEY = @DLKey
	END

	IF (@N_DLDateBeg < '01-JAN-1901' AND @O_DLDateBeg >= '01-JAN-1901')
	BEGIN
		SET @Mod = 'DEL'
	END

	IF (@N_DLDateBeg > '01-JAN-1901' AND @O_DLDateBeg <= '01-JAN-1901')
	BEGIN
		SET @SetToNewQuota = 1
	END

	IF (@Mod = 'UPD' AND ISNULL(@O_DLNMen, 0) = 0 AND ISNULL(@N_DLNMen, 0) > 0)
	BEGIN
		SET @Mod = 'INS'
	END
	-- если ВЫКЛЮЧЕНА настройка то запускаем всю эту дребедень, это старая рассадка в квоту
	-- ИЛИ произошла ошибка при посадке новым сервисом, то запускаем старую рассадку и проверку
	if (exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota' AND SS_ParmValue = 0))
	BEGIN
		print 'Старая рассадка'
		--изменился период действия услуги
		IF @Mod = 'UPD' 
			and (
				@SetToNewQuota!=1 
				and (
					(@O_DLDateBeg != @N_DLDateBeg) 
					or (@O_DLDateEnd != @N_DLDateEnd)
					)
				)
		BEGIN
			IF (@N_DLDateBeg > @O_DLDateEnd OR @N_DLDateEnd < @O_DLDateBeg)
			BEGIN
				DELETE
				FROM ServiceByDate
				WHERE SD_DLKey = @DLKey
				SET @SetToNewQuota=1
			END
			-- для услуг имеющих продолжительность сохраняем информацию о квотировании в рамках периода
			ELSE
			BEGIN
				--если теперь услуга заканчивается раньше, чем до этого начиналась
				IF (@N_DLDateBeg < @O_DLDateBeg)
				BEGIN
					IF (@N_DLDateEnd < @O_DLDateBeg)
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @N_DLDateEnd) + 1
					END
					ELSE
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @O_DLDateBeg)
					END
						
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,NU_ID-1,@N_DLDateBeg), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3 
					FROM ServiceByDate, Numbers
					WHERE (NU_ID BETWEEN 1 AND @Days) AND SD_Date = @O_DLDateBeg AND SD_DLKey = @DLKey
				END
				
				--если теперь услуга начинается позже, чем до этого заканчивалась
				IF (@N_DLDateEnd > @O_DLDateEnd)
				BEGIN
					IF (@N_DLDateBeg > @O_DLDateEnd)
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @N_DLDateEnd) + 1
					END
					ELSE
					BEGIN
						SET @Days = DATEDIFF(DAY, @O_DLDateEnd, @N_DLDateEnd)
					END
						
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY, - NU_ID + 1, @N_DLDateEnd), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3
					FROM ServiceByDate, Numbers
					WHERE (NU_ID BETWEEN 1 AND @Days) AND SD_Date = @O_DLDateEnd AND SD_DLKey = @DLKey
				END
				
				
				IF (@N_DLDateBeg > @O_DLDateBeg)
				BEGIN
					DELETE
					FROM ServiceByDate
					WHERE SD_DLKey = @DLKey AND SD_Date < @N_DLDateBeg
				END
				IF (@N_DLDateEnd < @O_DLDateEnd)
				BEGIN
					DELETE
					FROM ServiceByDate
					WHERE SD_DLKey = @DLKey AND SD_Date > @N_DLDateEnd
				END
			END
			
			-- если эта услуга на продолжительность
			-- и если услуга сидела на квоте с продолжительностью
			IF (EXISTS (SELECT 1
			            FROM [Service]
			            WHERE SV_KEY = @N_DLSVKey AND ISNULL(SV_ISDURATION, 0) = 1)
			    AND EXISTS (
			        SELECT 1
			        FROM ServiceByDate
			        WHERE SD_DLKey = @DLKey
			        AND EXISTS (
			            SELECT 1
			            FROM QuotaParts
			            WHERE QP_ID = SD_QPID AND QP_Durations IS NOT NULL)))
			BEGIN
				-- пересаживаем всю услугу
				EXEC DogListToQuotas @DLKey, NULL, NULL, NULL, NULL, @N_DLDateBeg, @N_DLDateEnd, NULL, NULL, @OldSetToQuota = 1
			END
		END
		SET @NeedPlacesForMen=0
		SET @From = CAST(@N_DLDateBeg as int)		
		-- если изменилось количество человек		
		IF @Mod = 'UPD' AND (@SetToNewQuota != 1 AND ISNULL(@O_DLNMen, 0) != ISNULL(@N_DLNMen, 0))
		BEGIN
		
			select *, 0 as xSD_STATE
			into #ServiceByDate
			from ServiceByDate
			where SD_DLKey = @DLKey
			
			SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

			-- если новое число туристов меньше, чем было до этого (@O_DLNMen > @N_DLNMen)
			if ISNULL(@O_DLNMen,0) > ISNULL(@N_DLNMen,0)
			BEGIN
				while (SELECT count(1) FROM #ServiceByDate WHERE SD_DLKey=@DLKey AND SD_Date=@N_DLDateBeg) > ISNULL(@N_DLNMen,0)
				BEGIN
					if (@N_DLSVKey = 3 or @N_DLSVKey=8) --для проживания отдельная ветка
					BEGIN					
						SELECT TOP 1 @RLID = SD_RLID, @RPCount = count(SD_ID) FROM #ServiceByDate WHERE SD_DLKey = @DLKey AND SD_TUKey is null AND SD_Date = @N_DLDateBeg
						GROUP BY SD_RLID
						ORDER BY 2
						
						SELECT TOP 1 @RPID = SD_RPID FROM #ServiceByDate WHERE SD_DLKey = @DLKey AND ISNULL(SD_RLID, 0) = ISNULL(@RLID, 0) AND SD_TUKey is null
						DELETE FROM #ServiceByDate WHERE SD_DLKey = @DLKey AND ISNULL(SD_RLID, 0) = ISNULL(@RLID, 0) AND ISNULL(SD_RPID,0) = ISNULL(@RPID,0) AND SD_TUKey is null
					END
					ELSE
					BEGIN
						--обязательно!!! NULL туриста вперед 
						SELECT TOP 1 @RPID = SD_RPID FROM #ServiceByDate WHERE SD_DLKey = @DLKey order by SD_TUKey
						DELETE FROM #ServiceByDate WHERE SD_DLKey = @DLKey AND ISNULL(SD_RPID,0) = ISNULL(@RPID,0)
					END
				END
				
				delete from ServiceByDate where SD_DLKey = @DLKey AND SD_ID not in (select x.SD_ID from #ServiceByDate as x)
			END
			-- если новое число туристов больше, чем было до этого (@O_DLNMen < @N_DLNMen)
			ELSE
			BEGIN
				if (@N_DLSVKey=3 or @N_DLSVKey=8) --для проживания отдельная ветка
				BEGIN
					SELECT @HRIsMain=AC_MAIN, @ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
						FROM AccmdMenType
						WHERE AC_Key=(SELECT HR_ACKey From HotelRooms WHERE HR_Key=@N_DLSubCode1)
					
					SELECT @RMPlacesMain=ISNULL(RM_NPLACES,0), @RMPlacesEx=ISNULL(RM_NPlacesEx,0)
						FROM Rooms
						WHERE RM_KEY=(SELECT HR_RMKey From HotelRooms WHERE HR_KEY=@N_DLSubcode1)
					
					IF @HRIsMain = 1 AND @ACPlacesMain = 0 AND @ACPlacesEx = 0
						set @ACPlacesMain = 1
					ELSE IF @HRIsMain = 0 AND @ACPlacesMain = 0 AND @ACPlacesEx = 0
						set @ACPlacesEx = 1
					
					if (@ACPerRoom = 1)
					begin
						SET @AC_FreeMainPlacesCount = @ACPlacesMain
						SET @AC_FreeExPlacesCount = @ACPlacesEx
					end
					else
					begin
						SET @AC_FreeMainPlacesCount = @RMPlacesMain
						SET @AC_FreeExPlacesCount = @RMPlacesEx
					end
					
					--есть 3 варианта размещения: только основные, только дополнительные, основные и дополнительные
					--в первых 2-х вариантах сначала занимаем свободные уже существующие места данного типа в номерах этой услуги, в последнем занимаем все свободные места
					if @ACPlacesMain>0
						WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces (nolock) where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0))
						BEGIN
							select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces (nolock) where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0
							INSERT INTO #ServiceByDate (xSD_STATE, SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
								SELECT 1, CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
								FROM NUMBERS as N1 WHERE N1.NU_ID between 1 AND CAST(@N_DLDateEnd as int)-@From+1
							SET @NeedPlacesForMen=@NeedPlacesForMen-1
						END
					if @ACPlacesEx>0
						WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces (nolock) where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1))
						BEGIN
							select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces (nolock) where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1
							INSERT INTO #ServiceByDate (xSD_STATE, SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
								SELECT 1, CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
								FROM NUMBERS as N1 WHERE N1.NU_ID between 1 AND CAST(@N_DLDateEnd as int)-@From+1
							SET @NeedPlacesForMen=@NeedPlacesForMen-1
						END
				END
				
				insert into ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_QPID, SD_TUKey, SD_RPID, SD_State)
					select x.SD_Date, x.SD_DLKey, x.SD_RLID, x.SD_QPID, x.SD_TUKey, x.SD_RPID, x.SD_State
					from #ServiceByDate as x
					where x.xSD_STATE = 1
			END
			
			drop table #ServiceByDate
		END
		
		IF @Mod = 'INS'
			OR (@Mod = 'UPD' AND @SetToNewQuota = 1)
			OR @NeedPlacesForMen > 0
		BEGIN
			-- для проживания отдельная ветка
			IF (@N_DLSVKey = 3 OR @N_DLSVKey = 8)
			BEGIN
				
				If @NeedPlacesForMen > 0
				BEGIN
					SELECT TOP 1 @RLPlacesMain = RL_NPlaces, @RLPlacesEx = RL_NPlacesEx, @RMKey = RL_RMKey, @RCKey = RL_RCKey
						FROM RoomNumberLists, ServiceByDate
						WHERE RL_ID = SD_RLID
						AND SD_DLKey = @DLKey
				END
				ELSE
				BEGIN
					IF (@N_DLSVKey = 3 OR (@N_DLSVKey = 8 AND @N_DLSubcode1 is not null AND @N_DLSubcode1!=0))
					BEGIN
						SELECT @HRIsMain = HR_MAIN, @RMKey = HR_RMKEY, @RCKey = HR_RCKEY, @ACKey = HR_ACKEY, @RMPlacesMain = RM_NPlaces, 
						@RMPlacesEx = RM_NPlacesEx, @ACPlacesMain = ISNULL(AC_NRealPlaces, 0), @ACPlacesEx = ISNULL(AC_NMenExBed, 0), 
						@ACPerRoom = ISNULL(AC_PerRoom, 0)
						FROM HotelRooms, Rooms, AccmdMenType
						WHERE HR_Key = @N_DLSubcode1
							AND RM_Key = HR_RMKEY
							AND AC_KEY = HR_ACKEY
					END
					ELSE
					BEGIN
						SELECT @HRIsMain = HR_MAIN, @RMKey = HR_RMKEY, @RCKey = HR_RCKEY, @ACKey = HR_ACKEY, @RMPlacesMain = RM_NPlaces, 
						@RMPlacesEx = RM_NPlacesEx, @ACPlacesMain = ISNULL(AC_NRealPlaces, 0), @ACPlacesEx = ISNULL(AC_NMenExBed, 0), 
						@ACPerRoom = ISNULL(AC_PerRoom, 0)
						FROM HotelRooms, Rooms, AccmdMenType
						WHERE HR_Key = (select top 1 DL_SUBCODE1 from Dogovorlist (nolock) dl1
										where DL_SVKEY=3
										and DL_DGCOD=(select top 1 DL_DGCOD from Dogovorlist (nolock) dl2
														where DL_KEY=@DLKey and DL1.DL_CODE=DL2.DL_CODE))
							AND RM_Key = HR_RMKEY
							AND AC_KEY = HR_ACKEY
					END
					
					IF @ACPerRoom = 1
						OR (
							ISNULL(@RMPlacesMain, 0) = 0
							AND ISNULL(@RMPlacesEx, 0) = 0
							)
					BEGIN
						SET @RLPlacesMain = @ACPlacesMain
						SET @RLPlacesEx = ISNULL(@ACPlacesEx,0)
					END
					ELSE
					BEGIN
						IF @HRIsMain = 1
							AND @ACPlacesMain = 0
							AND @ACPlacesEx = 0
						BEGIN
							SET @ACPlacesMain = 1
						END
						ELSE IF @HRIsMain = 0
							AND @ACPlacesMain = 0
							AND @ACPlacesEx = 0
						BEGIN
							SET @ACPlacesEx = 1
						END
						
						SET @RLPlacesMain = @RMPlacesMain
						SET @RLPlacesEx = ISNULL(@RMPlacesEx, 0)
					END
					
					-- если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
					IF @Mod = 'UPD'
						AND @SetToNewQuota = 1
					BEGIN
						SET @NeedPlacesForMen = ISNULL(@N_DLNMen, 0)
					END
					ELSE
					BEGIN
						SET @NeedPlacesForMen = ISNULL(@N_DLNMen, 0) - ISNULL(@O_DLNMen, 0)
					END
				END
				
				SET @RLID = 0
				SET @AC_FreeMainPlacesCount = 0
				SET @AC_FreeExPlacesCount = 0
				SET @RL_FreeMainPlacesCount = 0
				SET @RL_FreeExPlacesCount = 0
				
				-- пока не распределили всех человек
				WHILE (@NeedPlacesForMen > 0)
				BEGIN
					-- 
					--IF (EXISTS(SELECT TOP 1 1 FROM HotelRooms WHERE HR_MAIN=1 AND HR_KEY=@N_DLSubcode1)
					--	AND ISNULL(@AC_FreeMainPlacesCount,0)=0)
					--BEGIN
					--		SET @AC_FreeExPlacesCount = 0
					--END
					
					--если в последнем номере кончились места, то выставляем признак @RLID = 0
					IF (ISNULL(@AC_FreeMainPlacesCount,0) = 0)
						AND ISNULL(@AC_FreeExPlacesCount,0) = 0
					BEGIN
						SELECT @ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
							FROM AccmdMenType WHERE AC_Key=(SELECT HR_ACKey From HotelRooms WHERE HR_Key=@N_DLSubCode1)
						
						SELECT @RMPlacesMain=ISNULL(RM_NPLACES,0), @RMPlacesEx=ISNULL(RM_NPlacesEx,0)
							FROM Rooms WHERE RM_KEY=(SELECT HR_RMKey From HotelRooms WHERE HR_KEY=@N_DLSubcode1)
						
						if (@ACPerRoom = 1)
						begin
							SET @AC_FreeMainPlacesCount = @ACPlacesMain
							SET @AC_FreeExPlacesCount = @ACPlacesEx
						end
						else
						begin
							SET @AC_FreeMainPlacesCount = @RMPlacesMain
							SET @AC_FreeExPlacesCount = @RMPlacesEx
							
							IF (EXISTS(SELECT TOP 1 1 FROM HotelRooms WITH(NOLOCK) WHERE HR_KEY=@N_DLSubcode1 AND HR_MAIN=0))
							BEGIN
								DECLARE @SDRLID INT, @DGCode VARCHAR(50), @MainPlacesBusy INT, @ExPlacesBusy INT
								
								SET @SDRLID = NULL
								
								SELECT @DGCode=DL_DGCod FROM Dogovorlist WITH(NOLOCK) WHERE DL_KEY=@DLKey
								
								--считаем, что доп.услуга сидит в одной комнате с основным местом
								SELECT TOP 1 @SDRLID=SD_RLID FROM ServiceByDate WITH(NOLOCK) WHERE SD_DLKEY=@DLKey
								
								SELECT TOP 1 @SDRLID=SD_RLID FROM Dogovorlist DL1 WITH(NOLOCK)
									INNER JOIN ServiceByDate WITH(NOLOCK) ON DL1.dl_key=SD_DLKey
									INNER JOIN HotelRooms WITH(NOLOCK) ON HR_KEY=Dl1.DL_SUBCODE1
									INNER JOIN RoomPlaces WITH(NOLOCK) ON RP_ID=SD_RPID
									WHERE DL1.DL_CODE=@N_DLCode
									AND DL1.DL_SUBCODE2=@N_DLSubcode2
									AND HR_MAIN=1
									AND RP_Type=0
									AND exists(select top 1 1 FROM Dogovorlist DL2 WITH(NOLOCK)
												WHERE DL2.DL_KEY=@DLKey AND DL2.DL_DGCOD=DL1.DL_DGCOD)
								
								IF @SDRLID IS NOT NULL
								BEGIN
									SELECT @MainPlacesBusy=COUNT(*) FROM Dogovorlist WITH(NOLOCK)
										INNER JOIN ServiceByDate WITH(NOLOCK) ON SD_DLKey=DL_Key
										INNER JOIN QuotaParts WITH(NOLOCK) ON QP_ID=SD_QPID
										INNER JOIN QuotaDetails WITH(NOLOCK) ON QP_QDID=QD_ID
										INNER JOIN Quotas WITH(NOLOCK) ON QD_QTID=QT_ID
										INNER JOIN HotelRooms WITH(NOLOCK) ON HR_Key=DL_SUBCODE1
										INNER JOIN RoomPlaces WITH(NOLOCK) ON RP_ID=SD_RPID
										WHERE DL_CODE=@N_DLCode
										AND RTRIM(DL_DGCOD)=RTRIM(@DGCode)
										AND SD_RLID=@SDRLID
										AND QT_ByRoom=1
										AND HR_MAIN=1
										AND HR_RMKEY=@RMKEY
										AND RP_Type=0
									
									SELECT @ExPlacesBusy=COUNT(*) FROM Dogovorlist WITH(NOLOCK)
										INNER JOIN ServiceByDate WITH(NOLOCK) ON SD_DLKey=DL_Key
										INNER JOIN QuotaParts WITH(NOLOCK) ON QP_ID=SD_QPID
										INNER JOIN QuotaDetails WITH(NOLOCK) ON QP_QDID=QD_ID
										INNER JOIN Quotas WITH(NOLOCK) ON QD_QTID=QT_ID
										INNER JOIN HotelRooms WITH(NOLOCK) ON HR_Key=DL_SUBCODE1
										INNER JOIN RoomPlaces WITH(NOLOCK) ON RP_ID=SD_RPID
										WHERE DL_CODE=@N_DLCode
										AND RTRIM(DL_DGCOD)=RTRIM(@DGCode)
										AND SD_RLID=@SDRLID
										AND QT_ByRoom=1
										AND HR_MAIN=0
										AND HR_RMKEY=@RMKEY
										AND RP_Type=1
									
									SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - @MainPlacesBusy
									SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - @ExPlacesBusy
								END
							END
						end
						
						--создаем новый номер, всегда когда есть хоть кто-то на основном месте ???
						IF (@AC_FreeMainPlacesCount > @RL_FreeMainPlacesCount)
							OR (@AC_FreeExPlacesCount > @RL_FreeExPlacesCount)
						BEGIN
							--создаем новый номер для каждой услуги, если размещение на номер.
							IF @ACPerRoom>0
							BEGIN
								INSERT INTO RoomNumberLists (RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey)
									VALUES (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
								
								SET @RLID = SCOPE_IDENTITY()
								
								INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE 
										WHEN NU_ID > @RLPlacesMain
											THEN 1
										ELSE 0
										END
								FROM NUMBERS
								WHERE NU_ID BETWEEN 1
										AND (@RLPlacesMain + @RLPlacesEx)
								set @RPID=SCOPE_IDENTITY()-@RLPlacesMain-@RLPlacesEx+1
								
								SET @RL_FreeMainPlacesCount = @RLPlacesMain
								SET @RL_FreeExPlacesCount = @RLPlacesEx
							END
							ELSE
							BEGIN
								-- ищем к кому подселиться в данной путевке, если не находим, то прийдется создавать новый номер
								set @RPID = null
								
								IF NOT EXISTS(SELECT TOP 1 1 FROM HotelRooms(NOLOCK)
											WHERE HR_KEY=@N_DLSubcode1
											AND HR_MAIN=1)
								BEGIN
									SELECT TOP 1 @RPID = RP_ID, @RLID = RP_RLID
									FROM RoomPlaces(NOLOCK)
									WHERE RP_Type = CASE 
											WHEN @ACPlacesMain > 0
												THEN 0
											ELSE 1
											END
										AND RP_RLID IN (
											SELECT SD_RLID
											FROM ServiceByDate(NOLOCK), DogovorList(NOLOCK), RoomNumberLists(NOLOCK)
											WHERE SD_DLKey = DL_Key
												AND DL_DGKey = @DGKey
												AND RL_ID = SD_RLID
												AND DL_SVKey = @N_DLSVKey
												AND DL_Code = @N_DLCode
												AND DL_DateBeg = @N_DLDateBeg
												AND DL_DateEnd = @N_DLDateEnd
												AND RL_RMKey = @RMKey
												AND RL_RCKey = @RCKey
											)
										AND NOT EXISTS (
											SELECT SD_RPID
											FROM ServiceByDate(NOLOCK)
											WHERE SD_RLID = RP_RLID
												AND SD_RPID = RP_ID
											)
									ORDER BY RP_RLID DESC,RP_ID ASC
								END
								
								-- надо создавать новый номер даже для дополнительного размещения
								IF @RPID IS NULL
								BEGIN
									INSERT INTO RoomNumberLists (RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey)
										VALUES (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)

									SET @RLID = SCOPE_IDENTITY()

									INSERT INTO RoomPlaces (RP_RLID, RP_Type)
									SELECT @RLID, CASE 
											WHEN NU_ID > @RLPlacesMain
												THEN 1
											ELSE 0
											END
									FROM NUMBERS
									WHERE NU_ID BETWEEN 1
											AND (@RLPlacesMain + @RLPlacesEx)

									SET @RPID = SCOPE_IDENTITY()
									-- Task 9853 29.11.2012 kolbeshkin: неправильное расселение при бронировании
									-- неправильно вычислять место как последнее созданное минус кол-во основных и доп мест + 1,
									-- лучше взять первое свободное место в комнате с ID = @RLID
									SET @RPID = (
									    SELECT MIN(rp_id)
										FROM RoomPlaces (nolock)
										WHERE RP_RLID = @RLID
										    AND NOT EXISTS (
											    SELECT 1
												FROM ServiceByDate
												WHERE SD_RLID = @RLID
												    AND SD_RPID = RP_ID))
									
									SET @RL_FreeMainPlacesCount = @RLPlacesMain
									SET @RL_FreeExPlacesCount = @RLPlacesEx
								END
							END
						END
					END
					
					-- смотрим есть ли в текущем номере свободные основные места
					IF @AC_FreeMainPlacesCount > 0
					BEGIN
						SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - 1
						SET @RL_FreeMainPlacesCount = @RL_FreeMainPlacesCount - 1
						SET @CurrentPlaceIsEx=0
					END
					--если ОСНОВНЫХ мест в номере уже нет, то может посадим на ДОПОЛНИТЕЛЬНОЕ? 
					ELSE IF @AC_FreeExPlacesCount > 0
					BEGIN
						SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - 1
						SET @RL_FreeExPlacesCount = @RL_FreeExPlacesCount - 1
						SET @CurrentPlaceIsEx=1
					END
					
					SET @TUKey = NULL
					
					SELECT @TUKey = TU_TUKey
					FROM dbo.TuristService
					WHERE TU_DLKey = @DLKey
						AND TU_TUKey NOT IN (
											SELECT SD_TUKey
											FROM ServiceByDate
											WHERE SD_DLKey = @DLKey
							)
					
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_TUKey)
						SELECT CAST((N1.NU_ID + @From - 1) AS DATETIME), @DLKey, @RLID, @RPID, @TUKey
						FROM NUMBERS AS N1
						WHERE N1.NU_ID BETWEEN 1
								AND CAST(@N_DLDateEnd AS INT) - @From + 1
						SET @NeedPlacesForMen=@NeedPlacesForMen-1
						SET @RPID=@RPID+1
				END		
			END
			-- для всех услуг кроме проживания
			ELSE
			BEGIN
				IF @Mod = 'UPD'
					AND @SetToNewQuota = 1
					-- если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
						SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
				ELSE
						SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

				while(@NeedPlacesForMen > 0)
				BEGIN
					set @TUKey=null

					SELECT @TUKey = TU_TUKey
					FROM dbo.TuristService
					WHERE TU_DLKey = @DLKey
						AND TU_TUKey NOT IN (
							SELECT SD_TUKey
							FROM ServiceByDate
							WHERE SD_DLKey = @DLKey
							)
					INSERT INTO RoomPlaces (RP_RLID, RP_Type)
					VALUES (0, 0)
					set @RPID=SCOPE_IDENTITY()				
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RPID, SD_TUKey)	
						SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RPID, @TUKey
					FROM NUMBERS AS N1
					WHERE N1.NU_ID BETWEEN 1
							AND CAST(@N_DLDateEnd AS INT) - @From + 1
					SET @NeedPlacesForMen = @NeedPlacesForMen - 1
				END
			END

			exec dbo.DogListToQuotas @DLKey, @OldSetToQuota = 1
		END
	END
	
	FETCH NEXT 
	FROM cur_DogovorListChanged2 
	INTO @DLKey, @DGKey, @O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLSubCode2, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLAgentKey, @O_DLPartnerKey, 
		@O_DLControl, @N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLSubCode2, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLAgentKey, @N_DLPartnerKey, @N_DLControl
END
CLOSE cur_DogovorListChanged2
DEALLOCATE cur_DogovorListChanged2
GO
/*********************************************************************/
/* end T_UpdDogListQuota.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'T_UpdDogListQuota.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'view_mwFlightDirections.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin view_mwFlightDirections.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='v' and name='mwFlightDirections')
	drop view dbo.mwFlightDirections
go

Create view [dbo].[mwFlightDirections] as
select * from 
(
	select distinct 
		tl_key as fd_trkey
		, tl_cnkey as fd_cnkey
		, ch_citykeyfrom as fd_ctkeyfrom
		, ch_citykeyto as fd_ctkeyto
	from tbl_TurList with(nolock) 
	inner join turservice with(nolock) on (tl_key = ts_trkey and ts_svkey = 1) 
	inner join descriptions with(nolock) 
						on tl_key = ds_pkkey and ds_dtkey = 115 
								and ds_tableid = 37 
								and ds_value like '%1%'
	inner join tbl_Costs with(nolock) on	(cs_svkey = 1 and cs_pkkey = ts_pkkey ) 
	inner join Charter with(nolock) on (cs_svkey = 1 and cs_code = ch_key 
										and ch_citykeyfrom = ts_subcode2 
										and  ch_citykeyto = ts_ctkey)
	where 
		IsNull(cs_dateend, '2100-01-01') >= getdate() 
		and IsNull(cs_checkindateend, '2100-01-01') >=getdate() 
) as T
where exists(select top 1 td_trkey from turdate with(nolock) 
				where td_date >= getdate() and td_trkey = fd_trkey)

go
grant select on dbo.mwFlightDirections to public
go
/*********************************************************************/
/* end view_mwFlightDirections.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'view_mwFlightDirections.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!DisableTriggersOnSubscriber.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin !DisableTriggersOnSubscriber.sql */
/*********************************************************************/
-- ===================== Disable triggers on all tables on subscriber (excluding some special tables)
if dbo.mwReplIsSubscriber() > 0
begin	

	-- do not disable triggers on this tables
	declare @excludedTables table
	(
		tableName varchar(50)
	)

	insert into @excludedTables values ('mwReplTours')
	insert into @excludedTables values ('tp_tours')
	insert into @excludedTables values ('Charter')

	declare @tabName as varchar(max)

	declare tabsCur cursor for
	select name
	from sys.tables
	where name not in (select tableName from @excludedTables)
	order by name

	open tabsCur

	declare @sql varchar(4000)

	fetch next from tabsCur into @tabName
	while @@fetch_status = 0
	begin

		set @sql = 'alter table [@tabName] disable trigger all'
		set @sql = replace(@sql, '@tabName', @tabName)

		exec (@sql)

		fetch next from tabsCur into @tabName

	end

	close tabsCur
	deallocate tabsCur
	
	begin try
		exec (@sql)
	end try
	begin catch
		declare @errMsg as nvarchar(max)
		set @errMsg = 'Не удалось отключить триггеры в таблицах поисковой базы. Пожалуйста, сообщите об этом службе поддержки. Причина: ' + error_message();
		RAISERROR(@errMsg, 1, 1)
	end catch
end

GO
/*********************************************************************/
/* end !DisableTriggersOnSubscriber.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!DisableTriggersOnSubscriber.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!DropForeignKeyConstraintsOnSubscriber.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin !DropForeignKeyConstraintsOnSubscriber.sql */
/*********************************************************************/
-- script drop foreign key constraints on subscriber

-- drop foreign keys
if dbo.mwReplIsSubscriber() > 0 and exists (select top 1 1 from sys.servers where name = 'mt')
	and exists (select top 1 1 from sys.foreign_keys)
begin
	-- drop foreign key constraints
	declare @killSql as varchar(max)
	set @killSql = ''

	set @killSql = 'alter table #table drop constraint #constraint'
	
	declare @table as sysname, @fkName as sysname

	declare constr cursor for
	select parent.name, fk.name
	from sys.foreign_keys fk
	left join sys.tables parent on fk.parent_object_id = parent.object_id
	left join sys.tables child on fk.referenced_object_id = child.object_id

	declare @killSqlConcrete as nvarchar(max)

	open constr
	fetch next from constr into @table, @fkName
	while @@fetch_status = 0
	begin

		set @killSqlConcrete = replace(@killSql, '#table', @table)
		set @killSqlConcrete = replace(@killSqlConcrete, '#constraint', @fkName)

		--print @killSqlConcrete
		exec (@killSqlConcrete)

		fetch next from constr into @table, @fkName

	end

	close constr
	deallocate constr

end

go
/*********************************************************************/
/* end !DropForeignKeyConstraintsOnSubscriber.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!DropForeignKeyConstraintsOnSubscriber.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!ChangeDistributionAgentProfile.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin !ChangeDistributionAgentProfile.sql */
/*********************************************************************/
-- скрипт меняет профиль агента распространителя на 'continue on data consistency errors': устанавливает его 
-- как профиль по умолчанию и уставливает его для всех существующих подписок

-- ========================== 0. CHECK DISTRIBUTOR EXISTS
declare @distTable table
(
	installed int,
	dist_server sysname NULL,
	distribution_db_installed int,
	is_distribution_publisher int,
	has_remote_distribution_publisher int
)
	
insert into @distTable exec sp_get_distributor

if exists (select top 1 1 from @distTable where installed = 1 and distribution_db_installed = 1)
begin
	-- ========================== 1. GET DISTRIBUTION DATABASES
	declare @distributionAgentProfileType as int
	set @distributionAgentProfileType = 3

	declare @type int                                      -- agent type 

	set @type = @distributionAgentProfileType

	set nocount on
	declare @distribution int
				,@db_name sysname
				,@cmd nvarchar(4000)
				,@distbit int

	--
	-- initialize
	--
	select @distbit = 16
			,@distribution = 3
	--
	-- For each distribution database collect meta 
	--
	declare #hCdatabase CURSOR LOCAL FAST_FORWARD FOR
		select name 
		from master.dbo.sysdatabases 
		where category & @distbit <> 0 
			and has_dbaccess(name) = 1
	for read only

	create table #distribution_agents (dbname sysname collate database_default not null, 
		name nvarchar(100) collate database_default not null,  
		status int NOT NULL,
		publisher sysname collate database_default not null, publisher_db sysname collate database_default not null, 
		publication sysname collate database_default null,
		subscriber sysname collate database_default null, subscriber_db sysname collate database_default null, subscription_type int NULL,
		start_time nvarchar(24) collate database_default null, time nvarchar(24) collate database_default null, duration int NULL,
		comments nvarchar(4000) NULL, delivery_time int NULL, 
		delivered_transactions int NULL, delivered_commands int NULL, 
		average_commands int NULL, delivery_rate int NULL, 
		delivery_latency int NULL, error_id INT NULL,
		job_id binary(16) NULL, local_job bit NULL, profile_id int NOT NULL, 
		agent_id int NOT NULL, local_timestamp binary(8) NOT NULL, 
		offload_enabled bit NOT NULL, offload_server sysname collate database_default null,
		subscriber_type tinyint NULL)

	open #hCdatabase
	fetch next from #hCdatabase into @db_name
	while (@@fetch_status <> -1)
	begin     
		-- script the insert command to cache the agent metadata in temp table 
		-- for this distribution database
		select @cmd = 'insert into #distribution_agents exec ' + quotename(@db_name) + '.dbo.sp_MSenum_distribution @show_distdb = 1, @exclude_anonymous = 0' 
	
		-- execute the insert command
		exec (@cmd)
		fetch next from #hCdatabase into @db_name
	end

	close #hCdatabase
	deallocate #hCdatabase

	delete from #distribution_agents where publisher_db <> db_name()

	-- ========================== 2. FIND SKIPERRORS AGENT PROFILE
	declare @skipErrorsAgentProfileFound as bit
	set @skipErrorsAgentProfileFound = 0

	declare @agentProfiles as table 
	(
		id int, name sysname, agentType int, [type] int, decription nvarchar(300), isDefault bit
	)

	insert into @agentProfiles
	exec sp_help_agent_profile @agent_type = 3

	declare @skipErrorsAgentProfileId as int

	declare profilesCursor cursor for
	select id from @agentProfiles

	declare @skipErorrCodes table 
	(
		code int
	)

	insert into @skipErorrCodes values ('2601')
	insert into @skipErorrCodes values ('2627')
	insert into @skipErorrCodes values ('20598')

	open profilesCursor
	fetch next from profilesCursor into @skipErrorsAgentProfileId
	while @@fetch_status = 0
	begin

		declare @agentParameters as table
		(
			profileId int, name sysname, value nvarchar(255)
		)

		insert into @agentParameters
		exec sp_help_agent_parameter @skipErrorsAgentProfileId

		declare @skippedErrors as nvarchar(250)
		select @skippedErrors = value from @agentParameters where name = '-SkipErrors'

		if not exists (select code from @skipErorrCodes where code not in (select item from [dbo].[DelimitedSplit] (@skippedErrors, ':')))
		begin

			set @skipErrorsAgentProfileFound = 1
			break;

		end

		fetch next from profilesCursor into @skipErrorsAgentProfileId

	end

	close profilesCursor
	deallocate profilesCursor

	if @skipErrorsAgentProfileFound = 0
	begin
		raiserror('В списке профилей агента распространителя не найден профиль ''continue on data consistency errors. Обратитесь за помощью в службу поддержки.''', 16, 1)
	end
	else
	begin
		-- ========================== 3. CHANGE DISTRIBUTION AGENT PROFILE FOR EACH AGENT
		declare @agentId as int
	
		declare agentsCursor cursor for
		select agent_id from #distribution_agents

		open agentsCursor
		fetch next from agentsCursor into @agentId
		while @@fetch_status = 0
		begin
		
			exec distribution.dbo.sp_update_agent_profile @agent_type = @distributionAgentProfileType, @agent_id = @agentId, @profile_id = @skipErrorsAgentProfileId
			fetch next from agentsCursor into @agentId

		end

		drop table #distribution_agents
		close agentsCursor
		deallocate agentsCursor

		-- ========================== 4. CHANGE DEFAULT DISTRIBUTION AGENT PROFILE
		exec distribution.dbo.sp_MSupdate_agenttype_default @profile_id = @skipErrorsAgentProfileId
	end
end

go
/*********************************************************************/
/* end !ChangeDistributionAgentProfile.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), '!ChangeDistributionAgentProfile.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'TruncateExcessTablesOnSubscriber.sql начат', 'SCRIPTTIMELINE', HOST_NAME())
/*********************************************************************/
/* begin TruncateExcessTablesOnSubscriber.sql */
/*********************************************************************/
-- скрипт удаляет все лишние таблицы на базе-подписчике в случае репликации
-- и лишние статьи репликации
-- скрипт необходимо выполнять при удалённых подписках

declare @wasError as bit
declare @errorMessage as nvarchar(max)

if dbo.mwReplIsPublisher() > 0
begin
	if exists (select top 1 1 from sys.databases where name = 'distribution')
	begin
		if exists (select * from distribution.dbo.mspublications
								where publication = 'MW_PUB'
									and publisher_db = db_name())
		begin
			declare @dropSql as nvarchar(max)

			-- drop excess articles from replication
			declare @droppedArticles as table (name sysname)
			insert into @droppedArticles values ('Aircraft')
			insert into @droppedArticles values ('AirService')
			insert into @droppedArticles values ('AllHotelOption')
			insert into @droppedArticles values ('CategoriesOfHotel')
			insert into @droppedArticles values ('CostsInsertNumber')
			insert into @droppedArticles values ('DescTypes')
			insert into @droppedArticles values ('DUP_USER')
			insert into @droppedArticles values ('tbl_Partners')
			insert into @droppedArticles values ('HotelOption')
			insert into @droppedArticles values ('HotelTypeRelations')
			insert into @droppedArticles values ('HotelTypes')
			insert into @droppedArticles values ('ObjectGroupLinks')
			insert into @droppedArticles values ('ObjectGroupMembers')
			insert into @droppedArticles values ('ObjectGroups')
			insert into @droppedArticles values ('ObjectTypes')
			insert into @droppedArticles values ('PrtBonusDetails')
			insert into @droppedArticles values ('PrtBonuses')
			insert into @droppedArticles values ('PrtDogs')
			insert into @droppedArticles values ('PrtGroups')
			insert into @droppedArticles values ('PrtWarns')
			insert into @droppedArticles values ('PrtTypes')
			insert into @droppedArticles values ('PrtTypesToPartners')
			insert into @droppedArticles values ('PrtWarns')
			insert into @droppedArticles values ('ServiceByDate')

			declare @dropSqlConcrete as nvarchar(max)
			set @dropSql = '
				if exists (select * 
							from distribution.dbo.msarticles
							where publisher_db = db_name()
								and source_object = ''@droppedArticle''
								and publication_id = (select top 1 publication_id from distribution.dbo.mspublications
														where publication = ''MW_PUB'' and publisher_db = db_name())
						)
				begin
					exec sp_droparticle @publication = ''MW_PUB'', @article = N''@droppedArticle''
				end
			'

			declare dropArtCursor cursor for
			select name from @droppedArticles

			declare @droppedArticle as sysname

			open dropArtCursor
			fetch next from dropArtCursor into @droppedArticle
			set @wasError = 0

			while @@FETCH_STATUS = 0
			begin

				set @dropSqlConcrete = replace(@dropSql, '@droppedArticle', @droppedArticle)

				begin try
					exec (@dropSqlConcrete)
				end try
				begin catch
					set @wasError = 1
					set @errorMessage = ERROR_MESSAGE()
				end catch

				if @wasError = 1
					break

				fetch next from dropArtCursor into @droppedArticle

			end

			close dropArtCursor
			deallocate dropArtCursor

			if @wasError = 1
			begin
				raiserror(@errorMessage, 16, 1)
			end
		end
	end
end

if dbo.mwreplissubscriber() > 0
begin
	declare @publisher_db as sysname
	select @publisher_db = replace(replace(dbo.mwReplPublisherDb(), '[', ''), ']', '')

	declare @pubDbExists as bit
	declare @pubDbExistsScript as nvarchar(max)

	set @pubDbExistsScript = 'if not exists (select top 1 1
					from mt.distribution.dbo.MSpublications 
					where publisher_db = ''@publisher_db'' collate Cyrillic_General_CI_AS
						and publication = ''MW_PUB'' collate Cyrillic_General_CI_AS)
						set @pubDbExists = 0
					else set @pubDbExists = 1'

	set @pubDbExistsScript = replace(@pubDbExistsScript, '@publisher_db', @publisher_db)
	exec sp_executesql @pubDbExistsScript, N'@pubDbExists as bit output', @pubDbExists output


	if @pubDbExists = 0
	begin
		set @errorMessage = 'Внимание! В настройках SystemSettings указана база данных публикации: ' + @publisher_db + 
		'Данная база данных не найдена на публикаторе, работа невозможна. Пожалуйста, обратитесь к системному администратору!'

		raiserror (@errorMessage, 16, 1)
	end
	else
	begin

		declare @excludedTables as table
		(
			tableName sysname
		)

		insert into @excludedTables values ('CharterDeleteQueue')
		insert into @excludedTables values ('mwReplDeletedPricesTemp')
		insert into @excludedTables values ('mwDeleted')
		insert into @excludedTables values ('mwHotelDetails')
		insert into @excludedTables values ('mwPriceDataTable%')
		insert into @excludedTables values ('mwPriceDurations')
		insert into @excludedTables values ('mwPriceHotels')
		insert into @excludedTables values ('mwPriceTablesList')
		insert into @excludedTables values ('mwReplDirections')
		insert into @excludedTables values ('mwReplQueue')
		insert into @excludedTables values ('mwReplQueueHistory')
		insert into @excludedTables values ('mwSpoDataHotelTable')
		insert into @excludedTables values ('mwSpoDataTable')
		insert into @excludedTables values ('mwTourLog')
		insert into @excludedTables values ('TP_Flights')
		insert into @excludedTables values ('TP_TurDates')
		insert into @excludedTables values ('TP_Lists')
		insert into @excludedTables values ('TP_Prices')
		insert into @excludedTables values ('TP_Services')
		insert into @excludedTables values ('TP_Tours')
		insert into @excludedTables values ('TP_ServiceLists')
		insert into @excludedTables values ('TP_PricesUpdated')
		insert into @excludedTables values ('PriceListDetails')
		insert into @excludedTables values ('transfer')
		insert into @excludedTables values ('excurdictionary')
		insert into @excludedTables values ('servicelist')
		insert into @excludedTables values ('CacheQuotas')
		insert into @excludedTables values ('Setting')
		insert into @excludedTables values ('ScriptsSetupLogs')

		-- truncate all tables that are not in replication
		declare @killViewSql as nvarchar(max)
		declare @killSql as nvarchar(max)
		declare @killSqlConcrete as nvarchar(max)
		set @killSql = '
		if exists (select top 1 1 from sys.foreign_keys fk
			left join sys.tables parent on fk.parent_object_id = parent.object_id
			where parent.name = ''@killedTable'')
		begin
		RAISERROR(''There are some foreign key references from @killedTable table! To continue execution all references must be dropped.'', 16, 1)
		end

		if exists (select top 1 1 from sys.foreign_keys fk
			left join sys.tables child on fk.referenced_object_id = child.object_id
			where child.name = ''@killedTable'')
		begin
		RAISERROR(''There are some foreign key references to @killedTable table! To continue execution all references must be dropped.'', 16, 1)
		end

		truncate table [@killedTable]
		'

		declare @killedTable as sysname

		create table #articles
		(
			article sysname
		)

		declare @getArticlesSql as nvarchar(max)
		set @getArticlesSql = 'insert into #articles
		select source_object collate Cyrillic_General_CI_AS from mt.distribution.dbo.MSArticles
		where publication_id = (select top 1 publication_id 
								from mt.distribution.dbo.MSpublications 
								where publisher_db = ''@publisher_db'' collate Cyrillic_General_CI_AS
									and publication = ''MW_PUB'' collate Cyrillic_General_CI_AS)'

		set @getArticlesSql = replace(@getArticlesSql, '@publisher_db', @publisher_db)
		
		set @wasError = 0

		begin try

			exec (@getArticlesSql)

			declare tabsCur cursor for
			SELECT tab.[name]
			FROM sys.tables tab
			WHERE 
				tab.[name] collate Cyrillic_General_CI_AS not in (select article from #articles)
				and not exists (select tableName from @excludedTables where tab.[name] like tableName)
			ORDER BY tab.[name]
		
			open tabsCur
			fetch next from tabsCur into @killedTable

			while @@fetch_status = 0
			begin
		
				-- drop table
				set @killSqlConcrete = replace(@killSql, '@killedTable', @killedTable)
				exec (@killSqlConcrete)

				fetch next from tabsCur into @killedTable

			end
		end try
		begin catch
	
			set @wasError = 1
			set @errorMessage = ERROR_MESSAGE()

		end catch

		if CURSOR_STATUS('global','tabsCur') >= -1
		begin
			close tabsCur
			deallocate tabsCur
		end

		drop table #articles

		if @wasError = 1
		begin
			raiserror(@errorMessage, 16, 1)
		end

	end

end
go
/*********************************************************************/
/* end TruncateExcessTablesOnSubscriber.sql */
/*********************************************************************/
INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'TruncateExcessTablesOnSubscriber.sql завершен', 'SCRIPTTIMELINE', HOST_NAME())
-- =====================   Обновление версии БД. 9.2.21.1 - номер версии, 2015-02-20 - дата версии ===================== 
BEGIN TRY
	DECLARE @SUSER_NAME nvarchar(128) = (SELECT SUSER_NAME())
	DECLARE @HOST_NAME nvarchar(128) = (SELECT HOST_NAME())	

	UPDATE [dbo].[SETTING] 
	SET st_version = '9.2.21.1', st_moduledate = convert(datetime, '2015-02-20', 120),  st_financeversion = '9.2.21.1', st_financedate = convert(datetime, '2015-02-20', 120)
END TRY
BEGIN CATCH
	DECLARE @ERROR_MESSAGE nvarchar = (SELECT ERROR_MESSAGE())	
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer, RC_LOG) VALUES(@SUSER_NAME, 'Ошибка при обновлении версии БД', 'ERR', @HOST_NAME, @ERROR_MESSAGE)
END CATCH
GO

BEGIN TRY	
	DECLARE @SUSER_NAME nvarchar = (SELECT SUSER_NAME())
	DECLARE @HOST_NAME nvarchar = (SELECT HOST_NAME())	

	UPDATE [dbo].[SYSTEMSETTINGS] 
	SET SS_ParmValue='2015-02-20' WHERE SS_ParmName='SYSScriptDate'
END TRY
BEGIN CATCH
	DECLARE @ERROR_MESSAGE nvarchar(500) = (SELECT ERROR_MESSAGE())	
	INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer, RC_LOG) VALUES(@SUSER_NAME, 'Ошибка при обновлении даты прогона релизного скрипта', 'ERR', @HOST_NAME, @ERROR_MESSAGE)
END CATCH
GO

INSERT INTO ScriptsSetupLogs(RC_Creator, RC_Text, RC_Status, RC_Computer) VALUES(SUSER_NAME(), 'Выполнение релизного скрипта завершено. Версия релиза: 9.2.21.1. Дата релиза: 2015-02-20', 'SCRIPTTIMELINE', HOST_NAME())
GO