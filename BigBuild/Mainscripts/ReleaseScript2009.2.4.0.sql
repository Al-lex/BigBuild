if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_VisaSTDChange]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
DROP TRIGGER [T_VisaSTDChange]
GO

CREATE TRIGGER [T_VisaSTDChange]
ON [dbo].[VisaServiceToDocs] 
FOR INSERT, UPDATE, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
	DECLARE @VSD_ID int

    DECLARE @OVSD_VTSID int
	DECLARE @OVSD_VDID int
	DECLARE @OVSD_Date varchar(16)
	DECLARE @OVSD_Status smallint

	DECLARE @NVSD_VTSID int
	DECLARE @NVSD_VDID int
	DECLARE @NVSD_Date varchar(16)
	DECLARE @NVSD_Status smallint

	DECLARE @nHIID int
	DECLARE @sDGCode varchar(10)
	DECLARE @nDGKey	int
	DECLARE @sDocumentName varchar(100)
	DECLARE @nDocumentKey int
	DECLARE @sHistoryText varchar(254)
	DECLARE @sTuristName varchar(50)
	DECLARE @sVisaName varchar(190)
	
	DECLARE @sOldStatus varchar(255), @sNewStatus varchar(255)

	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int

	SELECT @nDelCount = COUNT(*) FROM DELETED
	SELECT @nInsCount = COUNT(*) FROM INSERTED

	IF (@nDelCount = 0)
	BEGIN
		SET @sMod = 'INS'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				null, null, null, null,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM INSERTED N 
	END
	ELSE IF (@nInsCount = 0)
	BEGIN
		SET @sMod = 'DEL'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	O.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				null, null, null, null
		FROM DELETED O 
	END
	ELSE
	BEGIN
		SET @sMod = 'UPD'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM DELETED O, INSERTED N 
		WHERE N.VSD_ID = O.VSD_ID	
	END

	OPEN cur_VisaServiceToDocs

    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @OVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	
	WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (	@sMod = 'INS' OR @sMod = 'DEL' OR 
			ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0) OR 
			ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0)   )
		BEGIN
			------------Запись в историю--------------------------------------------------------------------
		
			SELECT @sDGCode = DL_DGCOD, @nDGKey = DL_DGKEY, @sDocumentName = VD_Name, @nDocumentKey = VD_ID, @sTuristName = LEFT(ISNULL(TU_NAMERUS, '') + ' ' + ISNULL(TU_SHORTNAME,''), 50), @sVisaName =  LEFT(ISNULL(DL_NAME, ''), 190)
			FROM VisaDocuments, VisaServiceToDocs, VisaTouristService, TuristService, tbl_DogovorList, tbl_Turist
			WHERE VD_ID = VSD_VDID AND VSD_VTSID = VTS_ID AND VTS_TUIDKEY = TU_IDKEY AND DL_KEY = TU_DLKEY AND TU_KEY = TU_TUKEY AND VSD_ID = @VSD_ID

			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 15, @VSD_ID, @sMod, @sVisaName, @sTuristName, 0, ''

			If ( @sMod = 'INS' OR @sMod = 'DEL' )
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15001, null, @sDocumentName, null, @nDocumentKey, null, null, 0
			
			if (ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0))
			begin
				if @OVSD_Status = 0
					set @sOldStatus = ''
				else if @OVSD_Status = 1
					set @sOldStatus = 'Требуется предоставить'
				else
					set @sOldStatus = @OVSD_Status

				if @NVSD_Status = 0
					set @sNewStatus = ''
				else if @NVSD_Status = 1
					set @sNewStatus = 'Требуется предоставить'
				else
					set @sNewStatus = @NVSD_Status

				EXECUTE dbo.InsertHistoryDetail @nHIID , 15003, @sOldStatus, @sNewStatus, @OVSD_Status, @NVSD_Status, null, null, 0
			end
			
			if (ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15002, @OVSD_Date, @NVSD_Date, null, null, null, null, 0			
		
		END

	    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @NVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	END
END
GO

IF (not exists (SELECT OA_Id FROM dbo.ObjectAliases WHERE OA_Id = 15))
INSERT INTO [dbo].[ObjectAliases]([OA_Id],[OA_Alias],[OA_Name],[OA_NameLat],[OA_TABLEID])
     VALUES (15, 'VisaServiceToDocs', 'Документы для визы', null, 68)

IF (not exists (SELECT OA_Id FROM dbo.ObjectAliases WHERE OA_Id = 15001))
INSERT INTO [dbo].[ObjectAliases]([OA_Id],[OA_Alias],[OA_Name],[OA_NameLat],[OA_TABLEID])
     VALUES (15001, 'VSD_ID', 'Ключ записи', null, 68)

IF (not exists (SELECT OA_Id FROM dbo.ObjectAliases WHERE OA_Id = 15002))
INSERT INTO [dbo].[ObjectAliases]([OA_Id],[OA_Alias],[OA_Name],[OA_NameLat],[OA_TABLEID])
     VALUES (15002, 'VSD_Date', 'Дата предоставление документов', null, 68)

IF (not exists (SELECT OA_Id FROM dbo.ObjectAliases WHERE OA_Id = 15003))
INSERT INTO [dbo].[ObjectAliases]([OA_Id],[OA_Alias],[OA_Name],[OA_NameLat],[OA_TABLEID])
     VALUES (15003, 'VSD_Status', 'Признак документа', null, 68)

GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogovorMonitor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogovorMonitor]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [dbo].[DogovorMonitor]
  (
--<VERSION>2007.2.17</VERSION>
--<DATE>2008-09-01</DATE>
	@dtStartDate datetime,			-- начальная дата просмотра изменений
	@dtEndDate datetime,			-- конечная дата просмотра изменений
	@nCountryKey int,				-- ключ страны
	@nCityKey int,					-- ключ города
	@nDepartureCityKey int,			-- ключ города вылета
	@nCreatorKey int,				-- ключ создателя
	@nOwnerKey int,					-- ключ ведущего менеджера
	@nViewProceed smallint,			-- не показывать обработанные: 0 - показывать, 1 - не показывать
	@sFilterKeys varchar(255)		-- ключи выбранных фильтров
  )
AS
BEGIN

CREATE TABLE #DogovorMonitorTable
(
	DM_HistoryDate datetime,
	DM_ProcDate datetime,
	DM_DGCODE varchar(10),
	DM_CREATOR varchar(25),
	DM_TurDate datetime,
	DM_TurName varchar(160),
	DM_PartnerName varchar(80),
	DM_FilterName text,
	DM_NotesCount int,
	DM_PaymentStatus varchar(4),
	DM_IsBilled bit,
	DM_MessageCount int
)

declare @nObjectAliasFilter int, @sFilterType varchar(3)

declare @dtHistoryDate datetime, @sDGCode varchar(10), @nDGKey int
declare @sCreator varchar(25), @dtTurDate datetime, @sTurName varchar(160)
declare @sPartnerName varchar(80), @sFilterName varchar(255), @nHIID int
declare @sHistoryMod varchar(3), @sPaymentStatus as varchar(4)

set @sHistoryMod = 'DMP'

declare @nFilterKey int, @nLastPos int

while len(@sFilterKeys) > 0
begin
	set @nLastPos = 0
	set @nLastPos = charindex(',', @sFilterKeys, @nLastPos)
	if @nLastPos = 0
		set @nLastPos = len(@sFilterKeys) + 1
	
	set @nFilterKey = cast(substring(@sFilterKeys, 0, @nLastPos) as int)
	if @nLastPos <> len(@sFilterKeys) + 1
		set @sFilterKeys = substring(@sFilterKeys, @nLastPos + 1, len(@sFilterKeys) - @nLastPos)
	else
		set @sFilterKeys = ''
	
	select @sFilterName = DS_Value from Descriptions where DS_KEY = @nFilterKey


	declare filterCursor cursor local fast_forward for
	select OF_OAId, OF_Type
	from ObjectAliasFilters
	where OF_DSKey = @nFilterKey
	order by OF_OAId
	
	open filterCursor
	fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	while(@@fetch_status = 0)
	begin
		declare dogovorsCursor cursor local fast_forward for
		select HI_DATE, DG_CODE, US_FullName, DG_TurDate, TL_NAME, PR_NAME, DG_KEY,
			CASE
				WHEN DG_PRICE = 0 AND DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED = 0 THEN 'NONE'
				WHEN DG_PAYED < DG_PRICE THEN 'LOW'
				WHEN DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED > DG_PRICE THEN 'OVER'
			END AS DM_PAYMENTSTATUS
		from dogovor, history, historydetail, userlist, TurList, Partners
		where HI_DGCOD = DG_CODE and HI_ID = HD_HIID and US_KEY = DG_CREATOR and TL_KEY = DG_TRKEY and PR_KEY = DG_PARTNERKEY and 
			HI_DATE BETWEEN @dtStartDate and dateadd(day, 1, @dtEndDate) and
			(@nCountryKey < 0 OR DG_CNKEY = @nCountryKey) and
			(@nCityKey < 0 OR DG_CTKEY = @nCityKey) and
			(@nDepartureCityKey < 0 OR DG_CTDepartureKey = @nDepartureCityKey) and
			(@nCreatorKey < 0 OR DG_CREATOR = @nCreatorKey) and
			(@nOwnerKey < 0 OR DG_OWNER = @nOwnerKey) and
			(HD_OAId = @nObjectAliasFilter) and
			--(@nViewProceed = 0 OR NOT EXISTS (select HI_ID from history where HI_DGKEY = DG_KEY and HI_MOD LIKE @sHistoryMod)) and
			(@sFilterType = '' OR HI_MOD = @sFilterType)

		--нашли путевки
		open dogovorsCursor
		fetch next from dogovorsCursor into @dtHistoryDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		while(@@fetch_status = 0)
		begin
			if not exists (select * from #DogovorMonitorTable where datediff(mi, DM_HistoryDate, @dtHistoryDate) = 0 and DM_DGCODE = @sDGCode and DM_FilterName LIKE @sFilterName)
			begin
				declare @hiDate datetime
				--select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
				if exists (select HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
					select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
				else
					set @hiDate = NULL

				DECLARE @notesCount int
				SELECT @notesCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'WWW'

				DECLARE @isBilled bit
				SET @isBilled = 0
				IF EXISTS(SELECT AC_KEY FROM ACCOUNTS WHERE AC_DGCOD = @sDGCode)
					SET @isBilled = 1

				DECLARE @messageCount int
				SELECT @messageCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'MTM'
				AND HI_TEXT NOT LIKE 'От агента: %' -- notes from web (copies of 'WWW' moded notes)

				if (@nViewProceed = 0) OR (@hiDate IS NULL)
				begin
					insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount)
					values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
				end
				else
				begin
					if @dtHistoryDate > @hiDate
					begin
						insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount) 
						values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
					end
				end
			end
			fetch next from dogovorsCursor into @dtHistoryDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		end
			
		close dogovorsCursor
		deallocate dogovorsCursor

		fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	end

	close filterCursor
	deallocate filterCursor

end
	SELECT *
	FROM #DogovorMonitorTable
	ORDER BY DM_HistoryDate

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[DogovorMonitor] TO Public
GO 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsDogovor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.InsDogovor
GO
CREATE procedure dbo.InsDogovor
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (70) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@sOldDogovor varchar (10) = null		-- должен быть ПОСЛЕДНИМ !!!!! -- предыдущий номер договора, передается при переименовании путевки
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType)
	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent
	Select @sValue = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseTimeLimit'
	if @sValue = '1'
		exec dbo.CreatePPaymentDate @sDogovor, @dTour, @dtCurrentDate

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0
GO
GRANT EXECUTE ON dbo.InsDogovor TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nGroupByPeriod smallint,	-- 0 - не группировать цены по периодам, 1 - группировать
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nGroupByPeriod=0
		SET @sHI_Text='With period group'
	ELSE
		SET @sHI_Text='Without period group'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11005, null, @sHI_Text, null, @nGroupByPeriod, null, null, 0

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		) ON [PRIMARY]
		DELETE FROM #TP_Prices
		INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM #TP_Prices)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))
		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'

		fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN
			if @dtPrevDate <> @turdate
				set @nPrevGrossDate = @dtPrevDate
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate
			BEGIN
				select @nPrevGrossKey = xtp_key, @nPrevGross = xtp_gross from #tp_prices where xtp_dateend  = @nPrevGrossDate and xtp_tikey = @variant
				set @price_brutto = 0
				set @nPrevVariant = @variant
				set @dtPrevDate = @turdate
				if @sUseServicePrices = '1'
					delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
			END
			if @nTempGross is not null and @nSvkey <> 1
			BEGIN
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			END
			else
			BEGIN
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			END
			set @price_brutto = @price_brutto + @nBrutto
			fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
			set @fetchStatus = @@fetch_status

			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				if @price_brutto is not null
				BEGIN
				exec RoundPriceList @round, @price_brutto output
					if @nUpdate = 0 or @nGroupByPeriod = 0
					BEGIN
						if @nPrevGross = @price_brutto and @nGroupByPeriod = 1
							update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nPrevGrossKey
						else
						BEGIN
							if exists(select 1 from #tp_prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
								update #tp_prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							else
							BEGIN
								insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
								if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
								BEGIN
									exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
								END
							END
						END
					END					
					else
					BEGIN
					---ДОЗАПИСЬ СТАРТ---------------------
						if (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant) = 0
						BEGIN
							insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						END
						else
						BEGIN
							declare @nKey int
							declare @dBegin datetime
							declare @dEnd datetime
							declare @fGross money
							declare @fSetPrevPrice smallint	-- признак наличия цены на текущий вариант на ранние даты
							declare @fSetNextPrice smallint	-- признак наличия цены на текущий вариант на поздние даты
							declare @nSetPrevKey int	-- ключ цены на текущий вариант на ранние даты
							declare @nSetNextKey int	-- ключ цены на текущий вариант на поздние даты
							declare @nSetPrevGross money	-- ценa на текущий вариант на ранние даты
							declare @nSetNextGross money	-- ценa на текущий вариант на поздние даты
							declare priceCursor cursor local fast_forward  for
								select xtp_key, xtp_datebegin, xtp_dateend, xtp_gross
								from #tp_prices
								where xtp_tikey = @nPrevVariant
								order by xtp_datebegin
							set @fSetPrevPrice = 0
							set @fSetNextPrice = 0
							set @nSetPrevKey = -1
							set @nSetNextKey = -1
							set @nSetPrevGross = -1
							set @nSetNextGross = -1
							open priceCursor
							fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							While (@@fetch_status = 0)
							BEGIN
								if @dtPrevDate = @dEnd or @dtPrevDate = @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @fSetNextPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetNextKey = @nKey
									set @nSetPrevGross = @fGross
									set @nSetNextGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate > @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetPrevGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate <@dEnd
								BEGIN
									set @fSetNextPrice = 1
									set @nSetNextKey = @nKey
									set @nSetNextGross = @fGross
								END
								fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							END
							close priceCursor
							deallocate priceCursor
							if @nSetPrevKey is not null and @nSetNextKey is not null -- есть интервалы цен до и после текущей даты, либо цена попала в существующий интервал
							BEGIN
								if @nSetPrevKey <> @nSetNextKey-- цена не попала в существующий период
								BEGIN
									if @nSetPrevGross = @nSetNextGross and (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate) = 1 -- есть одиночная цена в базе на тек. дату
									BEGIN
										set @nKey = null
										set @fGross = null
										select @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate
										if @fGross <> @price_brutto
										BEGIN
											if @price_brutto = @nSetNextGross or @price_brutto = @nSetPrevGross
											BEGIN
												delete from #tp_prices where xtp_key = @nKey
												if @nSetPrevGross = @price_brutto
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
												if @nSetNextGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
											END
											else
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nKey
										END
									END
									else -- на текущую дату в базе нет цены
									BEGIN -- здесь надо попробовать схлопнуть периоды
										if @nSetPrevGross = @price_brutto
											update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
										if @nSetNextGross = @price_brutto
											update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
										if @nSetNextGross <> @price_brutto and @nSetPrevGross <> @price_brutto
										BEGIN
											insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
											if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
											BEGIN
												exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
												set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
											END
										END
									END
								END
								else -- цена попала в существующий период
								if @nSetPrevGross <> @price_brutto
								BEGIN	-- здесь надо расхлопнуть периоды
								-- в итоге вместо одного периода цен будет 2 или 3 периода
									set @dDateBeg1 = null
									set @dDateBeg3 = null
									set @dDateEnd1 = null
									set @dDateEnd3 = null
									select @dDateBeg1 = xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey
									select top 1 @dDateEnd1 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date < @dtPrevDate order by td_date DESC
									select top 1 @dDateBeg3 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date > @dtPrevDate order by td_date ASC
									select @dDateEnd3 = xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey
									if @dDateBeg1 <> @dtPrevDate and @dDateEnd3 <> @dtPrevDate
									BEGIN
										update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dDateBeg3, @dDateEnd3, @nSetPrevGross, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
									END
									else
									BEGIN
										if @dDateBeg1 = @dtPrevDate and @dDateEnd3 = @dtPrevDate
										BEGIN
											declare @leftKey int
											declare @leftGross money
											declare @rightKey int
											declare @rightGross money
											select top 1 @leftKey = xtp_key, @leftGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend desc
											select top 1 @rightKey = xtp_key, @rightGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_dateend asc
											if @leftKey is null and @rightKey is null
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											if @leftKey is not null and @rightKey is not null
											BEGIN
												if @leftGross = @rightGross and @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = (select xtp_dateend from #tp_prices where xtp_key = @rightKey) where xtp_key = @leftKey
													delete from #tp_prices where xtp_key in (@rightKey, @nSetPrevKey)
												END
												if @leftGross = @rightGross and @rightGross <> @price_brutto
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if @leftKey is not null and (@rightKey is null or @rightGross <> @price_brutto)
											BEGIN
												if @leftGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @leftKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if (@leftKey is null or @leftGross <> @price_brutto) and @rightKey is not null
											BEGIN
												if @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @rightKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
										END
										else
										BEGIN
											set @nKey = null
											set @fGross = null
											if @dDateBeg1 = @dtPrevDate
											BEGIN
												update #tp_prices set xtp_datebegin = @dDateBeg3 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend DESC
												if @fGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nKey
													--if (select xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey) > (select xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey)
													--delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
											else
											BEGIN
												update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_datebegin ASC
												if @fGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nKey
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
										END
									END
								END
							END
							else -- здесь нет двух цен по разные стороны от текущей даты
							BEGIN
								if @nSetPrevGross <> @price_brutto and @nSetNextGross <> @price_brutto
								BEGIN
									insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
									if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
									BEGIN
										exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
									END
								END
								else
								BEGIN
									if @fSetPrevPrice = 1
										update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
									if @fSetNextPrice = 1
										update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
								END
							END
						END
					END  ----------------------------------------------------------------
				END
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END
		END
		close serviceCursor
		deallocate serviceCursor
		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 96
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		select 	@TPkeyMax = MAX(xtp_key), 
				@TPkeyMin = MIN(xtp_key) 
		from 	#tp_prices

		while 	@TPkeyMin <= @TPkeyMax
		BEGIN
			begin tran tEnd
			INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
				select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from #tp_prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
			commit tran tEnd
			Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------
		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		CREATE TABLE #TP_Lists (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(35) , 
            [xTI_RMName] varchar(35) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(20),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      ) ON [PRIMARY]
      DELETE FROM #TP_Lists
      INSERT INTO #TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update #TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update #TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update #TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update #TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update #TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update #TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update #TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update #TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update #TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update #TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update #TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update #TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update #TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update #TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update #TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update #TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update #TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update #TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update #TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update #TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from #tp_prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  #tp_lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG)
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from #tp_prices, #tp_lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey) values (@TrKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

-- Create column indicated that field already processed by FillMasterWebSearchFields
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[TP_Lists]') and name = 'ti_UsedBySearch')
	ALTER TABLE [dbo].[TP_Lists] ADD ti_UsedBySearch smallint NULL
GO

if not exists(select id from sysindexes where id = object_id('TP_Lists') and indid > 0 and indid < 255 and name = 'x_usedBySearch')
	CREATE NONCLUSTERED INDEX x_usedBySearch ON [dbo].[TP_Lists] 
	(
		[TI_TOKey] ASC,
		[ti_UsedBySearch] ASC
	)WITH fillfactor = 70 ON [PRIMARY]
go

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetTourMargin]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetTourMargin] 
GO
CREATE PROCEDURE [dbo].[GetTourMargin] 
(	@TrKey int, @Date datetime, @margin float output, @marginType int output, 
	@svKey int, @days int, @sellDate DateTime = null, @packetKey int)
as
--<DATE>2008-12-04</DATE>
--<VERSION>7.2.20</VERSION>
	if @sellDate is null
		Set @sellDate = GetDate()

	declare @nFromPacket int
	declare @dtSale DateTime
	Set @nFromPacket = 0
		
	SELECT TOP 1	@margin = TM_Margin, @marginType = TM_MarginType, @nFromPacket = TM_FromPacket, 
					@dtSale = ISNULL(TM_DateSellEnd,ISNULL(DATEADD(YEAR,10,TM_DateSellBeg),DATEADD(YEAR,15,GetDate())))
	FROM
		dbo.TurMargin
	WHERE
		TM_TlKey = @TrKey 
		and @Date Between TM_DateBeg and TM_DateEnd
		and (TM_SVKEY = @svKey or TM_SVKEY = 0)
		and (@sellDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
		and (@sellDate <= (TM_DateSellEnd + 1) or TM_DateSellEnd is null)
		and (TM_LONG = @days - 1 or TM_LONG = 0)
	ORDER BY	TM_SVKEY DESC,  TM_DateBeg DESC, TM_DateEnd, 4, TM_LONG DESC

	if @nFromPacket = 1 AND @packetKey>0
	begin 
		set @margin = 0
		set @marginType = 0
		SELECT TOP 1	@margin = TM_Margin, @marginType = TM_MarginType, @nFromPacket = TM_FromPacket, 
						@dtSale = ISNULL(TM_DateSellEnd,ISNULL(DATEADD(YEAR,10,TM_DateSellBeg),DATEADD(YEAR,15,GetDate())))
		FROM
			dbo.TurMargin
		WHERE
			TM_TlKey = @packetKey
			and @Date Between TM_DateBeg and TM_DateEnd
			and (TM_SVKEY = @svKey or TM_SVKEY = 0)
			and (@sellDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@sellDate <= (TM_DateSellEnd + 1) or TM_DateSellEnd is null)
			and (TM_LONG = @days - 1 or TM_LONG = 0)
			and TM_FromPacket = 0
		ORDER BY	TM_SVKEY DESC,  TM_DateBeg DESC, TM_DateEnd, 4, TM_LONG DESC
	end

	if @margin is null
		Set @margin = 0
	If @marginType is null
		set @marginType = 0
	Return 0
GO
GRANT EXECUTE ON [dbo].[GetTourMargin] TO PUBLIC 
GO

if exists(select id from sysobjects where name='mwGetServiceClassesNames' and xtype='fn')
	drop function [dbo].mwGetServiceClassesNames
go

CREATE  FUNCTION [dbo].[mwGetServiceClassesNames](@tiKey INTEGER, @addPansionInfo SMALLINT, @delimeter VARCHAR(5))
RETURNS VARCHAR(256)
AS
BEGIN
	declare @Result varchar(256)
	set @Result = ''

	select @Result = @Result + 
		CASE WHEN CHARINDEX ( @Result , ( @delimeter + ltrim(rtrim(sv_name)) + CASE WHEN @addPansionInfo = 1 and sv_key = 3 THEN '(питание: ' + ltrim(rtrim(pn_name)) + ')' ELSE '' END)) = 0
			 THEN  @delimeter + ltrim(rtrim(sv_name)) + CASE WHEN @addPansionInfo = 1 and sv_key = 3 THEN '(питание: ' + ltrim(rtrim(pn_name)) + ')' ELSE '' END
			 ELSE ''
		END
	from (select distinct 
			sv_name, sv_key, pn_name, CASE WHEN sv_key < 3 THEN 0 ELSE (CASE WHEN sv_key > 3 THEN 9999 ELSE ts_day END) END ts_day
		from tp_services with(nolock)
			inner join tp_servicelists with(nolock) on tl_tskey = ts_key 
			inner join service with(nolock) on sv_key = ts_svkey
			left  join pansion with(nolock) on ts_SubCode2 = pn_key
		where tl_tikey = @tiKey and ((ts_attribute & 32832) = 0)) tbl
	order by ts_day

	return(substring(@Result, len(@delimeter) + 1, len(@Result) - 1))
END
GO

grant exec on [dbo].[mwGetServiceClassesNames] to public
go

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2005.2.41.2</VERSION>
--<DATE>2008-09-03</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
				SET @sHI_Text = ISNULL(@NDL_Name, '')
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				END
			else if (@sMod = 'UPD')
				SET @sHI_Text = ISNULL(@NDL_Name, '')
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0
			END
		END
    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetServiceCost] 
GO
CREATE PROCEDURE [dbo].[GetServiceCost] 
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0, @sellDate dateTime,
		@netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output
as
--<DATE>2008-11-14</DATE>
---<VERSION>7.2.19.1</VERSION>

SET DATEFIRST 1
DECLARE @tourlong int

Set @sellDate = ISNULL(@sellDate,GetDate())

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (14,6), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint


set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END

	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

	if @UseTypeDivisionMode > 0
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
					and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
	else
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC

	--1, 
	open costCursor

	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

If @days >1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	If @@fetch_status = 0
	BEGIN

		declare @TMPTable Table 
 		( CL_Date datetime,
		CL_CostNetto decimal(14,4),
		CL_Cost decimal(14,4),
		CL_Discount smallint,
		CL_Type smallint,
		CL_Rate varchar(2),
		CL_Course decimal(14,4),
		CL_Pax smallint default 1,
		CL_ByDay smallint,
		CL_Part smallint,
		CL_Profit decimal(14,4))

		DECLARE @temp_date DATETIME
		SET @temp_date = @date + @days - 1

		while @temp_date >= @date 
		BEGIN -- begin while @temp_date >= @date 
			insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
			set @temp_date = @temp_date - 1 
		END  -- end while @temp_date >= @date 
	END
	Else
	BEGIN
		close costCursor
		deallocate costCursor
		return 0
	END

	set @COST_ID = 1 --идетификатор уникальности цены
	If @CS_ByDay = 2
		Set @nCostByDayExists = 1

	If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
		insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
END

set @NotCalculatedCosts = 1
set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
BEGIN -- While (@@fetch_status = 0)
	-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
	Set @IsFetchNormal = 1
		-- если не указаны даты периодов, то значит указаны даты заедов
		-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

	If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
		if CHARINDEX ( @WeekDate, @CS_Week ) = 0
			Set @IsFetchNormal = 0
		Else
			Set @CS_Week = ''

	If @tourlong > 0 and @svKey = 1
	Begin		
		If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
			Set @IsFetchNormal = @IsFetchNormal
		else
			Set @IsFetchNormal = 0
	end     

	If @svKey != 1
	begin
		If @CS_LongMin is not null and @CS_LongMin > @days
			Set @IsFetchNormal = 0
	end

	If (@sellDate between @CS_DateSellBeg and (@CS_DateSellEnd + 1)) or (@CS_DateSellBeg is null)
		Set @IsFetchNormal = @IsFetchNormal 
	else
		Set @IsFetchNormal = 0

	If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = (@date + @days - 1) -- смотрим может есть цена за период точно совпадает с периодом действия услуги
		Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
			CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
--		Set @IsFetchNormal = 0
	If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
	BEGIN
		If CHARINDEX ( @WeekDate, @CS_Week ) > 0
			Set @IsFetchNormal = @IsFetchNormal 
		Else
			Set @IsFetchNormal = 0
	END

	If @Days = 1 and @CS_Date > @date
		Set @IsFetchNormal = 0

	If @Days = 1 and @CS_ByDay in (3,4)
		Set @IsFetchNormal = 0

--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
/*
	If 	@CS_CheckInDateBEG is not null
	BEGIN
		Set @CS_Date = null
		Set @CS_DateEnd = null
	END
*/
		If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
		BEGIN			--цены подходят для поиска
			Set @CS_Date = (isnull(@CS_Date,@date))
			Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

			If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
			BEGIN
				update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
						CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
				if not exists (select * from @TMPTable where CL_Date = @date + @days)
					insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
				Set @nCostByDayExists = 1	
			END

			if @CS_Date < @date
				Set @CS_Date = @date
			if @CS_DateEnd > @date + @days
				Set @CS_DateEnd = @date + @days
			Set @CS_Discount = ISNULL(@CS_Discount,0)
			Set @TMP_Number_Period = null

			if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
			BEGIN -- if @CS_ByDay = 3
				if (@CS_DateEnd - @CS_Date + 1) >= 7
				BEGIN
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
					while @TMP_Number >= 7
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
	
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @TMP_Number = @TMP_Number - 7
						SET @TMP_Date = @TMP_Date + 7
						SET @COST_ID = @COST_ID + 1
					END
				END
			END	-- if @CS_ByDay = 3

	--		print 'поиск'
			if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
			BEGIN -- if @CS_ByDay = 0
	--			print 'период'
				select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
					Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

				if @CS_Date < @TMP_Date and @date < @TMP_Date
				BEGIN
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
			--		print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN					
						select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
						if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
						BEGIN
							select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
								Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
						END
					END
					Set @TMP_Number_Period = null
				END

				if @CS_Long is null or @CS_Long > @TMP_Number
				BEGIN
					--если предыдущий период захватывается полностью, то его надо включить
					--это делается только в случае, если цену указана за период
			--		print @TMP_Date + @TMP_Number
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
		--			print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN 
						select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
	--					print @TMP_Date_Period
						if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
							Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
					END
				END

				if @CS_Long is not null and @CS_Long < @TMP_Number
					set @TMP_Number = @CS_Long

				if @CS_LongMin is null or @CS_LongMin <= @TMP_Number
				BEGIN
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
						CL_Pax = 1, CL_Profit = @CS_Profit
						WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
					UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
					SET @COST_ID = @COST_ID + 1
				END
			END	-- if @CS_ByDay = 0
	
			if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
			BEGIN -- if @CS_ByDay = 1/2
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				if 1=1 -- временная заглушка, 
				BEGIN  -- если Цена удовлетворяет условиям
					SET @DayOfWeeks = @CS_Week
					While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
					BEGIN
						select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
						update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
							Where CL_Part = @TMP_Number
					END				

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

					SET @COST_ID = @COST_ID + 1
				END   -- если Цена удовлетворяет условиям
			END	-- if @CS_ByDay = 1

			if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
			BEGIN -- if @CS_ByDay = 4
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				SET @DayOfWeeks = ''
				Set @CS_Week = REPLACE(@CS_Week,'.','');

				if @CS_Week != ''
				BEGIN			
					Set @TMP_Number = 1
					Set @DayOfWeeks = LEFT(@CS_Week,1)
					while @TMP_Number < LEN(@CS_Week)
					BEGIN
						Set @TMP_Number = @TMP_Number + 1
						Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
					END
				END
				
				-- доп.ночи могут только добивать в конец, первый день точно не к ним
				If @CS_Date = @date
					Set @CS_Date = @CS_Date + 1

				IF @DayOfWeeks = ''
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1)
				ELSE
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
				SET @COST_ID = @COST_ID + 1
			END	-- if @CS_ByDay = 4
			select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
		END -- цены подходят для поиска и есть продолжительность
		ELSE
			If @IsFetchNormal = 1
				Set @NotCalculatedCosts = 0

	If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
	BEGIN
		fetch next from costCursor 
			into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
					@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
					@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1
			Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
		Else
			Set @FindCostByPeriod = 0
	END
END -- While (@@fetch_status = 0)
close costCursor
deallocate costCursor

--if @svKey = 3 
--	insert into TMP (CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit) select CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit from @TMPTable

if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
BEGIN
	set @nettoDetail = '='
	set @sDetailed = '='
	while exists (select * from @TMPTable where CL_Course != 0)
	begin
		SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
						@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
		from			@TMPTable 
		where			CL_Course != 0	 
		Order By		CL_Date

		Set @TMP_Number = 0
		Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
		UPDATE @TMPTable SET CL_Course = 0 WHERE CL_Part = @TMP_Number_Part
		if @nettoDetail != '='
			Set @nettoDetail = @nettoDetail + ' +'
		if @sDetailed != '='
			Set @sDetailed = @sDetailed + ' +'

		Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
		Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

		if @TMP_Number != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
		end

		if @TMP_Number_Pax != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
		end

		if @TMP_Number_Course != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
		end
	end

	If ISNULL(@profitValue,0) > 0
		Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

	if @marginCalcValue > 0
		Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

	If ISNULL(@discount,0) > 0
		Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
END
GO
GRANT EXECUTE ON [dbo].[GetServiceCost] TO PUBLIC 
GO
if not exists(select id from syscolumns where id = OBJECT_ID('REP_PROFILES') and name = 'RP_GUID')
ALTER TABLE REP_PROFILES ADD RP_GUID VARCHAR(36)
go

if not exists(select id from syscolumns where id = OBJECT_ID('ReportList') and name = 'RP_WEBMACROKEY')
ALTER TABLE ReportList ADD RP_WEBMACROKEY INT
go

if not exists(select id from syscolumns where id = OBJECT_ID('ReportList') and name = 'RP_BASEMACROKEY')
ALTER TABLE ReportList ADD RP_BASEMACROKEY INT
go
update [dbo].[setting] set st_version = '8.1.2', st_moduledate = '2008-10-23',  st_financeversion = '7.2.20', st_financedate = '2008-12-11' where st_version like '8.%'
GO
UPDATE dbo.SystemSettings SET SS_ParmValue='2008-12-11' WHERE SS_ParmName='SYSScriptDate'
GO
ALTER procedure [dbo].[GetTableQuotaDetails] 
(
--<VERSION>2008.1.02.02a</VERSION>
@DL_Key int =null,
@QT_ID int  =null,
@DateStart smalldatetime = null,
@DaysCount int  =null,
@QT_Type int  =null,
@QT_Release int  =null,
@DL_SVKey int  =null, 
@DL_Code int  =null, 
@DL_SubCode1 int  =null, 
@DL_PRKey int  =null,
@GroupByQD bit = null
)
AS
/*
возвращает таблицу со стопами по всем комбинациям услуг

есть 5 вариантов вызова
1. экран "Наличие мест на квоте" - @QT_ID, @DateStart, @DaysCount !!! до 2008.1.1 (после 2008.1.2 см.пункт 5 )
2. экран "Выбрать квоту (основной режим)" - @DL_Key, @DateStart, @DaysCount
3. функция проверки наличия мест [CheckQuotaExist] @QT_ID, @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @DL_SubCode1, @DL_PRKey
4. из экрана Стоп по квоте @QT_ID, @DateStart, @DaysCount, @QT_Type
5. экран "Наличие мест на квоте" - @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @GroupByQD !!! после 2008.1.2 (до 2008.1.1 см.пункт 1 ) 
*/
DECLARE @DateEnd smalldatetime
Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)

DECLARE @QO_SubCode1 int, @QO_SubCode2 int
IF @DL_Key is not null --значит смотрим из конкретной услуги
	SELECT @DL_SVKey=DL_SVKey, @DL_Code=DL_Code, @DL_SubCode1=DL_SubCode1, @DL_PRKey=DL_PartnerKey FROM DogovorList WHERE DL_Key=@DL_Key
IF @DL_SVKey is not null and @DL_SubCode1 is not null
BEGIN
	SET @QO_SubCode2=0
	IF @DL_SVKey=3
		SELECT @QO_SubCode1=HR_RMKey, @QO_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@DL_SubCode1
	ELSE
		SET @QO_SubCode1=@DL_SubCode1
END

--проверка стопов
--начало
CREATE TABLE #StopSaleTemp_Local
(
SST_Code int,
SST_SubCode1 int,
SST_SubCode2 int,
SST_QOID int,
SST_PRKey int,
SST_Date smalldatetime,
SST_QDID int,
SST_Type smallint,
SST_State smallint,
SST_Comment varchar(255)
)

IF @DL_Key is not null --значит смотрим по конкретной услуги
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code and (QO_SubCode1=@QO_SubCode1 or QO_SubCode1=0)
				and (QO_SubCode2=@QO_SubCode2 or QO_SubCode2=0)
				and (QT_PRKey=@DL_PRKey or QT_PRKey=0)
END
ELSE IF @QT_ID is not null
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and ((QO_SVKey=@DL_SVKey and @DL_SVKey is not null) or (@DL_SVKey is null))
				and ((QO_Code=@DL_Code and @DL_Code is not null) or (@DL_Code is null))
				and (((QO_SubCode1=0 or QO_SubCode1=@QO_SubCode1) and @QO_SubCode1 is not null) or (@QO_SubCode1 is null))
				and (((QO_SubCode2=0 or QO_SubCode2=@QO_SubCode2) and @QO_SubCode2 is not null) or (@QO_SubCode2 is null))
				and ((QD_Type=@QT_Type and @QT_Type is not null) or (@QT_Type is null))
				and ((ISNULL(QD_Release,0)=ISNULL(@QT_Release,0) and @QT_Type is not null) or (@QT_Type is null))	--специально смотрим @QT_Type, т.к. @QT_Release может прийти NULL
END
ELSE IF @QT_ID is null --экран "Наличие мест" (после 2008.1.2)
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code
END

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
BEGIN
	IF @DL_Key is not null --значит по услуге, значит не надо смотреть в QuotaObjects, так как объекты уже отобраны
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
			WHERE exists (SELECT SS_ID FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
	Else
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))
			WHERE exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))

	Update #StopSaleTemp_Local Set SST_State=2, SST_Comment= 
		(
			SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		WHERE exists 
		(
		SELECT SS_ID FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)					
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		and SST_Type=1
END
 --where sst_QDID=2602
--GO
--проверка стопов
--окончание
if @GroupByQD=1
	select	SST_QDID, Count(*) as SST_QO_Count, 
			(SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null) as SST_QO_CountWithStop,
			(SELECT TOP 1 SST_Comment FROM #StopSaleTemp_Local s3 WHERE s3.SST_QDID=s1.SST_QDID and SST_Comment is not null and SST_Comment != '') as SST_Comment
	from #StopSaleTemp_Local s1
	group by SST_QDID
	having (SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null)>0
else
	select * from #StopSaleTemp_Local
GO
--2007.2.21  date2009-01-22

--sp_CurrentUser.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CurrentUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[CurrentUser] 
GO
CREATE PROCEDURE [dbo].[CurrentUser] 
(
--<VERSION>2005.4.21</VERSION>
	@sUser varchar(25) output	
)
AS
	declare @sUserID varchar(255)
	declare @nUserKey int
	declare @nUserPRKey int
	declare @nUserDepartmentKey int
	declare @sUserLat varchar(25)

	--Set @sUserID = dbo.fn_GetUserAlias(USER)
	select @sUserID = SYSTEM_USER
	Exec dbo.GetUserInfo @sUserID, @nUserKey, @sUser output, @nUserPRKey, @nUserDepartmentKey, @sUserLat output
GO
GRANT EXECUTE ON dbo.CurrentUser TO PUBLIC 
GO

--081217(Delete_DuplicatesTurDates).sql
--5.2-7.2
declare @trKey int, @tdDate datetime
declare datesCursor cursor local fast_forward for
	select TD_DATE, TD_TRKEY
	from dbo.TurDate
	group by TD_TRKEY, TD_DATE
	having count(TD_TRKEY) > 1

open datesCursor
fetch next from datesCursor into @tdDate, @trKey
While (@@fetch_status = 0)
BEGIN
	delete from dbo.TurDate where TD_ID IN (select TD_ID from dbo.TurDate where TD_DATE = @tdDate and TD_TRKEY = @trKey) and TD_ID != (select top 1 TD_ID from dbo.TurDate where TD_DATE = @tdDate and TD_TRKEY = @trKey)
	fetch next from datesCursor into @tdDate, @trKey	
END

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UN_TurDate_Date_TRKey]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE dbo.TurDate ADD CONSTRAINT UN_TurDate_Date_TRKey UNIQUE (TD_TRKEY, TD_DATE)
GO

--T_VisaSTDChange.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_VisaSTDChange]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	DROP TRIGGER [T_VisaSTDChange]
GO

CREATE TRIGGER [T_VisaSTDChange]
ON [dbo].[VisaServiceToDocs] 
FOR INSERT, UPDATE, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
	DECLARE @VSD_ID int

    DECLARE @OVSD_VTSID int
	DECLARE @OVSD_VDID int
	DECLARE @OVSD_Date varchar(16)
	DECLARE @OVSD_Status smallint

	DECLARE @NVSD_VTSID int
	DECLARE @NVSD_VDID int
	DECLARE @NVSD_Date varchar(16)
	DECLARE @NVSD_Status smallint

	DECLARE @nHIID int
	DECLARE @sDGCode varchar(10)
	DECLARE @nDGKey	int
	DECLARE @sDocumentName varchar(100)
	DECLARE @nDocumentKey int
	DECLARE @sHistoryText varchar(254)
	DECLARE @sTuristName varchar(50)
	DECLARE @sVisaName varchar(190)
	
	DECLARE @sOldStatus varchar(255), @sNewStatus varchar(255)

	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int

	SELECT @nDelCount = COUNT(*) FROM DELETED
	SELECT @nInsCount = COUNT(*) FROM INSERTED

	IF (@nDelCount = 0)
	BEGIN
		SET @sMod = 'INS'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				null, null, null, null,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM INSERTED N 
	END
	ELSE IF (@nInsCount = 0)
	BEGIN
		SET @sMod = 'DEL'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	O.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				null, null, null, null
		FROM DELETED O 
	END
	ELSE
	BEGIN
		SET @sMod = 'UPD'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM DELETED O, INSERTED N 
		WHERE N.VSD_ID = O.VSD_ID	
	END

	OPEN cur_VisaServiceToDocs

    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @OVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	
	WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (	@sMod = 'INS' OR @sMod = 'DEL' OR 
			ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0) OR 
			ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0)   )
		BEGIN
			------------Запись в историю--------------------------------------------------------------------
		
			SELECT @sDGCode = DL_DGCOD, @nDGKey = DL_DGKEY, @sDocumentName = VD_Name, @nDocumentKey = VD_ID, @sTuristName = LEFT(ISNULL(TU_NAMERUS, '') + ' ' + ISNULL(TU_SHORTNAME,''), 50), @sVisaName =  LEFT(ISNULL(DL_NAME, ''), 190)
			FROM VisaDocuments, VisaServiceToDocs, VisaTouristService, TuristService, tbl_DogovorList, tbl_Turist
			WHERE VD_ID = VSD_VDID AND VSD_VTSID = VTS_ID AND VTS_TUIDKEY = TU_IDKEY AND DL_KEY = TU_DLKEY AND TU_KEY = TU_TUKEY AND VSD_ID = @VSD_ID

			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 15, @VSD_ID, @sMod, @sVisaName, @sTuristName, 0, ''

			If ( @sMod = 'INS' OR @sMod = 'DEL' )
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15001, null, @sDocumentName, null, @nDocumentKey, null, null, 0
			
			if (ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0))
			begin
				if @OVSD_Status = 0
					set @sOldStatus = ''
				else if @OVSD_Status = 1
					set @sOldStatus = 'Требуется предоставить'
				else
					set @sOldStatus = @OVSD_Status

				if @NVSD_Status = 0
					set @sNewStatus = ''
				else if @NVSD_Status = 1
					set @sNewStatus = 'Требуется предоставить'
				else
					set @sNewStatus = @NVSD_Status

				EXECUTE dbo.InsertHistoryDetail @nHIID , 15003, @sOldStatus, @sNewStatus, @OVSD_Status, @NVSD_Status, null, null, 0
			end
			
			if (ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15002, @OVSD_Date, @NVSD_Date, null, null, null, null, 0			
		
		END

	    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @NVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	END
  CLOSE cur_VisaServiceToDocs
  DEALLOCATE cur_VisaServiceToDocs
END
GO

--T_DogovorListUpdate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2005.2.41.2</VERSION>
--<DATE>2008-09-03</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					set @nDGSorCode_New = 7				--ОК
					IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
					BEGIN
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
						BEGIN
							set @nDGSorCode_New = 3			--Wait-List
							set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
						END
					END
					IF @nDGSorGlobalCode_New!=3 
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
						BEGIN
							set @nDGSorCode_New = 4			--Не подтвержден
							set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
						END

					if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
					BEGIN
						update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
					END
				END
			END
		END
    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

--090114.sql
if not exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_IsOutgoing')
	ALTER TABLE [dbo].[DogovorMessages] ADD DM_IsOutgoing bit not null default 1
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Type')
	exec('UPDATE [dbo].[DogovorMessages] SET DM_IsOutgoing=DM_Type')
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Type')
	ALTER TABLE [dbo].[DogovorMessages] DROP COLUMN DM_Type
GO

CREATE PROCEDURE #renameDM_DLKey
AS
EXEC sp_rename 'DogovorMessages.DM_DLKey', 'DM_TypeCode' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_DLKey')
	EXEC #renameDM_DLKey
GO
DROP PROCEDURE #renameDM_DLKey
GO
CREATE PROCEDURE #renameDM_Remark
AS
EXEC sp_rename 'DogovorMessages.DM_DGCode', 'DM_Remark' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_DGCode')
	EXEC #renameDM_Remark
GO
DROP PROCEDURE #renameDM_Remark
GO
CREATE PROCEDURE #renameDM_CreateDate
AS
EXEC sp_rename 'DogovorMessages.DM_Date', 'DM_CreateDate' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Date')
	EXEC #renameDM_CreateDate
GO
DROP PROCEDURE #renameDM_CreateDate
GO
if not exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_TableID')
	ALTER TABLE [dbo].[DogovorMessages] ADD DM_TableID INT
GO

IF exists(Select * from sysviews where name = 'IL_Messages' and CREATOR = 'DBO')
	DROP VIEW dbo.IL_Messages
GO
CREATE VIEW dbo.IL_Messages AS 
    SELECT	DM_ID AS IM_Key,
			DM_IsOutgoing as IM_Type,
			DM_DGKey as IM_DGKey,
			DM_TypeCode as IM_DLKey,
			DM_Remark AS IM_DGCode,
			DM_Processed AS IM_Processed,
			DM_CreateDate AS IM_Date,
			DM_Text as IM_Text
	FROM	[dbo].[DogovorMessages]
WITH CHECK OPTION
GO
grant select ,insert, delete,update on  [dbo].[IL_Messages] to public 
GO

--080120(sp_mwGetSpoList).sql
if exists(select id from sysobjects where name='mwGetSpoList' and xtype='p')
	drop procedure dbo.mwGetSpoList
go

create proc [dbo].[mwGetSpoList] @spoType int, @sort varchar(100), @filter varchar(300)
as
begin
if (len(isnull(@sort, '')) = 0 and len(isnull(@filter, '')) = 0)
	select cn_key, cn_name, cn_namelat, sd_tourkey as tokey, sd_tlkey as tlkey, sd_tourcreated as tourcreated, to_datevalid as datevalid, case when len(isnull(tl_webhttp, '')) > 0 then ('<a href=''' + tl_webhttp + ''' target=''_blank''>' + tl_nameweb + '</a>') else tl_nameweb end as tourname, dbo.mwGetSpoRegionNames(sd_tourkey) as regions,
		dbo.mwGetSpoHotelNames(sd_tourkey, 1) as hotels, CONVERT(varchar(10), (select min(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as mindate, CONVERT(varchar(10), (select max(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as maxdate
	from (select distinct sd_cnkey, sd_tourkey, sd_tlkey, sd_tourcreated, to_datevalid from dbo.mwSpoData inner join tp_tours on sd_tourkey = to_key where to_datevalid >= getdate() and (to_attribute & @spoType) > 0) as tbl inner join country on tbl.sd_cnkey = cn_key inner join turlist on tbl.sd_tlkey = tl_key
	order by cn_name, sd_tourcreated desc
else
begin
	if len(isnull(@filter, '')) != 0
		set @filter = ' and ' + @filter
	if len(isnull(@sort, '')) = 0
		set @sort = ' cn_name, sd_tourcreated desc'
	declare @sql varchar(4000)
	set @sql = 'select cn_key, cn_name, cn_namelat, sd_tourkey as tokey, sd_tlkey as tlkey, sd_tourcreated as tourcreated, to_datevalid as datevalid, case when len(isnull(tl_webhttp, '''')) > 0 then (''<a href='''''' + tl_webhttp + '''''' target=''''_blank''''>'' + tl_nameweb + ''</a>'') else tl_nameweb end as tourname, dbo.mwGetSpoRegionNames(sd_tourkey) as regions,
		dbo.mwGetSpoHotelNames(sd_tourkey, 1) as hotels, CONVERT(varchar(10), (select min(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as mindate, CONVERT(varchar(10), (select max(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as maxdate
	from (select distinct sd_cnkey, sd_tourkey, sd_tlkey, sd_tourcreated, to_datevalid from dbo.mwSpoData inner join tp_tours on sd_tourkey = to_key where to_datevalid >= getdate() and (to_attribute & ' + ltrim(rtrim(@spoType)) + ') > 0 ' + @filter + ') as tbl inner join country on tbl.sd_cnkey = cn_key inner join turlist on tbl.sd_tlkey = tl_key
	order by ' + @sort
	exec(@sql)
end
end

go
grant exec on [dbo].[mwGetSpoList] to public
go

--090120(AlterTurList).sql
if not exists(select id from syscolumns where id = OBJECT_ID('tbl_TurList') and name = 'TL_DOPDESC')
ALTER TABLE tbl_TurList ADD TL_DOPDESC text
GO
--exec sp_RefreshViewForAll TURLIST
--GO

--090120(Alter_TurList).sql
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[tbl_turList]') and name = 'TL_Attribute')
	alter table dbo.tbl_turList add  TL_Attribute int not null default 0
GO

EXEC sp_refreshviewforall 'TURLIST'
GO

--090116(AlterTable_Country).sql
if not exists(select id from syscolumns where id = OBJECT_ID('tbl_Country') and name = 'CN_PassportMinDur')
	alter table dbo.tbl_Country add CN_PassportMinDur int null
go

exec sp_RefreshViewForAll 'Country'
go

--090122(mwGetFullHotelNames).sql
if exists(select id from sysobjects where name='mwGetFullHotelNames' and xtype='fn')
	drop function dbo.mwGetFullHotelNames
go

create function [dbo].[mwGetFullHotelNames](@tikey int, @separator varchar(10), @fullPansionName smallint,
	@hotelOnly smallint, @showStars smallint)
returns varchar(8000)
as
begin
	declare @result varchar(8000)
	set @result = ''
	select @result = @result + case isnull(hd_http, '') 
					when '' then ltrim(rtrim(isnull(hd_name, ''))) + '&nbsp;' + (case @showStars when 0 then '' else hd_stars end) 
					else '<a href=''' + ltrim(rtrim(hd_http)) + ''' target=''_blank''>' + isnull(hd_name, '') + '&nbsp;' + (case @showStars when 0 then '' else isnull(hd_stars, '') end) + '</a>'
					end
				+ case @hotelOnly 
					when 0 then '&nbsp;(' + isnull(rs_name, ct_name) + '),&nbsp;' + (case @fullPansionName when 0 then isnull(pn_code, '') else isnull(pn_name, '') end) 
					else '' 
					end
				+ @separator
	from tp_services ts inner join tp_servicelists tl with(nolock) on tl.tl_tskey = ts.ts_key
		inner join hoteldictionary with(nolock) on (ts_svkey = 3 and ts_code = hd_key)
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		inner join pansion with(nolock) on ts_subcode2 = pn_key
		left outer join resorts with(nolock) on (hd_rskey = rs_key)
	where tl.tl_tikey = @tikey
	order by ts_day

	declare @len int
	set @len = len(@result)
	if(@len > 0)
		set @result = substring(@result, 1, @len - len(@separator))
	return @result
end
go

grant exec on dbo.mwGetFullHotelNames to public
go

--090120(mwCleaner).sql
if exists(select id from sysobjects where name='mwCleaner' and xtype='p')
	drop procedure [dbo].[mwCleaner]
go

create proc [dbo].[mwCleaner] as
begin
	delete from dbo.tp_turdates where td_date < getdate()
	delete from dbo.tp_prices where tp_dateend < getdate()
	delete from dbo.tp_servicelists where tl_tikey not in (select tp_tikey from tp_prices)
	delete from dbo.tp_lists where ti_key not in (select tp_tikey from tp_prices)
	delete from dbo.tp_services where ts_key not in (select tl_tskey from tp_servicelists)
	delete from dbo.tp_tours where to_key not in (select ti_tokey from tp_lists)
	delete from dbo.mwPriceDataTable where pt_tourdate < getdate()
	delete from dbo.mwSpoDataTable where sd_tourkey not in (select pt_tourkey from dbo.mwPriceDataTable)
	delete from dbo.mwPriceDurations where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable)
	delete from dbo.mwPriceHotels where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable)
end
go

grant exec on [dbo].[mwCleaner] to public
go

--090119(mwCreateCleanerJob).sql
--- До этого скрипта необходимо прогнать скрипт для mwCleaner ---

----------------------------------------------------------------------------------
----- НЕОБХОДИМО ЗАДАТЬ НАЗВАНИЯ РАБОЧЕЙ БАЗЫ и уполномоченного ПОЛЬЗОВАТЕЛЯ -----
----              перед вызовом, создаваемой хранимой процедуры              -----
----------------------------------------------------------------------------------

if exists(select id from sysobjects where name='mwCreateCleanerJob' and xtype='p')
	drop procedure dbo.mwCreateCleanerJob
go

CREATE PROCEDURE [dbo].[mwCreateCleanerJob] 
	@DataBaseName nvarchar(30) = N'avalon',
	@OwnerName nvarchar(30) = N'sa'
AS
BEGIN
	DECLARE @JobName nvarchar(40)
	SET @JobName = N'mwCleaner_' + @DataBaseName
	BEGIN TRANSACTION            
		DECLARE @JobID BINARY(16)  
		DECLARE @ReturnCode INT    
		SELECT @ReturnCode = 0     
	IF (SELECT COUNT(*) FROM msdb.dbo.syscategories WHERE name = N'[Uncategorized (Local)]') < 1 
		EXECUTE msdb.dbo.sp_add_category @name = N'[Uncategorized (Local)]'
	
	  -- Delete the job with the same name (if it exists)
	  SELECT @JobID = job_id     
	  FROM   msdb.dbo.sysjobs    
	  WHERE (name = @JobName)       
	  IF (@JobID IS NOT NULL)    
	  BEGIN  
	  -- Check if the job is a multi-server job  
	  IF (EXISTS (SELECT  * 
	              FROM    msdb.dbo.sysjobservers 
	              WHERE   (job_id = @JobID) AND (server_id <> 0))) 
	  BEGIN 
	    -- There is, so abort the script 
	    -- RAISERROR (N'Unable to import job since there is already a multi-server job with this name.', 16, 1) 
	    GOTO QuitWithRollback  
	  END 
	  ELSE 
	    -- Delete the [local] job 
	    EXECUTE msdb.dbo.sp_delete_job @job_name = @JobName
	    SELECT @JobID = NULL
	  END 
	
	BEGIN 
	
	  -- Add the job
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_job @job_id = @JobID OUTPUT , @job_name = @JobName, @owner_login_name = @OwnerName, @description = N'Remove not actual pricelists', @category_name = N'[Uncategorized (Local)]', @enabled = 1, @notify_level_email = 0, @notify_level_page = 0, @notify_level_netsend = 0, @notify_level_eventlog = 2, @delete_level= 0
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the job steps
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobstep @job_id = @JobID, @step_id = 1, @step_name = N'mwCleaner', @command = N'exec mwCleaner', @database_name = @DataBaseName, @server = N'', @database_user_name = N'', @subsystem = N'TSQL', @cmdexec_success_code = 0, @flags = 0, @retry_attempts = 0, @retry_interval = 1, @output_file_name = N'', @on_success_step_id = 0, @on_success_action = 1, @on_fail_step_id = 0, @on_fail_action = 2
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	  EXECUTE @ReturnCode = msdb.dbo.sp_update_job @job_id = @JobID, @start_step_id = 1 
	
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the job schedules
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id = @JobID, @name = N'Everyday', @enabled = 1, @freq_type = 4, @active_start_date = 20090101, @active_start_time = 30000, @freq_interval = 1, @freq_subday_type = 1, @freq_subday_interval = 0, @freq_relative_interval = 0, @freq_recurrence_factor = 0, @active_end_date = 99991231, @active_end_time = 235959
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the Target Servers
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @JobID, @server_name = N'(local)' 
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	END
	COMMIT TRANSACTION          
	GOTO   EndSave              
	QuitWithRollback:
	  IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION 
	EndSave: 
END
go

grant exec on dbo.mwCreateCleanerJob to public
go
--090110(FillMasterWebSearchFields).sql
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



ALTER   procedure [dbo].[FillMasterWebSearchFields](@tokey int = null)
as
begin
create table #tmpHotelData (
	thd_tourkey int, 
	thd_firsthdkey int,
	thd_firstpnkey int, 
	thd_cnkey int, 
	thd_tlkey int, 
	thd_isenabled smallint, 
	thd_tourcreated datetime, 
	thd_hdstars varchar(15), 
	thd_ctkey int, 
	thd_rskey int, 
	thd_hdkey int, 
	thd_hdpartnerkey int, 
	thd_hrkey int, 
	thd_rmkey int, 
	thd_rckey int, 
	thd_ackey int, 
	thd_pnkey int, 
	thd_hdmain smallint,
	thd_firsthotelday int,
	thd_ctkeyfrom int, 
	thd_ctkeyto int, 
	thd_apkeyfrom int, 
	thd_apkeyto int,
	thd_tourtype int,
	thd_cnname varchar(200),
	thd_tourname varchar(200),
	thd_hdname varchar(200),
	thd_ctname varchar(200),
	thd_rsname varchar(200),
	thd_ctfromname varchar(200),
	thd_cttoname varchar(200),
	thd_tourtypename varchar(200),
	thd_pncode varchar(50),
	thd_hdorder int,
	thd_hotelkeys varchar(256),
	thd_pansionkeys varchar(256),
	thd_hotelnights varchar(256)
)

create table #tempPriceTable(
	[pt_mainplaces] [int] NULL ,
	[pt_addplaces] [int] NULL ,
	[pt_main] [smallint] NULL ,
	[pt_tourvalid] [datetime] NULL ,
	[pt_tourcreated] [datetime] NULL ,
	[pt_tourdate] [datetime] NOT NULL,
	[pt_days] [int] NULL ,
	[pt_nights] [int] NULL ,
	[pt_cnkey] [int] NULL ,
	[pt_ctkeyfrom] [int] NULL ,
	[pt_apkeyfrom] [int] NULL ,
	[pt_ctkeyto] [int] NULL ,
	[pt_apkeyto] [int] NULL ,
	[pt_ctkeybackfrom] [int] NULL,
	[pt_ctkeybackto] [int] NULL,
	[pt_tourkey] [int] NOT NULL,
	[pt_tourtype] [int] NULL ,
	[pt_tlkey] [int] NULL ,
	[pt_pricelistkey] [int] NULL ,
	[pt_pricekey] [int] NOT NULL,
	[pt_price] [float] NULL ,
	[pt_hdkey] [int] NULL ,
	[pt_hdpartnerkey] [int] null,
	[pt_rskey] [int] NULL ,
	[pt_ctkey] [int] NULL ,
	[pt_hdstars] [varchar] (12) NULL ,
	[pt_pnkey] [int] NULL ,
	[pt_hrkey] [int] NULL ,
	[pt_rmkey] [int] NULL ,
	[pt_rckey] [int] NULL ,
	[pt_ackey] [int] NULL ,
	[pt_childagefrom] [int] NULL ,
	[pt_childageto] [int] NULL ,
	[pt_childagefrom2] [int] NULL ,
	[pt_childageto2] [int] NULL ,
	[pt_hdname] [varchar] (60),
	[pt_tourname] [varchar] (128),
	[pt_pnname] [varchar] (30),
	[pt_pncode] [varchar] (3),
	[pt_rmname] [varchar] (35),
	[pt_rmcode] [varchar] (8),
	[pt_rcname] [varchar] (35),
	[pt_rccode] [varchar] (8),
	[pt_acname] [varchar] (30),
	[pt_accode] [varchar] (15),
	[pt_rsname] [varchar] (20),
	[pt_ctname] [varchar] (50),
	[pt_rmorder] [int] NULL ,
	[pt_rcorder] [int] NULL ,
	[pt_acorder] [int] NULL ,
	[pt_rate] [varchar] (3),
	[pt_toururl] [varchar] (128),
	[pt_hotelurl] [varchar] (254),
	[pt_isenabled] [smallint] NULL,
	[pt_chkey] int null,
	[pt_chbackkey] int null,
	[pt_hdday] int null,
	[pt_hdnights] int null,
	[pt_chday] int null,
	[pt_chpkkey] int null,
	[pt_chprkey] int null,
	[pt_chbackday] int null,
	[pt_chbackpkkey] int null,
	[pt_chbackprkey] int null,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_hotelnights varchar(256)
)

declare @mwAccomodationPlaces varchar(254)
declare @mwRoomsExtraPlaces varchar(254)
declare @mwSearchType int
declare @sql varchar(8000)
declare @countryKey int
declare @cityFromKey int

if @tokey is null
begin
	exec dbo.mwCleaner

	update tp_lists
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)

	update tp_lists
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists
					inner join tp_services on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services
					inner join dbo.tp_servicelists on tl_tskey = ts_key 
				where tl_tikey = ti_key)

	update tp_lists
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists 
					inner join tp_services on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)

	update tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey) 

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_ctkeyfrom = ts_subcode2, 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where to_key = ti_tokey  

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and ts_ctkey = tl_ctdeparturekey
		and ti_tokey = to_key
	
	-- _ключ_ аэропорта вылета
	update tp_lists 
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	-- _ключ_ аэропорта прилета
	update tp_lists 
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	
	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_firsthdkey = hd_key


	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey,
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays
	from tp_lists
		inner join tp_tours on ti_tokey = to_key
		inner join tp_servicelists on tl_tikey = ti_key 
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary on ts_code = hd_key
		inner join hotelrooms on hr_key = ts_subcode1
		inner join turList on turList.tl_key = to_trkey
		inner join country on cn_key = to_cnkey
		inner join citydictionary on ct_key = hd_ctkey
		inner join tiptur on tp_key = tl_tip
		inner join pansion on pn_key = ts_subcode2
	where to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0

	exec dbo.mwDropAllPriceTablesIndexes		

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	truncate table dbo.mwSpoDataTable
	truncate table dbo.mwPriceHotels
	truncate table dbo.mwPriceDurations
	if(@mwSearchType = 0)
		exec sp_executesql N'truncate table dbo.mwPriceDataTable'
	
	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists inner join tp_tours on ti_tokey = to_key

	declare cur cursor fast_forward read_only for select distinct isnull(thd_cnkey, 0), isnull(thd_ctkeyfrom, 0) from #tmpHotelData
	open cur
	fetch next from cur into @countryKey, @cityFromKey
	while @@fetch_status = 0
	begin
		if (@mwSearchType != 0)
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			exec dbo.mwTruncatePriceTable @countryKey, @cityFromKey
		end		
		set @sql = '
		declare @mwAccomodationPlaces varchar(254)
		declare @mwRoomsExtraPlaces varchar(254)
			set @mwAccomodationPlaces = ''' + ltrim(rtrim(@mwAccomodationPlaces)) + '''
		set @mwRoomsExtraPlaces = ''' + ltrim(rtrim(@mwRoomsExtraPlaces)) + '''
			insert into'
		if (@mwSearchType = 0)
			set @sql = @sql + ' mwPriceDataTable '
		else
			set @sql = @sql + ' '+dbo.mwGetPriceTableName(@countryKey, @cityFromKey)+' ' 

		set @sql = @sql +  ' with(rowlock) (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights
		)
		select 
			(case when @mwAccomodationPlaces = ''0''
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> ''0'' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			tl_nameweb, 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			to_isenabled,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays
		from tp_tours
			inner join turList on to_trkey = tl_key
			inner join tp_lists on ti_tokey = to_key
			inner join tp_prices on tp_tikey = ti_key
			inner join tp_turdates on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary on ti_firsthdkey = hd_key
			inner join hotelrooms on ti_firsthrkey = hr_key
			inner join pansion on ti_firstpnkey = pn_key
			inner join rooms on hr_rmkey = rm_key
			inner join roomscategory on hr_rckey = rc_key
			inner join accmdmentype on hr_ackey = ac_key
			inner join citydictionary on hd_ctkey = ct_key
			left outer join resorts on hd_rskey = rs_key
		where td_date >= getdate() and to_cnkey = ' + cast(@countryKey as varchar(30)) + ' and isnull(ti_ctkeyfrom, 0) = ' + cast(@cityFromKey as varchar(30))
--	print @sql
		exec(@sql)
	

		if (@mwSearchType != 0)
			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
		fetch next from cur into @countryKey, @cityFromKey
	end		

	close cur
	deallocate cur

	if (@mwSearchType = 0)
		exec dbo.mwCreateAllPriceTablesIndexes
end
else
begin
	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey


	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey


	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey

	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
--

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
	
	delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey




	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
		exec(@sql)
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end
end


insert into dbo.mwPriceHotels (
	sd_tourkey,
	sd_mainhdkey,
	sd_mainpnkey,
	sd_hdkey,
	sd_hdstars,
	sd_hdctkey,
	sd_hdrskey,
	sd_hrkey,
	sd_rmkey,
	sd_rckey,
	sd_ackey,
	sd_pnkey,
	sd_hdorder)
select distinct 
	thd_tourkey, 
	thd_firsthdkey, 
	thd_firstpnkey,
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_hrkey, 
	thd_rmkey, 
	thd_rckey, 
	thd_ackey, 
	thd_pnkey,
	thd_hdorder
from #tmpHotelData

-- информация об отелях
insert into mwSpoDataTable(
	sd_tourkey, 
	sd_cnkey, 
	sd_hdkey, 
	sd_hdstars, 
	sd_ctkey, 
	sd_rskey, 
	sd_ctkeyfrom, 
	sd_ctkeyto, 
	sd_tlkey, 
	sd_isenabled, 
	sd_tourcreated,
	sd_main,
	sd_pnkey,
	sd_tourtype,
	sd_cnname,
	sd_tourname,
	sd_hdname,
	sd_ctname,
	sd_rsname,
	sd_ctfromname,
	sd_cttoname,
	sd_tourtypename,
	sd_pncode,
	sd_hotelkeys,
	sd_pansionkeys
) 
select distinct 
	thd_tourkey, 
	thd_cnkey, 
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_ctkeyfrom, 
	thd_ctkeyto, 
	thd_tlkey, 
	thd_isenabled, 
	thd_tourcreated,
	thd_hdmain,
	thd_pnkey,
	thd_tourtype,
	thd_cnname,
	thd_tourname,
	thd_hdname,
	thd_ctname,
	thd_rsname,
	thd_ctfromname,
	thd_cttoname,
	thd_tourtypename,
	thd_pncode,
	thd_hotelkeys,
	thd_pansionkeys
from #tmpHotelData 
where thd_hdmain > 0
end

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--CreateTable_Communications.sql
if not exists(select * from dbo.sysobjects where id = OBJECT_ID(N'[dbo].[Communications]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[Communications](
      [CM_Id] [int] IDENTITY(1,1) NOT NULL,
      [CM_DGKey] [int] NOT NULL,
      [CM_PRKey] [int] NOT NULL,
      [CM_LastState] [int] NOT NULL,
      [CM_LastDate] [datetime] NOT NULL,
      [CM_Descriptions] [varchar](255) COLLATE Latin1_General_CI_AS NOT NULL,
      [CM_Price] [money] NOT NULL DEFAULT (0),
      [CM_ConfirmationDate] [datetime] NULL,
      [CM_ChangeLevel] [smallint] NULL,
      [CM_ChangeDate] [datetime] NULL,
      [CM_CreateUser] [int] NOT NULL,
      [CM_CreateDate] [datetime] NOT NULL CONSTRAINT [DF_Communications_CM_CreateDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Communications] PRIMARY KEY CLUSTERED 
(
      [CM_Id] ASC
) ON [PRIMARY]
) ON [PRIMARY]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Communications_Dogovor]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE [dbo].[Communications]  WITH CHECK ADD CONSTRAINT [Communications_Dogovor] FOREIGN KEY([CM_DGKey]) REFERENCES [dbo].[tbl_Dogovor] ([DG_Key])
GO

ALTER TABLE [dbo].[Communications] CHECK CONSTRAINT [Communications_Dogovor]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Communications_Partner]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE [dbo].[Communications]  WITH CHECK ADD  CONSTRAINT [Communications_Partner] FOREIGN KEY([CM_PRKey]) REFERENCES [dbo].[tbl_Partners] ([PR_KEY])
GO

ALTER TABLE [dbo].[Communications] CHECK CONSTRAINT [Communications_Partner]
GO

grant select, update, insert, delete on dbo.Communications to public
GO

--090129(AlterTableMessges).sql
alter table dbo.Messages alter column MS_LGId int null
go

-- sp_GetServiceCost.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetServiceCost] 
GO
CREATE PROCEDURE [dbo].[GetServiceCost] 
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0, 
		@sellDate dateTime, @netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output
as
--<DATE>2009-01-28</DATE>
---<VERSION>7.2.21.1</VERSION>

SET DATEFIRST 1
DECLARE @tourlong int

Set @sellDate = ISNULL(@sellDate,GetDate())

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (14,6), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint


set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END

	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

	if @UseTypeDivisionMode > 0
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
					and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
	else
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC

	--1, 
	open costCursor

	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

If @days >1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	If @@fetch_status = 0
	BEGIN

		declare @TMPTable Table 
 		( CL_Date datetime,
		CL_CostNetto decimal(14,4),
		CL_Cost decimal(14,4),
		CL_Discount smallint,
		CL_Type smallint,
		CL_Rate varchar(2),
		CL_Course decimal(14,4),
		CL_Pax smallint default 1,
		CL_ByDay smallint,
		CL_Part smallint,
		CL_Profit decimal(14,4))

		DECLARE @temp_date DATETIME
		SET @temp_date = @date + @days - 1

		while @temp_date >= @date 
		BEGIN -- begin while @temp_date >= @date 
			insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
			set @temp_date = @temp_date - 1 
		END  -- end while @temp_date >= @date 
	END
	Else
	BEGIN
		close costCursor
		deallocate costCursor
		return 0
	END

	set @COST_ID = 1 --идетификатор уникальности цены
	If @CS_ByDay = 2
		Set @nCostByDayExists = 1

	If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
		insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
END

set @NotCalculatedCosts = 1
set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
BEGIN -- While (@@fetch_status = 0)
	-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
	Set @IsFetchNormal = 1
		-- если не указаны даты периодов, то значит указаны даты заедов
		-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

	If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
		if CHARINDEX ( @WeekDate, @CS_Week ) = 0
			Set @IsFetchNormal = 0
		Else
			Set @CS_Week = ''

	If @tourlong > 0 and @svKey = 1
	Begin		
		If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
			Set @IsFetchNormal = @IsFetchNormal
		else
			Set @IsFetchNormal = 0
	end     

	If @svKey != 1
	begin
		If @CS_LongMin is not null and @CS_LongMin > @days
			Set @IsFetchNormal = 0
	end

	If (@sellDate between @CS_DateSellBeg and (@CS_DateSellEnd + 1)) or (@CS_DateSellBeg is null)
		Set @IsFetchNormal = @IsFetchNormal 
	else
		Set @IsFetchNormal = 0

	If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = (@date + @days - 1) -- смотрим может есть цена за период точно совпадает с периодом действия услуги
		Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
			CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
--		Set @IsFetchNormal = 0
	If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
	BEGIN
		If CHARINDEX ( @WeekDate, @CS_Week ) > 0
			Set @IsFetchNormal = @IsFetchNormal 
		Else
			Set @IsFetchNormal = 0
	END

	If @Days = 1 and @CS_Date > @date
		Set @IsFetchNormal = 0

	If @Days = 1 and @CS_ByDay in (3,4)
		Set @IsFetchNormal = 0

--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
/*
	If 	@CS_CheckInDateBEG is not null
	BEGIN
		Set @CS_Date = null
		Set @CS_DateEnd = null
	END
*/
		If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
		BEGIN			--цены подходят для поиска
			Set @CS_Date = (isnull(@CS_Date,@date))
			Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

			If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
			BEGIN
				update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
						CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
				if not exists (select * from @TMPTable where CL_Date = @date + @days)
					insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
				Set @nCostByDayExists = 1	
			END

			if @CS_Date < @date
				Set @CS_Date = @date
			if @CS_DateEnd > @date + @days
				Set @CS_DateEnd = @date + @days
			Set @CS_Discount = ISNULL(@CS_Discount,0)
			Set @TMP_Number_Period = null

			if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
			BEGIN -- if @CS_ByDay = 3
				if (@CS_DateEnd - @CS_Date + 1) >= 7
				BEGIN
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
					while @TMP_Number >= 7
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
	
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @TMP_Number = @TMP_Number - 7
						SET @TMP_Date = @TMP_Date + 7
						SET @COST_ID = @COST_ID + 1
					END
				END
			END	-- if @CS_ByDay = 3

	--		print 'поиск'
			if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
			BEGIN -- if @CS_ByDay = 0
	--			print 'период'
				select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
					Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

				if @CS_Date < @TMP_Date and @date < @TMP_Date
				BEGIN
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
			--		print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN					
						select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
						if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
						BEGIN
							select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
								Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
						END
					END
					Set @TMP_Number_Period = null
				END

				if @CS_Long is null or @CS_Long > @TMP_Number
				BEGIN
					--если предыдущий период захватывается полностью, то его надо включить
					--это делается только в случае, если цену указана за период
			--		print @TMP_Date + @TMP_Number
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
		--			print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN 
						select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
	--					print @TMP_Date_Period
						if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
							Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
					END
				END

				if @CS_Long is not null and @CS_Long < @TMP_Number
					set @TMP_Number = @CS_Long

				if @CS_LongMin is null or @CS_LongMin <= @TMP_Number
				BEGIN
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
						CL_Pax = 1, CL_Profit = @CS_Profit
						WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
					UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
					SET @COST_ID = @COST_ID + 1
				END
			END	-- if @CS_ByDay = 0
	
			if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
			BEGIN -- if @CS_ByDay = 1/2
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				if 1=1 -- временная заглушка, 
				BEGIN  -- если Цена удовлетворяет условиям
					SET @DayOfWeeks = @CS_Week
					While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
					BEGIN
						select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
						update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
							Where CL_Part = @TMP_Number
					END				

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

					SET @COST_ID = @COST_ID + 1
				END   -- если Цена удовлетворяет условиям
			END	-- if @CS_ByDay = 1

			if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
			BEGIN -- if @CS_ByDay = 4
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				SET @DayOfWeeks = ''
				Set @CS_Week = REPLACE(@CS_Week,'.','');

				if @CS_Week != ''
				BEGIN			
					Set @TMP_Number = 1
					Set @DayOfWeeks = LEFT(@CS_Week,1)
					while @TMP_Number < LEN(@CS_Week)
					BEGIN
						Set @TMP_Number = @TMP_Number + 1
						Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
					END
				END
				
				-- доп.ночи могут только добивать в конец, первый день точно не к ним
				If @CS_Date = @date
					Set @CS_Date = @CS_Date + 1

				IF @DayOfWeeks = ''
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1)
				ELSE
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
				SET @COST_ID = @COST_ID + 1
			END	-- if @CS_ByDay = 4
			select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
		END -- цены подходят для поиска и есть продолжительность
		ELSE
			If @IsFetchNormal = 1
				Set @NotCalculatedCosts = 0

	If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
	BEGIN
		fetch next from costCursor 
			into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
					@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
					@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1
			Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
		Else
			Set @FindCostByPeriod = 0
	END
END -- While (@@fetch_status = 0)
close costCursor
deallocate costCursor

--if @svKey = 3 
--	insert into TMP (CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit) select CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit from @TMPTable

if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
BEGIN
	set @nettoDetail = '='
	set @sDetailed = '='
	while exists (select * from @TMPTable where CL_Course != 0)
	begin
		SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
						@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
		from			@TMPTable 
		where			CL_Course != 0	 
		Order By		CL_Date

		Set @TMP_Number = 0
		Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
		UPDATE @TMPTable SET CL_Course = 0 WHERE CL_Part = @TMP_Number_Part
		if @nettoDetail != '='
			Set @nettoDetail = @nettoDetail + ' +'
		if @sDetailed != '='
			Set @sDetailed = @sDetailed + ' +'

		Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
		Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

		if @TMP_Number != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
		end

		if @TMP_Number_Pax != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
		end

		if @TMP_Number_Course != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
		end
	end

	If ISNULL(@profitValue,0) > 0
		Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

	if @marginCalcValue > 0
		Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

	If ISNULL(@discount,0) > 0
		Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
END
GO
GRANT EXECUTE ON [dbo].[GetServiceCost] TO PUBLIC 
GO
--090402(add_setting).sql
if not exists(select id from syscolumns where id = OBJECT_ID('Setting') and name = 'ST_DATE')
ALTER TABLE Setting ADD ST_DATE smalldatetime
GO

if exists(select id from sysobjects where name='REPLACEQUOTE' and xtype='p')
	drop procedure dbo.REPLACEQUOTE
go

if exists(select * from dbo.sysobjects where id = object_id(N'[dbo].[Key_Quotes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	DROP TABLE dbo.Key_Quotes
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DELETEDOGLIST]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
Drop TRIGGER [dbo].[T_DELETEDOGLIST] 
Go

if exists(select id from sysobjects where name='DeleteDogList' and xtype='p')
	drop procedure dbo.DeleteDogList
go

if exists(select id from sysobjects where name='Delete_Quotes' and xtype='p')
	drop procedure dbo.Delete_Quotes
go

if exists(select id from sysobjects where name='CheckQuotes' and xtype='p')
	drop procedure dbo.CheckQuotes
go

if exists(select id from sysobjects where name='CheckAndTakeQuotes' and xtype='p')
	drop procedure dbo.CheckAndTakeQuotes
go

if exists(select id from sysobjects where name='Insert_Quotes' and xtype='p')
	drop procedure dbo.Insert_Quotes
go

if exists(select id from sysobjects where name='ReleaseQuotes' and xtype='p')
	drop procedure dbo.ReleaseQuotes
go

if exists(select id from sysobjects where name='MOVING_QUOTES' and xtype='p')
	drop procedure dbo.MOVING_QUOTES
go

if exists(select id from sysobjects where name='Justify_Quotes' and xtype='p')
	drop procedure dbo.Justify_Quotes
go

if exists(select id from sysobjects where name='DogovorTakeQuotes' and xtype='p')
	drop procedure dbo.DogovorTakeQuotes
go

if exists(select id from sysobjects where name='UPDATEDOGLIST' and xtype='p')
	drop procedure dbo.UPDATEDOGLIST
go

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_UpdateDogList]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
Drop TRIGGER [dbo].[T_UpdateDogList] 
Go

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
Drop TRIGGER [dbo].[T_DogovorListUpdate] 
Go
--2007.2.21  date2009-01-22

--sp_CurrentUser.sql
--5.2-7.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CurrentUser]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[CurrentUser] 
GO
CREATE PROCEDURE [dbo].[CurrentUser] 
(
--<VERSION>2005.4.21</VERSION>
	@sUser varchar(25) output	
)
AS
	declare @sUserID varchar(255)
	declare @nUserKey int
	declare @nUserPRKey int
	declare @nUserDepartmentKey int
	declare @sUserLat varchar(25)

	--Set @sUserID = dbo.fn_GetUserAlias(USER)
	select @sUserID = SYSTEM_USER
	Exec dbo.GetUserInfo @sUserID, @nUserKey, @sUser output, @nUserPRKey, @nUserDepartmentKey, @sUserLat output
GO
GRANT EXECUTE ON dbo.CurrentUser TO PUBLIC 
GO

--081217(Delete_DuplicatesTurDates).sql
--5.2-7.2
declare @trKey int, @tdDate datetime
declare datesCursor cursor local fast_forward for
	select TD_DATE, TD_TRKEY
	from dbo.TurDate
	group by TD_TRKEY, TD_DATE
	having count(TD_TRKEY) > 1

open datesCursor
fetch next from datesCursor into @tdDate, @trKey
While (@@fetch_status = 0)
BEGIN
	delete from dbo.TurDate where TD_ID IN (select TD_ID from dbo.TurDate where TD_DATE = @tdDate and TD_TRKEY = @trKey) and TD_ID != (select top 1 TD_ID from dbo.TurDate where TD_DATE = @tdDate and TD_TRKEY = @trKey)
	fetch next from datesCursor into @tdDate, @trKey	
END

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UN_TurDate_Date_TRKey]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE dbo.TurDate ADD CONSTRAINT UN_TurDate_Date_TRKey UNIQUE (TD_TRKEY, TD_DATE)
GO

--T_VisaSTDChange.sql
--7.2 ONLY
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_VisaSTDChange]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	DROP TRIGGER [T_VisaSTDChange]
GO

CREATE TRIGGER [T_VisaSTDChange]
ON [dbo].[VisaServiceToDocs] 
FOR INSERT, UPDATE, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
	DECLARE @VSD_ID int

    DECLARE @OVSD_VTSID int
	DECLARE @OVSD_VDID int
	DECLARE @OVSD_Date varchar(16)
	DECLARE @OVSD_Status smallint

	DECLARE @NVSD_VTSID int
	DECLARE @NVSD_VDID int
	DECLARE @NVSD_Date varchar(16)
	DECLARE @NVSD_Status smallint

	DECLARE @nHIID int
	DECLARE @sDGCode varchar(10)
	DECLARE @nDGKey	int
	DECLARE @sDocumentName varchar(100)
	DECLARE @nDocumentKey int
	DECLARE @sHistoryText varchar(254)
	DECLARE @sTuristName varchar(50)
	DECLARE @sVisaName varchar(190)
	
	DECLARE @sOldStatus varchar(255), @sNewStatus varchar(255)

	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int

	SELECT @nDelCount = COUNT(*) FROM DELETED
	SELECT @nInsCount = COUNT(*) FROM INSERTED

	IF (@nDelCount = 0)
	BEGIN
		SET @sMod = 'INS'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				null, null, null, null,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM INSERTED N 
	END
	ELSE IF (@nInsCount = 0)
	BEGIN
		SET @sMod = 'DEL'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	O.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				null, null, null, null
		FROM DELETED O 
	END
	ELSE
	BEGIN
		SET @sMod = 'UPD'
		DECLARE cur_VisaServiceToDocs CURSOR FOR 
		SELECT	N.VSD_ID,
				O.VSD_VTSID, O.VSD_VDID, CONVERT( char(11), O.VSD_Date, 104) + CONVERT( char(5), O.VSD_Date, 108), O.VSD_Status,
				N.VSD_VTSID, N.VSD_VDID, CONVERT( char(11), N.VSD_Date, 104) + CONVERT( char(5), N.VSD_Date, 108), N.VSD_Status
		FROM DELETED O, INSERTED N 
		WHERE N.VSD_ID = O.VSD_ID	
	END

	OPEN cur_VisaServiceToDocs

    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @OVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	
	WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (	@sMod = 'INS' OR @sMod = 'DEL' OR 
			ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0) OR 
			ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0)   )
		BEGIN
			------------Запись в историю--------------------------------------------------------------------
		
			SELECT @sDGCode = DL_DGCOD, @nDGKey = DL_DGKEY, @sDocumentName = VD_Name, @nDocumentKey = VD_ID, @sTuristName = LEFT(ISNULL(TU_NAMERUS, '') + ' ' + ISNULL(TU_SHORTNAME,''), 50), @sVisaName =  LEFT(ISNULL(DL_NAME, ''), 190)
			FROM VisaDocuments, VisaServiceToDocs, VisaTouristService, TuristService, tbl_DogovorList, tbl_Turist
			WHERE VD_ID = VSD_VDID AND VSD_VTSID = VTS_ID AND VTS_TUIDKEY = TU_IDKEY AND DL_KEY = TU_DLKEY AND TU_KEY = TU_TUKEY AND VSD_ID = @VSD_ID

			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 15, @VSD_ID, @sMod, @sVisaName, @sTuristName, 0, ''

			If ( @sMod = 'INS' OR @sMod = 'DEL' )
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15001, null, @sDocumentName, null, @nDocumentKey, null, null, 0
			
			if (ISNULL(@OVSD_Status, 0) != ISNULL(@NVSD_Status, 0))
			begin
				if @OVSD_Status = 0
					set @sOldStatus = ''
				else if @OVSD_Status = 1
					set @sOldStatus = 'Требуется предоставить'
				else
					set @sOldStatus = @OVSD_Status

				if @NVSD_Status = 0
					set @sNewStatus = ''
				else if @NVSD_Status = 1
					set @sNewStatus = 'Требуется предоставить'
				else
					set @sNewStatus = @NVSD_Status

				EXECUTE dbo.InsertHistoryDetail @nHIID , 15003, @sOldStatus, @sNewStatus, @OVSD_Status, @NVSD_Status, null, null, 0
			end
			
			if (ISNULL(@OVSD_Date, 0) != ISNULL(@NVSD_Date, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 15002, @OVSD_Date, @NVSD_Date, null, null, null, null, 0			
		
		END

	    FETCH NEXT FROM cur_VisaServiceToDocs 
				INTO @VSD_ID, 
				@OVSD_VTSID, @NVSD_VDID, @OVSD_Date, @OVSD_Status,
				@NVSD_VTSID, @NVSD_VDID, @NVSD_Date, @NVSD_Status
	END
  CLOSE cur_VisaServiceToDocs
  DEALLOCATE cur_VisaServiceToDocs
END
GO

--T_DogovorListUpdate.sql
--5.2-7.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2005.2.41.2</VERSION>
--<DATE>2008-09-03</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					set @nDGSorCode_New = 7				--ОК
					IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
					BEGIN
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
						BEGIN
							set @nDGSorCode_New = 3			--Wait-List
							set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
						END
					END
					IF @nDGSorGlobalCode_New!=3 
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
						BEGIN
							set @nDGSorCode_New = 4			--Не подтвержден
							set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
						END

					if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
					BEGIN
						update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
					END
				END
			END
		END
    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

--090114.sql
--5.2-7.2
if not exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_IsOutgoing')
	ALTER TABLE [dbo].[DogovorMessages] ADD DM_IsOutgoing bit not null default 1
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Type')
	exec('UPDATE [dbo].[DogovorMessages] SET DM_IsOutgoing=DM_Type')
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Type')
	ALTER TABLE [dbo].[DogovorMessages] DROP COLUMN DM_Type
GO

CREATE PROCEDURE #renameDM_DLKey
AS
EXEC sp_rename 'DogovorMessages.DM_DLKey', 'DM_TypeCode' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_DLKey')
	EXEC #renameDM_DLKey
GO
DROP PROCEDURE #renameDM_DLKey
GO
CREATE PROCEDURE #renameDM_Remark
AS
EXEC sp_rename 'DogovorMessages.DM_DGCode', 'DM_Remark' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_DGCode')
	EXEC #renameDM_Remark
GO
DROP PROCEDURE #renameDM_Remark
GO
CREATE PROCEDURE #renameDM_CreateDate
AS
EXEC sp_rename 'DogovorMessages.DM_Date', 'DM_CreateDate' , 'COLUMN'
GO
if exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_Date')
	EXEC #renameDM_CreateDate
GO
DROP PROCEDURE #renameDM_CreateDate
GO
if not exists(select id from syscolumns where id = OBJECT_ID('DogovorMessages') and name = 'DM_TableID')
	ALTER TABLE [dbo].[DogovorMessages] ADD DM_TableID INT
GO

IF exists(Select * from sysviews where name = 'IL_Messages' and CREATOR = 'DBO')
	DROP VIEW dbo.IL_Messages
GO
CREATE VIEW dbo.IL_Messages AS 
    SELECT	DM_ID AS IM_Key,
			DM_IsOutgoing as IM_Type,
			DM_DGKey as IM_DGKey,
			DM_TypeCode as IM_DLKey,
			DM_Remark AS IM_DGCode,
			DM_Processed AS IM_Processed,
			DM_CreateDate AS IM_Date,
			DM_Text as IM_Text
	FROM	[dbo].[DogovorMessages]
WITH CHECK OPTION
GO
grant select ,insert, delete,update on  [dbo].[IL_Messages] to public 
GO

--080120(sp_mwGetSpoList).sql
--7.2 ONLY
if exists(select id from sysobjects where name='mwGetSpoList' and xtype='p')
	drop procedure dbo.mwGetSpoList
go

create proc [dbo].[mwGetSpoList] @spoType int, @sort varchar(100), @filter varchar(300)
as
begin
if (len(isnull(@sort, '')) = 0 and len(isnull(@filter, '')) = 0)
	select cn_key, cn_name, cn_namelat, sd_tourkey as tokey, sd_tlkey as tlkey, sd_tourcreated as tourcreated, to_datevalid as datevalid, case when len(isnull(tl_webhttp, '')) > 0 then ('<a href=''' + tl_webhttp + ''' target=''_blank''>' + tl_nameweb + '</a>') else tl_nameweb end as tourname, dbo.mwGetSpoRegionNames(sd_tourkey) as regions,
		dbo.mwGetSpoHotelNames(sd_tourkey, 1) as hotels, CONVERT(varchar(10), (select min(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as mindate, CONVERT(varchar(10), (select max(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as maxdate
	from (select distinct sd_cnkey, sd_tourkey, sd_tlkey, sd_tourcreated, to_datevalid from dbo.mwSpoData inner join tp_tours on sd_tourkey = to_key where to_datevalid >= getdate() and (to_attribute & @spoType) > 0) as tbl inner join country on tbl.sd_cnkey = cn_key inner join turlist on tbl.sd_tlkey = tl_key
	order by cn_name, sd_tourcreated desc
else
begin
	if len(isnull(@filter, '')) != 0
		set @filter = ' and ' + @filter
	if len(isnull(@sort, '')) = 0
		set @sort = ' cn_name, sd_tourcreated desc'
	declare @sql varchar(4000)
	set @sql = 'select cn_key, cn_name, cn_namelat, sd_tourkey as tokey, sd_tlkey as tlkey, sd_tourcreated as tourcreated, to_datevalid as datevalid, case when len(isnull(tl_webhttp, '''')) > 0 then (''<a href='''''' + tl_webhttp + '''''' target=''''_blank''''>'' + tl_nameweb + ''</a>'') else tl_nameweb end as tourname, dbo.mwGetSpoRegionNames(sd_tourkey) as regions,
		dbo.mwGetSpoHotelNames(sd_tourkey, 1) as hotels, CONVERT(varchar(10), (select min(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as mindate, CONVERT(varchar(10), (select max(td_date) from tp_turdates where td_tokey = sd_tourkey), 21) as maxdate
	from (select distinct sd_cnkey, sd_tourkey, sd_tlkey, sd_tourcreated, to_datevalid from dbo.mwSpoData inner join tp_tours on sd_tourkey = to_key where to_datevalid >= getdate() and (to_attribute & ' + ltrim(rtrim(@spoType)) + ') > 0 ' + @filter + ') as tbl inner join country on tbl.sd_cnkey = cn_key inner join turlist on tbl.sd_tlkey = tl_key
	order by ' + @sort
	exec(@sql)
end
end

go
grant exec on [dbo].[mwGetSpoList] to public
go

--090120(AlterTurList).sql
--7.2 ONLY
if not exists(select id from syscolumns where id = OBJECT_ID('tbl_TurList') and name = 'TL_DOPDESC')
ALTER TABLE tbl_TurList ADD TL_DOPDESC text
GO
--exec sp_RefreshViewForAll TURLIST
--GO

--090120(Alter_TurList).sql
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[tbl_turList]') and name = 'TL_Attribute')
	alter table dbo.tbl_turList add  TL_Attribute int not null default 0
GO

EXEC sp_refreshviewforall 'TURLIST'
GO

--090116(AlterTable_Country).sql
--7.2 ONLY
if not exists(select id from syscolumns where id = OBJECT_ID('tbl_Country') and name = 'CN_PassportMinDur')
	alter table dbo.tbl_Country add CN_PassportMinDur int null
go

exec sp_RefreshViewForAll 'Country'
go

--090122(mwGetFullHotelNames).sql
--7.2 ONLY
if exists(select id from sysobjects where name='mwGetFullHotelNames' and xtype='fn')
	drop function dbo.mwGetFullHotelNames
go

create function [dbo].[mwGetFullHotelNames](@tikey int, @separator varchar(10), @fullPansionName smallint,
	@hotelOnly smallint, @showStars smallint)
returns varchar(8000)
as
begin
	declare @result varchar(8000)
	set @result = ''
	select @result = @result + case isnull(hd_http, '') 
					when '' then ltrim(rtrim(isnull(hd_name, ''))) + '&nbsp;' + (case @showStars when 0 then '' else hd_stars end) 
					else '<a href=''' + ltrim(rtrim(hd_http)) + ''' target=''_blank''>' + isnull(hd_name, '') + '&nbsp;' + (case @showStars when 0 then '' else isnull(hd_stars, '') end) + '</a>'
					end
				+ case @hotelOnly 
					when 0 then '&nbsp;(' + isnull(rs_name, ct_name) + '),&nbsp;' + (case @fullPansionName when 0 then isnull(pn_code, '') else isnull(pn_name, '') end) 
					else '' 
					end
				+ @separator
	from tp_services ts inner join tp_servicelists tl with(nolock) on tl.tl_tskey = ts.ts_key
		inner join hoteldictionary with(nolock) on (ts_svkey = 3 and ts_code = hd_key)
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		inner join pansion with(nolock) on ts_subcode2 = pn_key
		left outer join resorts with(nolock) on (hd_rskey = rs_key)
	where tl.tl_tikey = @tikey
	order by ts_day

	declare @len int
	set @len = len(@result)
	if(@len > 0)
		set @result = substring(@result, 1, @len - len(@separator))
	return @result
end
go

grant exec on dbo.mwGetFullHotelNames to public
go

--090120(mwCleaner).sql
--7.2 ONLY
if exists(select id from sysobjects where name='mwCleaner' and xtype='p')
	drop procedure [dbo].[mwCleaner]
go

create proc [dbo].[mwCleaner] as
begin
	delete from dbo.tp_turdates where td_date < getdate()
	delete from dbo.tp_prices where tp_dateend < getdate()
	delete from dbo.tp_servicelists where tl_tikey not in (select tp_tikey from tp_prices)
	delete from dbo.tp_lists where ti_key not in (select tp_tikey from tp_prices)
	delete from dbo.tp_services where ts_key not in (select tl_tskey from tp_servicelists)
	delete from dbo.tp_tours where to_key not in (select ti_tokey from tp_lists)
	delete from dbo.mwPriceDataTable where pt_tourdate < getdate()
	delete from dbo.mwSpoDataTable where sd_tourkey not in (select pt_tourkey from dbo.mwPriceDataTable)
	delete from dbo.mwPriceDurations where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable)
	delete from dbo.mwPriceHotels where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable)
end
go

grant exec on [dbo].[mwCleaner] to public
go

--090119(mwCreateCleanerJob).sql
--7.2 ONLY
--- До этого скрипта необходимо прогнать скрипт для mwCleaner ---

----------------------------------------------------------------------------------
----- НЕОБХОДИМО ЗАДАТЬ НАЗВАНИЯ РАБОЧЕЙ БАЗЫ и уполномоченного ПОЛЬЗОВАТЕЛЯ -----
----              перед вызовом, создаваемой хранимой процедуры              -----
----------------------------------------------------------------------------------

if exists(select id from sysobjects where name='mwCreateCleanerJob' and xtype='p')
	drop procedure dbo.mwCreateCleanerJob
go

CREATE PROCEDURE [dbo].[mwCreateCleanerJob] 
	@DataBaseName nvarchar(30) = N'avalon',
	@OwnerName nvarchar(30) = N'sa'
AS
BEGIN
	DECLARE @JobName nvarchar(40)
	SET @JobName = N'mwCleaner_' + @DataBaseName
	BEGIN TRANSACTION            
		DECLARE @JobID BINARY(16)  
		DECLARE @ReturnCode INT    
		SELECT @ReturnCode = 0     
	IF (SELECT COUNT(*) FROM msdb.dbo.syscategories WHERE name = N'[Uncategorized (Local)]') < 1 
		EXECUTE msdb.dbo.sp_add_category @name = N'[Uncategorized (Local)]'
	
	  -- Delete the job with the same name (if it exists)
	  SELECT @JobID = job_id     
	  FROM   msdb.dbo.sysjobs    
	  WHERE (name = @JobName)       
	  IF (@JobID IS NOT NULL)    
	  BEGIN  
	  -- Check if the job is a multi-server job  
	  IF (EXISTS (SELECT  * 
	              FROM    msdb.dbo.sysjobservers 
	              WHERE   (job_id = @JobID) AND (server_id <> 0))) 
	  BEGIN 
	    -- There is, so abort the script 
	    -- RAISERROR (N'Unable to import job since there is already a multi-server job with this name.', 16, 1) 
	    GOTO QuitWithRollback  
	  END 
	  ELSE 
	    -- Delete the [local] job 
	    EXECUTE msdb.dbo.sp_delete_job @job_name = @JobName
	    SELECT @JobID = NULL
	  END 
	
	BEGIN 
	
	  -- Add the job
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_job @job_id = @JobID OUTPUT , @job_name = @JobName, @owner_login_name = @OwnerName, @description = N'Remove not actual pricelists', @category_name = N'[Uncategorized (Local)]', @enabled = 1, @notify_level_email = 0, @notify_level_page = 0, @notify_level_netsend = 0, @notify_level_eventlog = 2, @delete_level= 0
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the job steps
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobstep @job_id = @JobID, @step_id = 1, @step_name = N'mwCleaner', @command = N'exec mwCleaner', @database_name = @DataBaseName, @server = N'', @database_user_name = N'', @subsystem = N'TSQL', @cmdexec_success_code = 0, @flags = 0, @retry_attempts = 0, @retry_interval = 1, @output_file_name = N'', @on_success_step_id = 0, @on_success_action = 1, @on_fail_step_id = 0, @on_fail_action = 2
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	  EXECUTE @ReturnCode = msdb.dbo.sp_update_job @job_id = @JobID, @start_step_id = 1 
	
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the job schedules
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobschedule @job_id = @JobID, @name = N'Everyday', @enabled = 1, @freq_type = 4, @active_start_date = 20090101, @active_start_time = 30000, @freq_interval = 1, @freq_subday_type = 1, @freq_subday_interval = 0, @freq_relative_interval = 0, @freq_recurrence_factor = 0, @active_end_date = 99991231, @active_end_time = 235959
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	  -- Add the Target Servers
	  EXECUTE @ReturnCode = msdb.dbo.sp_add_jobserver @job_id = @JobID, @server_name = N'(local)' 
	  IF (@@ERROR <> 0 OR @ReturnCode <> 0) GOTO QuitWithRollback 
	
	END
	COMMIT TRANSACTION          
	GOTO   EndSave              
	QuitWithRollback:
	  IF (@@TRANCOUNT > 0) ROLLBACK TRANSACTION 
	EndSave: 
END
go

grant exec on dbo.mwCreateCleanerJob to public
go
--sp_GetServiceCost.sql
--7.2 ONLY
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetServiceCost] 
GO
CREATE PROCEDURE [dbo].[GetServiceCost] 
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0, 
		@sellDate dateTime, @netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output
as
--<DATE>2009-01-28</DATE>
---<VERSION>7.2.21.1</VERSION>

SET DATEFIRST 1
DECLARE @tourlong int

Set @sellDate = ISNULL(@sellDate,GetDate())

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (14,6), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint


set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END

	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

	if @UseTypeDivisionMode > 0
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
					and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
	else
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, CS_DateSellBeg, CS_DateSellEnd
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or CS_DATE IS NULL)
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC

	--1, 
	open costCursor

	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

If @days >1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	If @@fetch_status = 0
	BEGIN

		declare @TMPTable Table 
 		( CL_Date datetime,
		CL_CostNetto decimal(14,4),
		CL_Cost decimal(14,4),
		CL_Discount smallint,
		CL_Type smallint,
		CL_Rate varchar(2),
		CL_Course decimal(14,4),
		CL_Pax smallint default 1,
		CL_ByDay smallint,
		CL_Part smallint,
		CL_Profit decimal(14,4))

		DECLARE @temp_date DATETIME
		SET @temp_date = @date + @days - 1

		while @temp_date >= @date 
		BEGIN -- begin while @temp_date >= @date 
			insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
			set @temp_date = @temp_date - 1 
		END  -- end while @temp_date >= @date 
	END
	Else
	BEGIN
		close costCursor
		deallocate costCursor
		return 0
	END

	set @COST_ID = 1 --идетификатор уникальности цены
	If @CS_ByDay = 2
		Set @nCostByDayExists = 1

	If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
		insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
END

set @NotCalculatedCosts = 1
set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
BEGIN -- While (@@fetch_status = 0)
	-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
	Set @IsFetchNormal = 1
		-- если не указаны даты периодов, то значит указаны даты заедов
		-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

	If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
		if CHARINDEX ( @WeekDate, @CS_Week ) = 0
			Set @IsFetchNormal = 0
		Else
			Set @CS_Week = ''

	If @tourlong > 0 and @svKey = 1
	Begin		
		If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
			Set @IsFetchNormal = @IsFetchNormal
		else
			Set @IsFetchNormal = 0
	end     

	If @svKey != 1
	begin
		If @CS_LongMin is not null and @CS_LongMin > @days
			Set @IsFetchNormal = 0
	end

	If (@sellDate between @CS_DateSellBeg and (@CS_DateSellEnd + 1)) or (@CS_DateSellBeg is null)
		Set @IsFetchNormal = @IsFetchNormal 
	else
		Set @IsFetchNormal = 0

	If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = (@date + @days - 1) -- смотрим может есть цена за период точно совпадает с периодом действия услуги
		Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
			CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
--		Set @IsFetchNormal = 0
	If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
	BEGIN
		If CHARINDEX ( @WeekDate, @CS_Week ) > 0
			Set @IsFetchNormal = @IsFetchNormal 
		Else
			Set @IsFetchNormal = 0
	END

	If @Days = 1 and @CS_Date > @date
		Set @IsFetchNormal = 0

	If @Days = 1 and @CS_ByDay in (3,4)
		Set @IsFetchNormal = 0

--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
/*
	If 	@CS_CheckInDateBEG is not null
	BEGIN
		Set @CS_Date = null
		Set @CS_DateEnd = null
	END
*/
		If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
		BEGIN			--цены подходят для поиска
			Set @CS_Date = (isnull(@CS_Date,@date))
			Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

			If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
			BEGIN
				update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
						CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
				if not exists (select * from @TMPTable where CL_Date = @date + @days)
					insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
				Set @nCostByDayExists = 1	
			END

			if @CS_Date < @date
				Set @CS_Date = @date
			if @CS_DateEnd > @date + @days
				Set @CS_DateEnd = @date + @days
			Set @CS_Discount = ISNULL(@CS_Discount,0)
			Set @TMP_Number_Period = null

			if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
			BEGIN -- if @CS_ByDay = 3
				if (@CS_DateEnd - @CS_Date + 1) >= 7
				BEGIN
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
					while @TMP_Number >= 7
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
	
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @TMP_Number = @TMP_Number - 7
						SET @TMP_Date = @TMP_Date + 7
						SET @COST_ID = @COST_ID + 1
					END
				END
			END	-- if @CS_ByDay = 3

	--		print 'поиск'
			if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
			BEGIN -- if @CS_ByDay = 0
	--			print 'период'
				select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
					Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

				if @CS_Date < @TMP_Date and @date < @TMP_Date
				BEGIN
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
			--		print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN					
						select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
						if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
						BEGIN
							select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
								Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
						END
					END
					Set @TMP_Number_Period = null
				END

				if @CS_Long is null or @CS_Long > @TMP_Number
				BEGIN
					--если предыдущий период захватывается полностью, то его надо включить
					--это делается только в случае, если цену указана за период
			--		print @TMP_Date + @TMP_Number
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
		--			print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN 
						select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
	--					print @TMP_Date_Period
						if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
							Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
					END
				END

				if @CS_Long is not null and @CS_Long < @TMP_Number
					set @TMP_Number = @CS_Long

				if @CS_LongMin is null or @CS_LongMin <= @TMP_Number
				BEGIN
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
						CL_Pax = 1, CL_Profit = @CS_Profit
						WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
					UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
					SET @COST_ID = @COST_ID + 1
				END
			END	-- if @CS_ByDay = 0
	
			if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
			BEGIN -- if @CS_ByDay = 1/2
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				if 1=1 -- временная заглушка, 
				BEGIN  -- если Цена удовлетворяет условиям
					SET @DayOfWeeks = @CS_Week
					While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
					BEGIN
						select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
						update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
							Where CL_Part = @TMP_Number
					END				

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

					SET @COST_ID = @COST_ID + 1
				END   -- если Цена удовлетворяет условиям
			END	-- if @CS_ByDay = 1

			if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
			BEGIN -- if @CS_ByDay = 4
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				SET @DayOfWeeks = ''
				Set @CS_Week = REPLACE(@CS_Week,'.','');

				if @CS_Week != ''
				BEGIN			
					Set @TMP_Number = 1
					Set @DayOfWeeks = LEFT(@CS_Week,1)
					while @TMP_Number < LEN(@CS_Week)
					BEGIN
						Set @TMP_Number = @TMP_Number + 1
						Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
					END
				END
				
				-- доп.ночи могут только добивать в конец, первый день точно не к ним
				If @CS_Date = @date
					Set @CS_Date = @CS_Date + 1

				IF @DayOfWeeks = ''
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1)
				ELSE
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
				SET @COST_ID = @COST_ID + 1
			END	-- if @CS_ByDay = 4
			select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
		END -- цены подходят для поиска и есть продолжительность
		ELSE
			If @IsFetchNormal = 1
				Set @NotCalculatedCosts = 0

	If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
	BEGIN
		fetch next from costCursor 
			into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
					@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
					@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1
			Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
		Else
			Set @FindCostByPeriod = 0
	END
END -- While (@@fetch_status = 0)
close costCursor
deallocate costCursor

--if @svKey = 3 
--	insert into TMP (CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit) select CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit from @TMPTable

if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
BEGIN
	set @nettoDetail = '='
	set @sDetailed = '='
	while exists (select * from @TMPTable where CL_Course != 0)
	begin
		SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
						@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
		from			@TMPTable 
		where			CL_Course != 0	 
		Order By		CL_Date

		Set @TMP_Number = 0
		Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
		UPDATE @TMPTable SET CL_Course = 0 WHERE CL_Part = @TMP_Number_Part
		if @nettoDetail != '='
			Set @nettoDetail = @nettoDetail + ' +'
		if @sDetailed != '='
			Set @sDetailed = @sDetailed + ' +'

		Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
		Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

		if @TMP_Number != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
		end

		if @TMP_Number_Pax != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
		end

		if @TMP_Number_Course != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
		end
	end

	If ISNULL(@profitValue,0) > 0
		Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

	if @marginCalcValue > 0
		Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

	If ISNULL(@discount,0) > 0
		Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
END
GO
GRANT EXECUTE ON [dbo].[GetServiceCost] TO PUBLIC 
GO

--090129_DogovorMessages_Text.sql
--7.2 ONLY
ALTER TABLE dbo.DogovorMessages ALTER COLUMN DM_Text varchar(4000)
GO



--090110(FillMasterWebSearchFields).sql
--7.2 ONLY
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO



ALTER   procedure [dbo].[FillMasterWebSearchFields](@tokey int = null)
as
begin
create table #tmpHotelData (
	thd_tourkey int, 
	thd_firsthdkey int,
	thd_firstpnkey int, 
	thd_cnkey int, 
	thd_tlkey int, 
	thd_isenabled smallint, 
	thd_tourcreated datetime, 
	thd_hdstars varchar(15), 
	thd_ctkey int, 
	thd_rskey int, 
	thd_hdkey int, 
	thd_hdpartnerkey int, 
	thd_hrkey int, 
	thd_rmkey int, 
	thd_rckey int, 
	thd_ackey int, 
	thd_pnkey int, 
	thd_hdmain smallint,
	thd_firsthotelday int,
	thd_ctkeyfrom int, 
	thd_ctkeyto int, 
	thd_apkeyfrom int, 
	thd_apkeyto int,
	thd_tourtype int,
	thd_cnname varchar(200),
	thd_tourname varchar(200),
	thd_hdname varchar(200),
	thd_ctname varchar(200),
	thd_rsname varchar(200),
	thd_ctfromname varchar(200),
	thd_cttoname varchar(200),
	thd_tourtypename varchar(200),
	thd_pncode varchar(50),
	thd_hdorder int,
	thd_hotelkeys varchar(256),
	thd_pansionkeys varchar(256),
	thd_hotelnights varchar(256)
)

create table #tempPriceTable(
	[pt_mainplaces] [int] NULL ,
	[pt_addplaces] [int] NULL ,
	[pt_main] [smallint] NULL ,
	[pt_tourvalid] [datetime] NULL ,
	[pt_tourcreated] [datetime] NULL ,
	[pt_tourdate] [datetime] NOT NULL,
	[pt_days] [int] NULL ,
	[pt_nights] [int] NULL ,
	[pt_cnkey] [int] NULL ,
	[pt_ctkeyfrom] [int] NULL ,
	[pt_apkeyfrom] [int] NULL ,
	[pt_ctkeyto] [int] NULL ,
	[pt_apkeyto] [int] NULL ,
	[pt_ctkeybackfrom] [int] NULL,
	[pt_ctkeybackto] [int] NULL,
	[pt_tourkey] [int] NOT NULL,
	[pt_tourtype] [int] NULL ,
	[pt_tlkey] [int] NULL ,
	[pt_pricelistkey] [int] NULL ,
	[pt_pricekey] [int] NOT NULL,
	[pt_price] [float] NULL ,
	[pt_hdkey] [int] NULL ,
	[pt_hdpartnerkey] [int] null,
	[pt_rskey] [int] NULL ,
	[pt_ctkey] [int] NULL ,
	[pt_hdstars] [varchar] (12) NULL ,
	[pt_pnkey] [int] NULL ,
	[pt_hrkey] [int] NULL ,
	[pt_rmkey] [int] NULL ,
	[pt_rckey] [int] NULL ,
	[pt_ackey] [int] NULL ,
	[pt_childagefrom] [int] NULL ,
	[pt_childageto] [int] NULL ,
	[pt_childagefrom2] [int] NULL ,
	[pt_childageto2] [int] NULL ,
	[pt_hdname] [varchar] (60),
	[pt_tourname] [varchar] (128),
	[pt_pnname] [varchar] (30),
	[pt_pncode] [varchar] (3),
	[pt_rmname] [varchar] (35),
	[pt_rmcode] [varchar] (8),
	[pt_rcname] [varchar] (35),
	[pt_rccode] [varchar] (8),
	[pt_acname] [varchar] (30),
	[pt_accode] [varchar] (15),
	[pt_rsname] [varchar] (20),
	[pt_ctname] [varchar] (50),
	[pt_rmorder] [int] NULL ,
	[pt_rcorder] [int] NULL ,
	[pt_acorder] [int] NULL ,
	[pt_rate] [varchar] (3),
	[pt_toururl] [varchar] (128),
	[pt_hotelurl] [varchar] (254),
	[pt_isenabled] [smallint] NULL,
	[pt_chkey] int null,
	[pt_chbackkey] int null,
	[pt_hdday] int null,
	[pt_hdnights] int null,
	[pt_chday] int null,
	[pt_chpkkey] int null,
	[pt_chprkey] int null,
	[pt_chbackday] int null,
	[pt_chbackpkkey] int null,
	[pt_chbackprkey] int null,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_hotelnights varchar(256)
)

declare @mwAccomodationPlaces varchar(254)
declare @mwRoomsExtraPlaces varchar(254)
declare @mwSearchType int
declare @sql varchar(8000)
declare @countryKey int
declare @cityFromKey int

if @tokey is null
begin
	exec dbo.mwCleaner

	update tp_lists
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)

	update tp_lists
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists
					inner join tp_services on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services
					inner join dbo.tp_servicelists on tl_tskey = ts_key 
				where tl_tikey = ti_key)

	update tp_lists
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists 
					inner join tp_services on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)

	update tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey) 

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_ctkeyfrom = ts_subcode2, 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where to_key = ti_tokey  

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and ts_ctkey = tl_ctdeparturekey
		and ti_tokey = to_key
	
	-- _ключ_ аэропорта вылета
	update tp_lists 
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	-- _ключ_ аэропорта прилета
	update tp_lists 
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	
	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_firsthdkey = hd_key


	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey,
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays
	from tp_lists
		inner join tp_tours on ti_tokey = to_key
		inner join tp_servicelists on tl_tikey = ti_key 
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary on ts_code = hd_key
		inner join hotelrooms on hr_key = ts_subcode1
		inner join turList on turList.tl_key = to_trkey
		inner join country on cn_key = to_cnkey
		inner join citydictionary on ct_key = hd_ctkey
		inner join tiptur on tp_key = tl_tip
		inner join pansion on pn_key = ts_subcode2
	where to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0

	exec dbo.mwDropAllPriceTablesIndexes		

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	truncate table dbo.mwSpoDataTable
	truncate table dbo.mwPriceHotels
	truncate table dbo.mwPriceDurations
	if(@mwSearchType = 0)
		exec sp_executesql N'truncate table dbo.mwPriceDataTable'
	
	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists inner join tp_tours on ti_tokey = to_key

	declare cur cursor fast_forward read_only for select distinct isnull(thd_cnkey, 0), isnull(thd_ctkeyfrom, 0) from #tmpHotelData
	open cur
	fetch next from cur into @countryKey, @cityFromKey
	while @@fetch_status = 0
	begin
		if (@mwSearchType != 0)
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			exec dbo.mwTruncatePriceTable @countryKey, @cityFromKey
		end		
		set @sql = '
		declare @mwAccomodationPlaces varchar(254)
		declare @mwRoomsExtraPlaces varchar(254)
			set @mwAccomodationPlaces = ''' + ltrim(rtrim(@mwAccomodationPlaces)) + '''
		set @mwRoomsExtraPlaces = ''' + ltrim(rtrim(@mwRoomsExtraPlaces)) + '''
			insert into'
		if (@mwSearchType = 0)
			set @sql = @sql + ' mwPriceDataTable '
		else
			set @sql = @sql + ' '+dbo.mwGetPriceTableName(@countryKey, @cityFromKey)+' ' 

		set @sql = @sql +  ' with(rowlock) (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights
		)
		select 
			(case when @mwAccomodationPlaces = ''0''
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> ''0'' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			tl_nameweb, 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			to_isenabled,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays
		from tp_tours
			inner join turList on to_trkey = tl_key
			inner join tp_lists on ti_tokey = to_key
			inner join tp_prices on tp_tikey = ti_key
			inner join tp_turdates on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary on ti_firsthdkey = hd_key
			inner join hotelrooms on ti_firsthrkey = hr_key
			inner join pansion on ti_firstpnkey = pn_key
			inner join rooms on hr_rmkey = rm_key
			inner join roomscategory on hr_rckey = rc_key
			inner join accmdmentype on hr_ackey = ac_key
			inner join citydictionary on hd_ctkey = ct_key
			left outer join resorts on hd_rskey = rs_key
		where td_date >= getdate() and to_cnkey = ' + cast(@countryKey as varchar(30)) + ' and isnull(ti_ctkeyfrom, 0) = ' + cast(@cityFromKey as varchar(30))
--	print @sql
		exec(@sql)
	

		if (@mwSearchType != 0)
			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
		fetch next from cur into @countryKey, @cityFromKey
	end		

	close cur
	deallocate cur

	if (@mwSearchType = 0)
		exec dbo.mwCreateAllPriceTablesIndexes
end
else
begin
	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey


	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey


	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey

	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
--

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
	
	delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey




	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
		exec(@sql)
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end
end


insert into dbo.mwPriceHotels (
	sd_tourkey,
	sd_mainhdkey,
	sd_mainpnkey,
	sd_hdkey,
	sd_hdstars,
	sd_hdctkey,
	sd_hdrskey,
	sd_hrkey,
	sd_rmkey,
	sd_rckey,
	sd_ackey,
	sd_pnkey,
	sd_hdorder)
select distinct 
	thd_tourkey, 
	thd_firsthdkey, 
	thd_firstpnkey,
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_hrkey, 
	thd_rmkey, 
	thd_rckey, 
	thd_ackey, 
	thd_pnkey,
	thd_hdorder
from #tmpHotelData

-- информация об отелях
insert into mwSpoDataTable(
	sd_tourkey, 
	sd_cnkey, 
	sd_hdkey, 
	sd_hdstars, 
	sd_ctkey, 
	sd_rskey, 
	sd_ctkeyfrom, 
	sd_ctkeyto, 
	sd_tlkey, 
	sd_isenabled, 
	sd_tourcreated,
	sd_main,
	sd_pnkey,
	sd_tourtype,
	sd_cnname,
	sd_tourname,
	sd_hdname,
	sd_ctname,
	sd_rsname,
	sd_ctfromname,
	sd_cttoname,
	sd_tourtypename,
	sd_pncode,
	sd_hotelkeys,
	sd_pansionkeys
) 
select distinct 
	thd_tourkey, 
	thd_cnkey, 
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_ctkeyfrom, 
	thd_ctkeyto, 
	thd_tlkey, 
	thd_isenabled, 
	thd_tourcreated,
	thd_hdmain,
	thd_pnkey,
	thd_tourtype,
	thd_cnname,
	thd_tourname,
	thd_hdname,
	thd_ctname,
	thd_rsname,
	thd_ctfromname,
	thd_cttoname,
	thd_tourtypename,
	thd_pncode,
	thd_hotelkeys,
	thd_pansionkeys
from #tmpHotelData 
where thd_hdmain > 0
end

GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

--CreateTable_Communications.sql
--7.2 ONLY
if not exists(select * from dbo.sysobjects where id = OBJECT_ID(N'[dbo].[Communications]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[Communications](
      [CM_Id] [int] IDENTITY(1,1) NOT NULL,
      [CM_DGKey] [int] NOT NULL,
      [CM_PRKey] [int] NOT NULL,
      [CM_LastState] [int] NOT NULL,
      [CM_LastDate] [datetime] NOT NULL,
      [CM_Descriptions] [varchar](255) COLLATE Latin1_General_CI_AS NOT NULL,
      [CM_Price] [money] NOT NULL DEFAULT (0),
      [CM_ConfirmationDate] [datetime] NULL,
      [CM_ChangeLevel] [smallint] NULL,
      [CM_ChangeDate] [datetime] NULL,
      [CM_CreateUser] [int] NOT NULL,
      [CM_CreateDate] [datetime] NOT NULL CONSTRAINT [DF_Communications_CM_CreateDate]  DEFAULT (getdate()),
 CONSTRAINT [PK_Communications] PRIMARY KEY CLUSTERED 
(
      [CM_Id] ASC
) ON [PRIMARY]
) ON [PRIMARY]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Communications_Dogovor]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE [dbo].[Communications]  WITH CHECK ADD CONSTRAINT [Communications_Dogovor] FOREIGN KEY([CM_DGKey]) REFERENCES [dbo].[tbl_Dogovor] ([DG_Key])
GO

ALTER TABLE [dbo].[Communications] CHECK CONSTRAINT [Communications_Dogovor]
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[Communications_Partner]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE [dbo].[Communications]  WITH CHECK ADD  CONSTRAINT [Communications_Partner] FOREIGN KEY([CM_PRKey]) REFERENCES [dbo].[tbl_Partners] ([PR_KEY])
GO

ALTER TABLE [dbo].[Communications] CHECK CONSTRAINT [Communications_Partner]
GO

grant select, update, insert, delete on dbo.Communications to public
GO

--090129(AlterTableMessges).sql
--5.2 - 7.2
alter table dbo.Messages alter column MS_LGId int null
go

--tbl_ServiceDefinitions.sql
--7.2 ONLY
IF NOT EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[ServiceDefinitions]')  and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE [dbo].[ServiceDefinitions](
      [SD_ID] [int] IDENTITY(1,1) NOT NULL,
      [SD_SVKey] [int] NOT NULL,
      [SD_CTKey] [int] NOT NULL,
	  [SD_Code] [int] NOT NULL,
	  [SD_SubCode1] [int] NOT NULL,
	  [SD_SubCode2] [int] NOT NULL,
	  [SD_Text] [varchar](254) ,
 CONSTRAINT [SD_ID] PRIMARY KEY CLUSTERED 
( [SD_ID] ASC ) ) ON [PRIMARY] 
GO
GRANT SELECT,INSERT,UPDATE,DELETE on [dbo].[ServiceDefinitions] to public
GO

--090402(add_setting).sql
--5.2-7.2
if not exists(select id from syscolumns where id = OBJECT_ID('Setting') and name = 'ST_DATE')
ALTER TABLE Setting ADD ST_DATE smalldatetime
GO

--090205(alter_mwSpoDataTable_add_sd_tourvalid).sql
--7.2 ONLY
-- Add sd_tourvalid columnt to mwSpoDataTable table
if not exists(select id from syscolumns where id = OBJECT_ID('mwSpoDataTable') and name = 'sd_tourvalid')
	ALTER TABLE [dbo].[mwSpoDataTable] ADD sd_tourvalid datetime null
go

-- Update sd_tourvalid values from TP_Tours
update mwSpoDataTable
	set sd_tourvalid = TO_DateValid
	from TP_Tours
	where sd_tourkey = to_key
go

-- Drop mwSpoData view
if exists(select id from sysobjects where name='mwSpoData' and xtype='V')
	drop view dbo.[mwSpoData]
go

-- Add filter by sd_tourvalid columnt to mwSpoData view
create view dbo.mwSpoData as
	select * from dbo.mwSpoDataTable with (nolock) where sd_isenabled > 0 and sd_tourvalid >= getdate()
go

grant select on dbo.mwSpoData to public
go

-- Drop mwPriceTable view
if exists(select id from sysobjects where name='mwPriceTable' and xtype='V')
	drop view dbo.[mwPriceTable]
go

-- Add filter by pt_tourvalid columnt to mwPriceTable view
create view [dbo].[mwPriceTable] as 
	select * from dbo.mwPriceDataTable with (nolock) where pt_isenabled > 0 and pt_tourvalid >= getdate()
go

grant select on dbo.mwPriceTable to public
go

--090206(AlterColumns).sql
--7.2 ONLY
-- Увеличиваем размер столбцов для совместимости с Интерлуком

if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Accmdmentype' and COLUMN_NAME='AC_CODE')<30)  
alter table Accmdmentype alter column AC_CODE varchar(30) null
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Rooms' and COLUMN_NAME='RM_CODE')<25) 
alter table Rooms alter column RM_CODE varchar(25) null
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Rooms' and COLUMN_NAME='RM_Name')<60) 
alter table Rooms alter column RM_Name varchar(60) not null
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Rooms' and COLUMN_NAME='RM_NameLat')<60) 
alter table Rooms alter column RM_NameLat varchar(60) null
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Transfer' and COLUMN_NAME='TF_NAME')<100)
alter table Transfer alter column TF_NAME varchar(100) not null
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='Transfer' and COLUMN_NAME='TF_NAMELAT')<100)
alter table Transfer alter column TF_NAMELAT varchar(100) null
GO

--090209(AlterTable_SendMail).sql
--7.2 ONLY
IF (15 >= 
	(SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' AND TABLE_NAME='SendMail' AND COLUMN_NAME='SM_TYPE')
)
	ALTER TABLE dbo.SendMail ALTER COLUMN SM_TYPE varchar(254) NULL
GO

--090209(mwGetServiceVariants).sql
--7.2 ONLY
if exists(select id from sysobjects where name='mwGetServiceVariants' and xtype='p')
	drop procedure [dbo].[mwGetServiceVariants]
go

create procedure [dbo].[mwGetServiceVariants]
@serviceDays int,
@svKey	int,
@pkKey int,
@dateBegin varchar(10),
@tourNDays smallint,
@cityFromKey	int,
@cityToKey	int,
@additionalFilter varchar(1024)
as

/******************************************************************************
**		Parameters:
		@serviceDays	- i?iaie?eoaeuiinou oneoae
		@svKey			- ee?? oeia oneoae
		@pkKey			- ee?? iaeaoa
		@dateBegin		- aaoa ia?aea i?aainoaaeaiey oneoae
		@tourNDays		- i?iaie?eoaeuiinou oo?a
		@cityFromKey	- ai?ia aueaoa
		@cityToKey		- ai?ia i?eeaoa
		@additionalFilter	- aii. oeeuo?

**
**		Iiaeoeoe?iaaii 2/11/2007
*******************************************************************************/

declare @sql varchar(8000)
set @sql ='SELECT CS_Code,CS_SubCode1,CS_SubCode2,CS_PrKey,CS_PkKey,
			CS_Profit,CS_Type,CS_Discount,CS_Creator,CS_Rate,CS_Cost 
		FROM COSTS
		WHERE '
if (@svKey=1)--aaeaia?aeao
begin
	set @sql = @sql+
		'CS_SVKEY = '+cast (@svKey as varchar)+' AND CS_PKKEY = '+cast(@pkKey as varchar)+
		' AND ISNULL(CS_DATE, ''1900-01-01'') <= '''+@dateBegin+'''
		 AND ISNULL(CS_DATEEND, ''9000-01-01'') >= '''+@dateBegin+'''
		 AND (CS_LONG >= '+cast(@tourNDays as varchar)+' OR CS_LONG is NULL) 
		AND EXISTS 
			( SELECT CH_KEY FROM CHARTER 
			WHERE CH_KEY = CS_CODE AND CH_CITYKEYFROM = '+cast(@cityFromKey as varchar)+'
				AND CH_CITYKEYTO = '+cast(@cityToKey as varchar)+')'
	-- Filter on day of week
	set @sql = @sql + ' AND (CS_WEEK is null or CS_WEEK = '''' or CS_WEEK like dbo.GetWeekDays(''' + @dateBegin + ''',''' + @dateBegin + '''))'
	-- Filter on CHECKIN DATE
	set @sql = @sql + ' AND ''' + @dateBegin + ''' BETWEEN ISNULL(CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(CS_CHECKINDATEEND, ''9000-01-01'') ' + @additionalFilter + ' order by cs_long'
end
else if (@serviceDays>1)
begin
	set @sql = @sql +
		'CS_SVKEY = '+cast (@svKey as varchar)+' AND CS_PKKEY = '+cast(@pkKey as varchar)+
		' AND ISNULL(CS_DATE, ''1900-01-01'') <= '''+cast(dateadd(day,1,cast(@dateBegin as datetime)) as varchar)+'''
		 AND ISNULL(CS_DATEEND, ''9000-01-01'') >= '''+@dateBegin+''''
	set @sql = @sql + ' AND ''' + @dateBegin + ''' BETWEEN ISNULL(CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(CS_CHECKINDATEEND, ''9000-01-01'') ' + @additionalFilter + ' order by CS_UPDDATE DESC';
end
else
begin
	set @sql = @sql+
		'CS_SVKEY = '+cast (@svKey as varchar)+' AND CS_PKKEY = '+cast(@pkKey as varchar)+
		' AND ISNULL(CS_DATE, ''1900-01-01'') <= '''+@dateBegin+'''
		 AND ISNULL(CS_DATEEND, ''9000-01-01'') >= '''+@dateBegin+''''
	set @sql = @sql + ' AND ''' + @dateBegin + ''' BETWEEN ISNULL(CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(CS_CHECKINDATEEND, ''9000-01-01'') ' + @additionalFilter + ' order by cs_long'
end

exec (@sql)
go

grant exec on [dbo].[mwGetServiceVariants] to public
go

--2007.2.22  date2009-02-23
-- 7.2 - 8.1 090216(InsertObjectAlases).sql
if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 17))
	insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
	values (17, 'TP_Tours', '2007-ой отчёт', null, 36)
go

if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 17001))
	insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
	values (17001, '', 'Начало расчёта', null, 36)
go

if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 17002))
	insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
	values (17002, '', 'Окончание расчёта', null, 36)
go

-- 7.2 - 8.1 090216AlterTable_ServiceDefinitions.sql
if not exists(select id from syscolumns where id = OBJECT_ID('SERVICEDEFINITIONS') and name = 'SD_IsPackage') and OBJECT_ID('SERVICEDEFINITIONS') IS NOT NULL
      alter table SERVICEDEFINITIONS add SD_IsPackage bit default 0
go
-- 7.2 - 8.1 T_DogovorUpdate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2005.2.41.3</VERSION>
--<DATE>2008-19-02</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0
			END
		if (ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1					
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1	
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0				
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0
	  END
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO

-- 7.2 - 8.1 090210(fill_empty_fields_mwPriceDataTable).sql
-- Fill empty fields in TP_Lists
update tp_lists
	set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key)
	where ISNULL(ti_hotelkeys,'') = ''
go

update tp_lists
	set ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key)
	where ISNULL(ti_hotelroomkeys,'') = ''
go

update tp_lists
	set ti_hoteldays = dbo.mwGetTiHotelNights(ti_key)
	where ISNULL(ti_hoteldays,'') = ''
go

update tp_lists
	set ti_hotelstars = dbo.mwGetTiHotelStars(ti_key)
	where ISNULL(ti_hotelstars,'') = ''
go

update tp_lists
	set ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where ISNULL(ti_pansionkeys,'') = ''
go

-- Fill empty fields in mwPriceDataTable
update dbo.mwPriceDataTable
	set	pt_hotelkeys = ti_hotelkeys,
		pt_hotelroomkeys = ti_hotelroomkeys,
		pt_hotelstars = ti_hotelstars,
		pt_pansionkeys = ti_pansionkeys,
		pt_hotelnights = ti_hoteldays
	from TP_Lists 
	where pt_pricelistkey = ti_key
		and (ISNULL(pt_hotelkeys,'') = ''
		or ISNULL(pt_hotelroomkeys,'') = ''
		or ISNULL(pt_hotelstars,'') = ''
		or ISNULL(pt_pansionkeys,'') = ''
		or ISNULL(pt_hotelnights,'') = '')
go

-- 7.2 - 8.1 090220(mwFillPriceTable).sql
print 'Create procedure mwFillPriceTable'
go

if exists(select id from sysobjects where id = OBJECT_ID('dbo.mwFillPriceTable') and xtype = 'P')
	drop procedure dbo.mwFillPriceTable
go


create procedure dbo.mwFillPriceTable 
	@dataTableName varchar (1024),
	@countryKey int,
	@cityFromKey int
as

declare @mwSearchType int
select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
where SS_ParmName = 'MWDivideByCountry'

declare @tableName varchar (1024)
if @mwSearchType = 0
	set @tableName = 'mwPriceDataTable'
else
	set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)
declare @sql varchar (8000)
set @sql = 'insert into ' + @tableName + '(
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights)
		select
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights
		from ' + @dataTableName
exec (@sql)
go

grant exec on dbo.mwFillPriceTable to public
go

print 'Done'
go

-- 7.2 - 8.1090220(FillMasterWebSearchFields).sql
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int = null)
as
begin
create table #tmpHotelData (
	thd_tourkey int, 
	thd_firsthdkey int,
	thd_firstpnkey int, 
	thd_cnkey int, 
	thd_tlkey int, 
	thd_isenabled smallint, 
	thd_tourcreated datetime, 
	thd_hdstars varchar(15), 
	thd_ctkey int, 
	thd_rskey int, 
	thd_hdkey int, 
	thd_hdpartnerkey int, 
	thd_hrkey int, 
	thd_rmkey int, 
	thd_rckey int, 
	thd_ackey int, 
	thd_pnkey int, 
	thd_hdmain smallint,
	thd_firsthotelday int,
	thd_ctkeyfrom int, 
	thd_ctkeyto int, 
	thd_apkeyfrom int, 
	thd_apkeyto int,
	thd_tourtype int,
	thd_cnname varchar(200),
	thd_tourname varchar(200),
	thd_hdname varchar(200),
	thd_ctname varchar(200),
	thd_rsname varchar(200),
	thd_ctfromname varchar(200),
	thd_cttoname varchar(200),
	thd_tourtypename varchar(200),
	thd_pncode varchar(50),
	thd_hdorder int,
	thd_hotelkeys varchar(256),
	thd_pansionkeys varchar(256),
	thd_hotelnights varchar(256),
	thd_tourvalid datetime
)

create table #tempPriceTable(
	[pt_mainplaces] [int] NULL ,
	[pt_addplaces] [int] NULL ,
	[pt_main] [smallint] NULL ,
	[pt_tourvalid] [datetime] NULL ,
	[pt_tourcreated] [datetime] NULL ,
	[pt_tourdate] [datetime] NOT NULL,
	[pt_days] [int] NULL ,
	[pt_nights] [int] NULL ,
	[pt_cnkey] [int] NULL ,
	[pt_ctkeyfrom] [int] NULL ,
	[pt_apkeyfrom] [int] NULL ,
	[pt_ctkeyto] [int] NULL ,
	[pt_apkeyto] [int] NULL ,
	[pt_ctkeybackfrom] [int] NULL,
	[pt_ctkeybackto] [int] NULL,
	[pt_tourkey] [int] NOT NULL,
	[pt_tourtype] [int] NULL ,
	[pt_tlkey] [int] NULL ,
	[pt_pricelistkey] [int] NULL ,
	[pt_pricekey] [int] NOT NULL,
	[pt_price] [float] NULL ,
	[pt_hdkey] [int] NULL ,
	[pt_hdpartnerkey] [int] null,
	[pt_rskey] [int] NULL ,
	[pt_ctkey] [int] NULL ,
	[pt_hdstars] [varchar] (12) NULL ,
	[pt_pnkey] [int] NULL ,
	[pt_hrkey] [int] NULL ,
	[pt_rmkey] [int] NULL ,
	[pt_rckey] [int] NULL ,
	[pt_ackey] [int] NULL ,
	[pt_childagefrom] [int] NULL ,
	[pt_childageto] [int] NULL ,
	[pt_childagefrom2] [int] NULL ,
	[pt_childageto2] [int] NULL ,
	[pt_hdname] [varchar] (60),
	[pt_tourname] [varchar] (128),
	[pt_pnname] [varchar] (30),
	[pt_pncode] [varchar] (3),
	[pt_rmname] [varchar] (35),
	[pt_rmcode] [varchar] (8),
	[pt_rcname] [varchar] (35),
	[pt_rccode] [varchar] (8),
	[pt_acname] [varchar] (30),
	[pt_accode] [varchar] (15),
	[pt_rsname] [varchar] (20),
	[pt_ctname] [varchar] (50),
	[pt_rmorder] [int] NULL ,
	[pt_rcorder] [int] NULL ,
	[pt_acorder] [int] NULL ,
	[pt_rate] [varchar] (3),
	[pt_toururl] [varchar] (128),
	[pt_hotelurl] [varchar] (254),
	[pt_isenabled] [smallint] NULL,
	[pt_chkey] int null,
	[pt_chbackkey] int null,
	[pt_hdday] int null,
	[pt_hdnights] int null,
	[pt_chday] int null,
	[pt_chpkkey] int null,
	[pt_chprkey] int null,
	[pt_chbackday] int null,
	[pt_chbackpkkey] int null,
	[pt_chbackprkey] int null,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_hotelnights varchar(256)
)

declare @mwAccomodationPlaces varchar(254)
declare @mwRoomsExtraPlaces varchar(254)
declare @mwSearchType int
declare @sql varchar(8000)
declare @countryKey int
declare @cityFromKey int

if @tokey is null
begin
	exec dbo.mwCleaner

	update tp_lists
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)

	update tp_lists
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists
					inner join tp_services on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services
					inner join dbo.tp_servicelists on tl_tskey = ts_key 
				where tl_tikey = ti_key)

	update tp_lists
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists 
					inner join tp_services on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)

	update tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey) 

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_ctkeyfrom = ts_subcode2, 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where to_key = ti_tokey  

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and ts_ctkey = tl_ctdeparturekey
		and ti_tokey = to_key
	
	-- _ключ_ аэропорта вылета
	update tp_lists 
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	-- _ключ_ аэропорта прилета
	update tp_lists 
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	
	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_firsthdkey = hd_key


	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey,
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		TO_DateValid
	from tp_lists
		inner join tp_tours on ti_tokey = to_key
		inner join tp_servicelists on tl_tikey = ti_key 
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary on ts_code = hd_key
		inner join hotelrooms on hr_key = ts_subcode1
		inner join turList on turList.tl_key = to_trkey
		inner join country on cn_key = to_cnkey
		inner join citydictionary on ct_key = hd_ctkey
		inner join tiptur on tp_key = tl_tip
		inner join pansion on pn_key = ts_subcode2
	where to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0

	exec dbo.mwDropAllPriceTablesIndexes		

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	truncate table dbo.mwSpoDataTable
	truncate table dbo.mwPriceHotels
	truncate table dbo.mwPriceDurations
	if(@mwSearchType = 0)
		exec sp_executesql N'truncate table dbo.mwPriceDataTable'
	
	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists inner join tp_tours on ti_tokey = to_key

	declare cur cursor fast_forward read_only for select distinct isnull(thd_cnkey, 0), isnull(thd_ctkeyfrom, 0) from #tmpHotelData
	open cur
	fetch next from cur into @countryKey, @cityFromKey
	while @@fetch_status = 0
	begin
		if (@mwSearchType != 0)
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			exec dbo.mwTruncatePriceTable @countryKey, @cityFromKey
		end		
		set @sql = '
		declare @mwAccomodationPlaces varchar(254)
		declare @mwRoomsExtraPlaces varchar(254)
			set @mwAccomodationPlaces = ''' + ltrim(rtrim(@mwAccomodationPlaces)) + '''
		set @mwRoomsExtraPlaces = ''' + ltrim(rtrim(@mwRoomsExtraPlaces)) + '''
			insert into'
		if (@mwSearchType = 0)
			set @sql = @sql + ' mwPriceDataTable '
		else
			set @sql = @sql + ' '+dbo.mwGetPriceTableName(@countryKey, @cityFromKey)+' ' 

		set @sql = @sql +  ' with(rowlock) (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights
		)
		select 
			(case when @mwAccomodationPlaces = ''0''
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> ''0'' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			tl_nameweb, 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			to_isenabled,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays
		from tp_tours
			inner join turList on to_trkey = tl_key
			inner join tp_lists on ti_tokey = to_key
			inner join tp_prices on tp_tikey = ti_key
			inner join tp_turdates on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary on ti_firsthdkey = hd_key
			inner join hotelrooms on ti_firsthrkey = hr_key
			inner join pansion on ti_firstpnkey = pn_key
			inner join rooms on hr_rmkey = rm_key
			inner join roomscategory on hr_rckey = rc_key
			inner join accmdmentype on hr_ackey = ac_key
			inner join citydictionary on hd_ctkey = ct_key
			left outer join resorts on hd_rskey = rs_key
		where td_date >= getdate() and to_cnkey = ' + cast(@countryKey as varchar(30)) + ' and isnull(ti_ctkeyfrom, 0) = ' + cast(@cityFromKey as varchar(30))
--	print @sql
		exec(@sql)
	

		if (@mwSearchType != 0)
			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
		fetch next from cur into @countryKey, @cityFromKey
	end		

	close cur
	deallocate cur

	if (@mwSearchType = 0)
		exec dbo.mwCreateAllPriceTablesIndexes
end
else
begin
	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey


	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey


	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey

	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
--

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
	
	delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey




	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
		exec(@sql)
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end
end


insert into dbo.mwPriceHotels (
	sd_tourkey,
	sd_mainhdkey,
	sd_mainpnkey,
	sd_hdkey,
	sd_hdstars,
	sd_hdctkey,
	sd_hdrskey,
	sd_hrkey,
	sd_rmkey,
	sd_rckey,
	sd_ackey,
	sd_pnkey,
	sd_hdorder)
select distinct 
	thd_tourkey, 
	thd_firsthdkey, 
	thd_firstpnkey,
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_hrkey, 
	thd_rmkey, 
	thd_rckey, 
	thd_ackey, 
	thd_pnkey,
	thd_hdorder
from #tmpHotelData

-- информация об отелях
insert into mwSpoDataTable(
	sd_tourkey, 
	sd_cnkey, 
	sd_hdkey, 
	sd_hdstars, 
	sd_ctkey, 
	sd_rskey, 
	sd_ctkeyfrom, 
	sd_ctkeyto, 
	sd_tlkey, 
	sd_isenabled, 
	sd_tourcreated,
	sd_main,
	sd_pnkey,
	sd_tourtype,
	sd_cnname,
	sd_tourname,
	sd_hdname,
	sd_ctname,
	sd_rsname,
	sd_ctfromname,
	sd_cttoname,
	sd_tourtypename,
	sd_pncode,
	sd_hotelkeys,
	sd_pansionkeys,
	sd_tourvalid
) 
select distinct 
	thd_tourkey, 
	thd_cnkey, 
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_ctkeyfrom, 
	thd_ctkeyto, 
	thd_tlkey, 
	thd_isenabled, 
	thd_tourcreated,
	thd_hdmain,
	thd_pnkey,
	thd_tourtype,
	thd_cnname,
	thd_tourname,
	thd_hdname,
	thd_ctname,
	thd_rsname,
	thd_ctfromname,
	thd_cttoname,
	thd_tourtypename,
	thd_pncode,
	thd_hotelkeys,
	thd_pansionkeys,
	thd_tourvalid 
from #tmpHotelData 
where thd_hdmain > 0
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

-- 7.2 - 8.1 sp_InsHistory.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsHistory]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[InsHistory]
GO

CREATE PROCEDURE [dbo].[InsHistory]
(
--<VERSION>2005.2.41.2</VERSION>
	@sDGCod varchar(10),
	@nDGKey int,
	@nOAId int,
	@nTypeCode int,
	@sMod varchar(3),
	@sText varchar(254),
	@sRemark varchar(25),
	@nInvisible int,
	@sDocumentNumber varchar(255),
	@bMessEnabled bit=0,
	@nSVKey int=null,
	@nCode int=null,
	@nHiId int=null output
)
AS
	declare @sWho varchar(25), @sType varchar(32)
	EXEC dbo.CurrentUser @sWho output
	select @sType = left(OA_Alias, 32) from ObjectAliases where OA_Id = @nOAId

	INSERT INTO dbo.History (
		HI_DGCOD, HI_DGKEY, HI_OAId, HI_DATE, HI_WHO, 
		HI_TEXT, HI_MOD, HI_REMARK, HI_TYPE, HI_TYPECODE, 
		HI_INVISIBLE, HI_DOCUMENTNAME, HI_MessEnabled, HI_SVKey, HI_Code)
	VALUES (
		@sDGCod, @nDGKey, @nOAId, GETDATE(), @sWho, 
		@sText, @sMod, @sRemark, @sType, @nTypeCode, 
		@nInvisible, @sDocumentNumber, @bMessEnabled, @nSVKey, @nCode)

		Set @nHiId = SCOPE_IDENTITY()

	RETURN SCOPE_IDENTITY()
GO
GRANT EXECUTE ON [dbo].[InsHistory] TO Public
GO

-- 7.2 - 8.1 090219(InsertObjectAliases).sql

IF NOT EXISTS (SELECT 1 FROM OBJECTALIASES WHERE OA_ID = 18)
	INSERT INTO OBJECTALIASES (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID)
	VALUES (18, 'UserList', 'Пользователи', NULL, 55)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 18001))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (18001, 'US_DepartmentKey', 'Ключ отдела', NULL, 55)


IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 1134))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (1134, 'US_DepartmentKey', 'Ключ отдела создателя путевки', NULL, 55)

 -- 7.2 - 8.1 T_UserListUpdate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_UserListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_UserListUpdate]
GO
CREATE TRIGGER [dbo].[T_UserListUpdate] 
   ON  [dbo].[UserList]  
   AFTER UPDATE
AS 
IF @@ROWCOUNT > 0
BEGIN
  DECLARE @OUS_Key int
  DECLARE @OUS_USERID varchar(10)
  DECLARE @OUS_DepartmentKey int

  DECLARE @NUS_Key int
  DECLARE @NUS_USERID varchar(10)
  DECLARE @NUS_DepartmentKey int

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @US_Key int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT N.US_KEY,
		   null, null,
		   N.US_USERID, N.US_DepartmentKey			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.US_KEY,
			O.US_USERID, O.US_DepartmentKey,
			null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.US_Key,
			O.US_USERID, O.US_DepartmentKey,
			N.US_USERID, N.US_DepartmentKey
    FROM DELETED O, INSERTED N 
    WHERE N.US_Key = O.US_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@US_Key, 
			@OUS_USERID, @OUS_DepartmentKey,
			@NUS_USERID, @NUS_DepartmentKey
    WHILE @@FETCH_STATUS = 0
	BEGIN 
    	------------Проверка, надо ли что-то писать в историю-------------------------------------------  
		If (
			ISNULL(@OUS_USERID, '') != ISNULL(@NUS_USERID, '')  OR
			ISNULL(@OUS_DepartmentKey, '') != ISNULL(@NUS_DepartmentKey, '')
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
				SET @sHI_Text = ISNULL(@NUS_USERID, '')
			else if (@sMod = 'DEL')
				SET @sHI_Text = ISNULL(@OUS_USERID, '')
			else if (@sMod = 'UPD')
				SET @sHI_Text = ISNULL(@NUS_USERID, '')

			EXEC @nHIID = dbo.InsHistory '', 0, 18, 0, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			If (ISNULL(@OUS_DepartmentKey, '') != ISNULL(@NUS_DepartmentKey, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 18001, null, null, @OUS_DepartmentKey, @NUS_DepartmentKey, null, null, 0
			END
		END
		    FETCH NEXT FROM cur_DogovorList INTO 
				@US_Key, 
					@OUS_USERID, @OUS_DepartmentKey,
					@NUS_USERID, @NUS_DepartmentKey
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
END

if exists(select id from sysobjects where name='REPLACEQUOTE' and xtype='p')
	drop procedure dbo.REPLACEQUOTE
go

if exists(select * from dbo.sysobjects where id = object_id(N'[dbo].[Key_Quotes]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	DROP TABLE dbo.Key_Quotes
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DELETEDOGLIST]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
Drop TRIGGER [dbo].[T_DELETEDOGLIST] 
Go

if exists(select id from sysobjects where name='DeleteDogList' and xtype='p')
	drop procedure dbo.DeleteDogList
go

if exists(select id from sysobjects where name='Delete_Quotes' and xtype='p')
	drop procedure dbo.Delete_Quotes
go

if exists(select id from sysobjects where name='CheckQuotes' and xtype='p')
	drop procedure dbo.CheckQuotes
go

if exists(select id from sysobjects where name='CheckAndTakeQuotes' and xtype='p')
	drop procedure dbo.CheckAndTakeQuotes
go

if exists(select id from sysobjects where name='Insert_Quotes' and xtype='p')
	drop procedure dbo.Insert_Quotes
go

if exists(select id from sysobjects where name='ReleaseQuotes' and xtype='p')
	drop procedure dbo.ReleaseQuotes
go

if exists(select id from sysobjects where name='MOVING_QUOTES' and xtype='p')
	drop procedure dbo.MOVING_QUOTES
go

if exists(select id from sysobjects where name='Justify_Quotes' and xtype='p')
	drop procedure dbo.Justify_Quotes
go

if exists(select id from sysobjects where name='DogovorTakeQuotes' and xtype='p')
	drop procedure dbo.DogovorTakeQuotes
go

if exists(select id from sysobjects where name='UPDATEDOGLIST' and xtype='p')
	drop procedure dbo.UPDATEDOGLIST
go

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_UpdateDogList]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
Drop TRIGGER [dbo].[T_UpdateDogList] 
Go

delete from dbo.[View] where VI_NAME like 'quotes'
go

--7.2 - 8.1 090224(AlterTable_Communications).sql
if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_CN_ID')
      alter table Communications add CM_CN_ID int default 0
GO

if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_CT_ID')
      alter table Communications add CM_CT_ID int default 0
GO

IF EXISTS (SELECT 1 FROM SystemSettings WHERE SS_ParmName = 'SYSNOTBLOCKFIELDS')
	DELETE FROM SystemSettings WHERE SS_ParmName = 'SYSNOTBLOCKFIELDS'
INSERT INTO SystemSettings VALUES ('SYSNOTBLOCKFIELDS',
'tbxName,tbxFName,tbxSName,tbxNameLat,tbxFNameLat,tbxSNameLat,tbxPaspSer,tbxPaspNumber,dtpPaspDate,tbxPaspByWho,dtpPaspDateEnd,tbtImport,tbtInsert,rbtAdtM,rbChildMale,rbtChdM,rbtInfM,rbtAdtF,rbtChdF,rbtInfF',
NULL, NULL, NULL, NULL)
GO

-- для версии 2008.1
update [dbo].[setting] set st_version = '8.1.3', st_moduledate = '2009-02-23',  st_financeversion = '7.2.22', st_financedate = '2009-02-23' where st_version like '8.%'
GO
UPDATE dbo.SystemSettings SET SS_ParmValue='2009-02-23' WHERE SS_ParmName='SYSScriptDate'
GO
--ForCapital(020309)

--270209(AlterTable_QuotaParts).sql
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[QuotaParts]') and name = 'QP_CheckInPlaces')
ALTER TABLE dbo.QuotaParts ADD QP_CheckInPlaces smallint NULL
GO

--sp_GetQuotaLoadListData_N.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetQuotaLoadListData_N]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetQuotaLoadListData_N] 
GO
create procedure [dbo].[GetQuotaLoadListData_N]
(
--<VERSION>2008.1.01.18a</VERSION>
@QT_ID int=null,
@Service_SVKey int=null,
@Service_Code int=null,
@DateStart smalldatetime = null,
@DaysCount int=null,			 -- для режима 10-для наличия мест - в этом поле передается продолжительность услуги

@nShowQuotaTypes smallint =null,  -- показывать квоты типа (0 - все, 1 - allotment, 2 - commitment)
@bShowCommonInfo bit =null,  -- показывать (1-общую информацию по квоте, 0-информацию по распределению квоты)
@bShowAgencyInfo bit =null,   -- показывать информацию об агентских квотах
@AgentKey int =null,
@bFreeSale bit =null,
@DLKey int =null,
@ResultType smallint=null,		--варианты отображения (0,null-общее, 10-для наличия мест(из оформления))
@TourDurations  smallint=null,
@DateStart2 smalldatetime = null,
@DateStart3 smalldatetime = null
)
as 

DECLARE @DateEnd smalldatetime, @Service_PRKey int, @QT_IDLocal int, @Result_From smallint, @Result_To smallint, @ServiceLong smallint, @DurationLocal smallint, @ByRoom int
--@Result
--11 - общее кол-во мест (строка 8000)
--12 - кол-во свободных мест (строка 8000)
--13 - кол-во занятых мест (строка 8000)
--21 - кол-во свободных мест (smallint)
--22 - % Stop-Sale (smallint)
--23 - возможен ли заезд (smallint)
if @ResultType is null or @ResultType not in (10)
	Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)
Else --для наличия мест(из оформления)
BEGIN
	Set @ServiceLong=@DaysCount
	Set @DateEnd = DATEADD(DAY,ISNULL(@DaysCount,1)-1,@DateStart3)
	Set @DaysCount=DATEDIFF(DAY,@DateStart,@DateEnd)+1

	if exists (select 1 from dbo.Service where SV_Key=@Service_SVKey and SV_IsDuration=1)
		set @DurationLocal=@ServiceLong
	Else
		set @DurationLocal=@TourDurations
END

--DECLARE @StopSaleTemp TABLE
--(
--SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
--)
-- Для совместимости с MSSQL 2000
CREATE TABLE #StopSaleTemp
(
SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
)

INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails	@DLKey, null, @DateStart, @DaysCount, null, null, @Service_SVKey, @Service_Code, null, null, 1

/*
select * from quotas,quotaobjects,quotadetails where 
qt_id=qo_qtid and qd_qtid=qt_id
and qo_code=8439 and qo_svkey=1 and QO_QTID is not null
and ISNULL(QD_IsDeleted,0)=0
and QD_Date between @DateStart and DATEADD(DAY,@DaysCount,@DateStart)
*/
CREATE TABLE #QuotaLoadList(
QL_QTID int, QL_PRKey int, QL_SubCode1 int, QL_PartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QL_Description nvarchar(255) collate Cyrillic_General_CI_AS, 
QL_dataType smallint, QL_Type smallint, QL_Release int, QL_Durations nvarchar(20) collate Cyrillic_General_CI_AS, QL_FilialKey int, 
QL_CityDepartments int, QL_AgentKey int, QL_CustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QL_DateCheckinMin smalldatetime,
QL_ByRoom int)

DECLARE @n int, @str varchar(1000)
if @ResultType is null or @ResultType not in (10)
BEGIN
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_B_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_F_' + CAST(@n as varchar(3)) + ' varchar(8000)
		exec (@str)
		set @n = @n + 1
	END
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' smallint'
		exec (@str)
		set @n = @n + 1
	END
END


if @bShowCommonInfo = 1
BEGIN
	insert into #QuotaLoadList 
	(QL_QTID, QL_Type, QL_Release, QL_dataType, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select	DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, @DateEnd+1,QT_PRKey, QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and ISNULL(QD_IsDeleted,0)=0
			and QD_Date between @DateStart and @DateEnd
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0)
			and NU_ID between 1 and 3
END
else
BEGIN
	DECLARE @Service_SubCode1 int, @Object_SubCode1 int, @Object_SubCode2 int
	SET @Object_SubCode1=0
	SET @Object_SubCode2=0
	IF @DLKey is not null				-- если мы запустили процедуру из конкрентной услуги
	BEGIN
		SELECT	@Service_SVKey=DL_SVKey, @Service_Code=DL_Code, @Service_SubCode1=DL_SubCode1, @AgentKey=ISNULL(DL_Agent,0), @Service_PRKey=DL_PartnerKey
		FROM	DogovorList
		WHERE	DL_Key=@DLKey
		If @Service_SVKey=3
			SELECT @Object_SubCode1=HR_RMKey, @Object_SubCode2=HR_RCKey FROM dbo.HotelRooms WHERE HR_Key=@Service_SubCode1
		Else
			SET @Object_SubCode1=@Service_SubCode1
	END

if @ResultType is null or @ResultType not in (10)
BEGIN
	Set @Result_From=11
	Set @Result_To=13
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	Set @Result_From=21
	Set @Result_To=23
END	
	insert into #QuotaLoadList 
		(QL_QTID, QL_Type, QL_Release, QL_dataType, 
		QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, 
		QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd+1,QT_PRKey,QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, QuotaParts, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID 
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and ISNULL(QP_IsDeleted,0)=0
			and ISNULL(QD_IsDeleted,0)=0
			and NU_ID between @Result_From and @Result_To
			and (@DLKey is null or (@DLKey is not null and QO_SubCode1 in (0,@Object_SubCode1) and QO_SubCode2 in (0,@Object_SubCode2)))
END

--update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_FilialKey and QL_FilialKey > 0)

DECLARE @QD_ID int, @Date smalldatetime, @State smallint, @QD_Release int, @QP_Durations varchar(20), @QP_FilialKey int,
		@QP_CityDepartments int, @QP_AgentKey int, @Quota_Places int, @Quota_Busy int, @QP_IsNotCheckIn bit,
		@QD_QTID int, @QP_ID int, @Quota_Comment varchar(8000), @Stop_Comment varchar(255) --,	@QT_ID int
DECLARE @ColumnName varchar(10), @QueryUpdate varchar(8000), @QueryUpdate1 varchar(255), @QueryWhere1 varchar(255), @QueryWhere2 varchar(255), 
		@QD_PrevID int, @StopSale_Percent int, @CheckInPlaces smallint --@QuotaObjects_Count int, 

if @bShowCommonInfo = 1
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,
			QD_Places, QD_Busy,
			0,'',0,0,0,0, ISNULL(REPLACE(QD_Comment,'''','"'),''),0
	FROM	Quotas, QuotaObjects, QuotaDetails
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID
else
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,			
			QP_Places, QP_Busy,
			QP_ID, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, ISNULL(QP_IsNotCheckIn,0), 
			ISNULL(REPLACE(QD_Comment,'''','"'),'') + '' + ISNULL(REPLACE(QP_Comment,'''','"'),''), QP_CheckInPlaces
	FROM	Quotas, QuotaObjects, QuotaDetails,QuotaParts
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID			
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and QP_QDID = QD_ID	
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and (QP_IsDeleted = 0 or QP_IsDeleted is null)
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID

OPEN curQLoadList
FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
									@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
									@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces
SET @QD_PrevID = @QD_ID - 1
--SELECT @QuotaObjects_Count = count(*) from QuotaObjects, Quotas where QO_QTID = QT_ID and QT_ID = @QT_ID

SET @StopSale_Percent=0
WHILE @@FETCH_STATUS = 0
BEGIN
	set @QueryUpdate1=''
	if DATEADD(DAY,ISNULL(@QD_Release,0),GetDate()) < @Date
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
	set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))

	If @QD_PrevID != @QD_ID
	BEGIN
		SET @StopSale_Percent=0
		SET @Stop_Comment = ''
		IF @DLKey is null
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100*SST_QO_Count/SST_QO_CountWithStop, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END
		ELSE
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END

		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment
		SET @QD_PrevID = @QD_ID
	END	
	ELSE
		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment

	set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))
	if @QD_Release is null
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release is null' 
	else
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release = ' + CAST(@QD_Release as varchar(5))
	
	if @bShowCommonInfo = 1
	BEGIN
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10)) + ';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
		set @QueryUpdate = 'UPDATE #QuotaLoadList SET 
			QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 1 THEN ''' + CAST((@Quota_Places) as varchar(10))  + ''' WHEN 2 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10))  + ''' WHEN 3 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + ' and QL_dataType in (1,2,3) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		--print @QueryUpdate
		exec (@QueryUpdate)
	END
	else
	BEGIN
		set @QueryWhere2 = ''
		if @QP_Durations is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + @QP_Durations + ''''
		if @QP_FilialKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey = ' + CAST(@QP_FilialKey as varchar(10))
		if @QP_CityDepartments is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments = ' + CAST(@QP_CityDepartments as varchar(10))
 		if @QP_AgentKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey = ' + CAST(@QP_AgentKey as varchar(10))
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10))  + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7980)) + ''''
		IF @ResultType is null or @ResultType not in (10)
		BEGIN
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST((@Quota_Places) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ';' + CAST(ISNULL(@CheckInPlaces,0) as varchar(10)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END
		ELSE
		BEGIN
		--для наличия мест(из оформления)
			--  WHEN 22 THEN ' + @StopSale_Percent + ' WHEN 23 THEN ' + @QP_IsNotCheckIn + ' END
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 21 THEN ' + CAST((@Quota_Places-@Quota_Busy) as varchar(5)) + ' WHEN 22 THEN ' + CAST(@StopSale_Percent as varchar(5)) + ' WHEN 23 THEN ' + CAST(@QP_IsNotCheckIn as varchar(5)) + ' END)' 
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (21,22,23) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END	
		--print @QueryUpdate
		exec (@QueryUpdate)
	END	
	FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
										@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
										@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces
END
CLOSE curQLoadList
DEALLOCATE curQLoadList

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	IF(@Service_SVKey = 3)
		SET @ByRoom = (SELECT AVG(ISNULL(QL_ByRoom,0)) FROM #QuotaLoadList)
	ELSE
		SET @ByRoom = 0

	insert into #QuotaLoadList 
		(QL_SubCode1, QL_Type, QL_dataType, QL_PRKey, QL_ByRoom)
	select DISTINCT DL_SubCode1, SD_State, 21, DL_PartnerKey, @ByRoom
	from	DogovorList,ServiceByDate
	where	SD_DLKey=DL_Key
			and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd))
			and SD_Date<=@DateEnd and SD_Date>=@DateStart
			and SD_State not in (1,2)
	group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
END

update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_AgentKey and QL_AgentKey > 0)
update #QuotaLoadList set QL_PartnerName = (Select PR_Name from Partners where PR_Key = QL_PRKey and QL_PRKey > 0)
update #QuotaLoadList set QL_PartnerName = 'All partners' where QL_PRKey=0

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	DECLARE @ServiceCount int, @SubCode1 int, @PartnerKey int

	DECLARE curQServiceList CURSOR FOR SELECT
		SD_Date, CASE @ByRoom WHEN 1 THEN count(distinct SD_RLID) ELSE count(SD_ID) END, 
		DL_SubCode1, DL_PartnerKey, SD_State
		from	DogovorList,ServiceByDate
		where	SD_DLKey=DL_Key
				and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
				and SD_State not in (1,2)
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
	OPEN curQServiceList
	FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))
		set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))

		set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + @ColumnName + ' = ''' + CAST((@ServiceCount) as varchar(10))  + ''' 
		WHERE QL_Type = ' + CAST(@State as varchar(1)) + ' and QL_SubCode1= ' + CAST(@SubCode1 as varchar(10)) + ' and QL_PRKey= ' + CAST(@PartnerKey as varchar(10))

		exec (@QueryUpdate)
		FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State
	END
	CLOSE curQServiceList
	DEALLOCATE curQServiceList
END

DECLARE @QO_SubCode int, @QO_TypeD smallint, @DL_SubCode1 int, @QT_ID_Prev int, @ServiceName1 varchar(100), @ServiceName2 varchar(100), @Temp varchar(100)
DECLARE curQLoadListQO CURSOR FOR 
	SELECT DISTINCT QO_QTID, QO_SubCode1, 1, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT QO_QTID, QO_SubCode2, 2, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT null, null, null, QL_SubCode1 FROM #QuotaLoadList WHERE QL_SubCode1 is not null
	ORDER BY 1,3

OPEN curQLoadListQO
FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
Set @QT_ID_Prev=@QT_IDLocal
Set @ServiceName1=''
Set @ServiceName2=''


WHILE @@FETCH_STATUS = 0
BEGIN
	if @DL_SubCode1 is not null
	BEGIN
		Set @Temp=''
		exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, @Temp output, null, null

		Update #QuotaLoadList set QL_Description=ISNULL(QL_Description,'') + @Temp where QL_SubCode1=@DL_SubCode1
	END
	Else
	BEGIN
		If @QT_ID_Prev != @QT_IDLocal
		BEGIN
			If @Service_SVKey=3
			BEGIN
				Set @ServiceName2='(' + @ServiceName2 + ')'
			END
			Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev
			Set @ServiceName1=''
			Set @ServiceName2=''
		END
		SET @QT_ID_Prev=@QT_IDLocal
		Set @Temp=''
		If @Service_SVKey=3
		BEGIN
			IF @QO_TypeD=1
			BEGIN
				EXEC GetRoomName @QO_SubCode, @Temp output, null
				If @ServiceName1!=''
					Set @ServiceName1=@ServiceName1+','
				Set @ServiceName1=@ServiceName1+@Temp
			END			
			Set @Temp=''
			IF @QO_TypeD=2
			BEGIN
				EXEC GetRoomCtgrName @QO_SubCode, @Temp output, null
				If @ServiceName2!=''
					Set @ServiceName2=@ServiceName2+','
				Set @ServiceName2=@ServiceName2+@Temp
			END
		END
		ELse
		BEGIN
			exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, @Temp output, null, null
			If @ServiceName1!=''
				Set @ServiceName1=@ServiceName1+','
			Set @ServiceName1=@ServiceName1+@Temp
		END
	END
	FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
END
If @Service_SVKey=3
BEGIN
	Set @ServiceName2='(' + @ServiceName2 + ')'
END
Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev

CLOSE curQLoadListQO
DEALLOCATE curQLoadListQO

If @Service_SVKey=3
BEGIN
	Update #QuotaLoadList set QL_Description = QL_Description + ' - Per person' where QL_ByRoom = 0
END

IF @ResultType is null or @ResultType not in (10)
BEGIN
	select * 
	from #QuotaLoadList 
	order by QL_QTID-QL_QTID DESC /*Сначала квоты, потом неквоты*/,QL_Description,QL_PartnerName,QL_Type DESC,QL_Release,QL_Durations,QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
	RETURN 0
END
ELSE
BEGIN --для наличия мест(из оформления)
	CREATE TABLE #ServicePlacesTr(
		SPT_QTID int, SPT_PRKey int, SPT_SubCode1 int, SPT_PartnerName varchar(100), SPT_Description varchar(255), 
		SPT_Type smallint, SPT_FilialKey int, SPT_CityDepartments int, SPT_Release int, SPT_Durations varchar(100),
		SPT_AgentKey int, SPT_Date smalldatetime, SPT_Places smallint, SPT_Stop smallint, SPT_CheckIn smallint)
	
	-- В MSSQL 2000 это не работает
	--ALTER TABLE #ServicePlacesTr ADD SPT_Date smalldatetime
	--ALTER TABLE #ServicePlacesTr ADD SPT_Places smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_Stop smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_CheckIn smallint


	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		DECLARE @curDate smalldatetime
		SET @curDate = DATEADD(DAY,@n-1,@DateStart)

		set @str = '
			INSERT INTO #ServicePlacesTr 
				(SPT_QTID, SPT_PRKey,SPT_SubCode1,SPT_PartnerName,SPT_Description,SPT_Type,
				SPT_FilialKey,SPT_CityDepartments,SPT_Release,SPT_Durations,SPT_AgentKey,
				SPT_Date,SPT_Places) 
			SELECT QL_QTID, QL_PRKey,QL_SubCode1,QL_PartnerName, QL_Description, QL_Type, 
				QL_FilialKey, QL_CityDepartments,QL_Release,QL_Durations,QL_AgentKey, 
				''' + CAST(@curDate as varchar(20)) + ''', QL_' + CAST(@n as varchar(3)) + '
				FROM #QuotaLoadList
				WHERE QL_dataType=21'
		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_Stop=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=22 and 
					SPT_QTID=QL_QTID and
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and 
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date=''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20))+ ''''

		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_CheckIn=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=23 and
					SPT_QTID=QL_QTID and 
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date= ''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20)) + ''''

		exec (@str)
		set @n = @n + 1
	END
END

--Select * from #ServicePlacesTr 	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

CREATE TABLE #ServicePlaces(
	SP_PRKey int, SP_SubCode1 int, SP_PartnerName varchar(100), SP_Description varchar(255), 
	SP_Type smallint, SP_FilialKey int, SP_CityDepartments int, 
	SP_Places1 smallint, SP_Places2 smallint, SP_Places3 smallint, 
	SP_NonReleasePlaces1 smallint,SP_NonReleasePlaces2 smallint,SP_NonReleasePlaces3 smallint, 
	SP_StopPercent1 smallint,SP_StopPercent2 smallint,SP_StopPercent3 smallint)

DECLARE @SPT_QTID int, @SPT_PRKey int, @SPT_SubCode1 int, @SPT_PartnerName varchar(100), @SPT_Description varchar(255), 
		@SPT_Type smallint, @SPT_FilialKey int, @SPT_CityDepartments int, @SPT_Release smallint, @SPT_Date smalldatetime, 
		@SPT_Places smallint, @SPT_Stop smallint, @SPT_CheckIn smallint, @SPT_PRKey_Old int, @SPT_PartnerName_Old varchar(100), 
		@SPT_SubCode1_Old int, @SPT_Description_Old varchar(255), @SPT_Type_Old smallint, @SPT_FilialKey_Old int,
		@SPT_CityDepartments_Old int, @SPT_Date_Old smalldatetime,
		@currentPlaces1 smallint, @currentPlaces2 smallint, @currentPlaces3 smallint,
		@currentNonReleasePlaces1 smallint, @currentNonReleasePlaces2 smallint, @currentNonReleasePlaces3 smallint,
		@OblectPlacesMin1 smallint, @OblectPlacesMin2 smallint, @OblectPlacesMin3 smallint,
		@OblectNonReleasePlacesMin1 smallint, @OblectNonReleasePlacesMin2 smallint, @OblectNonReleasePlacesMin3 smallint,
		@stopPercentSum1 smallint,@stopPercentSum2 smallint,@stopPercentSum3 smallint,
		@quotaCounter1 smallint,@quotaCounter2 smallint,@quotaCounter3 smallint,
		@Now smalldatetime

SET @Now = GETDATE()
		
DECLARE curQ2 CURSOR FOR SELECT
			 SPT_QTID, SPT_PRKey, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_Type, SPT_FilialKey, 
			 SPT_CityDepartments, ISNULL(SPT_Release, 0), SPT_Date, ISNULL(SPT_Places, 0), ISNULL(SPT_Stop,0), SPT_CheckIn
	FROM	#ServicePlacesTr
	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

OPEN curQ2
FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
		@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

SET @SPT_PRKey_Old=@SPT_PRKey
SET @SPT_Description_Old=@SPT_Description
SET @SPT_PartnerName_Old=@SPT_PartnerName
SET @SPT_Type_Old=@SPT_Type
SET @SPT_Date_Old=@SPT_Date
SET @currentPlaces1=0
SET @currentPlaces2=0
SET @currentPlaces3=0
SET @currentNonReleasePlaces1=0
SET @currentNonReleasePlaces2=0
SET @currentNonReleasePlaces3=0
SET @stopPercentSum1=0
SET @stopPercentSum2=0
SET @stopPercentSum3=0
SET @quotaCounter1=0
SET @quotaCounter2=0
SET @quotaCounter3=0


WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SPT_PRKey=@SPT_PRKey_Old and @SPT_Description=@SPT_Description_Old and ISNULL(@SPT_Type,-1)=ISNULL(@SPT_Type_Old,-1) and @SPT_Date!=@SPT_Date_Old
	BEGIN
		If (@OblectPlacesMin1 is null or @OblectPlacesMin1 > @currentPlaces1) AND @SPT_Date_Old BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
		BEGIN
			--Set @quotaCounter1=0
			Set @OblectPlacesMin1=@currentPlaces1
			--Set @currentPlaces1=0
			Set @OblectNonReleasePlacesMin1=@currentNonReleasePlaces1
			--Set @currentNonReleasePlaces1=0
		END
		If (@OblectPlacesMin2 is null or @OblectPlacesMin2 > @currentPlaces2) AND @SPT_Date_Old BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
		BEGIN
			--Set @quotaCounter2=0
			Set @OblectPlacesMin2=@currentPlaces2
			--Set @currentPlaces2=0
			Set @OblectNonReleasePlacesMin2=@currentNonReleasePlaces2
			--Set @currentNonReleasePlaces2=0
		END
		If (@OblectPlacesMin3 is null or @OblectPlacesMin3 > @currentPlaces3) AND @SPT_Date_Old BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
		BEGIN
			--Set @quotaCounter3=0
			Set @OblectPlacesMin3=@currentPlaces3
			--Set @currentPlaces3=0
			Set @OblectNonReleasePlacesMin3=@currentNonReleasePlaces3
			--Set @currentNonReleasePlaces3=0
		END
-- При смене даты обнуляем текущие колличества мест
		SET @currentPlaces1=0
		SET @currentPlaces2=0
		SET @currentPlaces3=0
		SET @currentNonReleasePlaces1=0
		SET @currentNonReleasePlaces2=0
		SET @currentNonReleasePlaces3=0
	END

	IF @SPT_PRKey!=@SPT_PRKey_Old or @SPT_Description!=@SPT_Description_Old or ISNULL(@SPT_Type,-1)!=ISNULL(@SPT_Type_Old,-1)
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
				SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
				SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
				SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
				@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
				ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
				ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
				@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)

		set @OblectPlacesMin1 = null
		set @OblectPlacesMin2 = null
		set @OblectPlacesMin3 = null
		set @OblectNonReleasePlacesMin1 = null
		set @OblectNonReleasePlacesMin2 = null
		set @OblectNonReleasePlacesMin3 = null
		Set @currentPlaces1=0
		Set @currentPlaces2=0
		Set @currentPlaces3=0
		Set @currentNonReleasePlaces1=0
		Set @currentNonReleasePlaces2=0
		Set @currentNonReleasePlaces3=0
		Set @stopPercentSum1=0
		Set @stopPercentSum2=0
		Set @stopPercentSum3=0
		Set @quotaCounter1=0
		Set @quotaCounter2=0
		Set @quotaCounter3=0
	END

	If @SPT_Date BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
	BEGIN
			Set @quotaCounter1=@quotaCounter1+1
		Set @stopPercentSum1 = @stopPercentSum1 + @SPT_Stop
		Set @currentPlaces1=@currentPlaces1+@SPT_Places
		If @DateStart > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces1=@currentNonReleasePlaces1+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
	BEGIN
			Set @quotaCounter2=@quotaCounter2+1
		Set @stopPercentSum2 = @stopPercentSum2 + @SPT_Stop
		Set @currentPlaces2=@currentPlaces2+@SPT_Places
		If @DateStart2 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces2=@currentNonReleasePlaces2+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
	BEGIN
			Set @quotaCounter3=@quotaCounter3+1
		Set @stopPercentSum3 = @stopPercentSum3 + @SPT_Stop
		Set @currentPlaces3=@currentPlaces3+@SPT_Places
		If @DateStart3 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces3=@currentNonReleasePlaces3+@SPT_Places
	END

	SET @SPT_PRKey_Old=@SPT_PRKey
	SET @SPT_PartnerName_Old=@SPT_PartnerName
	SET @SPT_Description_Old=@SPT_Description
	SET @SPT_Type_Old=@SPT_Type
	SET @SPT_Date_Old=@SPT_Date
	FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
			@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

	If @@FETCH_STATUS != 0
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
			SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
			SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
			SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
			@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
			ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
			ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
			@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)
		END
END
CLOSE curQ2
DEALLOCATE curQ2

--select * from #ServicePlacesTr
--ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
--		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

--select * from #ServicePlaces


	select 
		SP_PRKey,SP_PartnerName,SP_Description,SP_SubCode1,SP_Type,SP_FilialKey,SP_CityDepartments,
		CAST(SP_Places1 as varchar(4))+';'+CAST(SP_NonReleasePlaces1 as varchar(4))+';'+CAST(SP_StopPercent1 as varchar(4)) as SP_1,
		CAST(SP_Places2 as varchar(4))+';'+CAST(SP_NonReleasePlaces2 as varchar(4))+';'+CAST(SP_StopPercent2 as varchar(4)) as SP_2,
		CAST(SP_Places3 as varchar(4))+';'+CAST(SP_NonReleasePlaces3 as varchar(4))+';'+CAST(SP_StopPercent3 as varchar(4)) as SP_3
	from #ServicePlaces
	order by SP_Description, SP_PartnerName, SP_Type


--select * from #QuotaLoadList
GO

GRANT EXECUTE ON [dbo].[GetQuotaLoadListData_N] TO PUBLIC 
GO
--090227(Insert_ObjectAliases).sql
if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 19))
insert into ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_TABLEID) values (19, 'ServiceByDate', 'Информация по услугам', 71)
GO
if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 19001))
insert into ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_TABLEID) values (19001, 'SD_State', 'Статус бронирования', 71)
GO

--T_ServiceByDateChanged.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_ServiceByDateChanged]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_ServiceByDateChanged]
GO
CREATE TRIGGER [T_ServiceByDateChanged] ON [dbo].[ServiceByDate]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2008.1.00.07a</VERSION>
DECLARE @sMod varchar(3), @nHIID int, @sDGCode varchar(10), @nDGKey int, @sDLName varchar(150), @sTemp varchar(25), @sTemp2 varchar(255), @sTuristName varchar(55)
DECLARE @sOldValue varchar(255), @sNewValue varchar(255), @nOldValue int, @nNewValue int, @SDDate datetime
DECLARE @nRowsCount int

DECLARE @SDID int, @N_SD_DLKey int, @N_SD_RLID int, @N_SD_TUKEY int, @N_SD_QPID int, @N_SD_State smallint, @N_SD_Date datetime,
		@O_SD_DLKey int, @O_SD_RLID int, @O_SD_TUKEY int, @O_SD_QPID int, @O_SD_State smallint, @O_SD_Date datetime, @QT_ByRoom bit,
		@nDelCount smallint, @nInsCount smallint

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	O.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
			null, null, null, null, null, null
    FROM DELETED O
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			null, null, null, null, null, null,
			N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
    FROM	INSERTED N 
END
ELSE 
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
	  		N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
    FROM DELETED O, INSERTED N 
    WHERE N.SD_ID = O.SD_ID
END

OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
				@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ISNULL(@O_SD_QPID,0)!=ISNULL(@N_SD_QPID,0) 
	BEGIN
		If @O_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@O_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
			END
		END
		If @N_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@N_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
			END
		END
	END
	IF ISNULL(@O_SD_STATE, 0) != ISNULL(@N_SD_STATE, 0)
	BEGIN
		select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID
		set @sTemp = convert(varchar(25), @N_SD_Date, 104)
		if (@sTemp2 is not null)		
		begin
			set @sMod = 'UPD'
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''
			
			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'

			EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, @sNewValue, @nOldValue, @nNewValue, null, null, 0
		end
	END
	IF ISNULL(@O_SD_TUKEY,0)!=ISNULL(@N_SD_TUKEY,0)
	BEGIN
		IF (@N_SD_TUKEY is not null)
		BEGIN
			SELECT @sDGCode = DL_DGCod, @nDGKey = DL_DGKey, @sDLName = DL_Name FROM DogovorList WHERE DL_KEY = @N_SD_DLKey
			SELECT @sTuristName = TU_NAMERUS + ' ' + TU_FNAMERUS + ' ' + TU_SNAMERUS FROM Turist WHERE TU_KEY = @N_SD_TUKEY
			SET @SDDate = @N_SD_Date
			set @sTemp2 = rtrim(ltrim(@sDLName)) + ', ' + @sTuristName
			set @sMod = 'INS'
		END
		ELSE
		BEGIN
			SET @SDDate = @O_SD_Date
			select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID
			set @sMod = 'DEL'
		END

		if (@sTemp2 is not null)
		BEGIN
			set @sTemp = convert(varchar(25), @SDDate, 104)
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''

			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'
			
			IF (@sMod = 'INS')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, '', @sNewValue, null, @nNewValue, null, null, 0
			ELSE IF (@sMod = 'DEL')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, '', @nOldValue, null, null, null, 0
		END
	END
	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
					@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
END
IF @O_SD_DLKey is not null and @N_SD_DLKey is null
	IF exists (SELECT 1 FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate) )
		DELETE FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate)

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO
--090227_AddCol_Control_AddColCommunications.sql
if NOT EXISTS (select id from syscolumns where id = OBJECT_ID('Controls') and name = 'CR_GlobalState')
	ALTER TABLE Controls ADD CR_GlobalState smallint
GO
-- CR_GlobalState - Глобальный статус услуги (1-Confirmed; 2-Wait; 3-Not Confirmed)
UPDATE Controls SET CR_GlobalState=CASE CR_Key WHEN 0 THEN 1 ELSE 2 END WHERE CR_GlobalState is null
GO

if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_StatusConfirmed')
	alter table Communications add CM_StatusConfirmed smallint default 0
GO

if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_StatusNotConfirmed')
	alter table Communications add CM_StatusNotConfirmed smallint default 0

if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_StatusWait')
	alter table Communications add CM_StatusWait smallint default 0
GO

if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_StatusUnknown')
	alter table Communications add CM_StatusUnknown smallint default 0
GO

--090227(CheckInnerFlightsQuotes_ComplexScript).sql
print 'Create Function mwConcatFlightsGroupsQuotas'
go

if exists(select id from sysobjects where name='mwConcatFlightsGroupsQuotas' and xtype='fn')
	drop function dbo.mwConcatFlightsGroupsQuotas
go

create function [dbo].[mwConcatFlightsGroupsQuotas](@groupQuota1 varchar(256), @groupQuota2 varchar(256))
returns varchar(256)
as
begin
	if (len(@groupQuota1) = 0)
		return @groupQuota2

	declare @result varchar(256)
	set		@result = ''

	declare @curPosition1 int
		set @curPosition1 = 0
	declare @curPosition2 int
		set @curPosition2 = 0

	declare @prevPosition1 int
		set @prevPosition1 = 1
	declare @prevPosition2 int
		set @prevPosition2 = 1

	declare @emptyPlaces1 float, @allPlaces1 float
	declare @emptyPlaces2 float, @allPlaces2 float

	declare @subQuota1 varchar(50)
		set @subQuota1  = ''

	declare @subQuota2 varchar(50)
		set @subQuota2  = ''

	declare @flag smallint
		set @flag = 0

	while (charindex(',', @groupQuota1, @curPosition1 + 1) > 0 or @flag = 0)
	begin
		set @curPosition1 = charindex('|', @groupQuota1, @curPosition1 + 1)
		set @curPosition2 = charindex('|', @groupQuota2, @curPosition2 + 1)
		if (@curPosition1 = 0)
		begin
			set @subQuota1  = substring(@groupQuota1, @prevPosition1, len(@groupQuota1))
			set @curPosition1 = len(@groupQuota1)
			set @subQuota2  = substring(@groupQuota2, @prevPosition2, len(@groupQuota2))
			set @curPosition2 = len(@groupQuota2)
			set @flag = 1
		end 
		else
		begin
			set @subQuota1  = substring(@groupQuota1, @prevPosition1, @curPosition1 - @prevPosition1)
			set @subQuota2  = substring(@groupQuota2, @prevPosition2, @curPosition2 - @prevPosition2)
		end
		
		set @prevPosition1 = @curPosition1 + 1
		set @prevPosition2 = @curPosition2 + 1

		set @emptyPlaces1 = CAST(substring(@subQuota1, 0, charindex(':', @subQuota1, 0)) as float)
		set @allPlaces1 = CAST(substring(@subQuota1, charindex(':', @subQuota1, 0) + 1, len(@subQuota1) + 1 - charindex(':', @subQuota1, 0)) as float)

		set @emptyPlaces2 = CAST(substring(@subQuota2, 0, charindex(':', @subQuota2, 0)) as float)
		set @allPlaces2 = CAST(substring(@subQuota2, charindex(':', @subQuota2, 0) + 1, len(@subQuota2) + 1 - charindex(':', @subQuota2, 0)) as float)

		if (@emptyPlaces1 = 0)
			set @result = @result + @subQuota1
		else if (@emptyPlaces2 = 0)
			set @result = @result + @subQuota2
		else if (@emptyPlaces1 = -1)
			set @result = @result + @subQuota1
		else if (@emptyPlaces2 = -1)
			set @result = @result + @subQuota2
		else if (@emptyPlaces1 / @allPlaces1 < @emptyPlaces2 / @allPlaces2)
			set @result = @result + @subQuota1
		else
			set @result = @result + @subQuota2
			
		set @result = @result + '|'
	end

	return substring(@result, 1, len(@result) - 1)
end
go

grant exec on dbo.mwConcatFlightsGroupsQuotas to public
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Create function mwGetTourCharters'
go

if exists(select id from sysobjects where name='mwGetTourCharters' and xtype='fn')
	drop function dbo.mwGetTourCharters
go

create function [dbo].[mwGetTourCharters](@tikey int, @isDirectFlight smallint)
returns varchar(50)
as
begin
	declare @result varchar(50)
	set		@result = ''

	select 
		@result = @result + isnull(ltrim(str(ts_code)),'') + ':' + isnull(ltrim(str(ts_day)),'') + ':' + isnull(ltrim(str(TS_OpPartnerKey)),'') + ':' + isnull(ltrim(str(TS_OpPacketKey)),'') + ','
	from 
		tp_services 
			inner join tp_servicelists on tl_tskey = ts_key
			inner join tp_lists on ti_key = tl_tikey
	where
		ts_svkey = 1 and
		tl_tikey = @tikey and
		(
			(@isDirectFlight > 0 and ts_day <= ti_days / 2)
			or
			(@isDirectFlight = 0 and ts_day > ti_days / 2)
		)
	order by
		ts_day

	-- Remove comma at the end of string
	if(len(@result) > 0)
		set @result = substring(@result, 1, len(@result) - 1)

	return @result
end
go

grant exec on dbo.mwGetTourCharters to public
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Alter SP mwFillPriceTable'
go

if exists(select id from sysobjects where xtype='p' and name='mwFillPriceTable')
	drop proc dbo.mwFillPriceTable
go

create procedure [dbo].[mwFillPriceTable] 
	@dataTableName varchar (1024),
	@countryKey int,
	@cityFromKey int
as

declare @mwSearchType int
select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
where SS_ParmName = 'MWDivideByCountry'

declare @tableName varchar (1024)
if @mwSearchType = 0
	set @tableName = 'mwPriceDataTable'
else
	set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)
declare @sql varchar (8000)
set @sql = 'insert into ' + @tableName + '(
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys)
		select
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys
		from ' + @dataTableName
exec (@sql)

go

grant exec on dbo.mwFillPriceTable to public
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Alter SP FillMasterWebSearchFields'
go

if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int = null)
as
begin
create table #tmpHotelData (
	thd_tourkey int, 
	thd_firsthdkey int,
	thd_firstpnkey int, 
	thd_cnkey int, 
	thd_tlkey int, 
	thd_isenabled smallint, 
	thd_tourcreated datetime, 
	thd_hdstars varchar(15), 
	thd_ctkey int, 
	thd_rskey int, 
	thd_hdkey int, 
	thd_hdpartnerkey int, 
	thd_hrkey int, 
	thd_rmkey int, 
	thd_rckey int, 
	thd_ackey int, 
	thd_pnkey int, 
	thd_hdmain smallint,
	thd_firsthotelday int,
	thd_ctkeyfrom int, 
	thd_ctkeyto int, 
	thd_apkeyfrom int, 
	thd_apkeyto int,
	thd_tourtype int,
	thd_cnname varchar(200),
	thd_tourname varchar(200),
	thd_hdname varchar(200),
	thd_ctname varchar(200),
	thd_rsname varchar(200),
	thd_ctfromname varchar(200),
	thd_cttoname varchar(200),
	thd_tourtypename varchar(200),
	thd_pncode varchar(50),
	thd_hdorder int,
	thd_hotelkeys varchar(256),
	thd_pansionkeys varchar(256),
	thd_hotelnights varchar(256),
	thd_tourvalid datetime
)

create table #tempPriceTable(
	[pt_mainplaces] [int] NULL ,
	[pt_addplaces] [int] NULL ,
	[pt_main] [smallint] NULL ,
	[pt_tourvalid] [datetime] NULL ,
	[pt_tourcreated] [datetime] NULL ,
	[pt_tourdate] [datetime] NOT NULL,
	[pt_days] [int] NULL ,
	[pt_nights] [int] NULL ,
	[pt_cnkey] [int] NULL ,
	[pt_ctkeyfrom] [int] NULL ,
	[pt_apkeyfrom] [int] NULL ,
	[pt_ctkeyto] [int] NULL ,
	[pt_apkeyto] [int] NULL ,
	[pt_ctkeybackfrom] [int] NULL,
	[pt_ctkeybackto] [int] NULL,
	[pt_tourkey] [int] NOT NULL,
	[pt_tourtype] [int] NULL ,
	[pt_tlkey] [int] NULL ,
	[pt_pricelistkey] [int] NULL ,
	[pt_pricekey] [int] NOT NULL,
	[pt_price] [float] NULL ,
	[pt_hdkey] [int] NULL ,
	[pt_hdpartnerkey] [int] null,
	[pt_rskey] [int] NULL ,
	[pt_ctkey] [int] NULL ,
	[pt_hdstars] [varchar] (12) NULL ,
	[pt_pnkey] [int] NULL ,
	[pt_hrkey] [int] NULL ,
	[pt_rmkey] [int] NULL ,
	[pt_rckey] [int] NULL ,
	[pt_ackey] [int] NULL ,
	[pt_childagefrom] [int] NULL ,
	[pt_childageto] [int] NULL ,
	[pt_childagefrom2] [int] NULL ,
	[pt_childageto2] [int] NULL ,
	[pt_hdname] [varchar] (60),
	[pt_tourname] [varchar] (128),
	[pt_pnname] [varchar] (30),
	[pt_pncode] [varchar] (3),
	[pt_rmname] [varchar] (35),
	[pt_rmcode] [varchar] (8),
	[pt_rcname] [varchar] (35),
	[pt_rccode] [varchar] (8),
	[pt_acname] [varchar] (30),
	[pt_accode] [varchar] (15),
	[pt_rsname] [varchar] (20),
	[pt_ctname] [varchar] (50),
	[pt_rmorder] [int] NULL ,
	[pt_rcorder] [int] NULL ,
	[pt_acorder] [int] NULL ,
	[pt_rate] [varchar] (3),
	[pt_toururl] [varchar] (128),
	[pt_hotelurl] [varchar] (254),
	[pt_isenabled] [smallint] NULL,
	[pt_chkey] int null,
	[pt_chbackkey] int null,
	[pt_hdday] int null,
	[pt_hdnights] int null,
	[pt_chday] int null,
	[pt_chpkkey] int null,
	[pt_chprkey] int null,
	[pt_chbackday] int null,
	[pt_chbackpkkey] int null,
	[pt_chbackprkey] int null,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_hotelnights varchar(256),
	pt_chdirectkeys varchar(50) null,
	pt_chbackkeys varchar(50) null
)

declare @mwAccomodationPlaces varchar(254)
declare @mwRoomsExtraPlaces varchar(254)
declare @mwSearchType int
declare @sql varchar(8000)
declare @countryKey int
declare @cityFromKey int

if @tokey is null
begin
	exec dbo.mwCleaner

	update tp_lists
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)

	update tp_lists
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists
					inner join tp_services on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services
					inner join dbo.tp_servicelists on tl_tskey = ts_key 
				where tl_tikey = ti_key)

	update tp_lists
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists 
					inner join tp_services on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)

	update tp_lists
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)

	update tp_lists 
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey) 

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_ctkeyfrom = ts_subcode2, 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where to_key = ti_tokey  

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and ts_ctkey = tl_ctdeparturekey
		and ti_tokey = to_key
	
	-- _ключ_ аэропорта вылета
	update tp_lists 
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	-- _ключ_ аэропорта прилета
	update tp_lists 
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	
	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_firsthdkey = hd_key


	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey,
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		TO_DateValid
	from tp_lists
		inner join tp_tours on ti_tokey = to_key
		inner join tp_servicelists on tl_tikey = ti_key 
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary on ts_code = hd_key
		inner join hotelrooms on hr_key = ts_subcode1
		inner join turList on turList.tl_key = to_trkey
		inner join country on cn_key = to_cnkey
		inner join citydictionary on ct_key = hd_ctkey
		inner join tiptur on tp_key = tl_tip
		inner join pansion on pn_key = ts_subcode2
	where to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0

	exec dbo.mwDropAllPriceTablesIndexes		

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	truncate table dbo.mwSpoDataTable
	truncate table dbo.mwPriceHotels
	truncate table dbo.mwPriceDurations
	if(@mwSearchType = 0)
		exec sp_executesql N'truncate table dbo.mwPriceDataTable'
	
	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists inner join tp_tours on ti_tokey = to_key

	declare cur cursor fast_forward read_only for select distinct isnull(thd_cnkey, 0), isnull(thd_ctkeyfrom, 0) from #tmpHotelData
	open cur
	fetch next from cur into @countryKey, @cityFromKey
	while @@fetch_status = 0
	begin
		if (@mwSearchType != 0)
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			exec dbo.mwTruncatePriceTable @countryKey, @cityFromKey
		end		
		set @sql = '
		declare @mwAccomodationPlaces varchar(254)
		declare @mwRoomsExtraPlaces varchar(254)
			set @mwAccomodationPlaces = ''' + ltrim(rtrim(@mwAccomodationPlaces)) + '''
		set @mwRoomsExtraPlaces = ''' + ltrim(rtrim(@mwRoomsExtraPlaces)) + '''
			insert into'
		if (@mwSearchType = 0)
			set @sql = @sql + ' mwPriceDataTable '
		else
			set @sql = @sql + ' '+dbo.mwGetPriceTableName(@countryKey, @cityFromKey)+' ' 

		set @sql = @sql +  ' with(rowlock) (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys
		)
		select 
			(case when @mwAccomodationPlaces = ''0''
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> ''0'' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			tl_nameweb, 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			to_isenabled,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays,
			dbo.mwGetTourCharters(ti_key, 1),
			dbo.mwGetTourCharters(ti_key, 0)
		from tp_tours
			inner join turList on to_trkey = tl_key
			inner join tp_lists on ti_tokey = to_key
			inner join tp_prices on tp_tikey = ti_key
			inner join tp_turdates on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary on ti_firsthdkey = hd_key
			inner join hotelrooms on ti_firsthrkey = hr_key
			inner join pansion on ti_firstpnkey = pn_key
			inner join rooms on hr_rmkey = rm_key
			inner join roomscategory on hr_rckey = rc_key
			inner join accmdmentype on hr_ackey = ac_key
			inner join citydictionary on hd_ctkey = ct_key
			left outer join resorts on hd_rskey = rs_key
		where td_date >= getdate() and to_cnkey = ' + cast(@countryKey as varchar(30)) + ' and isnull(ti_ctkeyfrom, 0) = ' + cast(@cityFromKey as varchar(30))

		exec(@sql)
	

		if (@mwSearchType != 0)
			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
		fetch next from cur into @countryKey, @cityFromKey
	end		

	close cur
	deallocate cur

	if (@mwSearchType = 0)
		exec dbo.mwCreateAllPriceTablesIndexes
end
else
begin
	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
		 		where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
			      			      end) + ts_day - 1 
		     			   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey


	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey


	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey

	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate()

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
--

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
	
	delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
	delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0)
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey




	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
		exec(@sql)
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey
			set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end
end


insert into dbo.mwPriceHotels (
	sd_tourkey,
	sd_mainhdkey,
	sd_mainpnkey,
	sd_hdkey,
	sd_hdstars,
	sd_hdctkey,
	sd_hdrskey,
	sd_hrkey,
	sd_rmkey,
	sd_rckey,
	sd_ackey,
	sd_pnkey,
	sd_hdorder)
select distinct 
	thd_tourkey, 
	thd_firsthdkey, 
	thd_firstpnkey,
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_hrkey, 
	thd_rmkey, 
	thd_rckey, 
	thd_ackey, 
	thd_pnkey,
	thd_hdorder
from #tmpHotelData

-- информация об отелях
insert into mwSpoDataTable(
	sd_tourkey, 
	sd_cnkey, 
	sd_hdkey, 
	sd_hdstars, 
	sd_ctkey, 
	sd_rskey, 
	sd_ctkeyfrom, 
	sd_ctkeyto, 
	sd_tlkey, 
	sd_isenabled, 
	sd_tourcreated,
	sd_main,
	sd_pnkey,
	sd_tourtype,
	sd_cnname,
	sd_tourname,
	sd_hdname,
	sd_ctname,
	sd_rsname,
	sd_ctfromname,
	sd_cttoname,
	sd_tourtypename,
	sd_pncode,
	sd_hotelkeys,
	sd_pansionkeys,
	sd_tourvalid
) 
select distinct 
	thd_tourkey, 
	thd_cnkey, 
	thd_hdkey, 
	thd_hdstars, 
	thd_ctkey, 
	thd_rskey, 
	thd_ctkeyfrom, 
	thd_ctkeyto, 
	thd_tlkey, 
	thd_isenabled, 
	thd_tourcreated,
	thd_hdmain,
	thd_pnkey,
	thd_tourtype,
	thd_cnname,
	thd_tourname,
	thd_hdname,
	thd_ctname,
	thd_rsname,
	thd_ctfromname,
	thd_cttoname,
	thd_tourtypename,
	thd_pncode,
	thd_hotelkeys,
	thd_pansionkeys,
	thd_tourvalid 
from #tmpHotelData 
where thd_hdmain > 0
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Alter mwPriceDataTable Tables and fill rows for tours that having more than two flights'
go

declare @tablename nvarchar(128)
declare @sql varchar(1000)
declare cur cursor for select name from sysobjects where name like N'%mwPriceDataTable%' and xtype = N'U'
open cur

fetch cur into @tablename

while (@@FETCH_STATUS = 0)
begin
	print 'Edit ' + @tablename + ' :'
	-- Add ti_chdirectkeys column to mwPriceDataTable table
	set @sql = 'if not exists(select id from syscolumns where id = OBJECT_ID(''' + @tablename + ''') and name = ''pt_chdirectkeys'')
					ALTER TABLE ' + @tablename + ' ADD pt_chdirectkeys varchar(256) null'
	exec (@sql)
	-- Add ti_chbackkeys column to mwPriceDataTable table
	set @sql = 'if not exists(select id from syscolumns where id = OBJECT_ID(''' + @tablename + ''') and name = ''pt_chbackkeys'')
					ALTER TABLE ' + @tablename + ' ADD pt_chbackkeys varchar(256) null'
	exec (@sql)
	-- Fill ti_chdirectkeys, ti_chbackkeys for tours that having more than two flights
	set @sql = 'update ' + @tablename + '
					set pt_chdirectkeys = dbo.mwGetTourCharters(pt_pricelistkey, 1),
						pt_chbackkeys = dbo.mwGetTourCharters(pt_pricelistkey, 0)
					where pt_tourkey in 
					(
						select ti_tokey
						from tp_lists
							inner join tp_serviceLists on ti_key = tl_tikey
							inner join tp_services on tl_tskey = ts_key
						where ts_svkey = 1
						group by ti_key,ti_tokey
						having count (ts_key) > 2
					)'
	exec (@sql)

	set @sql = 'sp_refreshviewforall ' + replace(@tablename, 'Data', '')

	fetch cur into @tablename
end

close cur
deallocate cur
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Create SP mwCheckFlightGroupsQuotesWithInnerFlights '
go

if exists(select id from sysobjects where xtype='p' and name='mwCheckFlightGroupsQuotesWithInnerFlights')
	drop proc dbo.[mwCheckFlightGroupsQuotesWithInnerFlights]
go

create procedure [dbo].[mwCheckFlightGroupsQuotesWithInnerFlights]
	@pagingType int,
	@charters varchar(256),
	@flightGroups varchar(256),
	@agentKey int,
	@tourdate datetime,
	@requestOnRelease int,
	@noPlacesResult int,
	@checkAgentQuota int,
	@checkCommonQuota int,
	@checkNoLongQuota int,
	@findFlight smallint,
	@tourDays int,
	@expiredReleaseResult int,
	@aviaQuotaMask smallint,
	@result varchar(256) output
as
begin
	declare @curQuota varchar(256)

	declare @curPosition int
		set @curPosition = 0

	declare @tmpCurPosition int
	declare @tmpPrevPosition int
		

	declare @prevPosition int
		set @prevPosition = 1

	declare @charterString varchar(50)
		set @charterString  = 0

	declare @chkey int, @chday int,@chpkkey int,@chprkey int

	declare @flag smallint
		set @flag = 0

	while (charindex(',', @charters, @curPosition + 1) > 0 or @flag = 0)
	begin
		set @curPosition = charindex(',', @charters, @curPosition + 1)
		if (@curPosition = 0)
		begin
			set @charterString  = substring(@charters, @prevPosition, len(@charters))
			set @curPosition = len(@charters)
			set @flag = 1
		end 
		else
			set @charterString  = substring(@charters, @prevPosition, @curPosition - @prevPosition)

		set @prevPosition = @curPosition + 1

		set @tmpPrevPosition = 0
		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chday = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @tmpCurPosition = charindex(':', @charterString, @tmpPrevPosition + 1)
		set @chprkey = CAST(substring(@charterString, @tmpPrevPosition, @tmpCurPosition - @tmpPrevPosition) as int)
		set @tmpPrevPosition = @tmpCurPosition + 1

		set @chpkkey = CAST(substring(@charterString, @tmpPrevPosition, len(@charterString) + 1 - @tmpPrevPosition) as int)

			set @curQuota = null
			if(@chkey > 0)
			begin 
				select @curQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@tourDays and prkey=@chprkey and pkkey=@chpkkey
				if (@curQuota is null)
				begin
					exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @tourDays, @expiredReleaseResult, @aviaQuotaMask, @curQuota output
					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@tourDays,@chprkey, @chpkkey, @curQuota)
				end	
				if (len(@curQuota) = 0)
				begin
					set @result = ''
					return
				end
				set @result = dbo.mwConcatFlightsGroupsQuotas(@result, @curQuota)
			end
	end
end
go

grant exec on dbo.[mwCheckFlightGroupsQuotesWithInnerFlights] to public
go

--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------

print 'Alter SP mwCheckQuotesCycle '
go

if exists(select id from sysobjects where xtype='p' and name='mwCheckQuotesCycle')
	drop proc dbo.mwCheckQuotesCycle
go

create procedure [dbo].[mwCheckQuotesCycle]
@pagingType	smallint,
@pageNum	int,		-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
@pageSize	int,
@agentKey	int,
@hotelQuotaMask smallint,
@aviaQuotaMask smallint,
@flightGroups	varchar(256),
@checkAgentQuota smallint,
@checkCommonQuota smallint,
@checkNoLongQuota smallint,
@requestOnRelease smallint,
@expiredReleaseResult int,
@noPlacesResult int,
@findFlight smallint
as
begin

	declare @mwCheckInnerAviaQuotes int
	select @mwCheckInnerAviaQuotes = isnull(SS_ParmValue,0) from dbo.systemsettings 
	where SS_ParmName = 'mwCheckInnerAviaQuotes'

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @tmpHotelQuota varchar(10), @tmpThereAviaQuota varchar(256), @tmpBackAviaQuota varchar(256), @allPlaces int,@places int,@actual smallint,@tmp varchar(256),
			@ptkey int,@hdkey int,@rmkey int,@rckey int,@tourdate datetime,@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,	@chday int,@chpkkey int,@chprkey int,@chbackday int,
		@chbackpkkey int,@chbackprkey int,@days int, @rowNum int, @hdStep smallint, @reviewed int,@selected int, @hdPriceCorrection int

declare @pt_chdirectkeys varchar(50), @pt_chbackkeys varchar(50)

	set @reviewed= @pageNum
	set @selected=0

	declare @now datetime, @percentPlaces float, @pos int
	set @now = getdate()

	fetch next from quotaCursor into @ptkey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys
	while(@@fetch_status=0 and @selected < @pageSize)
	begin
		set @actual=1
		if(@aviaQuotaMask > 0)
		begin
			set @tmpThereAviaQuota=null
			if(@chkey > 0)
			begin 
				select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
				if (@tmpThereAviaQuota is null)
				begin
					exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output
					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey, @chpkkey, @tmpThereAviaQuota)
				end					
				if(len(@tmpThereAviaQuota)=0)
					set @actual=0
			end
			if(@actual > 0)
			begin
				set @tmpBackAviaQuota=null
				if(@chbackkey > 0)
				begin
					select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
					if (@tmpBackAviaQuota is null)
					begin
						exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups, @agentKey, @chbackprkey, @tourdate,@chbackday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chbackpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output
						insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey, @tmpBackAviaQuota)
					end

					if(len(@tmpBackAviaQuota)=0)
						set @actual=0
				end
			end
		end			
		if(@hotelQuotaMask > 0)
		begin
			if(@actual > 0)
			begin
				set @tmpHotelQuota=null
				set @hdStep = 0
				set @hdPriceCorrection = 0
				select @tmpHotelQuota=res,@places=places,@hdStep=step_index,@hdPriceCorrection=price_correction from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
				if (@tmpHotelQuota is null)
				begin
					select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey, @hdprkey,@tourdate,@hdday,@hdnights, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0, @expiredReleaseResult)
					set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
					if(@pagingType = @DYNAMIC_SPO_PAGING and @places > 0)
					begin
						exec dbo.GetDynamicCorrections @now,@tourdate,3,@hdkey,@rmkey,@rckey,@places, @hdStep output, @hdPriceCorrection output
					end

					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res,places,step_index,price_correction) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places,@hdStep,@hdPriceCorrection)
				end
				
				if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
					set @actual=0
			end
		end



------==============================================================================================------
--============================ Check inner avia quotes if needed by settings ===========================--
--========																						========--
		if(@actual > 0 and @mwCheckInnerAviaQuotes > 0)
		begin
			-- Direct flights
			if (@pt_chdirectkeys is not null and charindex(',', @pt_chdirectkeys, 0) > 0)
			begin
				exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chdirectkeys, 
						@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
						@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
						@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output
				if (len(@tmpThereAviaQuota) = 0)
					set @actual = 0
			end 

			-- Back flights
			if(@actual > 0)
			begin
				if (@pt_chbackkeys is not null and charindex(',', @pt_chbackkeys, 0) > 0)
				begin
					exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chbackkeys,   
						@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
						@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
						@days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output
					if (len(@tmpBackAviaQuota) = 0)
						set @actual = 0
				end 
			end
		end
--========																						========--
--============================                                               ===========================--
------==============================================================================================------
		
		if(@actual > 0)
		begin
			set @selected=@selected + 1
			insert into #Paging(ptKey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection)
			values(@ptkey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection)
		end

		set @reviewed=@reviewed + 1

		fetch next from quotaCursor into @ptkey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys
	end

	select @reviewed
end

go

grant exec on dbo.mwCheckQuotesCycle to public

--090228(add sv_quoted).sql
if not exists(select id from syscolumns where id = OBJECT_ID('Service') and name = 'SV_QUOTED')
      alter table [dbo].Service add SV_QUOTED  smallint NOT NULL default 0
GO

UPDATE [dbo].Service
SET SV_QUOTED=1
WHERE SV_KEY in (1,3)
GO
--sp_DogListToQuotas.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogListToQuotas]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogListToQuotas] 
GO
CREATE PROCEDURE [dbo].[DogListToQuotas]
(
--<VERSION>2008.1.02.26a</VERSION>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null
) AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, 
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0)
FROM	DogovorList, Dogovor 
WHERE	DL_DGKey=DG_Key and DL_Key=@DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	return 0
END
SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey
	return 0
END

	


/*
If @SVKey=3
	SELECT TOP 1 @Quota_SubCode1=HR_RMKey, @Quota_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
Else
	Set @Quota_SubCode1=@SubCode1
*/
declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query varchar(8000), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @n2 smallint, @Result_Exist bit, @nTemp smallint, @dTemp datetime
--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2

	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
		return 0

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

--print 'sddddd0'
WHILE exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	--print @n
	set @n=@n+1
	Set @SubQuery = ' QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=' + CAST(@Q_Type as varchar(10)) + ' and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(10)) + '
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QO_QTID=QT_ID and QO_SVKey=' + CAST(@SVKey as varchar(10)) +' and QO_Code=' + CAST(@Code as varchar(10)) +' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10))
	IF @SVKey=3
		Set @SubQuery=@SubQuery+' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10))
	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))

	IF @Q_PRKey is null
		SET @SubQuery = @SubQuery + ' and QT_PRKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_PRKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations='''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 	

	Set @Query = '
		DECLARE @n1 smallint, @n2 smallint, @CurrentDate smalldatetime, @Long smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
		DECLARE @ServiceKeys Table 	(SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime )'

	IF @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +', SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_State is null'
	ELSE IF @Q_ByRoom=1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RLID=' + CAST(@SetQuotaRLKey as varchar(10)) + '	and SD_State is null'
	ELSE IF @Q_ByRoom=0
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RPID=' + CAST(@SetQuotaRPKey as varchar(10)) + ' and SD_State is null'

		Set @Query = @Query+'
			--SELECT * FROM @ServiceKeys
			SET @CurrentDate=''' + CAST(@Q_DateBeg as varchar(20)) + '''
			SET @Long=DATEDIFF(DAY,''' + CAST(@Q_DateBeg as varchar(20)) + ''',''' + CAST(@Q_DateEnd as varchar(20)) + ''')+1
			SET @Error=0
			SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			WHILE @SK_Current is not null and @Error=0
			BEGIN
				SET @n1=1
				WHILE @n1<=@Long and @Error=0
				BEGIN
					SET @QP_ID=null
					SET @n2=0
					WHILE (@QP_ID is null) and @n2<2
					BEGIN
						DECLARE @DATETEMP datetime
						SET @DATETEMP = GetDate()
						if exists (select SS_ParmValue from systemsettings where SS_ParmName=''SYSCheckQuotaRelease'' and SS_ParmValue=1)
							SET @DATETEMP=''01-JAN-1900''
						IF @prev=1'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 and QP_Durations=@durations_prev and QD_Release=@release_prev
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and QP_IsNotCheckIn=1)
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)			
								ORDER BY ISNULL(QD_Release,0) DESC
			ELSE'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and QP_IsNotCheckIn=1)
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)
								ORDER BY ISNULL(QD_Release,0) DESC

							SET @n2=@n2+1
						IF @QP_ID is null
							SET @prev=1				
						ELSE
							UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@CurrentDate)	
					END
					If @QP_ID is null
						SET @Error=1
					SET @n1=@n1+1
				END
				IF @Error=0
					UPDATE ServiceByDate SET SD_State=' + CAST(@Q_Type as varchar(1)) + ', SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +')
						WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +'=@SK_Current and SD_State is null
				SET @SK_Current=null	
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END'
--	print @Query
	exec (@Query)

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END
UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
GO
GRANT EXECUTE ON [dbo].[DogListToQuotas] TO PUBLIC 
GO

--sp_CheckQuotaExist.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CheckQuotaExist]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CheckQuotaExist] 
GO
CREATE PROCEDURE [dbo].[CheckQuotaExist]
(
--<VERSION>2008.1.03.11a</VERSION>
	@SVKey int,
	@Code int,
	@SubCode1 int,
	@DateBeg datetime, 
	@DateEnd datetime,
	@DateFirst datetime,
	@PRKey int,
	@AgentKey int,
	@TourDuration smallint,
	@FilialKey int,				--пока не обрабатывается 
	@CityDepartment int,		--пока не обрабатывается 
	--возвращаемые параметры
	--при наличии Stop-Sale возвращаем

--	Убрал, не нужны более
--	@StopExist int output, --ключ стопа
--	@StopDate smalldatetime output, --дата стопа 

	--переехали из [CheckQuotaInfo]
	@TypeOfResult smallint =null,			
	/*	тип результата 
			0-возвращение полной таблицы данных (без фильтров) используется в экране проверки мест, 
			1-информация о первой подходящей квоте, 
			2-максимальное доступное число мест по всем квотам */	
	@Pax smallint =null,					--кол-во туристов по услуге
	--возвращаемые параметры, в случае @TypeOfResult=2 (попытка проверить возможность постановки услуги на квоту)
	@Wait smallint =null, --в случае не надо снимать квоту,
	@Quota_CheckState smallint =null output,
	/*	0 - RQ (можно бронировать только под запрос)
		1 - OK (можно посадить на квоту)
		2 - STOP (стоп, мест на сущ.квотах недостаточно)
		3 - RELEASE (стопа нет, есть релиз, мест на сущ.квотах недостаточно)	*/
	@Quota_CheckDate smalldatetime =null output,
	/*  если @Quota_Check=2, то в этом поле дата на которую стоит стоп */
	@Quota_CheckInfo smallint =null output,
	/*  если @Quota_Check in (0,3), то в этом поле сколько мест не хватает */

	--возвращаемые параметры, в случае @TypeOfResult=1 (возвращаем характеристики оптимальной квоты)
	@Quota_Count int =null output,
	@Quota_AgentKey int =null output,
	@Quota_Type smallint =null output,
	@Quota_ByRoom bit =null output,
	@Quota_PRKey int =null output, 
	@Quota_FilialKey int =null output,
	@Quota_CityDepartments int =null output,
	@Quota_Duration smallint =null output,
	@Quota_SubCode1 int =null output,
	@Quota_SubCode2 int =null output
	
) AS

/*
insert into Debug (db_Text) values ('@SVKey= '+CAST(@SVKey as varchar(10))+'
'+'@Code= '+CAST(@Code as varchar(10))+'
'+'@SubCode1= '+CAST(@SubCode1 as varchar(10))+'
'+'@DateBeg= '+CAST(@DateBeg as varchar(10))+'
'+'@DateEnd= '+CAST(@DateEnd as varchar(10))+'
'+'@DateFirst= '+CAST(@DateFirst as varchar(10))+'
'+'@PRKey= '+CAST(@PRKey as varchar(10))+'
'+'@AgentKey= '+CAST(@AgentKey as varchar(10))+'
'+'@TourDuration= '+CAST(@TourDuration as varchar(10))
)
*/
if (@Wait=1 AND @TypeOfResult=2)
BEGIN
	set @Quota_CheckState=0
	return 0
end
declare @quoted smallint
select @quoted = isnull(SV_Quoted, 0) from Service where SV_Key = @SVKEY
if (@quoted = 0)
BEGIN
	set @Quota_CheckState=1
	return 0
end
Set @DateFirst=ISNULL(@DateFirst,@DateBeg)
--declare @StopExist int, @StopDate smalldatetime
--Проверка отсутствия Стопа
declare @StopExist int, @StopDate smalldatetime

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	exec CheckStopInfo 1,null,@SVKey,@Code,@SubCode1,@PRKey,@DateBeg,@DateEnd,@StopExist output,@StopDate output

declare @Q_QTID int, @Q_Partner int, @Q_ByRoom int, @Q_Type int, @Q_Release int, 
		@Q_FilialKey int, @Q_CityDepartments int, @Q_AgentKey int, @Q_Duration smallint,
		@Q_Places smallint, @ServiceWithDuration bit, @SubQuery varchar(5000), @Query varchar(5000),
		@Q_SubCode1 int, @Q_SubCode2 int, @Q_QTID_Prev int, @DaysCount int

SET @DaysCount=DATEDIFF(DAY,@DateBeg,@DateEnd)+1
SET @Q_QTID_Prev=0

SELECT @ServiceWithDuration=ISNULL(SV_IsDuration,0) FROM [Service] WHERE SV_Key=@SVKey
IF @ServiceWithDuration=1
	SET @TourDuration=DATEDIFF(DAY,@DateBeg,@DateEnd)+1

IF @SVKey=3
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and HR_Key=@SubCode1 and (QO_SubCode1=HR_RMKey or QO_SubCode1=0) and (QO_SubCode2=HR_RCKey or QO_SubCode2=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
ELSE
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and (QO_SubCode1=@SubCode1 or QO_SubCode1=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
open CheckQuotaExistСursor
fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
									@Q_Type, 
									@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
									@Q_SubCode1, @Q_SubCode2

CREATE TABLE #Tbl (	TMP_Count int, TMP_QTID int, TMP_AgentKey int, TMP_Type smallint, TMP_Date datetime, 
					TMP_ByRoom bit, TMP_Release smallint, TMP_Partner int, TMP_Durations varchar(25), TMP_FilialKey int, 
					TMP_CityDepartments int, TMP_SubCode1 int, TMP_SubCode2 int)

CREATE TABLE #StopSaleTemp
(SST_Code int, SST_SubCode1 int, SST_SubCode2 int, SST_QOID int, SST_PRKey int, SST_Date smalldatetime,
SST_QDID int, SST_Type smallint, SST_State smallint, SST_Comment varchar(255)
)

While (@@fetch_status = 0)
BEGIN
	IF @Q_QTID_Prev!=@Q_QTID
	BEGIN
		DELETE FROM #StopSaleTemp
		INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails
						NULL, @Q_QTID, @DateBeg, @DaysCount, null, null, @SVKey, @Code, @SubCode1, @PRKey
	END
/*
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @Q_QTID, @DaysCount, 670)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SVKey, @Code, 671)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SubCode1, @PRKey, 672)
*/
	SET @SubQuery = 'QD_QTID=QT_ID and QP_QDID = QD_ID 
		and QT_ID=' + CAST(@Q_QTID as varchar(10)) + '
		and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(1)) + ' and QD_Type=' + CAST(@Q_Type as varchar(1)) + ' 
		and QO_SVKey=' + CAST(@SVKey as varchar(10)) + ' and QO_Code=' + CAST(@Code as varchar(10)) + ' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10)) + ' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10)) + '	
		and (QD_Date between ''' + CAST((@DateBeg) as varchar(20)) + ''' and ''' + CAST(@DateEnd as varchar(20)) + ''') and QD_IsDeleted is null'

	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 
	--QP_Durations=' + CAST(@Q_Durations as varchar(10))
	IF @Q_Partner =''
		SET @SubQuery = @SubQuery + ' and QT_PRKey = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_Partner as varchar(10))

	declare @SubCode2 int
	--if @SVKey=3
	--	SELECT @SubCode1=HR_RMKey, @SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
	SET @Query = 
	'
	INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
						TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
						TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2)
		SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
				QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
				QP_CityDepartments, QO_SubCode1, QO_SubCode2
		FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
		WHERE	QO_ID=SST_QOID and QD_ID=SST_QDID and SST_State is null and ' + @SubQuery

		--and QD_Date > GetDate()+ISNULL(QD_Release,0)'
	--print @Query

	exec (@Query)
	
	SET @Q_QTID_Prev=@Q_QTID
	fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
										@Q_Type, 
										@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
										@Q_SubCode1, @Q_SubCode2	
END

--DELETE FROM #Tbl WHERE 

DELETE FROM #Tbl WHERE exists 
		(SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
		WHERE	QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=TMP_Type and QT_ByRoom=TMP_ByRoom
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QT_ID=TMP_QTID
				and ISNULL(QP_FilialKey,-1)=ISNULL(TMP_FilialKey,-1) and ISNULL(QP_CityDepartments,-1)=ISNULL(TMP_CityDepartments,-1)
				and ISNULL(QP_AgentKey,-1)=ISNULL(TMP_AgentKey,-1) and ISNULL(QT_PRKey,-1)=ISNULL(TMP_Partner,-1)
				and QP_Durations=TMP_Durations and ISNULL(QD_Release,-1)=ISNULL(TMP_Release,-1)
				and QD_Date=@DateFirst and QP_IsNotCheckIn=1)

close CheckQuotaExistСursor
deallocate CheckQuotaExistСursor
--самая важная часть, ПОРЯДОК выбора квоты
--эта часть должна быть доработана
/*
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote')
	SELECT @vLimitAgentQuote = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote'
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong')
	SELECT @vLimitQuoteLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
SELECT @nQtLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
*/

DECLARE @Tbl_DQ Table 
 		(TMP_Count smallint, TMP_AgentKey int, TMP_Type smallint, TMP_ByRoom bit, 
				TMP_Partner int, TMP_Duration smallint, TMP_FilialKey int, TMP_CityDepartments int,
				TMP_SubCode1 int, TMP_SubCode2 int, TMP_ReleaseIgnore bit)

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
if exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	SET @DATETEMP='01-JAN-1900'
INSERT INTO @Tbl_DQ
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,0 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		WHERE	TMP_Date >= @DATETEMP+ISNULL(TMP_Release,0)
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1
	UNION
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,1 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1

/*
Комментарии к запросу выше!!!
Заполняем таблицу квот, которые могут нам подойти (группируя квоты по всем разделяемым параметрам, кроме релиз-периода
Все строки в таблице дублируются (важно! 11-ый параметр): 
	квоты с учетом релиз-периода (0) --TMP_ReleaseIgnore
	квоты без учета релиз-периода (1)--TMP_ReleaseIgnore
При выводе всех доступных квот требуется отсекать строки без учета релиз-периода и с количеством мест <=0 
*/

DECLARE @IsCommitmentFirst bit
IF Exists (SELECT SS_ID FROM dbo.SystemSettings WHERE SS_ParmName='SYS_Commitment_First' and SS_ParmValue='1')
	SET @IsCommitmentFirst=1

If @TypeOfResult is null or @TypeOfResult=0
BEGIN
	IF @IsCommitmentFirst=1
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	ELSE
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
END

DECLARE @Priority int;
SELECT @Priority=QPR_Type FROM   QuotaPriorities 
WHERE  QPR_Date=@DateFirst and QPR_SVKey = @SVKey and QPR_Code=@Code and QPR_PRKey=@PRKey

IF @Priority is not null
	SET @IsCommitmentFirst=@Priority-1

If @TypeOfResult=1 --(возвращаем характеристики оптимальной квоты)
BEGIN
	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		IF @Quota_Type=1 or @IsCommitmentFirst=1
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
		ELSE
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	END
END

If @TypeOfResult=2 --(попытка проверить возможность постановки услуги на квоту)
BEGIN
	DECLARE @Places_Count int, @Rooms_Count int,		 --доступное количество мест/номеров в квотах
			@PlacesNeed_Count smallint,					-- количество мест, которых недостаточно для оформления услуги
			@RowCountActual smallint, @RowCountReleaseIgnore smallint

	SELECT @RowCountReleaseIgnore=Count(1) FROM @Tbl_DQ
	DELETE FROM @Tbl_DQ WHERE TMP_ReleaseIgnore=1
 	SELECT @RowCountActual=Count(1) FROM @Tbl_DQ

	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		SET @PlacesNeed_Count=0		
		select	@Places_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=0
		If @SVKey=3
			select	@Rooms_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=1

		Set @Places_Count=ISNULL(@Places_Count,0)
		Set @Rooms_Count=ISNULL(@Rooms_Count,0)
	
		--проверяем достаточно ли будет текущего кол-ва мест для бронирования
		declare @nPlaces smallint, @nRoomsService smallint
		If @SVKey=3 and @Rooms_Count>0
		BEGIN
			--insert into Debug (db_n1) values (233)--
			exec GetServiceRoomsCount @Code, @SubCode1, @Pax, @nRoomsService output
			If @nRoomsService>@Rooms_Count
				Set @PlacesNeed_Count=@nRoomsService-@Rooms_Count
		END
		ELSE
			If @Pax>@Places_Count
				Set @PlacesNeed_Count=@Pax-@Places_Count

		If @PlacesNeed_Count <= 0 --мест в квоте хватило
			Set @Quota_CheckState=1						--Возвращаем "Ok (квоты есть)"
	END
	
	If @Quota_CheckState=0 or @Quota_CheckState is null
	BEGIN
		If @StopExist>0	--и установлен STOP 
		BEGIN
			Set @Quota_CheckState=2						--Возвращаем "Внимание STOP"
			Set @Quota_CheckDate=@StopDate
		END
		Else
		BEGIN
			If @RowCountActual<@RowCountReleaseIgnore
				Set @Quota_CheckState=3						--Возвращаем "Release" (мест не достаточно, но наступил РЕЛИЗ-Период)
			ELSE
				Set @Quota_CheckState=0						--Возвращаем "RQ" (дальше требуется расширять AUTOSTOP)
			Set @Quota_CheckInfo=@PlacesNeed_Count
		END
	END
END
GO
GRANT EXECUTE ON [dbo].[CheckQuotaExist] TO PUBLIC 
GO
--090226(AddPrtType).sql
if (select count(*) from PrtTypes where PT_Id = 11) > 0
begin
     print 'В таблице PrtTypes уже существует признак с PT_Id = 11. Признак с PT_Id = 11 необходим для регистрации партнёров с сайта.'
end
else
begin
     set identity_insert PrtTypes on
     insert into PrtTypes(PT_Id, PT_Name, PT_NameLat) values (11, 'Договор с сайта', 'Dogovor from site')
     set identity_insert PrtTypes off
end
GO

--sp_CalculatePriceList.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nGroupByPeriod smallint,	-- 0 - не группировать цены по периодам, 1 - группировать
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nGroupByPeriod=0
		SET @sHI_Text='With period group'
	ELSE
		SET @sHI_Text='Without period group'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11005, null, @sHI_Text, null, @nGroupByPeriod, null, null, 0

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		) ON [PRIMARY]
		DELETE FROM #TP_Prices
		INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM #TP_Prices)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))
		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'

		fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN
			if @dtPrevDate <> @turdate
				set @nPrevGrossDate = @dtPrevDate
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate
			BEGIN
				select @nPrevGrossKey = xtp_key, @nPrevGross = xtp_gross from #tp_prices where xtp_dateend  = @nPrevGrossDate and xtp_tikey = @variant
				set @price_brutto = 0
				set @nPrevVariant = @variant
				set @dtPrevDate = @turdate
				if @sUseServicePrices = '1'
					delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
			END
			if @nTempGross is not null and @nSvkey <> 1
			BEGIN
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			END
			else
			BEGIN
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			END
			set @price_brutto = @price_brutto + @nBrutto
			fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
			set @fetchStatus = @@fetch_status

			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				if @price_brutto is not null
				BEGIN
				exec RoundPriceList @round, @price_brutto output
					if @nUpdate = 0 or @nGroupByPeriod = 0
					BEGIN
						if @nPrevGross = @price_brutto and @nGroupByPeriod = 1
							update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nPrevGrossKey
						else
						BEGIN
							if exists(select 1 from #tp_prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
								update #tp_prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							else
							BEGIN
								insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
								if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
								BEGIN
									exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
								END
							END
						END
					END					
					else
					BEGIN
					---ДОЗАПИСЬ СТАРТ---------------------
						if (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant) = 0
						BEGIN
							insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						END
						else
						BEGIN
							declare @nKey int
							declare @dBegin datetime
							declare @dEnd datetime
							declare @fGross money
							declare @fSetPrevPrice smallint	-- признак наличия цены на текущий вариант на ранние даты
							declare @fSetNextPrice smallint	-- признак наличия цены на текущий вариант на поздние даты
							declare @nSetPrevKey int	-- ключ цены на текущий вариант на ранние даты
							declare @nSetNextKey int	-- ключ цены на текущий вариант на поздние даты
							declare @nSetPrevGross money	-- ценa на текущий вариант на ранние даты
							declare @nSetNextGross money	-- ценa на текущий вариант на поздние даты
							declare priceCursor cursor local fast_forward  for
								select xtp_key, xtp_datebegin, xtp_dateend, xtp_gross
								from #tp_prices
								where xtp_tikey = @nPrevVariant
								order by xtp_datebegin
							set @fSetPrevPrice = 0
							set @fSetNextPrice = 0
							set @nSetPrevKey = -1
							set @nSetNextKey = -1
							set @nSetPrevGross = -1
							set @nSetNextGross = -1
							open priceCursor
							fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							While (@@fetch_status = 0)
							BEGIN
								if @dtPrevDate = @dEnd or @dtPrevDate = @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @fSetNextPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetNextKey = @nKey
									set @nSetPrevGross = @fGross
									set @nSetNextGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate > @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetPrevGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate <@dEnd
								BEGIN
									set @fSetNextPrice = 1
									set @nSetNextKey = @nKey
									set @nSetNextGross = @fGross
								END
								fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							END
							close priceCursor
							deallocate priceCursor
							if @nSetPrevKey is not null and @nSetNextKey is not null -- есть интервалы цен до и после текущей даты, либо цена попала в существующий интервал
							BEGIN
								if @nSetPrevKey <> @nSetNextKey-- цена не попала в существующий период
								BEGIN
									if @nSetPrevGross = @nSetNextGross and (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate) = 1 -- есть одиночная цена в базе на тек. дату
									BEGIN
										set @nKey = null
										set @fGross = null
										select @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate
										if @fGross <> @price_brutto
										BEGIN
											if @price_brutto = @nSetNextGross or @price_brutto = @nSetPrevGross
											BEGIN
												delete from #tp_prices where xtp_key = @nKey
												if @nSetPrevGross = @price_brutto
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
												if @nSetNextGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
											END
											else
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nKey
										END
									END
									else -- на текущую дату в базе нет цены
									BEGIN -- здесь надо попробовать схлопнуть периоды
										if @nSetPrevGross = @price_brutto
											update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
										if @nSetNextGross = @price_brutto
											update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
										if @nSetNextGross <> @price_brutto and @nSetPrevGross <> @price_brutto
										BEGIN
											insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
											if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
											BEGIN
												exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
												set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
											END
										END
									END
								END
								else -- цена попала в существующий период
								if @nSetPrevGross <> @price_brutto
								BEGIN	-- здесь надо расхлопнуть периоды
								-- в итоге вместо одного периода цен будет 2 или 3 периода
									set @dDateBeg1 = null
									set @dDateBeg3 = null
									set @dDateEnd1 = null
									set @dDateEnd3 = null
									select @dDateBeg1 = xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey
									select top 1 @dDateEnd1 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date < @dtPrevDate order by td_date DESC
									select top 1 @dDateBeg3 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date > @dtPrevDate order by td_date ASC
									select @dDateEnd3 = xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey
									if @dDateBeg1 <> @dtPrevDate and @dDateEnd3 <> @dtPrevDate
									BEGIN
										update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dDateBeg3, @dDateEnd3, @nSetPrevGross, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
									END
									else
									BEGIN
										if @dDateBeg1 = @dtPrevDate and @dDateEnd3 = @dtPrevDate
										BEGIN
											declare @leftKey int
											declare @leftGross money
											declare @rightKey int
											declare @rightGross money
											select top 1 @leftKey = xtp_key, @leftGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend desc
											select top 1 @rightKey = xtp_key, @rightGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_dateend asc
											if @leftKey is null and @rightKey is null
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											if @leftKey is not null and @rightKey is not null
											BEGIN
												if @leftGross = @rightGross and @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = (select xtp_dateend from #tp_prices where xtp_key = @rightKey) where xtp_key = @leftKey
													delete from #tp_prices where xtp_key in (@rightKey, @nSetPrevKey)
												END
												if @leftGross = @rightGross and @rightGross <> @price_brutto
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if @leftKey is not null and (@rightKey is null or @rightGross <> @price_brutto)
											BEGIN
												if @leftGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @leftKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if (@leftKey is null or @leftGross <> @price_brutto) and @rightKey is not null
											BEGIN
												if @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @rightKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
										END
										else
										BEGIN
											set @nKey = null
											set @fGross = null
											if @dDateBeg1 = @dtPrevDate
											BEGIN
												update #tp_prices set xtp_datebegin = @dDateBeg3 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend DESC
												if @fGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nKey
													--if (select xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey) > (select xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey)
													--delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
											else
											BEGIN
												update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_datebegin ASC
												if @fGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nKey
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
										END
									END
								END
							END
							else -- здесь нет двух цен по разные стороны от текущей даты
							BEGIN
								if @nSetPrevGross <> @price_brutto and @nSetNextGross <> @price_brutto
								BEGIN
									insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
									if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
									BEGIN
										exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
									END
								END
								else
								BEGIN
									if @fSetPrevPrice = 1
										update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
									if @fSetNextPrice = 1
										update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
								END
							END
						END
					END  ----------------------------------------------------------------
				END
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END
		END
		close serviceCursor
		deallocate serviceCursor
		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 96
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		select 	@TPkeyMax = MAX(xtp_key), 
				@TPkeyMin = MIN(xtp_key) 
		from 	#tp_prices

		while 	@TPkeyMin <= @TPkeyMax
		BEGIN
			begin tran tEnd
			INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
				select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from #tp_prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
			commit tran tEnd
			Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------
		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		CREATE TABLE #TP_Lists (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(35) , 
            [xTI_RMName] varchar(35) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(20),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      ) ON [PRIMARY]
      DELETE FROM #TP_Lists
      INSERT INTO #TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update #TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update #TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update #TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update #TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update #TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update #TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update #TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update #TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update #TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update #TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update #TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update #TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update #TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update #TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update #TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update #TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update #TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update #TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update #TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update #TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from #tp_prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  #tp_lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG)
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from #tp_prices, #tp_lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

if NOT EXISTS (select id from syscolumns where id = OBJECT_ID('ObjectAliases') and name = 'OA_CommunicationInfo')
	ALTER TABLE dbo.ObjectAliases ADD OA_CommunicationInfo smallint
GO
UPDATE ObjectAliases SET OA_CommunicationInfo=1 WHERE 
	OA_ID IN (	1001, 
				1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1046, 1047, 1048, 
				1052, 1054, 1057, 1058, 1059, 1063, 1067, 
				1069, 1070 )
	AND OA_CommunicationInfo is null or OA_CommunicationInfo=0
GO
UPDATE Communications SET 
	CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
WHERE CM_StatusWait=0 and CM_StatusConfirmed=0 and CM_StatusNotConfirmed=0 and CM_StatusUnknown=0
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsertHistoryDetail]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[InsertHistoryDetail]
GO

create PROCEDURE [dbo].[InsertHistoryDetail]
(
--<VERSION>2007.2.22.1</VERSION>
	@nHIID int,
	@nOAId int,
	@sValueOld varchar(255),
	@sValueNew varchar(255),
	@nIntValueOld int = null,
	@nIntValueNew int = null,
	@dtDateTimeValueOld datetime = null,
	@dtDateTimeValueNew datetime = null,
	@nInvisible int = 0,
	@bNeedCommunicationUpdate smallint = null output
)
as
	SET CONCAT_NULL_YIELDS_NULL OFF 

	declare @sAlias varchar(32), @sText varchar(255), @nCommunInfo smallint
	select @sAlias = left(OA_Alias, 32), @sText = OA_Name, @nCommunInfo=OA_CommunicationInfo from ObjectAliases where OA_Id = @nOAId
	If @nCommunInfo=1
		SET @bNeedCommunicationUpdate=1
	--print CAST(@nOAId as varchar(10)) + ' = ' + CAST(@nCommunInfo as varchar(10)) + ' / ' + CAST(@bNeedCommunicationUpdate as varchar(10))
	INSERT INTO dbo.HistoryDetail (HD_HIID, HD_OAId, HD_Alias, HD_Text, HD_ValueOld, HD_ValueNew,
		HD_IntValueOld, HD_IntValueNew, HD_DateTimeValueOld, HD_DateTimeValueNew, HD_Invisible)
	VALUES (@nHIID, @nOAId, @sAlias, @sText, @sValueOld, @sValueNew,
		@nIntValueOld, @nIntValueNew, @dtDateTimeValueOld, @dtDateTimeValueNew, @nInvisible)

	SET CONCAT_NULL_YIELDS_NULL ON
GO
GRANT EXECUTE ON [dbo].[InsertHistoryDetail] TO Public
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_TuristUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_TuristUpdate]
GO

CREATE TRIGGER [dbo].[T_TuristUpdate]
ON [dbo].[tbl_Turist] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.1</VERSION>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @OTU_DGCod 		varchar(10)
    DECLARE @OTU_NameRus 		varchar(25)
    DECLARE @OTU_NameLat 		varchar(25)
    DECLARE @OTU_FNameRus 	varchar(15)
    DECLARE @OTU_FNameLat 		varchar(15)
    DECLARE @OTU_SNameRus 	varchar(15)
    DECLARE @OTU_SNameLat 		varchar(15)
    DECLARE @OTU_BirthDay 		varchar(10)
    DECLARE @OTU_PasportType 	varchar(10)
    DECLARE @OTU_PasportNum 	varchar(20)
    DECLARE @OTU_PaspRuSer 	varchar(10)
    DECLARE @OTU_PaspRuNum 	varchar(20)
    DECLARE @OTU_PasportDate 	varchar(10)
    DECLARE @OTU_PasportDateEnd 	varchar(10)
    DECLARE @OTU_PasportByWhoM 	varchar(20)
    DECLARE @OTU_PaspRuDate 	varchar(10)
    DECLARE @OTU_PaspRuByWhoM 	varchar(50)
    DECLARE @OTU_Sex 	int
    DECLARE @OTU_RealSex 	int
	DECLARE @OTU_DGKey		int
-- 
	DECLARE @OTU_BIRTHCOUNTRY varchar(25)
	DECLARE @OTU_BIRTHCITY varchar(25)
    DECLARE @OTU_CITIZEN varchar(50)
	DECLARE @OTU_POSTINDEX varchar(8)
	DECLARE @OTU_POSTCITY varchar(15)
	DECLARE @OTU_POSTSTREET varchar(25)
	DECLARE @OTU_POSTBILD varchar(6)
	DECLARE @OTU_POSTFLAT varchar(4)
    
    DECLARE @NTU_DGCod 		varchar(10)
    DECLARE @NTU_NameRus 		varchar(25)
    DECLARE @NTU_NameLat 		varchar(25)
    DECLARE @NTU_FNameRus 	varchar(15)
    DECLARE @NTU_FNameLat 		varchar(15)
    DECLARE @NTU_SNameRus 	varchar(15)
    DECLARE @NTU_SNameLat 		varchar(15)
    DECLARE @NTU_BirthDay 		varchar(10)
    DECLARE @NTU_PasportType 	varchar(10)
    DECLARE @NTU_PasportNum 	varchar(20)
    DECLARE @NTU_PaspRuSer 	varchar(10)
    DECLARE @NTU_PaspRuNum 	varchar(20)
    DECLARE @NTU_PasportDate 	varchar(10)
    DECLARE @NTU_PasportDateEnd 	varchar(10)
    DECLARE @NTU_PasportByWhoM 	varchar(20)
    DECLARE @NTU_PaspRuDate 	varchar(10)
    DECLARE @NTU_PaspRuByWhoM 	varchar(50)
    DECLARE @NTU_Sex 	int
    DECLARE @NTU_RealSex 	int
	DECLARE @NTU_DGKey		int
--
	DECLARE @NTU_BIRTHCOUNTRY varchar(25)
	DECLARE @NTU_BIRTHCITY varchar(25)
    DECLARE @NTU_CITIZEN varchar(50)
	DECLARE @NTU_POSTINDEX varchar(8)
	DECLARE @NTU_POSTCITY varchar(15)
	DECLARE @NTU_POSTSTREET varchar(25)
	DECLARE @NTU_POSTBILD varchar(6)
	DECLARE @NTU_POSTFLAT varchar(4)

	DECLARE @TU_Key int

	DECLARE @sTU_ShortName varchar(8)
	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int
	DECLARE @nHIID int
	DECLARE @sHI_Text varchar(254)

	DECLARE @sText_Old varchar(254)
	DECLARE @sText_New varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint
	DECLARE @nDGKey int
	DECLARE @sDGCod	varchar(10)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Turist CURSOR FOR 
      SELECT N.TU_Key, N.TU_ShortName,
			 N.TU_DGCod, N.TU_DGKey, null, null, null, null, 
	  	     null, null, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null,
			 null, null, null, null,
			 null, null, null, null,
		  	 N.TU_DGCod, N.TU_DGKey, N.TU_NameRus, N.TU_NameLat, N.TU_FNameRus, N.TU_FNameLat,
			 N.TU_SNameRus, N.TU_SNameLat, CONVERT( char(10),N.TU_BirthDay, 104), N.TU_PasportType, N.TU_PasportNum, N.TU_PaspRuSer,
			 N.TU_PaspRuNum, CONVERT( char(10),N.TU_PasportDate, 104), CONVERT( char(10),N.TU_PasportDateEnd, 104), N.TU_PasportByWhoM, CONVERT( char(10),N.TU_PaspRuDate, 104), N.TU_PaspRuByWhoM,
			 N.TU_Sex, N.TU_RealSex, 
				N.TU_BIRTHCOUNTRY,
				N.TU_BIRTHCITY,
				N.TU_CITIZEN,
				N.TU_POSTINDEX,
				N.TU_POSTCITY,
				N.TU_POSTSTREET,
				N.TU_POSTBILD,
				N.TU_POSTFLAT
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Turist CURSOR FOR 
      SELECT O.TU_Key, O.TU_ShortName,
			 O.TU_DGCod, O.TU_DGKey, O.TU_NameRus, O.TU_NameLat, O.TU_FNameRus, O.TU_FNameLat,
			 O.TU_SNameRus, O.TU_SNameLat, CONVERT( char(10),O.TU_BirthDay, 104), O.TU_PasportType, O.TU_PasportNum, O.TU_PaspRuSer,
			 O.TU_PaspRuNum, CONVERT( char(10), O.TU_PasportDate, 104), CONVERT( char(10), O.TU_PasportDateEnd, 104), O.TU_PasportByWhoM, CONVERT( char(10), O.TU_PaspRuDate, 104), O.TU_PaspRuByWhoM, 
			 O.TU_Sex, O.TU_RealSex, 
				O.TU_BIRTHCOUNTRY,
				O.TU_BIRTHCITY,
				O.TU_CITIZEN,
				O.TU_POSTINDEX,
				O.TU_POSTCITY,
				O.TU_POSTSTREET,
				O.TU_POSTBILD,
				O.TU_POSTFLAT,
		  	 O.TU_DGCod, O.TU_DGKey, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null, null, null, null, null,
			 null, null,
			 null, null, null, null,
			 null, null, null, null
      FROM DELETED O 
  END
  ELSE 
  BEGIN
	SET @sMod = 'UPD'
    DECLARE cur_Turist CURSOR FOR 
      SELECT N.TU_Key, N.TU_ShortName,
			 O.TU_DGCod, O.TU_DGKey, O.TU_NameRus, O.TU_NameLat, O.TU_FNameRus, O.TU_FNameLat,
			 O.TU_SNameRus, O.TU_SNameLat, CONVERT( char(10),O.TU_BirthDay, 104), O.TU_PasportType, O.TU_PasportNum, O.TU_PaspRuSer,
			 O.TU_PaspRuNum, CONVERT( char(10), O.TU_PasportDate, 104), CONVERT( char(10), O.TU_PasportDateEnd, 104), O.TU_PasportByWhoM, CONVERT( char(10), O.TU_PaspRuDate, 104), O.TU_PaspRuByWhoM, 
			 O.TU_Sex, O.TU_RealSex, 
				O.TU_BIRTHCOUNTRY,
				O.TU_BIRTHCITY,
				O.TU_CITIZEN,
				O.TU_POSTINDEX,
				O.TU_POSTCITY,
				O.TU_POSTSTREET,
				O.TU_POSTBILD,
				O.TU_POSTFLAT,
		  	 N.TU_DGCod, N.TU_DGKey, N.TU_NameRus, N.TU_NameLat, N.TU_FNameRus, N.TU_FNameLat, 
			 N.TU_SNameRus, N.TU_SNameLat, CONVERT( char(10),N.TU_BirthDay, 104), N.TU_PasportType, N.TU_PasportNum, N.TU_PaspRuSer,
			 N.TU_PaspRuNum, CONVERT( char(10),N.TU_PasportDate, 104), CONVERT( char(10),N.TU_PasportDateEnd, 104), N.TU_PasportByWhoM, CONVERT( char(10),N.TU_PaspRuDate, 104), N.TU_PaspRuByWhoM,
			 N.TU_Sex, N.TU_RealSex, 
				N.TU_BIRTHCOUNTRY,
				N.TU_BIRTHCITY,
				N.TU_CITIZEN,
				N.TU_POSTINDEX,
				N.TU_POSTCITY,
				N.TU_POSTSTREET,
				N.TU_POSTBILD,
				N.TU_POSTFLAT
      FROM DELETED O, INSERTED N 
      WHERE N.TU_Key = O.TU_Key
  END

  OPEN cur_Turist
    FETCH NEXT FROM cur_Turist INTO @TU_Key, @sTU_ShortName,
				@OTU_DGCod, @OTU_DGKey, @OTU_NameRus, @OTU_NameLat, @OTU_FNameRus, @OTU_FNameLat,
				@OTU_SNameRus, @OTU_SNameLat, @OTU_BirthDay, @OTU_PasportType, @OTU_PasportNum,	@OTU_PaspRuSer,
				@OTU_PaspRuNum, @OTU_PasportDate, @OTU_PasportDateEnd, @OTU_PasportByWhoM, @OTU_PaspRuDate, @OTU_PaspRuByWhoM, 
				@OTU_Sex, @OTU_RealSex, 
				@OTU_BIRTHCOUNTRY,
				@OTU_BIRTHCITY,
				@OTU_CITIZEN,
				@OTU_POSTINDEX,
				@OTU_POSTCITY,
				@OTU_POSTSTREET,
				@OTU_POSTBILD,
				@OTU_POSTFLAT,
				@NTU_DGCod, @NTU_DGKey, @NTU_NameRus, @NTU_NameLat,	@NTU_FNameRus, @NTU_FNameLat,
				@NTU_SNameRus, @NTU_SNameLat, @NTU_BirthDay, @NTU_PasportType, @NTU_PasportNum,	@NTU_PaspRuSer,
				@NTU_PaspRuNum, @NTU_PasportDate, @NTU_PasportDateEnd, @NTU_PasportByWhoM, @NTU_PaspRuDate, @NTU_PaspRuByWhoM,
				@NTU_Sex, @NTU_RealSex,
				@NTU_BIRTHCOUNTRY,
				@NTU_BIRTHCITY,
				@NTU_CITIZEN,
				@NTU_POSTINDEX,
				@NTU_POSTCITY,
				@NTU_POSTSTREET,
				@NTU_POSTBILD,
				@NTU_POSTFLAT

    WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If ((((@sMod = 'UPD') AND (@OTU_DGCod = @NTU_DGCod)) OR (@sMod = 'INS') OR (@sMod = 'DEL')) AND
		(
			ISNULL(@OTU_NameRus, '') != ISNULL(@NTU_NameRus, '') OR
			ISNULL(@OTU_NameLat, '') != ISNULL(@NTU_NameLat, '') OR
			ISNULL(@OTU_FNameRus, '') != ISNULL(@NTU_FNameRus, '') OR
			ISNULL(@OTU_FNameLat, '') != ISNULL(@NTU_FNameLat, '') OR
			ISNULL(@OTU_SNameRus, '') != ISNULL(@NTU_SNameRus, '') OR
			ISNULL(@OTU_SNameLat, '') != ISNULL(@NTU_SNameLat, '') OR
			ISNULL(@OTU_BirthDay, 0) != ISNULL(@NTU_BirthDay, 0) OR
			ISNULL(@OTU_PasportType, 0) != ISNULL(@NTU_PasportType, 0) OR
			ISNULL(@OTU_PasportNum, 0) != ISNULL(@NTU_PasportNum, 0) OR
			ISNULL(@OTU_PaspRuSer, 0) != ISNULL(@NTU_PaspRuSer, 0) OR
			ISNULL(@OTU_PaspRuNum, 0) != ISNULL(@NTU_PaspRuNum, 0) OR
			ISNULL(@OTU_PasportDate, 0) != ISNULL(@NTU_PasportDate, 0) OR
			ISNULL(@OTU_PasportDateEnd, 0) != ISNULL(@NTU_PasportDateEnd, 0) OR
			ISNULL(@OTU_PasportByWhoM, 0) != ISNULL(@NTU_PasportByWhoM, 0) OR
			ISNULL(@OTU_PaspRuDate, 0) != ISNULL(@NTU_PaspRuDate, 0) OR
			ISNULL(@OTU_PaspRuByWhoM, 0) != ISNULL(@NTU_PaspRuByWhoM, 0)  OR
			ISNULL(@OTU_Sex, 0) != ISNULL(@NTU_Sex, 0)  OR
			ISNULL(@OTU_RealSex, 0) != ISNULL(@NTU_RealSex, 0) OR
--
			ISNULL(@OTU_BIRTHCOUNTRY, '') != ISNULL(@NTU_BIRTHCOUNTRY, '') OR
			ISNULL(@OTU_BIRTHCITY, '') != ISNULL(@NTU_BIRTHCITY, '') OR
			ISNULL(@OTU_CITIZEN, '') != ISNULL(@NTU_CITIZEN, '') OR
			ISNULL(@OTU_POSTINDEX, '') != ISNULL(@NTU_POSTINDEX, '') OR
			ISNULL(@OTU_POSTCITY, '') != ISNULL(@NTU_POSTCITY, '') OR
			ISNULL(@OTU_POSTSTREET, '') != ISNULL(@NTU_POSTSTREET, '') OR
			ISNULL(@OTU_POSTBILD, '') != ISNULL(@NTU_POSTBILD, '') OR
			ISNULL(@OTU_POSTFLAT, '') != ISNULL(@NTU_POSTFLAT, '')
		))
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		
		SET @nDGKey=@NTU_DGKey
		SET @sHI_Text = ISNULL(@NTU_NameRus, '') + ' ' + ISNULL(@sTU_ShortName, '')
		SET @sDGCod=@NTU_DGCod
		if (@sMod = 'DEL')
		BEGIN
			SET @nDGKey=@OTU_DGKey
			SET @sHI_Text = ISNULL(@OTU_NameRus, '') + ' ' + ISNULL(@sTU_ShortName, '')
			SET @sDGCod=@OTU_DGCod
		END
		EXEC @nHIID = dbo.InsHistory @sDGCod, @nDGKey, 3, @TU_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@OTU_NameRus, '') != ISNULL(@NTU_NameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1051, @OTU_NameRus, @NTU_NameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_NameLat, '') != ISNULL(@NTU_NameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1052, @OTU_NameLat, @NTU_NameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_FNameRus, '') != ISNULL(@NTU_FNameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1053, @OTU_FNameRus, @NTU_FNameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_FNameLat, '') != ISNULL(@NTU_FNameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1054, @OTU_FNameLat, @NTU_FNameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_SNameRus, '') != ISNULL(@NTU_SNameRus, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1055, @OTU_SNameRus, @NTU_SNameRus, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_SNameLat, '') != ISNULL(@NTU_SNameLat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1056, @OTU_SNameLat, @NTU_SNameLat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_BirthDay, 0) != ISNULL(@NTU_BirthDay, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1057, @OTU_BirthDay, @NTU_BirthDay, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportType, '') != ISNULL(@NTU_PasportType, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1058, @OTU_PasportType, @NTU_PasportType, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportNum, '') != ISNULL(@NTU_PasportNum, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1059, @OTU_PasportNum, @NTU_PasportNum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuSer, '') != ISNULL(@NTU_PaspRuSer, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1060, @OTU_PaspRuSer, @NTU_PaspRuSer, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuNum, '') != ISNULL(@NTU_PaspRuNum, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1061, @OTU_PaspRuNum, @NTU_PaspRuNum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportDate, 0) != ISNULL(@NTU_PasportDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1062, @OTU_PasportDate, @NTU_PasportDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportDateEnd, 0) != ISNULL(@NTU_PasportDateEnd, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1063, @OTU_PasportDateEnd, @NTU_PasportDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PasportByWhoM, '') != ISNULL(@NTU_PasportByWhoM, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1064, @OTU_PasportByWhoM, @NTU_PasportByWhoM, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuDate, 0) != ISNULL(@NTU_PaspRuDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1065, @OTU_PaspRuDate, @NTU_PaspRuDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_PaspRuByWhoM, '') != ISNULL(@NTU_PaspRuByWhoM, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1066, @OTU_PaspRuByWhoM, @NTU_PaspRuByWhoM, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_Sex, 0) != ISNULL(@NTU_Sex, 0))
			BEGIN
				IF not ((ISNULL(@OTU_Sex, 0) = 1 and ISNULL(@NTU_Sex, 0) = 0) or (ISNULL(@OTU_Sex, 0) = 0 and ISNULL(@NTU_Sex, 0) = 1))
				BEGIN
					IF @sMod != 'INS'
						SELECT @sText_Old = CASE ISNULL(@OTU_Sex, 0)
								WHEN 0 THEN 'Adult'
								WHEN 1 THEN 'Adult'
								WHEN 2 THEN 'Child'
								WHEN 3 THEN 'Infant'
								END
					ELSE
						SET @sText_Old = ''
					IF @sMod != 'DEL'
						SELECT @sText_New = CASE ISNULL(@NTU_Sex, 0)
								WHEN 0 THEN 'Adult'
								WHEN 1 THEN 'Adult'
								WHEN 2 THEN 'Child'
								WHEN 3 THEN 'Infant'
								END
					ELSE
						SET @sText_New = ''
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1067, @sText_Old, @sText_New, @OTU_Sex, @NTU_Sex, null, null, 0, @bNeedCommunicationUpdate output
				END
			END
		if (ISNULL(@OTU_RealSex, 0) != ISNULL(@NTU_RealSex, 0))
		BEGIN
				IF @sMod != 'INS'
					SELECT @sText_Old = CASE ISNULL(@OTU_RealSex, 0)
							WHEN 0 THEN 'Male'
							WHEN 1 THEN 'Female'
							END
				ELSE
					Set @sText_Old = ''
				IF @sMod != 'DEL'
					SELECT @sText_New = CASE ISNULL(@NTU_RealSex, 0)
							WHEN 0 THEN 'Male'
							WHEN 1 THEN 'Female'
							END
				ELSE
					Set	@sText_New = ''
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1068, @sText_Old, @sText_New, @OTU_RealSex, @NTU_RealSex, null, null, 0, @bNeedCommunicationUpdate output
		END

		if (ISNULL(@OTU_BIRTHCOUNTRY, '') != ISNULL(@NTU_BIRTHCOUNTRY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1126, @OTU_BIRTHCOUNTRY, @NTU_BIRTHCOUNTRY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_BIRTHCITY, '') != ISNULL(@NTU_BIRTHCITY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1127, @OTU_BIRTHCITY, @NTU_BIRTHCITY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_CITIZEN, '') != ISNULL(@NTU_CITIZEN, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1128, @OTU_CITIZEN, @NTU_CITIZEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTINDEX, '') != ISNULL(@NTU_POSTINDEX, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1129, @OTU_POSTINDEX, @NTU_POSTINDEX, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTCITY, '') != ISNULL(@NTU_POSTCITY, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1130, @OTU_POSTCITY, @NTU_POSTCITY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTSTREET, '') != ISNULL(@NTU_POSTSTREET, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1131, @OTU_POSTSTREET, @NTU_POSTSTREET, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTBILD, '') != ISNULL(@NTU_POSTBILD, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1132, @OTU_POSTBILD, @NTU_POSTBILD, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_POSTFLAT, '') != ISNULL(@NTU_POSTFLAT, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1133, @OTU_POSTFLAT, @NTU_POSTFLAT, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey

	  ------------------------------------------------------------------------------------------------
	  END
    FETCH NEXT FROM cur_Turist INTO @TU_Key, @sTU_ShortName,
				@OTU_DGCod, @OTU_DGKey, @OTU_NameRus, @OTU_NameLat, @OTU_FNameRus, @OTU_FNameLat,
				@OTU_SNameRus, @OTU_SNameLat, @OTU_BirthDay, @OTU_PasportType, @OTU_PasportNum,	@OTU_PaspRuSer,
				@OTU_PaspRuNum, @OTU_PasportDate, @OTU_PasportDateEnd, @OTU_PasportByWhoM, @OTU_PaspRuDate, @OTU_PaspRuByWhoM, 
				@OTU_Sex, @OTU_RealSex, 
				@OTU_BIRTHCOUNTRY,
				@OTU_BIRTHCITY,
				@OTU_CITIZEN,
				@OTU_POSTINDEX,
				@OTU_POSTCITY,
				@OTU_POSTSTREET,
				@OTU_POSTBILD,
				@OTU_POSTFLAT,
				@NTU_DGCod, @NTU_DGKey, @NTU_NameRus, @NTU_NameLat,	@NTU_FNameRus, @NTU_FNameLat,
				@NTU_SNameRus, @NTU_SNameLat, @NTU_BirthDay, @NTU_PasportType, @NTU_PasportNum,	@NTU_PaspRuSer,
				@NTU_PaspRuNum, @NTU_PasportDate, @NTU_PasportDateEnd, @NTU_PasportByWhoM, @NTU_PaspRuDate, @NTU_PaspRuByWhoM,
				@NTU_Sex, @NTU_RealSex,
				@NTU_BIRTHCOUNTRY,
				@NTU_BIRTHCITY,
				@NTU_CITIZEN,
				@NTU_POSTINDEX,
				@NTU_POSTCITY,
				@NTU_POSTSTREET,
				@NTU_POSTBILD,
				@NTU_POSTFLAT
    END
  CLOSE cur_Turist
  DEALLOCATE cur_Turist
END
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.1</VERSION>
--<DATE>2009-03-03</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key
	  END
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.22.2</VERSION>
--<DATE>2009-03-03</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					set @nDGSorCode_New = 7				--ОК
					IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
					BEGIN
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
						BEGIN
							set @nDGSorCode_New = 3			--Wait-List
							set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
						END
					END
					IF @nDGSorGlobalCode_New!=3 
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
						BEGIN
							set @nDGSorCode_New = 4			--Не подтвержден
							set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
						END

					if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
					BEGIN
						update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
					END

					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
			END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO
if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 100000))
            insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
            values (100000, 'SyncIL_NewMessage', 'Новое сообщение', null,0)
go

if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 100001))
            insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
            values (100001, 'SyncIL_DogovorTransfered', 'Путевка отправлена', null,0)
go

if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 100002))
            insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
            values (100002, 'SyncIL_UpdateSatus', 'Обновленн статус услуги', null,0)
go
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogovorMonitor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogovorMonitor]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [dbo].[DogovorMonitor]
  (
--<VERSION>2007.2.17</VERSION>
--<DATE>2008-09-01</DATE>
	@dtStartDate datetime,			-- начальная дата просмотра изменений
	@dtEndDate datetime,			-- конечная дата просмотра изменений
	@nCountryKey int,				-- ключ страны
	@nCityKey int,					-- ключ города
	@nDepartureCityKey int,			-- ключ города вылета
	@nCreatorKey int,				-- ключ создателя
	@nOwnerKey int,					-- ключ ведущего менеджера
	@nViewProceed smallint,			-- не показывать обработанные: 0 - показывать, 1 - не показывать
	@sFilterKeys varchar(255)		-- ключи выбранных фильтров
  )
AS
BEGIN

CREATE TABLE #DogovorMonitorTable
(
	DM_HistoryDate datetime,
	DM_ProcDate datetime,
	DM_DGCODE varchar(10),
	DM_CREATOR varchar(25),
	DM_TurDate datetime,
	DM_TurName varchar(160),
	DM_PartnerName varchar(80),
	DM_FilterName text,
	DM_NotesCount int,
	DM_PaymentStatus varchar(4),
	DM_IsBilled bit,
	DM_MessageCount int
)

declare @nObjectAliasFilter int, @sFilterType varchar(3)

declare @dtHistoryDate datetime, @sDGCode varchar(10), @nDGKey int
declare @sCreator varchar(25), @dtTurDate datetime, @sTurName varchar(160)
declare @sPartnerName varchar(80), @sFilterName varchar(255), @nHIID int
declare @sHistoryMod varchar(3), @sPaymentStatus as varchar(4)

set @sHistoryMod = 'DMP'

declare @nFilterKey int, @nLastPos int

while len(@sFilterKeys) > 0
begin
	set @nLastPos = 0
	set @nLastPos = charindex(',', @sFilterKeys, @nLastPos)
	if @nLastPos = 0
		set @nLastPos = len(@sFilterKeys) + 1
	
	set @nFilterKey = cast(substring(@sFilterKeys, 0, @nLastPos) as int)
	if @nLastPos <> len(@sFilterKeys) + 1
		set @sFilterKeys = substring(@sFilterKeys, @nLastPos + 1, len(@sFilterKeys) - @nLastPos)
	else
		set @sFilterKeys = ''
	
	select @sFilterName = DS_Value from Descriptions where DS_KEY = @nFilterKey


	declare filterCursor cursor local fast_forward for
	select OF_OAId, OF_Type
	from ObjectAliasFilters
	where OF_DSKey = @nFilterKey
	order by OF_OAId
	
	open filterCursor
	fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	while(@@fetch_status = 0)
	begin
		declare dogovorsCursor cursor local fast_forward for
		select HI_DATE, DG_CODE, US_FullName, DG_TurDate, TL_NAME, PR_NAME, DG_KEY,
			CASE
				WHEN DG_PRICE = 0 AND DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED = 0 THEN 'NONE'
				WHEN DG_PAYED < DG_PRICE THEN 'LOW'
				WHEN DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED > DG_PRICE THEN 'OVER'
			END AS DM_PAYMENTSTATUS
		from dogovor, history, historydetail, userlist, TurList, Partners
		where HI_DGCOD = DG_CODE and HI_ID = HD_HIID and US_KEY = DG_CREATOR and TL_KEY = DG_TRKEY and PR_KEY = DG_PARTNERKEY and 
			HI_DATE BETWEEN @dtStartDate and dateadd(day, 1, @dtEndDate) and
			(@nCountryKey < 0 OR DG_CNKEY = @nCountryKey) and
			(@nCityKey < 0 OR DG_CTKEY = @nCityKey) and
			(@nDepartureCityKey < 0 OR DG_CTDepartureKey = @nDepartureCityKey) and
			(@nCreatorKey < 0 OR DG_CREATOR = @nCreatorKey) and
			(@nOwnerKey < 0 OR DG_OWNER = @nOwnerKey) and
			(HD_OAId = @nObjectAliasFilter) and
			--(@nViewProceed = 0 OR NOT EXISTS (select HI_ID from history where HI_DGKEY = DG_KEY and HI_MOD LIKE @sHistoryMod)) and
			(@sFilterType = '' OR HI_MOD = @sFilterType)

		--нашли путевки
		open dogovorsCursor
		fetch next from dogovorsCursor into @dtHistoryDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		while(@@fetch_status = 0)
		begin
			if not exists (select * from #DogovorMonitorTable where datediff(mi, DM_HistoryDate, @dtHistoryDate) = 0 and DM_DGCODE = @sDGCode and DM_FilterName LIKE @sFilterName)
			begin
				declare @hiDate datetime
				--select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
				if exists (select HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
					select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
				else
					set @hiDate = NULL

				DECLARE @notesCount int
				SELECT @notesCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'WWW'

				DECLARE @isBilled bit
				SET @isBilled = 0
				IF EXISTS(SELECT AC_KEY FROM ACCOUNTS WHERE AC_DGCOD = @sDGCode)
					SET @isBilled = 1

				DECLARE @messageCount int
				SELECT @messageCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'MTM'
				AND HI_TEXT NOT LIKE 'От агента: %' -- notes from web (copies of 'WWW' moded notes)

				if (@nViewProceed = 0) OR (@hiDate IS NULL)
				begin
					insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount)
					values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
				end
				else
				begin
					if @dtHistoryDate > @hiDate
					begin
						insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount) 
						values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
					end
				end
			end
			fetch next from dogovorsCursor into @dtHistoryDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		end
			
		close dogovorsCursor
		deallocate dogovorsCursor

		fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	end

	close filterCursor
	deallocate filterCursor

end
	SELECT *
	FROM #DogovorMonitorTable
	ORDER BY DM_HistoryDate

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[DogovorMonitor] TO Public
GO 
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_TuristServiceUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_TuristServiceUpdate]
GO

CREATE TRIGGER [T_TuristServiceUpdate]
ON [dbo].[TuristService] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.2</VERSION>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @OTU_TUKey int
    DECLARE @OTU_DLKey int
    DECLARE @OTU_NumDoc varchar(32)
    DECLARE @OTU_NumRoom int
    DECLARE @OTU_Seat varchar(32)
    DECLARE @OTU_Area int
    DECLARE @OTU_DocDate datetime
    
    DECLARE @NTU_TUKey int
    DECLARE @NTU_DLKey int
    DECLARE @NTU_NumDoc varchar(32)
    DECLARE @NTU_NumRoom int
    DECLARE @NTU_Seat varchar(32)
    DECLARE @NTU_Area int
    DECLARE @NTU_DocDate datetime

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

	DECLARE @TU_IDKey int

	DECLARE @nDLKey int
	DECLARE @nTUKey int
	DECLARE @sDGCode varchar(10)
	DECLARE @nDGKey int
	DECLARE @sTUName varchar(32)
	DECLARE @sDLName varchar(170)
	DECLARE @sMod varchar(3)
	DECLARE @nDelCount int
	DECLARE @nInsCount int
	DECLARE @nHIID int
	DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint
	DECLARE @nDL_SVKey int
	DECLARE @nDL_PRKey int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_TuristService CURSOR FOR 
      SELECT N.TU_IDKey, 
			 null, null, null, null, null, null, null, 
		  	 N.TU_TUKey, N.TU_DLKey, N.TU_NumDoc, N.TU_NumRoom, N.TU_Seat, N.TU_Area, N.TU_DocDate 
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_TuristService CURSOR FOR 
      SELECT O.TU_IDKey,
			 O.TU_TUKey, O.TU_DLKey, O.TU_NumDoc, O.TU_NumRoom, O.TU_Seat, O.TU_Area, O.TU_DocDate, 
		  	 null, null, null, null, null, null, null
      FROM DELETED O 
  END
  ELSE 
  BEGIN
	SET @sMod = 'UPD'
    DECLARE cur_TuristService CURSOR FOR 
      SELECT N.TU_IDKey,
			 O.TU_TUKey, O.TU_DLKey, O.TU_NumDoc, O.TU_NumRoom, O.TU_Seat, O.TU_Area, O.TU_DocDate, 
		  	 N.TU_TUKey, N.TU_DLKey, N.TU_NumDoc, N.TU_NumRoom, N.TU_Seat, N.TU_Area, N.TU_DocDate
      FROM DELETED O, INSERTED N 
      WHERE N.TU_IDKey = O.TU_IDKey
  END

  OPEN cur_TuristService
    FETCH NEXT FROM cur_TuristService INTO @TU_IDKey,
				@OTU_TUKey, @OTU_DLKey, @OTU_NumDoc, @OTU_NumRoom, @OTU_Seat, @OTU_Area, @OTU_DocDate,  
				@NTU_TUKey, @NTU_DLKey, @NTU_NumDoc, @NTU_NumRoom, @NTU_Seat, @NTU_Area, @NTU_DocDate 

    WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (	@sMod = 'INS' OR @sMod = 'DEL' OR
			ISNULL(@OTU_TUKey, 0) != ISNULL(@NTU_TUKey, 0) OR
			ISNULL(@OTU_DLKey, 0) != ISNULL(@NTU_DLKey, 0) OR
			ISNULL(@OTU_NumDoc, '') != ISNULL(@NTU_NumDoc, '') OR
			ISNULL(@OTU_NumRoom, 0) != ISNULL(@NTU_NumRoom, 0) OR
			ISNULL(@OTU_Seat, '') != ISNULL(@NTU_Seat, '') OR
			ISNULL(@OTU_Area, 0) != ISNULL(@NTU_Area, 0) OR
			ISNULL(@OTU_DocDate, 0) != ISNULL(@NTU_DocDate, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		if (@sMod = 'INS' or @sMod = 'UPD')
		BEGIN
			SET @nDLKey = @NTU_DLKey
			SET @nTUKey = @NTU_TUKey
		END
		else if (@sMod = 'DEL')
		BEGIN
			SET @nDLKey = @OTU_DLKey
			SET @nTUKey = @OTU_TUKey
		END

		SELECT 	@sTUName = LEFT(ISNULL(TU_NAMERUS, '') + ' ' + ISNULL(TU_SHORTNAME, ''),25)
		FROM tbl_Turist WHERE TU_Key = @nTUKey
		
		SELECT  @sDLName = DL_NAME,  @sDGCode = DL_DGCOD, @nDGKey = DL_DGKEY,
				@nDL_SVKey = DL_SVKey, @nDL_PRKey = DL_PartnerKey
		FROM tbl_DogovorList WHERE DL_KEY = @nDLKey

		if (@sDGCode is null)
		BEGIN
			SELECT  @sDGCode = TU_DGCOD, @nDGKey = TU_DGKEY
			FROM tbl_Turist WHERE TU_KEY = @nTUKey
		END


--		if (@sMod = 'INS')
--			SET @sHI_Text = 'Привязка туриста ' + @sTUName + ' к услуге ' + @sDLName
--		else if (@sMod = 'DEL')
--			SET @sHI_Text = 'Снятие туриста ' + @sTUName + ' с услуги ' + @sDLName
--		else if (@sMod = 'UPD')
--			SET @sHI_Text = 'Изменение данных о привязке туриста ' + @sTUName + ' к услуге ' + @sDLName

		SET @sHI_Text = @sDLName
		EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 4, @TU_IDKey, @sMod, @sHI_Text, @sTUName, 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------

		if (ISNULL(@OTU_TUKey, 0) != ISNULL(@NTU_TUKey, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1069, null, null, @OTU_TUKey, @NTU_TUKey, null, null, 1, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_DLKey, 0) != ISNULL(@NTU_DLKey, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1070, null, null, @OTU_DLKey, @NTU_DLKey, null, null, 1, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_NumDoc, '') != ISNULL(@NTU_NumDoc, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1071, @OTU_NumDoc, @NTU_NumDoc, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_NumRoom, 0) != ISNULL(@NTU_NumRoom, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1072, @OTU_NumRoom, @NTU_NumRoom, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_Seat, '') != ISNULL(@NTU_Seat, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1073, @OTU_Seat, @NTU_Seat, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@OTU_Area, 0) != ISNULL(@NTU_Area, 0))
			BEGIN
				Select @sText_Old = VA_Name from VehicleArea where VA_Key = @OTU_Area
				Select @sText_New = VA_Name from VehicleArea where VA_Key = @NTU_Area
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1074, @OTU_Area, @NTU_Area, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@OTU_DocDate, 0) != ISNULL(@NTU_DocDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1075, @OTU_DocDate, @NTU_DocDate, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
		BEGIN
			If @nDL_SVKey=1
			BEGIN
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
					UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
			END
			ELSE
			BEGIN
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey=@nDL_PRKey)
					UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey=@nDL_PRKey
			END
		END

	  ------------------------------------------------------------------------------------------------
	  END
	  FETCH NEXT FROM cur_TuristService INTO @TU_IDKey,
			  @OTU_TUKey, @OTU_DLKey, @OTU_NumDoc, @OTU_NumRoom, @OTU_Seat, @OTU_Area, @OTU_DocDate,  
			  @NTU_TUKey, @NTU_DLKey, @NTU_NumDoc, @NTU_NumRoom, @NTU_Seat, @NTU_Area, @NTU_DocDate 

    END
  CLOSE cur_TuristService
  DEALLOCATE cur_TuristService
END
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSServiceStatusToHistory')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSServiceStatusToHistory', '0')
GO


Update SystemSettings Set 
SS_ParmValue = NULL,
SS_XmlValue = 'tbxName,tbxFName,tbxSName,tbxNameLat,tbxFNameLat,tbxSNameLat,tbxPaspSer,tbxPaspNumber,dtpPaspDate,tbxPaspByWho,dtpPaspDateEnd,tbtImport,tbtInsert,rbtAdtM,rbChildMale,rbtChdM,rbtInfM,rbtAdtF,rbtChdF,rbtInfF,dtpBirthDay,tbxBirthCountry,tbxBirthCity,cbxCitizen,tbxPostIndex,tbxPostCity,tbxPostStreet,tbxPostBuilding,tbxPostFlat,tbxPhone,btnAnketa,chbIsAnketa'
where SS_PARMNAME = 'SYSNOTBLOCKFIELDS'

alter table SystemSettings alter column SS_ParmValue varchar(255) null
GO
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[QuotaParts]') and name = 'QP_CheckInPlacesBusy')
ALTER TABLE dbo.QuotaParts ADD QP_CheckInPlacesBusy smallint NULL
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogListToQuotas]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogListToQuotas]
GO
CREATE PROCEDURE [dbo].[DogListToQuotas]
(
--<VERSION>2008.1.02.27a</VERSION>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null
) AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, 
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0)
FROM	DogovorList, Dogovor 
WHERE	DL_DGKey=DG_Key and DL_Key=@DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	return 0
END
SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey
	return 0
END

	


/*
If @SVKey=3
	SELECT TOP 1 @Quota_SubCode1=HR_RMKey, @Quota_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
Else
	Set @Quota_SubCode1=@SubCode1
*/
declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query varchar(8000), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @n2 smallint, @Result_Exist bit, @nTemp smallint, @dTemp datetime
--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2

	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
		return 0

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

--print 'sddddd0'
WHILE exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	--print @n
	set @n=@n+1
	Set @SubQuery = ' QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=' + CAST(@Q_Type as varchar(10)) + ' and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(10)) + '
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QO_QTID=QT_ID and QO_SVKey=' + CAST(@SVKey as varchar(10)) +' and QO_Code=' + CAST(@Code as varchar(10)) +' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10))
	IF @SVKey=3
		Set @SubQuery=@SubQuery+' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10))
	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))

	IF @Q_PRKey is null
		SET @SubQuery = @SubQuery + ' and QT_PRKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_PRKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations='''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 	

	Set @Query = '
		DECLARE @n1 smallint, @n2 smallint, @CurrentDate smalldatetime, @Long smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
		DECLARE @ServiceKeys Table 	(SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime )'

	IF @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +', SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_State is null'
	ELSE IF @Q_ByRoom=1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RLID=' + CAST(@SetQuotaRLKey as varchar(10)) + '	and SD_State is null'
	ELSE IF @Q_ByRoom=0
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RPID=' + CAST(@SetQuotaRPKey as varchar(10)) + ' and SD_State is null'

		Set @Query = @Query+'
			--SELECT * FROM @ServiceKeys
			SET @CurrentDate=''' + CAST(@Q_DateBeg as varchar(20)) + '''
			SET @Long=DATEDIFF(DAY,''' + CAST(@Q_DateBeg as varchar(20)) + ''',''' + CAST(@Q_DateEnd as varchar(20)) + ''')+1
			SET @Error=0
			SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			WHILE @SK_Current is not null and @Error=0
			BEGIN
				SET @n1=1
				WHILE @n1<=@Long and @Error=0
				BEGIN
					SET @QP_ID=null
					SET @n2=0
					WHILE (@QP_ID is null) and @n2<2
					BEGIN
						DECLARE @DATETEMP datetime
						SET @DATETEMP = GetDate()
						if not exists (select SS_ParmValue from systemsettings where SS_ParmName=''SYSCheckQuotaRelease'' and SS_ParmValue=1)
							SET @DATETEMP=''01-JAN-1900''
						IF @prev=1'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 and QP_Durations=@durations_prev and QD_Release=@release_prev
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)			
								ORDER BY ISNULL(QD_Release,0) DESC
			ELSE'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)
								ORDER BY ISNULL(QD_Release,0) DESC

							SET @n2=@n2+1
						IF @QP_ID is null
							SET @prev=1				
						ELSE
							UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@CurrentDate)	
					END
					If @QP_ID is null
						SET @Error=1
					SET @n1=@n1+1
				END
				IF @Error=0
					UPDATE ServiceByDate SET SD_State=' + CAST(@Q_Type as varchar(1)) + ', SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +')
						WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +'=@SK_Current and SD_State is null
				SET @SK_Current=null	
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END'
--	print @Query
	exec (@Query)

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END
UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
GO
GRANT EXECUTE ON [dbo].[DogListToQuotas] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_ServiceByDateChanged]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_ServiceByDateChanged]
GO
CREATE TRIGGER [dbo].[T_ServiceByDateChanged] ON [dbo].[ServiceByDate]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2008.1.00.08a</VERSION>
DECLARE @sMod varchar(3), @nHIID int, @sDGCode varchar(10), @nDGKey int, @sDLName varchar(150), @sTemp varchar(25), @sTemp2 varchar(255), @sTuristName varchar(55)
DECLARE @sOldValue varchar(255), @sNewValue varchar(255), @nOldValue int, @nNewValue int, @SDDate datetime
DECLARE @nRowsCount int

DECLARE @SDID int, @N_SD_DLKey int, @N_SD_RLID int, @N_SD_TUKEY int, @N_SD_QPID int, @N_SD_State smallint, @N_SD_Date datetime,
		@O_SD_DLKey int, @O_SD_RLID int, @O_SD_TUKEY int, @O_SD_QPID int, @O_SD_State smallint, @O_SD_Date datetime, @QT_ByRoom bit,
		@nDelCount smallint, @nInsCount smallint, @DLDateBeg datetime, @DLNDays smallint

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	O.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
			null, null, null, null, null, null,
			DL_DateBeg, DL_NDays
    FROM DELETED O, tbl_DogovorList
	WHERE O.SD_DLKey =  DL_Key
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			null, null, null, null, null, null,
			N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date,
			DL_DateBeg, DL_NDays
    FROM	INSERTED N, tbl_DogovorList
	WHERE N.SD_DLKey =  DL_Key
END
ELSE 
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
	  		N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date,
			DL_DateBeg, DL_NDays
    FROM DELETED O, INSERTED N, tbl_DogovorList 
    WHERE N.SD_ID = O.SD_ID AND N.SD_DLKey = DL_Key
END

OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
				@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date,
				@DLDateBeg, @DLNDays
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ISNULL(@O_SD_QPID,0)!=ISNULL(@N_SD_QPID,0) OR ISNULL(@O_SD_RLID,0)!=ISNULL(@N_SD_RLID,0)
	BEGIN
		If @O_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@O_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				IF @O_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@O_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				IF @O_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(*) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@O_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
		If @N_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@N_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				IF @N_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@N_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				IF @N_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(*) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@N_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
	END
	IF ISNULL(@O_SD_STATE, 0) != ISNULL(@N_SD_STATE, 0)
	BEGIN
		select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID
		set @sTemp = convert(varchar(25), @N_SD_Date, 104)
		if (@sTemp2 is not null)		
		begin
			set @sMod = 'UPD'
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''
			
			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'

			EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, @sNewValue, @nOldValue, @nNewValue, null, null, 0
		end
	END
	IF ISNULL(@O_SD_TUKEY,0)!=ISNULL(@N_SD_TUKEY,0)
	BEGIN
		IF (@N_SD_TUKEY is not null)
		BEGIN
			SELECT @sDGCode = DL_DGCod, @nDGKey = DL_DGKey, @sDLName = DL_Name FROM DogovorList WHERE DL_KEY = @N_SD_DLKey
			SELECT @sTuristName = TU_NAMERUS + ' ' + TU_FNAMERUS + ' ' + TU_SNAMERUS FROM Turist WHERE TU_KEY = @N_SD_TUKEY
			SET @SDDate = @N_SD_Date
			set @sTemp2 = rtrim(ltrim(@sDLName)) + ', ' + @sTuristName
			set @sMod = 'INS'
		END
		ELSE
		BEGIN
			SET @SDDate = @O_SD_Date
			select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID
			set @sMod = 'DEL'
		END

		if (@sTemp2 is not null)
		BEGIN
			set @sTemp = convert(varchar(25), @SDDate, 104)
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''

			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'
			
			IF (@sMod = 'INS')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, '', @sNewValue, null, @nNewValue, null, null, 0
			ELSE IF (@sMod = 'DEL')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, '', @nOldValue, null, null, null, 0
		END
	END
	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
					@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date,
					@DLDateBeg, @DLNDays
END
IF @O_SD_DLKey is not null and @N_SD_DLKey is null
	IF exists (SELECT 1 FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate) )
		DELETE FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate)

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetQuotaLoadListData_N]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetQuotaLoadListData_N] 
GO
create procedure [dbo].[GetQuotaLoadListData_N]
(
--<VERSION>2008.1.01.19a</VERSION>
@QT_ID int=null,
@Service_SVKey int=null,
@Service_Code int=null,
@DateStart smalldatetime = null,
@DaysCount int=null,			 -- для режима 10-для наличия мест - в этом поле передается продолжительность услуги

@nShowQuotaTypes smallint =null,  -- показывать квоты типа (0 - все, 1 - allotment, 2 - commitment)
@bShowCommonInfo bit =null,  -- показывать (1-общую информацию по квоте, 0-информацию по распределению квоты)
@bShowAgencyInfo bit =null,   -- показывать информацию об агентских квотах
@AgentKey int =null,
@bFreeSale bit =null,
@DLKey int =null,
@ResultType smallint=null,		--варианты отображения (0,null-общее, 10-для наличия мест(из оформления))
@TourDurations  smallint=null,
@DateStart2 smalldatetime = null,
@DateStart3 smalldatetime = null,
@bShowByCheckIn bit =null
)
as 

DECLARE @DateEnd smalldatetime, @Service_PRKey int, @QT_IDLocal int, @Result_From smallint, @Result_To smallint, @ServiceLong smallint, @DurationLocal smallint, @ByRoom int
--@Result
--11 - общее кол-во мест (строка 8000)
--12 - кол-во свободных мест (строка 8000)
--13 - кол-во занятых мест (строка 8000)
--21 - кол-во свободных мест (smallint)
--22 - % Stop-Sale (smallint)
--23 - возможен ли заезд (smallint)
if @ResultType is null or @ResultType not in (10)
	Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)
Else --для наличия мест(из оформления)
BEGIN
	Set @ServiceLong=@DaysCount
	Set @DateEnd = DATEADD(DAY,ISNULL(@DaysCount,1)-1,@DateStart3)
	Set @DaysCount=DATEDIFF(DAY,@DateStart,@DateEnd)+1

	if exists (select 1 from dbo.Service where SV_Key=@Service_SVKey and SV_IsDuration=1)
		set @DurationLocal=@ServiceLong
	Else
		set @DurationLocal=@TourDurations
END

--DECLARE @StopSaleTemp TABLE
--(
--SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
--)
-- Для совместимости с MSSQL 2000
CREATE TABLE #StopSaleTemp
(
SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
)

INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails	@DLKey, null, @DateStart, @DaysCount, null, null, @Service_SVKey, @Service_Code, null, null, 1

/*
select * from quotas,quotaobjects,quotadetails where 
qt_id=qo_qtid and qd_qtid=qt_id
and qo_code=8439 and qo_svkey=1 and QO_QTID is not null
and ISNULL(QD_IsDeleted,0)=0
and QD_Date between @DateStart and DATEADD(DAY,@DaysCount,@DateStart)
*/
CREATE TABLE #QuotaLoadList(
QL_QTID int, QL_PRKey int, QL_SubCode1 int, QL_PartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QL_Description nvarchar(255) collate Cyrillic_General_CI_AS, 
QL_dataType smallint, QL_Type smallint, QL_Release int, QL_Durations nvarchar(20) collate Cyrillic_General_CI_AS, QL_FilialKey int, 
QL_CityDepartments int, QL_AgentKey int, QL_CustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QL_DateCheckinMin smalldatetime,
QL_ByRoom int)

DECLARE @n int, @str varchar(1000)
if @ResultType is null or @ResultType not in (10)
BEGIN
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_B_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_F_' + CAST(@n as varchar(3)) + ' varchar(8000)
		exec (@str)
		set @n = @n + 1
	END
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' smallint'
		exec (@str)
		set @n = @n + 1
	END
END


if @bShowCommonInfo = 1
BEGIN
	insert into #QuotaLoadList 
	(QL_QTID, QL_Type, QL_Release, QL_dataType, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select	DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, @DateEnd+1,QT_PRKey, QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and ISNULL(QD_IsDeleted,0)=0
			and QD_Date between @DateStart and @DateEnd
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0)
			and NU_ID between 1 and 3
END
else
BEGIN
	DECLARE @Service_SubCode1 int, @Object_SubCode1 int, @Object_SubCode2 int
	SET @Object_SubCode1=0
	SET @Object_SubCode2=0
	IF @DLKey is not null				-- если мы запустили процедуру из конкрентной услуги
	BEGIN
		SELECT	@Service_SVKey=DL_SVKey, @Service_Code=DL_Code, @Service_SubCode1=DL_SubCode1, @AgentKey=ISNULL(DL_Agent,0), @Service_PRKey=DL_PartnerKey
		FROM	DogovorList
		WHERE	DL_Key=@DLKey
		If @Service_SVKey=3
			SELECT @Object_SubCode1=HR_RMKey, @Object_SubCode2=HR_RCKey FROM dbo.HotelRooms WHERE HR_Key=@Service_SubCode1
		Else
			SET @Object_SubCode1=@Service_SubCode1
	END

if @ResultType is null or @ResultType not in (10)
BEGIN
	Set @Result_From=11
	Set @Result_To=13
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	Set @Result_From=21
	Set @Result_To=23
END	
	insert into #QuotaLoadList 
		(QL_QTID, QL_Type, QL_Release, QL_dataType, 
		QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, 
		QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd+1,QT_PRKey,QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, QuotaParts, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID 
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and ISNULL(QP_IsDeleted,0)=0
			and ISNULL(QD_IsDeleted,0)=0
			and NU_ID between @Result_From and @Result_To
			and (@DLKey is null or (@DLKey is not null and QO_SubCode1 in (0,@Object_SubCode1) and QO_SubCode2 in (0,@Object_SubCode2)))
END

--update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_FilialKey and QL_FilialKey > 0)

DECLARE @QD_ID int, @Date smalldatetime, @State smallint, @QD_Release int, @QP_Durations varchar(20), @QP_FilialKey int,
		@QP_CityDepartments int, @QP_AgentKey int, @Quota_Places int, @Quota_Busy int, @QP_IsNotCheckIn bit,
		@QD_QTID int, @QP_ID int, @Quota_Comment varchar(8000), @Stop_Comment varchar(255) --,	@QT_ID int
DECLARE @ColumnName varchar(10), @QueryUpdate varchar(8000), @QueryUpdate1 varchar(255), @QueryWhere1 varchar(255), @QueryWhere2 varchar(255), 
		@QD_PrevID int, @StopSale_Percent int, @CheckInPlaces smallint, @CheckInPlacesBusy smallint --@QuotaObjects_Count int, 

if @bShowCommonInfo = 1
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,
			QD_Places, QD_Busy,
			0,'',0,0,0,0, ISNULL(REPLACE(QD_Comment,'''','"'),''),0,0
	FROM	Quotas, QuotaObjects, QuotaDetails
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID
else
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,			
			QP_Places, QP_Busy,
			QP_ID, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, ISNULL(QP_IsNotCheckIn,0), 
			ISNULL(REPLACE(QD_Comment,'''','"'),'') + '' + ISNULL(REPLACE(QP_Comment,'''','"'),''), QP_CheckInPlaces, QP_CheckInPlacesBusy
	FROM	Quotas, QuotaObjects, QuotaDetails,QuotaParts
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID			
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and QP_QDID = QD_ID	
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and (QP_IsDeleted = 0 or QP_IsDeleted is null)
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID

OPEN curQLoadList
FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
									@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
									@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy
SET @QD_PrevID = @QD_ID - 1
--SELECT @QuotaObjects_Count = count(*) from QuotaObjects, Quotas where QO_QTID = QT_ID and QT_ID = @QT_ID

SET @StopSale_Percent=0
WHILE @@FETCH_STATUS = 0
BEGIN
	set @QueryUpdate1=''
	if DATEADD(DAY,ISNULL(@QD_Release,0),GetDate()) < @Date
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
	set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))

	If @QD_PrevID != @QD_ID
	BEGIN
		SET @StopSale_Percent=0
		SET @Stop_Comment = ''
		IF @DLKey is null
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100*SST_QO_Count/SST_QO_CountWithStop, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END
		ELSE
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END

		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment
		SET @QD_PrevID = @QD_ID
	END	
	ELSE
		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment

	set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))
	if @QD_Release is null
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release is null' 
	else
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release = ' + CAST(@QD_Release as varchar(5))
	
	if @bShowCommonInfo = 1
	BEGIN
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10)) + ';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
		set @QueryUpdate = 'UPDATE #QuotaLoadList SET 
			QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 1 THEN ''' + CAST((@Quota_Places) as varchar(10))  + ''' WHEN 2 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10))  + ''' WHEN 3 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + ' and QL_dataType in (1,2,3) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		--print @QueryUpdate
		exec (@QueryUpdate)
	END
	else
	BEGIN
		set @QueryWhere2 = ''
		if @QP_Durations is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + @QP_Durations + ''''
		if @QP_FilialKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey = ' + CAST(@QP_FilialKey as varchar(10))
		if @QP_CityDepartments is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments = ' + CAST(@QP_CityDepartments as varchar(10))
 		if @QP_AgentKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey = ' + CAST(@QP_AgentKey as varchar(10))
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10))  + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7980)) + ''''
		IF @ResultType is null or @ResultType not in (10)
		BEGIN
			IF @bShowByCheckIn = 1 and @QP_Durations <> '' 
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST(ISNULL(@CheckInPlaces,0) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST(ISNULL(@CheckInPlaces-@CheckInPlacesBusy,0) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST(ISNULL(@CheckInPlacesBusy,0) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			ELSE
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST((@Quota_Places) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END
		ELSE
		BEGIN
		--для наличия мест(из оформления)
			--  WHEN 22 THEN ' + @StopSale_Percent + ' WHEN 23 THEN ' + @QP_IsNotCheckIn + ' END
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 21 THEN ' + CAST((@Quota_Places-@Quota_Busy) as varchar(5)) + ' WHEN 22 THEN ' + CAST(@StopSale_Percent as varchar(5)) + ' WHEN 23 THEN ' + CAST(@QP_IsNotCheckIn as varchar(5)) + ' END)' 
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (21,22,23) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END	
		--print @QueryUpdate
		exec (@QueryUpdate)
	END	
	FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
										@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
										@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy
END
CLOSE curQLoadList
DEALLOCATE curQLoadList

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	IF(@Service_SVKey = 3)
		SET @ByRoom = (SELECT AVG(ISNULL(QL_ByRoom,0)) FROM #QuotaLoadList)
	ELSE
		SET @ByRoom = 0

	insert into #QuotaLoadList 
		(QL_SubCode1, QL_Type, QL_dataType, QL_PRKey, QL_ByRoom)
	select DISTINCT DL_SubCode1, SD_State, 21, DL_PartnerKey, @ByRoom
	from	DogovorList,ServiceByDate
	where	SD_DLKey=DL_Key
			and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd))
			and SD_Date<=@DateEnd and SD_Date>=@DateStart
			and SD_State not in (1,2)
	group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
END

update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_AgentKey and QL_AgentKey > 0)
update #QuotaLoadList set QL_PartnerName = (Select PR_Name from Partners where PR_Key = QL_PRKey and QL_PRKey > 0)
update #QuotaLoadList set QL_PartnerName = 'All partners' where QL_PRKey=0

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	DECLARE @ServiceCount int, @SubCode1 int, @PartnerKey int

	DECLARE curQServiceList CURSOR FOR SELECT
		SD_Date, CASE @ByRoom WHEN 1 THEN count(distinct SD_RLID) ELSE count(SD_ID) END, 
		DL_SubCode1, DL_PartnerKey, SD_State
		from	DogovorList,ServiceByDate
		where	SD_DLKey=DL_Key
				and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
				and SD_State not in (1,2)
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
	OPEN curQServiceList
	FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))
		set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))

		set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + @ColumnName + ' = ''' + CAST((@ServiceCount) as varchar(10))  + ''' 
		WHERE QL_Type = ' + CAST(@State as varchar(1)) + ' and QL_SubCode1= ' + CAST(@SubCode1 as varchar(10)) + ' and QL_PRKey= ' + CAST(@PartnerKey as varchar(10))

		exec (@QueryUpdate)
		FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State
	END
	CLOSE curQServiceList
	DEALLOCATE curQServiceList
END

DECLARE @QO_SubCode int, @QO_TypeD smallint, @DL_SubCode1 int, @QT_ID_Prev int, @ServiceName1 varchar(100), @ServiceName2 varchar(100), @Temp varchar(100)
DECLARE curQLoadListQO CURSOR FOR 
	SELECT DISTINCT QO_QTID, QO_SubCode1, 1, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT QO_QTID, QO_SubCode2, 2, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT null, null, null, QL_SubCode1 FROM #QuotaLoadList WHERE QL_SubCode1 is not null
	ORDER BY 1,3

OPEN curQLoadListQO
FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
Set @QT_ID_Prev=@QT_IDLocal
Set @ServiceName1=''
Set @ServiceName2=''


WHILE @@FETCH_STATUS = 0
BEGIN
	if @DL_SubCode1 is not null
	BEGIN
		Set @Temp=''
		exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, @Temp output, null, null

		Update #QuotaLoadList set QL_Description=ISNULL(QL_Description,'') + @Temp where QL_SubCode1=@DL_SubCode1
	END
	Else
	BEGIN
		If @QT_ID_Prev != @QT_IDLocal
		BEGIN
			If @Service_SVKey=3
			BEGIN
				Set @ServiceName2='(' + @ServiceName2 + ')'
			END
			Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev
			Set @ServiceName1=''
			Set @ServiceName2=''
		END
		SET @QT_ID_Prev=@QT_IDLocal
		Set @Temp=''
		If @Service_SVKey=3
		BEGIN
			IF @QO_TypeD=1
			BEGIN
				EXEC GetRoomName @QO_SubCode, @Temp output, null
				If @ServiceName1!=''
					Set @ServiceName1=@ServiceName1+','
				Set @ServiceName1=@ServiceName1+@Temp
			END			
			Set @Temp=''
			IF @QO_TypeD=2
			BEGIN
				EXEC GetRoomCtgrName @QO_SubCode, @Temp output, null
				If @ServiceName2!=''
					Set @ServiceName2=@ServiceName2+','
				Set @ServiceName2=@ServiceName2+@Temp
			END
		END
		ELse
		BEGIN
			exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, @Temp output, null, null
			If @ServiceName1!=''
				Set @ServiceName1=@ServiceName1+','
			Set @ServiceName1=@ServiceName1+@Temp
		END
	END
	FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
END
If @Service_SVKey=3
BEGIN
	Set @ServiceName2='(' + @ServiceName2 + ')'
END
Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev

CLOSE curQLoadListQO
DEALLOCATE curQLoadListQO

If @Service_SVKey=3
BEGIN
	Update #QuotaLoadList set QL_Description = QL_Description + ' - Per person' where QL_ByRoom = 0
END

IF @ResultType is null or @ResultType not in (10)
BEGIN
	select * 
	from #QuotaLoadList 
	order by QL_QTID-QL_QTID DESC /*Сначала квоты, потом неквоты*/,QL_Description,QL_PartnerName,QL_Type DESC,QL_Release,QL_Durations,QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
	RETURN 0
END
ELSE
BEGIN --для наличия мест(из оформления)
	CREATE TABLE #ServicePlacesTr(
		SPT_QTID int, SPT_PRKey int, SPT_SubCode1 int, SPT_PartnerName varchar(100), SPT_Description varchar(255), 
		SPT_Type smallint, SPT_FilialKey int, SPT_CityDepartments int, SPT_Release int, SPT_Durations varchar(100),
		SPT_AgentKey int, SPT_Date smalldatetime, SPT_Places smallint, SPT_Stop smallint, SPT_CheckIn smallint)
	
	-- В MSSQL 2000 это не работает
	--ALTER TABLE #ServicePlacesTr ADD SPT_Date smalldatetime
	--ALTER TABLE #ServicePlacesTr ADD SPT_Places smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_Stop smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_CheckIn smallint


	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		DECLARE @curDate smalldatetime
		SET @curDate = DATEADD(DAY,@n-1,@DateStart)

		set @str = '
			INSERT INTO #ServicePlacesTr 
				(SPT_QTID, SPT_PRKey,SPT_SubCode1,SPT_PartnerName,SPT_Description,SPT_Type,
				SPT_FilialKey,SPT_CityDepartments,SPT_Release,SPT_Durations,SPT_AgentKey,
				SPT_Date,SPT_Places) 
			SELECT QL_QTID, QL_PRKey,QL_SubCode1,QL_PartnerName, QL_Description, QL_Type, 
				QL_FilialKey, QL_CityDepartments,QL_Release,QL_Durations,QL_AgentKey, 
				''' + CAST(@curDate as varchar(20)) + ''', QL_' + CAST(@n as varchar(3)) + '
				FROM #QuotaLoadList
				WHERE QL_dataType=21'
		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_Stop=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=22 and 
					SPT_QTID=QL_QTID and
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and 
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date=''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20))+ ''''

		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_CheckIn=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=23 and
					SPT_QTID=QL_QTID and 
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date= ''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20)) + ''''

		exec (@str)
		set @n = @n + 1
	END
END

--Select * from #ServicePlacesTr 	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

CREATE TABLE #ServicePlaces(
	SP_PRKey int, SP_SubCode1 int, SP_PartnerName varchar(100), SP_Description varchar(255), 
	SP_Type smallint, SP_FilialKey int, SP_CityDepartments int, 
	SP_Places1 smallint, SP_Places2 smallint, SP_Places3 smallint, 
	SP_NonReleasePlaces1 smallint,SP_NonReleasePlaces2 smallint,SP_NonReleasePlaces3 smallint, 
	SP_StopPercent1 smallint,SP_StopPercent2 smallint,SP_StopPercent3 smallint)

DECLARE @SPT_QTID int, @SPT_PRKey int, @SPT_SubCode1 int, @SPT_PartnerName varchar(100), @SPT_Description varchar(255), 
		@SPT_Type smallint, @SPT_FilialKey int, @SPT_CityDepartments int, @SPT_Release smallint, @SPT_Date smalldatetime, 
		@SPT_Places smallint, @SPT_Stop smallint, @SPT_CheckIn smallint, @SPT_PRKey_Old int, @SPT_PartnerName_Old varchar(100), 
		@SPT_SubCode1_Old int, @SPT_Description_Old varchar(255), @SPT_Type_Old smallint, @SPT_FilialKey_Old int,
		@SPT_CityDepartments_Old int, @SPT_Date_Old smalldatetime,
		@currentPlaces1 smallint, @currentPlaces2 smallint, @currentPlaces3 smallint,
		@currentNonReleasePlaces1 smallint, @currentNonReleasePlaces2 smallint, @currentNonReleasePlaces3 smallint,
		@OblectPlacesMin1 smallint, @OblectPlacesMin2 smallint, @OblectPlacesMin3 smallint,
		@OblectNonReleasePlacesMin1 smallint, @OblectNonReleasePlacesMin2 smallint, @OblectNonReleasePlacesMin3 smallint,
		@stopPercentSum1 smallint,@stopPercentSum2 smallint,@stopPercentSum3 smallint,
		@quotaCounter1 smallint,@quotaCounter2 smallint,@quotaCounter3 smallint,
		@Now smalldatetime

SET @Now = GETDATE()
		
DECLARE curQ2 CURSOR FOR SELECT
			 SPT_QTID, SPT_PRKey, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_Type, SPT_FilialKey, 
			 SPT_CityDepartments, ISNULL(SPT_Release, 0), SPT_Date, ISNULL(SPT_Places, 0), ISNULL(SPT_Stop,0), SPT_CheckIn
	FROM	#ServicePlacesTr
	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

OPEN curQ2
FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
		@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

SET @SPT_PRKey_Old=@SPT_PRKey
SET @SPT_Description_Old=@SPT_Description
SET @SPT_PartnerName_Old=@SPT_PartnerName
SET @SPT_Type_Old=@SPT_Type
SET @SPT_Date_Old=@SPT_Date
SET @currentPlaces1=0
SET @currentPlaces2=0
SET @currentPlaces3=0
SET @currentNonReleasePlaces1=0
SET @currentNonReleasePlaces2=0
SET @currentNonReleasePlaces3=0
SET @stopPercentSum1=0
SET @stopPercentSum2=0
SET @stopPercentSum3=0
SET @quotaCounter1=0
SET @quotaCounter2=0
SET @quotaCounter3=0


WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SPT_PRKey=@SPT_PRKey_Old and @SPT_Description=@SPT_Description_Old and ISNULL(@SPT_Type,-1)=ISNULL(@SPT_Type_Old,-1) and @SPT_Date!=@SPT_Date_Old
	BEGIN
		If (@OblectPlacesMin1 is null or @OblectPlacesMin1 > @currentPlaces1) AND @SPT_Date_Old BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
		BEGIN
			--Set @quotaCounter1=0
			Set @OblectPlacesMin1=@currentPlaces1
			--Set @currentPlaces1=0
			Set @OblectNonReleasePlacesMin1=@currentNonReleasePlaces1
			--Set @currentNonReleasePlaces1=0
		END
		If (@OblectPlacesMin2 is null or @OblectPlacesMin2 > @currentPlaces2) AND @SPT_Date_Old BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
		BEGIN
			--Set @quotaCounter2=0
			Set @OblectPlacesMin2=@currentPlaces2
			--Set @currentPlaces2=0
			Set @OblectNonReleasePlacesMin2=@currentNonReleasePlaces2
			--Set @currentNonReleasePlaces2=0
		END
		If (@OblectPlacesMin3 is null or @OblectPlacesMin3 > @currentPlaces3) AND @SPT_Date_Old BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
		BEGIN
			--Set @quotaCounter3=0
			Set @OblectPlacesMin3=@currentPlaces3
			--Set @currentPlaces3=0
			Set @OblectNonReleasePlacesMin3=@currentNonReleasePlaces3
			--Set @currentNonReleasePlaces3=0
		END
-- При смене даты обнуляем текущие колличества мест
		SET @currentPlaces1=0
		SET @currentPlaces2=0
		SET @currentPlaces3=0
		SET @currentNonReleasePlaces1=0
		SET @currentNonReleasePlaces2=0
		SET @currentNonReleasePlaces3=0
	END

	IF @SPT_PRKey!=@SPT_PRKey_Old or @SPT_Description!=@SPT_Description_Old or ISNULL(@SPT_Type,-1)!=ISNULL(@SPT_Type_Old,-1)
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
				SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
				SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
				SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
				@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
				ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
				ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
				@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)

		set @OblectPlacesMin1 = null
		set @OblectPlacesMin2 = null
		set @OblectPlacesMin3 = null
		set @OblectNonReleasePlacesMin1 = null
		set @OblectNonReleasePlacesMin2 = null
		set @OblectNonReleasePlacesMin3 = null
		Set @currentPlaces1=0
		Set @currentPlaces2=0
		Set @currentPlaces3=0
		Set @currentNonReleasePlaces1=0
		Set @currentNonReleasePlaces2=0
		Set @currentNonReleasePlaces3=0
		Set @stopPercentSum1=0
		Set @stopPercentSum2=0
		Set @stopPercentSum3=0
		Set @quotaCounter1=0
		Set @quotaCounter2=0
		Set @quotaCounter3=0
	END

	If @SPT_Date BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
	BEGIN
			Set @quotaCounter1=@quotaCounter1+1
		Set @stopPercentSum1 = @stopPercentSum1 + @SPT_Stop
		Set @currentPlaces1=@currentPlaces1+@SPT_Places
		If @DateStart > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces1=@currentNonReleasePlaces1+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
	BEGIN
			Set @quotaCounter2=@quotaCounter2+1
		Set @stopPercentSum2 = @stopPercentSum2 + @SPT_Stop
		Set @currentPlaces2=@currentPlaces2+@SPT_Places
		If @DateStart2 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces2=@currentNonReleasePlaces2+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
	BEGIN
			Set @quotaCounter3=@quotaCounter3+1
		Set @stopPercentSum3 = @stopPercentSum3 + @SPT_Stop
		Set @currentPlaces3=@currentPlaces3+@SPT_Places
		If @DateStart3 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces3=@currentNonReleasePlaces3+@SPT_Places
	END

	SET @SPT_PRKey_Old=@SPT_PRKey
	SET @SPT_PartnerName_Old=@SPT_PartnerName
	SET @SPT_Description_Old=@SPT_Description
	SET @SPT_Type_Old=@SPT_Type
	SET @SPT_Date_Old=@SPT_Date
	FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
			@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

	If @@FETCH_STATUS != 0
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
			SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
			SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
			SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
			@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
			ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
			ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
			@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)
		END
END
CLOSE curQ2
DEALLOCATE curQ2

--select * from #ServicePlacesTr
--ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
--		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

--select * from #ServicePlaces


	select 
		SP_PRKey,SP_PartnerName,SP_Description,SP_SubCode1,SP_Type,SP_FilialKey,SP_CityDepartments,
		CAST(SP_Places1 as varchar(4))+';'+CAST(SP_NonReleasePlaces1 as varchar(4))+';'+CAST(SP_StopPercent1 as varchar(4)) as SP_1,
		CAST(SP_Places2 as varchar(4))+';'+CAST(SP_NonReleasePlaces2 as varchar(4))+';'+CAST(SP_StopPercent2 as varchar(4)) as SP_2,
		CAST(SP_Places3 as varchar(4))+';'+CAST(SP_NonReleasePlaces3 as varchar(4))+';'+CAST(SP_StopPercent3 as varchar(4)) as SP_3
	from #ServicePlaces
	order by SP_Description, SP_PartnerName, SP_Type

GO

GRANT EXECUTE ON [dbo].[GetQuotaLoadListData_N] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CheckQuotaExist]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CheckQuotaExist] 
GO
CREATE PROCEDURE [dbo].[CheckQuotaExist]
(
--<VERSION>2008.1.03.12a</VERSION>
	@SVKey int,
	@Code int,
	@SubCode1 int,
	@DateBeg datetime, 
	@DateEnd datetime,
	@DateFirst datetime,
	@PRKey int,
	@AgentKey int,
	@TourDuration smallint,
	@FilialKey int,				--пока не обрабатывается 
	@CityDepartment int,		--пока не обрабатывается 
	--возвращаемые параметры
	--при наличии Stop-Sale возвращаем

--	Убрал, не нужны более
--	@StopExist int output, --ключ стопа
--	@StopDate smalldatetime output, --дата стопа 

	--переехали из [CheckQuotaInfo]
	@TypeOfResult smallint =null,			
	/*	тип результата 
			0-возвращение полной таблицы данных (без фильтров) используется в экране проверки мест, 
			1-информация о первой подходящей квоте, 
			2-максимальное доступное число мест по всем квотам */	
	@Pax smallint =null,					--кол-во туристов по услуге
	--возвращаемые параметры, в случае @TypeOfResult=2 (попытка проверить возможность постановки услуги на квоту)
	@Wait smallint =null, --в случае не надо снимать квоту,
	@Quota_CheckState smallint =null output,
	/*	0 - RQ (можно бронировать только под запрос)
		1 - OK (можно посадить на квоту)
		2 - STOP (стоп, мест на сущ.квотах недостаточно)
		3 - RELEASE (стопа нет, есть релиз, мест на сущ.квотах недостаточно)	*/
	@Quota_CheckDate smalldatetime =null output,
	/*  если @Quota_Check=2, то в этом поле дата на которую стоит стоп */
	@Quota_CheckInfo smallint =null output,
	/*  если @Quota_Check in (0,3), то в этом поле сколько мест не хватает */

	--возвращаемые параметры, в случае @TypeOfResult=1 (возвращаем характеристики оптимальной квоты)
	@Quota_Count int =null output,
	@Quota_AgentKey int =null output,
	@Quota_Type smallint =null output,
	@Quota_ByRoom bit =null output,
	@Quota_PRKey int =null output, 
	@Quota_FilialKey int =null output,
	@Quota_CityDepartments int =null output,
	@Quota_Duration smallint =null output,
	@Quota_SubCode1 int =null output,
	@Quota_SubCode2 int =null output
	
) AS

/*
insert into Debug (db_Text) values ('@SVKey= '+CAST(@SVKey as varchar(10))+'
'+'@Code= '+CAST(@Code as varchar(10))+'
'+'@SubCode1= '+CAST(@SubCode1 as varchar(10))+'
'+'@DateBeg= '+CAST(@DateBeg as varchar(10))+'
'+'@DateEnd= '+CAST(@DateEnd as varchar(10))+'
'+'@DateFirst= '+CAST(@DateFirst as varchar(10))+'
'+'@PRKey= '+CAST(@PRKey as varchar(10))+'
'+'@AgentKey= '+CAST(@AgentKey as varchar(10))+'
'+'@TourDuration= '+CAST(@TourDuration as varchar(10))
)
*/
if (@Wait=1 AND @TypeOfResult=2)
BEGIN
	set @Quota_CheckState=0
	return 0
end
declare @quoted smallint
select @quoted = isnull(SV_Quoted, 0) from Service where SV_Key = @SVKEY
if (@quoted = 0)
BEGIN
	set @Quota_CheckState=1
	return 0
end
Set @DateFirst=ISNULL(@DateFirst,@DateBeg)
--declare @StopExist int, @StopDate smalldatetime
--Проверка отсутствия Стопа
declare @StopExist int, @StopDate smalldatetime

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	exec CheckStopInfo 1,null,@SVKey,@Code,@SubCode1,@PRKey,@DateBeg,@DateEnd,@StopExist output,@StopDate output

declare @Q_QTID int, @Q_Partner int, @Q_ByRoom int, @Q_Type int, @Q_Release int, 
		@Q_FilialKey int, @Q_CityDepartments int, @Q_AgentKey int, @Q_Duration smallint,
		@Q_Places smallint, @ServiceWithDuration bit, @SubQuery varchar(5000), @Query varchar(5000),
		@Q_SubCode1 int, @Q_SubCode2 int, @Q_QTID_Prev int, @DaysCount int

SET @DaysCount=DATEDIFF(DAY,@DateBeg,@DateEnd)+1
SET @Q_QTID_Prev=0

SELECT @ServiceWithDuration=ISNULL(SV_IsDuration,0) FROM [Service] WHERE SV_Key=@SVKey
IF @ServiceWithDuration=1
	SET @TourDuration=DATEDIFF(DAY,@DateBeg,@DateEnd)+1

IF @SVKey=3
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and HR_Key=@SubCode1 and (QO_SubCode1=HR_RMKey or QO_SubCode1=0) and (QO_SubCode2=HR_RCKey or QO_SubCode2=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
ELSE
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and (QO_SubCode1=@SubCode1 or QO_SubCode1=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
open CheckQuotaExistСursor
fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
									@Q_Type, 
									@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
									@Q_SubCode1, @Q_SubCode2

CREATE TABLE #Tbl (	TMP_Count int, TMP_QTID int, TMP_AgentKey int, TMP_Type smallint, TMP_Date datetime, 
					TMP_ByRoom bit, TMP_Release smallint, TMP_Partner int, TMP_Durations varchar(25), TMP_FilialKey int, 
					TMP_CityDepartments int, TMP_SubCode1 int, TMP_SubCode2 int)

CREATE TABLE #StopSaleTemp
(SST_Code int, SST_SubCode1 int, SST_SubCode2 int, SST_QOID int, SST_PRKey int, SST_Date smalldatetime,
SST_QDID int, SST_Type smallint, SST_State smallint, SST_Comment varchar(255)
)

While (@@fetch_status = 0)
BEGIN
	IF @Q_QTID_Prev!=@Q_QTID
	BEGIN
		DELETE FROM #StopSaleTemp
		INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails
						NULL, @Q_QTID, @DateBeg, @DaysCount, null, null, @SVKey, @Code, @SubCode1, @PRKey
	END
/*
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @Q_QTID, @DaysCount, 670)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SVKey, @Code, 671)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SubCode1, @PRKey, 672)
*/
	SET @SubQuery = 'QD_QTID=QT_ID and QP_QDID = QD_ID 
		and QT_ID=' + CAST(@Q_QTID as varchar(10)) + '
		and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(1)) + ' and QD_Type=' + CAST(@Q_Type as varchar(1)) + ' 
		and QO_SVKey=' + CAST(@SVKey as varchar(10)) + ' and QO_Code=' + CAST(@Code as varchar(10)) + ' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10)) + ' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10)) + '	
		and (QD_Date between ''' + CAST((@DateBeg) as varchar(20)) + ''' and ''' + CAST(@DateEnd as varchar(20)) + ''') and QD_IsDeleted is null'

	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 
	--QP_Durations=' + CAST(@Q_Durations as varchar(10))
	IF @Q_Partner =''
		SET @SubQuery = @SubQuery + ' and QT_PRKey = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_Partner as varchar(10))

	declare @SubCode2 int
	--if @SVKey=3
	--	SELECT @SubCode1=HR_RMKey, @SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
	SET @Query = 
	'
	INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
						TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
						TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2)
		SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
				QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
				QP_CityDepartments, QO_SubCode1, QO_SubCode2
		FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
		WHERE	QO_ID=SST_QOID and QD_ID=SST_QDID and SST_State is null and ' + @SubQuery

		--and QD_Date > GetDate()+ISNULL(QD_Release,0)'
	--print @Query

	exec (@Query)
	
	SET @Q_QTID_Prev=@Q_QTID
	fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
										@Q_Type, 
										@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
										@Q_SubCode1, @Q_SubCode2	
END

--DELETE FROM #Tbl WHERE 

DELETE FROM #Tbl WHERE exists 
		(SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
		WHERE	QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=TMP_Type and QT_ByRoom=TMP_ByRoom
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QT_ID=TMP_QTID
				and ISNULL(QP_FilialKey,-1)=ISNULL(TMP_FilialKey,-1) and ISNULL(QP_CityDepartments,-1)=ISNULL(TMP_CityDepartments,-1)
				and ISNULL(QP_AgentKey,-1)=ISNULL(TMP_AgentKey,-1) and ISNULL(QT_PRKey,-1)=ISNULL(TMP_Partner,-1)
				and QP_Durations=TMP_Durations and ISNULL(QD_Release,-1)=ISNULL(TMP_Release,-1)
				and QD_Date=@DateFirst and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))

close CheckQuotaExistСursor
deallocate CheckQuotaExistСursor
--самая важная часть, ПОРЯДОК выбора квоты
--эта часть должна быть доработана
/*
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote')
	SELECT @vLimitAgentQuote = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote'
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong')
	SELECT @vLimitQuoteLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
SELECT @nQtLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
*/

DECLARE @Tbl_DQ Table 
 		(TMP_Count smallint, TMP_AgentKey int, TMP_Type smallint, TMP_ByRoom bit, 
				TMP_Partner int, TMP_Duration smallint, TMP_FilialKey int, TMP_CityDepartments int,
				TMP_SubCode1 int, TMP_SubCode2 int, TMP_ReleaseIgnore bit)

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	SET @DATETEMP='01-JAN-1900'
INSERT INTO @Tbl_DQ
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,0 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		WHERE	TMP_Date >= @DATETEMP+ISNULL(TMP_Release,0)
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1
	UNION
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,1 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1

/*
Комментарии к запросу выше!!!
Заполняем таблицу квот, которые могут нам подойти (группируя квоты по всем разделяемым параметрам, кроме релиз-периода
Все строки в таблице дублируются (важно! 11-ый параметр): 
	квоты с учетом релиз-периода (0) --TMP_ReleaseIgnore
	квоты без учета релиз-периода (1)--TMP_ReleaseIgnore
При выводе всех доступных квот требуется отсекать строки без учета релиз-периода и с количеством мест <=0 
*/

DECLARE @IsCommitmentFirst bit
IF Exists (SELECT SS_ID FROM dbo.SystemSettings WHERE SS_ParmName='SYS_Commitment_First' and SS_ParmValue='1')
	SET @IsCommitmentFirst=1

If @TypeOfResult is null or @TypeOfResult=0
BEGIN
	IF @IsCommitmentFirst=1
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	ELSE
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
END

DECLARE @Priority int;
SELECT @Priority=QPR_Type FROM   QuotaPriorities 
WHERE  QPR_Date=@DateFirst and QPR_SVKey = @SVKey and QPR_Code=@Code and QPR_PRKey=@PRKey

IF @Priority is not null
	SET @IsCommitmentFirst=@Priority-1

If @TypeOfResult=1 --(возвращаем характеристики оптимальной квоты)
BEGIN
	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		IF @Quota_Type=1 or @IsCommitmentFirst=1
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
		ELSE
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	END
END

If @TypeOfResult=2 --(попытка проверить возможность постановки услуги на квоту)
BEGIN
	DECLARE @Places_Count int, @Rooms_Count int,		 --доступное количество мест/номеров в квотах
			@PlacesNeed_Count smallint,					-- количество мест, которых недостаточно для оформления услуги
			@RowCountActual smallint, @RowCountReleaseIgnore smallint

	SELECT @RowCountReleaseIgnore=Count(1) FROM @Tbl_DQ
	DELETE FROM @Tbl_DQ WHERE TMP_ReleaseIgnore=1
 	SELECT @RowCountActual=Count(1) FROM @Tbl_DQ

	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		SET @PlacesNeed_Count=0		
		select	@Places_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=0
		If @SVKey=3
			select	@Rooms_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=1

		Set @Places_Count=ISNULL(@Places_Count,0)
		Set @Rooms_Count=ISNULL(@Rooms_Count,0)
	
		--проверяем достаточно ли будет текущего кол-ва мест для бронирования
		declare @nPlaces smallint, @nRoomsService smallint
		If @SVKey=3 and @Rooms_Count>0
		BEGIN
			--insert into Debug (db_n1) values (233)--
			exec GetServiceRoomsCount @Code, @SubCode1, @Pax, @nRoomsService output
			If @nRoomsService>@Rooms_Count
				Set @PlacesNeed_Count=@nRoomsService-@Rooms_Count
		END
		ELSE
			If @Pax>@Places_Count
				Set @PlacesNeed_Count=@Pax-@Places_Count

		If @PlacesNeed_Count <= 0 --мест в квоте хватило
			Set @Quota_CheckState=1						--Возвращаем "Ok (квоты есть)"
	END
	
	If @Quota_CheckState=0 or @Quota_CheckState is null
	BEGIN
		If @StopExist>0	--и установлен STOP 
		BEGIN
			Set @Quota_CheckState=2						--Возвращаем "Внимание STOP"
			Set @Quota_CheckDate=@StopDate
		END
		Else
		BEGIN
			If @RowCountActual<@RowCountReleaseIgnore
				Set @Quota_CheckState=3						--Возвращаем "Release" (мест не достаточно, но наступил РЕЛИЗ-Период)
			ELSE
				Set @Quota_CheckState=0						--Возвращаем "RQ" (дальше требуется расширять AUTOSTOP)
			Set @Quota_CheckInfo=@PlacesNeed_Count
		END
	END
END
GO
GRANT EXECUTE ON [dbo].[CheckQuotaExist] TO PUBLIC 
GO
UPDATE	QuotaParts SET QP_CheckInPlacesBusy=0 where QP_CheckInPlaces IS NOT NULL
GO
DECLARE @SDID int, @SD_DLKey int, @SD_RLID int, @SD_TUKEY int, @SD_QPID int, @SD_State smallint, @SD_Date datetime, 
		@QT_ByRoom bit, @DLDateBeg datetime, @DLNDays smallint


DECLARE cur_ServiceByDateChanged CURSOR FOR 
SELECT 	SD_ID, SD_DLKey, SD_RLID, SD_TUKey, SD_QPID, SD_State, SD_Date,
		DL_DateBeg, DL_NDays
FROM ServiceByDate, tbl_DogovorList, QuotaParts 
WHERE SD_DLKey = DL_Key AND SD_QPID = QP_ID AND QP_CheckInPlaces IS NOT NULL


OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @SD_DLKey, @SD_RLID, @SD_TUKEY, @SD_QPID, @SD_State, @SD_Date,
				@DLDateBeg, @DLNDays
WHILE @@FETCH_STATUS = 0
BEGIN
	BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				IF @SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				IF @SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(*) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
	END

	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @SD_DLKey, @SD_RLID, @SD_TUKEY, @SD_QPID, @SD_State, @SD_Date,
					@DLDateBeg, @DLNDays
END

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ChangeRoomPlaces]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ChangeRoomPlaces] 
GO
CREATE procedure [dbo].[ChangeRoomPlaces]
(
--<VERSION>2008.1.02.03a</VERSION>
@TUKey int,
@DLKey int,
@RPID_Source int,
@TUKey_Destination int,
@RPID_Destination int
)
as 

--если это место уже заняли (например другой пользователь расселил туда кого-нить другого)
--ниже просто проверка на актуальность информации для выполнения хранимки
IF @RPID_Destination>0
BEGIN
	IF not exists (Select RP_ID FROM RoomPlaces Where RP_ID=@RPID_Destination) --номер/место уже удалено
		Return 0
	IF @TUKey_Destination is null
		If exists (Select SD_ID from ServiceByDate Where SD_RPID=@RPID_Destination and SD_TUKey is not null)
			Return 0
	IF @TUKey_Destination is not null
		If exists (Select SD_ID from ServiceByDate Where SD_RPID=@RPID_Destination and (ISNULL(SD_TUKey,0)!=@TUKey_Destination))
			Return 0
END

--ниже основной текст хранимки
declare @RLID_Source int, @RLID_Destination int, @DLKey_Destination int,
		@bCheckSourceRoom bit, @PlaceIsEx bit
SELECT @PlaceIsEx=RP_Type, @RLID_Source=RP_RLID from RoomPlaces where RP_ID=@RPID_Source

IF @RPID_Destination>0
BEGIN
	SELECT @RLID_Destination=RP_RLID from RoomPlaces where RP_ID=@RPID_Destination
	--значит надо просто поменять местами людей, живущих в одном номере
	IF @TUKey_Destination is not null
		UPDATE ServiceByDate SET SD_RLID=(@RLID_Destination+@RLID_Source)-SD_RLID, SD_RPID=(@RPID_Destination+@RPID_Source)-SD_RPID WHERE SD_RPID in (@RPID_Destination, @RPID_Source)-- and SD_TUKey in (@TUKey_Destination, @TUKey)
	ELSE
	BEGIN
		Update ServiceByDate SET SD_RLID=@RLID_Destination, SD_RPID=@RPID_Destination
		WHERE SD_DLKey=@DLKey and SD_TUKey=@TUKey and SD_RPID=@RPID_Source

		SET @bCheckSourceRoom=1		--проверить номер, используется он или нет
	END
END

ELSE IF @RPID_Destination=0
BEGIN
	--создаем новый номер
	INSERT INTO RoomNumberLists (RL_NPlaces,RL_NPlacesEx,RL_RMKey,RL_RCKey) select RL_NPlaces,RL_NPlacesEx,RL_RMKey,RL_RCKey FROM RoomNumberLists where RL_ID=@RLID_Source
	set @RLID_Destination=SCOPE_IDENTITY()

	INSERT INTO RoomPlaces (RP_RLID,RP_Type) select @RLID_Destination,RP_Type FROM RoomPlaces where RP_RLID=@RLID_Source
	set @RPID_Destination=SCOPE_IDENTITY()

	select TOP 1 @RPID_Destination=RP_ID FROM RoomPlaces where RP_RLID=@RLID_Destination and RP_Type=@PlaceIsEx
	Update ServiceByDate SET SD_RLID=@RLID_Destination, SD_RPID=@RPID_Destination WHERE SD_DLKey=@DLKey and SD_TUKey=@TUKey and SD_RPID=@RPID_Source

	SET @bCheckSourceRoom=1			--проверить номер, используется он или нет
END

IF @bCheckSourceRoom=1
BEGIN
	IF not exists (Select SD_ID from ServiceByDate where SD_RLID=@RLID_Source)
	BEGIN
		DELETE FROM RoomPlaces WHERE RP_RLID=@RLID_Source
		DELETE FROM RoomNumberLists WHERE RL_ID=@RLID_Source
	END
END
GO
GRANT EXECUTE ON [dbo].[ChangeRoomPlaces] TO PUBLIC
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetTableQuotaDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetTableQuotaDetails] 
GO
create procedure [dbo].[GetTableQuotaDetails] 
(
--<VERSION>2008.1.02.02a</VERSION>
@DL_Key int =null,
@QT_ID int  =null,
@DateStart smalldatetime = null,
@DaysCount int  =null,
@QT_Type int  =null,
@QT_Release int  =null,
@DL_SVKey int  =null, 
@DL_Code int  =null, 
@DL_SubCode1 int  =null, 
@DL_PRKey int  =null,
@GroupByQD bit = null
)
AS
/*
возвращает таблицу со стопами по всем комбинациям услуг

есть 5 вариантов вызова
1. экран "Наличие мест на квоте" - @QT_ID, @DateStart, @DaysCount !!! до 2008.1.1 (после 2008.1.2 см.пункт 5 )
2. экран "Выбрать квоту (основной режим)" - @DL_Key, @DateStart, @DaysCount
3. функция проверки наличия мест [CheckQuotaExist] @QT_ID, @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @DL_SubCode1, @DL_PRKey
4. из экрана Стоп по квоте @QT_ID, @DateStart, @DaysCount, @QT_Type
5. экран "Наличие мест на квоте" - @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @GroupByQD !!! после 2008.1.2 (до 2008.1.1 см.пункт 1 ) 
*/
DECLARE @DateEnd smalldatetime
Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)

DECLARE @QO_SubCode1 int, @QO_SubCode2 int
IF @DL_Key is not null --значит смотрим из конкретной услуги
	SELECT @DL_SVKey=DL_SVKey, @DL_Code=DL_Code, @DL_SubCode1=DL_SubCode1, @DL_PRKey=DL_PartnerKey FROM DogovorList WHERE DL_Key=@DL_Key
IF @DL_SVKey is not null and @DL_SubCode1 is not null
BEGIN
	SET @QO_SubCode2=0
	IF @DL_SVKey=3
		SELECT @QO_SubCode1=HR_RMKey, @QO_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@DL_SubCode1
	ELSE
		SET @QO_SubCode1=@DL_SubCode1
END

--проверка стопов
--начало
CREATE TABLE #StopSaleTemp_Local
(
SST_Code int,
SST_SubCode1 int,
SST_SubCode2 int,
SST_QOID int,
SST_PRKey int,
SST_Date smalldatetime,
SST_QDID int,
SST_Type smallint,
SST_State smallint,
SST_Comment varchar(255)
)

IF @DL_Key is not null --значит смотрим по конкретной услуги
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code and (QO_SubCode1=@QO_SubCode1 or QO_SubCode1=0)
				and (QO_SubCode2=@QO_SubCode2 or QO_SubCode2=0)
				and (QT_PRKey=@DL_PRKey or QT_PRKey=0)
END
ELSE IF @QT_ID is not null
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and ((QO_SVKey=@DL_SVKey and @DL_SVKey is not null) or (@DL_SVKey is null))
				and ((QO_Code=@DL_Code and @DL_Code is not null) or (@DL_Code is null))
				and (((QO_SubCode1=0 or QO_SubCode1=@QO_SubCode1) and @QO_SubCode1 is not null) or (@QO_SubCode1 is null))
				and (((QO_SubCode2=0 or QO_SubCode2=@QO_SubCode2) and @QO_SubCode2 is not null) or (@QO_SubCode2 is null))
				and ((QD_Type=@QT_Type and @QT_Type is not null) or (@QT_Type is null))
				and ((ISNULL(QD_Release,0)=ISNULL(@QT_Release,0) and @QT_Type is not null) or (@QT_Type is null))	--специально смотрим @QT_Type, т.к. @QT_Release может прийти NULL
END
ELSE IF @QT_ID is null --экран "Наличие мест" (после 2008.1.2)
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code
END

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
BEGIN
	IF @DL_Key is not null --значит по услуге, значит не надо смотреть в QuotaObjects, так как объекты уже отобраны
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
			WHERE exists (SELECT SS_ID FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
	Else
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))
			WHERE exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))

	Update #StopSaleTemp_Local Set SST_State=2, SST_Comment= 
		(
			SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		WHERE exists 
		(
		SELECT SS_ID FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)					
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		and SST_Type=1
END
 --where sst_QDID=2602
--GO
--проверка стопов
--окончание
if @GroupByQD=1
	select	SST_QDID, Count(*) as SST_QO_Count, 
			(SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null) as SST_QO_CountWithStop,
			(SELECT TOP 1 SST_Comment FROM #StopSaleTemp_Local s3 WHERE s3.SST_QDID=s1.SST_QDID and SST_Comment is not null and SST_Comment != '') as SST_Comment
	from #StopSaleTemp_Local s1
	group by SST_QDID
	having (SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null)>0
else
	select * from #StopSaleTemp_Local
GO
GRANT EXECUTE ON [dbo].[GetTableQuotaDetails] TO PUBLIC 
GO
if not exists(select * from dbo.sysobjects where id = OBJECT_ID(N'[dbo].[InfantService]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[InfantService](
      [IS_Id] [int] IDENTITY(1,1) NOT NULL,
	  [IS_DLKey] [int] NOT NULL,
	  [IS_MainTuKey] [int] NOT NULL,
	  [IS_DependTuKey] [int] NOT NULL,
	CONSTRAINT [PK_InfantService] PRIMARY KEY CLUSTERED 
	(
      [IS_Id] ASC
	) ON [PRIMARY]
) ON [PRIMARY]
GO

grant select, update, insert, delete on [dbo].[InfantService] to public
GO
if not exists(select id from syscolumns where id = OBJECT_ID('dup_user') and name = 'US_FilialKey')
      alter table dup_user add US_FilialKey int null
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_ServiceByDateChanged]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_ServiceByDateChanged]
GO
CREATE TRIGGER [dbo].[T_ServiceByDateChanged] ON [dbo].[ServiceByDate]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2008.1.00.09a</VERSION>
DECLARE @sMod varchar(3), @nHIID int, @sDGCode varchar(10), @nDGKey int, @sDLName varchar(150), @sTemp varchar(25), @sTemp2 varchar(255), @sTuristName varchar(55)
DECLARE @sOldValue varchar(255), @sNewValue varchar(255), @nOldValue int, @nNewValue int, @SDDate datetime
DECLARE @nRowsCount int, @sServiceStatusToHistory varchar(255)

DECLARE @SDID int, @N_SD_DLKey int, @N_SD_RLID int, @N_SD_TUKEY int, @N_SD_QPID int, @N_SD_State smallint, @N_SD_Date datetime,
		@O_SD_DLKey int, @O_SD_RLID int, @O_SD_TUKEY int, @O_SD_QPID int, @O_SD_State smallint, @O_SD_Date datetime, @QT_ByRoom bit,
		@nDelCount smallint, @nInsCount smallint, @DLDateBeg datetime, @DLNDays smallint

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	O.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
			null, null, null, null, null, null
			--DL_DateBeg, DL_NDays
    FROM DELETED O
	--LEFT OUTER JOIN tbl_DogovorList ON O.SD_DLKey = DL_Key
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			null, null, null, null, null, null,
			N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM	INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key
END
ELSE 
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
	  		N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM DELETED O, INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key 
    WHERE N.SD_ID = O.SD_ID
END

select @sServiceStatusToHistory = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory'

OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
				@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
				--@DLDateBeg, @DLNDays
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ISNULL(@O_SD_QPID,0)!=ISNULL(@N_SD_QPID,0) OR ISNULL(@O_SD_RLID,0)!=ISNULL(@N_SD_RLID,0)
	BEGIN
		If @O_SD_QPID is not null
		BEGIN			
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@O_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				--IF @O_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@O_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID) WHERE QP_ID=@O_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				--IF @O_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(*) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@O_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
		If @N_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@N_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				--IF @N_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@N_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				UPDATE	QuotaParts SET QP_Busy=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID) WHERE QP_ID=@N_SD_QPID
				UPDATE  QuotaDetails SET QD_Busy=(SELECT COUNT(*) FROM ServiceByDate,QuotaParts WHERE SD_QPID=QP_ID and QP_QDID=QD_ID) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				--IF @N_SD_Date = @DLDateBeg
					UPDATE	QuotaParts SET QP_CheckInPlacesBusy=(
						SELECT COUNT(*) FROM ServiceByDate, tbl_DogovorList WHERE SD_QPID=@N_SD_QPID AND SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key) 
					WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
	END
	IF ISNULL(@O_SD_STATE, 0) != ISNULL(@N_SD_STATE, 0) and ISNULL(@sServiceStatusToHistory, '0') != '0'
	BEGIN
		SELECT @sDGCode = DL_DGCod, @nDGKey = DL_DGKey, @sDLName = DL_Name FROM DogovorList WHERE DL_KEY = @N_SD_DLKey
		SELECT @sTuristName = TU_NAMERUS + ' ' + TU_FNAMERUS + ' ' + ISNULL(TU_SNAMERUS, '') FROM Turist WHERE TU_KEY = @N_SD_TUKEY
		set @sTemp2 = rtrim(ltrim(@sDLName)) + ', ' + @sTuristName

		--select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID

		set @sTemp = convert(varchar(25), @N_SD_Date, 104)
		if (@sTemp2 is not null)		
		begin
			set @sMod = 'UPD'
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''
			
			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'

			EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, @sNewValue, @nOldValue, @nNewValue, null, null, 0
		end
	END
	IF ISNULL(@O_SD_TUKEY,0)!=ISNULL(@N_SD_TUKEY,0) and ISNULL(@sServiceStatusToHistory, '0') != '0'
	BEGIN
		IF (@N_SD_TUKEY is not null)
		BEGIN
			SELECT @sDGCode = DL_DGCod, @nDGKey = DL_DGKey, @sDLName = DL_Name FROM DogovorList WHERE DL_KEY = @N_SD_DLKey
			SELECT @sTuristName = TU_NAMERUS + ' ' + TU_FNAMERUS + ' ' + ISNULL(TU_SNAMERUS, '') FROM Turist WHERE TU_KEY = @N_SD_TUKEY
			SET @SDDate = @N_SD_Date
			set @sTemp2 = rtrim(ltrim(@sDLName)) + ', ' + @sTuristName
			set @sMod = 'INS'
		END
		ELSE
		BEGIN
			SET @SDDate = @O_SD_Date
			SELECT @sDGCode = DL_DGCod, @nDGKey = DL_DGKey, @sDLName = DL_Name FROM DogovorList WHERE DL_KEY = @O_SD_DLKey
			SELECT @sTuristName = TU_NAMERUS + ' ' + TU_FNAMERUS + ' ' + ISNULL(TU_SNAMERUS, '') FROM Turist WHERE TU_KEY = @O_SD_TUKEY
			set @sTemp2 = rtrim(ltrim(@sDLName)) + ', ' + @sTuristName
--			select @sTemp2 = HI_TEXT, @sDGCode = HI_DGCOD, @nDGKey = HI_DGKEY from History where HI_OAID = 19 and HI_TypeCode = @SDID
			set @sMod = 'DEL'
		END

		if (@sTemp2 is not null)
		BEGIN
			set @sTemp = convert(varchar(25), @SDDate, 104)
			EXEC @nHIID = dbo.InsHistory @sDGCode, @nDGKey, 19, @SDID, @sMod, @sTemp2, @sTemp, 0, ''

			SET @nOldValue = @O_SD_State
			SET @nNewValue = @N_SD_State

			IF ISNULL(@nOldValue, 0) = 0
				SET @sOldValue = ''
			ELSE IF @nOldValue = 1
				SET @sOldValue = 'Allotment'
			ELSE IF @nOldValue = 2
				SET @sOldValue = 'Commitment'
			ELSE IF @nOldValue = 3
				SET @sOldValue = 'Confirmed'
			ELSE IF @nOldValue = 4
				SET @sOldValue = 'Wait'

			IF ISNULL(@nNewValue, 0) = 0
				SET @sNewValue = ''
			ELSE IF @nNewValue = 1
				SET @sNewValue = 'Allotment'
			ELSE IF @nNewValue = 2
				SET @sNewValue = 'Commitment'
			ELSE IF @nNewValue = 3
				SET @sNewValue = 'Confirmed'
			ELSE IF @nNewValue = 4
				SET @sNewValue = 'Wait'
			
			IF (@sMod = 'INS')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, '', @sNewValue, null, @nNewValue, null, null, 0
			ELSE IF (@sMod = 'DEL')
				EXECUTE dbo.InsertHistoryDetail @nHIID , 19001, @sOldValue, '', @nOldValue, null, null, null, 0
		END
	END
	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
					@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
					--@DLDateBeg, @DLNDays
END
IF @O_SD_DLKey is not null and @N_SD_DLKey is null
	IF exists (SELECT 1 FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate) )
		DELETE FROM RoomNumberLists WHERE RL_ID not in (SELECT SD_RLID FROM ServiceByDate)

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO

if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSCheckInfantAge')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSCheckInfantAge', '24')
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ConvertQuotesPlaces]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[ConvertQuotesPlaces] 
GO

create PROCEDURE [dbo].[ConvertQuotesPlaces]
( @datestart datetime )
as
---перенос занимаемых мест по квоте

if exists (select * from systemsettings where SS_ParmName='SYSCheckQuotaRelease')
	update systemsettings set SS_ParmValue=1 where SS_ParmName = 'SYSCheckQuotaRelease'	
else 
	insert into systemsettings (SS_ParmName, SS_ParmValue) values ('SYSCheckQuotaRelease', 1)

	DECLARE @nDL_Max int
	if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSMT2008DLKEY')
	BEGIN
		SELECT @nDL_Max=MAX(DL_KEY) FROM DOGOVORLIST
		insert into systemsettings (SS_ParmName, SS_ParmValue) values ('SYSMT2008DLKEY',@nDL_Max )
	END
	ELSE
		SELECT @nDL_Max=CAST(SS_ParmValue as int) FROM systemsettings where SS_ParmName='SYSMT2008DLKEY'

	Declare @TUKEY INT, @dlkey int, @DGKey int, @DLSVKey int, @DLCode int, @DLSubcode1 int, @DLDateBeg datetime, @DLDateEnd datetime, @DLNMen int, @QuoteKey int, @QuoteType smallint, @TempType smallint, @HRMain smallint
	Declare @qddate datetime ,@qtkey  int ,@from int 
	declare @Date datetime, @RLID int 
	declare @HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int
	Declare	@NeedPlacesForMen int,@rpid int ,
			@RMPlacesMain smallint, @RMPlacesEx smallint,
			@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
			@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
			@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
			@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint
	DECLARE cur_DogovorList CURSOR FOR 
		SELECT 	DL_Key,DL_SvKey, DL_Code, DL_SubCode1, DL_DateBeg, DL_DateEnd, DL_NMen, DL_QuoteKey
		FROM	Dogovorlist where dl_svkey <>3  
				and dl_key not in (select DC_DLKey from dbo.DLConverted)
				and DL_DateBeg > @datestart and DL_Key <= @nDL_Max
	-- and dl_cnkey=6221
	OPEN cur_DogovorList
	FETCH NEXT FROM cur_DogovorList
		INTO @DLKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @NeedPlacesForMen=ISNULL(@DLNMen,0)		
		SET @From = CAST(@DLDateBeg as int)

		while(@NeedPlacesForMen > 0)
		BEGIN
			--INSERT INTO ServiceByDate (SD_Date, SD_DLKey) values (@Date, @DLKey)			
			
			set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)
				INSERT INTO RoomPlaces(RP_RLID, RP_Type) values (0,0)
				set @RPID=SCOPE_IDENTITY()				
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RPID, SD_TUKey)	
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@DLDateEnd as int)-@From+1

			set @NeedPlacesForMen=@NeedPlacesForMen-1
		END
		
		SET @QuoteType=null
		IF @QuoteKey is not null and @QuoteKey != 0
		BEGIN
			SELECT @QuoteType=QT_Type FROM tbl_Quotes_old WHERE QT_Key=@QuoteKey
			SET @TempType=@QuoteType-2 --передаем в хранимку (последний параметр) -1 для Allotment, -2 для коммитмента
			--в этой хранимке будет выполнена попытка постановки услуги на квоту
			EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,@TempType
		END
		ELSE
			EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,4	-- если услуга была не на квоте, то ставим ее на Request

		INSERT INTO dbo.DLConverted (DC_DLKey,DC_QuoteType) values (@DLKey,@QuoteType)
		FETCH NEXT FROM cur_DogovorList
		INTO @DLKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey
	
	ENd
	CLOSE cur_DogovorList
	DEALLOCATE   cur_DogovorList

DECLARE cur_DogovorListhotel CURSOR FOR 
    SELECT DISTINCT 	DL_Key, DL_DGkey, DL_SvKey, DL_Code, DL_SubCode1, DL_DateBeg, DL_DateEnd, DL_NMen,DL_QUOTEKEY, HR_Main
    FROM	Dogovorlist, HotelRooms  
	where   dl_subcode1=HR_key 
			and dl_svkey =3
			and dl_key not in (select DC_DLKey from dbo.DLConverted)
			and DL_DateBeg > @datestart and DL_Key <= @nDL_Max
	order by HR_Main desc, dl_key
OPEN cur_DogovorListhotel
FETCH NEXT FROM cur_DogovorListhotel
	INTO @DLKey, @DGKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey, @HRMain

WHILE @@FETCH_STATUS = 0
BEGIN	
				--If @NeedPlacesForMen>0 надо ли это
				SET @From = CAST(@DLDateBeg as int)
				SELECT	@HRIsMain=HR_MAIN, @RMKey=HR_RMKEY, @RCKey=HR_RCKEY, @ACKey=HR_ACKEY,
						@RMPlacesMain=RM_NPlaces, @RMPlacesEx=RM_NPlacesEx,
						@ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
				FROM HotelRooms, Rooms, AccmdMenType
				WHERE HR_Key=@DLSubcode1 and RM_Key=HR_RMKEY and AC_KEY=HR_ACKEY 
				if @ACPerRoom=1
				BEGIN
					SET @RLPlacesMain = @ACPlacesMain
					SET @RLPlacesEx = ISNULL(@ACPlacesEx,0)
				END
				Else
				BEGIN
					IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
						set @ACPlacesMain = 1
					ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
						set @ACPlacesEx = 1
					SET @RLPlacesMain = @RMPlacesMain
					SET	@RLPlacesEx = ISNULL(@RMPlacesEx,0)
				END
				
				SET @NeedPlacesForMen=ISNULL(@DLNMen,0)
				
	
			SET @RLID = 0
			SET @RPID = null
			SET @AC_FreeMainPlacesCount = 0
			SET @AC_FreeExPlacesCount = 0
			SET @RL_FreeMainPlacesCount = 0
			SET @RL_FreeExPlacesCount = 0
			WHILE (@NeedPlacesForMen>0)
			BEGIN
				--если в последнем номере кончились места, то выставляем признак @RLID = 0
				IF @AC_FreeMainPlacesCount = 0 and @AC_FreeExPlacesCount = 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @ACPlacesMain
					SET @AC_FreeExPlacesCount = @ACPlacesEx
					--создаем новый номер, всегда когда есть хоть кто-то на основном месте
					IF (@AC_FreeMainPlacesCount > @RL_FreeMainPlacesCount) or (@AC_FreeExPlacesCount > @RL_FreeExPlacesCount)
					BEGIN
						IF @ACPlacesMain>0
						BEGIN			
							INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
							set @RLID=SCOPE_IDENTITY()
							INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
							set @RPID=SCOPE_IDENTITY()-@RLPlacesMain-@RLPlacesEx+1
							SET @RL_FreeMainPlacesCount = @RLPlacesMain
							SET @RL_FreeExPlacesCount = @RLPlacesEx
						END
						ELSE
						BEGIN
							/*
							1. Ищем к кому подселиться в данной путевке, если не находим, то повисаем в воздухе 
							*/
							SELECT	TOP 1 @RPID=RP_ID, @RLID=RP_RLID
							FROM	RoomPlaces
							WHERE
								RP_Type=1
								and RP_RLID in 
								(	SELECT SD_RLID 
									FROM ServiceByDate,DogovorList,RoomNumberLists 
									WHERE SD_DLKey=DL_Key and DL_DGKey=@DGKey and RL_ID=SD_RLID
										and DL_SVKey=@DLSVKey and DL_Code=@DLCode 
										and DL_DateBeg=@DLDateBeg and DL_DateEnd=@DLDateEnd
										and RL_RMKey=@RMKey and RL_RCKey=@RCKey
								)
								and not exists 
								(	SELECT SD_RPID FROM ServiceByDate WHERE SD_RLID=RP_RLID and SD_RPID=RP_ID)
							ORDER BY RP_ID
						END
						IF @RPID is null	-- надо создавать новый номер даже для дополнительного размещения
						BEGIN
							INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
							set @RLID=SCOPE_IDENTITY()
							INSERT INTO RoomPlaces (RP_RLID, RP_Type)
							SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
							set @RPID=SCOPE_IDENTITY()-@RLPlacesEx+1
							SET @RL_FreeMainPlacesCount = @RLPlacesMain
							SET @RL_FreeExPlacesCount = @RLPlacesEx
						END
					END
				END
				
				--смотрим есть ли в текущем номере свободные ОСНОВНЫЕ места
				IF @AC_FreeMainPlacesCount > 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - 1
					SET @RL_FreeMainPlacesCount = @RL_FreeMainPlacesCount - 1
					SET @CurrentPlaceIsEx=0
				END
				--если ОСНОВНЫХ мест в номере уже нет, то может посадим на ДОПОЛНИТЕЛЬНОЕ? 
				ELSE IF @AC_FreeExPlacesCount > 0
				BEGIN
					SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - 1
					SET @RL_FreeExPlacesCount = @RL_FreeExPlacesCount - 1
					SET @CurrentPlaceIsEx=1
				END
				
				
				set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)
				
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_TUKey)
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@DLDateEnd as int)-@From+1
				
				SET @NeedPlacesForMen=@NeedPlacesForMen-1
				SET @RPID=@RPID+1	
				

				End
		SET @QuoteType=null
		IF @QuoteKey is not null and @QuoteKey != 0
		BEGIN
			SELECT QT_Type 
			FROM tbl_Quotes_old,DogovorQuotes_old 
			WHERE dq_dlkey=qt_key and DQ_DLKEY=@DLKEY
			SET @TempType=@QuoteType-2 --передаем в хранимку (последний параметр) -1 для Allotment, -2 для коммитмента
			--в этой хранимке будет выполнена попытка постановки услуги на квоту
			EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,@TempType
		END
		ELSE
			EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,4	-- если услуга была не на квоте, то ставим ее на Request
		INSERT INTO dbo.DLConverted (DC_DLKey,DC_QuoteType) values (@DLKey,@QuoteType)
	--EXEC DogListToQuotas @DLKey 
	FETCH NEXT FROM cur_DogovorListhotel
		INTO @DLKey, @DGKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey, @HRMain

END

CLOSE cur_DogovorListhotel
DEALLOCATE   cur_DogovorListhotel

if exists (select * from systemsettings where SS_ParmName='SYSCheckQuotaRelease')
	update systemsettings set SS_ParmValue=0 where SS_ParmName = 'SYSCheckQuotaRelease'	

Go

GRANT EXECUTE ON [dbo].[ConvertQuotesPlaces] TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogListToQuotas]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogListToQuotas]
GO
CREATE PROCEDURE [dbo].[DogListToQuotas]
(
--<VERSION>2008.1.02.28a</VERSION>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null
) AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, 
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0)
FROM	DogovorList, Dogovor 
WHERE	DL_DGKey=DG_Key and DL_Key=@DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	return 0
END
SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey
	return 0
END

	


/*
If @SVKey=3
	SELECT TOP 1 @Quota_SubCode1=HR_RMKey, @Quota_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
Else
	Set @Quota_SubCode1=@SubCode1
*/
declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query varchar(8000), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @n2 smallint, @Result_Exist bit, @nTemp smallint, @dTemp datetime
--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2

	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
		return 0

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

--print 'sddddd0'
WHILE exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	--print @n
	set @n=@n+1
	Set @SubQuery = ' QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=' + CAST(@Q_Type as varchar(10)) + ' and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(10)) + '
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QO_QTID=QT_ID and QO_SVKey=' + CAST(@SVKey as varchar(10)) +' and QO_Code=' + CAST(@Code as varchar(10)) +' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10))
	IF @SVKey=3
		Set @SubQuery=@SubQuery+' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10))
	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))

	IF @Q_PRKey is null
		SET @SubQuery = @SubQuery + ' and QT_PRKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_PRKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations='''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 	

	Set @Query = '
		DECLARE @n1 smallint, @n2 smallint, @CurrentDate smalldatetime, @Long smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
		DECLARE @ServiceKeys Table 	(SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime )'

	IF @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +', SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_State is null'
	ELSE IF @Q_ByRoom=1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RLID=' + CAST(@SetQuotaRLKey as varchar(10)) + '	and SD_State is null'
	ELSE IF @Q_ByRoom=0
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RPID=' + CAST(@SetQuotaRPKey as varchar(10)) + ' and SD_State is null'

		Set @Query = @Query+'
			--SELECT * FROM @ServiceKeys
			SET @CurrentDate=''' + CAST(@Q_DateBeg as varchar(20)) + '''
			SET @Long=DATEDIFF(DAY,''' + CAST(@Q_DateBeg as varchar(20)) + ''',''' + CAST(@Q_DateEnd as varchar(20)) + ''')+1
			SET @Error=0
			SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			WHILE @SK_Current is not null and @Error=0
			BEGIN
				SET @n1=1
				WHILE @n1<=@Long and @Error=0
				BEGIN
					SET @QP_ID=null
					SET @n2=0
					WHILE (@QP_ID is null) and @n2<2
					BEGIN
						DECLARE @DATETEMP datetime
						SET @DATETEMP = GetDate()
						if exists (select SS_ParmValue from systemsettings where SS_ParmName=''SYSCheckQuotaRelease'' and SS_ParmValue=1)
							SET @DATETEMP=''01-JAN-1900''
						IF @prev=1'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 and QP_Durations=@durations_prev and QD_Release=@release_prev
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)			
								ORDER BY ISNULL(QD_Release,0) DESC
			ELSE'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,0)
								ORDER BY ISNULL(QD_Release,0) DESC

							SET @n2=@n2+1
						IF @QP_ID is null
							SET @prev=1				
						ELSE
							UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@CurrentDate)	
					END
					If @QP_ID is null
						SET @Error=1
					SET @n1=@n1+1
				END
				IF @Error=0
					UPDATE ServiceByDate SET SD_State=' + CAST(@Q_Type as varchar(1)) + ', SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +')
						WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +'=@SK_Current and SD_State is null
				SET @SK_Current=null	
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END'
--	print @Query
	exec (@Query)

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END
UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
GO
GRANT EXECUTE ON [dbo].[DogListToQuotas] TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CheckQuotaExist]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CheckQuotaExist] 
GO
CREATE PROCEDURE [dbo].[CheckQuotaExist]
(
--<VERSION>2008.1.03.13a</VERSION>
	@SVKey int,
	@Code int,
	@SubCode1 int,
	@DateBeg datetime, 
	@DateEnd datetime,
	@DateFirst datetime,
	@PRKey int,
	@AgentKey int,
	@TourDuration smallint,
	@FilialKey int,				--пока не обрабатывается 
	@CityDepartment int,		--пока не обрабатывается 
	--возвращаемые параметры
	--при наличии Stop-Sale возвращаем

--	Убрал, не нужны более
--	@StopExist int output, --ключ стопа
--	@StopDate smalldatetime output, --дата стопа 

	--переехали из [CheckQuotaInfo]
	@TypeOfResult smallint =null,			
	/*	тип результата 
			0-возвращение полной таблицы данных (без фильтров) используется в экране проверки мест, 
			1-информация о первой подходящей квоте, 
			2-максимальное доступное число мест по всем квотам */	
	@Pax smallint =null,					--кол-во туристов по услуге
	--возвращаемые параметры, в случае @TypeOfResult=2 (попытка проверить возможность постановки услуги на квоту)
	@Wait smallint =null, --в случае не надо снимать квоту,
	@Quota_CheckState smallint =null output,
	/*	0 - RQ (можно бронировать только под запрос)
		1 - OK (можно посадить на квоту)
		2 - STOP (стоп, мест на сущ.квотах недостаточно)
		3 - RELEASE (стопа нет, есть релиз, мест на сущ.квотах недостаточно)	*/
	@Quota_CheckDate smalldatetime =null output,
	/*  если @Quota_Check=2, то в этом поле дата на которую стоит стоп */
	@Quota_CheckInfo smallint =null output,
	/*  если @Quota_Check in (0,3), то в этом поле сколько мест не хватает */

	--возвращаемые параметры, в случае @TypeOfResult=1 (возвращаем характеристики оптимальной квоты)
	@Quota_Count int =null output,
	@Quota_AgentKey int =null output,
	@Quota_Type smallint =null output,
	@Quota_ByRoom bit =null output,
	@Quota_PRKey int =null output, 
	@Quota_FilialKey int =null output,
	@Quota_CityDepartments int =null output,
	@Quota_Duration smallint =null output,
	@Quota_SubCode1 int =null output,
	@Quota_SubCode2 int =null output
	
) AS

/*
insert into Debug (db_Text) values ('@SVKey= '+CAST(@SVKey as varchar(10))+'
'+'@Code= '+CAST(@Code as varchar(10))+'
'+'@SubCode1= '+CAST(@SubCode1 as varchar(10))+'
'+'@DateBeg= '+CAST(@DateBeg as varchar(10))+'
'+'@DateEnd= '+CAST(@DateEnd as varchar(10))+'
'+'@DateFirst= '+CAST(@DateFirst as varchar(10))+'
'+'@PRKey= '+CAST(@PRKey as varchar(10))+'
'+'@AgentKey= '+CAST(@AgentKey as varchar(10))+'
'+'@TourDuration= '+CAST(@TourDuration as varchar(10))
)
*/
if (@Wait=1 AND @TypeOfResult=2)
BEGIN
	set @Quota_CheckState=0
	return 0
end
declare @quoted smallint
select @quoted = isnull(SV_Quoted, 0) from Service where SV_Key = @SVKEY
if (@quoted = 0)
BEGIN
	set @Quota_CheckState=1
	return 0
end
Set @DateFirst=ISNULL(@DateFirst,@DateBeg)
--declare @StopExist int, @StopDate smalldatetime
--Проверка отсутствия Стопа
declare @StopExist int, @StopDate smalldatetime

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	exec CheckStopInfo 1,null,@SVKey,@Code,@SubCode1,@PRKey,@DateBeg,@DateEnd,@StopExist output,@StopDate output

declare @Q_QTID int, @Q_Partner int, @Q_ByRoom int, @Q_Type int, @Q_Release int, 
		@Q_FilialKey int, @Q_CityDepartments int, @Q_AgentKey int, @Q_Duration smallint,
		@Q_Places smallint, @ServiceWithDuration bit, @SubQuery varchar(5000), @Query varchar(5000),
		@Q_SubCode1 int, @Q_SubCode2 int, @Q_QTID_Prev int, @DaysCount int

SET @DaysCount=DATEDIFF(DAY,@DateBeg,@DateEnd)+1
SET @Q_QTID_Prev=0

SELECT @ServiceWithDuration=ISNULL(SV_IsDuration,0) FROM [Service] WHERE SV_Key=@SVKey
IF @ServiceWithDuration=1
	SET @TourDuration=DATEDIFF(DAY,@DateBeg,@DateEnd)+1

IF @SVKey=3
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and HR_Key=@SubCode1 and (QO_SubCode1=HR_RMKey or QO_SubCode1=0) and (QO_SubCode2=HR_RCKey or QO_SubCode2=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
ELSE
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts
		where	
			QO_SVKey=@SVKey and QO_Code=@Code and (QO_SubCode1=@SubCode1 or QO_SubCode1=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
open CheckQuotaExistСursor
fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
									@Q_Type, 
									@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
									@Q_SubCode1, @Q_SubCode2

CREATE TABLE #Tbl (	TMP_Count int, TMP_QTID int, TMP_AgentKey int, TMP_Type smallint, TMP_Date datetime, 
					TMP_ByRoom bit, TMP_Release smallint, TMP_Partner int, TMP_Durations varchar(25), TMP_FilialKey int, 
					TMP_CityDepartments int, TMP_SubCode1 int, TMP_SubCode2 int)

CREATE TABLE #StopSaleTemp
(SST_Code int, SST_SubCode1 int, SST_SubCode2 int, SST_QOID int, SST_PRKey int, SST_Date smalldatetime,
SST_QDID int, SST_Type smallint, SST_State smallint, SST_Comment varchar(255)
)

While (@@fetch_status = 0)
BEGIN
	IF @Q_QTID_Prev!=@Q_QTID
	BEGIN
		DELETE FROM #StopSaleTemp
		INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails
						NULL, @Q_QTID, @DateBeg, @DaysCount, null, null, @SVKey, @Code, @SubCode1, @PRKey
	END
/*
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @Q_QTID, @DaysCount, 670)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SVKey, @Code, 671)
	insert into Debug (db_date, db_n1, db_n2, db_n3) values (@DateBeg, @SubCode1, @PRKey, 672)
*/
	SET @SubQuery = 'QD_QTID=QT_ID and QP_QDID = QD_ID 
		and QT_ID=' + CAST(@Q_QTID as varchar(10)) + '
		and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(1)) + ' and QD_Type=' + CAST(@Q_Type as varchar(1)) + ' 
		and QO_SVKey=' + CAST(@SVKey as varchar(10)) + ' and QO_Code=' + CAST(@Code as varchar(10)) + ' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10)) + ' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10)) + '	
		and (QD_Date between ''' + CAST((@DateBeg) as varchar(20)) + ''' and ''' + CAST(@DateEnd as varchar(20)) + ''') and QD_IsDeleted is null'

	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 
	--QP_Durations=' + CAST(@Q_Durations as varchar(10))
	IF @Q_Partner =''
		SET @SubQuery = @SubQuery + ' and QT_PRKey = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_Partner as varchar(10))

	declare @SubCode2 int
	--if @SVKey=3
	--	SELECT @SubCode1=HR_RMKey, @SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
	SET @Query = 
	'
	INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
						TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
						TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2)
		SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
				QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
				QP_CityDepartments, QO_SubCode1, QO_SubCode2
		FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
		WHERE	QO_ID=SST_QOID and QD_ID=SST_QDID and SST_State is null and ' + @SubQuery

		--and QD_Date > GetDate()+ISNULL(QD_Release,0)'
	--print @Query

	exec (@Query)
	
	SET @Q_QTID_Prev=@Q_QTID
	fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
										@Q_Type, 
										@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
										@Q_SubCode1, @Q_SubCode2	
END

--DELETE FROM #Tbl WHERE 

DELETE FROM #Tbl WHERE exists 
		(SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
		WHERE	QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=TMP_Type and QT_ByRoom=TMP_ByRoom
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QT_ID=TMP_QTID
				and ISNULL(QP_FilialKey,-1)=ISNULL(TMP_FilialKey,-1) and ISNULL(QP_CityDepartments,-1)=ISNULL(TMP_CityDepartments,-1)
				and ISNULL(QP_AgentKey,-1)=ISNULL(TMP_AgentKey,-1) and ISNULL(QT_PRKey,-1)=ISNULL(TMP_Partner,-1)
				and QP_Durations=TMP_Durations and ISNULL(QD_Release,-1)=ISNULL(TMP_Release,-1)
				and QD_Date=@DateFirst and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))

close CheckQuotaExistСursor
deallocate CheckQuotaExistСursor
--самая важная часть, ПОРЯДОК выбора квоты
--эта часть должна быть доработана
/*
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote')
	SELECT @vLimitAgentQuote = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote'
IF EXISTS(SELECT * FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong')
	SELECT @vLimitQuoteLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
SELECT @nQtLong = ISNULL(SS_ParmValue, '0') FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong'
*/

DECLARE @Tbl_DQ Table 
 		(TMP_Count smallint, TMP_AgentKey int, TMP_Type smallint, TMP_ByRoom bit, 
				TMP_Partner int, TMP_Duration smallint, TMP_FilialKey int, TMP_CityDepartments int,
				TMP_SubCode1 int, TMP_SubCode2 int, TMP_ReleaseIgnore bit)

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
if exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
	SET @DATETEMP='01-JAN-1900'
INSERT INTO @Tbl_DQ
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,0 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		WHERE	TMP_Date >= @DATETEMP+ISNULL(TMP_Release,0)
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1
	UNION
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2,1 as TMP_ReleaseIgnore FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2
		FROM	#Tbl
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1

/*
Комментарии к запросу выше!!!
Заполняем таблицу квот, которые могут нам подойти (группируя квоты по всем разделяемым параметрам, кроме релиз-периода
Все строки в таблице дублируются (важно! 11-ый параметр): 
	квоты с учетом релиз-периода (0) --TMP_ReleaseIgnore
	квоты без учета релиз-периода (1)--TMP_ReleaseIgnore
При выводе всех доступных квот требуется отсекать строки без учета релиз-периода и с количеством мест <=0 
*/

DECLARE @IsCommitmentFirst bit
IF Exists (SELECT SS_ID FROM dbo.SystemSettings WHERE SS_ParmName='SYS_Commitment_First' and SS_ParmValue='1')
	SET @IsCommitmentFirst=1

If @TypeOfResult is null or @TypeOfResult=0
BEGIN
	IF @IsCommitmentFirst=1
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	ELSE
		select * from @Tbl_DQ order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
END

DECLARE @Priority int;
SELECT @Priority=QPR_Type FROM   QuotaPriorities 
WHERE  QPR_Date=@DateFirst and QPR_SVKey = @SVKey and QPR_Code=@Code and QPR_PRKey=@PRKey

IF @Priority is not null
	SET @IsCommitmentFirst=@Priority-1

If @TypeOfResult=1 --(возвращаем характеристики оптимальной квоты)
BEGIN
	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		IF @Quota_Type=1 or @IsCommitmentFirst=1
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
		ELSE
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	END
END

If @TypeOfResult=2 --(попытка проверить возможность постановки услуги на квоту)
BEGIN
	DECLARE @Places_Count int, @Rooms_Count int,		 --доступное количество мест/номеров в квотах
			@PlacesNeed_Count smallint,					-- количество мест, которых недостаточно для оформления услуги
			@RowCountActual smallint, @RowCountReleaseIgnore smallint

	SELECT @RowCountReleaseIgnore=Count(1) FROM @Tbl_DQ
	DELETE FROM @Tbl_DQ WHERE TMP_ReleaseIgnore=1
 	SELECT @RowCountActual=Count(1) FROM @Tbl_DQ

	If exists (SELECT * FROM @Tbl_DQ)
	BEGIN
		SET @PlacesNeed_Count=0		
		select	@Places_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=0
		If @SVKey=3
			select	@Rooms_Count=SUM(TMP_Count) from	@Tbl_DQ  where	TMP_Count>0 and TMP_ByRoom=1

		Set @Places_Count=ISNULL(@Places_Count,0)
		Set @Rooms_Count=ISNULL(@Rooms_Count,0)
	
		--проверяем достаточно ли будет текущего кол-ва мест для бронирования
		declare @nPlaces smallint, @nRoomsService smallint
		If @SVKey=3 and @Rooms_Count>0
		BEGIN
			--insert into Debug (db_n1) values (233)--
			exec GetServiceRoomsCount @Code, @SubCode1, @Pax, @nRoomsService output
			If @nRoomsService>@Rooms_Count
				Set @PlacesNeed_Count=@nRoomsService-@Rooms_Count
		END
		ELSE
			If @Pax>@Places_Count
				Set @PlacesNeed_Count=@Pax-@Places_Count

		If @PlacesNeed_Count <= 0 --мест в квоте хватило
			Set @Quota_CheckState=1						--Возвращаем "Ok (квоты есть)"
	END
	
	If @Quota_CheckState=0 or @Quota_CheckState is null
	BEGIN
		If @StopExist>0	--и установлен STOP 
		BEGIN
			Set @Quota_CheckState=2						--Возвращаем "Внимание STOP"
			Set @Quota_CheckDate=@StopDate
		END
		Else
		BEGIN
			If @RowCountActual<@RowCountReleaseIgnore
				Set @Quota_CheckState=3						--Возвращаем "Release" (мест не достаточно, но наступил РЕЛИЗ-Период)
			ELSE
				Set @Quota_CheckState=0						--Возвращаем "RQ" (дальше требуется расширять AUTOSTOP)
			Set @Quota_CheckInfo=@PlacesNeed_Count
		END
	END
END
GO
GRANT EXECUTE ON [dbo].[CheckQuotaExist] TO PUBLIC 
GO


if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_SumNettoPlan')
	alter table dbo.Communications add CM_SumNettoPlan money
GO
if not exists(select id from syscolumns where id = OBJECT_ID('Communications') and name = 'CM_SumNettoProvider')
	alter table dbo.Communications add CM_SumNettoProvider money
GO
update dbo.Communications set CM_SumNettoPlan=(SELECT SUM(ISNULL(DL_Cost,0)) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey) WHERE CM_SumNettoPlan is null
GO
update dbo.Communications set CM_SumNettoProvider=(SELECT SUM(ISNULL(DL_RealNetto,0)) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey) WHERE CM_SumNettoProvider is null
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.22.3</VERSION>
--<DATE>2009-03-25</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					set @nDGSorCode_New = 7				--ОК
					IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
					BEGIN
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
						BEGIN
							set @nDGSorCode_New = 3			--Wait-List
							set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
						END
					END
					IF @nDGSorGlobalCode_New!=3 
						IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
						BEGIN
							set @nDGSorCode_New = 4			--Не подтвержден
							set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
						END

					if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
					BEGIN
						update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
					END

					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
				
			END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CorrectBusyQuotes]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CorrectBusyQuotes]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS OFF 
GO

CREATE procedure [dbo].[CorrectBusyQuotes]
as
--<DATE>2008-11-25</DATE>
---<VERSION>8.1.1</VERSION>
DECLARE @rooms int, @quotas int, @qp_id int, @qd_id int, @qd_busy int
DECLARE cur_BusyRooms CURSOR FOR 
		Select count(distinct rl_id) as Rooms, qp_busy as Quotas, qp_id, qd_id, qd_busy
		from RoomNumberLists, ServiceByDate, QuotaParts, QuotaDetails, Quotas
		where sd_qpid = qp_id and sd_rlid = rl_id and sd_state = qd_type and qp_qdid = qd_id and qt_id = qd_qtid and qt_byroom = 1
		group by qp_id, qp_busy, qd_id, qd_busy
		having count(distinct rl_id) < qp_busy
		UNION
		Select count(distinct sd_id) as Rooms, qp_busy as Quotas, qp_id, qd_id, qd_busy
		from ServiceByDate, QuotaParts, QuotaDetails, Quotas
		where sd_qpid = qp_id and sd_state = qd_type and qp_qdid = qd_id and qt_id = qd_qtid and qt_byroom = 0
		group by qp_id, qp_busy, qd_id, qd_busy
		having count(distinct sd_id) < qp_busy
OPEN cur_BusyRooms
	FETCH NEXT FROM cur_BusyRooms
		INTO @rooms, @quotas, @qp_id, @qd_id, @qd_busy
	WHILE @@FETCH_STATUS = 0
	BEGIN
		update QuotaParts set qp_busy = @rooms where qp_id = @qp_id
		update QuotaDetails set qd_busy = @qd_busy - (@quotas - @rooms) where qd_id = @qd_id
--		declare @oldDetDusy int;
--		set @oldDetDusy = (Select qd_busy from QuotaDetails where qd_id = @qd_id)
--		print 'old det busy' + CAST(@oldDetDusy as varchar(10))
--		print 'new det busy' + CAST(@qd_busy - (@quotas - @rooms) as varchar(10))
--		declare @oldPartDusy int;
--		set @oldPartDusy = (Select qp_busy from QuotaParts where qp_id = @qp_id)
--		print 'old part busy' + CAST(@oldPartDusy as varchar(10))
--		print 'new part busy' + CAST(@rooms as varchar(10))
--		print '--'
		FETCH NEXT FROM cur_BusyRooms
			INTO @rooms, @quotas, @qp_id, @qd_id, @qd_busy
	END
CLOSE cur_BusyRooms
DEALLOCATE   cur_BusyRooms
GO
GRANT EXEC ON [dbo].[CorrectBusyQuotes] TO PUBLIC
GO

-- sp_MakeFullSVName.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MAKEFULLSVNAME]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[MakeFullSVName]
GO
CREATE    PROCEDURE [dbo].[MakeFullSVName]
(
--<VERSION>2005.2.41 (2007.2.17)</VERSION>
	@nCountry INT,
	@nCity INT,
	@nSvKey INT,
	@nCode INT,
	@nNDays INT,
	@nCode1 INT,
	@nCode2 INT,
	@nPartner INT,
	@dServDate DATETIME,
	@sServiceByHand VARCHAR(800),	
	@sResult VARCHAR(800) OUTPUT,
	@sResultLat VARCHAR(800) OUTPUT,
	@dTimeBeg DateTime =null OUTPUT,
	@dTimeEnd DateTime =null OUTPUT
) AS
	DECLARE @nTempNumber INT

	DECLARE @sName VARCHAR(800)
	DECLARE @sNameLat VARCHAR(800)
	DECLARE @sText VARCHAR(800)
	DECLARE @sTextLat VARCHAR(800)
	DECLARE @sTempString VARCHAR(800)
	DECLARE @sTempStringLat VARCHAR(800)

	DECLARE @nMain INT
	DECLARE @nAgeFrom INT
	DECLARE @nAgeTo INT

/*
       	DECLARE @n INT
	DECLARE @sSelect VARCHAR(800)
	DECLARE @sTempString2 VARCHAR(800)
	DECLARE @sTempString3 VARCHAR(800)

	DECLARE @nTmp INT
	DECLARE @sTmp VARCHAR(800)
*/
	DECLARE 
	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT,
	@bIsCruise INT

	DECLARE @sTextCity VARCHAR(800)
	DECLARE @sTextCityLat VARCHAR(800)
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
	Set @bIsCruise = 0
	Set @dTimeBeg=null
	Set @dTimeEnd=null

	Set @nTempNumber = 1
	EXEC dbo.GetServiceName @nSvKey, @nTempNumber, @sName output, @sNameLat output

	If @sName != ''
		Set @sName = @sName + '::'
	If @sNameLat != ''
		Set @sNameLat = @sNameLat + '::'

	If @nSvKey = @TYPE_FLIGHT
	BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode2>0
			SELECT  @sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCode2
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = isnull(@sServiceByHand, '')
		Set @sTextLat = isnull(@sServiceByHand, '')	

		-- День недели в формате 1 - пон, 7 - вс
		Declare @nday int
		Set @nday = DATEPART(dw, @dServDate)  + @@DATEFIRST - 1
		If @nday > 7 
	    		set @nday = @nday - 7
	
		If @nCode>0
		BEGIN
			SELECT	@sText = isnull(CH_AirLineCode, '') + CH_Flight + ', ' + isnull(CH_PortCodeFrom, '') + '-' + isnull(CH_PortCodeTo, ''),
					@sTextLat = isnull(CH_AirLineCode, '') + CH_Flight + ', ' + isnull(CH_PortCodeFrom, '') + '-' + isnull(CH_PortCodeTo, '')
			FROM 	dbo.Charter
			WHERE 	CH_Key=@nCode

			SELECT	TOP 1 
					@dTimeBeg=AS_TimeFrom,
					@dTimeEnd=AS_TimeTo
			FROM 	dbo.AirSeason
			WHERE 	AS_CHKey=@nCode 
					and CHARINDEX(CAST(@nday as varchar(1)),AS_Week)>0
					and @dServDate between AS_DateFrom and AS_DateTo
			ORDER BY AS_TimeFrom DESC
			IF @dTimeBeg is not null and @dTimeEnd is not null
			BEGIN
				Set @sText=@sText+', '+LEFT(CONVERT(varchar, @dTimeBeg, 8),5) + '-' + LEFT(CONVERT(varchar, @dTimeEnd, 8),5)
				Set @sTextLat=@sTextLat+', '+LEFT(CONVERT(varchar, @dTimeBeg, 8),5) + '-' + LEFT(CONVERT(varchar, @dTimeEnd, 8),5)
			END
		END
		
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode1>0
			SELECT	@sText = isnull(AS_Code, '') + ' ' + isnull(AS_NameRus, ''),
				@sTextLat = isnull(AS_Code, '') + ' ' + isnull(AS_NameLat, AS_NameRus)
			FROM 	dbo.AirService 
			WHERE 	AS_Key = @nCode1
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
	END
	ELSE If (@nSvKey = @TYPE_HOTEL or @nSvKey = @TYPE_HOTELADDSRV)
	BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sTextCity = CT_Name,
				@sTextCityLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity		      

		Set @sText = isnull(@sServiceByHand, '')

		If @nCode>0
		      	SELECT	@sText = isnull(HD_Name,'') + '-' + isnull(HD_Stars, ''), @bIsCruise = HD_IsCruise 
			FROM 	dbo.HotelDictionary 
			WHERE	HD_Key = @nCode
		Set @sTextLat = @sText
		If @bIsCruise = 1
			If @nSvKey = @TYPE_HOTEL
			BEGIN
				Set @sName = 'Круиз::'
				Set @sNameLat = 'Cruise::'
			END
			Else If @nSvKey = @TYPE_HOTELADDSRV
				Set @sName = 'ADCruise::'

		Set @sName = @sName + @sTextCity + '/'  + @sText
		Set @sNameLat = @sNameLat + @sTextCityLat + '/' + @sTextLat

		If @nNDays>0
		BEGIN
			Set @nTempNumber = 0
			EXEC dbo.SetNightString @nNDays, @nTempNumber, @sTempString output, @sTempStringLat output
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (4)), '') + ' ' + @sTempString
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (4)), '') + ' ' + @sTempStringLat
		END
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '

/*
		SELECT  @sText = RM_Name + ',' + RC_Name + ',' + isnull(AC_Code, ''), 
			@sTextLat = isnull(RM_NameLat,RM_Name) + ',' + isnull(RC_NameLat,RC_Name) + ',' + isnull(AC_Code, ''),
			@nMain = AC_Main, 
			@nAgeFrom = AC_AgeFrom, 
			@nAgeTo = AC_AgeTo 
		FROM 	dbo.HotelRooms,dbo.Rooms,dbo.RoomsCategory,dbo.AccmdMenType 
		WHERE	HR_Key = @nCode1 and RM_Key = HR_RmKey and RC_Key = HR_RcKey and AC_Key = HR_AcKey
				
		If @nMain > 0
		BEGIN
			Set @sText = @sText + ',Осн'
			Set @sTextLat = @sTextLat + ',Main'
		END
		ELSE
		BEGIN
			Set @sText = @sText + ',доп.'
			Set @sTextLat = @sTextLat + ',ex.b'
			If @nAgeFrom >= 0
			BEGIN
	       	        	     Set @sTempString = '(' + isnull(cast(@nAgeFrom as varchar (10)), '')  + '-' +  isnull(cast(@nAgeTo as varchar(10)), '')  + ')'
       			             Set @sText = @sText + @sTempString
       			             Set @sTextLat = @sTextLat + @sTempString
			END
		END
*/

	      	EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
       		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'

		Set @sText = '  '
              	EXEC dbo.GetSvCode2Name @nSvKey, @nCode2, @sTempString output, @sTempStringLat output
             
             	Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
	END
	ELSE If (@nSvKey = @TYPE_EXCUR or @nSvKey = @TYPE_TRANSFER)
	BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity	
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = isnull(@sServiceByHand, '')
		Set @sTextLat = isnull(@sServiceByHand, '')
		If @nCode>0
			If @nSvKey = @TYPE_EXCUR
				SELECT 	@sText = ED_Name +', ' + isnull(ED_Time, ''),
					@sTextLat = isnull(ED_NameLat,ED_Name) +', ' + isnull(ED_Time, '')
				FROM	dbo.ExcurDictionary 
				WHERE	ED_Key = @nCode
			ELSE
				SELECT 	@sText = TF_Name + ', ' + isnull (Left (Convert (varchar, TF_TimeBeg, 8), 5), '')  + ', ' + isnull(TF_TIME, ''),
					@sTextLat = isnull(TF_NameLat,TF_Name) + ', ' + isnull (Left (Convert (varchar, TF_TimeBeg, 8), 5), '')  + ', ' + isnull(TF_TIME, '')  
				FROM	dbo.Transfer 
				WHERE	TF_Key = @nCode
		Set @sName = @sName + @sText +  '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode1>0
			SELECT 	@sText = TR_Name + (case  when (TR_NMen>0)  then (','+ CAST ( TR_NMen  AS VARCHAR(10) )+ ' чел.')  else ' ' end),
				@sTextLat = isnull(TR_NameLat,TR_Name) + (case  when (TR_NMen>0)  then (','+ CAST ( TR_NMen  AS VARCHAR(10) )+ ' pax.')  else ' ' end) 
			FROM	dbo.Transport  
			WHERE	TR_Key = @nCode1
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
	END
	ELSE If (@nSvKey = @TYPE_SHIP or @nSvKey = @TYPE_SHIPADDSRV)
	BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCountry>0
	                        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	Country 
				WHERE	CN_Key = @nCountry
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
		
		Set @sText = isnull(@sServiceByHand, '')
		If @nCode>0
		      	SELECT	@sText = SH_Name + '-' + isnull(SH_Stars, '') 
			FROM	dbo.Ship 
			WHERE	SH_Key = @nCode
		Set @sTextLat = @sText
				
		Set @sName = @sName + @sText
		Set @sNameLat = @sNameLat + @sTextLat
		
		If @nNDays>0
		BEGIN
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (10)), '') + ' ' + 'дней'
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (10)), '') + ' ' + 'days'
		END					
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		
	      	EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'

		Set @sText = '  '
              	EXEC dbo.GetSvCode2Name @nSvKey, @nCode2, @sTempString output, @sTempStringLat output
		
		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
	END
	ELSE
	BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		Set @sTempString = 'CITY'
		EXEC dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output
		
		If @nTempNumber>0
		BEGIN
			If @nCity>0
				SELECT 	@sText = CT_Name,
					@sTextLat = isnull(CT_NameLat, CT_Name)
				FROM	dbo.CityDictionary 
				WHERE	CT_Key = @nCity	
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
		END
		ELSE
		BEGIN
			If @nCountry>0
	                        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	Country 
				WHERE	CN_Key = @nCountry
			Else If @nCode>0
	             	        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	dbo.ServiceList, Country 
				WHERE	SL_Key = @nCode and CN_Key = SL_CnKey
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
		END
		Set @sText = @sServiceByHand
		Set @sTextLat = @sServiceByHand
		If @nCode>0
		BEGIN
/*
			if @nSvKey = @TYPE_HOTELADDSRV
			BEGIN
				SELECT	@sText = HD_Name + '-' + isnull(HD_Stars, '') 
				FROM	dbo.HotelDictionary 
				WHERE	HD_Key = @nCode
				Set @sTextLat = @sText
			END
			ELSE if @nSvKey = @TYPE_SHIPADDSRV
			BEGIN
				SELECT	@sText = SH_Name + '-' + isnull(SH_Stars, '') 
				FROM	dbo.Ship
				WHERE	SH_Key = @nCode
				Set @sTextLat = @sText
			END
			ELSE 
*/
		    	SELECT	@sText = SL_Name,
				@sTextLat = isnull(SL_NameLat, SL_Name)
			FROM	dbo.ServiceList
			WHERE	SL_Key = @nCode
		END
		Set @sName = @sName + @sText
		Set @sNameLat = @sNameLat + @sTextLat

		If @nNDays>0
		BEGIN
			Set @nTempNumber = 1
			exec SetNightString @nNDays, @nTempNumber, @sTempString output, @sTempStringLat output
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (10)), '')  + ' ' + @sTempString
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (10)), '')  + ' ' + @sTempStringLat
		END
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		Set @sTempString = 'CODE1'
		exec dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output

		If @nTempNumber>0
		BEGIN
			If @nCode1>0 and (@nSvKey != @TYPE_HOTELADDSRV or @nSvKey != @TYPE_SHIPADDSRV)
				SELECT	@sText = A1_Name,
					@sTextLat = isnull(A1_NameLat, A1_Name)
				FROM	dbo.AddDescript1
				WHERE	A1_Key = @nCode1
			ELSE
			BEGIN
				EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
				set @sText = @sTempString
				set @sTextLat = @sTempStringLat
			END
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
			Set @sTempString = 'CODE2'
			exec dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output

			If @nTempNumber>0
			BEGIN
				If @nCode2>0
				SELECT	@sText = A2_Name,
					@sTextLat = isnull(A2_NameLat, A2_Name)
				FROM	dbo.AddDescript2
				WHERE	A2_Key = @nCode2
				Set @sName = @sName + @sText + '/'
				Set @sNameLat = @sNameLat + @sTextLat + '/'
			END
		END
	END
	Set @sResult = @sName
	Set @sResultLat = @sNameLat
GO
GRANT EXECUTE ON dbo.MakeFullSVName TO PUBLIC 
GO
-- (27032009)AlterTableDogovorMessages.sql
if not exists (select * from dbo.syscolumns where name = 'DM_Details' and id = object_id(N'[dbo].[dogovormessages]'))
	alter table dogovormessages add DM_Details varchar(3) 
GO
IF exists(Select * from sysviews where name = 'IL_Messages' and CREATOR = 'DBO')
	DROP VIEW dbo.IL_Messages
GO
CREATE VIEW dbo.IL_Messages AS 
    SELECT	DM_ID AS IM_Key,
			DM_IsOutgoing as IM_Type,
			DM_DGKey as IM_DGKey,
			DM_TypeCode as IM_DLKey,
			DM_Remark AS IM_DGCode,
			DM_Processed AS IM_Processed,
			DM_CreateDate AS IM_Date,
			DM_Text as IM_Text,
			DM_Details as IM_Details
	FROM	[dbo].[DogovorMessages]
WITH CHECK OPTION
GO
grant select ,insert, delete,update on  [dbo].[IL_Messages] to public 
GO
-- 090327(AddSystemSetting).sql 
if (select count(*) from SystemSettings where SS_ParmName = 'NATIONAL_CURRENCY_EXPIRE') > 0
begin
	print 'В таблице SystemSettings уже существует запись с SS_ParmName = ''NATIONAL_CURRENCY_EXPIRE'''
end
else
begin
	insert into SystemSettings
	(SS_ParmName, SS_ParmValue)
	values
	('NATIONAL_CURRENCY_EXPIRE', '7')
end
GO
--090330(AlterTable_ServiceLink).sql
if not exists (select * from dbo.syscolumns where name = 'LS_TourLong' and id = object_id(N'[dbo].[ServiceLink]'))
	alter table ServiceLink add LS_TourLong int
GO
--090324(AddColumnsToDogovor).sql
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[tbl_dogovor]') and name = 'DG_NATIONALCURRENCYPRICE')
begin
	ALTER TABLE dbo.tbl_dogovor ADD DG_NATIONALCURRENCYPRICE money NULL
end
else
begin
	print 'В таблице tbl_dogovor уже существует поле DG_NATIONALCURRENCYPRICE'
end
GO

if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[tbl_dogovor]') and name = 'DG_NATIONALCURRENCYDISCOUNTSUM')
begin
	ALTER TABLE dbo.tbl_dogovor ADD DG_NATIONALCURRENCYDISCOUNTSUM money NULL
end
else
begin
	print 'В таблице tbl_dogovor уже существует поле DG_NATIONALCURRENCYDISCOUNTSUM'
end
GO

exec sp_RefreshViewForAll 'Dogovor'
GO
-- sp_InsDogovor.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsDogovor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.InsDogovor
GO
CREATE procedure [dbo].[InsDogovor]
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (70) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@sOldDogovor varchar (10) = null		-- должен быть ПОСЛЕДНИМ !!!!! -- предыдущий номер договора, передается при переименовании путевки
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType)


	-- Begin Donskov 17.03.2009

	-- находим национальную валюту
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@sRate))
	begin
		-- проверяем, есть ли курс валюты в базе
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else
	begin
		set @rc_course = 1
		set @rc_courseStr = '1'
	end

	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	-- 1) пишем в хистори курс валюты
    -- 2) в созданную путёвку записываем стоимость в национальной валюте и скидку в национальной валюте
	--    (если присутствует соответствующий курс в базе)
	if @rc_course <> -1
	begin
		-- 1: пишем в хистори
		if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20) > 0
		begin
			delete from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20
		end

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'INS', 'DOGOVORCURRENCY', 20)

		-- 2: в созданную путёвку записываем стоимость и скидку в национальной валюте 
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @rc_course * @nPrice,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_Key = @nKeyDogovor
	end
	else
	begin
		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'INS', 'DOGOVORCURRENCYISNULL', 21)
	end
	-- End Donskov 17.03.2009

	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent
	Select @sValue = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseTimeLimit'
	if @sValue = '1'
		exec dbo.CreatePPaymentDate @sDogovor, @dTour, @dtCurrentDate

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0
GO

GRANT EXECUTE ON dbo.InsDogovor TO PUBLIC 
GO

-- sp_GetCurrentNationalCurrencyRate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetCurrentNationalCurrencyRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetCurrentNationalCurrencyRate]
GO
CREATE PROCEDURE [dbo].[GetCurrentNationalCurrencyRate]
@dogovor_code varchar(100),
@currency varchar(5),
@national_currency_rate money output
AS
BEGIN
	set @national_currency_rate = null

	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1


	declare @course money
	declare @current_currency varchar(5)
	set @course = -1

	select top 1 @course = cast(isnull(HI_TEXT, -1) as money), @current_currency = HI_REMARK from History
	where HI_DGCOD = @dogovor_code and HI_OAId=20 order by HI_DATE desc

	if @national_currency = @currency
	begin
		set @national_currency_rate = 1
	end
	else if @current_currency = @currency and @course <> -1
	begin
		set @national_currency_rate = @course
	end
	else
	begin
		declare @rc_course money
		set @rc_course = -1
		select top 1 @rc_course =  cast(isnull(RC_COURSE, -1) as money) from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)

		if @rc_course <> -1
		begin
			set @national_currency_rate = @rc_course
		end
		else
		begin
			set @national_currency_rate = null
		end
	end
END

return 0
GO
GRANT EXECUTE ON [dbo].[GetCurrentNationalCurrencyRate] TO PUBLIC 
GO
-- 090301(DeleteFromUserSettings).sql
delete from UserSettings where ST_ParmName like '%VisaTouristForm.visaTouristServicesGrid%'
go

delete from UserSettings where ST_ParmName like '%DogovorMainForm.visaTouristServicesGrid%'
go
-- 090402(AlterTable_RoomCategory).sql
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='RoomsCategory' and COLUMN_NAME='RC_NAME') < 60) 
	alter table RoomsCategory alter column RC_NAME varchar(60) null
GO

if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='RoomsCategory' and COLUMN_NAME='RC_NAMELAT') < 60) 
	alter table RoomsCategory alter column RC_NAMELAT varchar(60) null
GO

if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='RoomsCategory' and COLUMN_NAME='RC_CODE') < 40) 
	alter table RoomsCategory alter column RC_CODE varchar(40) null
GO
-- 090324(AddObjectAliases).sql
if (select count(*) from ObjectAliases where OA_Id = 20) > 0
begin
     print 'В таблице ObjectAliases уже существует запись с OA_Id = 20.'
end
else
begin
     insert into ObjectAliases
	 (OA_Id, OA_Alias, OA_Name, OA_TABLEID)
	 values
     (20, 'DG_NATIONALCURRENCYRATE', 'Курс валюты', 49)
end

if (select count(*) from ObjectAliases where OA_Id = 21) > 0
begin
     print 'В таблице ObjectAliases уже существует запись с OA_Id = 21.'
end
else
begin
     insert into ObjectAliases
	 (OA_Id, OA_Alias, OA_Name, OA_TABLEID)
	 values
     (21, 'DG_NULLNATIONALCURRENCYRATE', 'Отсутствие курса на момент создания путёвки', 49)
end

if (select count(*) from ObjectAliases where OA_Id = 22) > 0
begin
     print 'В таблице ObjectAliases уже существует запись с OA_Id = 22.'
end
else
begin
     insert into ObjectAliases
	 (OA_Id, OA_Alias, OA_Name, OA_TABLEID)
	 values
     (22, 'DG_NULLNATIONALCURRENCYRATECALCULATE', 'Пересчёт стоимости в национальной валюте', 49)
end
GO
-- 090403(Insert_SystemSettings).sql
if  not exists(select 1 from  SystemSettings where ss_parmname='SYSShowEndedContracts')
	insert into SystemSettings (SS_ParmName, SS_ParmValue) values('SYSShowEndedContracts', '1')
go
-- T_DogovorListUpdate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.22.3</VERSION>
--<DATE>2009-03-25</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int
  DECLARE @sDisableDogovorStatusChange varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				select @sDisableDogovorStatusChange = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSDisDogovorStatusChange'
				if (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
				begin
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
					Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
					IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
					BEGIN
						set @nDGSorCode_New = 7				--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
						BEGIN
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
							BEGIN
								set @nDGSorCode_New = 3			--Wait-List
								set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
							END
						END
						IF @nDGSorGlobalCode_New!=3 
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
							BEGIN
								set @nDGSorCode_New = 4			--Не подтвержден
								set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
							END

						if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
						BEGIN
							update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
						END
					end

					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
				
			END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO
-- 090403(Insert_SystemSettings2.sql).sql
if  not exists(select 1 from  SystemSettings where ss_parmname='SYSDisDogovorStatusChange')
	insert into SystemSettings (SS_ParmName, SS_ParmValue) values('SYSDisDogovorStatusChange', '0')
go
-- 090406(AddSystemSetting).sql
if (select count(*) from SystemSettings where SS_ParmName = 'RECALC_NATIONAL_PRICE') > 0
begin
	print 'В таблице SystemSettings уже существует запись с SS_ParmName = ''RECALC_NATIONAL_PRICE'''
end
else
begin
	insert into SystemSettings
	(SS_ParmName, SS_ParmValue)
	values
	('RECALC_NATIONAL_PRICE', '0')
end
GO
-- sp_GetFinalPriceByNCRate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetFinalPriceByNCRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetFinalPriceByNCRate]
GO
CREATE PROCEDURE [dbo].[GetFinalPriceByNCRate]
@dogovor_code varchar(100),
@currency varchar(5),
@old_currency varchar(5),
@price money,
@old_price money,
@final_price money output,
@national_currency_rate money output
AS
BEGIN
	set @final_price = null
	set @national_currency_rate = null

	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @course money
	set @course = -1

	select top 1 @course = cast(isnull(HI_TEXT, -1) as money) from History
	where HI_DGCOD = @dogovor_code and HI_OAId=20 order by HI_DATE desc

	if @currency = @national_currency
	begin
		set @national_currency_rate = 1
		--set @final_price = @price
	end
	else if @currency = @old_currency and @course <> -1
	begin
		set @national_currency_rate = @course
		--set @final_price = @price * @national_currency_rate
	end
	else
	begin
		declare @rc_course money
		set @rc_course = -1
		select top 1 @rc_course =  cast(isnull(RC_COURSE, -1) as money) from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)

		if @rc_course <> -1
		begin
			set @national_currency_rate = @rc_course
		end
		else
		begin
			set @national_currency_rate = null
		end
	end

	if @national_currency_rate is not null
	begin
		set @final_price = @national_currency_rate * @price

		-- пересчитываем цену, если надо
		declare @tmp_final_price money
		set @tmp_final_price = null
		exec [dbo].[CalcPriceByNationalCurrencyRate] @dogovor_code, @currency, @old_currency, @national_currency, @price, @old_price, '', '', @tmp_final_price output, @national_currency_rate

		if @tmp_final_price is not null
		begin
			set @final_price = @tmp_final_price
		end
		--
	end
END
GO
GRANT EXECUTE ON [dbo].[GetFinalPriceByNCRate] TO PUBLIC 
GO
-- sp_NationalCurrencyPrice.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyPrice]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyPrice]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyPrice]
@sRate varchar(5), -- валюта пересчета
@sRateOld varchar(5), -- старая валюта
@sDogovor varchar(100), -- код договора
@nPrice money, -- новая цена в указанной валюте
@nPriceOld money, -- старая цена
@nDiscountSum money, -- новая скидка в указанной валюте
@sAction varchar(100) -- действие
AS
BEGIN
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'
	begin
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else if @sAction = 'RECALCULATE_BY_OLD_CURRENCY_RATE'
	begin
		set @rc_course = -1
		select top 1 @rc_courseStr = HI_TEXT from History
		where HI_DGCOD = @sDogovor and HI_OAId=20 order by HI_DATE desc
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end

	if @sRate = @national_currency
	begin
		set @rc_courseStr = '1'
		set @rc_course = 1
	end
	
	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	if @rc_course <> -1
	begin
		declare @final_price money
		set @final_price = @rc_course * @nPrice

		-- пересчитываем цену, если надо
		declare @tmp_final_price money
		set @tmp_final_price = null
		exec [dbo].[CalcPriceByNationalCurrencyRate] @sDogovor, @sRate, @sRateOld, @national_currency, @nPrice, @nPriceOld, @sHI_WHO, 'INSERT_TO_HISTORY', @tmp_final_price output, @rc_course

		if @tmp_final_price is not null
		begin
			set @final_price = @tmp_final_price
		end
		--

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'UPD', 'DOGOVORCURRENCY', 20)

		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @final_price,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_CODE = @sDogovor
	end
	else
	begin
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = null,
			DG_NATIONALCURRENCYDISCOUNTSUM = null
		where
			DG_CODE = @sDogovor

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'UPD', 'DOGOVORCURRENCYISNULL', 21)
	end
END
return 0
GO

GRANT EXECUTE ON [dbo].[NationalCurrencyPrice] TO PUBLIC 
GO
-- sp_CalcPriceByNationalCurrencyRate.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalcPriceByNationalCurrencyRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[CalcPriceByNationalCurrencyRate]
GO
CREATE PROCEDURE [dbo].[CalcPriceByNationalCurrencyRate]
@dogovor_code varchar(50),
@currency varchar(5),
@old_currency varchar(5),
@national_currency varchar(5),
@price money,
@old_price money,
@who varchar(500),
@action varchar(50),
@final_price money output,
@new_currency_rate money
as
begin
	set @final_price = null

	declare @sys_setting varchar(5)
	set @sys_setting = null
	select @sys_setting = SS_ParmValue from SystemSettings where SS_ParmName = 'RECALC_NATIONAL_PRICE'

	declare @order_status smallint
	declare @difference money

	select @order_status = DG_SOR_CODE, @difference = DG_PAYED - @old_price from tbl_Dogovor where DG_CODE = @dogovor_code

	declare @flag smallint
	set @flag = 0

	if @sys_setting = '1'
	begin
		if @currency <> @national_currency and
			@currency = @old_currency and
			@order_status in (7)
			and @difference >= 0
		begin
			set @flag = 1
		end
	end
	else
	begin
		declare @global_order_status smallint
		select @global_order_status = OS_GLOBAL from order_status where OS_CODE = @order_status

		if @currency <> @national_currency and
			@currency = @old_currency and
			@global_order_status = 7 
			and @difference >= 0
		begin
			set @flag = 1
		end
	end


	if @flag = 1
	begin
		create table #tmp (tmp_id int identity, currency_rate varchar(254), oa_id int)

		insert into #tmp(currency_rate, oa_id)
		select HI_TEXT, HI_OAId
		from history
		where HI_DGCOD = @dogovor_code and (HI_OAId = 20 or HI_OAId = 22) and HI_REMARK = @currency
		order by HI_DATE asc

		declare @tmp_key int
		set @tmp_key = null

		declare @tmp_key_last int
		set @tmp_key_last = null

		select top 1 @tmp_key = tmp_id from #tmp where oa_id = 22 order by tmp_id asc

		if @tmp_key is not null
		begin
			select top 1 @tmp_key_last = tmp_id from #tmp where tmp_id < @tmp_key order by tmp_id desc
		end
		else
		begin
			select @tmp_key_last = max(tmp_id) from #tmp
		end

		if @tmp_key_last is not null
		begin
			delete from #tmp where tmp_id < @tmp_key_last
		end

		delete from #tmp where oa_id = 22

		if (select count(*) from #tmp) > 0
		begin
			insert into #tmp(currency_rate, oa_id) values (cast(@new_currency_rate as varchar), 20)

			declare @average_currency_rate money
			set @average_currency_rate = @new_currency_rate

			if @sys_setting = '1'
			begin
				select @average_currency_rate = sum(cast(currency_rate as money))/count(*) from #tmp
			end

			declare @first_currency_rate money
			
			select top 1 @first_currency_rate = cast(currency_rate as money) from #tmp
			order by tmp_id asc

			if (@price - @old_price) <> 0
			begin
				set @final_price = @old_price * @first_currency_rate + (@price - @old_price) * @average_currency_rate

				if @action = 'INSERT_TO_HISTORY'
				begin
					declare @str varchar(1000)
					set @str = cast(@old_price as varchar) + ' * ' + cast(@first_currency_rate as varchar) + ' + (' + cast(@price as varchar) + ' - ' + cast(@old_price as varchar) + ') * ' + cast(@average_currency_rate as varchar)
					
					insert into dbo.history
					(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
					values
					(@dogovor_code, @who, @str, @currency, 'INS', 'CALC_FINAL_PRICE', 22)
				end
			end
			else
			begin
				set @final_price = @old_price * @new_currency_rate
			end
		end

		drop table #tmp
	end
end

GO
GRANT EXECUTE ON [dbo].[CalcPriceByNationalCurrencyRate] TO PUBLIC 
GO
-- sp_NationalCurrencyJob.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyJob]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyJob]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyJob]
AS
BEGIN
	declare @days int
	set @days = null

	select @days = cast(SS_ParmValue as int)
	from SystemSettings
	where SS_ParmName = 'NATIONAL_CURRENCY_EXPIRE'

	if @days is not null
	begin
		select HI_DGCOD as DogovorCode, max(HI_DATE) as [Date]
		into #temp
		from history h
		inner join tbl_dogovor t
		on
			t.DG_CODE = h.HI_DGCOD and t.DG_SOR_CODE not in (7)
			and (t.DG_PAYED - t.DG_PRICE) < 0
		where HI_OaID=20
		group by HI_DGCOD
		--having datediff(day, max(HI_DATE), getdate()) > @days
		having
		cast(datediff(d, max(HI_DATE), getdate()) as smallint) - cast(datediff (wk, max(HI_DATE) - 7, getdate() - 6) + datediff (wk, max(HI_DATE) - 8, getdate() - 7) as smallint) >= @days


		declare @DogovorCode varchar(50)
		declare @Date datetime

		declare @currency varchar(5)

		declare @rc_course money
		declare @rc_courseStr char(30)

		declare @national_currency varchar(5)
		select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

		declare @sHI_WHO varchar(25)
		exec dbo.CurrentUser @sHI_WHO output

		declare cur cursor for
			select DogovorCode, [Date] from #temp

		open cur

		fetch next from cur into @DogovorCode, @Date

		while @@fetch_status = 0
		begin
			select @currency = DG_RATE from tbl_dogovor where DG_CODE = @DogovorCode

			if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@currency))
			begin
				set @rc_course = -1
				select top 1 @rc_courseStr = RC_COURSE from RealCourses
				where
				RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
				and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
				set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
			end
			else
			begin
				set @rc_courseStr = '1'
				set @rc_course = 1
			end

			if @rc_course <> -1
			begin
				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, @rc_courseStr, @currency, 'UPD', 'DOGOVORCURRENCYJOB', 20)

				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = @rc_course * DG_PRICE,
					DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * DG_DISCOUNTSUM
				where
					DG_CODE = @DogovorCode
			end
			else
			begin
				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = null,
					DG_NATIONALCURRENCYDISCOUNTSUM = null
				where
					DG_CODE = @DogovorCode

				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, 'Курс отсутствует', @currency, 'UPD', 'DOGOVORCURRENCYJOB', 21)
			end

			fetch next from cur into @DogovorCode, @Date
		end

		close cur
		deallocate cur

		drop table #temp
	end

END
GO
GRANT EXECUTE ON [dbo].[NationalCurrencyJob] TO PUBLIC 
GO
-- sp_DogovorMonitor.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogovorMonitor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogovorMonitor]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [dbo].[DogovorMonitor]
  (
--<VERSION>2007.2.23</VERSION>
--<DATE>2009-03-03</DATE>
	@dtStartDate datetime,			-- начальная дата просмотра изменений
	@dtEndDate datetime,			-- конечная дата просмотра изменений
	@nCountryKey int,				-- ключ страны
	@nCityKey int,					-- ключ города
	@nDepartureCityKey int,			-- ключ города вылета
	@nCreatorKey int,				-- ключ создателя
	@nOwnerKey int,					-- ключ ведущего менеджера
	@nViewProceed smallint,			-- не показывать обработанные: 0 - показывать, 1 - не показывать
	@sFilterKeys varchar(255)		-- ключи выбранных фильтров
  )
AS
BEGIN

CREATE TABLE #DogovorMonitorTable
(
	DM_CreateDate datetime, -- DM_HistoryDate
	DM_FirstProcDate datetime, -- NEW
	DM_LastProcDate datetime, -- DM_ProcDate
	DM_DGCODE varchar(10),
	DM_CREATOR varchar(25),
	DM_TurDate datetime,
	DM_TurName varchar(160),
	DM_PartnerName varchar(80),
	DM_FilterName varchar(1024),
	DM_NotesCount int,
	DM_PaymentStatus varchar(4),
	DM_IsBilled bit,
	DM_MessageCount int
)

declare @nObjectAliasFilter int, @sFilterType varchar(3)

DECLARE @dogovorCreateDate datetime, @lastDogovorActionDate datetime -- @dtHistoryDate
declare @sDGCode varchar(10), @nDGKey int
declare @sCreator varchar(25), @dtTurDate datetime, @sTurName varchar(160)
declare @sPartnerName varchar(80), @sFilterName varchar(255), @nHIID int
declare @sHistoryMod varchar(3), @sPaymentStatus as varchar(4)

set @sHistoryMod = 'DMP'

declare @nFilterKey int, @nLastPos int

while len(@sFilterKeys) > 0
begin
	set @nLastPos = 0
	set @nLastPos = charindex(',', @sFilterKeys, @nLastPos)
	if @nLastPos = 0
		set @nLastPos = len(@sFilterKeys) + 1
	
	set @nFilterKey = cast(substring(@sFilterKeys, 0, @nLastPos) as int)
	if @nLastPos <> len(@sFilterKeys) + 1
		set @sFilterKeys = substring(@sFilterKeys, @nLastPos + 1, len(@sFilterKeys) - @nLastPos)
	else
		set @sFilterKeys = ''
	
	select @sFilterName = DS_Value from Descriptions where DS_KEY = @nFilterKey


	declare filterCursor cursor local fast_forward for
	select OF_OAId, OF_Type
	from ObjectAliasFilters
	where OF_DSKey = @nFilterKey
	order by OF_OAId
	
	open filterCursor
	fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	while(@@fetch_status = 0)
	begin
		declare dogovorsCursor cursor local fast_forward for
		select DISTINCT 
			(SELECT MIN(HI_DATE) FROM history h2 WHERE h2.HI_DGCOD = DG_CODE) AS DOGOVOR_CREATE_DATE, 
			(SELECT MAX(HI_DATE) FROM history h2 WHERE h2.HI_DGCOD = DG_CODE) AS LAST_DOGOVOR_ACTION_DATE, 
			DG_CODE, US_FullName, DG_TurDate, TL_NAME, PR_NAME, DG_KEY,
			CASE
				WHEN DG_PRICE = 0 AND DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED = 0 THEN 'NONE'
				WHEN DG_PAYED < DG_PRICE THEN 'LOW'
				WHEN DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED > DG_PRICE THEN 'OVER'
			END AS DM_PAYMENTSTATUS
		from dogovor, history, historydetail, userlist, TurList, Partners
		where HI_DGCOD = DG_CODE and HI_ID = HD_HIID and US_KEY = DG_CREATOR and TL_KEY = DG_TRKEY and PR_KEY = DG_PARTNERKEY and 
			HI_DATE BETWEEN @dtStartDate and dateadd(day, 1, @dtEndDate) and
			(@nCountryKey < 0 OR DG_CNKEY = @nCountryKey) and
			(@nCityKey < 0 OR DG_CTKEY = @nCityKey) and
			(@nDepartureCityKey < 0 OR DG_CTDepartureKey = @nDepartureCityKey) and
			(@nCreatorKey < 0 OR DG_CREATOR = @nCreatorKey) and
			(@nOwnerKey < 0 OR DG_OWNER = @nOwnerKey) and
			(HD_OAId = @nObjectAliasFilter) and
			--(@nViewProceed = 0 OR NOT EXISTS (select HI_ID from history where HI_DGKEY = DG_KEY and HI_MOD LIKE @sHistoryMod)) and
			(@sFilterType = '' OR HI_MOD = @sFilterType)

		--нашли путевки
		open dogovorsCursor
		fetch next from dogovorsCursor into @dogovorCreateDate, @lastDogovorActionDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		while(@@fetch_status = 0)
		begin
			--if not exists (select * from #DogovorMonitorTable where datediff(mi, DM_HistoryDate, @dtHistoryDate) = 0 and DM_DGCODE = @sDGCode and DM_FilterName LIKE @sFilterName)
			--begin
				DECLARE @firstDogovorProcessDate datetime 
				DECLARE @lastDogovorProcessDate datetime -- @hiDate

				SET @firstDogovorProcessDate = (select MIN(HI_DATE) from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
				SET @lastDogovorProcessDate = (select MAX(HI_DATE) from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)

--				--select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
--				if exists (select HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
--					select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
--				else
--					set @hiDate = NULL

				DECLARE @notesCount int
				SELECT @notesCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'WWW'

				DECLARE @isBilled bit
				SET @isBilled = 0
				IF EXISTS(SELECT AC_KEY FROM ACCOUNTS WHERE AC_DGCOD = @sDGCode)
					SET @isBilled = 1

				DECLARE @messageCount int
				SELECT @messageCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'MTM'
				AND HI_TEXT NOT LIKE 'От агента: %' -- notes from web (copies of 'WWW' moded notes)

				DECLARE @includeRecord bit
				SET @includeRecord = 0

				if (@nViewProceed = 0) OR (@lastDogovorProcessDate IS NULL)
				begin
					--insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount)
					--values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
					SET @includeRecord = 1
				end
				else
				begin
					--if @dtHistoryDate > @hiDate
					if @lastDogovorActionDate > @lastDogovorProcessDate
					begin
						--insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount) 
						--values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
						SET @includeRecord = 1
					end
				end

				-------------------
				IF @includeRecord = 1
				BEGIN
					IF EXISTS (SELECT dm_dgcode FROM #DogovorMonitorTable WHERE dm_dgcode = @sDGCode)
					BEGIN
						IF NOT EXISTS (SELECT 1 FROM #DogovorMonitorTable WHERE dm_dgcode = @sDGCode AND dm_filtername LIKE '%' + @sFilterName + '%')
							UPDATE #DogovorMonitorTable SET DM_FilterName = DM_FilterName + ', ' + @sFilterName WHERE dm_dgcode = @sDGCode
					END
					ELSE
					BEGIN
						INSERT INTO #DogovorMonitorTable
						VALUES (@dogovorCreateDate, @firstDogovorProcessDate, @lastDogovorProcessDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount);
					END
				END
				-------------------

			--end
			fetch next from dogovorsCursor into @dogovorCreateDate, @lastDogovorActionDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		end
			
		close dogovorsCursor
		deallocate dogovorsCursor

		fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	end

	close filterCursor
	deallocate filterCursor

end
	SELECT *
	FROM #DogovorMonitorTable
	ORDER BY DM_CreateDate
	
	DROP TABLE #DogovorMonitorTable

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[DogovorMonitor] TO Public
GO 
-- sp_GetStopSaleListData.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetStopSaleListData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetStopSaleListData] 
GO
CREATE PROCEDURE [dbo].[GetStopSaleListData]
(
--<VERSION>2008.1.01.01a</VERSION>
@DateStart smalldatetime,
@DaysCount int,
@SVKey int,
@CNKey int = null,
@CTKey int = null,
@Code int = null, 
@PRKey int = null
)
AS
BEGIN
	CREATE TABLE #StopSaleList(
	SSL_Code int, SSL_SubCode1 int, SSL_SubCode2 int, SSL_PRKey int, SSL_PartnerName varchar(100))

	ALTER TABLE #StopSaleList ADD SSL_DataType int default 1

	DECLARE @n int, @str varchar(100)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #StopSaleList ADD SSL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END

	DECLARE @query varchar(1000), @insertQuery varchar(1000), @dateEnd datetime
	SET @dateEnd = @DateStart + @DaysCount - 1

	SET @query = 'SELECT DISTINCT QO_Code, QO_SubCode1, ISNULL(QO_SubCode2,0), SS_PRKey'
	SET @query = @query + ' FROM StopSales, QuotaObjects'
	SET @query = @query + ' WHERE QO_QTID IS NULL AND (SS_IsDeleted IS NULL OR SS_IsDeleted = 0) AND SS_QOID = QO_ID'
	SET @query = @query + ' AND SS_Date BETWEEN ''' + CAST(@DateStart as varchar(25)) + ''' AND ''' + CAST(@dateEnd as varchar(25)) + ''''
	SET @query = @query + ' AND QO_SVKey = ' + CAST(@SVKey as varchar(15))
	IF @CNKey IS NOT NULL
		SET @query = @query + ' AND QO_CNKey = ' + CAST(@CNKey as varchar(15))
	IF ISNULL(@CTKey,0) <> 0
		SET @query = @query + ' AND QO_CTKey = ' + CAST(@CTKey as varchar(15))
	IF ISNULL(@Code,0) <> 0
		SET @query = @query + ' AND QO_Code = ' + CAST(@Code as varchar(15))
	IF ISNULL(@PRKey,0) <> 0
		SET @query = @query + ' AND SS_PRKey = ' + CAST(@PRKey as varchar(15))

	SET @insertQuery = 'insert into #StopSaleList(SSL_Code, SSL_SubCode1, SSL_SubCode2, SSL_PRKey)'
	SET @insertQuery = @insertQuery + @query

	EXEC(@insertQuery)

	UPDATE #StopSaleList SET SSL_PartnerName = (Select PR_Name from Partners where PR_Key = SSL_PRKey and SSL_PRKey > 0)
	UPDATE #StopSaleList SET SSL_PartnerName = 'All partners' WHERE SSL_PRKey=0

	DECLARE @tempCode int, @tempSubCode1 int, @tempSubCode2 int, @tempPRKey int, @tempDate datetime, @tempComment varchar(255)
	DECLARE @columnName varchar(10), @updateQuery varchar(1000) 

	DECLARE curStopSalesList CURSOR FOR 
	SELECT QO_Code, QO_SubCode1, ISNULL(QO_SubCode2,0), SS_PRKey, SS_Date, ISNULL(SS_Comment,'') 
	FROM StopSales, QuotaObjects
	WHERE QO_SVKey = @SVKey AND QO_Code IN (SELECT SSL_Code FROM #StopSaleList) AND QO_QTID IS NULL AND 
		(SS_IsDeleted IS NULL OR SS_IsDeleted = 0) AND SS_QOID = QO_ID AND SS_Date BETWEEN @DateStart AND @dateEnd

	OPEN curStopSalesList
	FETCH NEXT FROM curStopSalesList INTO @tempCode, @tempSubCode1, @tempSubCode2, @tempPRKey, @tempDate, @tempComment
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		SET @columnName = 'SSL_' + CAST(CAST((@tempDate - @DateStart + 1) as int) as varchar(6))

		SET @updateQuery = 'UPDATE #StopSaleList SET ' + @columnName + ' = ''' + @tempComment + ''''
		SET @updateQuery = @updateQuery + ' WHERE SSL_Code = ' + CAST(@tempCode as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_SubCode1 = ' + CAST(@tempSubCode1 as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_SubCode2 = ' + CAST(@tempSubCode2 as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_PRKey = ' + CAST(@tempPRKey as varchar(15))
		
		EXEC(@updateQuery)

		FETCH NEXT FROM curStopSalesList INTO @tempCode, @tempSubCode1, @tempSubCode2, @tempPRKey, @tempDate, @tempComment
	END
	CLOSE curStopSalesList
	DEALLOCATE curStopSalesList

	SELECT * FROM #StopSaleList
END
GO
GRANT EXECUTE ON [dbo].[GetStopSaleListData] TO PUBLIC 
GO
-- 090409(Insert_Actions).sql
IF NOT EXISTS (SELECT 1 FROM Actions WHERE AC_KEY = 59)
	INSERT INTO Actions VALUES(59, 'Турпутевка->Редактирование колонок "Нетто поставщика", "Реальное нетто"', 
		NULL, NULL, 'Reservation->Edit columns "Net on acc. from partner","Net on payed to partner"')
GO
-- sp_GetSvCode2Name.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetSvCode2Name]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetSvCode2Name]
GO
CREATE PROCEDURE [dbo].[GetSvCode2Name]
(
--<VERSION>2005.4.24</VERSION>
	@nSvKey INT,
	@nCode2 INT,
	@sResult VARCHAR(800) OUTPUT,
	@sResultLat VARCHAR(800) OUTPUT,
	@bIsQuote bit = null
) AS
	DECLARE 
	@nMain INT,
	@nAgeFrom INT,
	@nAgeTo INT,
	
	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT,
	@sTempString VARCHAR(800),
	@nTempNumber INT
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
	
	Set @sResult = ''
	Set @sResultLat = ''
	
	-- Проживание
	IF @nSvKey = @TYPE_HOTEL 
		BEGIN
		IF ISNULL(@bIsQuote,0) = 1
			EXEC GetRoomCtgrName @nCode2, @sResult  output, @sResultLat output
		ELSE
		IF EXISTS(SELECT * FROM	dbo.Pansion WHERE PN_Key = @nCode2)
			SELECT 	@sResult = IsNull(PN_Code, '') + ' ' + PN_Name,
				@sResultLat = IsNull(PN_Code, '') + ' ' + IsNull(PN_NameLat, PN_Name)
			FROM 	dbo.Pansion 
			WHERE 	PN_Key = @nCode2
		END	
	ELSE
	-- Круиз
	IF @nSvKey = @TYPE_SHIP
	BEGIN
		IF EXISTS(SELECT * FROM dbo.AccmdMenType WHERE AC_Key = @nCode2)
			SELECT  @sResult = IsNull(AC_Code, ''), 
				@sResultLat = IsNull(AC_Code, ''), 
				@nMain = IsNull(AC_Main, 0), 
				@nAgeFrom = IsNull(AC_AgeFrom, 0), 
				@nAgeTo = IsNull(AC_AgeTo, 0) 
			FROM 	dbo.AccmdMenType 
			WHERE 	AC_Key = @nCode2
	END
	ELSE
	-- Для всех остальных случаев
	BEGIN		
		EXEC dbo.GetSvListParm @nSvKey, 'CODE2', @nTempNumber output
		IF @nTempNumber > 0
		BEGIN
			IF EXISTS(SELECT * FROM dbo.AddDescript2 WHERE A2_Key = @nCode2)
				SELECT	@sResult = A2_Name + (case when LEN(A2_Code) > 0 then ( ',' + IsNull(A2_Code, '') ) else '' end),
					@sResultLat = IsNull(A2_NameLat, A2_Name) + (case when LEN(A2_Code) > 0 then ( ',' + IsNull(A2_Code, '') ) else '' end)
				FROM dbo.AddDescript2 
				WHERE A2_Key = @nCode2
		END
	END
	
	IF (@nSvKey = @TYPE_SHIP) AND (@nCode2 > 0)
	BEGIN
		IF (@nMain > 0)
		BEGIN
			SET @sResult = @sResult + ',Осн'
			SET @sResultLat = @sResultLat + ',Main'
		END
		ELSE
		BEGIN
			SET @sResult = @sResult + ',доп'
			SET @sResultLat = @sResultLat + ',ex.b'
			IF @nAgeFrom >= 0
			BEGIN
				SET @sTempString = '(' + CAST( @nAgeFrom as varchar(5) ) + '-' +  CAST( @nAgeTo as varchar(5) ) + ')'
				SET @sResult = @sResult + @sTempString
				SET @sResultLat = @sResultLat + @sTempString
			END
		END
	END
GO
GRANT EXECUTE ON [dbo].[GetSvCode2Name] TO PUBLIC
GO
-- sp_GetTableQuotaDetails.sql 16.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetTableQuotaDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetTableQuotaDetails] 
GO
create procedure [dbo].[GetTableQuotaDetails] 
(
--<VERSION>2008.1.02.02a</VERSION>
@DL_Key int =null,
@QT_ID int  =null,
@DateStart smalldatetime = null,
@DaysCount int  =null,
@QT_Type int  =null,
@QT_Release int  =null,
@DL_SVKey int  =null, 
@DL_Code int  =null, 
@DL_SubCode1 int  =null, 
@DL_PRKey int  =null,
@GroupByQD bit = null
)
AS
/*
возвращает таблицу со стопами по всем комбинациям услуг

есть 5 вариантов вызова
1. экран "Наличие мест на квоте" - @QT_ID, @DateStart, @DaysCount !!! до 2008.1.1 (после 2008.1.2 см.пункт 5 )
2. экран "Выбрать квоту (основной режим)" - @DL_Key, @DateStart, @DaysCount
3. функция проверки наличия мест [CheckQuotaExist] @QT_ID, @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @DL_SubCode1, @DL_PRKey
4. из экрана Стоп по квоте @QT_ID, @DateStart, @DaysCount, @QT_Type
5. экран "Наличие мест на квоте" - @DateStart, @DaysCount, @DL_SVKey, @DL_Code, @GroupByQD !!! после 2008.1.2 (до 2008.1.1 см.пункт 1 ) 
*/
DECLARE @DateEnd smalldatetime
Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)

DECLARE @QO_SubCode1 int, @QO_SubCode2 int
IF @DL_Key is not null --значит смотрим из конкретной услуги
	SELECT @DL_SVKey=DL_SVKey, @DL_Code=DL_Code, @DL_SubCode1=DL_SubCode1, @DL_PRKey=DL_PartnerKey FROM DogovorList WHERE DL_Key=@DL_Key
IF @DL_SVKey is not null and @DL_SubCode1 is not null
BEGIN
	SET @QO_SubCode2=0
	IF @DL_SVKey=3
		SELECT @QO_SubCode1=HR_RMKey, @QO_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@DL_SubCode1
	ELSE
		SET @QO_SubCode1=@DL_SubCode1

	IF @DL_SVKey=1
		SELECT @QO_SubCode2=CH_CITYKEYFROM FROM Charter WHERE CH_KEY=@DL_Code
END

--проверка стопов
--начало
CREATE TABLE #StopSaleTemp_Local
(
SST_Code int,
SST_SubCode1 int,
SST_SubCode2 int,
SST_QOID int,
SST_PRKey int,
SST_Date smalldatetime,
SST_QDID int,
SST_Type smallint,
SST_State smallint,
SST_Comment varchar(255)
)

IF @DL_Key is not null --значит смотрим по конкретной услуги
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code and (QO_SubCode1=@QO_SubCode1 or QO_SubCode1=0)
				and (QO_SubCode2=@QO_SubCode2 or QO_SubCode2=0)
				and (QT_PRKey=@DL_PRKey or QT_PRKey=0)
END
ELSE IF @QT_ID is not null
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and ((QT_ID=@QT_ID and @QT_ID is not null) or (@QT_ID is null)) and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and ((QO_SVKey=@DL_SVKey and @DL_SVKey is not null) or (@DL_SVKey is null))
				and ((QO_Code=@DL_Code and @DL_Code is not null) or (@DL_Code is null))
				and (((QO_SubCode1=0 or QO_SubCode1=@QO_SubCode1) and @QO_SubCode1 is not null) or (@QO_SubCode1 is null))
				and (((QO_SubCode2=0 or QO_SubCode2=@QO_SubCode2) and @QO_SubCode2 is not null) or (@QO_SubCode2 is null))
				and ((QD_Type=@QT_Type and @QT_Type is not null) or (@QT_Type is null))
				and ((ISNULL(QD_Release,0)=ISNULL(@QT_Release,0) and @QT_Type is not null) or (@QT_Type is null))	--специально смотрим @QT_Type, т.к. @QT_Release может прийти NULL
END
ELSE IF @QT_ID is null --экран "Наличие мест" (после 2008.1.2)
BEGIN
	INSERT INTO #StopSaleTemp_Local (SST_Code,SST_SubCode1,SST_SubCode2,SST_QOID,SST_PRKey,SST_Date,SST_QDID,SST_Type)
		SELECT	QO_Code,QO_SubCode1,QO_SubCode2,QO_ID,QT_PRKey,QD_Date,QD_ID,QD_Type
		FROM	QuotaObjects,Quotas,QuotaDetails
		WHERE	QO_QTID=QT_ID and QD_QTID=QT_ID
				and QD_Date between @DateStart and @DateEnd
				and QO_SVKey=@DL_SVKey and QO_Code=@DL_Code
END

if not exists (select SS_ParmValue from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1)
BEGIN
	IF @DL_Key is not null --значит по услуге, значит не надо смотреть в QuotaObjects, так как объекты уже отобраны
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
			WHERE exists (SELECT SS_ID FROM StopSales,QuotaObjects WHERE SS_QOID=QO_ID and SS_QDID=SST_QDID and QO_Code=@DL_Code and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0)
				and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)	and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0))
	Else
		Update #StopSaleTemp_Local Set SST_State=1, SST_Comment= (SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))
			WHERE exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=SST_QDID and SS_QOID=SST_QOID and SS_Date between @DateStart and @DateEnd and (SS_IsDeleted is null or SS_IsDeleted=0))

	Update #StopSaleTemp_Local Set SST_State=2, SST_Comment= 
		(
			SELECT TOP 1 REPLACE(SS_Comment,'''','"') FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		WHERE exists 
		(
		SELECT SS_ID FROM StopSales,QuotaObjects 
			WHERE	SS_QDID is null
					and SS_Date between @DateStart and @DateEnd
					and (SS_PRKey=SST_PRKey or SS_PRKey=0)
					and SS_QOID=QO_ID 
					and SS_Date=SST_Date
					and (QO_Code=SST_Code or QO_Code=0)					
					and (QO_SubCode1=SST_SubCode1 or QO_SubCode1=0)
					and (QO_SubCode2=SST_SubCode2 or QO_SubCode2=0)
					and (SS_IsDeleted is null or SS_IsDeleted=0)
		)
		and SST_Type=1
END
 --where sst_QDID=2602
--GO
--проверка стопов
--окончание
if @GroupByQD=1
	select	SST_QDID, Count(*) as SST_QO_Count, 
			(SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null) as SST_QO_CountWithStop,
			(SELECT TOP 1 SST_Comment FROM #StopSaleTemp_Local s3 WHERE s3.SST_QDID=s1.SST_QDID and SST_Comment is not null and SST_Comment != '') as SST_Comment
	from #StopSaleTemp_Local s1
	group by SST_QDID
	having (SELECT count(*) from #StopSaleTemp_Local s2 WHERE s2.SST_QDID=s1.SST_QDID and SST_State is not null)>0
else
	select * from #StopSaleTemp_Local
GO
GRANT EXECUTE ON [dbo].[GetTableQuotaDetails] TO PUBLIC 
GO
-- 090417(InsertObjectAliases).sql 17.04.09
IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 23)
	INSERT INTO ObjectAliases VALUES (23, 'RealCourses', 'Реальные курсы валют', NULL, 72, NULL)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23001))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23001, 'RC_RCOD1', 'Первая валюта', NULL, 72)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23002))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23002, 'RC_RCOD2', 'Вторая валюта', NULL, 72)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23003))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23003, 'RC_DATEBEG', 'Начало действия курса', NULL, 72)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23004))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23004, 'RC_DATEEND', 'Окончание действия курса', NULL, 72)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23005))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23005, 'RC_COURSE_CB', 'Официальный курс', NULL, 72)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 23006))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (23006, 'RC_COURSE', 'Внутренний курс', NULL, 72)
GO

IF NOT EXISTS (SELECT 1 FROM ObjectAliases WHERE OA_ID = 24)
	INSERT INTO ObjectAliases VALUES (24, 'Courses', 'Планируемые курсы валют', NULL, 73, NULL)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 24001))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (24001, 'RC_RCOD1', 'Первая валюта', NULL, 73)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 24002))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (24002, 'RC_RCOD2', 'Вторая валюта', NULL, 73)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 24003))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (24003, 'RC_DATEBEG', 'Начало действия курса', NULL, 73)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 24004))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (24004, 'RC_DATEEND', 'Окончание действия курса', NULL, 73)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 24005))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (24005, 'RC_COURSE', 'Внутренний курс', NULL, 73)
GO
-- T_CoursesUpdate.sql 17.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_CoursesUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_CoursesUpdate]
GO
CREATE TRIGGER [dbo].[T_CoursesUpdate] 
   ON  [dbo].[Courses]  
   AFTER UPDATE, DELETE, INSERT
AS 
IF @@ROWCOUNT > 0
BEGIN
  DECLARE @CR_Key int

  DECLARE @OCR_RCOD1 varchar(3)
  DECLARE @OCR_RCOD2 varchar(3)
  DECLARE @OCR_DATEBEG datetime
  DECLARE @OCR_DATEEND datetime
  DECLARE @OCR_COURSE decimal(19,6)

  DECLARE @NCR_RCOD1 varchar(3)
  DECLARE @NCR_RCOD2 varchar(3)
  DECLARE @NCR_DATEBEG datetime
  DECLARE @NCR_DATEEND datetime
  DECLARE @NCR_COURSE decimal(19,6)

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Cources CURSOR FOR 
    SELECT N.CR_KEY,
		   null, null, null, null, null,
		   N.CR_RCOD1, N.CR_RCOD2, N.CR_DATEBEG, N.CR_DATEEND, N.CR_COURSE		
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Cources CURSOR FOR 
    SELECT O.CR_KEY,
		   O.CR_RCOD1, O.CR_RCOD2, O.CR_DATEBEG, O.CR_DATEEND, O.CR_COURSE,
		   null, null, null, null, null	
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Cources CURSOR FOR 
    SELECT 	N.CR_Key,
			O.CR_RCOD1, O.CR_RCOD2, O.CR_DATEBEG, O.CR_DATEEND, O.CR_COURSE,
		    N.CR_RCOD1, N.CR_RCOD2, N.CR_DATEBEG, N.CR_DATEEND, N.CR_COURSE
    FROM DELETED O, INSERTED N 
    WHERE N.CR_Key = O.CR_Key
  END

    OPEN cur_Cources
    FETCH NEXT FROM cur_Cources INTO 
		@CR_Key, 
		@OCR_RCOD1, @OCR_RCOD2, @OCR_DATEBEG, @OCR_DATEEND, @OCR_COURSE,
		@NCR_RCOD1, @NCR_RCOD2, @NCR_DATEBEG, @NCR_DATEEND, @NCR_COURSE	
    WHILE @@FETCH_STATUS = 0
	BEGIN 
    	------------Проверка, надо ли что-то писать в историю-------------------------------------------  
		If (
			ISNULL(@OCR_RCOD1, '') != ISNULL(@NCR_RCOD1, '') OR
			ISNULL(@OCR_RCOD2, '') != ISNULL(@NCR_RCOD2, '') OR
			ISNULL(@OCR_DATEBEG, GETDATE()) != ISNULL(@NCR_DATEBEG, GETDATE()) OR
			ISNULL(@OCR_DATEEND, GETDATE()) != ISNULL(@NCR_DATEEND, GETDATE()) OR
			ISNULL(@OCR_COURSE, 0) != ISNULL(@NCR_COURSE, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
				SET @sHI_Text = @NCR_RCOD1 + ' - ' + @NCR_RCOD2
			else if (@sMod = 'DEL')
				SET @sHI_Text = @OCR_RCOD1 + ' - ' + @OCR_RCOD2
			else if (@sMod = 'UPD')
				SET @sHI_Text = @NCR_RCOD1 + ' - ' + @NCR_RCOD2

			EXEC @nHIID = dbo.InsHistory '', 0, 24, 0, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			If (ISNULL(@OCR_RCOD1, '') != ISNULL(@NCR_RCOD1, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 24001, @OCR_RCOD1, @NCR_RCOD1, null, null, null, null, 0
			END
			If (ISNULL(@OCR_RCOD2, '') != ISNULL(@NCR_RCOD2, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 24002, @OCR_RCOD2, @NCR_RCOD2, null, null, null, null, 0
			END
			If (ISNULL(@OCR_DATEBEG, GETDATE()) != ISNULL(@NCR_DATEBEG, GETDATE()))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 24003, null, null, null, null, @OCR_DATEBEG, @NCR_DATEBEG, 0
			END
			If (ISNULL(@OCR_DATEEND, '') != ISNULL(@NCR_DATEEND, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 24004, null, null, null, null, @OCR_DATEEND, @NCR_DATEEND, 0
			END
			If (ISNULL(@OCR_COURSE, 0) != ISNULL(@NCR_COURSE, 0))
			BEGIN
				DECLARE @sOCOURSE varchar(20), @sNCOURSE varchar(20)
				Set @sOCOURSE = CAST(@OCR_COURSE as varchar(20))
				Set @sNCOURSE = CAST(@NCR_COURSE as varchar(20))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 24005, @sOCOURSE, @sNCOURSE, null, null, null, null, 0
			END
		END
		    FETCH NEXT FROM cur_Cources INTO 
				@CR_Key, 
				@OCR_RCOD1, @OCR_RCOD2, @OCR_DATEBEG, @OCR_DATEEND, @OCR_COURSE,
				@NCR_RCOD1, @NCR_RCOD2, @NCR_DATEBEG, @NCR_DATEEND, @NCR_COURSE	
	END
  CLOSE cur_Cources
  DEALLOCATE cur_Cources
END
GO
-- T_RealCoursesUpdate.sql 17.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_RealCoursesUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_RealCoursesUpdate]
GO
CREATE TRIGGER [dbo].[T_RealCoursesUpdate] 
   ON  [dbo].[RealCourses]  
   AFTER UPDATE, DELETE, INSERT
AS 
IF @@ROWCOUNT > 0
BEGIN
  DECLARE @RC_Key int

  DECLARE @ORC_RCOD1 varchar(3)
  DECLARE @ORC_RCOD2 varchar(3)
  DECLARE @ORC_DATEBEG datetime
  DECLARE @ORC_DATEEND datetime
  DECLARE @ORC_COURSE_CB decimal(19,6)
  DECLARE @ORC_COURSE decimal(19,6)

  DECLARE @NRC_RCOD1 varchar(3)
  DECLARE @NRC_RCOD2 varchar(3)
  DECLARE @NRC_DATEBEG datetime
  DECLARE @NRC_DATEEND datetime
  DECLARE @NRC_COURSE_CB decimal(19,6)
  DECLARE @NRC_COURSE decimal(19,6)

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_RealCources CURSOR FOR 
    SELECT N.RC_KEY,
		   null, null, null, null, null, null,
		   N.RC_RCOD1, N.RC_RCOD2, N.RC_DATEBEG, N.RC_DATEEND, N.RC_COURSE_CB, N.RC_COURSE		
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_RealCources CURSOR FOR 
    SELECT O.RC_KEY,
		   O.RC_RCOD1, O.RC_RCOD2, O.RC_DATEBEG, O.RC_DATEEND, O.RC_COURSE_CB, O.RC_COURSE,
		   null, null, null, null, null, null	
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_RealCources CURSOR FOR 
    SELECT 	N.RC_Key,
			O.RC_RCOD1, O.RC_RCOD2, O.RC_DATEBEG, O.RC_DATEEND, O.RC_COURSE_CB, O.RC_COURSE,
		    N.RC_RCOD1, N.RC_RCOD2, N.RC_DATEBEG, N.RC_DATEEND, N.RC_COURSE_CB, N.RC_COURSE
    FROM DELETED O, INSERTED N 
    WHERE N.RC_Key = O.RC_Key
  END

    OPEN cur_RealCources
    FETCH NEXT FROM cur_RealCources INTO 
		@RC_Key, 
		@ORC_RCOD1, @ORC_RCOD2, @ORC_DATEBEG, @ORC_DATEEND, @ORC_COURSE_CB, @ORC_COURSE,
		@NRC_RCOD1, @NRC_RCOD2, @NRC_DATEBEG, @NRC_DATEEND, @NRC_COURSE_CB, @NRC_COURSE	
    WHILE @@FETCH_STATUS = 0
	BEGIN 
    	------------Проверка, надо ли что-то писать в историю-------------------------------------------  
		If (
			ISNULL(@ORC_RCOD1, '') != ISNULL(@NRC_RCOD1, '') OR
			ISNULL(@ORC_RCOD2, '') != ISNULL(@NRC_RCOD2, '') OR
			ISNULL(@ORC_DATEBEG, GETDATE()) != ISNULL(@NRC_DATEBEG, GETDATE()) OR
			ISNULL(@ORC_DATEEND, GETDATE()) != ISNULL(@NRC_DATEEND, GETDATE()) OR
			ISNULL(@ORC_COURSE_CB, 0) != ISNULL(@NRC_COURSE_CB, 0) OR
			ISNULL(@ORC_COURSE, 0) != ISNULL(@NRC_COURSE, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
				SET @sHI_Text = @NRC_RCOD1 + ' - ' + @NRC_RCOD2
			else if (@sMod = 'DEL')
				SET @sHI_Text = @ORC_RCOD1 + ' - ' + @ORC_RCOD2
			else if (@sMod = 'UPD')
				SET @sHI_Text = @NRC_RCOD1 + ' - ' + @NRC_RCOD2

			EXEC @nHIID = dbo.InsHistory '', 0, 23, 0, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			If (ISNULL(@ORC_RCOD1, '') != ISNULL(@NRC_RCOD1, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 23001, @ORC_RCOD1, @NRC_RCOD1, null, null, null, null, 0
			END
			If (ISNULL(@ORC_RCOD2, '') != ISNULL(@NRC_RCOD2, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 23002, @ORC_RCOD2, @NRC_RCOD2, null, null, null, null, 0
			END
			If (ISNULL(@ORC_DATEBEG, GETDATE()) != ISNULL(@NRC_DATEBEG, GETDATE()))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 23003, null, null, null, null, @ORC_DATEBEG, @NRC_DATEBEG, 0
			END
			If (ISNULL(@ORC_DATEEND, '') != ISNULL(@NRC_DATEEND, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 23004, null, null, null, null, @ORC_DATEEND, @NRC_DATEEND, 0
			END
			If (ISNULL(@ORC_COURSE_CB, 0) != ISNULL(@NRC_COURSE_CB, 0))
			BEGIN
				DECLARE @sOCOURSE_CB varchar(20), @sNCOURSE_CB varchar(20)
				Set @sOCOURSE_CB = CAST(@ORC_COURSE_CB as varchar(20))
				Set @sNCOURSE_CB = CAST(@NRC_COURSE_CB as varchar(20))
				EXECUTE dbo.InsertHistoryDetail @nHIID ,23005, @sOCOURSE_CB, @sNCOURSE_CB, null, null, null, null, 0
			END
			If (ISNULL(@ORC_COURSE, 0) != ISNULL(@NRC_COURSE, 0))
			BEGIN
				DECLARE @sOCOURSE varchar(20), @sNCOURSE varchar(20)
				Set @sOCOURSE = CAST(@ORC_COURSE as varchar(20))
				Set @sNCOURSE = CAST(@NRC_COURSE as varchar(20))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 23006, @sOCOURSE, @sNCOURSE, null, null, null, null, 0
			END
		END
		    FETCH NEXT FROM cur_RealCources INTO 
				@RC_Key, 
				@ORC_RCOD1, @ORC_RCOD2, @ORC_DATEBEG, @ORC_DATEEND, @ORC_COURSE_CB, @ORC_COURSE,
				@NRC_RCOD1, @NRC_RCOD2, @NRC_DATEBEG, @NRC_DATEEND, @NRC_COURSE_CB, @NRC_COURSE	
	END
  CLOSE cur_RealCources
  DEALLOCATE cur_RealCources
END
GO
-- sp_GetServiceCost.sql 22.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetServiceCost] 
GO
CREATE PROCEDURE [dbo].[GetServiceCost] 
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0, 
		@sellDate dateTime, @netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output
as
--<DATE>2009-04-16</DATE>
---<VERSION>7.2.24.1</VERSION>

SET DATEFIRST 1
DECLARE @tourlong int

Set @sellDate = ISNULL(@sellDate,GetDate())

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (14,6), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint


set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END

	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

	if @UseTypeDivisionMode > 0
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
		ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
					and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
	else
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND,
		ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC

	--1, 
	open costCursor

	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

If @days >1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	If @@fetch_status = 0
	BEGIN

		declare @TMPTable Table 
 		( CL_Date datetime,
		CL_CostNetto decimal(14,4),
		CL_Cost decimal(14,4),
		CL_Discount smallint,
		CL_Type smallint,
		CL_Rate varchar(2),
		CL_Course decimal(14,4),
		CL_Pax smallint default 1,
		CL_ByDay smallint,
		CL_Part smallint,
		CL_Profit decimal(14,4))

		DECLARE @temp_date DATETIME
		SET @temp_date = @date + @days - 1

		while @temp_date >= @date 
		BEGIN -- begin while @temp_date >= @date 
			insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
			set @temp_date = @temp_date - 1 
		END  -- end while @temp_date >= @date 
	END
	Else
	BEGIN
		close costCursor
		deallocate costCursor
		return 0
	END

	set @COST_ID = 1 --идетификатор уникальности цены
	If @CS_ByDay = 2
		Set @nCostByDayExists = 1

	If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
		insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
END

set @NotCalculatedCosts = 1
set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
BEGIN -- While (@@fetch_status = 0)
	-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
	Set @IsFetchNormal = 1
		-- если не указаны даты периодов, то значит указаны даты заедов
		-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

	If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
		if CHARINDEX ( @WeekDate, @CS_Week ) = 0
			Set @IsFetchNormal = 0
		Else
			Set @CS_Week = ''

	If @tourlong > 0 and @svKey = 1
	Begin		
		If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
			Set @IsFetchNormal = @IsFetchNormal
		else
			Set @IsFetchNormal = 0
	end     

	If @svKey != 1
	begin
		If @CS_LongMin is not null and @CS_LongMin > @days
			Set @IsFetchNormal = 0
	end

	-- Если время не задано, то увеличиваем период продажи на один день. Иначе, смотрим точный период.
	-- If DATEPART(hour, @CS_DateSellEnd)+DATEPART(minute, @CS_DateSellEnd) = 0
		Set @CS_DateSellEnd = @CS_DateSellEnd + 1
	-- При переходе с 5.2 возможны цены с периодом продаж оганиченном только с одной стороны.
	If (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
		Set @IsFetchNormal = @IsFetchNormal 
	else
		Set @IsFetchNormal = 0

	If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = (@date + @days - 1) -- смотрим может есть цена за период точно совпадает с периодом действия услуги
		Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
			CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
--		Set @IsFetchNormal = 0
	If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
	BEGIN
		If CHARINDEX ( @WeekDate, @CS_Week ) > 0
			Set @IsFetchNormal = @IsFetchNormal 
		Else
			Set @IsFetchNormal = 0
	END

	If @Days = 1 and @CS_Date > @date
		Set @IsFetchNormal = 0

	If @Days = 1 and @CS_ByDay in (3,4)
		Set @IsFetchNormal = 0

--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
/*
	If 	@CS_CheckInDateBEG is not null
	BEGIN
		Set @CS_Date = null
		Set @CS_DateEnd = null
	END
*/
		If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
		BEGIN			--цены подходят для поиска
			Set @CS_Date = (isnull(@CS_Date,@date))
			Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

			If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
			BEGIN
				update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
						CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
				if not exists (select * from @TMPTable where CL_Date = @date + @days)
					insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
				Set @nCostByDayExists = 1	
			END

			if @CS_Date < @date
				Set @CS_Date = @date
			if @CS_DateEnd > @date + @days
				Set @CS_DateEnd = @date + @days
			Set @CS_Discount = ISNULL(@CS_Discount,0)
			Set @TMP_Number_Period = null

			if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
			BEGIN -- if @CS_ByDay = 3
				if (@CS_DateEnd - @CS_Date + 1) >= 7
				BEGIN
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
					while @TMP_Number >= 7
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
	
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @TMP_Number = @TMP_Number - 7
						SET @TMP_Date = @TMP_Date + 7
						SET @COST_ID = @COST_ID + 1
					END
				END
			END	-- if @CS_ByDay = 3

	--		print 'поиск'
			if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
			BEGIN -- if @CS_ByDay = 0
	--			print 'период'
				select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
					Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

				if @CS_Date < @TMP_Date and @date < @TMP_Date
				BEGIN
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
			--		print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN					
						select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
						if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
						BEGIN
							select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
								Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
						END
					END
					Set @TMP_Number_Period = null
				END

				if @CS_Long is null or @CS_Long > @TMP_Number
				BEGIN
					--если предыдущий период захватывается полностью, то его надо включить
					--это делается только в случае, если цену указана за период
			--		print @TMP_Date + @TMP_Number
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
		--			print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN 
						select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
	--					print @TMP_Date_Period
						if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
							Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
					END
				END

				if @CS_Long is not null and @CS_Long < @TMP_Number
					set @TMP_Number = @CS_Long

				if @CS_LongMin is null or @CS_LongMin <= @TMP_Number
				BEGIN
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
						CL_Pax = 1, CL_Profit = @CS_Profit
						WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
					UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
					SET @COST_ID = @COST_ID + 1
				END
			END	-- if @CS_ByDay = 0
	
			if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
			BEGIN -- if @CS_ByDay = 1/2
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				if 1=1 -- временная заглушка, 
				BEGIN  -- если Цена удовлетворяет условиям
					SET @DayOfWeeks = @CS_Week
					While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
					BEGIN
						select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
						update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
							Where CL_Part = @TMP_Number
					END				

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

					SET @COST_ID = @COST_ID + 1
				END   -- если Цена удовлетворяет условиям
			END	-- if @CS_ByDay = 1

			if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
			BEGIN -- if @CS_ByDay = 4
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				SET @DayOfWeeks = ''
				Set @CS_Week = REPLACE(@CS_Week,'.','');

				if @CS_Week != ''
				BEGIN			
					Set @TMP_Number = 1
					Set @DayOfWeeks = LEFT(@CS_Week,1)
					while @TMP_Number < LEN(@CS_Week)
					BEGIN
						Set @TMP_Number = @TMP_Number + 1
						Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
					END
				END
				
				-- доп.ночи могут только добивать в конец, первый день точно не к ним
				If @CS_Date = @date
					Set @CS_Date = @CS_Date + 1

				IF @DayOfWeeks = ''
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1)
				ELSE
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
				SET @COST_ID = @COST_ID + 1
			END	-- if @CS_ByDay = 4
			select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
		END -- цены подходят для поиска и есть продолжительность
		ELSE
			If @IsFetchNormal = 1
				Set @NotCalculatedCosts = 0

	If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
	BEGIN
		fetch next from costCursor 
			into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
					@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
					@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1
			Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
		Else
			Set @FindCostByPeriod = 0
	END
END -- While (@@fetch_status = 0)
close costCursor
deallocate costCursor

--if @svKey = 3 
--	insert into TMP (CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit) select CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit from @TMPTable

if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
BEGIN
	set @nettoDetail = '='
	set @sDetailed = '='
	while exists (select * from @TMPTable where CL_Course != 0)
	begin
		SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
						@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
		from			@TMPTable 
		where			CL_Course != 0	 
		Order By		CL_Date

		Set @TMP_Number = 0
		Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
		UPDATE @TMPTable SET CL_Course = 0 WHERE CL_Part = @TMP_Number_Part
		if @nettoDetail != '='
			Set @nettoDetail = @nettoDetail + ' +'
		if @sDetailed != '='
			Set @sDetailed = @sDetailed + ' +'

		Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
		Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

		if @TMP_Number != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
		end

		if @TMP_Number_Pax != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
		end

		if @TMP_Number_Course != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
		end
	end

	If ISNULL(@profitValue,0) > 0
		Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

	if @marginCalcValue > 0
		Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

	If ISNULL(@discount,0) > 0
		Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
END
GO
GRANT EXECUTE ON [dbo].[GetServiceCost] TO PUBLIC 
GO
-- 090417(Insert_Actions).sql 17.04.09
IF NOT EXISTS (SELECT 1 FROM Actions WHERE AC_KEY = 60)
BEGIN
	INSERT INTO Actions VALUES(60, 'Турпутевка->Редактирование свойств', 
		NULL, NULL, 'Reservation->Edit properties')

	-- Даём всем права
	Insert into ActionsAuth 
	select distinct 60, ACA_USKey from ActionsAuth  

	Insert into GroupAuth (GRA_GRKey, GRA_ACKey)
	select distinct GRA_GRKey, 60 from GroupAuth
END
GO
-- 090422(AddSettings).sql 22.04.09
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyName')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyName', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyFName')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyFName', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyBirthday')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyBirthday', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyPassport')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyPassport', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyTourDate')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyTourDate', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAnnulatePolicyNDays')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAnnulatePolicyNDays', '1')
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetNumberOfWorkingDays]') and OBJECTPROPERTY(id, N'IsTableFunction') = 0)
begin	
	drop function [dbo].[GetNumberOfWorkingDays]
end
GO
-- 090422(AddFunc).sql 23.04.09
CREATE FUNCTION [dbo].[GetNumberOfWorkingDays](@DogovorCode varchar(255))
RETURNS smallint
AS
BEGIN
	declare @res smallint
	declare @date datetime
	declare @now datetime

	select top 1 @date = h.HI_DATE
	from history h
	inner join historydetail hd
	on
	hd.HD_HIID=h.HI_ID and hd.HD_Alias = 'DG_SOR_Code' and hd.HD_IntValueNew in (7,23,24)
	where
	h.HI_DGCOD = @DogovorCode
	order by h.HI_DATE desc

	set @now = getdate()
	set @res = cast(datediff(d, @date, @now) as smallint) - cast(datediff (wk, @date - 7, @now - 6) + datediff (wk, @date - 8, @now - 7) as smallint)

	return @res
END
GO
GRANT EXEC ON [dbo].[GetNumberOfWorkingDays] TO PUBLIC
GO
-- sp_NationalCurrencyJob.sql 22.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyJob]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyJob]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyJob]
AS
BEGIN
	declare @days int
	set @days = null

	select @days = cast(SS_ParmValue as int)
	from SystemSettings
	where SS_ParmName = 'NATIONAL_CURRENCY_EXPIRE'

	if @days is not null
	begin
		create table #tmp(DogovorCode varchar(255))

		insert into #tmp(DogovorCode)
		(
		select dg.DG_CODE as DogovorCode
		from tbl_dogovor dg with(nolock)
		inner join history h
		on
		h.HI_DGCOD = dg.DG_CODE and h.HI_OaID in (20,21,22)
		where
		dg.DG_SOR_CODE not in (7,23,24)
		)

		insert into #tmp(DogovorCode)
		(
		select dg.DG_CODE as DogovorCode
		from tbl_dogovor dg with(nolock)
		inner join history h
		on
		h.HI_DGCOD = dg.DG_CODE and h.HI_OaID in (20,21,22)
		where
		dg.DG_SOR_CODE in (7,23,24)
		and
		dbo.GetNumberOfWorkingDays(dg.DG_CODE) >= @days
		)

		declare @DogovorCode varchar(50)

		declare @currency varchar(5)

		declare @rc_course money
		declare @rc_courseStr char(30)

		declare @national_currency varchar(5)
		select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

		declare @sHI_WHO varchar(25)
		exec dbo.CurrentUser @sHI_WHO output

		declare cur cursor for
			select DogovorCode from #temp

		open cur

		fetch next from cur into @DogovorCode

		while @@fetch_status = 0
		begin
			select @currency = DG_RATE from tbl_dogovor where DG_CODE = @DogovorCode

			if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@currency))
			begin
				set @rc_course = -1
				select top 1 @rc_courseStr = RC_COURSE from RealCourses
				where
				RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
				and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
				set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
			end
			else
			begin
				set @rc_courseStr = '1'
				set @rc_course = 1
			end

			if @rc_course <> -1
			begin
				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, @rc_courseStr, @currency, 'UPD', 'DOGOVORCURRENCYJOB', 20)

				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = @rc_course * DG_PRICE,
					DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * DG_DISCOUNTSUM
				where
					DG_CODE = @DogovorCode
			end
			else
			begin
				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = null,
					DG_NATIONALCURRENCYDISCOUNTSUM = null
				where
					DG_CODE = @DogovorCode

				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, 'Курс отсутствует', @currency, 'UPD', 'DOGOVORCURRENCYJOB', 21)
			end

			fetch next from cur into @DogovorCode
		end

		close cur
		deallocate cur
	end
END
GO
GRANT EXECUTE ON [dbo].[NationalCurrencyJob] TO PUBLIC 
GO
-- 090423(AlterTable_AllHotelOption).sql 23.04.09
if not exists(select id from syscolumns where id = OBJECT_ID('AllHotelOption') and name = 'AO_ParentKey')
	alter table dbo.AllHotelOption add AO_ParentKey int null
go
--
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO
-- T_DogovorUpdate.sql 23.04.09
CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.1</VERSION>
--<DATE>2009-03-03</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @ODG_Payed, @NDG_Payed, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key
	  END
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
-- 090423(AlterTable_HotelDictionary).sql 23.04.09
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='HotelDictionary' and COLUMN_NAME='HD_PayHourNote') < 254) 
	alter table HotelDictionary alter column HD_PayHourNote text null
GO
-- T_DogovorListUpdate.sql 24.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.25.0</VERSION>
--<DATE>2009-04-24</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int
  DECLARE @sDisableDogovorStatusChange varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0
				select @sDisableDogovorStatusChange = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSDisDogovorStatusChange'
				if (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
				begin
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
					Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
					IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
					BEGIN
						set @nDGSorCode_New = 7				--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
						BEGIN
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
							BEGIN
								set @nDGSorCode_New = 3			--Wait-List
								set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
							END
						END
						IF @nDGSorGlobalCode_New!=3 
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
							BEGIN
								set @nDGSorCode_New = 4			--Не подтвержден
								set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
							END

						if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
						BEGIN
							update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
						END
					end

					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
				
			END
		------------Аннуляция полиса при удаления услуги----------------------------------
		if (@sMod = 'DEL')
		BEGIN
			UPDATE InsPolicy
			SET IP_ARKEY = 0, IP_AnnulDate = GetDate()
			WHERE IP_DLKey = @DL_KEY AND IP_ARKEY IS NULL AND IP_ANNULDATE IS NULL
		END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO
-- 090424(InsertObjectAliases).sql 24.04.09
if (not exists (select OA_Id from dbo.ObjectAliases where OA_Id = 10027))
            insert into dbo.ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TableId)
            values (10027, 'PR_Key', 'Ключ (при удалении и переносе даных)', null, 17)
GO
-- 090424(CreateTables_BonusType_BonusSettings_AlterTabel_Bonus).sql 24.04.09
if NOT EXISTS(SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[BonusTypes]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	CREATE TABLE dbo.BonusTypes
	(
		BT_Id INT PRIMARY KEY CLUSTERED,
		BT_Name VARCHAR(25)
	)

	INSERT INTO dbo.BonusTypes VALUES (1, 'По услуге');
	INSERT INTO dbo.BonusTypes VALUES (2, 'По путёвке');
END
GO

IF NOT EXISTS(SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[BonusSettings]') AND OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	CREATE TABLE dbo.BonusSettings
	(
		BS_Id INT PRIMARY KEY CLUSTERED IDENTITY,
		BS_BNId INT NOT NULL,
		BS_Name VARCHAR(25) NOT NULL,
		BS_Value VARCHAR(50),
		BS_Type VARCHAR(100),
		BS_IsDeleted BIT NOT NULL DEFAULT 0
	)
	ALTER TABLE dbo.BonusSettings
		ADD CONSTRAINT FK_BonusSettings_Bonuses
			FOREIGN KEY (BS_BNId) REFERENCES dbo.Bonuses(BN_Id);
END
GO

IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE id = OBJECT_ID(N'[dbo].[Bonuses]') AND [name] = 'BN_BTId')
ALTER TABLE dbo.Bonuses
	ADD BN_BTId INT NOT NULL DEFAULT 1;

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE
	constraint_schema = 'dbo' AND table_name = 'Bonuses' AND Constraint_Name = 'FK_Bonuses_BonusTypes')
BEGIN
	ALTER TABLE dbo.Bonuses
		ADD CONSTRAINT FK_Bonuses_BonusTypes
			FOREIGN KEY (BN_BTId) REFERENCES dbo.BonusTypes(BT_Id);
END

IF NOT EXISTS (SELECT * FROM dbo.syscolumns WHERE id = OBJECT_ID(N'[dbo].[Bonuses]') AND [name] = 'BN_IsPoint')
ALTER TABLE dbo.Bonuses
	ADD BN_IsPoint BIT NOT NULL DEFAULT 0;

GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.BonusSettings TO PUBLIC
GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.BonusTypes TO PUBLIC
-- 090428(Update_Actions).sql 28.04.09
Update Actions set AC_Name = 'Турпутевка->Редактирование колонок "Нетто по счетам...", "Нетто по платежам..."' where AC_KEY = 59
GO
-- sp_GetStopSaleListData.sql 29.04.09
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetStopSaleListData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetStopSaleListData] 
GO
CREATE PROCEDURE [dbo].[GetStopSaleListData]
(
--<VERSION>2008.1.01.01a</VERSION>
@DateStart smalldatetime,
@DaysCount int,
@SVKey int,
@CNKey int = null,
@CTKey int = null,
@Code int = null, 
@PRKey int = null
)
AS
BEGIN
	CREATE TABLE #StopSaleList(
	SSL_Code int, SSL_SubCode1 int, SSL_SubCode2 int, SSL_PRKey int, SSL_PartnerName varchar(100))

	ALTER TABLE #StopSaleList ADD SSL_DataType int default 1

	DECLARE @n int, @str varchar(100)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #StopSaleList ADD SSL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END

	DECLARE @query varchar(1000), @insertQuery varchar(1000), @dateEnd datetime
	SET @dateEnd = @DateStart + @DaysCount - 1

	SET @query = 'SELECT DISTINCT QO_Code, QO_SubCode1, ISNULL(QO_SubCode2,0), SS_PRKey'
	SET @query = @query + ' FROM StopSales, QuotaObjects'
	SET @query = @query + ' WHERE QO_QTID IS NULL AND (SS_IsDeleted IS NULL OR SS_IsDeleted = 0) AND SS_QOID = QO_ID'
	SET @query = @query + ' AND SS_Date BETWEEN ''' + CAST(@DateStart as varchar(25)) + ''' AND ''' + CAST(@dateEnd as varchar(25)) + ''''
	SET @query = @query + ' AND QO_SVKey = ' + CAST(@SVKey as varchar(15))
	IF @CNKey IS NOT NULL
		SET @query = @query + ' AND QO_CNKey = ' + CAST(@CNKey as varchar(15))
	IF ISNULL(@CTKey,0) <> 0
		SET @query = @query + ' AND QO_CTKey = ' + CAST(@CTKey as varchar(15))
	IF ISNULL(@Code,0) <> 0
		SET @query = @query + ' AND QO_Code = ' + CAST(@Code as varchar(15))
	IF ISNULL(@PRKey,0) <> 0
		SET @query = @query + ' AND SS_PRKey = ' + CAST(@PRKey as varchar(15))

	SET @insertQuery = 'insert into #StopSaleList(SSL_Code, SSL_SubCode1, SSL_SubCode2, SSL_PRKey)'
	SET @insertQuery = @insertQuery + @query

	EXEC(@insertQuery)

	UPDATE #StopSaleList SET SSL_PartnerName = (Select PR_Name from Partners where PR_Key = SSL_PRKey and SSL_PRKey > 0)
	UPDATE #StopSaleList SET SSL_PartnerName = 'All partners' WHERE SSL_PRKey=0

	DECLARE @tempCode int, @tempSubCode1 int, @tempSubCode2 int, @tempPRKey int, @tempDate datetime, @tempComment varchar(255)
	DECLARE @columnName varchar(10), @updateQuery varchar(1000) 

	DECLARE curStopSalesList CURSOR FOR 
	SELECT QO_Code, QO_SubCode1, ISNULL(QO_SubCode2,0), SS_PRKey, SS_Date, REPLACE(SS_Comment,'''','"')
	FROM StopSales, QuotaObjects
	WHERE QO_SVKey = @SVKey AND QO_Code IN (SELECT SSL_Code FROM #StopSaleList) AND QO_QTID IS NULL AND 
		(SS_IsDeleted IS NULL OR SS_IsDeleted = 0) AND SS_QOID = QO_ID AND SS_Date BETWEEN @DateStart AND @dateEnd

	OPEN curStopSalesList
	FETCH NEXT FROM curStopSalesList INTO @tempCode, @tempSubCode1, @tempSubCode2, @tempPRKey, @tempDate, @tempComment
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		SET @columnName = 'SSL_' + CAST(CAST((@tempDate - @DateStart + 1) as int) as varchar(6))

		SET @updateQuery = 'UPDATE #StopSaleList SET ' + @columnName + ' = ''' + @tempComment + ''''
		SET @updateQuery = @updateQuery + ' WHERE SSL_Code = ' + CAST(@tempCode as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_SubCode1 = ' + CAST(@tempSubCode1 as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_SubCode2 = ' + CAST(@tempSubCode2 as varchar(15))
		SET @updateQuery = @updateQuery + ' AND SSL_PRKey = ' + CAST(@tempPRKey as varchar(15))
		
		EXEC(@updateQuery)

		FETCH NEXT FROM curStopSalesList INTO @tempCode, @tempSubCode1, @tempSubCode2, @tempPRKey, @tempDate, @tempComment
	END
	CLOSE curStopSalesList
	DEALLOCATE curStopSalesList

	SELECT * FROM #StopSaleList
END
GO

GRANT EXECUTE ON [dbo].[GetStopSaleListData] TO PUBLIC 
GO
--
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CourseExchange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[CourseExchange] 
GO

CREATE procedure [dbo].[CourseExchange] @cost float, @rateFrom varchar(3), @rateTo varchar(3), @date datetime, @exchangeCost float output
AS
BEGIN

	declare @course float

	select @course = cr_course from courses where cr_rcod1=@rateFrom and cr_rcod2=@rateTo and @date between cr_datebeg and cr_dateend

	if @course is null
		select @course = cr_course from courses where cr_rcod1=@rateTo and cr_rcod2=@rateFrom and @date between cr_datebeg and cr_dateend
	else
	begin
		set @exchangeCost = @cost / @course
		return
	end
	
	if @course is null
		set @exchangeCost = 0
	else
		set @exchangeCost = @cost * @course
	
END
GO

GRANT EXECUTE ON [dbo].[CourseExchange] TO PUBLIC 
GO
if NOT EXISTS (select id from syscolumns where id = OBJECT_ID('ObjectAliases') and name = 'OA_CommunicationInfo')
	ALTER TABLE dbo.ObjectAliases ADD OA_CommunicationInfo smallint
GO
UPDATE ObjectAliases SET OA_CommunicationInfo=1 WHERE 
	OA_ID IN (	1001, 
				1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1046, 1047, 1048, 
				1052, 1054, 1057, 1058, 1059, 1063, 1067, 
				1069, 1070 )
	AND OA_CommunicationInfo is null or OA_CommunicationInfo=0
GO
UPDATE Communications SET 
	CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
	CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
WHERE CM_StatusWait=0 and CM_StatusConfirmed=0 and CM_StatusNotConfirmed=0 and CM_StatusUnknown=0
GO


if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsertHistoryDetail]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[InsertHistoryDetail]
GO

create PROCEDURE [dbo].[InsertHistoryDetail]
(
--<VERSION>2007.2.22.1</VERSION>
	@nHIID int,
	@nOAId int,
	@sValueOld varchar(255),
	@sValueNew varchar(255),
	@nIntValueOld int = null,
	@nIntValueNew int = null,
	@dtDateTimeValueOld datetime = null,
	@dtDateTimeValueNew datetime = null,
	@nInvisible int = 0,
	@bNeedCommunicationUpdate smallint = null output
)
as
	SET CONCAT_NULL_YIELDS_NULL OFF 

	declare @sAlias varchar(32), @sText varchar(255), @nCommunInfo smallint
	select @sAlias = left(OA_Alias, 32), @sText = OA_Name, @nCommunInfo=OA_CommunicationInfo from ObjectAliases where OA_Id = @nOAId
	If @nCommunInfo=1
		SET @bNeedCommunicationUpdate=1
	--print CAST(@nOAId as varchar(10)) + ' = ' + CAST(@nCommunInfo as varchar(10)) + ' / ' + CAST(@bNeedCommunicationUpdate as varchar(10))
	INSERT INTO dbo.HistoryDetail (HD_HIID, HD_OAId, HD_Alias, HD_Text, HD_ValueOld, HD_ValueNew,
		HD_IntValueOld, HD_IntValueNew, HD_DateTimeValueOld, HD_DateTimeValueNew, HD_Invisible)
	VALUES (@nHIID, @nOAId, @sAlias, @sText, @sValueOld, @sValueNew,
		@nIntValueOld, @nIntValueNew, @dtDateTimeValueOld, @dtDateTimeValueNew, @nInvisible)

	SET CONCAT_NULL_YIELDS_NULL ON
GO
GRANT EXECUTE ON [dbo].[InsertHistoryDetail] TO Public
GO


--090504(AddColumnToDiscounts).sql
if not exists (select * from dbo.syscolumns where name = 'DS_DaysBeforeCheckIn' and id = object_id(N'[dbo].[Discounts]'))
	alter table Discounts add DS_DaysBeforeCheckIn int
GO
if not exists (select * from dbo.syscolumns where name = 'DS_DogovorCreateDateFrom' and id = object_id(N'[dbo].[Discounts]'))
	alter table Discounts add DS_DogovorCreateDateFrom datetime
GO
if not exists (select * from dbo.syscolumns where name = 'DS_DogovorCreateDateTo' and id = object_id(N'[dbo].[Discounts]'))
	alter table Discounts add DS_DogovorCreateDateTo datetime
GO
--090504(UpdateAllHotelOption).sql
update AllHotelOption set AO_NameLat = 'en_' + AO_Name where AO_NameLat is null
go
--090421(p_SPOListResults).sql
if exists(select id from sysobjects where xtype='p' and name='SPOListResults')
	drop proc dbo.SPOListResults
go

Create PROCEDURE [dbo].[SPOListResults] 
(
	@filter varchar(1024),
	@searchType varchar (10),
	@dateFrom varchar (10),
	@dateTo varchar (10),
	@top varchar(10)
)
AS
DECLARE @additionalQuery varchar (1024)

if (@searchType = 'SPO')
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 1) > 0)'
	END
else if (@searchType = 'Leader')
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 2) > 0)'
	END
else
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 3) > 0)'
	END

DECLARE @command varchar (8000)
SET @command =
'
CREATE TABLE #resultsTable (
	[createdate] [datetime],
	[tourname] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[tourhttp] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[resort] [varchar] (1024) COLLATE Cyrillic_General_CI_AS,
	[hotels] [varchar] (7000) COLLATE Cyrillic_General_CI_AS, 
	[tourdates] [varchar] (1024),
	[countryName] [varchar] (25) COLLATE Cyrillic_General_CI_AS,
	[countryNameLat] varchar (25),
	[countryKey] int, 
	[tourKey] int,
	[tourListKey] int
) 

DECLARE @tourkey  int
DECLARE @hotelkey  int
DECLARE @tourdate datetime
DECLARE @resortkey  int
DECLARE @countrykey  int
DECLARE @createdate datetime
DECLARE @tourlistkey int

DECLARE @lastTourkey int
DECLARE @lastTourListKey int
DECLARE @lastHotelkey int
DECLARE @lastResortkey int
DECLARE @lastCountrykey int
DECLARE @lastCreateDate datetime
DECLARE @exit bit
DECLARE @resortKeys varchar(8000);



DECLARE @hotelNames varchar (7000)
DECLARE @tourDates varchar (1024)
DECLARE @resorts varchar (1024)

SET @lastTourkey = -1
SET @lastHotelkey = -1
SET @lastResortkey = -1
SET @exit = 0
SET @resortKeys = ''''

SELECT distinct top '+ @top +'sd_tourkey, SD_TOURCREATED into #tempSpoTable from MWSPoDataTable ' + @filter +' '+ @additionalQuery + ' ORDER BY SD_TOURCREATED DESC 

DECLARE SPO_Cursor CURSOR FOR
SELECT SD_TOURCREATED, SD_TOURKEY, SD_HDKEY, td_date, SD_RSKEY, SD_CNKEY, SD_TLKEY
FROM MWSPoDataTable inner join tp_turdates on (sd_tourkey = td_tokey)
WHERE sd_tourkey in (select sd_tourkey from  #tempSpoTable) ORDER BY sd_CNKEY,sd_tourkey, sd_hdkey, sd_rskey

OPEN SPO_Cursor

if (@@CURSOR_ROWS > 0)
Begin

FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @countrykey, @tourlistkey
WHILE 1=1
BEGIN
    
    if (((@lastTourkey = -1) OR (@lastTourkey = @tourkey)) AND (@@FETCH_STATUS = 0))
	BEGIN
		--Отели
		IF (@lastHotelkey <> @hotelkey)
			BEGIN
				declare @hdName varchar (1024)
				declare @hdUrl varchar (1024)
				SELECT @hdName = (isnull (HD_NAME,'''') + '' '' + ltrim(rtrim(isnull(HD_STARS,'''')))), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
				if (@lastTourkey = -1)
					BEGIN
						SET @hotelNames = @hdName + ''|'' + @hdUrl
					END
				else
					BEGIN
						SET @hotelNames = @hotelNames + '', '' + @hdName + ''|'' + @hdUrl
					END
				SET @lastHotelkey = @hotelkey
			END
		
		if (@lastTourkey = -1)
			BEGIN
				if (@resortkey is NULL)
					SET @resorts = ''нет''
			END
		
		IF (@resortkey is not null)
			BEGIN
				declare @rsName varchar (50)
															
				if (CHARINDEX(''|''+CAST(@resortkey as varchar)+''|'',@resortKeys) = 0)
					BEGIN
						SET @resortKeys = @resortKeys + ''|'' + CAST(@resortkey as varchar) +''|''
						SELECT @rsName = RS_NAME from resorts where RS_KEY = @resortkey
						if (@lastTourkey = -1)
							BEGIN
								SET @resorts = @rsName
							END
						else
							BEGIN
								SET @resorts = @resorts + '', '' + @rsName
						END
					END
		
			END

			SET @lastCountrykey = @countrykey
			SET @lastCreateDate = @createdate
			SET @lastTourListKey = @tourlistkey
	
		
	END
    else
	BEGIN
		
		if @@FETCH_STATUS <> 0
			SET @exit = 1
		
		DECLARE @tourName varchar(128)
		DECLARE @tourHttp varchar(128)
		SELECT @tourName = TL_NAMEWEB, @tourHttp = TL_WEBHTTP from TURLIST where TL_KEY = @lastTourListKey
		
		DECLARE @countryName varchar(25)
		DECLARE @countryNameLat varchar(25)

		SELECT @countryName = CN_NAME, @countryNameLat = CN_NAMELAT FROM tbl_Country WHERE CN_KEY = @lastCountrykey
		
		DECLARE @currentDate dateTime
		DECLARE @lastDate dateTime
		DECLARE @lastWriteDate dateTime
		DECLARE @first int
		DECLARE @datesInInterval int

		SET @first = 0

		DECLARE SPODate_Cursor CURSOR FOR
		SELECT DISTINCT td_date FROM tp_turdates
		WHERE td_tokey = @lastTourkey AND td_date >= ''' + @dateFrom + ''' AND td_date <= ''' + @dateTo + '''  ORDER BY td_date
		
		OPEN SPODate_Cursor

		FETCH NEXT FROM SPODate_Cursor INTO @currentDate

		WHILE @@FETCH_STATUS = 0
			BEGIN
					
					if (@first = 0)
						BEGIN 
							SET @datesInInterval = 0
							SET @first = 1
							SET @lastWriteDate = @currentDate
							SET @tourDates = CONVERT (char(5),@currentDate, 4)
						END
					else
						BEGIN
							if (@currentDate <> DATEADD (day,1,@lastDate))
								BEGIN
									SET @datesInInterval = 0
									if (@lastWriteDate = @lastDate)
										SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
									else
										SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@lastDate, 4) + '', '' + CONVERT (char(5),@currentDate, 4)
									SET @lastWriteDate = @currentDate
								END
						END
						SET @datesInInterval = @datesInInterval + 1
						SET @lastDate = @currentDate
						FETCH NEXT FROM SPODate_Cursor INTO @currentDate
				
			END
		CLOSE SPODate_Cursor
		DEALLOCATE SPODate_Cursor

		if (@lastWriteDate <> @currentDate)
			BEGIN
				if (@datesInInterval > 1)
					SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
				else
					BEGIN
						if (@currentDate <> DATEADD (day,1,@lastWriteDate))
							SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
						else
							SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
					END
			END
		

		INSERT #resultsTable Values (@lastCreateDate, @tourName, @tourHttp, @resorts, @hotelNames, @tourDates, @countryName, @countryNameLat, @lastCountrykey,  @lastTourkey, @lastTourListKey)
		
		if (@exit = 1)
			BREAK
		
		SELECT @hdName = isnull (HD_NAME,''''), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
		SET @hotelNames = @hdName + ''|'' + @hdUrl
		if (@resortKey is not NULL)
			BEGIN
				SET @resortKeys = ''|'' + CAST (@resortkey as varchar) + ''|''
				SELECT @resorts = RS_NAME from resorts where RS_KEY = @resortkey
			END
		else
			SET @resorts = ''нет''

		SET @lastHotelkey = @hotelkey
		SET @lastCountrykey = @countrykey
		SET @lastCreateDate = @createdate
		SET @lastTourListKey = @tourlistkey
	
	END

	
	SET @lastTourkey = @tourkey
	
	FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @countrykey, @tourlistkey
END
end

CLOSE SPO_Cursor
DEALLOCATE SPO_Cursor


SELECT * FROM #resultsTable
DROP TABLE #tempSpoTable
DROP TABLE  #resultsTable'

exec (@command)
go

grant exec on dbo.SPOListResults to public
go
--sp_GetServiceCost.sql 2009-05-05
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[GetServiceCost] 
GO
CREATE PROCEDURE [dbo].[GetServiceCost] 
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0, 
		@sellDate dateTime, @netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output
as
--<DATE>2009-04-16</DATE>
---<VERSION>7.2.24.1</VERSION>

SET DATEFIRST 1
DECLARE @tourlong int

Set @sellDate = ISNULL(@sellDate,GetDate())

If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (14,6), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint


set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END

	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

	if @UseTypeDivisionMode > 0
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
		ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
					and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
	else
		declare costCursor cursor local fast_forward for
		select 
		CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
		CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
		CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND,
		ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
			from tbl_costs               
			WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
				    CS_PrKey = @prKey and CS_PkKey = @packetKey
				--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
				    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
	            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
		    ORDER BY
					CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
					CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC

	--1, 
	open costCursor

	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

If @days >1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	If @@fetch_status = 0
	BEGIN

		declare @TMPTable Table 
 		( CL_Date datetime,
		CL_CostNetto decimal(14,4),
		CL_Cost decimal(14,4),
		CL_Discount smallint,
		CL_Type smallint,
		CL_Rate varchar(2),
		CL_Course decimal(14,4),
		CL_Pax smallint default 1,
		CL_ByDay smallint,
		CL_Part smallint,
		CL_Profit decimal(14,4))

		DECLARE @temp_date DATETIME
		SET @temp_date = @date + @days - 1

		while @temp_date >= @date 
		BEGIN -- begin while @temp_date >= @date 
			insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
			set @temp_date = @temp_date - 1 
		END  -- end while @temp_date >= @date 
	END
	Else
	BEGIN
		close costCursor
		deallocate costCursor
		return 0
	END

	set @COST_ID = 1 --идетификатор уникальности цены
	If @CS_ByDay = 2
		Set @nCostByDayExists = 1

	If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
		insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
END

set @NotCalculatedCosts = 1
set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
BEGIN -- While (@@fetch_status = 0)
	-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
	Set @IsFetchNormal = 1
		-- если не указаны даты периодов, то значит указаны даты заедов
		-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

	If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
		if CHARINDEX ( @WeekDate, @CS_Week ) = 0
			Set @IsFetchNormal = 0
		Else
			Set @CS_Week = ''

	If @tourlong > 0 and @svKey = 1
	Begin		
		If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
			Set @IsFetchNormal = @IsFetchNormal
		else
			Set @IsFetchNormal = 0
	end     

	If @svKey != 1
	begin
		If @CS_LongMin is not null and @CS_LongMin > @days
			Set @IsFetchNormal = 0
	end

	-- Если время не задано, то увеличиваем период продажи на один день. Иначе, смотрим точный период.
	If DATEPART(hour, @CS_DateSellEnd)+DATEPART(minute, @CS_DateSellEnd) = 0
		Set @CS_DateSellEnd = @CS_DateSellEnd + 1
	-- При переходе с 5.2 возможны цены с периодом продаж оганиченном только с одной стороны.
	If (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
		Set @IsFetchNormal = @IsFetchNormal 
	else
		Set @IsFetchNormal = 0

	If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = (@date + @days - 1) -- смотрим может есть цена за период точно совпадает с периодом действия услуги
		Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
			CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
--		Set @IsFetchNormal = 0
	If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
	BEGIN
		If CHARINDEX ( @WeekDate, @CS_Week ) > 0
			Set @IsFetchNormal = @IsFetchNormal 
		Else
			Set @IsFetchNormal = 0
	END

	If @Days = 1 and @CS_Date > @date
		Set @IsFetchNormal = 0

	If @Days = 1 and @CS_ByDay in (3,4)
		Set @IsFetchNormal = 0

--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
/*
	If 	@CS_CheckInDateBEG is not null
	BEGIN
		Set @CS_Date = null
		Set @CS_DateEnd = null
	END
*/
		If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
		BEGIN			--цены подходят для поиска
			Set @CS_Date = (isnull(@CS_Date,@date))
			Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

			If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
			BEGIN
				update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
						CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
				if not exists (select * from @TMPTable where CL_Date = @date + @days)
					insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
				Set @nCostByDayExists = 1	
			END

			if @CS_Date < @date
				Set @CS_Date = @date
			if @CS_DateEnd > @date + @days
				Set @CS_DateEnd = @date + @days
			Set @CS_Discount = ISNULL(@CS_Discount,0)
			Set @TMP_Number_Period = null

			if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
			BEGIN -- if @CS_ByDay = 3
				if (@CS_DateEnd - @CS_Date + 1) >= 7
				BEGIN
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
					while @TMP_Number >= 7
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
	
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @TMP_Number = @TMP_Number - 7
						SET @TMP_Date = @TMP_Date + 7
						SET @COST_ID = @COST_ID + 1
					END
				END
			END	-- if @CS_ByDay = 3

	--		print 'поиск'
			if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
			BEGIN -- if @CS_ByDay = 0
	--			print 'период'
				select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
					Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

				if @CS_Date < @TMP_Date and @date < @TMP_Date
				BEGIN
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
			--		print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN					
						select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
						if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
						BEGIN
							select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
								Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
						END
					END
					Set @TMP_Number_Period = null
				END

				if @CS_Long is null or @CS_Long > @TMP_Number
				BEGIN
					--если предыдущий период захватывается полностью, то его надо включить
					--это делается только в случае, если цену указана за период
			--		print @TMP_Date + @TMP_Number
					select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
		--			print @TMP_Number_Period
					if @TMP_Number_Period is not null
					BEGIN 
						select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
	--					print @TMP_Date_Period
						if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
							Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
					END
				END

				if @CS_Long is not null and @CS_Long < @TMP_Number
					set @TMP_Number = @CS_Long

				if @CS_LongMin is null or @CS_LongMin <= @TMP_Number
				BEGIN
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
						CL_Pax = 1, CL_Profit = @CS_Profit
						WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
					UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
					SET @COST_ID = @COST_ID + 1
				END
			END	-- if @CS_ByDay = 0
	
			if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
			BEGIN -- if @CS_ByDay = 1/2
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				if 1=1 -- временная заглушка, 
				BEGIN  -- если Цена удовлетворяет условиям
					SET @DayOfWeeks = @CS_Week
					While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
					BEGIN
						select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
						update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
							Where CL_Part = @TMP_Number
					END				

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay in (-1,4) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

					SET @COST_ID = @COST_ID + 1
				END   -- если Цена удовлетворяет условиям
			END	-- if @CS_ByDay = 1

			if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
			BEGIN -- if @CS_ByDay = 4
				if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
					Set @CS_DateEnd = @date + @CS_Long - 1

				SET @DayOfWeeks = ''
				Set @CS_Week = REPLACE(@CS_Week,'.','');

				if @CS_Week != ''
				BEGIN			
					Set @TMP_Number = 1
					Set @DayOfWeeks = LEFT(@CS_Week,1)
					while @TMP_Number < LEN(@CS_Week)
					BEGIN
						Set @TMP_Number = @TMP_Number + 1
						Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
					END
				END
				
				-- доп.ночи могут только добивать в конец, первый день точно не к ним
				If @CS_Date = @date
					Set @CS_Date = @CS_Date + 1

				IF @DayOfWeeks = ''
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1)
				ELSE
					UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
						CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
						WHERE	CL_DATE between @CS_Date and @CS_DateEnd and (CL_ByDay = -1) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
				SET @COST_ID = @COST_ID + 1
			END	-- if @CS_ByDay = 4
			select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
		END -- цены подходят для поиска и есть продолжительность
		ELSE
			If @IsFetchNormal = 1
				Set @NotCalculatedCosts = 0

	If (@Days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
	BEGIN
		fetch next from costCursor 
			into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
					@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
					@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1
			Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
		Else
			Set @FindCostByPeriod = 0
	END
END -- While (@@fetch_status = 0)
close costCursor
deallocate costCursor

--if @svKey = 3 
--	insert into TMP (CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit) select CL_Date, CL_CostNetto, CL_Cost, CL_Discount, CL_Type, CL_Rate, CL_Course, CL_ByDay, CL_Part, CL_Profit from @TMPTable

if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
BEGIN
	set @nettoDetail = '='
	set @sDetailed = '='
	while exists (select * from @TMPTable where CL_Course != 0)
	begin
		SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
						@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
		from			@TMPTable 
		where			CL_Course != 0	 
		Order By		CL_Date

		Set @TMP_Number = 0
		Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
		UPDATE @TMPTable SET CL_Course = 0 WHERE CL_Part = @TMP_Number_Part
		if @nettoDetail != '='
			Set @nettoDetail = @nettoDetail + ' +'
		if @sDetailed != '='
			Set @sDetailed = @sDetailed + ' +'

		Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
		Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

		if @TMP_Number != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
		end

		if @TMP_Number_Pax != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
		end

		if @TMP_Number_Course != 1
		begin
			Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
		end
	end

	If ISNULL(@profitValue,0) > 0
		Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

	if @marginCalcValue > 0
		Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

	If ISNULL(@discount,0) > 0
		Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
END
GO
GRANT EXECUTE ON [dbo].[GetServiceCost] TO PUBLIC 
GO
--T_PaymentDetailsUpdate.sql 2009-05-06
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_PaymentDetailsUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_PaymentDetailsUpdate]
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

CREATE TRIGGER dbo.T_PaymentDetailsUpdate
ON [dbo].[PaymentDetails] 
FOR UPDATE, INSERT, DELETE
AS
-- VERSION 2007.2 
-- 2009-05-06

IF @@ROWCOUNT > 0
BEGIN
  DECLARE @nDGKey int
  DECLARE @nPMId int
  DECLARE @nDelCount int
  DECLARE @nInsCount int

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
      DECLARE cur_PaymentDetails CURSOR FOR 
      SELECT N.PD_DGKey, N.PD_PMId			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
    DECLARE cur_PaymentDetails CURSOR FOR 
      SELECT 	O.PD_DGKey, O.PD_PMId
      FROM DELETED O
  END
  ELSE 
  BEGIN
    DECLARE cur_PaymentDetails CURSOR FOR 
    SELECT 	N.PD_DGKey, N.PD_PMId			
    FROM DELETED O, INSERTED N 
    WHERE N.PD_Id = O.PD_Id
  END

    OPEN cur_PaymentDetails
    FETCH NEXT FROM cur_PaymentDetails INTO @nDGKey, @nPMId
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка------------------------   
		If @nDGKey > 0
			EXEC dbo.DogovorPayment @nDGKey
		
		EXEC dbo.UpdatePayment @nPMId

		FETCH NEXT FROM cur_PaymentDetails INTO @nDGKey, @nPMId	
	END
  CLOSE cur_PaymentDetails
  DEALLOCATE cur_PaymentDetails
 END
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
--sp_UpdatePayment.sql 2009-05-06
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UpdatePayment]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[UpdatePayment]
GO
CREATE    PROCEDURE [dbo].[UpdatePayment]
(
--<VERSION>2007.2.25 (2009.5.6)</VERSION>
	@nPMId int
) AS

DECLARE @mPDSum money, @mPMSum money, @sPDReason varchar(255), @sPMReason varchar(4000)
SET @mPDSum = 0
SET @mPMSum = 0
SET @sPDReason = ''
SET @sPMReason = ''

DECLARE cur_Details CURSOR FOR 
SELECT PD_Sum, PD_Reason
FROM PaymentDetails where PD_PMId = @nPMId

OPEN cur_Details
FETCH NEXT FROM cur_Details INTO @mPDSum, @sPDReason
WHILE @@FETCH_STATUS = 0
BEGIN

 Set @mPMSum = @mPMSum + @mPDSum
 Set @sPMReason = @sPMReason + ' ' + @sPDReason

FETCH NEXT FROM cur_Details INTO @mPDSum, @sPDReason
END

CLOSE cur_Details
DEALLOCATE cur_Details

UPDATE Payments SET PM_Used = @mPMSum, PM_Reason = @sPMReason where PM_Id = @nPMId

GO
GRANT EXECUTE ON dbo.UpdatePayment TO PUBLIC 
GO
--090505(AlterTable_Resorts).sql
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='Resorts' and COLUMN_NAME='RS_NAME') < 50) 
	alter table Resorts alter column RS_NAME varchar(50) not null
GO

if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='Resorts' and COLUMN_NAME='RS_NAMELAT') < 50) 
	alter table Resorts alter column RS_NAMELAT varchar(50) null
GO
--090507(AlterTable_ExcurDictionary).sql
alter table ExcurDictionary alter column ED_COMMENT text null
GO
--T_DogovorUpdate.sql 2009-05-07
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.1</VERSION>
--<DATE>2009-03-03</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN

					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
						SET @nDGSorCode_New = 7					--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Wait>0)
								SET @nDGSorCode_New = 3			--Wait-List

						IF @nDGSorCode_New != 3 
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Control > 0)
								SET @nDGSorCode_New = 4			--Не подтвержден

						UPDATE Dogovor SET DG_Sor_Code = @nDGSorCode_New WHERE DG_Key=@DG_Key
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key
	  END
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
--090519(AlterTable_AnkCases).sql
if not exists(select id from syscolumns where id = OBJECT_ID('Ank_Cases') and name = 'AC_Value')
	alter table dbo.Ank_Cases add AC_Value varchar(120) null
go

update dbo.Ank_Cases set AC_Value = AC_Name where AC_Value is null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Ank_Country') and name = 'AC_Common')
	alter table dbo.Ank_Country add AC_Common smallint default(0)
go
--090515(AlterColumns).sql
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='PriceList' and COLUMN_NAME='PL_RMName')<60) 
alter table PriceList alter column PL_RMName varchar(60)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='PriceList' and COLUMN_NAME='PL_RCName')<60) 
alter table PriceList alter column PL_RCName varchar(60)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='PriceList3' and COLUMN_NAME='PL_RMName')<60) 
alter table PriceList3 alter column PL_RMName varchar(60)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='PriceList' and COLUMN_NAME='PL_RSName')<50) 
alter table PriceList alter column PL_RSName varchar(50)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='mwPriceDataTable' and COLUMN_NAME='pt_rmname')<60) 
alter table mwPriceDataTable alter column pt_rmname varchar(60)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='mwPriceDataTable' and COLUMN_NAME='pt_rcname')<60) 
alter table mwPriceDataTable alter column pt_rcname varchar(60)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='mwPriceDataTable' and COLUMN_NAME='pt_rsname')<50) 
alter table mwPriceDataTable alter column pt_rsname varchar(50)
GO
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='mwPriceDataTable' and COLUMN_NAME='pt_rccode')<40) 
alter table mwPriceDataTable alter column pt_rccode varchar(40)
--090522(TP_Tours_add_columns).sql
if not exists(select id from syscolumns where id = OBJECT_ID('TP_Tours') and name = 'TO_MinPrice')
	ALTER TABLE [dbo].[TP_Tours] ADD TO_MinPrice float null
go

if not exists(select id from syscolumns where id = OBJECT_ID('TP_Tours') and name = 'TO_HotelNights')
	ALTER TABLE [dbo].[TP_Tours] ADD TO_HotelNights varchar(50) null
go

update TP_Tours set TO_MinPrice = (
	select min(TP_Gross) 
	from TP_Prices 
		left join TP_Lists on ti_key = tp_tikey
		left join HotelRooms on hr_key = ti_firsthrkey
		
	where TP_TOKey = TO_Key and hr_main > 0
	)
go

update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key)
go
--sp_InsDogovor.sql 2009-06-01
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsDogovor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.InsDogovor
GO
CREATE procedure [dbo].[InsDogovor]
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (70) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@sOldDogovor varchar (10) = null		-- должен быть ПОСЛЕДНИМ !!!!! -- предыдущий номер договора, передается при переименовании путевки
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType)


	-- Begin Donskov 17.03.2009

	-- находим национальную валюту
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@sRate))
	begin
		-- проверяем, есть ли курс валюты в базе
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else
	begin
		set @rc_course = 1
		set @rc_courseStr = '1'
	end

	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	-- 1) пишем в хистори курс валюты
    -- 2) в созданную путёвку записываем стоимость в национальной валюте и скидку в национальной валюте
	--    (если присутствует соответствующий курс в базе)
	if @rc_course <> -1
	begin
		-- 1: пишем в хистори
		if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20) > 0
		begin
			delete from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20
		end

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'INS', 'DOGOVORCURRENCY', 20)

		-- 2: в созданную путёвку записываем стоимость и скидку в национальной валюте 
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @rc_course * @nPrice,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_Key = @nKeyDogovor
	end
	else
	begin
		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'INS', 'DOGOVORCURRENCYISNULL', 21)
	end
	-- End Donskov 17.03.2009

	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent
	Select @sValue = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseTimeLimit'
	if @sValue = '1'
		exec dbo.CreatePPaymentDate @sDogovor, @dTour, @dtCurrentDate

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0
GO

GRANT EXECUTE ON dbo.InsDogovor TO PUBLIC 
GO
--sp_CalculatePriceList.sql 2009-06-02
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nGroupByPeriod smallint,	-- 0 - не группировать цены по периодам, 1 - группировать
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nGroupByPeriod=0
		SET @sHI_Text='With period group'
	ELSE
		SET @sHI_Text='Without period group'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11005, null, @sHI_Text, null, @nGroupByPeriod, null, null, 0

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		) ON [PRIMARY]
		DELETE FROM #TP_Prices
		INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM #TP_Prices)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))
		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'

		fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN
			if @dtPrevDate <> @turdate
				set @nPrevGrossDate = @dtPrevDate
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate
			BEGIN
				select @nPrevGrossKey = xtp_key, @nPrevGross = xtp_gross from #tp_prices where xtp_dateend  = @nPrevGrossDate and xtp_tikey = @variant
				set @price_brutto = 0
				set @nPrevVariant = @variant
				set @dtPrevDate = @turdate
				if @sUseServicePrices = '1'
					delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
			END
			if @nTempGross is not null and @nSvkey <> 1
			BEGIN
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			END
			else
			BEGIN
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			END
			set @price_brutto = @price_brutto + @nBrutto
			fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
			set @fetchStatus = @@fetch_status

			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				if @price_brutto is not null
				BEGIN
				exec RoundPriceList @round, @price_brutto output
					if @nUpdate = 0 or @nGroupByPeriod = 0
					BEGIN
						if @nPrevGross = @price_brutto and @nGroupByPeriod = 1
							update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nPrevGrossKey
						else
						BEGIN
							if exists(select 1 from #tp_prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
								update #tp_prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							else
							BEGIN
								insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
								if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
								BEGIN
									exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
								END
							END
						END
					END					
					else
					BEGIN
					---ДОЗАПИСЬ СТАРТ---------------------
						if (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant) = 0
						BEGIN
							insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						END
						else
						BEGIN
							declare @nKey int
							declare @dBegin datetime
							declare @dEnd datetime
							declare @fGross money
							declare @fSetPrevPrice smallint	-- признак наличия цены на текущий вариант на ранние даты
							declare @fSetNextPrice smallint	-- признак наличия цены на текущий вариант на поздние даты
							declare @nSetPrevKey int	-- ключ цены на текущий вариант на ранние даты
							declare @nSetNextKey int	-- ключ цены на текущий вариант на поздние даты
							declare @nSetPrevGross money	-- ценa на текущий вариант на ранние даты
							declare @nSetNextGross money	-- ценa на текущий вариант на поздние даты
							declare priceCursor cursor local fast_forward  for
								select xtp_key, xtp_datebegin, xtp_dateend, xtp_gross
								from #tp_prices
								where xtp_tikey = @nPrevVariant
								order by xtp_datebegin
							set @fSetPrevPrice = 0
							set @fSetNextPrice = 0
							set @nSetPrevKey = -1
							set @nSetNextKey = -1
							set @nSetPrevGross = -1
							set @nSetNextGross = -1
							open priceCursor
							fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							While (@@fetch_status = 0)
							BEGIN
								if @dtPrevDate = @dEnd or @dtPrevDate = @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @fSetNextPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetNextKey = @nKey
									set @nSetPrevGross = @fGross
									set @nSetNextGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate > @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetPrevGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate <@dEnd
								BEGIN
									set @fSetNextPrice = 1
									set @nSetNextKey = @nKey
									set @nSetNextGross = @fGross
								END
								fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							END
							close priceCursor
							deallocate priceCursor
							if @nSetPrevKey is not null and @nSetNextKey is not null -- есть интервалы цен до и после текущей даты, либо цена попала в существующий интервал
							BEGIN
								if @nSetPrevKey <> @nSetNextKey-- цена не попала в существующий период
								BEGIN
									if @nSetPrevGross = @nSetNextGross and (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate) = 1 -- есть одиночная цена в базе на тек. дату
									BEGIN
										set @nKey = null
										set @fGross = null
										select @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate
										if @fGross <> @price_brutto
										BEGIN
											if @price_brutto = @nSetNextGross or @price_brutto = @nSetPrevGross
											BEGIN
												delete from #tp_prices where xtp_key = @nKey
												if @nSetPrevGross = @price_brutto
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
												if @nSetNextGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
											END
											else
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nKey
										END
									END
									else -- на текущую дату в базе нет цены
									BEGIN -- здесь надо попробовать схлопнуть периоды
										if @nSetPrevGross = @price_brutto
											update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
										if @nSetNextGross = @price_brutto
											update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
										if @nSetNextGross <> @price_brutto and @nSetPrevGross <> @price_brutto
										BEGIN
											insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
											if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
											BEGIN
												exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
												set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
											END
										END
									END
								END
								else -- цена попала в существующий период
								if @nSetPrevGross <> @price_brutto
								BEGIN	-- здесь надо расхлопнуть периоды
								-- в итоге вместо одного периода цен будет 2 или 3 периода
									set @dDateBeg1 = null
									set @dDateBeg3 = null
									set @dDateEnd1 = null
									set @dDateEnd3 = null
									select @dDateBeg1 = xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey
									select top 1 @dDateEnd1 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date < @dtPrevDate order by td_date DESC
									select top 1 @dDateBeg3 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date > @dtPrevDate order by td_date ASC
									select @dDateEnd3 = xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey
									if @dDateBeg1 <> @dtPrevDate and @dDateEnd3 <> @dtPrevDate
									BEGIN
										update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dDateBeg3, @dDateEnd3, @nSetPrevGross, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
									END
									else
									BEGIN
										if @dDateBeg1 = @dtPrevDate and @dDateEnd3 = @dtPrevDate
										BEGIN
											declare @leftKey int
											declare @leftGross money
											declare @rightKey int
											declare @rightGross money
											select top 1 @leftKey = xtp_key, @leftGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend desc
											select top 1 @rightKey = xtp_key, @rightGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_dateend asc
											if @leftKey is null and @rightKey is null
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											if @leftKey is not null and @rightKey is not null
											BEGIN
												if @leftGross = @rightGross and @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = (select xtp_dateend from #tp_prices where xtp_key = @rightKey) where xtp_key = @leftKey
													delete from #tp_prices where xtp_key in (@rightKey, @nSetPrevKey)
												END
												if @leftGross = @rightGross and @rightGross <> @price_brutto
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if @leftKey is not null and (@rightKey is null or @rightGross <> @price_brutto)
											BEGIN
												if @leftGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @leftKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if (@leftKey is null or @leftGross <> @price_brutto) and @rightKey is not null
											BEGIN
												if @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @rightKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
										END
										else
										BEGIN
											set @nKey = null
											set @fGross = null
											if @dDateBeg1 = @dtPrevDate
											BEGIN
												update #tp_prices set xtp_datebegin = @dDateBeg3 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend DESC
												if @fGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nKey
													--if (select xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey) > (select xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey)
													--delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
											else
											BEGIN
												update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_datebegin ASC
												if @fGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nKey
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
										END
									END
								END
							END
							else -- здесь нет двух цен по разные стороны от текущей даты
							BEGIN
								if @nSetPrevGross <> @price_brutto and @nSetNextGross <> @price_brutto
								BEGIN
									insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
									if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
									BEGIN
										exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
									END
								END
								else
								BEGIN
									if @fSetPrevPrice = 1
										update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
									if @fSetNextPrice = 1
										update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
								END
							END
						END
					END  ----------------------------------------------------------------
				END
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END
		END
		close serviceCursor
		deallocate serviceCursor
		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 96
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		select 	@TPkeyMax = MAX(xtp_key), 
				@TPkeyMin = MIN(xtp_key) 
		from 	#tp_prices

		while 	@TPkeyMin <= @TPkeyMax
		BEGIN
			begin tran tEnd
			INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
				select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from #tp_prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
			commit tran tEnd
			Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------
		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		CREATE TABLE #TP_Lists (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(60) , 
            [xTI_RMName] varchar(60) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(50),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      ) ON [PRIMARY]
      DELETE FROM #TP_Lists
      INSERT INTO #TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update #TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update #TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update #TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update #TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update #TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update #TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update #TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update #TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update #TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update #TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update #TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update #TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update #TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update #TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update #TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update #TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update #TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update #TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update #TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update #TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from #tp_prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  #tp_lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG 
								   and exists (select 1 from #TP_Prices where TD_Date=xTP_DateBegin and xTP_TIKey=xTI_Key) )
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from #tp_prices, #tp_lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO
--090602(TurServiceIndex).sql
IF  EXISTS (SELECT *
FROM SYSINDEXES
WHERE NAME LIKE 'X_SVKEY_TRKEY')
     DROP INDEX TURSERVICE.X_SVKEY_TRKEY 

CREATE INDEX X_SVKEY_TRKEY ON TURSERVICE (TS_SVKEY, TS_TRKEY)
GO
--090603(AddDescType).sql
if not exists(select DT_Key from dbo.DescTypes where DT_Key = 128)
	insert dbo.desctypes (DT_Key, DT_Name, DT_TableID) values (128, 'Настройка формы регистрации', 43)
else
	print 'Внимание! Настройка с ключом 128 уже присутствует в таблице DescTypes. Свяжитесь с нашей службой поддержки.'
GO
--sp_GetCurrentNationalCurrencyRate.sql 2009-06-05
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetCurrentNationalCurrencyRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetCurrentNationalCurrencyRate]
GO
CREATE PROCEDURE [dbo].[GetCurrentNationalCurrencyRate]
@currency varchar(100),
@res money output
AS
BEGIN
	set @res = null 
	 
	declare @national_currency varchar(5) 
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1 
	 
	if @national_currency = @currency 
	begin 
		set @res = 1 
	end 
	else 
	begin 
		select top 1 @res = RC_COURSE from RealCourses
		where 
		RC_RCOD1 = @national_currency and RC_RCOD2 = @currency 
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102) 
	end 
END

return 0
GO
GRANT EXECUTE ON [dbo].[GetCurrentNationalCurrencyRate] TO PUBLIC 
GO
--090609(AddSetting).sql
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSPrtReg')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSPrtReg', '1')
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSPrtRegQuestion')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSPrtRegQuestion', '1')
GO
--090616(AddSetting).sql
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSSetPayer')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSSetPayer', '0')
GO
--sp_FillMasterWebSearchFields.sql 2009-06-16
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null)
as
begin
	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars varchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname varchar(200),
		thd_tourname varchar(200),
		thd_hdname varchar(200),
		thd_ctname varchar(200),
		thd_rsname varchar(200),
		thd_ctfromname varchar(200),
		thd_cttoname varchar(200),
		thd_tourtypename varchar(200),
		thd_pncode varchar(50),
		thd_hdorder int,
		thd_hotelkeys varchar(256),
		thd_pansionkeys varchar(256),
		thd_hotelnights varchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [varchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [varchar] (60),
		[pt_tourname] [varchar] (128),
		[pt_pnname] [varchar] (30),
		[pt_pncode] [varchar] (3),
		[pt_rmname] [varchar] (60),
		[pt_rmcode] [varchar] (60),
		[pt_rcname] [varchar] (60),
		[pt_rccode] [varchar] (40),
		[pt_acname] [varchar] (30),
		[pt_accode] [varchar] (30),
		[pt_rsname] [varchar] (50),
		[pt_ctname] [varchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [varchar] (3),
		[pt_toururl] [varchar] (128),
		[pt_hotelurl] [varchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys varchar(256),
		pt_hotelroomkeys varchar(256),
		pt_hotelstars varchar(256),
		pt_pansionkeys varchar(256),
		pt_hotelnights varchar(256),
		pt_chdirectkeys varchar(50) null,
		pt_chbackkeys varchar(50) null
	)

	declare @mwAccomodationPlaces varchar(254)
	declare @mwRoomsExtraPlaces varchar(254)
	declare @mwSearchType int
	declare @sql varchar(8000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0
		)
		where TO_Key = @toKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @toKey


	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey and tl_tokey = @tokey and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey
		and tl_tokey = @tokey
		and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- ключ города и ключ курорта
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0)
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--090616(DeleteUserSettings_MappingsForm).sql
delete from dbo.UserSettings where ST_ParmName like 'MappingsForm'
GO
--sp_GetPartnerCommission.sql 2009-06-16
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.GetPartnerCommission
GO
CREATE procedure [dbo].[GetPartnerCommission]
--<VERSION>2005.2.41</VERSION>
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null
AS
     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey,@nTpKey=TL_TIP from TurList where TL_Key = @nTLKey

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) >= ISNULL(DS_DaysBeforeCheckIn, 0)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
          order by DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, DS_DaysBeforeCheckIn asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) >= ISNULL(DS_DaysBeforeCheckIn, 0)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
          order by DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, DS_DaysBeforeCheckIn asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO
grant exec on dbo.GetPartnerCommission to public
GO
--090617(AlterAirService).sql
IF EXISTS(SELECT * FROM SYSCOLUMNS WHERE NAME LIKE 'AS_ORDER') 
	ALTER TABLE AIRSERVICE DROP COLUMN AS_ORDER
GO

ALTER TABLE AIRSERVICE ADD AS_ORDER INT
GO
--090618(CreateTPIndexes).sql
if not exists(select * from sysindexes where name = 'X_TP_ServiceLists_1' and id = object_id(N'[dbo].[TP_ServiceLists]'))
	CREATE NONCLUSTERED INDEX [X_TP_ServiceLists_1] ON [dbo].[TP_ServiceLists]
		(
			[TL_TSKey] asc,
			[TL_TOKey] asc
		 ) 
	ON [PRIMARY]
GO

if not exists(select * from sysindexes where name = 'X_TP_Lists_1' and id = object_id(N'[dbo].[TP_Lists]'))
	CREATE NONCLUSTERED INDEX [X_TP_Lists_1] ON [dbo].[TP_Lists]
		(
			[TI_TOKey] asc,
			[TI_Key] asc,
			[TI_FirstHDKey] asc
		 ) 
	ON [PRIMARY]
GO
--sp_MakePutName.sql 2009-06-22
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MakePutName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[MakePutName]
GO
CREATE procedure [dbo].[MakePutName]
@date datetime, 
@countryKey int, 
@cityKey int, 
@tourKey int, 
@partnerKey int, 
@sFormat0 varchar(10),
@name varchar(10) output
as
--<VERSION>2005.38</VERSION>
--<DATE>2005-05-06</DATE>
SET CONCAT_NULL_YIELDS_NULL OFF 
	set @name = ''
	declare @nullDate datetime
	set @nullDate = '1899-12-30'

	declare @notAllowedSymbols varchar(100)
	select @notAllowedSymbols = Upper(SS_ParmValue) from SystemSettings where SS_ParmName = 'SYSDogovorNumberDigits'

	declare @firstDigit char(1)
	set @firstDigit = dbo.NextDigit(@notAllowedSymbols, ASCII('0'))

	declare @selectDate datetime
	set @selectDate = DATEADD(day, -180, GETDATE())
	
	declare @format varchar(50)
	select @format = ST_FormatDogovor from Setting
	
	declare @curPos int
	set @curPos = 1

	set @format = @format

	declare @chPrev varchar(1)
	set @chPrev = substring(@format, 1, 1)
	set @format = substring(@format, 2, len(@format) - 1)

	declare @number_part_length int
	declare @number_part_start_point int
	declare @len int
	set @len = 1

	declare @temp varchar(50)
	while @format != ''
	begin
		set @temp = @format

		declare @ch varchar(1)
		set @ch = substring(@temp, 1, 1) 
		set @format = substring(@temp, 2, len(@format) - 1)

		if @ch != @chPrev or @format = ''
		begin
			if @format = ''
			begin
				set @len = @len + 1
				set @curPos = @curPos + 1
			end

			declare @str varchar(50)
			set @str = ''
			
			if @chPrev = 'N'
			begin
				select @str = UPPER(LEFT(TL_Name, @len)) from tbl_TurList where TL_Key = @tourKey
				exec dbo.FillString @str output, @len, 'n'
			end			
			else
			if @chPrev = 'T'
			begin
				select @str = UPPER(isnull(LEFT(CT_Code, @len), '')) from CityDictionary where CT_Key = @cityKey
				exec dbo.FillString @str output, @len, 't'				
			end
			else
			if @chPrev = 'C'
			begin
				select @str = UPPER(isnull(LEFT(CN_Code, @len),isnull(LEFT(CN_NameLat, @len), ''))) from Country where CN_Key = @countryKey
				exec dbo.FillString @str output, @len, 'c'
			end
			else
			if @chPrev = 'P'
			begin
				select @str = UPPER(isnull(LEFT(PR_Cod, @len),'')) from Partners where PR_Key = @partnerKey
				exec dbo.FillString @str output, @len, 'p'
			end
			else
			if @chPrev = 'Y'
				set @str = RIGHT(STR(YEAR(@date)), @len)
			else
			if @chPrev = 'D'
			begin
				set @temp = LTRIM(STR(DATEPART(dd, @date)))
				if LEN(@temp) < 2
					set @temp = '0' + @temp
				set @str = @temp
			end
			else
			if @chPrev = 'M'
			begin
				set @temp = LTRIM(STR(DATEPART(mm, @date)))
				if LEN(@temp) < 2
					set @temp = '0' + @temp
				set @str = @temp	
			end
			else
			if @chPrev = '9' or @chPrev = '#'
			begin
				set @temp = REPLICATE('_', @len)
				declare @searchName varchar(50)
				
				set @searchName = @name + @temp + '%'

				select @str = max(DG_Code) from tbl_Dogovor where upper(DG_Code) like upper(@searchName) and ((DG_TurDate >= @selectDate) or (DG_TurDate is null) or (DG_TurDate = @nullDate))
				if @str is null
					set @str = ''
				
				if @str != ''
				begin
					Set @temp = @str
					set @str = substring(@temp, @curPos - @len + 1, @len)
				end

				set @number_part_length = @len
				set @number_part_start_point = @curPos - @len + 1

				if @chPrev = '9'
				begin
					if dbo.IsStrNumber(LTRIM(RTRIM(@str))) > 0
					begin
						set @str = dbo.NextNumber(@notAllowedSymbols, LTRIM(STR(CAST(@str as int) + 1)))
						exec dbo.FillString @str output, @number_part_length, @firstDigit

					end
					else
					begin
						set @str = dbo.NextNumber(@notAllowedSymbols, '1')
						exec dbo.FillString @str output, @number_part_length, @firstDigit
					end
				end
				else
				begin
					set @temp = @str
					set @str = Upper(dbo.NextStr(@temp, @len))
				end
			end
			if @str = ''
				set @str = REPLICATE(@chPrev, @len)

			set @name = @name + @str
			set @len = 1
		end
		else
			set @len = @len + 1
		set @curPos = @curPos + 1
		set @chPrev = @ch	
	end

	set @name = Upper(@name)
	declare @int int
	set @int = 0
	while exists(select DG_Code from tbl_Dogovor where DG_Code = @name) and @int < 1005
	begin
		if @chPrev = '9'
		begin
			set @str = substring(@name, @number_part_start_point, @number_part_length)
			set @str = RIGHT(dbo.NextNumber(@notAllowedSymbols, LTRIM(STR(CAST(@str as int) + 1))),@number_part_length)
			exec dbo.FillString @str output, @number_part_length, @firstDigit
			--set @name = LEFT(@name, @number_part_start_point - 1) + @str + RIGHT(@name, 10 - @number_part_start_point - @number_part_length + 1)
			set @name = LEFT(@name, @number_part_start_point - 1) + @str
		end
		else
		begin
			set @str = substring(@name, @number_part_start_point, @number_part_length)
			set @str = Upper(dbo.NextStr(@str, @number_part_length))
			set @name = LEFT(@name, @number_part_start_point - 1) + @str
		end
		set @int = @int + 1
		--print @name
	end
	SET CONCAT_NULL_YIELDS_NULL ON 
GO
GRANT EXECUTE ON [dbo].[MakePutName] TO Public
GO

--T_UpdDogListQuota.sql 2009-06-22
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_UpdDogListQuota]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_UpdDogListQuota]
GO
CREATE TRIGGER [dbo].[T_UpdDogListQuota] 
ON [dbo].[tbl_DogovorList]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2008.1.01.12a</VERSION>
-- inserting into roomnumberlists , servicebydate
DECLARE @DLKey int, @DGKey int, @O_DLSVKey int, @O_DLCode int, @O_DLSubcode1 int, @O_DLDateBeg datetime, @O_DLDateEnd datetime, @O_DLNMen int, @O_DLPartnerKey int,
		@N_DLSVKey int, @N_DLCode int, @N_DLSubcode1 int, @N_DLDateBeg datetime, @N_DLDateEnd datetime, @N_DLNMen int, @N_DLPartnerKey int,
		@Date datetime, @RLID int, @RPID int,
		@HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int,
		@RMPlacesMain smallint, @RMPlacesEx smallint,
		@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
		@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
		@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
		@RL_Use smallint, @From int, --@SDPlace smallint, 
		@nDelCount smallint, @nInsCount smallint, @Mod varchar(3), @SetToNewQuota bit,
		@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint,
		@Days smallint, @RPCount smallint, @NeedPlacesForMen smallint, @TUKey int

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
SET @SetToNewQuota = 0
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	O.DL_Key, O.DL_DGKey,
			O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey,
			null, null, null, null, null, null, null
    FROM DELETED O
	SET @Mod = 'DEL'
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey,
			null, null, null, null, null, null, null,
			N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey
    FROM	INSERTED N 
	SET @Mod = 'INS'
END
ELSE 
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey, 
			O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey, 
	  		N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
	SET @Mod = 'UPD'
END

OPEN cur_DogovorListChanged
FETCH NEXT FROM cur_DogovorListChanged 
	INTO	@DLKey, @DGKey,
			@O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey,
			@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey
WHILE @@FETCH_STATUS = 0
BEGIN

	EXEC InsMasterEvent 3, @DLKey
	IF ((@O_DLSVKey in (3,7)) and ((@N_DLCode!=@O_DLCode) or (@N_DLSubCode1!=@O_DLSubCode1) or (@O_DLDateBeg!=@N_DLDateBeg) or (@O_DLDateEnd!=@N_DLDateEnd)))
		or ((@O_DLSVKey in (1,2,4)) and (@O_DLDateBeg!=@N_DLDateBeg))
		update turistservice set tu_numroom='' where tu_dlkey=@DLKey

	IF @N_DLDateBeg < '01-JAN-1901' and @O_DLDateBeg >= '01-JAN-1901'
		SET @Mod='DEL'
	IF @N_DLDateBeg > '01-JAN-1901' and @O_DLDateBeg <= '01-JAN-1901'
		SET @SetToNewQuota=1
		--SET @Mod='INS'
		/*select @rlid=sd_rlid from servicebydate where sd_dlkey=@dlkey
		delete from roomnumberlists where rl_id=@rlid
		delete from servicebydate where sd_dlkey=@dlkey*/
	IF @Mod='UPD' and ISNULL(@O_DLNMen,0)=0 and ISNULL(@N_DLNMen,0)>0
		SET @Mod='INS'
	IF @Mod='DEL' or (@Mod='UPD' and 
		(ISNULL(@O_DLSVKey,0) != ISNULL(@N_DLSVKey,0)) or (ISNULL(@O_DLCode,0) != ISNULL(@N_DLCode,0)) 
		or (ISNULL(@O_DLSubCode1,0) != ISNULL(@N_DLSubCode1,0)) or (ISNULL(@O_DLPartnerKey,0) != ISNULL(@N_DLPartnerKey,0)) )
	BEGIN	
		DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey
		SET @SetToNewQuota=1
	END
	--изменился период действия услуги
	IF @Mod='UPD' and (@SetToNewQuota!=1 and ((@O_DLDateBeg != @N_DLDateBeg) or (@O_DLDateEnd != @N_DLDateEnd)))
	BEGIN
		IF @N_DLDateBeg>@O_DLDateEnd OR @N_DLDateEnd<@O_DLDateBeg
		BEGIN
			DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey
			SET @SetToNewQuota=1
		END
		--для услуг имеющих продолжительность сохраняем информацию о квотировании в рамках периода
		ELSE
		BEGIN	
			IF @N_DLDateBeg<@O_DLDateBeg
			BEGIN
				IF @N_DLDateEnd<@O_DLDateBeg  --если теперь услуга заканчивается раньше, чем до этого начиналась
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@N_DLDateEnd)+1
				ELSE
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@O_DLDateBeg)
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,NU_ID-1,@N_DLDateBeg), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, 4 FROM ServiceByDate,Numbers WHERE (NU_ID between 1 and @Days) and SD_Date=@O_DLDateBeg and SD_DLKey=@DLKey
			END
			IF @N_DLDateEnd>@O_DLDateEnd
			BEGIN
				IF @N_DLDateBeg>@O_DLDateEnd  --если теперь услуга начинается позже, чем до этого заканчивалась
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@N_DLDateEnd)+1
				ELSE
					Set @Days=DATEDIFF(DAY,@O_DLDateEnd,@N_DLDateEnd)
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,-NU_ID+1,@N_DLDateEnd), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, 4 FROM ServiceByDate,Numbers WHERE (NU_ID between 1 and @Days) and SD_Date=@O_DLDateEnd and SD_DLKey=@DLKey
			END
			IF @N_DLDateBeg>@O_DLDateBeg
				DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date < @N_DLDateBeg
			IF @N_DLDateEnd<@O_DLDateEnd
				DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date > @N_DLDateEnd
		END
	END
	SET @NeedPlacesForMen=0
	SET @From = CAST(@N_DLDateBeg as int)
	--изменилось количество человек
	IF @Mod='UPD' and (@SetToNewQuota!=1 and ISNULL(@O_DLNMen,0) != ISNULL(@N_DLNMen,0))
	BEGIN
		SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)
		if ISNULL(@O_DLNMen,0) > ISNULL(@N_DLNMen,0)
		BEGIN
			while (SELECT count(1) FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date=@N_DLDateBeg)>ISNULL(@N_DLNMen,0)
			BEGIN
				if @N_DLSVKey=3 --для проживания отдельная ветка
				BEGIN
					SELECT TOP 1 @RLID=SD_RLID, @RPCount=count(SD_ID) FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_TUKey is null and SD_Date=@N_DLDateBeg
					GROUP BY SD_RLID
					ORDER BY 2
					--SELECT @RLID=SDRLID, @RPCount=SDIDcount
					--FROM
					--( 
					--	SELECT TOP 1 SD_RLID SDRLID, count(SD_ID) SDIDcount
					--	FROM ServiceByDate 
					--	WHERE SD_DLKey=@DLKey and SD_TUKey is null and SD_Date=@N_DLDateBeg
					--	GROUP BY SD_RLID
					--	ORDER BY 2
					--) AS QUERY
					SELECT TOP 1 @RPID=SD_RPID FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RLID=@RLID and SD_TUKey is null
					DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RLID=@RLID and SD_RPID=@RPID and SD_TUKey is null
				END
				ELSE
				BEGIN
					SELECT TOP 1 @RPID=SD_RPID FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_TUKey is null
					DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RPID=@RPID and SD_TUKey is null
				END
			END
		END
		ELSE --если новое число туристов больше, чем было до этого (@O_DLNMen<@N_DLNMen)
		BEGIN
			if @N_DLSVKey=3 --для проживания отдельная ветка
			BEGIN				
				SELECT	@HRIsMain=AC_MAIN, @ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
				FROM AccmdMenType
				WHERE AC_Key=(SELECT HR_ACKey From HotelRooms WHERE HR_Key=@N_DLSubCode1)
				IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					set @ACPlacesMain = 1
				ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					set @ACPlacesEx = 1
				--есть 3 варианта размещения: только основные, только дополнительные, основные и дополнительные
				--в первых 2-х вариантах сначала занимаем свободные уже существующие места данного типа в номерах этой услуги, в последнем занимаем все свободные места
				if @ACPlacesMain>0
					WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0))
					BEGIN
						select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0
						INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
							SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
							FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
						SET @NeedPlacesForMen=@NeedPlacesForMen-1
					END
				if @ACPlacesEx>0
					WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1))
					BEGIN
						select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1
						INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
							SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
							FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
						SET @NeedPlacesForMen=@NeedPlacesForMen-1
					END
			END
		END
	END

	IF @Mod='INS' or (@Mod='UPD' and @SetToNewQuota=1) or @NeedPlacesForMen>0
	BEGIN		
		if @N_DLSVKey=3 --для проживания отдельная ветка
		BEGIN
			If @NeedPlacesForMen>0
			BEGIN
				SELECT TOP 1 @RLPlacesMain=RL_NPlaces, @RLPlacesEx=RL_NPlacesEx, @RMKey=RL_RMKey, @RCKey=RL_RCKey from RoomNumberLists,ServiceByDate where RL_ID=SD_RLID and SD_DLKey=@DLKey
			END
			ELSE
			BEGIN
				SELECT	@HRIsMain=HR_MAIN, @RMKey=HR_RMKEY, @RCKey=HR_RCKEY, @ACKey=HR_ACKEY,
						@RMPlacesMain=RM_NPlaces, @RMPlacesEx=RM_NPlacesEx,
						@ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
				FROM HotelRooms, Rooms, AccmdMenType
				WHERE HR_Key=@N_DLSubcode1 and RM_Key=HR_RMKEY and AC_KEY=HR_ACKEY
				if @ACPerRoom=1 or (ISNULL(@RMPlacesMain,0)=0 and ISNULL(@RMPlacesEx,0)=0)
				BEGIN
					SET @RLPlacesMain = @ACPlacesMain
					SET @RLPlacesEx = ISNULL(@ACPlacesEx,0)
				END
				Else
				BEGIN
					IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					BEGIN
						set @ACPlacesMain = 1
					END
					ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					BEGIN
						set @ACPlacesEx = 1
					END

					SET @RLPlacesMain = @RMPlacesMain
					SET	@RLPlacesEx = ISNULL(@RMPlacesEx,0)
				END
				IF @Mod='UPD' and @SetToNewQuota=1	--если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
					SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
				ELSE
					SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)
			END
	
			SET @RLID = 0
			SET @AC_FreeMainPlacesCount = 0
			SET @AC_FreeExPlacesCount = 0
			SET @RL_FreeMainPlacesCount = 0
			SET @RL_FreeExPlacesCount = 0
			WHILE (@NeedPlacesForMen>0)
			BEGIN
				--если в последнем номере кончились места, то выставляем признак @RLID = 0
				IF @AC_FreeMainPlacesCount = 0 and @AC_FreeExPlacesCount = 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @ACPlacesMain
					SET @AC_FreeExPlacesCount = @ACPlacesEx
					--создаем новый номер, всегда когда есть хоть кто-то на основном месте
					IF (@AC_FreeMainPlacesCount > @RL_FreeMainPlacesCount) or (@AC_FreeExPlacesCount > @RL_FreeExPlacesCount)
					BEGIN
						IF @ACPlacesMain>0
						BEGIN			
							INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
							set @RLID=SCOPE_IDENTITY()
							INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
							set @RPID=SCOPE_IDENTITY()-@RLPlacesMain-@RLPlacesEx+1
							SET @RL_FreeMainPlacesCount = @RLPlacesMain
							SET @RL_FreeExPlacesCount = @RLPlacesEx
						END
						ELSE
						BEGIN
							/*
							1. Ищем к кому подселиться в данной путевке, если не находим, то прийдется создавать новый номер
							*/
							SELECT	TOP 1 @RPID=RP_ID, @RLID=RP_RLID
							FROM	RoomPlaces
							WHERE
								RP_Type=1
								and RP_RLID in 
								(	SELECT SD_RLID 
									FROM ServiceByDate,DogovorList,RoomNumberLists 
									WHERE SD_DLKey=DL_Key and DL_DGKey=@DGKey and RL_ID=SD_RLID
										and DL_SVKey=@N_DLSVKey and DL_Code=@N_DLCode 
										and DL_DateBeg=@N_DLDateBeg and DL_DateEnd=@N_DLDateEnd
										and RL_RMKey=@RMKey and RL_RCKey=@RCKey
								)
								and not exists 
								(	SELECT SD_RPID FROM ServiceByDate WHERE SD_RLID=RP_RLID and SD_RPID=RP_ID)
							ORDER BY RP_ID
							IF @RPID is null	-- надо создавать новый номер даже для дополнительного размещения
							BEGIN
								INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
								set @RLID=SCOPE_IDENTITY()
								INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
								set @RPID=SCOPE_IDENTITY()-@RLPlacesEx+1
								SET @RL_FreeMainPlacesCount = @RLPlacesMain
								SET @RL_FreeExPlacesCount = @RLPlacesEx
							END
						END
					END
				END
				
				--смотрим есть ли в текущем номере свободные ОСНОВНЫЕ места
				IF @AC_FreeMainPlacesCount > 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - 1
					SET @RL_FreeMainPlacesCount = @RL_FreeMainPlacesCount - 1
					SET @CurrentPlaceIsEx=0
				END
				--если ОСНОВНЫХ мест в номере уже нет, то может посадим на ДОПОЛНИТЕЛЬНОЕ? 
				ELSE IF @AC_FreeExPlacesCount > 0
				BEGIN
					SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - 1
					SET @RL_FreeExPlacesCount = @RL_FreeExPlacesCount - 1
					SET @CurrentPlaceIsEx=1
				END
				--INSERT INTO RoomPlaces (RP_RLID, RP_Type) values (@RLID,@CurrentPlaceIsEx)
				--set @RPID=SCOPE_IDENTITY()
				--SELECT @RPID=RP_ID FROM RoomPlaces WHERE RP_RLID=@RLID and RP_Type=@CurrentPlaceIsEx and RP_ID NOT IN (SELECT SD_RPID FROM ServiceByDate)
				--insert into debug (db_n1, db_n2, db_n3) values (@RLID, @CurrentPlaceIsEx, 1011)
				set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)

				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_TUKey)
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
				SET @NeedPlacesForMen=@NeedPlacesForMen-1
				SET @RPID=@RPID+1
			END		
		END --для проживания отдельная ветка... (КОНЕЦ)
		else --для всех услуг кроме проживания
		--while (@Date<=@N_DLDateEnd)
		BEGIN
			IF @Mod='UPD' and @SetToNewQuota=1	--если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
				SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
			ELSE
				SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

			while(@NeedPlacesForMen > 0)
			BEGIN
				--INSERT INTO ServiceByDate (SD_Date, SD_DLKey) values (@Date, @DLKey)
				set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)
				INSERT INTO RoomPlaces(RP_RLID, RP_Type) values (0,0)
				set @RPID=SCOPE_IDENTITY()				
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RPID, SD_TUKey)	
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
				set @NeedPlacesForMen=@NeedPlacesForMen-1
			END
			--set @Date=@Date+1
		END
		exec dbo.DogListToQuotas @DLKey --в этой хранимке будет выполнена попытка постановки услуги на квоту
	END
	FETCH NEXT FROM cur_DogovorListChanged 
		INTO	@DLKey, @DGKey,
				@O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey,
				@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey
END
CLOSE cur_DogovorListChanged
DEALLOCATE cur_DogovorListChanged
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MakePutName]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[MakePutName]
GO
CREATE procedure [dbo].[MakePutName]
@date datetime, 
@countryKey int, 
@cityKey int, 
@tourKey int, 
@partnerKey int, 
@sFormat0 varchar(10),
@name varchar(10) output
as
--<VERSION>2005.38</VERSION>
--<DATE>2005-05-06</DATE>
SET CONCAT_NULL_YIELDS_NULL OFF 
	set @name = ''
	declare @nullDate datetime
	set @nullDate = '1899-12-30'

	declare @notAllowedSymbols varchar(100)
	select @notAllowedSymbols = Upper(SS_ParmValue) from SystemSettings where SS_ParmName = 'SYSDogovorNumberDigits'

	declare @firstDigit char(1)
	set @firstDigit = dbo.NextDigit(@notAllowedSymbols, ASCII('0'))

	declare @selectDate datetime
	set @selectDate = DATEADD(day, -180, GETDATE())
	
	declare @format varchar(50)
	select @format = ST_FormatDogovor from Setting
	
	declare @curPos int
	set @curPos = 1

	set @format = @format

	declare @chPrev varchar(1)
	set @chPrev = substring(@format, 1, 1)
	set @format = substring(@format, 2, len(@format) - 1)

	declare @number_part_length int
	declare @number_part_start_point int
	declare @len int
	set @len = 1

	declare @temp varchar(50)
	while @format != ''
	begin
		set @temp = @format

		declare @ch varchar(1)
		set @ch = substring(@temp, 1, 1) 
		set @format = substring(@temp, 2, len(@format) - 1)

		if @ch != @chPrev or @format = ''
		begin
			if @format = ''
			begin
				set @len = @len + 1
				set @curPos = @curPos + 1
			end

			declare @str varchar(50)
			set @str = ''
			
			if @chPrev = 'N'
			begin
				select @str = UPPER(LEFT(TL_Name, @len)) from tbl_TurList where TL_Key = @tourKey
				exec dbo.FillString @str output, @len, 'n'
			end			
			else
			if @chPrev = 'T'
			begin
				select @str = UPPER(isnull(LEFT(CT_Code, @len), '')) from CityDictionary where CT_Key = @cityKey
				exec dbo.FillString @str output, @len, 't'				
			end
			else
			if @chPrev = 'C'
			begin
				select @str = UPPER(isnull(LEFT(CN_Code, @len),isnull(LEFT(CN_NameLat, @len), ''))) from Country where CN_Key = @countryKey
				exec dbo.FillString @str output, @len, 'c'
			end
			else
			if @chPrev = 'P'
			begin
				select @str = UPPER(isnull(LEFT(PR_Cod, @len),'')) from Partners where PR_Key = @partnerKey
				exec dbo.FillString @str output, @len, 'p'
			end
			else
			if @chPrev = 'Y'
				set @str = RIGHT(STR(YEAR(@date)), @len)
			else
			if @chPrev = 'D'
			begin
				set @temp = LTRIM(STR(DATEPART(dd, @date)))
				if LEN(@temp) < 2
					set @temp = '0' + @temp
				set @str = @temp
			end
			else
			if @chPrev = 'M'
			begin
				set @temp = LTRIM(STR(DATEPART(mm, @date)))
				if LEN(@temp) < 2
					set @temp = '0' + @temp
				set @str = @temp	
			end
			else
			if @chPrev = '9' or @chPrev = '#'
			begin
				set @temp = REPLICATE('_', @len)
				declare @searchName varchar(50)
				
				set @searchName = @name + @temp + '%'

				select @str = max(DG_Code) from tbl_Dogovor where upper(DG_Code) like upper(@searchName) and ((DG_TurDate >= @selectDate) or (DG_TurDate is null) or (DG_TurDate = @nullDate))
				if @str is null
					set @str = ''
				
				if @str != ''
				begin
					Set @temp = @str
					set @str = substring(@temp, @curPos - @len + 1, @len)
				end

				set @number_part_length = @len
				set @number_part_start_point = @curPos - @len + 1

				if @chPrev = '9'
				begin
					if dbo.IsStrNumber(LTRIM(RTRIM(@str))) > 0
					begin
						set @str = dbo.NextNumber(@notAllowedSymbols, LTRIM(STR(CAST(@str as int) + 1)))
						exec dbo.FillString @str output, @number_part_length, @firstDigit

					end
					else
					begin
						set @str = dbo.NextNumber(@notAllowedSymbols, '1')
						exec dbo.FillString @str output, @number_part_length, @firstDigit
					end
				end
				else
				begin
					set @temp = @str
					set @str = Upper(dbo.NextStr(@temp, @len))
				end
			end
			if @str = ''
				set @str = REPLICATE(@chPrev, @len)

			set @name = @name + @str
			set @len = 1
		end
		else
			set @len = @len + 1
		set @curPos = @curPos + 1
		set @chPrev = @ch	
	end

	set @name = Upper(@name)
	declare @int int
	set @int = 0
	while exists(select DG_Code from tbl_Dogovor where DG_Code = @name) and @int < 1005
	begin
		if @chPrev = '9'
		begin
			set @str = substring(@name, @number_part_start_point, @number_part_length)
			set @str = RIGHT(dbo.NextNumber(@notAllowedSymbols, LTRIM(STR(CAST(@str as int) + 1))),@number_part_length)
			exec dbo.FillString @str output, @number_part_length, @firstDigit
			--set @name = LEFT(@name, @number_part_start_point - 1) + @str + RIGHT(@name, 10 - @number_part_start_point - @number_part_length + 1)
			set @name = LEFT(@name, @number_part_start_point - 1) + @str
		end
		else
		begin
			set @str = substring(@name, @number_part_start_point, @number_part_length)
			set @str = Upper(dbo.NextStr(@str, @number_part_length))
			set @name = LEFT(@name, @number_part_start_point - 1) + @str
		end
		set @int = @int + 1
		--print @name
	end
	SET CONCAT_NULL_YIELDS_NULL ON 
GO
GRANT EXECUTE ON [dbo].[MakePutName] TO Public
GO
update ANK_COUNTRY set AC_COMMON = 0 where AC_COMMON is null
GO
if not exists (select * from dbo.syscolumns where name = 'DS_DAKey' and id = object_id(N'[dbo].[Discounts]'))
	alter table Discounts add DS_DAKey int
GO
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSPrtRegQuestion')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSPrtRegQuestion', '0')
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nGroupByPeriod smallint,	-- 0 - не группировать цены по периодам, 1 - группировать
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nGroupByPeriod=0
		SET @sHI_Text='With period group'
	ELSE
		SET @sHI_Text='Without period group'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11005, null, @sHI_Text, null, @nGroupByPeriod, null, null, 0

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		) ON [PRIMARY]
		DELETE FROM #TP_Prices
		INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM #TP_Prices)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))
		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'

		fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN
			if @dtPrevDate <> @turdate
				set @nPrevGrossDate = @dtPrevDate
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate
			BEGIN
				select @nPrevGrossKey = xtp_key, @nPrevGross = xtp_gross from #tp_prices where xtp_dateend  = @nPrevGrossDate and xtp_tikey = @variant
				set @price_brutto = 0
				set @nPrevVariant = @variant
				set @dtPrevDate = @turdate
				if @sUseServicePrices = '1'
					delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
			END
			if @nTempGross is not null and @nSvkey <> 1
			BEGIN
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			END
			else
			BEGIN
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			END
			set @price_brutto = @price_brutto + @nBrutto
			fetch next from serviceCursor into @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
			set @fetchStatus = @@fetch_status

			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				if @price_brutto is not null
				BEGIN
				exec RoundPriceList @round, @price_brutto output
					if @nUpdate = 0 or @nGroupByPeriod = 0
					BEGIN
						if @nPrevGross = @price_brutto and @nGroupByPeriod = 1
							update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nPrevGrossKey
						else
						BEGIN
							if exists(select 1 from #tp_prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
								update #tp_prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							else
							BEGIN
								insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
								if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
								BEGIN
									exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
								END
							END
						END
					END					
					else
					BEGIN
					---ДОЗАПИСЬ СТАРТ---------------------
						if (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant) = 0
						BEGIN
							insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						END
						else
						BEGIN
							declare @nKey int
							declare @dBegin datetime
							declare @dEnd datetime
							declare @fGross money
							declare @fSetPrevPrice smallint	-- признак наличия цены на текущий вариант на ранние даты
							declare @fSetNextPrice smallint	-- признак наличия цены на текущий вариант на поздние даты
							declare @nSetPrevKey int	-- ключ цены на текущий вариант на ранние даты
							declare @nSetNextKey int	-- ключ цены на текущий вариант на поздние даты
							declare @nSetPrevGross money	-- ценa на текущий вариант на ранние даты
							declare @nSetNextGross money	-- ценa на текущий вариант на поздние даты
							declare priceCursor cursor local fast_forward  for
								select xtp_key, xtp_datebegin, xtp_dateend, xtp_gross
								from #tp_prices
								where xtp_tikey = @nPrevVariant
								order by xtp_datebegin
							set @fSetPrevPrice = 0
							set @fSetNextPrice = 0
							set @nSetPrevKey = -1
							set @nSetNextKey = -1
							set @nSetPrevGross = -1
							set @nSetNextGross = -1
							open priceCursor
							fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							While (@@fetch_status = 0)
							BEGIN
								if @dtPrevDate = @dEnd or @dtPrevDate = @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @fSetNextPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetNextKey = @nKey
									set @nSetPrevGross = @fGross
									set @nSetNextGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate > @dBegin
								BEGIN
									set @fSetPrevPrice = 1
									set @nSetPrevKey = @nKey
									set @nSetPrevGross = @fGross
								END
								if @fSetNextPrice <> 1 and @dtPrevDate <@dEnd
								BEGIN
									set @fSetNextPrice = 1
									set @nSetNextKey = @nKey
									set @nSetNextGross = @fGross
								END
								fetch next from priceCursor into @nKey, @dBegin, @dEnd, @fGross
							END
							close priceCursor
							deallocate priceCursor
							if @nSetPrevKey is not null and @nSetNextKey is not null -- есть интервалы цен до и после текущей даты, либо цена попала в существующий интервал
							BEGIN
								if @nSetPrevKey <> @nSetNextKey-- цена не попала в существующий период
								BEGIN
									if @nSetPrevGross = @nSetNextGross and (select count(1) from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate) = 1 -- есть одиночная цена в базе на тек. дату
									BEGIN
										set @nKey = null
										set @fGross = null
										select @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate
										if @fGross <> @price_brutto
										BEGIN
											if @price_brutto = @nSetNextGross or @price_brutto = @nSetPrevGross
											BEGIN
												delete from #tp_prices where xtp_key = @nKey
												if @nSetPrevGross = @price_brutto
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
												if @nSetNextGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
											END
											else
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nKey
										END
									END
									else -- на текущую дату в базе нет цены
									BEGIN -- здесь надо попробовать схлопнуть периоды
										if @nSetPrevGross = @price_brutto
											update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
										if @nSetNextGross = @price_brutto
											update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
										if @nSetNextGross <> @price_brutto and @nSetPrevGross <> @price_brutto
										BEGIN
											insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
											if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
											BEGIN
												exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
												set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
											END
										END
									END
								END
								else -- цена попала в существующий период
								if @nSetPrevGross <> @price_brutto
								BEGIN	-- здесь надо расхлопнуть периоды
								-- в итоге вместо одного периода цен будет 2 или 3 периода
									set @dDateBeg1 = null
									set @dDateBeg3 = null
									set @dDateEnd1 = null
									set @dDateEnd3 = null
									select @dDateBeg1 = xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey
									select top 1 @dDateEnd1 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date < @dtPrevDate order by td_date DESC
									select top 1 @dDateBeg3 = td_date from tp_turdates where td_tokey = @nPriceTourKey and td_date > @dtPrevDate order by td_date ASC
									select @dDateEnd3 = xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey
									if @dDateBeg1 <> @dtPrevDate and @dDateEnd3 <> @dtPrevDate
									BEGIN
										update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
										insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dDateBeg3, @dDateEnd3, @nSetPrevGross, @nPrevVariant)
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
										if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
										BEGIN
											exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
											set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
										END
									END
									else
									BEGIN
										if @dDateBeg1 = @dtPrevDate and @dDateEnd3 = @dtPrevDate
										BEGIN
											declare @leftKey int
											declare @leftGross money
											declare @rightKey int
											declare @rightGross money
											select top 1 @leftKey = xtp_key, @leftGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend desc
											select top 1 @rightKey = xtp_key, @rightGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_dateend asc
											if @leftKey is null and @rightKey is null
												update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											if @leftKey is not null and @rightKey is not null
											BEGIN
												if @leftGross = @rightGross and @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = (select xtp_dateend from #tp_prices where xtp_key = @rightKey) where xtp_key = @leftKey
													delete from #tp_prices where xtp_key in (@rightKey, @nSetPrevKey)
												END
												if @leftGross = @rightGross and @rightGross <> @price_brutto
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if @leftKey is not null and (@rightKey is null or @rightGross <> @price_brutto)
											BEGIN
												if @leftGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @leftKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
											if (@leftKey is null or @leftGross <> @price_brutto) and @rightKey is not null
											BEGIN
												if @rightGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @rightKey
													delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
													update #tp_prices set xtp_gross = @price_brutto where xtp_key = @nSetPrevKey
											END
										END
										else
										BEGIN
											set @nKey = null
											set @fGross = null
											if @dDateBeg1 = @dtPrevDate
											BEGIN
												update #tp_prices set xtp_datebegin = @dDateBeg3 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_dateend < @dtPrevDate order by xtp_dateend DESC
												if @fGross = @price_brutto
												BEGIN
													update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nKey
													--if (select xtp_datebegin from #tp_prices where xtp_key = @nSetPrevKey) > (select xtp_dateend from #tp_prices where xtp_key = @nSetPrevKey)
													--delete from #tp_prices where xtp_key = @nSetPrevKey
												END
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
											else
											BEGIN
												update #tp_prices set xtp_dateend = @dDateEnd1 where xtp_key = @nSetPrevKey
												select top 1 @nKey = xtp_key, @fGross = xtp_gross from #tp_prices where xtp_tikey = @nPrevVariant and xtp_datebegin > @dtPrevDate order by xtp_datebegin ASC
												if @fGross = @price_brutto
													update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nKey
												else
												BEGIN
													insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
													set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
													if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
													BEGIN
														exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
														set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
													END
												END
											END
										END
									END
								END
							END
							else -- здесь нет двух цен по разные стороны от текущей даты
							BEGIN
								if @nSetPrevGross <> @price_brutto and @nSetNextGross <> @price_brutto
								BEGIN
									insert into #tp_prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
									set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
									if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
									BEGIN
										exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
										set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
									END
								END
								else
								BEGIN
									if @fSetPrevPrice = 1
										update #tp_prices set xtp_dateend = @dtPrevDate where xtp_key = @nSetPrevKey
									if @fSetNextPrice = 1
										update #tp_prices set xtp_datebegin = @dtPrevDate where xtp_key = @nSetNextKey
								END
							END
						END
					END  ----------------------------------------------------------------
				END
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------
		Set @nTotalProgress = 96
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		select 	@TPkeyMax = MAX(xtp_key), 
				@TPkeyMin = MIN(xtp_key) 
		from 	#tp_prices

		while 	@TPkeyMin <= @TPkeyMax
		BEGIN
			begin tran tEnd
			INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
				select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from #tp_prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
			commit tran tEnd
			Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		CREATE TABLE #TP_Lists (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(60) , 
            [xTI_RMName] varchar(60) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(50),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      ) ON [PRIMARY]
      DELETE FROM #TP_Lists
      INSERT INTO #TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update #TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update #TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update #TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update #TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update #TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update #TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update #TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update #TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update #TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update #TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update #TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update #TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update #TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update #TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update #TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update #TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update #TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update #TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update #TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update #TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update #TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from #tp_prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  #tp_lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG 
								   and exists (select 1 from #TP_Prices where TD_Date=xTP_DateBegin and xTP_TIKey=xTI_Key) )
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from #tp_prices, #tp_lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[BeforeDeleteRow]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP procedure [dbo].[BeforeDeleteRow]
GO

CREATE procedure [dbo].[BeforeDeleteRow]
     @sTableName varchar(256),  
     @nKey int,
     @nNewKey int 
AS

declare @nUsed int

--Действия перед удалением записи из справочников

if @sTableName='tbl_Partners' OR @sTableName='Partners'
begin
	execute FIN_CHECKPARTNER @nKey, @nUsed OUTPUT
	if @nUsed = 1
		execute FIN_CHANGEPARTNER @nKey, @nNewKey
end

GO
GRANT EXEC ON [dbo].[BeforeDeleteRow] TO PUBLIC
GO

------------------------------------------------

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RowHasChild]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[RowHasChild]
GO

CREATE procedure [dbo].[RowHasChild]
	@sTableName varchar(256),
	@nKey int,
	@nHasChild int output
AS
SET @nHasChild = 0
if @sTableName='tbl_Partners' OR @sTableName='Partners'
begin
	execute FIN_CHECKPARTNER @nKey, @nHasChild OUTPUT
end
GO

GRANT EXEC ON [dbo].[RowHasChild] TO PUBLIC
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculateDogovorCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculateDogovorCost]
GO
CREATE PROCEDURE [dbo].[CalculateDogovorCost]
  (
	@nDGKey int
  )
AS

-- <VERSION>2007.2.25 (2009.05.19)</VERSION>
-- Подсчёт стоимости путевки сделано по образу функции CalculateCost() класса Megatec.MasterTour.BusinessRules.Dogovor

DECLARE @totalDays int
DECLARE @tourKey int, @agentKey int, @bookingType int, @turDate datetime, @discountKey int,
		@discountValue int, @isPercent int, @createDate datetime, @discountPercent decimal,
		@checkinDate datetime, @resRate varchar(2), @margin float, @marginType int, @dgNDays int
DECLARE @netto decimal(14,2), @brutto decimal(14,2), @discount decimal(14,2)
DECLARE @dlKey int, @dlSvKey int, @dlCode int, @dlSubCode1 int, @dlSubCode2 int, @dlPrKey int, @dlPaketKey int, 
		@dlDateBeg datetime, @dlNDays int, @dlNMen int
DECLARE @price decimal(14,2), @discountSum decimal(14,2)
DECLARE @serviceWithDiscountSum decimal(14,2), @koef float, @calcDiscountSum decimal(14,2)

SET @price = 0
SET @discountSum = 0
SET @serviceWithDiscountSum = 0

SELECT @totalDays = MAX(ISNULL(DL_DAY, 0) + ISNULL(DL_NDAYS, 0) - CASE DL_SVKEY WHEN 3 THEN 1 ELSE 0 END) 
FROM tbl_dogovorlist 
WHERE dl_dgkey = @nDGKey

SELECT @tourKey = DG_TRKey, @agentKey = DG_PARTNERKEY, @bookingType = DG_BTKEY, @checkinDate = DG_TURDATE, 
	   @resRate = DG_RATE, @createDate = DG_CRDATE, @dgNDays = DG_NDAY
FROM tbl_dogovor 
WHERE DG_KEY = @nDGKey
 
EXEC dbo.GetPartnerCommission @tourKey, @agentKey, @bookingType, @discountKey output, @discountValue output,
							  @isPercent output, @checkinDate

IF(@isPercent = 1)
	SET @discountPercent = @discountValue
ELSE
	SET @discountPercent = 0

DECLARE cur_Services CURSOR FOR 
SELECT DL_KEY, DL_SVKEY, DL_CODE, DL_SUBCODE1, DL_SUBCODE2, DL_PARTNERKEY, DL_PAKETKEY, DL_DATEBEG, DL_NDAYS, DL_NMEN
FROM tbl_dogovorlist 
WHERE DL_DGKEY = @nDGKey

OPEN cur_Services
FETCH NEXT FROM cur_Services INTO @dlKey, @dlSvKey, @dlCode, @dlSubCode1, @dlSubCode2, @dlPrKey, @dlPaketKey,
								  @dlDateBeg, @dlNDays, @dlNMen
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @dlSvKey = 1
		set @dlNDays = @totalDays

	EXEC dbo.GetTourMargin @tourKey, @checkinDate, @margin output, @marginType output, @dlSvKey, @dgNDays, @createDate, @dlPaketKey

	EXEC dbo.GetServiceCost @dlSvKey, @dlCode, @dlSubCode1, @dlSubCode2, @dlPrKey, @dlPaketKey, @dlDateBeg, 
							@dlNDays, @resRate, @dlNMen, @discountPercent, @margin, @marginType, @createDate,  
							@netto output, @brutto output, @discount output

	UPDATE tbl_dogovorlist SET DL_COST = @netto, DL_BRUTTO = @brutto, DL_DISCOUNT = @discount WHERE DL_KEY = @dlKey

	SET @price = @price + ISNULL(@brutto, 0)
	SET @discountSum = @discountSum + ISNULL(@discount, 0)

	IF(ISNULL(@discount, 0) > 0)
		SET @serviceWithDiscountSum = @serviceWithDiscountSum + @brutto

	FETCH NEXT FROM cur_Services INTO @dlKey, @dlSvKey, @dlCode, @dlSubCode1, @dlSubCode2, @dlPrKey, @dlPaketKey,
									  @dlDateBeg, @dlNDays, @dlNMen
END
CLOSE cur_Services
DEALLOCATE cur_Services

SET @price = @price + @discountSum
EXEC RoundCost @discountSum output, 3
SET @price = @price - @discountSum

IF(@isPercent = 0)
BEGIN
	SET @discountSum = @discountSum - @discountValue
	SET @price = @price + @discountValue
END

EXEC RoundCost @price output, 2

UPDATE tbl_dogovor SET DG_PRICE = @price, DG_DISCOUNT = @discountPercent, DG_DISCOUNTSUM = @discountSum 
WHERE DG_KEY = @nDGKey

IF(@serviceWithDiscountSum > 0)
BEGIN
	-- Перераспределяем коммиссии по услугам пропорционально их стоимости
	SET @koef = @discountSum / @serviceWithDiscountSum
	SET @calcDiscountSum = 0

	DECLARE cur_Services1 CURSOR FOR 
	SELECT DL_KEY, DL_BRUTTO, DL_DISCOUNT
	FROM tbl_dogovorlist 
	WHERE DL_DGKEY = @nDGKey AND DL_DISCOUNT IS NOT NULL
	OPEN cur_Services1
	FETCH NEXT FROM cur_Services1 INTO @dlKey, @brutto, @discount
	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @discount = @brutto * @koef
		EXEC RoundCost @discount output, 3
		UPDATE tbl_dogovorlist SET DL_DISCOUNT = @discount where DL_KEY = @dlKey
		SET @calcDiscountSum = @calcDiscountSum + @discount

		FETCH NEXT FROM cur_Services1 INTO @dlKey, @brutto, @discount
	END
	CLOSE cur_Services1
	DEALLOCATE cur_Services1

	-- Увеличиваем коммиссию самой дорогой услуги на остаток, чтобы суммарная коммиссия не изменилась
	SELECT @dlKey = DL_KEY, @discount = DL_DISCOUNT 
	FROM tbl_dogovorlist 
	WHERE DL_DGKEY = @nDGKey AND DL_DISCOUNT IS NOT NULL
	ORDER BY DL_BRUTTO

	UPDATE tbl_dogovorlist SET DL_DISCOUNT = @discount + @discountSum - @calcDiscountSum WHERE DL_KEY = @dlKey
END
GO
GRANT EXEC ON [dbo].[CalculateDogovorCost] TO PUBLIC
GO
if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_NameLat')
	alter table dbo.Banks add BN_NameLat varchar(100) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_Street')
	alter table dbo.Banks add BN_Street varchar(100) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_CtKey')
	alter table dbo.Banks add BN_CtKey int null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_CnKey')
	alter table dbo.Banks add BN_CnKey int null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_SWIFT')
	alter table dbo.Banks add BN_SWIFT varchar(11) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_INN')
	alter table dbo.Banks add BN_INN varchar(10) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_KPP')
	alter table dbo.Banks add BN_KPP varchar(10) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_OKPO')
	alter table dbo.Banks add BN_OKPO varchar(100) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('Banks') and name = 'BN_OKONH')
	alter table dbo.Banks add BN_OKONH varchar(100) null
go
if (select count(*) from ObjectAliases where OA_Id = 25) > 0
begin
     print 'В таблице ObjectAliases уже существует запись с OA_Id = 25.'
end
else
begin
     insert into ObjectAliases
	 (OA_Id, OA_Alias, OA_Name, OA_TABLEID)
	 values
     (25, 'DA_KEY', 'Ключ акции', 26)
end
GO
update tp_lists
set ti_firsthdstars = hd_stars
from hoteldictionary
where ti_firsthdstars is null and ti_firsthdkey = hd_key
GO
if NOT exists(select ac_key from dbo.actions where ac_key = 63)
	insert into dbo.actions (AC_KEY, AC_NAME, AC_NAMELAT) values (63, 'Ограничить права просмотра платежей в кассе', 'To limit the rights of viewing of payments')
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.22.1</VERSION>
--<DATE>2009-03-03</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint

	DECLARE @bUpdateNationalCurrencyPrice bit


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
		BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
			SET @bUpdateNationalCurrencyPrice = 1
		END
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN

					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
						SET @nDGSorCode_New = 7					--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Wait>0)
								SET @nDGSorCode_New = 3			--Wait-List

						IF @nDGSorCode_New != 3 
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Control > 0)
								SET @nDGSorCode_New = 4			--Не подтвержден

						UPDATE Dogovor SET DG_Sor_Code = @nDGSorCode_New WHERE DG_Key=@DG_Key
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output

				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				if (@nValue_Old is not null OR @nValue_New is not null)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key

		
		-- $$$ PRICE RECALCULATION $$$ --
		IF @bUpdateNationalCurrencyPrice = 1 AND @sMod = 'UPD'
		BEGIN
			DECLARE @sAction VARCHAR(100)
			SET @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'

			-- See if "variable" is set (with frmDogovor (tour.apl) only)
			IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
			BEGIN
				SELECT @sAction = [Action] FROM #RecalculateAction
				DROP TABLE #RecalculateAction
			END
	
			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
	  END
	  END

		-- recalculate if exchange rate changes (another table) & saving from frmDogovor (tour.apl)
		-- + force-drop #RecalculateAction table in case hasn't been
		IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
		BEGIN
			SELECT @sAction = [Action] FROM #RecalculateAction
			DROP TABLE #RecalculateAction

			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
		END
		-- $$$ ------------------- $$$ --

    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
UPDATE dbo.Actions 
SET 
	AC_NAME = 'Касса->Разрешить редактирование платежа', 
	AC_NAMELAT = 'Cash department->Allow payment edit'
WHERE
	AC_KEY = 62
GO
if not exists (select * from dbo.syscolumns where name = 'DS_DAKey' and id = object_id(N'[dbo].[Discounts]'))
	alter table Discounts add DS_DAKey int
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsDogovor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.InsDogovor
GO
CREATE procedure [dbo].[InsDogovor]
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nDiscountKey int = null,				-- ключ скидки(комиссии)
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (70) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@sOldDogovor varchar (10) = null		-- должен быть ПОСЛЕДНИМ !!!!! -- предыдущий номер договора, передается при переименовании путевки
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType)


	-- Begin Donskov 17.03.2009

	-- находим национальную валюту
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@sRate))
	begin
		-- проверяем, есть ли курс валюты в базе
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else
	begin
		set @rc_course = 1
		set @rc_courseStr = '1'
	end

	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	-- 1) пишем в хистори курс валюты
    -- 2) в созданную путёвку записываем стоимость в национальной валюте и скидку в национальной валюте
	--    (если присутствует соответствующий курс в базе)
	if @rc_course <> -1
	begin
		-- 1: пишем в хистори
		if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20) > 0
		begin
			delete from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20
		end

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'INS', 'DOGOVORCURRENCY', 20)

		-- 2: в созданную путёвку записываем стоимость и скидку в национальной валюте 
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @rc_course * @nPrice,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_Key = @nKeyDogovor
	end
	else
	begin
		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'INS', 'DOGOVORCURRENCYISNULL', 21)
	end
	-- End Donskov 17.03.2009

	--пишем ключ акции в историю
	if @nDiscountKey is not null and @nDiscountKey <> 0 and @nDiscountKey <> -1
	begin
		declare @da_key int
		set @da_key = null
		select @da_key = DS_DAKey from Discounts where DS_Key = @nDiscountKey
		if @da_key is not null
		begin
			insert into dbo.history
			(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
			values
			(@sDogovor, @sHI_WHO, cast(@da_key as varchar), 'Ключ акции', 'INS', 'DA_KEY', 25)
		end
	end


	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent
	Select @sValue = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseTimeLimit'
	if @sValue = '1'
		exec dbo.CreatePPaymentDate @sDogovor, @dTour, @dtCurrentDate

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0
GO

GRANT EXECUTE ON dbo.InsDogovor TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetPartnerCommission] 
GO

CREATE   PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null
AS
     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int, @nAttr int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) >= ISNULL(DS_DaysBeforeCheckIn, 0)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
          order by DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, DS_DaysBeforeCheckIn asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) >= ISNULL(DS_DaysBeforeCheckIn, 0)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
          order by DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, DS_DaysBeforeCheckIn asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO

GRANT EXECUTE ON [dbo].[GetPartnerCommission]  TO PUBLIC 
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[tbl_DiscountActions]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
begin
	CREATE TABLE [dbo].[tbl_DiscountActions](
		[DA_Key] [int] IDENTITY(1,1) NOT NULL,
		[DA_Name] [varchar](50) NULL,
		[DA_NameLat] [varchar](50) NULL,
		[DA_Comment] [varchar](500) NULL,
	 CONSTRAINT [PK_tbl_DiscountActions] PRIMARY KEY CLUSTERED 
	(
		[DA_Key] ASC
	) ON [PRIMARY]
	) ON [PRIMARY]
end
GO

IF exists(Select * from sysviews where name = 'DiscountActions' and CREATOR = 'DBO')
	DROP VIEW dbo.DiscountActions
GO

CREATE VIEW dbo.DiscountActions AS 
    SELECT	DA_Key AS DA_Key,
			DA_Name as DA_Name,
			DA_NameLat as DA_NameLat,
			DA_Comment as DA_Comment
	FROM	[dbo].[tbl_DiscountActions]
GO

grant select ,insert, delete,update on  [dbo].[tbl_DiscountActions] to public 
GO

grant select ,insert, delete,update on  [dbo].[DiscountActions] to public 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogListToQuotas]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogListToQuotas]
GO
CREATE PROCEDURE [dbo].[DogListToQuotas]
(
--<VERSION>2008.1.02.28a</VERSION>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null
) AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, 
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0)
FROM	DogovorList, Dogovor 
WHERE	DL_DGKey=DG_Key and DL_Key=@DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	return 0
END
SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey
	return 0
END

	


/*
If @SVKey=3
	SELECT TOP 1 @Quota_SubCode1=HR_RMKey, @Quota_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
Else
	Set @Quota_SubCode1=@SubCode1
*/
declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query varchar(8000), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @n2 smallint, @Result_Exist bit, @nTemp smallint, @dTemp datetime
--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2

	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
		return 0

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

--print 'sddddd0'
WHILE exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	--print @n
	set @n=@n+1
	Set @SubQuery = ' QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=' + CAST(@Q_Type as varchar(10)) + ' and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(10)) + '
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QO_QTID=QT_ID and QO_SVKey=' + CAST(@SVKey as varchar(10)) +' and QO_Code=' + CAST(@Code as varchar(10)) +' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10))
	IF @SVKey=3
		Set @SubQuery=@SubQuery+' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10))
	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))

	IF @Q_PRKey is null
		SET @SubQuery = @SubQuery + ' and QT_PRKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_PRKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations='''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 	

	Set @Query = '
		DECLARE @n1 smallint, @n2 smallint, @CurrentDate smalldatetime, @Long smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
		DECLARE @ServiceKeys Table 	(SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime )'

	IF @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +', SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_State is null'
	ELSE IF @Q_ByRoom=1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RLID=' + CAST(@SetQuotaRLKey as varchar(10)) + '	and SD_State is null'
	ELSE IF @Q_ByRoom=0
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RPID=' + CAST(@SetQuotaRPKey as varchar(10)) + ' and SD_State is null'

		Set @Query = @Query+'
			--SELECT * FROM @ServiceKeys
			SET @CurrentDate=''' + CAST(@Q_DateBeg as varchar(20)) + '''
			SET @Long=DATEDIFF(DAY,''' + CAST(@Q_DateBeg as varchar(20)) + ''',''' + CAST(@Q_DateEnd as varchar(20)) + ''')+1
			SET @Error=0
			SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			WHILE @SK_Current is not null and @Error=0
			BEGIN
				SET @n1=1
				WHILE @n1<=@Long and @Error=0
				BEGIN
					SET @QP_ID=null
					SET @n2=0
					WHILE (@QP_ID is null) and @n2<2
					BEGIN
						DECLARE @DATETEMP datetime
						SET @DATETEMP = GetDate()
						if exists (select SS_ParmValue from systemsettings where SS_ParmName=''SYSCheckQuotaRelease'' and SS_ParmValue=1)
							SET @DATETEMP=''10-JAN-1900''
						IF @prev=1'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 and QP_Durations=@durations_prev and QD_Release=@release_prev
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,-1)			
								ORDER BY ISNULL(QD_Release,0) DESC
			ELSE'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and QD2.QD_Release=QD1.QD_Release and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,-1)
								ORDER BY ISNULL(QD_Release,0) DESC

							SET @n2=@n2+1
						IF @QP_ID is null
							SET @prev=1				
						ELSE
							UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@CurrentDate)	
					END
					If @QP_ID is null
						SET @Error=1
					SET @n1=@n1+1
				END
				IF @Error=0
					UPDATE ServiceByDate SET SD_State=' + CAST(@Q_Type as varchar(1)) + ', SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +')
						WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +'=@SK_Current and SD_State is null
				SET @SK_Current=null	
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END'
--	print @Query
	exec (@Query)

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END
UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
GO
GRANT EXECUTE ON [dbo].[DogListToQuotas] TO PUBLIC 
GO
if not exists (select * from dbo.syscolumns where name = 'PF_CNKey' and id = object_id(N'[dbo].[Profiles]'))
	alter table Profiles add PF_CNKey int
GO
if not exists (select * from dbo.syscolumns where name = 'PF_CostType' and id = object_id(N'[dbo].[Profiles]'))
	alter table Profiles add PF_CostType smallint default 0
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalcPriceByNationalCurrencyRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[CalcPriceByNationalCurrencyRate]
GO
CREATE PROCEDURE [dbo].[CalcPriceByNationalCurrencyRate]
@dogovor_code varchar(50),
@currency varchar(5),
@old_currency varchar(5),
@national_currency varchar(5),
@price money,
@old_price money,
@who varchar(500),
@action varchar(50),
@final_price money output,
@new_currency_rate money,
@order_status smallint -- null OR passing the new value for dg_sor_code from the trigger when it's (dg_sor_code) updated
as
begin
	declare @sys_PrtReg varchar(5)
	set @sys_PrtReg = '0'
	select @sys_PrtReg = SS_ParmValue from SystemSettings where SS_ParmName = 'SYSPrtReg'
	if @sys_PrtReg = '1'
	begin
		set @final_price = null

		declare @current_national_price money
		set @current_national_price = null

		declare @difference money

		if @order_status is null
			select @order_status = DG_SOR_CODE, @difference = DG_PAYED - @old_price from tbl_Dogovor where DG_CODE = @dogovor_code
		else
			select @difference = DG_PAYED - @old_price from tbl_Dogovor where DG_CODE = @dogovor_code

		declare @flag smallint
		set @flag = 0

		if @currency <> @national_currency and
			@currency = @old_currency
			--and @order_status in (7,35)
			and @difference >= 0
		begin
			set @flag = 1
		end

		if @flag = 1
		begin
			create table #tmp (tmp_id int identity, currency_rate varchar(254), oa_id int)

			insert into #tmp(currency_rate, oa_id)
			select HI_TEXT, HI_OAId
			from history
			where HI_DGCOD = @dogovor_code and HI_OAId = 20 and HI_REMARK = @currency
			order by HI_DATE asc

			declare @last_rate money
			set @last_rate = null
			select top 1 @last_rate = cast(currency_rate as money) from #tmp order by tmp_id desc

			if @last_rate is not null
			begin
				if (@price - @old_price) = 0
				begin
					set @final_price = @old_price * @new_currency_rate
				end
				else
				begin
					declare @str varchar(1000)

					select @current_national_price = DG_NATIONALCURRENCYPRICE
					from tbl_dogovor
					where DG_CODE = @dogovor_code

					if (@price - @old_price) > 0 and @current_national_price is not null
					begin
						set @final_price = @current_national_price + (@price - @old_price) * @new_currency_rate
						set @str = cast(@current_national_price as varchar) + ' + (' + cast(@price as varchar) + ' - ' + cast(@old_price as varchar) + ') * ' + cast(@new_currency_rate as varchar)
					end
					else if (@price - @old_price) < 0
					begin
						set @final_price = @price * @last_rate
						set @str = cast(@price as varchar) + ' * ' + cast(@last_rate as varchar)
					end

					if @action = 'INSERT_TO_HISTORY'
					begin
						insert into dbo.history
						(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
						values
						(@dogovor_code, @who, @str, @currency, 'INS', 'CALC_FINAL_PRICE', 22)
					end
				end
			end

			drop table #tmp
		end
	end
end

GO
GRANT EXECUTE ON [dbo].[CalcPriceByNationalCurrencyRate] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetFinalPriceByNCRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetFinalPriceByNCRate]
GO
CREATE PROCEDURE [dbo].[GetFinalPriceByNCRate]
@dogovor_code varchar(100),
@currency varchar(5),
@old_currency varchar(5),
@price money,
@old_price money,
@final_price money output,
@national_currency_rate money output
AS
BEGIN
	declare @sys_PrtReg varchar(5)
	set @sys_PrtReg = '0'
	select @sys_PrtReg = SS_ParmValue from SystemSettings where SS_ParmName = 'SYSPrtReg'
	if @sys_PrtReg = '1'
	begin
		set @final_price = null
		set @national_currency_rate = null

		declare @national_currency varchar(5)
		select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

		declare @course money
		set @course = -1

		select top 1 @course = cast(isnull(HI_TEXT, -1) as money) from History
		where HI_DGCOD = @dogovor_code and HI_OAId=20 order by HI_DATE desc

		if @currency = @national_currency
		begin
			set @national_currency_rate = 1
			--set @final_price = @price
		end
		else if @currency = @old_currency and @course <> -1
		begin
			set @national_currency_rate = @course
			--set @final_price = @price * @national_currency_rate
		end
		else
		begin
			declare @rc_course money
			set @rc_course = -1
			select top 1 @rc_course =  cast(isnull(RC_COURSE, -1) as money) from RealCoursesFix
			where
			RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
			and convert(char(10), getdate(), 102) between convert(char(10), RC_DATEBEG, 102) and convert(char(10), RC_DATEEND, 102) and RC_COURSE is not null
			order by RC_Key desc

			if @rc_course <> -1
			begin
				set @national_currency_rate = @rc_course
			end
			else
			begin
				set @national_currency_rate = null
			end
		end

		if @national_currency_rate is not null
		begin
			set @final_price = @national_currency_rate * @price

			-- пересчитываем цену, если надо
			declare @tmp_final_price money
			set @tmp_final_price = null
			exec [dbo].[CalcPriceByNationalCurrencyRate] @dogovor_code, @currency, @old_currency, @national_currency, @price, @old_price, '', '', @tmp_final_price output, @national_currency_rate, null

			if @tmp_final_price is not null
			begin
				set @final_price = @tmp_final_price
			end
			--
		end
	end
END
GO
GRANT EXECUTE ON [dbo].[GetFinalPriceByNCRate] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyPrice]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyPrice]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyPrice]
@sRate varchar(5), -- валюта пересчета
@sRateOld varchar(5), -- старая валюта
@sDogovor varchar(100), -- код договора
@nPrice money, -- новая цена в указанной валюте
@nPriceOld money, -- старая цена
@nDiscountSum money, -- новая скидка в указанной валюте
@sAction varchar(100), -- действие
@order_status smallint -- null OR passing the new value for dg_sor_code from the trigger when it's (dg_sor_code) updated
AS
BEGIN
	declare @sys_PrtReg varchar(5)
	set @sys_PrtReg = '0'
	select @sys_PrtReg = SS_ParmValue from SystemSettings where SS_ParmName = 'SYSPrtReg'
	if @sys_PrtReg = '1'
	begin
		declare @national_currency varchar(5)
		select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

		declare @rc_course money
		declare @rc_courseStr char(30)


		if @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'
		begin
			set @rc_course = -1
			select top 1 @rc_courseStr = cast(isnull(RC_COURSE, -1) as varchar) from RealCoursesFix
			where
			RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
			and convert(char(10), getdate(), 102) between convert(char(10), RC_DATEBEG, 102) and convert(char(10), RC_DATEEND, 102) and RC_COURSE is not null
			order by RC_Key desc
			set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
		end
		else if @sAction = 'RECALCULATE_BY_OLD_CURRENCY_RATE'
		begin
			set @rc_course = -1
			select top 1 @rc_courseStr = HI_TEXT from History
			where HI_DGCOD = @sDogovor and HI_OAId=20 order by HI_DATE desc
			set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
		end

		if @sRate = @national_currency
		begin
			set @rc_courseStr = '1'
			set @rc_course = 1
		end
		
		declare @sHI_WHO varchar(25)
		exec dbo.CurrentUser @sHI_WHO output

		if @rc_course <> -1
		begin
			declare @final_price money
			set @final_price = @rc_course * @nPrice

			-- пересчитываем цену, если надо
			declare @tmp_final_price money
			set @tmp_final_price = null
			exec [dbo].[CalcPriceByNationalCurrencyRate] @sDogovor, @sRate, @sRateOld, @national_currency, @nPrice, @nPriceOld, @sHI_WHO, 'INSERT_TO_HISTORY', @tmp_final_price output, @rc_course, @order_status

			if @tmp_final_price is not null
			begin
				set @final_price = @tmp_final_price
			end
			--

			insert into dbo.history
			(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
			values
			(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'UPD', 'DOGOVORCURRENCY', 20)

			update dbo.tbl_Dogovor
			set
				DG_NATIONALCURRENCYPRICE = @final_price,
				DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
			where
				DG_CODE = @sDogovor
		end
		else
		begin
			update dbo.tbl_Dogovor
			set
				DG_NATIONALCURRENCYPRICE = null,
				DG_NATIONALCURRENCYDISCOUNTSUM = null
			where
				DG_CODE = @sDogovor

			insert into dbo.history
			(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
			values
			(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'UPD', 'DOGOVORCURRENCYISNULL', 21)
		end
	end
END
return 0
GO
GRANT EXECUTE ON [dbo].[NationalCurrencyPrice] TO PUBLIC 
GO

if not exists(select id from syscolumns where id = OBJECT_ID('PrtAccounts') and name = 'PA_Status')
	alter table dbo.PrtAccounts add PA_Status smallint not null default(0)
go

if exists(select id from syscolumns where id = OBJECT_ID('PrtAccounts') and name = 'PA_Account')
	alter table dbo.PrtAccounts alter column PA_Account varchar(40) null
go

if not exists(select id from syscolumns where id = OBJECT_ID('PrtAccounts') and name = 'PA_RAKey')
	alter table dbo.PrtAccounts add PA_RAKey int
go


IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS WHERE
	constraint_schema = 'dbo' AND table_name = 'PrtAccounts' AND Constraint_Name = 'FK_PrtAccounts_Rates')
BEGIN
	ALTER TABLE [dbo].[PrtAccounts] ADD CONSTRAINT [FK_PrtAccounts_Rates] FOREIGN KEY([PA_RAKey])
	REFERENCES [dbo].[Rates] ([RA_Key])
END
GO

if not exists(select id from syscolumns where id = OBJECT_ID('PrtAccounts') and name = 'PA_ForeignType')
	alter table dbo.PrtAccounts add PA_ForeignType smallint not null default(0)
go
-- 7.2.29
-- 090720(insert_action).sql
-- 7.2 - 8.1
if NOT exists(select ac_key from dbo.actions where ac_key = 65)
BEGIN
	insert into dbo.actions (AC_KEY, AC_NAME, AC_NAMELAT) 
	values 
		(65, 'Турпутевка->Разрешить изменять скидку', 'Reservation->Allow change discount')

	-- Даём всем права
	Insert into ActionsAuth (ACA_ACKey, ACA_USKey) 
	select distinct 65, ACA_USKey from ActionsAuth  

	Insert into GroupAuth (GRA_GRKey, GRA_ACKey)
	select distinct GRA_GRKey, 65 from GroupAuth  
END
GO

--090717(Create HostAccess).sql
-- 7.2 - 8.1
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[HostAccess]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE [dbo].[HostAccess](
	[HA_ID] [int] IDENTITY(1,1) NOT NULL,
	[HA_HOST] [varchar](100) NOT NULL,
	[HA_IPADDRESS] [varchar](200) NOT NULL,
	[HA_USKEY] [int] NOT NULL,
	[HA_DATA] [varchar](200) NOT NULL,
	[HA_STARTDATE] [datetime] NOT NULL,
	[HA_DATE] [datetime] NOT NULL CONSTRAINT [DF_HostAccess_HA_DATE]  DEFAULT (getdate()),
	[HA_FIRMNAME] [varchar](100) NOT NULL,
	[HA_NUM] [int] NOT NULL,
	[HA_USEDATE] [datetime] NOT NULL,
    [HA_TIME] [timestamp] NOT NULL,
 CONSTRAINT [PK_HostAccess] PRIMARY KEY CLUSTERED 
(
	[HA_ID] ASC
) ON [PRIMARY]
) ON [PRIMARY]
Go
GRANT select,insert ,delete , update on [dbo].[HostAccess] to public 
GO

-- 090721(UserList_AddColumn).sql
-- 7.2 - 8.1
if not exists (select * from dbo.syscolumns where name = 'US_LastLogDate' and id = object_id(N'[dbo].[UserList]'))
	alter table UserList add US_LastLogDate datetime
GO

-- sp_UpdateLastLogDate.sql
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UpdateLastLogDate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.UpdateLastLogDate
GO
-- Процедура для изменения времени последнего логина пользователя.
-- Нужна для того чтобы не давать всем пользователям права на UserList.
CREATE procedure [dbo].[UpdateLastLogDate]
AS
declare @nKey int
exec GetUserKey @nKey output
if exists (Select 1 from UserList where US_Key = @nKey)
	update UserList set US_LastLogDate = GETDATE() where US_Key = @nKey 
GO
GRANT EXECUTE ON dbo.UpdateLastLogDate TO PUBLIC 
GO 

-- 090722(Insert_SystemSettings).sql
-- 7.2 - 8.1
if not exists(select 1 from SystemSettings where SS_ParmName = 'SYSUseWebReplication')
	insert into SystemSettings(SS_ParmName, SS_ParmValue) values('SYSUseWebReplication', '0')
GO

-- sp_FillMasterWebSearchFields.sql (22.07.2009)
-- 7.2 - 8.1
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null)
as
begin

	declare @replicationSetting varchar(254)
	select @replicationSetting = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUseWebReplication'
	if IsNull(@replicationSetting, '0') = '1'
	begin
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
		return
	end

	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars varchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname varchar(200),
		thd_tourname varchar(200),
		thd_hdname varchar(200),
		thd_ctname varchar(200),
		thd_rsname varchar(200),
		thd_ctfromname varchar(200),
		thd_cttoname varchar(200),
		thd_tourtypename varchar(200),
		thd_pncode varchar(50),
		thd_hdorder int,
		thd_hotelkeys varchar(256),
		thd_pansionkeys varchar(256),
		thd_hotelnights varchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [varchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [varchar] (60),
		[pt_tourname] [varchar] (128),
		[pt_pnname] [varchar] (30),
		[pt_pncode] [varchar] (3),
		[pt_rmname] [varchar] (60),
		[pt_rmcode] [varchar] (60),
		[pt_rcname] [varchar] (60),
		[pt_rccode] [varchar] (40),
		[pt_acname] [varchar] (30),
		[pt_accode] [varchar] (30),
		[pt_rsname] [varchar] (50),
		[pt_ctname] [varchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [varchar] (3),
		[pt_toururl] [varchar] (128),
		[pt_hotelurl] [varchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys varchar(256),
		pt_hotelroomkeys varchar(256),
		pt_hotelstars varchar(256),
		pt_pansionkeys varchar(256),
		pt_hotelnights varchar(256),
		pt_chdirectkeys varchar(50) null,
		pt_chbackkeys varchar(50) null,
		[pt_topricefor] [smallint] NOT NULL DEFAULT (0)
	)

	declare @mwAccomodationPlaces varchar(254)
	declare @mwRoomsExtraPlaces varchar(254)
	declare @mwSearchType int
	declare @sql varchar(8000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0 and isnull(HR_AGEFROM, 100) > 16
		)
		where TO_Key = @toKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @toKey


	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey and tl_tokey = @tokey and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey
		and tl_tokey = @tokey
		and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- ключ города и ключ курорта + звезды
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor]
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0),
		to_pricefor
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as varchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

-- 090722(AlterColumn).sql
-- 7.2 - 8.1
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_PHONE')<60) 
alter table tbl_Turist alter column TU_PHONE varchar(60)
GO

-- sp_DogovorMonitor.sql (23.07.2009)
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogovorMonitor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogovorMonitor]
GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

CREATE PROCEDURE [dbo].[DogovorMonitor]
  (
--<VERSION>2007.2.23</VERSION>
--<DATE>2009-03-03</DATE>
	@dtStartDate datetime,			-- начальная дата просмотра изменений
	@dtEndDate datetime,			-- конечная дата просмотра изменений
	@nCountryKey int,				-- ключ страны
	@nCityKey int,					-- ключ города
	@nDepartureCityKey int,			-- ключ города вылета
	@nCreatorKey int,				-- ключ создателя
	@nOwnerKey int,					-- ключ ведущего менеджера
	@nViewProceed smallint,			-- не показывать обработанные: 0 - показывать, 1 - не показывать
	@sFilterKeys varchar(255)		-- ключи выбранных фильтров
  )
AS
BEGIN

CREATE TABLE #DogovorMonitorTable
(
	DM_CreateDate datetime, -- DM_HistoryDate
	DM_FirstProcDate datetime, -- NEW
	DM_LastProcDate datetime, -- DM_ProcDate
	DM_DGCODE nvarchar(10),
	DM_CREATOR nvarchar(25),
	DM_TurDate datetime,
	DM_TurName nvarchar(160),
	DM_PartnerName nvarchar(80),
	DM_FilterName nvarchar(1024),
	DM_NotesCount int,
	DM_PaymentStatus nvarchar(4),
	DM_IsBilled bit,
	DM_MessageCount int
)

declare @nObjectAliasFilter int, @sFilterType varchar(3)

DECLARE @dogovorCreateDate datetime, @lastDogovorActionDate datetime -- @dtHistoryDate
declare @sDGCode varchar(10), @nDGKey int
declare @sCreator varchar(25), @dtTurDate datetime, @sTurName varchar(160)
declare @sPartnerName varchar(80), @sFilterName varchar(255), @nHIID int
declare @sHistoryMod varchar(3), @sPaymentStatus as varchar(4)

set @sHistoryMod = 'DMP'

declare @nFilterKey int, @nLastPos int

while len(@sFilterKeys) > 0
begin
	set @nLastPos = 0
	set @nLastPos = charindex(',', @sFilterKeys, @nLastPos)
	if @nLastPos = 0
		set @nLastPos = len(@sFilterKeys) + 1
	
	set @nFilterKey = cast(substring(@sFilterKeys, 0, @nLastPos) as int)
	if @nLastPos <> len(@sFilterKeys) + 1
		set @sFilterKeys = substring(@sFilterKeys, @nLastPos + 1, len(@sFilterKeys) - @nLastPos)
	else
		set @sFilterKeys = ''
	
	select @sFilterName = DS_Value from Descriptions where DS_KEY = @nFilterKey


	declare filterCursor cursor local fast_forward for
	select OF_OAId, OF_Type
	from ObjectAliasFilters
	where OF_DSKey = @nFilterKey
	order by OF_OAId
	
	open filterCursor
	fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	while(@@fetch_status = 0)
	begin
		declare dogovorsCursor cursor local fast_forward for
		select DISTINCT 
			(SELECT MIN(HI_DATE) FROM history h2 WHERE h2.HI_DGCOD = DG_CODE) AS DOGOVOR_CREATE_DATE, 
			(SELECT MAX(HI_DATE) FROM history h2 WHERE h2.HI_DGCOD = DG_CODE) AS LAST_DOGOVOR_ACTION_DATE, 
			DG_CODE, US_FullName, DG_TurDate, TL_NAME, PR_NAME, DG_KEY,
			CASE
				WHEN DG_PRICE = 0 AND DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED = 0 THEN 'NONE'
				WHEN DG_PAYED < DG_PRICE THEN 'LOW'
				WHEN DG_PAYED = DG_PRICE THEN 'OK'
				WHEN DG_PAYED > DG_PRICE THEN 'OVER'
			END AS DM_PAYMENTSTATUS
		from dogovor, history, historydetail, userlist, TurList, Partners
		where HI_DGCOD = DG_CODE and HI_ID = HD_HIID and US_KEY = DG_CREATOR and TL_KEY = DG_TRKEY and PR_KEY = DG_PARTNERKEY and 
			HI_DATE BETWEEN @dtStartDate and dateadd(day, 1, @dtEndDate) and
			(@nCountryKey < 0 OR DG_CNKEY = @nCountryKey) and
			(@nCityKey < 0 OR DG_CTKEY = @nCityKey) and
			(@nDepartureCityKey < 0 OR DG_CTDepartureKey = @nDepartureCityKey) and
			(@nCreatorKey < 0 OR DG_CREATOR = @nCreatorKey) and
			(@nOwnerKey < 0 OR DG_OWNER = @nOwnerKey) and
			(HD_OAId = @nObjectAliasFilter) and
			--(@nViewProceed = 0 OR NOT EXISTS (select HI_ID from history where HI_DGKEY = DG_KEY and HI_MOD LIKE @sHistoryMod)) and
			(@sFilterType = '' OR HI_MOD = @sFilterType)

		--нашли путевки
		open dogovorsCursor
		fetch next from dogovorsCursor into @dogovorCreateDate, @lastDogovorActionDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		while(@@fetch_status = 0)
		begin
			--if not exists (select * from #DogovorMonitorTable where datediff(mi, DM_HistoryDate, @dtHistoryDate) = 0 and DM_DGCODE = @sDGCode and DM_FilterName LIKE @sFilterName)
			--begin
				DECLARE @firstDogovorProcessDate datetime 
				DECLARE @lastDogovorProcessDate datetime -- @hiDate

				SET @firstDogovorProcessDate = (select MIN(HI_DATE) from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
				SET @lastDogovorProcessDate = (select MAX(HI_DATE) from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)

--				--select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
--				if exists (select HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod)
--					select @hiDate = HI_DATE from history where HI_DGCOD = @sDGCode and HI_MOD LIKE @sHistoryMod
--				else
--					set @hiDate = NULL

				DECLARE @notesCount int
				SELECT @notesCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'WWW'

				DECLARE @isBilled bit
				SET @isBilled = 0
				IF EXISTS(SELECT AC_KEY FROM ACCOUNTS WHERE AC_DGCOD = @sDGCode)
					SET @isBilled = 1

				DECLARE @messageCount int
				SELECT @messageCount = COUNT(HI_TEXT) FROM HISTORY
				WHERE HI_DGCOD = @sDGCode AND HI_MOD = 'MTM'
				AND HI_TEXT NOT LIKE 'От агента: %' -- notes from web (copies of 'WWW' moded notes)

				DECLARE @includeRecord bit
				SET @includeRecord = 0

				if (@nViewProceed = 0) OR (@lastDogovorProcessDate IS NULL)
				begin
					--insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount)
					--values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
					SET @includeRecord = 1
				end
				else
				begin
					--if @dtHistoryDate > @hiDate
					if @lastDogovorActionDate > @lastDogovorProcessDate
					begin
						--insert into #DogovorMonitorTable (DM_HistoryDate, DM_ProcDate, DM_DGCODE, DM_CREATOR, DM_TurDate, DM_TurName, DM_PartnerName, DM_FilterName, DM_NotesCount, DM_PaymentStatus, DM_IsBilled, DM_MessageCount) 
						--values (@dtHistoryDate, @hiDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount)
						SET @includeRecord = 1
					end
				end

				-------------------
				IF @includeRecord = 1
				BEGIN
					IF EXISTS (SELECT dm_dgcode FROM #DogovorMonitorTable WHERE dm_dgcode = @sDGCode)
					BEGIN
						IF NOT EXISTS (SELECT 1 FROM #DogovorMonitorTable WHERE dm_dgcode = @sDGCode AND dm_filtername LIKE '%' + @sFilterName + '%')
							UPDATE #DogovorMonitorTable SET DM_FilterName = DM_FilterName + ', ' + @sFilterName WHERE dm_dgcode = @sDGCode
					END
					ELSE
					BEGIN
						INSERT INTO #DogovorMonitorTable
						VALUES (@dogovorCreateDate, @firstDogovorProcessDate, @lastDogovorProcessDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @sFilterName, @notesCount, @sPaymentStatus, @isBilled, @messageCount);
					END
				END
				-------------------

			--end
			fetch next from dogovorsCursor into @dogovorCreateDate, @lastDogovorActionDate, @sDGCode, @sCreator, @dtTurDate, @sTurName, @sPartnerName, @nDGKey, @sPaymentStatus
		end
			
		close dogovorsCursor
		deallocate dogovorsCursor

		fetch next from filterCursor into @nObjectAliasFilter, @sFilterType
	end

	close filterCursor
	deallocate filterCursor

end
	SELECT *
	FROM #DogovorMonitorTable
	ORDER BY DM_CreateDate
	
	DROP TABLE #DogovorMonitorTable

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXECUTE ON [dbo].[DogovorMonitor] TO Public
GO 

-- sp_SetDogovorState.sql (24.07.2009)
-- 7.2 - 8.1
if EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[SetDogovorState]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[SetDogovorState]
GO
CREATE PROCEDURE [dbo].[SetDogovorState] @DG_Key int
--<VERSION>7.2.27.1</VERSION>
--<DATE>2009-07-23</DATE>
as
IF EXISTS (SELECT * FROM Dogovor WHERE DG_Key=@DG_Key and DG_TurDate = '18991230')
	return 0
--Данная хранимая процедура используется только в новом модуле обмена.
--"Отказ", если хоть у одной услуги ключ статуса 21, значит надо поставить статус "Отказ" по путевке
IF EXISTS (SELECT * FROM DogovorList WHERE DL_Control=21 and DL_DGKey=@DG_Key)
	UPDATE Dogovor SET DG_SOR_Code=19 WHERE DG_Key=@DG_Key and DG_SOR_Code!=19
--"Ждет подтверждения", если хоть у одной услуги статус "не OK"
ELSE IF EXISTS (SELECT * FROM DogovorList WHERE DL_Control!=0 and DL_DGKey=@DG_Key)
	UPDATE Dogovor SET DG_SOR_Code=18 WHERE DG_Key=@DG_Key and DG_SOR_Code!=18
--"OK", все услуги "OK" --> путевка "OK"
ELSE	
	UPDATE Dogovor SET DG_SOR_Code=7 WHERE DG_Key=@DG_Key and DG_SOR_Code!=7
GO
GRANT EXECUTE ON [dbo].[SetDogovorState] TO Public
GO

-- T_DogovorUpdate.sql (24.07.2009)
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.29.1</VERSION>
--<DATE>2009-07-23</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint

	DECLARE @bUpdateNationalCurrencyPrice bit


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
		BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
			SET @bUpdateNationalCurrencyPrice = 1
		END
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, '') != ISNULL(@NDG_TurDate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output

				Update DogovorList set DL_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where DL_DGKey = @DG_Key
				Update tbl_Turist set TU_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where TU_DGKey = @DG_Key

				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN

					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
						SET @nDGSorCode_New = 7					--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Wait>0)
								SET @nDGSorCode_New = 3			--Wait-List

						IF @nDGSorCode_New != 3 
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Control > 0)
								SET @nDGSorCode_New = 4			--Не подтвержден

						UPDATE Dogovor SET DG_Sor_Code = @nDGSorCode_New WHERE DG_Key=@DG_Key
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output

				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				if (@nValue_Old is not null OR @nValue_New is not null)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key

		
		-- $$$ PRICE RECALCULATION $$$ --
		IF @bUpdateNationalCurrencyPrice = 1 AND @sMod = 'UPD'
		BEGIN
			DECLARE @sAction VARCHAR(100)
			SET @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'

			-- See if "variable" is set (with frmDogovor (tour.apl) only)
			IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
			BEGIN
				SELECT @sAction = [Action] FROM #RecalculateAction
				DROP TABLE #RecalculateAction
			END
	
			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
	  END
	  END

		-- recalculate if exchange rate changes (another table) & saving from frmDogovor (tour.apl)
		-- + force-drop #RecalculateAction table in case hasn't been
		IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
		BEGIN
			SELECT @sAction = [Action] FROM #RecalculateAction
			DROP TABLE #RecalculateAction

			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
		END
		-- $$$ ------------------- $$$ --

    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO

-- sp_FillString.sql (24.07.2009)
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FillString]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[FillString]
GO

CREATE procedure [dbo].[FillString] @str varchar(50) output, @len int, @fillChar varchar(1)
as
	if LEN(@str) < @Len
	begin
		declare @diff int
		set @diff = @len - DATALENGTH(@str)
		
		declare @fillStr varchar(50)
		set @fillStr = REPLICATE(@fillChar, @diff)
		
		if @fillChar = '0'
			set @str = @fillStr + @str
		else
			set @str = @str + @fillStr
	end
GO

grant execute on [dbo].[FillString] to public 
GO

-- T_DogovorListUpdate.sql (24.07.2009)
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.25.0</VERSION>
--<DATE>2009-04-24</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int
  DECLARE @sDisableDogovorStatusChange varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0

				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					select @sDisableDogovorStatusChange = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSDisDogovorStatusChange'
					if (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					begin
						set @nDGSorCode_New = 7				--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
						BEGIN
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
							BEGIN
								set @nDGSorCode_New = 3			--Wait-List
								set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
							END
						END
						IF @nDGSorGlobalCode_New!=3 
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
							BEGIN
								set @nDGSorCode_New = 4			--Не подтвержден
								set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
							END

						if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
						BEGIN
							update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
						END
					end
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
				
			END
		------------Аннуляция полиса при удаления услуги----------------------------------
		if (@sMod = 'DEL')
		BEGIN
			UPDATE InsPolicy
			SET IP_ARKEY = 0, IP_AnnulDate = GetDate()
			WHERE IP_DLKey = @DL_KEY AND IP_ARKEY IS NULL AND IP_ANNULDATE IS NULL
		END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

-- 090729(Add_OA).sql
-- 7.2 - 8.1
GO
if (select count(*) from ObjectAliases where OA_Id = 26) > 0
begin
     print 'В таблице ObjectAliases уже существует запись с OA_Id = 26.'
end
else
begin
     insert into ObjectAliases
	 (OA_Id, OA_Alias, OA_Name, OA_TABLEID)
	 values
     (26, 'CURRENCY_FIX', 'Изменение фиксации', 26)
end
GO

-- 090731(AddSetting).sql
-- 7.2 - 8.1
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSEnableNC')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSEnableNC', '0')
GO

-- sp_SetCurrencyRateManual.sql (31.07.2009)
-- 7.2 - 8.1
if EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[SetCurrencyRateManual]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[SetCurrencyRateManual]
GO
CREATE PROCEDURE [dbo].[SetCurrencyRateManual]
@dogovor_code varchar(10),
@course money
as
begin
	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	declare @currency varchar(10)
	select @currency = DG_RATE from tbl_dogovor where DG_CODE = @dogovor_code

	insert into dbo.history
	(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
	values
	(@dogovor_code, @sHI_WHO, cast(@course as nvarchar(25)), @currency, 'UPD', 'DG_COURSEEDIT', 20)

	UPDATE tbl_dogovor SET DG_NATIONALCURRENCYPRICE = DG_PRICE * @course
	WHERE DG_CODE = @dogovor_code
end
GO
GRANT EXECUTE ON [dbo].[SetCurrencyRateManual] TO Public
GO
-- 090805(AddColumn_Discount).sql
-- 7.2 - 8.1
if not exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[Discounts]') and name = 'DS_DepartureCityKey')
	ALTER TABLE  [dbo].[Discounts] ADD DS_DepartureCityKey int not null default 0

-- sp_GetPartnerCommission.sql (06.08.2009)
-- 7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetPartnerCommission] 
GO

CREATE   PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null,
	 @nDepartureCity int = 0
AS
     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int, @nAttr int, @nCTDepartureKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) 
		from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO

GRANT EXECUTE ON [dbo].[GetPartnerCommission]  TO PUBLIC 
GO
--2007.2.30  date2009-08-27

--090811(Delete_UserSettings).sql
--7.2 - 8.1
DELETE FROM dbo.usersettings WHERE st_parmname = 'PaymentDetailForm.historyDogovorGrid'
GO

--sp_SetDogovorState.sql
--7.2 - 8.1
if EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[SetDogovorState]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[SetDogovorState]
GO
CREATE PROCEDURE [dbo].[SetDogovorState] @DG_Key int
--<VERSION>7.2.28.1</VERSION>
--<DATE>2009-08-12</DATE>
as
IF EXISTS (SELECT * FROM Dogovor WHERE DG_Key=@DG_Key and DG_TurDate = '18991230')
	return 0
--Данная хранимая процедура используется только в новом модуле обмена.

DECLARE @SERVICE_CANCEL int, @DOGOVOR_CANCEL int, @DOGOVOR_WAIT int, @DOGOVOR_CONFIRM int
SELECT @SERVICE_CANCEL=CR_Key FROM SystemSettings,Controls WHERE SS_ParmValue=CR_Key and SS_ParmName='IL_SERVICE_CANCEL'
SELECT @DOGOVOR_CANCEL=OS_Code FROM SystemSettings,Order_Status WHERE SS_ParmValue=OS_Code and SS_ParmName='IL_DOGOVOR_CANCEL'
SELECT @DOGOVOR_WAIT=OS_Code FROM SystemSettings,Order_Status WHERE SS_ParmValue=OS_Code and SS_ParmName='IL_DOGOVOR_WAIT'
SELECT @DOGOVOR_CONFIRM=OS_Code FROM SystemSettings,Order_Status WHERE SS_ParmValue=OS_Code and SS_ParmName='IL_DOGOVOR_CONFIRM'

IF @SERVICE_CANCEL is null or @DOGOVOR_CANCEL is null or @DOGOVOR_WAIT is null or @DOGOVOR_CONFIRM is null
	return 0

--"Отказ", если хоть у одной услуги ключ статуса @SERVICE_CANCEL, значит надо поставить статус "Отказ" по путевке
IF EXISTS (SELECT * FROM DogovorList WHERE DL_Control=@SERVICE_CANCEL and DL_DGKey=@DG_Key)
	UPDATE Dogovor SET DG_SOR_Code=@DOGOVOR_CANCEL WHERE DG_Key=@DG_Key and DG_SOR_Code!=@DOGOVOR_CANCEL
--"Ждет подтверждения", если хоть у одной услуги статус "не OK"
ELSE IF EXISTS (SELECT * FROM DogovorList WHERE DL_Control!=0 and DL_DGKey=@DG_Key)
	UPDATE Dogovor SET DG_SOR_Code=@DOGOVOR_WAIT WHERE DG_Key=@DG_Key and DG_SOR_Code!=@DOGOVOR_WAIT
--"OK", все услуги "OK" --> путевка "OK"
ELSE	
	UPDATE Dogovor SET DG_SOR_Code=@DOGOVOR_CONFIRM WHERE DG_Key=@DG_Key and DG_SOR_Code!=@DOGOVOR_CONFIRM
GO
GRANT EXECUTE ON [dbo].[SetDogovorState] TO Public
GO

--sp_GetPartnerCommission.sql
--7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetPartnerCommission] 
GO

CREATE   PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null,
	 @nDepartureCity int = 0
AS
     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int, @nAttr int, @nCTDepartureKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) 
		from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO

GRANT EXECUTE ON [dbo].[GetPartnerCommission]  TO PUBLIC 
GO

--sp_FillMasterWebSearchFields.sql
--7.2 - 8.1
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null)
as
begin

	declare @replicationSetting nvarchar(254)
	select @replicationSetting = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUseWebReplication'
	if IsNull(@replicationSetting, '0') = '1'
	begin
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
		return
	end

	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200),
		thd_tourname nvarchar(200),
		thd_hdname nvarchar(200),
		thd_ctname nvarchar(200),
		thd_rsname nvarchar(200),
		thd_ctfromname nvarchar(200),
		thd_cttoname nvarchar(200),
		thd_tourtypename nvarchar(200),
		thd_pncode nvarchar(50),
		thd_hdorder int,
		thd_hotelkeys nvarchar(256),
		thd_pansionkeys nvarchar(256),
		thd_hotelnights nvarchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [nvarchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [nvarchar] (60),
		[pt_tourname] [nvarchar] (128),
		[pt_pnname] [nvarchar] (30),
		[pt_pncode] [nvarchar] (3),
		[pt_rmname] [nvarchar] (60),
		[pt_rmcode] [nvarchar] (60),
		[pt_rcname] [nvarchar] (60),
		[pt_rccode] [nvarchar] (40),
		[pt_acname] [nvarchar] (30),
		[pt_accode] [nvarchar] (30),
		[pt_rsname] [nvarchar] (50),
		[pt_ctname] [nvarchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [nvarchar] (3),
		[pt_toururl] [nvarchar] (128),
		[pt_hotelurl] [nvarchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys nvarchar(256),
		pt_hotelroomkeys nvarchar(256),
		pt_hotelstars nvarchar(256),
		pt_pansionkeys nvarchar(256),
		pt_hotelnights nvarchar(256),
		pt_chdirectkeys nvarchar(50) null,
		pt_chbackkeys nvarchar(50) null,
		[pt_topricefor] [smallint] NOT NULL DEFAULT (0)
	)

	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @sql nvarchar(4000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0 and isnull(HR_AGEFROM, 100) > 16
		)
		where TO_Key = @toKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @toKey


	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey and tl_tokey = @tokey and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey
		and tl_tokey = @tokey
		and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- ключ города и ключ курорта + звезды
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor]
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0),
		to_pricefor
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--T_DogovorListUpdate.sql
--7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorListUpdate]
GO

CREATE TRIGGER [dbo].[T_DogovorListUpdate]
ON [dbo].[tbl_DogovorList]
FOR UPDATE, INSERT, DELETE
AS
IF @@ROWCOUNT > 0
BEGIN
--<VERSION>2007.2.25.0</VERSION>
--<DATE>2009-04-24</DATE>
  DECLARE @ODL_DgCod varchar(10)
  DECLARE @ODL_Key int
  DECLARE @ODL_SvKey int
  DECLARE @ODL_Code int
  DECLARE @ODL_SubCode1 int
  DECLARE @ODL_SubCode2 int
  DECLARE @ODL_CnKey int
  DECLARE @ODL_CtKey int
  DECLARE @ODL_NMen smallint
  DECLARE @ODL_Day smallint
  DECLARE @ODL_NDays smallint
  DECLARE @ODL_PartnerKey int
  DECLARE @ODL_Cost money
  DECLARE @ODL_Brutto money
  DECLARE @ODL_Discount money
  DECLARE @ODL_Wait smallint
  DECLARE @ODL_Control int
  DECLARE @ODL_sDateBeg varchar(10)
  DECLARE @ODL_sDateEnd varchar(10)
  DECLARE @ODL_RealNetto money
  DECLARE @ODL_Attribute int
  DECLARE @ODL_PaketKey int
  DECLARE @ODL_Name varchar(250)
  DECLARE @ODL_Payed money
  DECLARE @ODL_DGKey int
  DECLARE @ODL_QuoteKey int
  DECLARE @ODL_TimeBeg datetime
  DECLARE @ODL_TimeEnd datetime

  DECLARE @NDL_DgCod varchar(10)
  DECLARE @NDL_Key int
  DECLARE @NDL_SvKey int
  DECLARE @NDL_Code int
  DECLARE @NDL_SubCode1 int
  DECLARE @NDL_SubCode2 int
  DECLARE @NDL_CnKey int
  DECLARE @NDL_CtKey int
  DECLARE @NDL_NMen smallint
  DECLARE @NDL_Day smallint
  DECLARE @NDL_NDays smallint
  DECLARE @NDL_PartnerKey int
  DECLARE @NDL_Cost money
  DECLARE @NDL_Brutto money
  DECLARE @NDL_Discount money
  DECLARE @NDL_Wait smallint
  DECLARE @NDL_Control int
  DECLARE @NDL_sDateBeg varchar(10)
  DECLARE @NDL_sDateEnd varchar(10)
  DECLARE @NDL_RealNetto money
  DECLARE @NDL_Attribute int
  DECLARE @NDL_PaketKey int
  DECLARE @NDL_Name varchar(250)
  DECLARE @NDL_Payed money
  DECLARE @NDL_DGKey int
  DECLARE @NDL_QuoteKey int
  DECLARE @NDL_TimeBeg datetime
  DECLARE @NDL_TimeEnd datetime

  DECLARE @sMod varchar(3)
  DECLARE @nDelCount int
  DECLARE @nInsCount int
  DECLARE @nHIID int
  DECLARE @sHI_Text varchar(254)
  DECLARE @DL_Key int
  DECLARE @nDGSorGlobalCode_Old int, @nDGSorGlobalCode_New int,  @nDGSorCode_New int, @dDGTourDate datetime, @nDGKey int
  DECLARE @bNeedCommunicationUpdate smallint
  DECLARE @nSVKey int
  DECLARE @sDisableDogovorStatusChange varchar(254), @sUpdateMainDogovorStatuses varchar(254)


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED

  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null,
			N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
			
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	O.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg, 
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null
    FROM DELETED O
  END
  ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_DogovorList CURSOR FOR 
    SELECT 	N.DL_Key,
			O.DL_DgCod, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_SubCode2, O.DL_CnKey, O.DL_CtKey, O.DL_NMen, O.DL_Day, O.DL_NDays, 
			O.DL_PartnerKey, O.DL_Cost, O.DL_Brutto, O.DL_Discount, O.DL_Wait, O.DL_Control, CONVERT( char(10), O.DL_DateBeg, 104), CONVERT( char(10), O.DL_DateEnd, 104),
			O.DL_RealNetto, O.DL_Attribute, O.DL_PaketKey, O.DL_Name, O.DL_Payed, O.DL_QuoteKey, O.DL_TimeBeg,
	  		N.DL_DgCod, N.DL_DGKey, N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_SubCode2, N.DL_CnKey, N.DL_CtKey, N.DL_NMen, N.DL_Day, N.DL_NDays, 
			N.DL_PartnerKey, N.DL_Cost, N.DL_Brutto, N.DL_Discount, N.DL_Wait, N.DL_Control, CONVERT( char(10), N.DL_DateBeg, 104), CONVERT( char(10), N.DL_DateEnd, 104),
			N.DL_RealNetto, N.DL_Attribute, N.DL_PaketKey, N.DL_Name, N.DL_Payed, N.DL_QuoteKey, N.DL_TimeBeg
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
  END

    OPEN cur_DogovorList
    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
    WHILE @@FETCH_STATUS = 0
	BEGIN
    	------------Проверка, надо ли что-то писать в историю квот-------------------------------------------   
		If ISNULL(@ODL_QuoteKey, 0) != ISNULL(@NDL_QuoteKey, 0) and (ISNULL(@NDL_QuoteKey, 0)>1 or ISNULL(@ODL_QuoteKey, 0)>1)
		BEGIN
			declare @sOper varchar(25)
			EXEC dbo.CurrentUser @sOper output
			if ISNULL(@ODL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'DEL', @sOper, @sHI_Text, @ODL_QuoteKey, @DL_Key)
			if ISNULL(@NDL_QuoteKey, 0)!=0
				INSERT INTO HistoryQuote (HQ_Date, HQ_Mod, HQ_Who, HQ_Text, HQ_QTKey, HQ_DLKey)
					VALUES (GETDATE(), 'INS', @sOper, @sHI_Text, @NDL_QuoteKey, @DL_Key)
		END

    	------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		If (
			ISNULL(@ODL_DgCod, '') != ISNULL(@NDL_DgCod, '')  OR
			ISNULL(@ODL_DGKey, '') != ISNULL(@NDL_DGKey, '')  OR
			ISNULL(@ODL_SvKey, '') != ISNULL(@NDL_SvKey, '')  OR
			ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')  OR
			ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')  OR
			ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')  OR
			ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, '')  OR
			ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, '')  OR
			ISNULL(@ODL_NMen, '') != ISNULL(@NDL_NMen, '')  OR
			ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, '')  OR
			ISNULL(@ODL_NDays, '') != ISNULL(@NDL_NDays, '')  OR
			ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, '')  OR
			ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0)  OR
			ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0)  OR
			ISNULL(@ODL_Discount, 0) != ISNULL(@NDL_Discount, 0)  OR
			ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')  OR
			ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR
			ISNULL(@ODL_sDateBeg, '') != ISNULL(@NDL_sDateBeg, '')  OR
			ISNULL(@ODL_sDateEnd, '') != ISNULL(@NDL_sDateEnd, '')  OR
			ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0)  OR
			ISNULL(@ODL_Attribute, '') != ISNULL(@NDL_Attribute, '')  OR
			ISNULL(@ODL_PaketKey, '') != ISNULL(@NDL_PaketKey, '') OR
			ISNULL(@ODL_Name, '') != ISNULL(@NDL_Name, '') OR 
			ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0) OR 
			ISNULL(@ODL_TimeBeg, 0) != ISNULL(@NDL_TimeBeg, 0)
		)
		BEGIN
		  	------------Запись в историю--------------------------------------------------------------------
			if (@sMod = 'INS')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			else if (@sMod = 'DEL')
				BEGIN
				SET @sHI_Text = ISNULL(@ODL_Name, '')
				SET @NDL_DgCod = @ODL_DgCod
				SET @nDGKey=@ODL_DGKey
				SET @nSVKey=@ODL_SvKey
				END
			else if (@sMod = 'UPD')
			BEGIN
				SET @sHI_Text = ISNULL(@NDL_Name, '')
				SET @nDGKey=@NDL_DGKey
				SET @nSVKey=@NDL_SvKey
			END
			EXEC @nHIID = dbo.InsHistory @NDL_DgCod, @nDGKey, 2, @DL_Key, @sMod, @sHI_Text, '', 0, ''
			--SELECT @nHIID = IDENT_CURRENT('History')		
			--------Детализация--------------------------------------------------

			DECLARE @sText_Old varchar(100)
			DECLARE @sText_New varchar(100)
    
    			DECLARE @sText_AllTypeRooming varchar(20)
			SET @sText_AllTypeRooming  = 'Все типы размещения'

			If (ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, ''))
			BEGIN
				exec dbo.GetSVCodeName @ODL_SvKey, @ODL_Code, @sText_Old, null
				exec dbo.GetSVCodeName @NDL_SvKey, @NDL_Code, @sText_New, null
				IF @NDL_SvKey=1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1027, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1028, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 3 or @NDL_SvKey = 8)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1029, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF @NDL_SvKey = 4
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1030, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE IF (@NDL_SvKey = 7 or @NDL_SvKey = 9)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1031, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
				ELSE 
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1032, @sText_Old, @sText_New, @ODL_Code, @NDL_Code, null, null, 0, @bNeedCommunicationUpdate output
			END

			If (ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, ''))
				IF @NDL_SvKey = 1 or @ODL_SvKey = 1
				BEGIN
					Select @sText_Old = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @ODL_SubCode1
					Select @sText_New = AS_Code + ' ' + AS_NameRus from AirService where AS_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1033, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 2 or @NDL_SvKey = 4 or @ODL_SvKey = 2 or @ODL_SvKey = 4
				BEGIN
					Select @sText_Old = TR_Name from Transport where TR_Key = @ODL_SubCode1
					Select @sText_New = TR_Name from Transport where TR_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1034, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 3 or @NDL_SvKey = 8 or @ODL_SvKey = 3 or @ODL_SvKey = 8
				BEGIN
					Select @sText_Old = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @ODL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					Select @sText_New = RM_Name + ',' + RC_Name + ',' + AC_Code from HotelRooms,Rooms,RoomsCategory,AccmdMenType where HR_Key = @NDL_SubCode1 and RM_Key=HR_RmKey and RC_Key=HR_RcKey and AC_Key=HR_AcKey
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE IF @NDL_SvKey = 7 or @NDL_SvKey = 9 or @ODL_SvKey = 7 or @ODL_SvKey = 9
				BEGIN
					IF @ODL_SubCode1 = 0
						Set @sText_Old = @sText_AllTypeRooming
					Else
						Select @sText_Old = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @ODL_SubCode1
					IF @NDL_SubCode1 = 0
						Set @sText_New = @sText_AllTypeRooming
					Else
						Select @sText_New = ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') from Cabine where CB_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1035, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A1_Name from AddDescript1 where A1_Key = @ODL_SubCode1
					Select @sText_New = A1_Name from AddDescript1 where A1_Key = @NDL_SubCode1
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1036, @sText_Old, @sText_New, @ODL_SubCode1, @NDL_SubCode1, null, null, 0, @bNeedCommunicationUpdate output
				END
	
			If (ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, ''))
				IF @NDL_SvKey = 3 or @NDL_SvKey = 7 or @ODL_SvKey = 3 or @ODL_SvKey = 7
				BEGIN
					Select @sText_Old = PN_Name from Pansion where PN_Key = @ODL_SubCode2
					Select @sText_New = PN_Name from Pansion where PN_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1037, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END
				ELSE
				BEGIN
					Select @sText_Old = A2_Name from AddDescript2 where A2_Key = @ODL_SubCode2
					Select @sText_New = A2_Name from AddDescript2 where A2_Key = @NDL_SubCode2
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1038, @sText_Old, @sText_New, @ODL_SubCode2, @NDL_SubCode2, null, null, 0, @bNeedCommunicationUpdate output
				END

			If (ISNULL(@ODL_PartnerKey, '') != ISNULL(@NDL_PartnerKey, ''))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODL_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDL_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1039, @sText_Old, @sText_New, @ODL_PartnerKey, @NDL_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, ''))
			BEGIN
				Select @sText_Old = CR_Name from Controls where CR_Key = @ODL_Control
				Select @sText_New = CR_Name from Controls where CR_Key = @NDL_Control
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1040, @sText_Old, @sText_New, @ODL_Control, @NDL_Control, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CtKey, '') != ISNULL(@NDL_CtKey, ''))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary where CT_Key = @ODL_CtKey
				Select @sText_New = CT_Name from CityDictionary where CT_Key = @NDL_CtKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1041, @sText_Old, @sText_New, @ODL_CtKey, @NDL_CtKey, null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_CnKey, '') != ISNULL(@NDL_CnKey, ''))
			BEGIN
				Select @sText_Old = CN_Name from Country where CN_Key = @ODL_CnKey
				Select @sText_New = CN_Name from Country where CN_Key = @NDL_CnKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1042, @sText_Old, @sText_New, @ODL_CnKey, @NDL_CnKey, null, null, 0, @bNeedCommunicationUpdate output
			END

		 	If (ISNULL(@ODL_NMen  , '') != ISNULL(@NDL_NMen, ''))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1043, @ODL_NMen  , @NDL_NMen, '', '', null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Cost as varchar(100))
				Set @sText_New = CAST(@NDL_Cost as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1044, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Brutto, 0) != ISNULL(@NDL_Brutto, 0))
			BEGIN	
				Set @sText_Old = CAST(@ODL_Brutto as varchar(100))
				Set @sText_New = CAST(@NDL_Brutto as varchar(100))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1045, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1046, @ODL_sDateBeg, @NDL_sDateBeg, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_sDateEnd, 0) != ISNULL(@NDL_sDateEnd, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1047, @ODL_sDateEnd, @NDL_sDateEnd, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1048, @ODL_NDays, @NDL_NDays, null, null, null, null, 0, @bNeedCommunicationUpdate output

			If (ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1049, @ODL_Wait, @NDL_Wait, @ODL_Wait, @NDL_Wait, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_Name, 0) != ISNULL(@NDL_Name, 0))
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1050, @ODL_Name, @NDL_Name, null, null, null, null, 0, @bNeedCommunicationUpdate output
			If (ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_RealNetto as varchar(10))
				Set @sText_New = CAST(@NDL_RealNetto as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1119, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If (ISNULL(@ODL_Payed, 0) != ISNULL(@NDL_Payed, 0))
			BEGIN
				Set @sText_Old = CAST(@ODL_Payed as varchar(10))
				Set @sText_New = CAST(@NDL_Payed as varchar(10))				
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1120, @sText_Old, @sText_New, '', '', null, null, 0, @bNeedCommunicationUpdate output
			END
			If @ODL_TimeBeg!=@NDL_TimeBeg
			BEGIN
				Set @sText_Old=ISNULL(CONVERT(char(5), @ODL_TimeBeg, 114), 0)
				Set @sText_New=ISNULL(CONVERT(char(5), @NDL_TimeBeg, 114), 0)
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1125, @sText_Old, @sText_New, null, null, @ODL_TimeBeg, @NDL_TimeBeg, 0, @bNeedCommunicationUpdate output
			END
			
			If (ISNULL(@ODL_Control, '') != ISNULL(@NDL_Control, '')  OR ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, ''))
			BEGIN
				Set @nDGSorGlobalCode_New = 0

				----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
				Select @nDGSorGlobalCode_Old = OS_Global, @dDGTourDate = DG_TurDate from Dogovor, dbo.Order_Status where DG_Key=@nDGKey and DG_Sor_Code=OS_Code
				IF @dDGTourDate != '30-DEC-1899' -- путевка не должна быть аннулирована.
				BEGIN
					select @sDisableDogovorStatusChange = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSDisDogovorStatusChange'
					if (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					begin
						set @nDGSorCode_New = 7				--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
						BEGIN
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Wait>0)
							BEGIN
								set @nDGSorCode_New = 3			--Wait-List
								set @nDGSorGlobalCode_New = 3	--Глобальный Wait-List
							END
						END
						IF @nDGSorGlobalCode_New!=3 
							IF exists (Select DL_Key from DogovorList where DL_DGKey=@nDGKey and DL_Control > 0)
							BEGIN
								set @nDGSorCode_New = 4			--Не подтвержден
								set @nDGSorGlobalCode_New = 1	--Глобальный "Не подтвержден"
							END

						if @nDGSorGlobalCode_Old != @nDGSorGlobalCode_New
						BEGIN
							select @sUpdateMainDogovorStatuses = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUpdateMainDogStatuses'
							if (ISNULL(@sUpdateMainDogovorStatuses, '0') = '0')
								update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey
							else
								-- изменяем статус путевки только если он был стандартным
								update Dogovor set DG_Sor_Code = @nDGSorCode_New where DG_Key=@nDGKey and DG_Sor_Code in (1,2,3,7)
						END
					end
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET 
							CM_StatusConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=1 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusNotConfirmed=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=3 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusWait=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState=2 AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
							CM_StatusUnknown=(SELECT Count(1) FROM DogovorList, Controls WHERE DL_Control=CR_Key AND CR_GlobalState is null AND DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
						WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)					
				END
			END
			If ( ( ISNULL(@ODL_Cost, 0) != ISNULL(@NDL_Cost, 0) ) or ( ISNULL(@ODL_RealNetto, 0) != ISNULL(@NDL_RealNetto, 0) ) )
			BEGIN	
				If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
					UPDATE Communications SET 
						CM_SumNettoPlan=(SELECT SUM(DL_Cost) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey),
						CM_SumNettoProvider=(SELECT SUM(DL_RealNetto) FROM DogovorList WHERE DL_PartnerKey=CM_PRKey AND DL_DGKey=CM_DGKey)
					WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
			END
		END

			If @bNeedCommunicationUpdate=1
			BEGIN
				If @nSVKey=1 and ( 
						(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or 
						(ISNULL(@ODL_sDateBeg, 0) != ISNULL(@NDL_sDateBeg, 0))
						 )
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey)
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey
				END
				
				ELSE
				BEGIN
					If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey) )
						UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@nDGKey and CM_PRKey in (@ODL_PartnerKey,@NDL_PartnerKey)
				END
				
			END
		------------Аннуляция полиса при удаления услуги----------------------------------
		if (@sMod = 'DEL')
		BEGIN
			UPDATE InsPolicy
			SET IP_ARKEY = 0, IP_AnnulDate = GetDate()
			WHERE IP_DLKey = @DL_KEY AND IP_ARKEY IS NULL AND IP_ANNULDATE IS NULL
		END

    	------------Для поддержки совместимости-------------------------------------------   

			If 	(ISNULL(@ODL_Code, '') != ISNULL(@NDL_Code, '')) or
				(ISNULL(@ODL_SubCode1, '') != ISNULL(@NDL_SubCode1, '')) or
				(ISNULL(@ODL_SubCode2, '') != ISNULL(@NDL_SubCode2, '')) or
				(ISNULL(@ODL_NDays, 0) != ISNULL(@NDL_NDays, 0)) or 
				(ISNULL(@ODL_Day, '') != ISNULL(@NDL_Day, ''))
				EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, 'MOD', @ODL_Name, '', 1, ''

			If 	(ISNULL(@ODL_Wait, '') != ISNULL(@NDL_Wait, '')) 
			BEGIN
				If (@NDL_Wait = 1)
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '+WL', @ODL_Name, '', 0, ''
				else
					EXECUTE dbo.InsHistory @NDL_DgCod, @NDL_DGKey, 2, @DL_Key, '-WL', @ODL_Name, '', 0, ''
			END

		    FETCH NEXT FROM cur_DogovorList INTO 
		@DL_Key, 
			@ODL_DgCod, @ODL_DGKey, @ODL_SvKey, @ODL_Code, @ODL_SubCode1, @ODL_SubCode2, @ODL_CnKey, @ODL_CtKey, @ODL_NMen, @ODL_Day, @ODL_NDays, 
			@ODL_PartnerKey, @ODL_Cost, @ODL_Brutto, @ODL_Discount, @ODL_Wait, @ODL_Control, @ODL_sDateBeg, @ODL_sDateEnd, 
			@ODL_RealNetto, @ODL_Attribute, @ODL_PaketKey, @ODL_Name, @ODL_Payed, @ODL_QuoteKey, @ODL_TimeBeg,
			@NDL_DgCod, @NDL_DGKey, @NDL_SvKey, @NDL_Code, @NDL_SubCode1, @NDL_SubCode2, @NDL_CnKey, @NDL_CtKey, @NDL_NMen, @NDL_Day, @NDL_NDays, 
			@NDL_PartnerKey, @NDL_Cost, @NDL_Brutto, @NDL_Discount, @NDL_Wait, @NDL_Control, @NDL_sDateBeg, @NDL_sDateEnd, 
			@NDL_RealNetto, @NDL_Attribute, @NDL_PaketKey, @NDL_Name, @NDL_Payed, @NDL_QuoteKey, @NDL_TimeBeg
	END
  CLOSE cur_DogovorList
  DEALLOCATE cur_DogovorList
 END
GO

--090817(Insert_SystemSettings).sql
--7.2 - 8.1
if not exists (select SS_Id from dbo.SystemSettings where SS_ParmName like 'SYSCheckPriceListCosts')
	insert into dbo.SystemSettings(SS_ParmName, SS_ParmValue) values('SYSCheckPriceListCosts', 0)
GO

--T_DogovorUpdate.sql
--7.2 - 8.1
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2007.2.29.1</VERSION>
--<DATE>2009-07-23</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint

	DECLARE @bUpdateNationalCurrencyPrice bit

	DECLARE  @sUpdateMainDogovorStatuses varchar(254)


  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
		BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
			SET @bUpdateNationalCurrencyPrice = 1
		END
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, '') != ISNULL(@NDG_TurDate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output

				Update DogovorList set DL_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where DL_DGKey = @DG_Key
				Update tbl_Turist set TU_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where TU_DGKey = @DG_Key

				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN

					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
					----------------Изменение статуса путевки в случае, если статусы услуг установлены в ОК
						SET @nDGSorCode_New = 7					--ОК
						IF exists (SELECT 1 FROM dbo.Setting WHERE ST_Version like '7%')
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Wait>0)
								SET @nDGSorCode_New = 3			--Wait-List

						IF @nDGSorCode_New != 3 
							IF exists (SELECT DL_Key FROM DogovorList WHERE DL_DGKey=@DG_Key and DL_Control > 0)
								SET @nDGSorCode_New = 4			--Не подтвержден
						
						select @sUpdateMainDogovorStatuses = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUpdateMainDogStatuses'
						if (ISNULL(@sUpdateMainDogovorStatuses, '0') = '0')
							UPDATE Dogovor SET DG_Sor_Code = @nDGSorCode_New WHERE DG_Key=@DG_Key
						else
							-- изменяем статус путевки только если он был стандартным
							UPDATE Dogovor SET DG_Sor_Code = @nDGSorCode_New WHERE DG_Key=@DG_Key and DG_Sor_Code in (1,2,3,7)
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				------путевка была создана--------------
				if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output

				SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				if (@nValue_Old is not null OR @nValue_New is not null)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key

		
		-- $$$ PRICE RECALCULATION $$$ --
		IF @bUpdateNationalCurrencyPrice = 1 AND @sMod = 'UPD'
		BEGIN
			DECLARE @sAction VARCHAR(100)
			SET @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'

			-- See if "variable" is set (with frmDogovor (tour.apl) only)
			IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
			BEGIN
				SELECT @sAction = [Action] FROM #RecalculateAction
				DROP TABLE #RecalculateAction
			END
	
			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
	  END
	  END

		-- recalculate if exchange rate changes (another table) & saving from frmDogovor (tour.apl)
		-- + force-drop #RecalculateAction table in case hasn't been
		IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
		BEGIN
			SELECT @sAction = [Action] FROM #RecalculateAction
			DROP TABLE #RecalculateAction

			EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
		END
		-- $$$ ------------------- $$$ --

    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO

--090824(Insert_SystemSettings).sql
--7.2 - 8.1
if not exists (select SS_Id from dbo.SystemSettings where SS_ParmName like 'SYSCheckPriceListCosts')
	insert into dbo.SystemSettings(SS_ParmName, SS_ParmValue) values('SYSCheckPriceListCosts', 0)
GO

--(090825_CreateTable_CalculatingPriceLists).sql
--7.2 - 8.1
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatingPriceLists]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE [dbo].[CalculatingPriceLists] (
	[CP_Key] [int] IDENTITY (1, 1) NOT NULL,
	[CP_PriceTourKey] [int] NULL,
	[CP_SaleDate] [datetime] NULL,
	[CP_NullCostAsZero] [smallint] NULL,
	[CP_NoFlight] [smallint] NULL,
	[CP_Update] [smallint] NULL,
	[CP_GroupByPeriod] [smallint] NULL,
	[CP_PriceList2006] [smallint] NULL,
	[CP_PLNotDeleted] [smallint] NULL,
	[CP_TourKey] [int] NULL,
	[CP_UserKey] [int] NULL,
	[CP_CreateDate] [datetime] default getdate()
) ON [PRIMARY]
GO

grant select, insert, update, delete on [dbo].[CalculatingPriceLists] to public
GO

--090826(DUP_USER_us_attribute).sql
--7.2 - 8.1
if not exists(select 1 from syscolumns where id = object_id('dbo.DUP_USER', 'u') and name = 'US_Attribute')
	alter table dbo.DUP_USER add US_Attribute int default 0
go

update dup_user
set us_attribute = 0
where us_attribute is null
go

exec sp_refreshviewforall DUP_USER
go

--090828(AlterTable_DupUsers).sql
--7.2 - 8.1
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS 
	where TABLE_SCHEMA='dbo' and TABLE_NAME='DUP_USER' and COLUMN_NAME='US_PASSWORD') < 256) 
alter table DUP_USER alter column US_PASSWORD varchar(256)
GO
--2007.2.31  date2009-09-17

--090901(AlterTable_Partners_FullName).sql
--7.2 - 9.2
if((select CHARACTER_MAXIMUM_LENGTH from INFORMATION_SCHEMA.COLUMNS where TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Partners' and COLUMN_NAME='PR_FULLNAME') < 160)
	alter table tbl_Partners alter column PR_FULLNAME varchar(160)
GO

exec sp_refreshviewforall Partners
go

--T_PartnerUpdate.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_PartnerUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	drop trigger [dbo].[T_PartnerUpdate]
GO

CREATE TRIGGER [T_PartnerUpdate]
ON [dbo].[tbl_Partners] 
FOR UPDATE, INSERT, DELETE
AS
---<VERSION>7.2.30.1</VERSION>
--<DATE>2009-09-01</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE 
		@PR_Key int,
		@OPR_FullName varchar(160), @OPR_Name varchar(50), @OPR_NameEng varchar(80), @OPR_BossName varchar(40), @OPR_Boss varchar(50), @OPR_Adress varchar(160), 
		@OPR_Phones varchar(254), @OPR_Fax varchar(20), @OPR_Email varchar(50), @OPR_CTKey int, @OPR_Cod varchar(6), @OPR_Filial int, 
		@OPR_Owner int, @OPR_Deleted smallint, @OPR_LicenseNumber varchar(50), @OPR_AdditionalInfo varchar(50), @OPR_LegalAddress varchar(160), @OPR_INN varchar(30), 
		@OPR_KPP varchar(30), @OPR_CodeOKONH varchar(30), @OPR_CodeOKPO varchar(30), @OPR_HomePage varchar(100), @OPR_LegalPostIndex varchar(6), @OPR_PostIndex varchar(6), 
		@OPR_RegisterNumber varchar(50), @OPR_RegisterSeries varchar(10),

		@NPR_FullName varchar(160), @NPR_Name varchar(50), @NPR_NameEng varchar(80), @NPR_BossName varchar(40), @NPR_Boss varchar(50), @NPR_Adress varchar(160), 
		@NPR_Phones varchar(254), @NPR_Fax varchar(20), @NPR_Email varchar(50), @NPR_CTKey int, @NPR_Cod varchar(6), @NPR_Filial int, 
		@NPR_Owner int, @NPR_Deleted smallint, @NPR_LicenseNumber varchar(50), @NPR_AdditionalInfo varchar(50), @NPR_LegalAddress varchar(160), @NPR_INN varchar(30), 
		@NPR_KPP varchar(30), @NPR_CodeOKONH varchar(30), @NPR_CodeOKPO varchar(30), @NPR_HomePage varchar(100), @NPR_LegalPostIndex varchar(6), @NPR_PostIndex varchar(6), 
		@NPR_RegisterNumber varchar(50), @NPR_RegisterSeries varchar(10),
    
		@sMod varchar(3), @nDelCount int, @nInsCount int, @nHIID int, @sHI_Text varchar(254), @sText_Old varchar(254), @sText_New varchar(254)

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Partner CURSOR FOR 
		SELECT N.PR_Key, 
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null,
			N.PR_FullName, N.PR_Name, N.PR_NameEng, N.PR_BossName, N.PR_Boss, N.PR_Adress, 
			N.PR_Phones, N.PR_Fax, N.PR_Email, N.PR_CTKey, N.PR_Cod, N.PR_Filial, 
			N.PR_Owner, N.PR_Deleted, N.PR_LicenseNumber, N.PR_AdditionalInfo, N.PR_LegalAddress, N.PR_INN, 
			N.PR_KPP, N.PR_CodeOKONH, N.PR_CodeOKPO, N.PR_HomePage, N.PR_LegalPostIndex, N.PR_PostIndex, 
			N.PR_RegisterNumber, N.PR_RegisterSeries
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Partner CURSOR FOR 
		SELECT O.PR_Key, 
			O.PR_FullName, O.PR_Name, O.PR_NameEng, O.PR_BossName, O.PR_Boss, O.PR_Adress, 
			O.PR_Phones, O.PR_Fax, O.PR_Email, O.PR_CTKey, O.PR_Cod, O.PR_Filial, 
			O.PR_Owner, O.PR_Deleted, O.PR_LicenseNumber, O.PR_AdditionalInfo, O.PR_LegalAddress, O.PR_INN, 
			O.PR_KPP, O.PR_CodeOKONH, O.PR_CodeOKPO, O.PR_HomePage, O.PR_LegalPostIndex, O.PR_PostIndex, 
			O.PR_RegisterNumber, O.PR_RegisterSeries, 
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null, null, null, null, null,
			null, null
      FROM DELETED O 
  END
  ELSE 
  BEGIN
	SET @sMod = 'UPD'
    DECLARE cur_Partner CURSOR FOR 
		SELECT N.PR_Key, 
			O.PR_FullName, O.PR_Name, O.PR_NameEng, O.PR_BossName, O.PR_Boss, O.PR_Adress, 
			O.PR_Phones, O.PR_Fax, O.PR_Email, O.PR_CTKey, O.PR_Cod, O.PR_Filial, 
			O.PR_Owner, O.PR_Deleted, O.PR_LicenseNumber, O.PR_AdditionalInfo, O.PR_LegalAddress, O.PR_INN, 
			O.PR_KPP, O.PR_CodeOKONH, O.PR_CodeOKPO, O.PR_HomePage, O.PR_LegalPostIndex, O.PR_PostIndex, 
			O.PR_RegisterNumber, O.PR_RegisterSeries, 
		  	N.PR_FullName, N.PR_Name, N.PR_NameEng, N.PR_BossName, N.PR_Boss, N.PR_Adress, 
			N.PR_Phones, N.PR_Fax, N.PR_Email, N.PR_CTKey, N.PR_Cod, N.PR_Filial, 
			N.PR_Owner, N.PR_Deleted, N.PR_LicenseNumber, N.PR_AdditionalInfo, N.PR_LegalAddress, N.PR_INN, 
			N.PR_KPP, N.PR_CodeOKONH, N.PR_CodeOKPO, N.PR_HomePage, N.PR_LegalPostIndex, N.PR_PostIndex, 
			N.PR_RegisterNumber, N.PR_RegisterSeries
      FROM DELETED O, INSERTED N 
      WHERE N.PR_Key = O.PR_Key
  END

  OPEN cur_Partner
    FETCH NEXT FROM cur_Partner INTO
		@PR_Key,
		@OPR_FullName, @OPR_Name, @OPR_NameEng, @OPR_BossName, @OPR_Boss, @OPR_Adress, 
		@OPR_Phones, @OPR_Fax, @OPR_Email, @OPR_CTKey, @OPR_Cod, @OPR_Filial, 
		@OPR_Owner, @OPR_Deleted, @OPR_LicenseNumber, @OPR_AdditionalInfo, @OPR_LegalAddress, @OPR_INN, 
		@OPR_KPP, @OPR_CodeOKONH, @OPR_CodeOKPO, @OPR_HomePage, @OPR_LegalPostIndex, @OPR_PostIndex, 
		@OPR_RegisterNumber, @OPR_RegisterSeries,
		@NPR_FullName, @NPR_Name, @NPR_NameEng, @NPR_BossName, @NPR_Boss, @NPR_Adress, 
		@NPR_Phones, @NPR_Fax, @NPR_Email, @NPR_CTKey, @NPR_Cod, @NPR_Filial, 
		@NPR_Owner, @NPR_Deleted, @NPR_LicenseNumber, @NPR_AdditionalInfo, @NPR_LegalAddress, @NPR_INN, 
		@NPR_KPP, @NPR_CodeOKONH, @NPR_CodeOKPO, @NPR_HomePage, @NPR_LegalPostIndex, @NPR_PostIndex, 
		@NPR_RegisterNumber, @NPR_RegisterSeries

    WHILE @@FETCH_STATUS = 0
    BEGIN 
	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
		IF	(
			ISNULL(@OPR_FullName, '')	!= ISNULL(@NPR_FullName, '') OR
			ISNULL(@OPR_Name, '')		!= ISNULL(@NPR_Name, '') OR
			ISNULL(@OPR_NameEng, '')	!= ISNULL(@NPR_NameEng, '') OR
			ISNULL(@OPR_BossName, '')	!= ISNULL(@NPR_BossName, '') OR
			ISNULL(@OPR_Boss, '')		!= ISNULL(@NPR_Boss, '') OR
			ISNULL(@OPR_Adress, '')		!= ISNULL(@NPR_Adress, '') OR
			ISNULL(@OPR_Phones, '')		!= ISNULL(@NPR_Phones, '') OR
			ISNULL(@OPR_Fax, '')		!= ISNULL(@NPR_Fax, '') OR
			ISNULL(@OPR_Email, '')		!= ISNULL(@NPR_Email, '') OR
			ISNULL(@OPR_CTKey, 0)		!= ISNULL(@NPR_CTKey, 0) OR
			ISNULL(@OPR_Cod, '')			!= ISNULL(@NPR_Cod, '') OR
			ISNULL(@OPR_Filial, 0)		!= ISNULL(@NPR_Filial, 0) OR
			ISNULL(@OPR_Owner, 0)		!= ISNULL(@NPR_Owner, 0) OR
			ISNULL(@OPR_Deleted, 0)		!= ISNULL(@NPR_Deleted, 0) OR
			ISNULL(@OPR_LicenseNumber, '')  != ISNULL(@NPR_LicenseNumber, '') OR
			ISNULL(@OPR_AdditionalInfo, '') != ISNULL(@NPR_AdditionalInfo, '') OR
			ISNULL(@OPR_LegalAddress, '')   != ISNULL(@NPR_LegalAddress, '')  OR
			ISNULL(@OPR_INN, '')			!= ISNULL(@NPR_INN, '')  OR
			ISNULL(@OPR_KPP, '')			!= ISNULL(@NPR_KPP, '')  OR
			ISNULL(@OPR_CodeOKONH, '')	!= ISNULL(@NPR_CodeOKONH, '')  OR
			ISNULL(@OPR_CodeOKPO, '')	!= ISNULL(@NPR_CodeOKPO, '')  OR
			ISNULL(@OPR_HomePage, '')	!= ISNULL(@NPR_HomePage, '')  OR
			ISNULL(@OPR_LegalPostIndex, '') != ISNULL(@NPR_LegalPostIndex, '')  OR
			ISNULL(@OPR_PostIndex, '')	!= ISNULL(@NPR_PostIndex, '')  OR
			ISNULL(@OPR_RegisterNumber, '') != ISNULL(@NPR_RegisterNumber, '')  OR
			ISNULL(@OPR_RegisterSeries, '') != ISNULL(@NPR_RegisterSeries, '') 
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		
		if (@sMod = 'INS') or (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NPR_Name, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@OPR_Name, '')
		EXEC @nHIID = dbo.InsHistory '', null, 10, @PR_Key, @sMod, @sHI_Text, '', 0, ''

		--------Детализация--------------------------------------------------
		if (ISNULL(@OPR_FullName, '')	!= ISNULL(@NPR_FullName, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10001, @OPR_FullName, @NPR_FullName, null, null, null, null, 0
		if (ISNULL(@OPR_Name, '')		!= ISNULL(@NPR_Name, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10002, @OPR_Name, @NPR_Name, null, null, null, null, 0
		if (ISNULL(@OPR_NameEng, '')	!= ISNULL(@NPR_NameEng, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10003, @OPR_NameEng, @NPR_NameEng, null, null, null, null, 0
		if (ISNULL(@OPR_BossName, '')	!= ISNULL(@NPR_BossName, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10004, @OPR_BossName, @NPR_BossName, null, null, null, null, 0
		if (ISNULL(@OPR_Boss, '')		!= ISNULL(@NPR_Boss, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10005, @OPR_Boss, @NPR_Boss, null, null, null, null, 0
		if (ISNULL(@OPR_Adress, '')		!= ISNULL(@NPR_Adress, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10006, @OPR_Adress, @NPR_Adress, null, null, null, null, 0
		if (ISNULL(@OPR_Phones, '')		!= ISNULL(@NPR_Phones, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10007, @OPR_Phones, @NPR_Phones, null, null, null, null, 0
		if (ISNULL(@OPR_Fax, '')		!= ISNULL(@NPR_Fax, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10008, @OPR_Fax, @NPR_Fax, null, null, null, null, 0
		if (ISNULL(@OPR_Email, '')		!= ISNULL(@NPR_Email, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10009, @OPR_Email, @NPR_Email, null, null, null, null, 0
		if (ISNULL(@OPR_CTKey, 0)		!= ISNULL(@NPR_CTKey, 0))
		BEGIN
			Set @sText_Old = null
			Set @sText_New = null
			SELECT @sText_Old=CT_Name FROM dbo.CityDictionary WHERE CT_Key=@OPR_CTKey
			SELECT @sText_New=CT_Name FROM dbo.CityDictionary WHERE CT_Key=@NPR_CTKey
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10010, @sText_Old, @sText_New, @OPR_CTKey, @NPR_CTKey, null, null, 0
		END
		if (ISNULL(@OPR_Cod, '')			!= ISNULL(@NPR_Cod, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10011, @OPR_Cod, @NPR_Cod, null, null, null, null, 0
		if (ISNULL(@OPR_Filial, 0)		!= ISNULL(@NPR_Filial, 0))
		BEGIN
			Set @sText_Old = null
			Set @sText_New = null
			SELECT @sText_Old=CASE WHEN @OPR_Filial=1 THEN 'Фирма-владелец' WHEN @OPR_Filial=2 THEN 'Филиал' ELSE '' END
			SELECT @sText_New=CASE WHEN @NPR_Filial=1 THEN 'Фирма-владелец' WHEN @NPR_Filial=2 THEN 'Филиал' ELSE '' END
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10012, @sText_Old, @sText_New, @OPR_Filial, @NPR_Filial, null, null, 0
		END
		if (ISNULL(@OPR_Owner, 0)		!= ISNULL(@NPR_Owner, 0))
		BEGIN
			Set @sText_Old = null
			Set @sText_New = null
			SELECT @sText_Old=US_FullName FROM dbo.UserList WHERE US_Key=@OPR_Owner
			SELECT @sText_New=US_FullName FROM dbo.UserList WHERE US_Key=@NPR_Owner
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10013, @sText_Old, @sText_New, @OPR_Owner, @NPR_Owner, null, null, 0
		END
		if (ISNULL(@OPR_Deleted, 0)		!= ISNULL(@NPR_Deleted, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10014, @OPR_Deleted, @NPR_Deleted, @OPR_Deleted, @NPR_Deleted, null, null, 0
		if (ISNULL(@OPR_LicenseNumber, '')  != ISNULL(@NPR_LicenseNumber, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10015, @OPR_LicenseNumber, @NPR_LicenseNumber, null, null, null, null, 0
		if (ISNULL(@OPR_AdditionalInfo, '') != ISNULL(@NPR_AdditionalInfo, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10016, @OPR_AdditionalInfo, @NPR_AdditionalInfo, null, null, null, null, 0
		if (ISNULL(@OPR_LegalAddress, '')   != ISNULL(@NPR_LegalAddress, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10017, @OPR_LegalAddress, @NPR_LegalAddress, null, null, null, null, 0
		if (ISNULL(@OPR_INN, '')			!= ISNULL(@NPR_INN, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10018, @OPR_INN, @NPR_INN, null, null, null, null, 0
		if (ISNULL(@OPR_KPP, '')			!= ISNULL(@NPR_KPP, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10019, @OPR_KPP, @NPR_KPP, null, null, null, null, 0
		if (ISNULL(@OPR_CodeOKONH, '')	!= ISNULL(@NPR_CodeOKONH, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10020, @OPR_CodeOKONH, @NPR_CodeOKONH, null, null, null, null, 0
		if (ISNULL(@OPR_CodeOKPO, '')	!= ISNULL(@NPR_CodeOKPO, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10021, @OPR_CodeOKPO, @NPR_CodeOKPO, null, null, null, null, 0
		if (ISNULL(@OPR_HomePage, '')	!= ISNULL(@NPR_HomePage, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10022, @OPR_HomePage, @NPR_HomePage, null, null, null, null, 0
		if (ISNULL(@OPR_LegalPostIndex, '') != ISNULL(@NPR_LegalPostIndex, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10023, @OPR_LegalPostIndex, @NPR_LegalPostIndex, null, null, null, null, 0
		if (ISNULL(@OPR_PostIndex, '')	!= ISNULL(@NPR_PostIndex, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10024, @OPR_PostIndex, @NPR_PostIndex, null, null, null, null, 0
		if (ISNULL(@OPR_RegisterNumber, '') != ISNULL(@NPR_RegisterNumber, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10025, @OPR_RegisterNumber, @NPR_RegisterNumber, null, null, null, null, 0
		if (ISNULL(@OPR_RegisterSeries, '') != ISNULL(@NPR_RegisterSeries, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 10026, @OPR_RegisterSeries, @NPR_RegisterSeries, null, null, null, null, 0
	  END
    FETCH NEXT FROM cur_Partner INTO
		@PR_Key,
		@OPR_FullName, @OPR_Name, @OPR_NameEng, @OPR_BossName, @OPR_Boss, @OPR_Adress, 
		@OPR_Phones, @OPR_Fax, @OPR_Email, @OPR_CTKey, @OPR_Cod, @OPR_Filial, 
		@OPR_Owner, @OPR_Deleted, @OPR_LicenseNumber, @OPR_AdditionalInfo, @OPR_LegalAddress, @OPR_INN, 
		@OPR_KPP, @OPR_CodeOKONH, @OPR_CodeOKPO, @OPR_HomePage, @OPR_LegalPostIndex, @OPR_PostIndex, 
		@OPR_RegisterNumber, @OPR_RegisterSeries,
		@NPR_FullName, @NPR_Name, @NPR_NameEng, @NPR_BossName, @NPR_Boss, @NPR_Adress, 
		@NPR_Phones, @NPR_Fax, @NPR_Email, @NPR_CTKey, @NPR_Cod, @NPR_Filial, 
		@NPR_Owner, @NPR_Deleted, @NPR_LicenseNumber, @NPR_AdditionalInfo, @NPR_LegalAddress, @NPR_INN, 
		@NPR_KPP, @NPR_CodeOKONH, @NPR_CodeOKPO, @NPR_HomePage, @NPR_LegalPostIndex, @NPR_PostIndex, 
		@NPR_RegisterNumber, @NPR_RegisterSeries
    END
  CLOSE cur_Partner
  DEALLOCATE cur_Partner
END
GO

--T_TurListUpdate.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_TurListUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	drop trigger [dbo].[T_TurListUpdate]
GO

CREATE TRIGGER [T_TurListUpdate]
	ON [dbo].[tbl_TurList] 
FOR UPDATE
AS
BEGIN
	if UPDATE (tl_ctdeparturekey)
	begin
		declare @departureKey int
		declare @tiKey int

		declare cur cursor fast_forward for select tl_ctdeparturekey, ti_key from inserted, TP_Tours, TP_Lists where to_trkey = tl_key and ti_tokey = to_key
		open cur
		fetch next from cur into @departureKey, @tiKey
		while @@fetch_status = 0
		begin
			update TP_Lists set ti_ctkeyfrom = @departureKey where ti_key = @tiKey
			fetch next from cur into @departureKey, @tiKey
		end
		close cur
		deallocate cur
	end
END
GO

--090901(Update_DepartureCityKey).sql
--7.2 - 9.2
begin tran tr
declare @departureKey int
declare @tiKey int

declare cur cursor fast_forward for select tl_ctdeparturekey, ti_key from TurList, TP_Tours, TP_Lists where to_trkey = tl_key and ti_tokey = to_key and isnull(tl_ctdeparturekey, 0) != isnull(ti_ctkeyfrom, 0)
open cur
fetch next from cur into @departureKey, @tiKey
while @@fetch_status = 0
begin
	update TP_Lists set ti_ctkeyfrom = @departureKey where ti_key = @tiKey
	fetch next from cur into @departureKey, @tiKey
end
close cur
deallocate cur
commit tran tr
GO

--(090907)mwCheckFlightGroupsQuotes.sql
--7.2 - 9.2
if object_id('dbo.mwCheckFlightGroupsQuotes', 'p') is not null
	drop proc dbo.mwCheckFlightGroupsQuotes
go

create proc [dbo].[mwCheckFlightGroupsQuotes]
	@pagingType int,
	@chkey int,
	@flightGroups varchar(256),
	@agentKey int,
	@partnerKey int,
	@tourdate datetime,
	@day int,
	@requestOnRelease int,
	@noPlacesResult int,
	@checkAgentQuota int,
	@checkCommonQuota int,
	@checkNoLongQuota int,
	@findFlight smallint,
	@pkkey int,
	@tourDays int,
	@expiredReleaseResult int,
	@aviaQuotaMask smallint,
	@result varchar(256) output,
	@linked_day int = null
as
begin
	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @now datetime, @percentPlaces float
	select @now = currentDate from dbo.mwCurrentDate

	if(@aviaQuotaMask is null)
		set @aviaQuotaMask = 0

	declare @correctionResult varchar(128)
	set @result = ''
	set @correctionResult = ''

	declare @gpos int, @pos int, @gplaces int, @gallplaces int, @tmpPlaces int, @tmpPlacesAll int, @gStep smallint, @gCorrection int
	set @gpos = 1
	
	declare @gseparatorPos int, @separatorPos int,
		@groupKeys varchar(256), @key varchar(256), @nkey int,
		@glen int, @len int

	if (@aviaQuotaMask > 0)
	begin
		declare @quotaMask smallint -- признаки статусов квот, устанавливаются, если хоть в одной группе встретился соответствующий статус
		set @quotaMask = 0
	end

	set @glen = len(@flightGroups)
	while(@gpos < @glen)
	begin
		set @gseparatorPos = charindex('|', @flightGroups, @gpos)
		if(@gseparatorPos = 0)
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @glen - @gpos + 1)	
			set @gpos = @glen
		end
		else
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @gseparatorPos - @gpos)
			set @gpos = @gseparatorPos + 1
		end

		if(len(@result) > 0)
		begin
			set @result = @result + '|'
			if(@pagingType = @DYNAMIC_SPO_PAGING)
			begin
				set @correctionResult = @correctionResult + '|'
			end
		end

		set @gplaces = 0
		set @gallplaces = 0
		set @pos = 1
		set @len = len(@groupKeys)		
		while(@pos < @len)
		begin
			set @separatorPos = charindex(',', @groupKeys, @pos)
			if(@separatorPos = 0)
			begin
				set @key = substring(@groupKeys, @pos, @len - @pos + 1)	
				set @pos = @len
			end
			else
			begin
				set @key = substring(@groupKeys, @pos, @separatorPos - @pos)
				set @pos = @separatorPos + 1
			end

			set @nkey = cast(@key as int)
			select @tmpPlaces = qt_places, @tmpPlacesAll = qt_allPlaces
			from dbo.mwCheckQuotesEx2(1, @chkey, @nkey, 0, @agentKey, @partnerKey, @tourdate,
				@day, 1, @requestOnRelease, @noPlacesResult, @checkAgentQuota,
				@checkCommonQuota, @checkNoLongQuota, @findFlight, 0, 0, @pkkey,
				@tourDays, @expiredReleaseResult, @linked_day)
			if(@gplaces = 0 or (@tmpPlaces > 0 and @tmpPlaces > @gplaces))
			begin
				set @gplaces = @tmpPlaces
				set @gallplaces = @tmpPlacesAll

				if(@pagingType = @DYNAMIC_SPO_PAGING)
				begin
					set @percentPlaces = 0.0
					if(@gplaces > 0 and @gallplaces > 0)
						set @percentPlaces = 1.0*@gplaces/@gallplaces
					exec dbo.GetDynamicCorrections @now,@tourdate,1,@chkey,@nkey,0,@percentPlaces, @gStep output, @gCorrection output				
				end
			end

			if(@gplaces > 0)
				break	
		end

		if (@aviaQuotaMask > 0)
		begin
			if(@gplaces > 0)
				set @quotaMask = @quotaMask | 1
			else if(@gplaces = 0)
				set @quotaMask = @quotaMask | 2
			else if(@gplaces = -1)
				set @quotaMask = @quotaMask | 4
		end

		set @result = @result + cast(@gplaces as varchar) + ':' + cast(@gallplaces as varchar)
		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @correctionResult = @correctionResult + cast(@gCorrection as varchar) + ':' + cast(@gStep as varchar)
	end

	if (@aviaQuotaMask > 0)
	begin
		if((@aviaQuotaMask & @quotaMask) = 0)
			set @result = ''
	end

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @result = @result + '#' + @correctionResult
end
go

grant exec on dbo.mwCheckFlightGroupsQuotes to public
go

--(090907)mwCheckQuotesCycle.sql
--7.2 - 9.2
if object_id('dbo.mwCheckQuotesCycle', 'p') is not null
	drop proc dbo.mwCheckQuotesCycle
go

create procedure [dbo].[mwCheckQuotesCycle]
@pagingType	smallint,
@pageNum	int,		-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
@pageSize	int,
@agentKey	int,
@hotelQuotaMask smallint,
@aviaQuotaMask smallint,
@flightGroups	varchar(256),
@checkAgentQuota smallint,
@checkCommonQuota smallint,
@checkNoLongQuota smallint,
@requestOnRelease smallint,
@expiredReleaseResult int,
@noPlacesResult int,
@findFlight smallint
as
begin

	declare @mwCheckInnerAviaQuotes int
	select @mwCheckInnerAviaQuotes = isnull(SS_ParmValue,0) from dbo.systemsettings 
	where SS_ParmName = 'mwCheckInnerAviaQuotes'

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @tmpHotelQuota varchar(10), @tmpThereAviaQuota varchar(256), @tmpBackAviaQuota varchar(256), @allPlaces int,@places int,@actual smallint,@tmp varchar(256),
			@ptkey int,@hdkey int,@rmkey int,@rckey int,@tourdate datetime,@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,	@chday int,@chpkkey int,@chprkey int,@chbackday int,
		@chbackpkkey int,@chbackprkey int,@days int, @rowNum int, @hdStep smallint, @reviewed int,@selected int, @hdPriceCorrection int

declare @pt_chdirectkeys varchar(50), @pt_chbackkeys varchar(50)

	set @reviewed= @pageNum
	set @selected=0

	declare @now datetime, @percentPlaces float, @pos int
	set @now = getdate()

	fetch next from quotaCursor into @ptkey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys
	while(@@fetch_status=0 and @selected < @pageSize)
	begin
		set @actual=1
		if(@aviaQuotaMask > 0)
		begin
			set @tmpThereAviaQuota=null
			if(@chkey > 0)
			begin 
				select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
				if (@tmpThereAviaQuota is null)
				begin
					exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output, @chbackday
					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey, @chpkkey, @tmpThereAviaQuota)
				end					
				if(len(@tmpThereAviaQuota)=0)
					set @actual=0
			end
			if(@actual > 0)
			begin
				set @tmpBackAviaQuota=null
				if(@chbackkey > 0)
				begin
					select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
					if (@tmpBackAviaQuota is null)
					begin
						exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups, @agentKey, @chbackprkey, @tourdate,@chbackday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chbackpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output, @chday
						insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey, @tmpBackAviaQuota)
					end

					if(len(@tmpBackAviaQuota)=0)
						set @actual=0
				end
			end
		end			
		if(@hotelQuotaMask > 0)
		begin
			if(@actual > 0)
			begin
				set @tmpHotelQuota=null
				set @hdStep = 0
				set @hdPriceCorrection = 0
				select @tmpHotelQuota=res,@places=places,@hdStep=step_index,@hdPriceCorrection=price_correction from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
				if (@tmpHotelQuota is null)
				begin
					select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey, @hdprkey,@tourdate,@hdday,@hdnights, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0, @expiredReleaseResult)
					set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
					if(@pagingType = @DYNAMIC_SPO_PAGING and @places > 0)
					begin
						exec dbo.GetDynamicCorrections @now,@tourdate,3,@hdkey,@rmkey,@rckey,@places, @hdStep output, @hdPriceCorrection output
					end

					insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res,places,step_index,price_correction) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places,@hdStep,@hdPriceCorrection)
				end
				
				if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
					set @actual=0
			end
		end



------==============================================================================================------
--============================ Check inner avia quotes if needed by settings ===========================--
--========																						========--
		if(@actual > 0 and @mwCheckInnerAviaQuotes > 0)
		begin
			-- Direct flights
			if (@pt_chdirectkeys is not null and charindex(',', @pt_chdirectkeys, 0) > 0)
			begin
				exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chdirectkeys, 
						@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
						@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
						@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output
				if (len(@tmpThereAviaQuota) = 0)
					set @actual = 0
			end 

			-- Back flights
			if(@actual > 0)
			begin
				if (@pt_chbackkeys is not null and charindex(',', @pt_chbackkeys, 0) > 0)
				begin
					exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chbackkeys,   
						@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
						@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
						@days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output
					if (len(@tmpBackAviaQuota) = 0)
						set @actual = 0
				end 
			end
		end
--========																						========--
--============================                                               ===========================--
------==============================================================================================------
		
		if(@actual > 0)
		begin
			set @selected=@selected + 1
			insert into #Paging(ptKey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection)
			values(@ptkey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection)
		end

		set @reviewed=@reviewed + 1

		fetch next from quotaCursor into @ptkey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys
	end

	select @reviewed
end
go

grant exec on dbo.mwCheckQuotesCycle to public
go

--sp_FillMasterWebSearchFields.sql
--7.2 - 9.2
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null)
as
begin

	declare @replicationSetting nvarchar(254)
	select @replicationSetting = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUseWebReplication'
	if IsNull(@replicationSetting, '0') = '1'
	begin
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
		return
	end

	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200),
		thd_tourname nvarchar(200),
		thd_hdname nvarchar(200),
		thd_ctname nvarchar(200),
		thd_rsname nvarchar(200),
		thd_ctfromname nvarchar(200),
		thd_cttoname nvarchar(200),
		thd_tourtypename nvarchar(200),
		thd_pncode nvarchar(50),
		thd_hdorder int,
		thd_hotelkeys nvarchar(256),
		thd_pansionkeys nvarchar(256),
		thd_hotelnights nvarchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [nvarchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [nvarchar] (60),
		[pt_tourname] [nvarchar] (128),
		[pt_pnname] [nvarchar] (30),
		[pt_pncode] [nvarchar] (3),
		[pt_rmname] [nvarchar] (60),
		[pt_rmcode] [nvarchar] (60),
		[pt_rcname] [nvarchar] (60),
		[pt_rccode] [nvarchar] (40),
		[pt_acname] [nvarchar] (30),
		[pt_accode] [nvarchar] (30),
		[pt_rsname] [nvarchar] (50),
		[pt_ctname] [nvarchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [nvarchar] (3),
		[pt_toururl] [nvarchar] (128),
		[pt_hotelurl] [nvarchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys nvarchar(256),
		pt_hotelroomkeys nvarchar(256),
		pt_hotelstars nvarchar(256),
		pt_pansionkeys nvarchar(256),
		pt_hotelnights nvarchar(256),
		pt_chdirectkeys nvarchar(50) null,
		pt_chbackkeys nvarchar(50) null,
		[pt_topricefor] [smallint] NOT NULL DEFAULT (0)
	)

	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @sql nvarchar(4000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0 and isnull(HR_AGEFROM, 100) > 16
		)
		where TO_Key = @toKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @toKey


	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey and tl_tokey = @tokey and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey
		and tl_tokey = @tokey
		and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- ключ города и ключ курорта + звезды
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor]
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0),
		to_pricefor
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100, TO_DateCreated = GetDate() where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--090903(AlterColumns).sql
--7.2 - 9.2
IF(35 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_NAMERUS')) 
BEGIN
	DROP INDEX [dbo].[tbl_Turist].[tbl_Turist6]

	ALTER TABLE tbl_Turist ALTER COLUMN TU_NAMERUS VARCHAR(35) COLLATE Cyrillic_General_CS_AS

	CREATE NONCLUSTERED INDEX [tbl_Turist6] ON [dbo].[tbl_Turist] 
	(
		[TU_DGCOD] ASC,
		[TU_KEY] ASC,
		[TU_NAMERUS] ASC,
		[TU_SHORTNAME] ASC
	) ON [PRIMARY]
END
GO

IF(35 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_NAMELAT')) 
ALTER TABLE tbl_Turist ALTER COLUMN TU_NAMELAT VARCHAR(35) COLLATE Cyrillic_General_CS_AS
GO

EXEC sp_refreshviewforall 'Turist'
GO

--090909(Update_Synonyms).sql
--7.2 - 9.2
update dbo.Synonyms set SY_SYNONYM = 'Цены', SY_SYNONYMLAT = 'en_Цены' where SY_NAME like 'COSTS'
GO

--sp_CharterChange.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CharterChange]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP procedure [dbo].[CharterChange]
GO
CREATE PROCEDURE [dbo].[CharterChange]
(
--<VERSION>2007.2.27</VERSION>
	@Code int
) AS
SET DATEFIRST 1
--Если в хранимку в качестве параметра передать 0, то процедура отрабатывает по всем перелетам
declare @SVKey int, @CNKey int, @CTKey int, @SubCode1 int, @SubCode2 int, @Date datetime,
		@ServiceName varchar(255), @ServiceNameLat varchar(255), @ServiceTimeBeg DateTime, @ServiceTimeEnd DateTime

declare @hours varchar(2), @minutes varchar(2), @chKey int
declare @nullString varchar(2)
declare @dogovorListName varchar(150)
declare @timeTo datetime
set @nullString = '00'

Set @SVKey=1

declare CursorDLCharter 
-- Ищем и обновляем информацию о названии услуги и времени начала услуги
-- 1. Если время в справочнике не совпадает со временем в услуге
-- 2. Если услуга есть, а в справочнике расписаний такого рейса на данную дату нет
-- 3. Если название рейса (или аэропорта) не совпадает с названием в услуге
cursor local fast_forward for 
	SELECT	DL_CNKey, DL_CTKey, DL_Code, DL_SubCode1, DL_SubCode2, DL_DateBeg
	FROM	Dogovorlist, dbo.AirSeason 
	WHERE	DL_SVKey=@SVKey and DL_DateBeg>(GetDate() - 366) and AS_CHKey=DL_Code 
			and (DL_TimeBeg != AS_TimeFrom or DL_TimeBeg is null)
			and DL_DateBeg between AS_DateFrom and AS_DateTo 
			and CHARINDEX(CAST(DATEPART (weekday, DL_DateBeg) as varchar(1)),AS_Week)>0
			and ((DL_Code=@Code and @Code>0) or @Code=0)
UNION
SELECT	DL_CNKey, DL_CTKey, DL_Code, DL_SubCode1, DL_SubCode2, DL_DateBeg
	FROM	Dogovorlist
	WHERE	DL_SVKey=@SVKey and DL_DateBeg>(GetDate() - 366)
			and not exists 
				(	SELECT 1 FROM dbo.AirSeason 
					WHERE	AS_CHKey=DL_Code and DL_DateBeg between AS_DateFrom and AS_DateTo 
							and AS_Week like '%'+ CAST(DATEPART (weekday, DL_DateBeg) as varchar(1))+'%') 
			and ((DL_Code=@Code and @Code>0) or @Code=0)
UNION
SELECT DL_CNKey, DL_CTKey, DL_Code, DL_SubCode1, DL_SubCode2, DL_DateBeg
	FROM	Dogovorlist, dbo.Charter
	WHERE	DL_SVKey=@SVKey and DL_DateBeg>(GetDate() - 366) and DL_Code=CH_Key 
			and DL_Name not like '%'+CH_AirLineCode+CH_Flight+', '+CH_PortCodeFrom+'-'+CH_PortCodeTo+'%'
			and ((DL_Code=@Code and @Code>0) or @Code=0)
open CursorDLCharter
	fetch next from CursorDLCharter  into @CNKey, @CTKey, @Code, @SubCode1, @SubCode2, @Date
While (@@fetch_status = 0)
BEGIN
	Set @ServiceName = null
	Set @ServiceNameLat = null
	exec [dbo].[MakeFullSVName]
		@CNKey, @CTKey, @SVKey, @Code, null, 
		@SubCode1, @SubCode2, 0, @Date, null, 
		@ServiceName output, @ServiceNameLat output, @ServiceTimeBeg output, @ServiceTimeEnd output
	begin tran tDLCharterEnd
	UPDATE	DogovorList SET DL_Name=@ServiceName, DL_NameLat=@ServiceNameLat, DL_TimeBeg=@ServiceTimeBeg
	WHERE	DL_SVKey=@SVKey and DL_Code=@Code and DL_CNKey=@CNKey 
			and DL_CTKey=@CTKey and DL_SubCode1=@SubCode1 and DL_SubCode2=@SubCode2
			and DL_DateBeg=@Date and (DL_Name!=@ServiceName or (DL_TimeBeg!=@ServiceTimeBeg and DL_TimeBeg is not null) or DL_TimeBeg is null)
			and DL_DateBeg>(GetDate() - 366)
	commit tran tDLCharterEnd
	fetch next from CursorDLCharter  into @CNKey, @CTKey, @Code, @SubCode1, @SubCode2, @Date
END
close CursorDLCharter
deallocate CursorDLCharter

--koshelev
--изменение времени прилета
declare airSeasonsCursor cursor local fast_forward for 
	select distinct AS_CHKEY, AS_TimeTo
	from AirSeason
	where AS_TimeTo is not null and 
		((AS_CHKEY = @Code and @Code > 0) or @Code = 0)

declare @fetch_status int
open airSeasonsCursor
fetch next from airSeasonsCursor  into @chKey, @timeTo
set @fetch_status = @@fetch_status
While (@fetch_status = 0)
BEGIN
	set @hours = cast(datepart(hour, @timeTo) as varchar(2))
	set @hours = left(@nullString, 2 - len(@hours)) + @hours
	set @minutes = cast(datepart(minute, @timeTo) as varchar(2))
	set @minutes = left(@nullString, 2 - len(@minutes)) + @minutes

	declare CursorDLCharter2
	cursor local fast_forward for 
	select DL_CNKey, DL_CTKey, DL_Code, DL_SubCode1, DL_SubCode2, DL_DateBeg
	from DogovorList
	where DL_SvKey = @SVKey and DL_Code = @chKey and DL_Name not like '%' + @hours + ':' + @minutes + '%'
	
	open CursorDLCharter2
	fetch next from CursorDLCharter2  into @CNKey, @CTKey, @Code, @SubCode1, @SubCode2, @Date
	While (@@fetch_status = 0)
	begin
		Set @ServiceName = null
		Set @ServiceNameLat = null
		exec [dbo].[MakeFullSVName]
			@CNKey, @CTKey, @SVKey, @Code, null, 
			@SubCode1, @SubCode2, 0, @Date, null, 
			@ServiceName output, @ServiceNameLat output, @ServiceTimeBeg output, @ServiceTimeEnd output

		begin tran tDLCharterEnd
		UPDATE	DogovorList SET DL_Name=@ServiceName, DL_NameLat=@ServiceNameLat, DL_TimeBeg=@ServiceTimeBeg
		WHERE	DL_SVKey=@SVKey and DL_Code=@Code and DL_CNKey=@CNKey 
			and DL_CTKey=@CTKey and DL_SubCode1=@SubCode1 and DL_SubCode2=@SubCode2
			and DL_DateBeg=@Date and (DL_Name!=@ServiceName or (DL_TimeBeg!=@ServiceTimeBeg and DL_TimeBeg is not null) or DL_TimeBeg is null)
			and DL_DateBeg>(GetDate() - 366)
		commit tran tDLCharterEnd
		fetch next from CursorDLCharter2  into @CNKey, @CTKey, @Code, @SubCode1, @SubCode2, @Date
	end
	close CursorDLCharter2
	deallocate CursorDLCharter2

	fetch next from airSeasonsCursor into @chKey, @timeTo
	set @fetch_status = @@fetch_status
END
close airSeasonsCursor
deallocate airSeasonsCursor
GO

GRANT EXECUTE on [dbo].[CharterChange] to public
GO

--090915(Delete_GroupByPeriod).sql
--7.2 - 9.2
delete from dbo.SystemSettings where SS_ParmName like 'SYSPRICEGroupByPeriod'
GO

--090911(AlterTable_CalculatingPriceLists).sql
--7.2 - 9.2
if exists (select * from dbo.syscolumns where id = object_id(N'[dbo].[CalculatingPriceLists]') and name = 'CP_GroupByPeriod')
	ALTER TABLE  [dbo].[CalculatingPriceLists] drop column CP_GroupByPeriod
GO

--sp_GetUserInfo.sql
--7.2 - 9.2
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[dbo].[GetUserInfo]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[GetUserInfo]
GO

CREATE  PROCEDURE [dbo].[GetUserInfo]
(
	@sUserID varchar(255) output, 	
	@nUserKey int output,
	@sUserName varchar(25) output,
	@nUserPRKey int output,
	@nUserDepartmentKey int output,
	@sUserNameLat varchar(25) output
)
AS
	declare @sUS_NAME varchar(20)
	declare @sUS_SHORTNAME varchar(4)

	If @sUserID is not null and @sUserID != ''
		SELECT 	@sUserName = US_FULLNAME,
			@sUserNameLat = US_FULLNAMELAT,
			@nUserPRKey = US_PRKey,
			@nUserDepartmentKey = US_DepartmentKey, 
			@nUserKey = US_Key		
		FROM dbo.UserList
		WHERE  US_USERID = @sUserID 
	Else
		If @nUserKey is not null
			SELECT 	@sUserName = US_FULLNAME,
				@sUserNameLat = US_FULLNAMELAT,
				@nUserPRKey = US_PRKey,
				@nUserDepartmentKey = US_DepartmentKey, 
				@sUserID = US_USERID				
			FROM dbo.UserList
			WHERE  US_Key = @nUserKey

	-- no such user in dbo.UserList (e.g, sa)
	IF (@sUserName IS NULL AND @sUserNameLat IS NULL)
	BEGIN
		SET @sUserName = USER
		SET @sUserNameLat = USER
	END
GO

GRANT EXECUTE ON [dbo].[GetUserInfo] TO PUBLIC
GO

--sp_CalculatePriceList.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
SET ANSI_WARNINGS OFF
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
  with encryption
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours where to_key = @nPriceTourKey
	delete from CalculatingPriceLists where CP_TourKey = @TrKey
	insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_PriceList2006, CP_PLNotDeleted, CP_TourKey, CP_UserKey)
	values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @nPriceList2006, @nPLNotDeleted, @TrKey, @userKey)

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		DECLARE @TP_Prices TABLE (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		)
		DELETE FROM @TP_Prices
		--INSERT INTO @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		
		---------------------------------------разбиваем данные в таблицах tp_prices по датам
		if (select COUNT(TP_Key) from TP_Prices where TP_DateBegin != TP_DateEnd) > 0
		begin
			select @numDates = COUNT(1) from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			exec GetNKeys 'TP_PRICES', @numDates, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @numDates + 1
		
			declare datesCursor cursor local fast_forward for
			select TD_Date, TI_Key, TP_Gross from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			
			open datesCursor
			fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			while @@FETCH_STATUS = 0
			begin
				insert into @TP_Prices (xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd) 
				values (@nTP_PriceKeyCurrent, @nPriceTourKey, @priceListKey, @priceListGross, @priceDate, @priceDate)
				set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
				fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			end
			
			close datesCursor
			deallocate datesCursor
			
			begin tran tEnd
				delete from TP_Prices where TP_TOKey = @nPriceTourKey
				
				insert into TP_Prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd)
				select xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd from @TP_Prices  
				where xTP_DateBegin = xTP_DateEnd
				
				delete from @TP_Prices
			commit tran tEnd
		end
		--------------------------------------------------------------------------------------
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM tp_prices where tp_tokey = @nPriceTourKey)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))

		if (@NumCalculated + @NumPrices) = 0
			set @NumPrices = 1

		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by ti_firsthdkey, td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN

			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу @TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				--записываем данные в таблицу @TP_Prices
				if @nPrevVariant <> -1
				begin
					if @price_brutto is not null
					BEGIN
						exec RoundPriceList @round, @price_brutto output
						
						if exists(select 1 from @TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
						begin
							update @TP_Prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
						end
						else
						begin
							insert into @TP_Prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) 
							values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
							
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax and @@fetch_status = 0
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						end
					END
				end
			
				--очищаем данные
				if @@fetch_status = 0
				begin
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				if @prevHdKey <> -1
				begin
					begin tran tEnd
						delete from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey)
						insert into tp_prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_tokey = @nPriceTourKey
						delete from @TP_Prices
						update tp_lists set ti_update = 2 where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey
					commit tran tEnd
				end
				set @prevHdKey = @hdKey
				
				if @@fetch_status = 0
					insert into @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @hdKey)
			end
			
			if @@fetch_status <> 0
				break
						
			---------------------------------------------------------------------------------
			
			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
				
			if @nTempGross is not null and @nSvkey <> 1
			begin
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			end
			else
			begin
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			end
			set @price_brutto = @price_brutto + @nBrutto
			---------------------------------------------------------------------------------
			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------
		--Set @nTotalProgress = 96
		--update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		--delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		--select 	@TPkeyMax = MAX(xtp_key), 
		--		@TPkeyMin = MIN(xtp_key) 
		--from 	@TP_Prices

		--while 	@TPkeyMin <= @TPkeyMax
		--BEGIN
		--	begin tran tEnd
		--	INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
		--		select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
		--	commit tran tEnd
		--	Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		--END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	delete from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		DECLARE @TP_Lists TABLE (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(60) , 
            [xTI_RMName] varchar(60) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(50),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      )
      DELETE FROM @TP_Lists
      INSERT INTO @TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update @TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update @TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update @TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update @TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update @TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update @TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update @TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update @TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update @TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update @TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update @TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update @TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update @TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update @TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update @TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update @TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update @TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update @TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update @TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update @TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from @TP_Prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  @TP_Lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG 
								   and exists (select 1 from @TP_Prices where TD_Date=xTP_DateBegin and xTP_TIKey=xTI_Key) )
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from @TP_Prices, @TP_Lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

--090807(alter_SPOListResults).sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SPOListResults]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[SPOListResults]
GO

CREATE PROCEDURE [dbo].[SPOListResults] 
(
	@filter varchar(1024),
	@searchType varchar (10),
	@dateFrom varchar (10),
	@dateTo varchar (10),
	@top varchar(10)
)
AS
DECLARE @additionalQuery varchar (1024)

if (@searchType = 'SPO')
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 1) > 0)'
	END
else if (@searchType = 'Leader')
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 2) > 0)'
	END
else
	BEGIN
		SET @additionalQuery = 'AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 3) > 0)'
	END

DECLARE @command varchar (8000)
SET @command =
'
CREATE TABLE #resultsTable (
	[createdate] [datetime],
	[tourname] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[tourhttp] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[resort] [varchar] (1024) COLLATE Cyrillic_General_CI_AS,
	[city] [varchar] (1024) COLLATE Cyrillic_General_CI_AS,
	[hotels] [varchar] (7000) COLLATE Cyrillic_General_CI_AS, 
	[tourdates] [varchar] (1024),
	[countryName] [varchar] (25) COLLATE Cyrillic_General_CI_AS,
	[countryNameLat] varchar (25),
	[countryKey] int, 
	[tourKey] int,
	[tourListKey] int
) 

DECLARE @tourkey  int
DECLARE @hotelkey  int
DECLARE @tourdate datetime
DECLARE @resortkey  int
DECLARE @citykey  int
DECLARE @countrykey  int
DECLARE @createdate datetime
DECLARE @tourlistkey int

DECLARE @lastTourkey int
DECLARE @lastTourListKey int
DECLARE @lastHotelkey int
DECLARE @lastResortkey int
DECLARE @lastCountrykey int
DECLARE @lastCreateDate datetime
DECLARE @exit bit
DECLARE @resortKeys varchar(8000);
DECLARE @cityKeys varchar(8000);

DECLARE @hotelNames varchar (7000)
DECLARE @tourDates varchar (1024)
DECLARE @resorts varchar (1024)
DECLARE @cities varchar (1024)

SET @lastTourkey = -1
SET @lastHotelkey = -1
SET @lastResortkey = -1
SET @exit = 0
SET @resortKeys = ''''
SET @cityKeys = ''''

SELECT distinct top '+ @top +' sd_tourkey, SD_TOURCREATED into #tempSpoTable from MWSPoDataTable ' + @filter +' '+ @additionalQuery + ' ORDER BY SD_TOURCREATED DESC 

DECLARE SPO_Cursor CURSOR FOR
SELECT SD_TOURCREATED, SD_TOURKEY, SD_HDKEY, td_date, SD_RSKEY, SD_CTKEY, SD_CNKEY, SD_TLKEY
FROM MWSPoDataTable inner join tp_turdates on (sd_tourkey = td_tokey)
WHERE sd_tourkey in (select sd_tourkey from  #tempSpoTable) ORDER BY sd_CNKEY,sd_tourkey, sd_hdkey, sd_rskey

OPEN SPO_Cursor

if (@@CURSOR_ROWS > 0)
Begin

FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @citykey, @countrykey, @tourlistkey
WHILE 1=1
BEGIN
    
    if (((@lastTourkey = -1) OR (@lastTourkey = @tourkey)) AND (@@FETCH_STATUS = 0))
	BEGIN
		--Отели
		IF (@lastHotelkey <> @hotelkey)
			BEGIN
				declare @hdName varchar (1024)
				declare @hdUrl varchar (1024)
				SELECT @hdName = (isnull (HD_NAME,'''') + '' '' + ltrim(rtrim(isnull(HD_STARS,'''')))), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
				if (@lastTourkey = -1)
					BEGIN
						SET @hotelNames = @hdName + ''|'' + @hdUrl
					END
				else
					BEGIN
						SET @hotelNames = @hotelNames + '', '' + @hdName + ''|'' + @hdUrl
					END
				SET @lastHotelkey = @hotelkey
			END
		
		if (@lastTourkey = -1)
			BEGIN
				if (@resortkey is NULL)
					SET @resorts = ''нет''
			END
		
		IF (@resortkey is not null)
		BEGIN
			declare @rsName varchar (50)
														
			if (CHARINDEX(''|''+CAST(@resortkey as varchar)+''|'',@resortKeys) = 0)
			BEGIN
				SET @resortKeys = @resortKeys + ''|'' + CAST(@resortkey as varchar) +''|''
				SELECT @rsName = RS_NAME from resorts where RS_KEY = @resortkey
				if (@lastTourkey = -1)
					BEGIN
						SET @resorts = @rsName
					END
				else
					BEGIN
						SET @resorts = @resorts + '', '' + @rsName
				END
			END
	
		END

		IF (@citykey is not null)
		BEGIN
			declare @ctName varchar (50)
														
			if (CHARINDEX(''|''+CAST(@citykey as varchar)+''|'',@cityKeys) = 0)
				BEGIN
					SET @cityKeys = @cityKeys + ''|'' + CAST(@citykey as varchar) +''|''
					SELECT @ctName = CT_NAME from citydictionary where CT_KEY = @citykey
					if (@lastTourkey = -1)
						BEGIN
							SET @cities = @ctName
						END
					else
						BEGIN
							SET @cities = @cities + '', '' + @ctName
					END
				END
	
		END

		SET @lastCountrykey = @countrykey
		SET @lastCreateDate = @createdate
		SET @lastTourListKey = @tourlistkey
		
	END
    else
	BEGIN
		
		if @@FETCH_STATUS <> 0
			SET @exit = 1
		
		DECLARE @tourName varchar(128)
		DECLARE @tourHttp varchar(128)
		SELECT @tourName = TL_NAMEWEB, @tourHttp = TL_WEBHTTP from TURLIST where TL_KEY = @lastTourListKey
		
		DECLARE @countryName varchar(25)
		DECLARE @countryNameLat varchar(25)

		SELECT @countryName = CN_NAME, @countryNameLat = CN_NAMELAT FROM tbl_Country WHERE CN_KEY = @lastCountrykey
		
		DECLARE @currentDate dateTime
		DECLARE @lastDate dateTime
		DECLARE @lastWriteDate dateTime
		DECLARE @first int
		DECLARE @datesInInterval int

		SET @first = 0

		DECLARE SPODate_Cursor CURSOR FOR
		SELECT DISTINCT td_date FROM tp_turdates
		WHERE td_tokey = @lastTourkey AND td_date >= ''' + @dateFrom + ''' AND td_date <= ''' + @dateTo + '''  ORDER BY td_date
		
		OPEN SPODate_Cursor

		FETCH NEXT FROM SPODate_Cursor INTO @currentDate

		WHILE @@FETCH_STATUS = 0
			BEGIN
					
					if (@first = 0)
						BEGIN 
							SET @datesInInterval = 0
							SET @first = 1
							SET @lastWriteDate = @currentDate
							SET @tourDates = CONVERT (char(5),@currentDate, 4)
						END
					else
						BEGIN
							if (@currentDate <> DATEADD (day,1,@lastDate))
								BEGIN
									SET @datesInInterval = 0
									if (@lastWriteDate = @lastDate)
										SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
									else
										SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@lastDate, 4) + '', '' + CONVERT (char(5),@currentDate, 4)
									SET @lastWriteDate = @currentDate
								END
						END
						SET @datesInInterval = @datesInInterval + 1
						SET @lastDate = @currentDate
						FETCH NEXT FROM SPODate_Cursor INTO @currentDate
				
			END
		CLOSE SPODate_Cursor
		DEALLOCATE SPODate_Cursor

		if (@lastWriteDate <> @currentDate)
			BEGIN
				if (@datesInInterval > 1)
					SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
				else
					BEGIN
						if (@currentDate <> DATEADD (day,1,@lastWriteDate))
							SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
						else
							SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
					END
			END
		

		INSERT #resultsTable Values (@lastCreateDate, @tourName, @tourHttp, @resorts, @cities, @hotelNames, @tourDates, @countryName, @countryNameLat, @lastCountrykey,  @lastTourkey, @lastTourListKey)
		
		if (@exit = 1)
			BREAK
		
		SELECT @hdName = isnull (HD_NAME,''''), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
		SET @hotelNames = @hdName + ''|'' + @hdUrl
		if (@resortKey is not NULL)
			BEGIN
				SET @resortKeys = ''|'' + CAST (@resortkey as varchar) + ''|''
				SELECT @resorts = RS_NAME from resorts where RS_KEY = @resortkey
			END
		else
			SET @resorts = ''нет''

		if (@cityKey is not NULL)
			BEGIN
				SET @cityKeys = ''|'' + CAST (@cityKey as varchar) + ''|''
				SELECT @cities = ct_NAME from citydictionary where ct_KEY = @cityKey
			END
		else
			SET @cities = ''нет''

		SET @lastHotelkey = @hotelkey
		SET @lastCountrykey = @countrykey
		SET @lastCreateDate = @createdate
		SET @lastTourListKey = @tourlistkey
	
	END

	
	SET @lastTourkey = @tourkey
	
	FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @citykey, @countrykey, @tourlistkey
END
end

CLOSE SPO_Cursor
DEALLOCATE SPO_Cursor


SELECT * FROM #resultsTable
DROP TABLE #tempSpoTable
DROP TABLE  #resultsTable'

exec (@command)
GO

GRANT EXEC ON [dbo].[SPOListResults] TO PUBLIC
GO
-- 22.09.2009 T_UpdDogListQuota.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_UpdDogListQuota]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_UpdDogListQuota]
GO
CREATE TRIGGER [dbo].[T_UpdDogListQuota] 
ON [dbo].[tbl_DogovorList]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2008.1.01.12a</VERSION>
-- inserting into roomnumberlists , servicebydate
DECLARE @DLKey int, @DGKey int, @O_DLSVKey int, @O_DLCode int, @O_DLSubcode1 int, @O_DLDateBeg datetime, @O_DLDateEnd datetime, @O_DLNMen int, @O_DLPartnerKey int,
		@N_DLSVKey int, @N_DLCode int, @N_DLSubcode1 int, @N_DLDateBeg datetime, @N_DLDateEnd datetime, @N_DLNMen int, @N_DLPartnerKey int,
		@Date datetime, @RLID int, @RPID int,
		@HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int,
		@RMPlacesMain smallint, @RMPlacesEx smallint,
		@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
		@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
		@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
		@RL_Use smallint, @From int, --@SDPlace smallint, 
		@nDelCount smallint, @nInsCount smallint, @Mod varchar(3), @SetToNewQuota bit,
		@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint,
		@Days smallint, @RPCount smallint, @NeedPlacesForMen smallint, @TUKey int,
		@SVQUOTED smallint

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
SET @SetToNewQuota = 0
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	O.DL_Key, O.DL_DGKey,
			O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey,
			null, null, null, null, null, null, null
    FROM DELETED O
	SET @Mod = 'DEL'
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey,
			null, null, null, null, null, null, null,
			N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey
    FROM	INSERTED N 
	SET @Mod = 'INS'
END
ELSE 
BEGIN
    DECLARE cur_DogovorListChanged CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey, 
			O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey, 
	  		N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
	SET @Mod = 'UPD'
END

OPEN cur_DogovorListChanged
FETCH NEXT FROM cur_DogovorListChanged 
	INTO	@DLKey, @DGKey,
			@O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey,
			@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey
WHILE @@FETCH_STATUS = 0
BEGIN

	SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@N_DLSVKey

	EXEC InsMasterEvent 3, @DLKey
	IF ((@O_DLSVKey in (3,7)) and ((@N_DLCode!=@O_DLCode) or (@N_DLSubCode1!=@O_DLSubCode1) or (@O_DLDateBeg!=@N_DLDateBeg) or (@O_DLDateEnd!=@N_DLDateEnd)))
		or ((@O_DLSVKey in (1,2,4)) and (@O_DLDateBeg!=@N_DLDateBeg))
		update turistservice set tu_numroom='' where tu_dlkey=@DLKey

	IF @N_DLDateBeg < '01-JAN-1901' and @O_DLDateBeg >= '01-JAN-1901'
		SET @Mod='DEL'
	IF @N_DLDateBeg > '01-JAN-1901' and @O_DLDateBeg <= '01-JAN-1901'
		SET @SetToNewQuota=1
		--SET @Mod='INS'
		/*select @rlid=sd_rlid from servicebydate where sd_dlkey=@dlkey
		delete from roomnumberlists where rl_id=@rlid
		delete from servicebydate where sd_dlkey=@dlkey*/
	IF @Mod='UPD' and ISNULL(@O_DLNMen,0)=0 and ISNULL(@N_DLNMen,0)>0
		SET @Mod='INS'
	IF @Mod='DEL' or (@Mod='UPD' and 
		(ISNULL(@O_DLSVKey,0) != ISNULL(@N_DLSVKey,0)) or (ISNULL(@O_DLCode,0) != ISNULL(@N_DLCode,0)) 
		or (ISNULL(@O_DLSubCode1,0) != ISNULL(@N_DLSubCode1,0)) or (ISNULL(@O_DLPartnerKey,0) != ISNULL(@N_DLPartnerKey,0)) )
	BEGIN	
		DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey
		SET @SetToNewQuota=1
	END
	--изменился период действия услуги
	IF @Mod='UPD' and (@SetToNewQuota!=1 and ((@O_DLDateBeg != @N_DLDateBeg) or (@O_DLDateEnd != @N_DLDateEnd)))
	BEGIN
		IF @N_DLDateBeg>@O_DLDateEnd OR @N_DLDateEnd<@O_DLDateBeg
		BEGIN
			DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey
			SET @SetToNewQuota=1
		END
		--для услуг имеющих продолжительность сохраняем информацию о квотировании в рамках периода
		ELSE
		BEGIN	
			IF @N_DLDateBeg<@O_DLDateBeg
			BEGIN
				IF @N_DLDateEnd<@O_DLDateBeg  --если теперь услуга заканчивается раньше, чем до этого начиналась
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@N_DLDateEnd)+1
				ELSE
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@O_DLDateBeg)
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,NU_ID-1,@N_DLDateBeg), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3 FROM ServiceByDate,Numbers WHERE (NU_ID between 1 and @Days) and SD_Date=@O_DLDateBeg and SD_DLKey=@DLKey
			END
			IF @N_DLDateEnd>@O_DLDateEnd
			BEGIN
				IF @N_DLDateBeg>@O_DLDateEnd  --если теперь услуга начинается позже, чем до этого заканчивалась
					Set @Days=DATEDIFF(DAY,@N_DLDateBeg,@N_DLDateEnd)+1
				ELSE
					Set @Days=DATEDIFF(DAY,@O_DLDateEnd,@N_DLDateEnd)
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,-NU_ID+1,@N_DLDateEnd), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3 FROM ServiceByDate,Numbers WHERE (NU_ID between 1 and @Days) and SD_Date=@O_DLDateEnd and SD_DLKey=@DLKey
			END
			IF @N_DLDateBeg>@O_DLDateBeg
				DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date < @N_DLDateBeg
			IF @N_DLDateEnd<@O_DLDateEnd
				DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date > @N_DLDateEnd
		END
	END
	SET @NeedPlacesForMen=0
	SET @From = CAST(@N_DLDateBeg as int)
	--изменилось количество человек
	IF @Mod='UPD' and (@SetToNewQuota!=1 and ISNULL(@O_DLNMen,0) != ISNULL(@N_DLNMen,0))
	BEGIN
		SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)
		if ISNULL(@O_DLNMen,0) > ISNULL(@N_DLNMen,0)
		BEGIN
			while (SELECT count(1) FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date=@N_DLDateBeg)>ISNULL(@N_DLNMen,0)
			BEGIN
				if @N_DLSVKey=3 --для проживания отдельная ветка
				BEGIN
					SELECT TOP 1 @RLID=SD_RLID, @RPCount=count(SD_ID) FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_TUKey is null and SD_Date=@N_DLDateBeg
					GROUP BY SD_RLID
					ORDER BY 2
					--SELECT @RLID=SDRLID, @RPCount=SDIDcount
					--FROM
					--( 
					--	SELECT TOP 1 SD_RLID SDRLID, count(SD_ID) SDIDcount
					--	FROM ServiceByDate 
					--	WHERE SD_DLKey=@DLKey and SD_TUKey is null and SD_Date=@N_DLDateBeg
					--	GROUP BY SD_RLID
					--	ORDER BY 2
					--) AS QUERY
					SELECT TOP 1 @RPID=SD_RPID FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RLID=@RLID and SD_TUKey is null
					DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RLID=@RLID and SD_RPID=@RPID and SD_TUKey is null
				END
				ELSE
				BEGIN
					SELECT TOP 1 @RPID=SD_RPID FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_TUKey is null
					DELETE FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RPID=@RPID and SD_TUKey is null
				END
			END
		END
		ELSE --если новое число туристов больше, чем было до этого (@O_DLNMen<@N_DLNMen)
		BEGIN
			if @N_DLSVKey=3 --для проживания отдельная ветка
			BEGIN				
				SELECT	@HRIsMain=AC_MAIN, @ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
				FROM AccmdMenType
				WHERE AC_Key=(SELECT HR_ACKey From HotelRooms WHERE HR_Key=@N_DLSubCode1)
				IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					set @ACPlacesMain = 1
				ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					set @ACPlacesEx = 1
				--есть 3 варианта размещения: только основные, только дополнительные, основные и дополнительные
				--в первых 2-х вариантах сначала занимаем свободные уже существующие места данного типа в номерах этой услуги, в последнем занимаем все свободные места
				if @ACPlacesMain>0
					WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0))
					BEGIN
						select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0
						INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
							SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
							FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
						SET @NeedPlacesForMen=@NeedPlacesForMen-1
					END
				if @ACPlacesEx>0
					WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1))
					BEGIN
						select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1
						INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
							SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
							FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
						SET @NeedPlacesForMen=@NeedPlacesForMen-1
					END
			END
		END
	END

	IF @Mod='INS' or (@Mod='UPD' and @SetToNewQuota=1) or @NeedPlacesForMen>0
	BEGIN		
		if @N_DLSVKey=3 --для проживания отдельная ветка
		BEGIN
			If @NeedPlacesForMen>0
			BEGIN
				SELECT TOP 1 @RLPlacesMain=RL_NPlaces, @RLPlacesEx=RL_NPlacesEx, @RMKey=RL_RMKey, @RCKey=RL_RCKey from RoomNumberLists,ServiceByDate where RL_ID=SD_RLID and SD_DLKey=@DLKey
			END
			ELSE
			BEGIN
				SELECT	@HRIsMain=HR_MAIN, @RMKey=HR_RMKEY, @RCKey=HR_RCKEY, @ACKey=HR_ACKEY,
						@RMPlacesMain=RM_NPlaces, @RMPlacesEx=RM_NPlacesEx,
						@ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
				FROM HotelRooms, Rooms, AccmdMenType
				WHERE HR_Key=@N_DLSubcode1 and RM_Key=HR_RMKEY and AC_KEY=HR_ACKEY
				if @ACPerRoom=1 or (ISNULL(@RMPlacesMain,0)=0 and ISNULL(@RMPlacesEx,0)=0)
				BEGIN
					SET @RLPlacesMain = @ACPlacesMain
					SET @RLPlacesEx = ISNULL(@ACPlacesEx,0)
				END
				Else
				BEGIN
					IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					BEGIN
						set @ACPlacesMain = 1
					END
					ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
					BEGIN
						set @ACPlacesEx = 1
					END

					SET @RLPlacesMain = @RMPlacesMain
					SET	@RLPlacesEx = ISNULL(@RMPlacesEx,0)
				END
				IF @Mod='UPD' and @SetToNewQuota=1	--если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
					SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
				ELSE
					SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)
			END
	
			SET @RLID = 0
			SET @AC_FreeMainPlacesCount = 0
			SET @AC_FreeExPlacesCount = 0
			SET @RL_FreeMainPlacesCount = 0
			SET @RL_FreeExPlacesCount = 0
			WHILE (@NeedPlacesForMen>0)
			BEGIN
				--если в последнем номере кончились места, то выставляем признак @RLID = 0
				IF @AC_FreeMainPlacesCount = 0 and @AC_FreeExPlacesCount = 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @ACPlacesMain
					SET @AC_FreeExPlacesCount = @ACPlacesEx
					--создаем новый номер, всегда когда есть хоть кто-то на основном месте ???
					IF (@AC_FreeMainPlacesCount > @RL_FreeMainPlacesCount) or (@AC_FreeExPlacesCount > @RL_FreeExPlacesCount)
					BEGIN
						--создаем новый номер для каждой услуги, если размещение на номер.
						--IF @ACPlacesMain>0
						IF @ACPerRoom>0
						BEGIN			
							INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
							set @RLID=SCOPE_IDENTITY()
							INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
							set @RPID=SCOPE_IDENTITY()-@RLPlacesMain-@RLPlacesEx+1
							SET @RL_FreeMainPlacesCount = @RLPlacesMain
							SET @RL_FreeExPlacesCount = @RLPlacesEx
						END
						ELSE
						BEGIN
							/*
							1. Ищем к кому подселиться в данной путевке, если не находим, то прийдется создавать новый номер
							*/
							set @RPID = null
							SELECT	TOP 1 @RPID=RP_ID, @RLID=RP_RLID
							FROM	RoomPlaces
							WHERE
								RP_Type=CASE WHEN @ACPlacesMain>0 THEN 0 ELSE 1 END
								and RP_RLID in 
								(	SELECT SD_RLID 
									FROM ServiceByDate,DogovorList,RoomNumberLists 
									WHERE SD_DLKey=DL_Key and DL_DGKey=@DGKey and RL_ID=SD_RLID
										and DL_SVKey=@N_DLSVKey and DL_Code=@N_DLCode 
										and DL_DateBeg=@N_DLDateBeg and DL_DateEnd=@N_DLDateEnd
										and RL_RMKey=@RMKey and RL_RCKey=@RCKey
								)
								and not exists 
								(	SELECT SD_RPID FROM ServiceByDate WHERE SD_RLID=RP_RLID and SD_RPID=RP_ID)
							ORDER BY RP_ID
							IF @RPID is null	-- надо создавать новый номер даже для дополнительного размещения
							BEGIN
								INSERT INTO RoomNumberLists(RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey) values (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)
								set @RLID=SCOPE_IDENTITY()
								INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE WHEN NU_ID>@RLPlacesMain THEN 1 ELSE 0 END FROM NUMBERS WHERE NU_ID between 1 and (@RLPlacesMain+@RLPlacesEx)
								set @RPID = SCOPE_IDENTITY()
								set @RPID=CASE WHEN @ACPlacesMain>0 THEN SCOPE_IDENTITY()-@RLPlacesEx-@RLPlacesMain+1 ELSE SCOPE_IDENTITY()-@RLPlacesEx+1 END
								SET @RL_FreeMainPlacesCount = @RLPlacesMain
								SET @RL_FreeExPlacesCount = @RLPlacesEx
							END
						END
					END
				END
				
				--смотрим есть ли в текущем номере свободные ОСНОВНЫЕ места
				IF @AC_FreeMainPlacesCount > 0
				BEGIN
					SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - 1
					SET @RL_FreeMainPlacesCount = @RL_FreeMainPlacesCount - 1
					SET @CurrentPlaceIsEx=0
				END
				--если ОСНОВНЫХ мест в номере уже нет, то может посадим на ДОПОЛНИТЕЛЬНОЕ? 
				ELSE IF @AC_FreeExPlacesCount > 0
				BEGIN
					SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - 1
					SET @RL_FreeExPlacesCount = @RL_FreeExPlacesCount - 1
					SET @CurrentPlaceIsEx=1
				END
				--INSERT INTO RoomPlaces (RP_RLID, RP_Type) values (@RLID,@CurrentPlaceIsEx)
				--set @RPID=SCOPE_IDENTITY()
				--SELECT @RPID=RP_ID FROM RoomPlaces WHERE RP_RLID=@RLID and RP_Type=@CurrentPlaceIsEx and RP_ID NOT IN (SELECT SD_RPID FROM ServiceByDate)
				--insert into debug (db_n1, db_n2, db_n3) values (@RLID, @CurrentPlaceIsEx, 1011)
				set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_TUKey)
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
				SET @NeedPlacesForMen=@NeedPlacesForMen-1
				SET @RPID=@RPID+1
			END		
		END --для проживания отдельная ветка... (КОНЕЦ)
		else --для всех услуг кроме проживания
		--while (@Date<=@N_DLDateEnd)
		BEGIN
			IF @Mod='UPD' and @SetToNewQuota=1	--если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
				SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
			ELSE
				SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

			while(@NeedPlacesForMen > 0)
			BEGIN
				--INSERT INTO ServiceByDate (SD_Date, SD_DLKey) values (@Date, @DLKey)
				set @TUKey=null
				SELECT @TUKey=TU_TUKey FROM dbo.TuristService WHERE TU_DLKey=@DLKey and TU_TUKey not in (SELECT SD_TUKey FROM ServiceByDate WHERE SD_DLKey=@DLKey)
				INSERT INTO RoomPlaces(RP_RLID, RP_Type) values (0,0)
				set @RPID=SCOPE_IDENTITY()				
				INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RPID, SD_TUKey)	
					SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RPID, @TUKey
					FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
				set @NeedPlacesForMen=@NeedPlacesForMen-1
			END
			--set @Date=@Date+1
		END
		exec dbo.DogListToQuotas @DLKey --в этой хранимке будет выполнена попытка постановки услуги на квоту
	END
	FETCH NEXT FROM cur_DogovorListChanged 
		INTO	@DLKey, @DGKey,
				@O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey,
				@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey
END
CLOSE cur_DogovorListChanged
DEALLOCATE cur_DogovorListChanged
GO
-- 01.10.2009 sp_DogListToQuotas.sql
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogListToQuotas]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[DogListToQuotas]
GO
CREATE PROCEDURE [dbo].[DogListToQuotas]
(
--<VERSION>2008.1.02.28a</VERSION>
	@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null
) AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, 
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0)
FROM	DogovorList, Dogovor 
WHERE	DL_DGKey=DG_Key and DL_Key=@DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	return 0
END
SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey
	return 0
END

	


/*
If @SVKey=3
	SELECT TOP 1 @Quota_SubCode1=HR_RMKey, @Quota_SubCode2=HR_RCKey FROM HotelRooms WHERE HR_Key=@SubCode1
Else
	Set @Quota_SubCode1=@SubCode1
*/
declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query varchar(8000), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @n2 smallint, @Result_Exist bit, @nTemp smallint, @dTemp datetime
--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2

	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		else
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
		return 0

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

--print 'sddddd0'
WHILE exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	--print @n
	set @n=@n+1
	Set @SubQuery = ' QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=' + CAST(@Q_Type as varchar(10)) + ' and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(10)) + '
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QO_QTID=QT_ID and QO_SVKey=' + CAST(@SVKey as varchar(10)) +' and QO_Code=' + CAST(@Code as varchar(10)) +' and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10))
	IF @SVKey=3
		Set @SubQuery=@SubQuery+' and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10))
	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))

	IF @Q_PRKey is null
		SET @SubQuery = @SubQuery + ' and QT_PRKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_PRKey as varchar(10))
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations='''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') ' 	

	Set @Query = '
		DECLARE @n1 smallint, @n2 smallint, @CurrentDate smalldatetime, @Long smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
		DECLARE @ServiceKeys Table 	(SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime )'

	IF @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +', SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_State is null'
	ELSE IF @Q_ByRoom=1
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RLID=' + CAST(@SetQuotaRLKey as varchar(10)) + '	and SD_State is null'
	ELSE IF @Q_ByRoom=0
		Set @Query = @Query+'
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and SD_RPID=' + CAST(@SetQuotaRPKey as varchar(10)) + ' and SD_State is null'

		Set @Query = @Query+'
			--SELECT * FROM @ServiceKeys
			SET @CurrentDate=''' + CAST(@Q_DateBeg as varchar(20)) + '''
			SET @Long=DATEDIFF(DAY,''' + CAST(@Q_DateBeg as varchar(20)) + ''',''' + CAST(@Q_DateEnd as varchar(20)) + ''')+1
			SET @Error=0
			SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			WHILE @SK_Current is not null and @Error=0
			BEGIN
				SET @n1=1
				WHILE @n1<=@Long and @Error=0
				BEGIN
					SET @QP_ID=null
					SET @n2=0
					WHILE (@QP_ID is null) and @n2<2
					BEGIN
						DECLARE @DATETEMP datetime
						SET @DATETEMP = GetDate()
						if exists (select SS_ParmValue from systemsettings where SS_ParmName=''SYSCheckQuotaRelease'' and SS_ParmValue=1)
							SET @DATETEMP=''10-JAN-1900''
						IF @prev=1'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 and QP_Durations=@durations_prev and QD_Release=@release_prev
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and ISNULL(QD2.QD_Release,0)=ISNULL(QD1.QD_Release,0) and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,-1)			
								ORDER BY ISNULL(QD_Release,0) DESC
			ELSE'
		Set @Query = @Query + '	SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release FROM QuotaParts QP1, QuotaDetails QD1, Quotas QT1, QuotaObjects
								WHERE ' + @SubQuery + ' and QD_Date=DATEADD(DAY,@n1-1,@CurrentDate)
									and (QP_Places-QP_Busy)>0 
									and not exists (SELECT SS_ID FROM StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=DATEADD(DAY,@n1-1,@CurrentDate) and (SS_IsDeleted is null or SS_IsDeleted=0))
									and not exists (SELECT QP_ID FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
									WHERE ' + @SubQuery + ' and QD2.QD_Date=''' + CAST(@Q_DateFirst as varchar(20)) + '''
										and ISNULL(QD2.QD_Release,0)=ISNULL(QD1.QD_Release,0) and QP2.QP_Durations=QP1.QP_Durations and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))
										and QD1.QD_Date > @DATETEMP+ISNULL(QD1.QD_Release,-1)
								ORDER BY ISNULL(QD_Release,0) DESC

							SET @n2=@n2+1
						IF @QP_ID is null
							SET @prev=1				
						ELSE
							UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@CurrentDate)	
					END
					If @QP_ID is null
						SET @Error=1
					SET @n1=@n1+1
				END
				IF @Error=0
					UPDATE ServiceByDate SET SD_State=' + CAST(@Q_Type as varchar(1)) + ', SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +')
						WHERE SD_DLKey=' + CAST(@DLKey as varchar(10)) +' and ' + CASE @Q_ByRoom WHEN 1 THEN 'SD_RLID' ELSE 'SD_RPID' END +'=@SK_Current and SD_State is null
				SET @SK_Current=null	
				SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
			END'
--	print @Query
	exec (@Query)

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT * FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END
UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
GO
GRANT EXECUTE ON [dbo].[DogListToQuotas] TO PUBLIC 
GO

--2007.2.32  date2009-10-08

--090925(AlterDiscounts).sql
--7.2 - 9.2
update Discounts set DS_DAKey = 0 where DS_DAKey is null

alter table Discounts alter column DS_DAKey int not null
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DF_Discounts_DAKey]') and OBJECTPROPERTY(id, N'IsConstraint') = 1)
	ALTER TABLE dbo.Discounts ADD CONSTRAINT DF_Discounts_DAKey default 0 FOR DS_DAKey
GO

--090925(add_settings).sql
--7.2 - 9.2
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSCheckVisaDuration')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSCheckVisaDuration', 0)
GO

if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSCheckInsDuration')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSCheckInsDuration', 0)
GO

--sp_CalculatePriceList.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
SET ANSI_WARNINGS OFF
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours where to_key = @nPriceTourKey
	delete from CalculatingPriceLists where CP_TourKey = @TrKey
	insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_PriceList2006, CP_PLNotDeleted, CP_TourKey, CP_UserKey)
	values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @nPriceList2006, @nPLNotDeleted, @TrKey, @userKey)

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		DECLARE @TP_Prices TABLE (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		)
		DELETE FROM @TP_Prices
		--INSERT INTO @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		
		---------------------------------------разбиваем данные в таблицах tp_prices по датам
		if (select COUNT(TP_Key) from TP_Prices where TP_DateBegin != TP_DateEnd and TP_TOKey = @nPriceTourKey) > 0
		begin
			select @numDates = COUNT(1) from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			exec GetNKeys 'TP_PRICES', @numDates, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @numDates + 1
		
			declare datesCursor cursor local fast_forward for
			select TD_Date, TI_Key, TP_Gross from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			
			open datesCursor
			fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			while @@FETCH_STATUS = 0
			begin
				insert into @TP_Prices (xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd) 
				values (@nTP_PriceKeyCurrent, @nPriceTourKey, @priceListKey, @priceListGross, @priceDate, @priceDate)
				set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
				fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			end
			
			close datesCursor
			deallocate datesCursor
			
			begin tran tEnd
				delete from TP_Prices where TP_TOKey = @nPriceTourKey
				
				insert into TP_Prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd)
				select xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd from @TP_Prices  
				where xTP_DateBegin = xTP_DateEnd
				
				delete from @TP_Prices
			commit tran tEnd
		end
		--------------------------------------------------------------------------------------
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM tp_prices where tp_tokey = @nPriceTourKey)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))

		if (@NumCalculated + @NumPrices) = 0
			set @NumPrices = 1

		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by ti_firsthdkey, td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN

			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу @TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				--записываем данные в таблицу @TP_Prices
				if @nPrevVariant <> -1
				begin
					if @price_brutto is not null
					BEGIN
						exec RoundPriceList @round, @price_brutto output
						
						if exists(select 1 from @TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
						begin
							update @TP_Prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
						end
						else
						begin
							insert into @TP_Prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) 
							values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
							
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax and @@fetch_status = 0
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						end
					END
				end
			
				--очищаем данные
				if @@fetch_status = 0
				begin
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				if @prevHdKey <> -1
				begin
					begin tran tEnd
						delete from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey)
						insert into tp_prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_tokey = @nPriceTourKey
						delete from @TP_Prices
						update tp_lists set ti_update = 2 where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey
					commit tran tEnd
				end
				set @prevHdKey = @hdKey
				
				if @@fetch_status = 0
					insert into @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @hdKey)
			end
			
			if @@fetch_status <> 0
				break
						
			---------------------------------------------------------------------------------
			
			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
				
			if @nTempGross is not null and @nSvkey <> 1
			begin
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			end
			else
			begin
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			end
			set @price_brutto = @price_brutto + @nBrutto
			---------------------------------------------------------------------------------
			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------
		--Set @nTotalProgress = 96
		--update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		--delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		--select 	@TPkeyMax = MAX(xtp_key), 
		--		@TPkeyMin = MIN(xtp_key) 
		--from 	@TP_Prices

		--while 	@TPkeyMin <= @TPkeyMax
		--BEGIN
		--	begin tran tEnd
		--	INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
		--		select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
		--	commit tran tEnd
		--	Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		--END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	delete from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		DECLARE @TP_Lists TABLE (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(60) , 
            [xTI_RMName] varchar(60) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(50),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      )
      DELETE FROM @TP_Lists
      INSERT INTO @TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update @TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update @TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update @TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update @TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update @TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update @TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update @TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update @TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update @TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update @TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update @TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update @TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update @TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update @TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update @TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update @TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update @TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update @TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update @TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update @TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from @TP_Prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  @TP_Lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG 
								   and exists (select 1 from @TP_Prices where TD_Date=xTP_DateBegin and xTP_TIKey=xTI_Key) )
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from @TP_Prices, @TP_Lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

--sp_CheckCalculatePriceList.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CheckCalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CheckCalculatePriceList]
GO
 
CREATE PROCEDURE [dbo].[CheckCalculatePriceList]
  (
	@tokey int,					-- ключ тура
	@saleDate datetime,			-- дата продажи
	@nUpdate smallint			-- признак дозаписи 0 - расчет, 1 - дозапись
  )
with encryption
AS
	declare @numPrices int

	declare @svKey int
	declare @code int
	declare @subCode1 int
	declare @subCode2 int
	declare @partnerKey int
	declare @packetKey int

	declare @maxDate datetime
	declare @maxDateDuration datetime
	declare @maxDuration int

	declare @servicesCount int
	declare @procIncrement float
	declare @procents float
	
	declare @costsCount int
	declare @serviceName nvarchar(128)
	declare @maxCostDate datetime
	declare @maxServiceDate datetime

	declare @countryKey int, @cityKey int, @nDay int, @nDays int
	
	declare @resultTable table (RT_SvKey int, RT_SvName nvarchar(128), RT_MaxCostDate datetime, RT_MaxServiceDate datetime)

begin
	update dbo.TP_Tours set TO_Progress = 0 where TO_Key = @tokey
	set @procents = 0

	select @servicesCount = count(*) from (select distinct TS_SVKey, TS_Code, TS_SubCode1, TS_SubCode2, TS_OpPartnerKey, TS_OpPacketKey from TP_Services where TS_TOKey = @tokey) as foo
	
	if @servicesCount > 0
		set @procIncrement = 100 / @servicesCount
	else
		set @procIncrement = 100

	declare serviceCursor cursor local fast_forward for
	select distinct TS_SVKey, TS_Code, TS_SubCode1, TS_SubCode2, TS_OpPartnerKey, TS_OpPacketKey
	from TP_Services
	where TS_TOKey = @tokey
	order by ts_svkey

	select @maxDate = max(TD_Date) from TP_TurDates where TD_TOKey = @tokey and TD_Update = @nUpdate

	open serviceCursor
	fetch next from serviceCursor into @svKey, @code, @subCode1, @subCode2, @partnerKey, @packetKey
	While (@@fetch_status = 0)
	begin

		select top 1 @serviceName = TS_Name, @nDays = TS_Days, @nDay = TS_Day from TP_Services where TS_SVKey = @svKey and TS_Code = @code and TS_SubCode1 = @subCode1 and TS_SubCode2 = @subCode2 and TS_OpPartnerKey = @partnerKey and TS_OpPacketKey = @packetKey order by TS_Days desc
		if @svKey = 3 or @svKey = 8
			set @nDays = @nDays + 1
		set @maxServiceDate = dateadd(day, @nDays + @nDay - 1, @maxDate)
		
		select @costsCount = count(CS_Id)
		from Costs
		where CS_SvKey = @svKey and CS_Code = @code and CS_SubCode1 = @subCode1 and CS_SubCode2 = @subCode2 and CS_PRKey = @partnerKey and CS_PKKey = @packetKey and 
			  ((@maxServiceDate between CS_Date and CS_DateEnd) or (CS_Date is null and CS_DateEnd is null)) and 
			  (@saleDate is null or (@saleDate between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null and CS_DateSellEnd is null)) and
			  ((@maxDate between CS_CheckinDateBeg and CS_CheckinDateEnd) or (CS_CheckinDateBeg is null and CS_CheckinDateEnd is null)) and
			  (@nDays = 0 or (@nDays between CS_LongMin and CS_Long) or (CS_LongMin is null and CS_Long is null))

		if @costsCount = 0
		begin
			if @svKey = 8
			begin
				select top 1 @countryKey = TS_CNKey, @cityKey = TS_CTKey, @nDays = TS_Days, @nDay = TS_Day from TP_Services where TS_SVKey = @svKey and TS_Code = @code and TS_SubCode1 = @subCode1 and TS_SubCode2 = @subCode2 and TS_OpPartnerKey = @partnerKey and TS_OpPacketKey = @packetKey order by TS_Days desc
				exec MakeFullSVName @countryKey, @cityKey, @svKey, @code, @nDays, @subCode1, @subCode2, @partnerKey, @maxDate, null, @serviceName output, null
			end
			
			select top 1 @maxCostDate = CS_DateEnd from Costs where CS_SvKey = @svKey and CS_Code = @code and CS_SubCode1 = @subCode1 and CS_SubCode2 = @subCode2 and CS_PRKey = @partnerKey and CS_PKKey = @packetKey order by CS_Date, CS_DateEnd desc
			set @maxServiceDate = @maxDate + @nDays + @nDay

			insert into @resultTable (RT_SvKey, RT_SvName, RT_MaxCostDate, RT_MaxServiceDate) values(@svKey, @serviceName, @maxCostDate, @maxServiceDate)
		end

		set @procents = @procents + @procIncrement
		update dbo.TP_Tours set TO_Progress = @procents where TO_Key = @tokey
	
		fetch next from serviceCursor into @svKey, @code, @subCode1, @subCode2, @partnerKey, @packetKey
	end

	select RT_SvKey, RT_SvName, RT_MaxCostDate, RT_MaxServiceDate from @resultTable

	update dbo.TP_Tours set TO_Progress = 100 where TO_Key = @tokey
end
GO

GRANT EXEC ON [dbo].[CheckCalculatePriceList] TO PUBLIC
GO

--091003_CreateTableApprovedPrintDocuments.sql
--7.2 - 9.2
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ApprovedPrintDocuments]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[ApprovedPrintDocuments]
	(
		[AD_Key] [int] IDENTITY(1,1) NOT NULL,
		[AD_SvKey] [int] NOT NULL,
		[AD_Code] [int] not null,
		[AD_SubCode1] [int] null,
		[AD_SubCode2] [int] null,
		[AD_Date] [DateTime] not null,
		[AD_CreateDate] [DateTime] not null default getdate(),
		[AD_User] [int] not null default 0
	 CONSTRAINT [PK_AprovedPrintDocuments] PRIMARY KEY CLUSTERED 
	(
		[AD_Key] ASC
	) ON [PRIMARY]
	) ON [PRIMARY]
GO

grant DELETE, INSERT, REFERENCES, SELECT, UPDATE on [dbo].[ApprovedPrintDocuments] to public
GO

--091003_AddSettingAllowErrorContinue.sql
--7.2 - 9.2
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSAllowErrorContinue')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSAllowErrorContinue', '1')
GO

--091005_DropTriggerToursIsEnabled.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_PTToursIsEnabledUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	drop trigger [dbo].[T_PTToursIsEnabledUpdate]
GO

--(090918)mwflightdirections.sql
--7.2 - 9.2

declare @sql nvarchar (4000)
if exists (select * from dbo.sysviews where name like 'mwFlightDirections')
begin
	set @sql ='
	alter view [dbo].[mwFlightDirections] as
		select distinct tl_key as fd_trkey, tl_cnkey as fd_cnkey, 
					ch_citykeyfrom as fd_ctkeyfrom, ch_citykeyto as fd_ctkeyto
		from tbl_TurList 
		inner join turservice on (tl_key = ts_trkey and ts_svkey = 1) 
		inner join tbl_Costs on (cs_svkey = 1 and cs_pkkey = ts_pkkey) 
		inner join Charter on (
			cs_svkey = 1 and cs_code = ch_key and ch_citykeyfrom = ts_subcode2 and  ch_citykeyto = ts_ctkey)
		where cs_dateend >= getdate() and
			tl_key in (
				select ds_pkkey from descriptions 
				where ds_dtkey = 115 and ds_tableid = 37 and ds_value like ''%1%'')
				and exists(
					select top 1 td_trkey from turdate 
					where td_date >= getdate() and td_trkey = tl_key)'
	exec sp_executesql @sql
	exec sp_refreshviewforall [mwFlightDirections]
/*
	select distinct tl_key as fd_trkey, tl_cnkey as fd_cnkey, 
				ch_citykeyfrom as fd_ctkeyfrom, ch_citykeyto as fd_ctkeyto
	from tbl_TurList inner join turservice on (tl_key = ts_trkey and ts_svkey = 1) inner join tbl_Costs on (cs_svkey = 1 and cs_pkkey = ts_pkkey) 
	inner join Charter on
		(cs_svkey = 1 and cs_code = ch_key )
	where cs_dateend >= getdate() and
		tl_key in (select ds_pkkey from descriptions where ds_dtkey = 115 and ds_tableid = 37 and ds_value like '%1%')
		and exists(select top 1 td_trkey from turdate where td_date >= getdate() and td_trkey = tl_key) 
	*/
	/*
		select distinct tl_key as fd_trkey, tl_cnkey as fd_cnkey, 
				ch_citykeyfrom as fd_ctkeyfrom, ch_citykeyto as fd_ctkeyto
		from tbl_Costs inner join  tbl_TurList on cs_pkkey = tl_key inner join Charter on
			(cs_svkey = 1 and cs_code = ch_key)
		where cs_dateend >= getdate() and exists(select top 1 td_trkey from turdate where td_trkey = tl_key and td_date >= getdate()) and
			tl_key in (select ds_pkkey from descriptions where ds_dtkey = 115 and ds_tableid = 37 and ds_value like '%1%')
	*/
end
SET NOCOUNT ON
GO

--091011(mwCleaner).sql
--7.2 - 9.2
if exists(select id from sysobjects where name='mwCleaner' and xtype='p')
	drop procedure [dbo].[mwCleaner]
go

create proc [dbo].[mwCleaner] as
begin
	delete from dbo.tp_turdates where td_date < getdate() and td_tokey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.tp_prices where tp_dateend < getdate() and tp_tokey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.tp_servicelists where tl_tikey not in (select tp_tikey from tp_prices) and tl_tokey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.tp_lists where ti_key not in (select tp_tikey from tp_prices) and ti_tokey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.tp_services where ts_key not in (select tl_tskey from tp_servicelists) and ts_tokey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.tp_tours where to_key not in (select ti_tokey from tp_lists) and to_update = 0

	declare @objName nvarchar(50)
	declare @sql nvarchar(500)
	declare delCursor cursor fast_forward read_only for select name from sysobjects where name like 'mwPriceDataTable%' and xtype='u'
	open delCursor
	fetch next from delCursor into @objName
	while(@@fetch_status = 0)
	begin
		set @sql = 'delete from ' + @objName + ' where pt_tourdate < getdate() and pt_tourkey not in (select to_key from tp_tours where to_update <> 0)'
		exec sp_executesql @sql
		set @sql = 'delete from dbo.mwSpoDataTable where sd_tourkey not in (select pt_tourkey from ' + @objName + ') and sd_tourkey not in (select to_key from tp_tours where to_update <> 0)'
		exec sp_executesql @sql
		fetch next from delCursor into @objName
	end
	close delCursor
	deallocate delCursor

	delete from dbo.mwPriceDurations where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable) and sd_tourkey not in (select to_key from tp_tours where to_update <> 0)
	delete from dbo.mwPriceHotels where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable) and sd_tourkey not in (select to_key from tp_tours where to_update <> 0)
end
go

grant exec on [dbo].[mwCleaner] to public
go

--sp_CalculatePriceList.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
 
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO
SET ANSI_WARNINGS OFF
GO

CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nPriceList2006 smallint,    -- Копирование цен в таблицы PriceList
	@nPLNotDeleted smallint		-- PriceList: 0 - удалять дублирующиеся цены, 1 - не удалять
  )
AS
--<DATE>2008-05-20</DATE>
---<VERSION>5.2.38.3</VERSION>
declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money
declare @sUseServicePrices varchar(1)

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

BEGIN
	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours where to_key = @nPriceTourKey
	delete from CalculatingPriceLists where CP_TourKey = @TrKey
	insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_PriceList2006, CP_PLNotDeleted, CP_TourKey, CP_UserKey)
	values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @nPriceList2006, @nPLNotDeleted, @TrKey, @userKey)

	Set @nTotalProgress=1
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	--Настройка (использовать связку обсчитанных цен с текущими ценами, пока не реализована)
	select @sUseServicePrices = SS_ParmValue from systemsettings where SS_ParmName = 'UseServicePrices'

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey, 
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2
			From TP_Services, TP_TurDates, TP_Tours
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2)		
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld,
				TF_PRKeyNew = TF_PRKeyOld
	Where	(SELECT count(*) FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
		and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
							FROM AirSeason, Charter, Costs
							WHERE CH_CityKeyFrom = TF_Subcode2 AND
								CH_CityKeyTo = TF_CTKey AND
								CS_Code = CH_Key AND
								AS_CHKey = CH_Key AND
								CS_SVKey = 1 AND
								CS_SubCode1 = TF_Subcode1 AND
								CS_PRKey = TF_PRKeyOld AND
								CS_PKKey = TF_PKKey AND
								TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
								TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
								AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
								),
					TF_PRKeyNew = TF_PRKeyOld
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey

		------ проверяем, а есть ли у кого-нибудь цены на любой рейс в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
			Update	TP_Flights Set 	TF_CodeNew = (	SELECT top 1 CH_Key
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									),
								TF_PRKeyNew = (	SELECT top 1 CS_PRKEY
								FROM AirSeason, Charter, Costs
								WHERE CH_CityKeyFrom = TF_Subcode2 AND
									CH_CityKeyTo = TF_CTKey AND
									CS_Code = CH_Key AND
									AS_CHKey = CH_Key AND
									CS_SVKey = 1 AND
									CS_SubCode1 = TF_Subcode1 AND
									CS_PKKey = TF_PKKey AND
									TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND
									TF_Date BETWEEN CS_Date AND  CS_DateEnd AND
									AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%'
									)			
			Where	TF_CodeNew is Null 
					and TF_TOKey = @nPriceTourKey
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------

	if ISNULL((select to_update from [dbo].tp_tours where to_key = @nPriceTourKey),0) <> 1
	BEGIN
		update [dbo].tp_tours set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		DECLARE @TP_Prices TABLE (
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL 
		)
		DELETE FROM @TP_Prices
		--INSERT INTO @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		
		---------------------------------------разбиваем данные в таблицах tp_prices по датам
		if (select COUNT(TP_Key) from TP_Prices where TP_DateBegin != TP_DateEnd and TP_TOKey = @nPriceTourKey) > 0
		begin
			select @numDates = COUNT(1) from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			exec GetNKeys 'TP_PRICES', @numDates, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @numDates + 1
		
			declare datesCursor cursor local fast_forward for
			select TD_Date, TI_Key, TP_Gross from TP_TurDates, TP_Lists, TP_Prices where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			
			open datesCursor
			fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			while @@FETCH_STATUS = 0
			begin
				insert into @TP_Prices (xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd) 
				values (@nTP_PriceKeyCurrent, @nPriceTourKey, @priceListKey, @priceListGross, @priceDate, @priceDate)
				set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
				fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			end
			
			close datesCursor
			deallocate datesCursor
			
			begin tran tEnd
				delete from TP_Prices where TP_TOKey = @nPriceTourKey
				
				insert into TP_Prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd)
				select xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd from @TP_Prices  
				where xTP_DateBegin = xTP_DateEnd
				
				delete from @TP_Prices
			commit tran tEnd
		end
		--------------------------------------------------------------------------------------
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано	
		Set @NumCalculated = (SELECT COUNT(1) FROM tp_prices where tp_tokey = @nPriceTourKey)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates where td_tokey = @nPriceTourKey and td_update = @nUpdate))

		if (@NumCalculated + @NumPrices) = 0
			set @NumPrices = 1

		Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin, tp_turdates
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates set td_checkmargin = 1 where
			exists(select 1 from TurMargin WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute
			from tp_tours, tp_services, tp_lists, tp_servicelists, tp_turdates
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate
			order by ti_firsthdkey, td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		set @nProgressSkipLimit = 50

		set @nProgressSkipCounter = 0
		Set @nTotalProgress = @nTotalProgress + 1
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN

			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу @TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				--записываем данные в таблицу @TP_Prices
				if @nPrevVariant <> -1
				begin
					if @price_brutto is not null
					BEGIN
						exec RoundPriceList @round, @price_brutto output
						
						if exists(select 1 from @TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
						begin
							update @TP_Prices set xtp_gross = @price_brutto where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
						end
						else
						begin
							insert into @TP_Prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey) 
							values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant)
							
							if @sUseServicePrices = '1'
								delete from TP_PriceDetails where PD_TPKey = @nTP_PriceKeyCurrent
							
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent +1
							if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax and @@fetch_status = 0
							BEGIN
								exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
								set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
							END
						end
					END
				end
			
				--очищаем данные
				if @@fetch_status = 0
				begin
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				if @prevHdKey <> -1
				begin
					begin tran tEnd
						delete from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey)
						insert into tp_prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_tokey = @nPriceTourKey
						delete from @TP_Prices
						update tp_lists set ti_update = 2 where ti_tokey = @nPriceTourKey and ti_firsthdkey = @prevHdKey
					commit tran tEnd
				end
				set @prevHdKey = @hdKey
				
				if @@fetch_status = 0
					insert into @TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey and tp_tikey in (select ti_key from tp_lists where ti_tokey = @nPriceTourKey and ti_firsthdkey = @hdKey)
			end
			
			if @@fetch_status <> 0
				break
						
			---------------------------------------------------------------------------------
			
			if @dtPrevDate <> @turdate
				update tp_services set ts_tempgross = null where ts_tokey = @nPriceTourKey
				
			if @nTempGross is not null and @nSvkey <> 1
			begin
				if @sUseServicePrices = '1'
				BEGIN
					select @nBrutto = SP_Price, @nBruttoWithCommission = SP_PriceWithCommission, @nMargin = PD_Margin, @nMarginType = PD_MarginType from dbo.ServicePrices,TP_PaymentDetails where PD_ID = @nPDId and PD_SPID = SP_ID
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
					If @nMarginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
						Set @nBrutto = @nBrutto + @nBrutto * @nMargin / 100
					Else -- даем наценку, только при наличии комиссии
						Set @nBrutto = @nBrutto + @nBruttoWithCommission * @nMargin / 100

					insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
				END
				else
					set @nBrutto = @nTempGross
			end
			else
			begin
				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN
					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew
						FROM	TP_Flights
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
						exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, @dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output, @sDetailed output, @sBadRate output, @dtBadDate output, @sDetailed output, @nSPId output
					else
						set @nBrutto = null
					--insert into Debug (db_n1, db_n2, db_n3) values (@nTP_PriceKeyCurrent, @nBrutto, @nSPId)

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0
					if @nMen > 1 and @nPriceFor = 0
						set @nBrutto = @nBrutto / @nMen

					if @nSPId is not null and @sUseServicePrices = '1'
					BEGIN				
						insert into TP_PriceDetails (PD_SPID, PD_TPKey, PD_Margin, PD_MarginType) values (@nSPId, @nTP_PriceKeyCurrent, @nMargin, @nMarginType)
						Set @nPDID = SCOPE_IDENTITY()
					END				
				END
				If @nSPId is not null and @sUseServicePrices = '1'
					update tp_services set ts_tempgross = @nPDID where ts_key = @nServiceKey
				else if @sUseServicePrices != '1'
					update tp_services set ts_tempgross = @nBrutto where ts_key = @nServiceKey
			end
			set @price_brutto = @price_brutto + @nBrutto
			---------------------------------------------------------------------------------
			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------
		--Set @nTotalProgress = 96
		--update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		--delete from tp_prices where tp_tokey = @nPriceTourKey

		Set @nTotalProgress = 97
		update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		declare @nRowPart int
		set @nRowPart = 200
		declare @TPkeyMax int
		declare @TPkeyMin int
		--select 	@TPkeyMax = MAX(xtp_key), 
		--		@TPkeyMin = MIN(xtp_key) 
		--from 	@TP_Prices

		--while 	@TPkeyMin <= @TPkeyMax
		--BEGIN
		--	begin tran tEnd
		--	INSERT INTO TP_Prices (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey) 
		--		select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey from @TP_Prices where xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
		--	commit tran tEnd
		--	Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		--END

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
	END

	delete from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey


	-----------------------------------------------------------------------

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @nPriceTourKey

		update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0 and isnull(HR_AGEFROM, 100) > 16
		)
		where TO_Key = @nPriceTourKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @nPriceTourKey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @nPriceTourKey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @nPriceTourKey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @nPriceTourKey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @nPriceTourKey

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @nPriceTourKey and tl_tokey = @nPriceTourKey
		and ts_tokey = @nPriceTourKey

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @nPriceTourKey 

	
	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @nPriceTourKey and tl_tokey = @nPriceTourKey and ts_tokey = @nPriceTourKey

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @nPriceTourKey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @nPriceTourKey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @nPriceTourKey
		and tl_tokey = @nPriceTourKey
		and ts_tokey = @nPriceTourKey

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @nPriceTourKey

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @nPriceTourKey

	-- ключ города и ключ курорта + звезды
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary
	where 
		ti_tokey = @nPriceTourKey and
		ti_firsthdkey = hd_key



	------------------------------------------------------------------------

	if @nPriceList2006 is not null and @nPriceList2006 <> 0
	BEGIN
		-- -- -- -- -- запись в PriceList
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Начало расчета', @nPriceTourKey)
		delete from dbo.pricelist where pl_trkey=@TrKey
		DECLARE @TP_Lists TABLE (
            [xTI_Key] [int] PRIMARY KEY NOT NULL ,
            [xTI_FirstHdKey] [int] NOT NULL ,
            [xTI_FirstHrKey] [int] NOT NULL ,
            [xTI_FirstPnKey] [int] NOT NULL ,  
            [xTI_Days] [int] NOT NULL ,  
            [xTI_PNCode] varchar(3) NULL , 
            [xTI_ACMain] [int] , 
            [xTI_ACNRealPlaces] [int] , 
            [xTI_ACNMenExBed] [int] , 
            [xTI_ACAgeFrom] [int] , 
            [xTI_ACName] varchar(30) , 
            [xTI_RCKey] [int] NOT NULL , 
            [xTI_RMKey] [int] NOT NULL , 
            [xTI_RCName] varchar(60) , 
            [xTI_RMName] varchar(60) , 
            [xTI_HDStars] varchar(12) , 
            [xTI_HDName] varchar(60) , 
            [xTI_HDHTTP] varchar(128) , 
            [xTI_HDCNKey] [int], 
            [xTI_HDCTKey] [int], 
            [xTI_HDRSKey] [int], 
            [xTI_RSName] varchar(50),
            [xTI_CTName] varchar(50),
            
            [xti_su1] varchar(824),
            [xti_su2] varchar(824),
            [xti_CityArr] [int],
            [xti_sh1] varchar(824),
            [xti_st1] varchar(824),
            [xti_st2] varchar(824),
            [xti_ss1] varchar(824),
            [xti_sv1] varchar(824),
            [xti_sd1] varchar(824),
            [xti_u] varchar(824)
      )
      DELETE FROM @TP_Lists
      INSERT INTO @TP_Lists (xTI_Key, xTI_FirstHdKey, xTI_FirstHrKey, xTI_FirstPnKey, xTI_Days, 
                        xTI_ACMain, xTI_ACNRealPlaces, xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_ACName,
                        xTI_RCKey, xTI_RMKey,
                        xTI_HDStars, xTI_HDName, xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xTI_HDHTTP
                        ) 
            select      TI_Key, TI_FirstHdKey, TI_FirstHrKey, TI_FirstPnKey, TI_Days, 
                        AC_Main, AC_NRealPlaces, AC_NMenExBed, AC_AgeFrom, AC_Name, 
                        HR_RCKey, HR_RMKey,
                        HD_Stars, HD_Name, HD_CNKey, HD_CTKey, HD_RSKey, HD_HTTP
            from  dbo.TP_Lists, 
                        dbo.HotelRooms,
                        dbo.AccmdMenType,
                        dbo.HotelDictionary
            where TI_TOKey = @nPriceTourKey
                        and HR_Key = TI_FirstHrKey
                        and AC_Key = HR_ACKey
                        and HD_Key = TI_FirstHdKey
 
            update @TP_Lists Set xTI_RSName = (Select RS_Name From dbo.Resorts Where RS_Key = xTI_HDRSKey)
            update @TP_Lists Set xTI_PNCode = (Select PN_Code From dbo.Pansion Where PN_Key = xTI_FirstPnKey)
            update @TP_Lists Set xTI_RCName = (Select RC_Name From dbo.RoomsCategory Where RC_Key = xTI_RCKey)
            update @TP_Lists Set xTI_RMName = (Select RM_Name From dbo.Rooms Where RM_Key = xTI_RMKey)
            update @TP_Lists Set xTI_CTName = (Select CT_Name From dbo.CityDictionary Where CT_Key = xTI_HDCTKey)
 
            update @TP_Lists Set xti_su2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day != 1)

/*
					xti_chbackkey = TS_Code,
					xti_chbackday = TS_Day,
					xti_chbackpkkey = TS_OpPacketKey,
					xti_chbackprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_su1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)

/*
					xti_chkey = TS_Code,
					xti_chday = TS_Day,
					xti_ctkeyto = TS_CtKey,
					xti_chpkkey = TS_OpPacketKey,
					xti_chprkey = TS_OpPartnerKey
*/
 
            update @TP_Lists Set xti_CityArr = (
                  Select TOP 1 TS_SubCode2
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 1 and TS_Day = 1)
 
            update @TP_Lists Set xti_sh1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 3)
 
            update @TP_Lists Set xti_st2 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day != 1)
 
            update @TP_Lists Set xti_st1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 2 and TS_Day = 1)
 
            update @TP_Lists Set xti_ss1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 6)
 
            update @TP_Lists Set xti_sv1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 5)
 
            update @TP_Lists Set xti_sd1 = (
                  Select TOP 1 LTRIM(STR(TS_Day)) + ',' + LTRIM(STR(TS_Code)) + ',' + LTRIM(STR(TS_SubCode1)) + ',' + LTRIM(STR(TS_SubCode2)) + ',' + LTRIM(STR(TS_Days)) + ',' + LTRIM(STR(TS_CtKey)) + ',' + LTRIM(STR(TS_Attribute)) + ',' + LTRIM(STR(TS_OpPacketKey)) + ',' + LTRIM(STR(TS_Men)) + ',' + LTRIM(STR(TS_OpPartnerKey))
                  From dbo.TP_ServiceLists, dbo.TP_Services Where TL_TOKey=@nPriceTourKey and TL_TIKey=xTI_Key and TS_Key=TL_TSKey
                  and TS_SvKey = 8)
 
            update @TP_Lists Set xti_u = 'MID=' + LTRIM(STR(@TrKey)) + '&' + 'DAY=' + LTRIM(STR(xTI_Days)) + '&' + 'H=1&H1=' + xti_sh1 + '&'
            update @TP_Lists Set xti_u = xti_u + 'U=2&' + 'U1=' + xti_su1 + '&' + 'U2=' + xti_su2 + '&'
                  where xti_su2 != '' and xti_su2 is not null
            update @TP_Lists Set xti_u = xti_u + 'U=1&' + 'U1=' + xti_su1 + '&'
                  where (xti_su2 = '' or xti_su2 is null) and xti_su1 != '' and xti_su1 is not null 
            update @TP_Lists Set xti_u = xti_u + 'T=2&' + 'T1=' + xti_st1 +  '&' + 'T2=' + xti_st2 +  '&'
                  where xti_st2 != '' and xti_st2 is not null
            update @TP_Lists Set xti_u = xti_u + 'T=1&' + 'T1=' + xti_st1 + '&'
                  where (xti_st2 = '' or xti_st2 is null) and xti_st1 != '' and xti_st1 is not null 
 
            update @TP_Lists Set xti_u = 'S=1&' + xti_u + 'S1=' + xti_ss1 + '&'
                  where xti_ss1 != '' and xti_ss1 is not null
            update @TP_Lists Set xti_u = 'V=1&' + xti_u + 'V1=' + xti_sv1 + '&'
                  where xti_sv1 != '' and xti_sv1 is not null
            update @TP_Lists Set xti_u = 'D=1&' + xti_u + 'D1=' + xti_sd1 + '&'
                  where xti_sd1 != '' and xti_sd1 is not null
 
		select      @TPkeyMax = MAX(xtp_key), 
					@TPkeyMin = MIN(xtp_key) 
		from @TP_Prices
 
            Set @NumPrices = @TPkeyMax - @TPkeyMin + 1     -- определяем сколько нам понадобится сделать записей в таблицу pricelist
		declare @nPriceListKeyMax int                  -- максимально возможный ключ PriceList, который можно использовать
            exec GetNKeys 'PRICELIST', @NumPrices, @nPriceListKeyMax output
		declare @nDeltaTP_Price_PriceList int          -- разница в ключах между таблицами TP_Price и PriceList
            Set @nDeltaTP_Price_PriceList = (@nPriceListKeyMax - @NumPrices + 1) - @TPkeyMin
		declare @sURL varchar(250)                           -- ссылка, у Виталия Головченко называлась @u
		declare @sTLName varchar(160)
		declare @sTLWebHTTP varchar(128)
            select @sTLName = TL_Name, @sTLWebHTTP = TL_WebHTTP from dbo.TurList where TL_key = @TrKey
      
      -- начало. удаление похожих цен
		if @nPLNotDeleted = 0
			delete from dbo.pricelist where exists (
                        select      xTI_Key
                        from  @TP_Lists, TP_TurDates
                        where xTI_FirstHdKey = pl_hdkey_first and xTI_FirstHrKey = PL_ROOM
                                   and xTI_FirstPnKey = PL_PNKEY and xTI_Days = PL_NDays and ISNULL(xti_CityArr,-1) = ISNULL(PL_CITYARR,-1) 
                                   and TD_TOKey = @nPriceTourKey
                                   and TD_Date = PL_DATEBEG 
								   and exists (select 1 from @TP_Prices where TD_Date=xTP_DateBegin and xTP_TIKey=xTI_Key) )
		-- конец. удаление похожих цен
 
		while       @TPkeyMin <= @TPkeyMax
		BEGIN
            begin tran tEnd
                  insert into dbo.PRICELIST ( 
                        PL_KEY, PL_TI, PL_TO, PL_TP, 
                        PL_CREATOR, PL_DATEBEG, PL_DATEEND, PL_BRUTTO, 
                        PL_TRKEY, PL_NDays, PL_HDKEY_FIRST, PL_ROOM, 
                        PL_PANSION, PL_Category, PL_Main, PL_ACNMENAD, 
                        PL_ACNMENEXB, PL_ACAGEFROM1, PL_STARS, PL_HDNAME, 
                        PL_CNKEY, PL_HDCTKEY, PL_HDRSKEY, PL_URL, 
                        PL_CITYARR, PL_TLWEBHTTP, PL_HDHTTP, PL_ACNAME, 
                        PL_RCNAME, PL_RMNAME, PL_RSNAME, PL_RMKEY, 
                        PL_PNKEY, PL_TLNAME, PL_CTNAME) 
                  select @nDeltaTP_Price_PriceList + xtp_key, xTP_TIKey, xtp_tokey, xtp_key, 
                        0, xtp_dateBegin, xtp_DateEnd, xTP_Gross, 
                        @TrKey, xTI_Days, xTI_FirstHdKey, xTI_FirstHrKey, --@TrKey объявлена в коде выше
                        xTI_PNCode, xTI_RCKey, xTI_ACMain, xTI_ACNRealPlaces,
                        xTI_ACNMenExBed, xTI_ACAgeFrom, xTI_HDStars, xTI_HDName, 
                        xTI_HDCNKey, xTI_HDCTKey, xTI_HDRSKey, xti_u,
                        xti_CityArr, @sTLWebHTTP, xTI_HDHTTP, xTI_ACName,
                        xTI_RCName, xTI_RMName, xTI_RSName, xTI_RMKey, 
                        xTI_FirstPnKey, @sTLName, xTI_CTName
                        from @TP_Prices, @TP_Lists                           
                        where xTP_TIKey = xTI_Key                                  
                                   and xtp_key between @TPkeyMin and @TPkeyMin + @nRowPart
            commit tran tEnd
            Set @TPkeyMin = @TPkeyMin + @nRowPart + 1
		END
		--  exec ttsCreatePrice123456Table @TrKey
		-- insert into History (Hi_date, Hi_text, Hi_SVKey) values (GetDate(), 'Скопировали в PriceList123.. и закончили расчет', @nPriceTourKey)	
		-- окончание записи в PriceList
		--    exec ttsLoadAllTpPrice @TrKey
	END
	declare @bExist int
	exec isObjectExist 'mwReplTours', null, 'T' , @bExist out
	if @bExist = 1
		insert into dbo.mwReplTours (rt_trkey, rt_tokey) values (@TrKey, @nPriceTourKey)     

	Set @nTotalProgress = 100
	update tp_tours set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	Return 0
END
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

--sp_mwEnablePriceTour.sql
--7.2 - 9.2
if object_id('dbo.mwEnablePriceTour', 'p') is not null
	drop proc dbo.mwEnablePriceTour
go

create proc dbo.mwEnablePriceTour @tourkey int, @enabled smallint
as
begin
	update tp_tours with(rowlock)
	set to_isenabled = @enabled
	where to_key = @tourkey

	declare @mwSinglePrice nvarchar(10)
	select @mwSinglePrice = ltrim(isnull(ss_parmvalue, N'0'))
	from dbo.SystemSettings
	where ss_parmname = 'mwSinglePrice'

	if(@mwSinglePrice != '0')
	begin
		declare @mwSinglePriceType nvarchar(10)
		select @mwSinglePriceType = lower(ltrim(isnull(ss_parmvalue, N'last')))
		from dbo.SystemSettings
		where ss_parmname = 'mwSinglePriceType' -- 'last' or 'min'

		declare @mwSinglePriceAllTours nvarchar(10)
		select @mwSinglePriceAllTours = ltrim(isnull(ss_parmvalue, N'0'))
		from dbo.SystemSettings
		where ss_parmname = 'mwSinglePriceAllTours'

		declare @mwSinglePriceAllHotelPrt nvarchar(10)
		select @mwSinglePriceAllHotelPrt = ltrim(isnull(ss_parmvalue, N'0'))
		from dbo.SystemSettings
		where ss_parmname = 'mwSinglePriceAllHotelPrt'

		declare @mwSinglePriceAllFlightPrt nvarchar(10)
		select @mwSinglePriceAllFlightPrt = ltrim(isnull(ss_parmvalue, N'0'))
		from dbo.SystemSettings
		where ss_parmname = 'mwSinglePriceAllFlightPrt'

		declare @mwSinglePriceAllTourTypes nvarchar(10)
		select @mwSinglePriceAllTourTypes = ltrim(isnull(ss_parmvalue, N'0'))
		from dbo.SystemSettings
		where ss_parmname = 'mwSinglePriceAllTourTypes'


		create table #tmpPricesWeb(
			pt_hdkey int,
			pt_rmkey int,
			pt_rckey int,
			pt_ackey int,
			pt_pnkey int,
			pt_tourdate datetime,
			pt_days int,
			pt_nights int,
			pt_price float,
			pt_hdpartnerkey int,
			pt_chprkey int,
			pt_tourtype int
		)

		declare @sInsert nvarchar(2000), @sSelect nvarchar(2000)
		set @sInsert = '
			insert into #tmpPricesWeb(
				pt_hdkey,
				pt_rmkey,
				pt_rckey,
				pt_ackey,
				pt_pnkey,
				pt_tourdate,
				pt_days,
				pt_nights,
				pt_price
		'
		set @sSelect = '
			)
			select distinct
				pt_hdkey,
				pt_rmkey,
				pt_rckey,
				pt_ackey,
				pt_pnkey,
				pt_tourdate,
				pt_days,
				pt_nights,
				pt_price	
		'

		if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
		begin
			set @sInsert = @sInsert + ',
				pt_hdpartnerkey
		'
			set @sSelect = @sSelect + ',
				pt_hdpartnerkey
		'
		end

		if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
		begin
			set @sInsert = @sInsert + ',
				pt_chprkey
		'
			set @sSelect = @sSelect + ',
				pt_chprkey
		'
		end

		if(@mwSinglePriceAllTourTypes = '0') -- single price for flight partner
		begin
			set @sInsert = @sInsert + ',
				pt_tourtype
		'
			set @sSelect = @sSelect + ',
				pt_tourtype
		'
		end
	end

	declare @sql nvarchar(4000)
	declare @cityFromKey int
	declare @countryKey int

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	select @countryKey = sd_cnkey, @cityFromKey = sd_ctkeyfrom from mwSPODataTable where sd_tourkey = @tourkey 
	if (@countryKey is not null and @cityFromKey is not null)
	begin
		declare @tableName nvarchar(100)
		if (@mwSearchType = 0)
			set @tableName = 'dbo.mwPriceDataTable'
		else
			set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)

		if(@mwSinglePrice != '0')
		begin
			if(@enabled > 0 and @mwSinglePriceAllTours != '0') -- turn the tour on
			begin	
				-- disable all prices for main places that greater than new prices (setting = min) or
				-- than are more old than new prices (setting = last)

				set @sql = @sInsert + @sSelect + ' 
			from ' + @tableName + ' with(nolock) 
			where pt_main > 0 and pt_tourkey = ' + ltrim(str(@tourkey))
				
				exec(@sql)

				declare cur_prices cursor fast_forward read_only for
				select
					pt_hdkey,
					pt_rmkey,
					pt_rckey,
					pt_ackey,
					pt_pnkey,
					pt_tourdate,
					pt_days,
					pt_nights,
					pt_price,
					pt_hdpartnerkey,
					pt_chprkey,
					pt_tourtype
				from
					#tmpPricesWeb

				declare @hdkey int, @rmkey int, @rckey int, 
					@ackey int, @pnkey int, @tourdate datetime, 
					@days int, @nights int, @price float, @hdpartnerkey int, @chprkey int, @tourtype int

				open cur_prices
				fetch next from cur_prices into @hdkey, @rmkey, @rckey, 
					@ackey, @pnkey, @tourdate, @days, @nights, @price, @hdpartnerkey, @chprkey, @tourtype

				while(@@fetch_status = 0)
				begin
					set @sql = '
			update ' + @tableName + ' with(rowlock) 
			set pt_isenabled = 0
			where
				pt_main > 0 and	
				pt_isenabled > 0 and
				pt_hdkey = ' + ltrim(str(@hdkey)) + ' and
				pt_rmkey = ' + ltrim(str(@rmkey)) + ' and
				pt_rckey = ' + ltrim(str(@rckey)) + ' and
				pt_ackey = ' + ltrim(str(@ackey)) + ' and
				pt_pnkey = ' + ltrim(str(@pnkey)) + ' and
				pt_tourdate = ''' + CONVERT(varchar(10), @tourdate, 21) + ''' and
				pt_days = ' + ltrim(str(@days)) + ' and
				pt_nights = ' + ltrim(str(@nights))
					if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
						set @sql = @sql + ' and
				pt_hdpartnerkey = '+ ltrim(str(@hdpartnerkey))		
					
					if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
						set @sql = @sql + ' and
				pt_chprkey = ' + ltrim(str(@chprkey))

					if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
						set @sql = @sql + ' and
				pt_tourtype = ' + ltrim(str(@tourtype))

					if(@mwSinglePriceType = 'min')
						set @sql = @sql + ' and
				pt_price > ' + ltrim(str(@price))
					
					if(@mwSinglePriceAllTours = '0')
						set @sql = @sql + ' and
				pt_tourkey = ' + ltrim(str(@tourkey))
					else
						set @sql = @sql + ' and
				pt_tourkey != ' + ltrim(str(@tourkey))
					
					--print @sql
					exec(@sql) -- turn off max or old prices for main places

					fetch next from cur_prices into @hdkey, @rmkey, @rckey, 
						@ackey, @pnkey, @tourdate, @days, @nights, @price, @hdpartnerkey, @chprkey, @tourtype
				end
				
				close cur_prices
				deallocate cur_prices
			end -- if(@enabled > 0 and @mwSinglePriceAllTours != '0')
		end -- if(@mwSinglePrice != '0')

		set @sql = '
		update ' + @tableName + ' with(rowlock)
		set pt_isenabled = ' + CAST(@enabled as varchar) + '
		where pt_tourkey = ' + CAST(@tourkey as varchar)

		if(@enabled > 0)
		begin
			if (@mwSinglePrice != '0')
			begin
				-- enable all new prices for main places that are min (setting = min) or
				-- that are new (setting = last)

				set @sql = @sql + ' and pt_main > 0 and not exists(
				select 1 from ' + @tableName + ' pt with(nolock)
				where 
				pt.pt_main > 0 and
				pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
				pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
				pt.pt_rckey = ' + @tableName + '.pt_rckey and
				pt.pt_ackey = ' + @tableName + '.pt_ackey and
				pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
				pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
				pt.pt_days = ' + @tableName + '.pt_days and
				pt.pt_nights = ' + @tableName + '.pt_nights'
				if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
					set @sql = @sql + ' and
				pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey'
				
				if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
					set @sql = @sql + ' and
				pt.pt_chprkey = ' + @tableName + '.pt_chprkey'

				if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
					set @sql = @sql + ' and
				pt.pt_tourtype = ' + @tableName + '.pt_tourtype'

				if(@mwSinglePriceType = 'last')
					set @sql = @sql + '	and
				pt.pt_key > ' + @tableName + '.pt_key'
				else if(@mwSinglePriceType = 'min')
					set @sql = @sql + '	and
				pt.pt_price < ' + @tableName + '.pt_price'

					if(@mwSinglePriceAllTours = '0')
						set @sql = @sql + ' and
				pt_tourkey = ' + ltrim(str(@tourkey))
					else
						set @sql = @sql + ' and pt.pt_isenabled > 0 and
				pt_tourkey != ' + ltrim(str(@tourkey))

				set @sql = @sql + ')'		
			end
		end
		--print @sql
		exec (@sql)

		if(@enabled > 0)
		begin
			if (@mwSinglePrice != '0')
			begin
				-- enable all new prices for extra places for which exist new prices for main places (in the new tour)
				set @sql = '
				update ' + @tableName + ' with(rowlock)
				set pt_isenabled = ' + CAST(@enabled as varchar) + '
				where pt_tourkey = ' + CAST(@tourkey as varchar) + '
				and isnull(pt_main, 0) <= 0 and exists(
				select 1 from ' + @tableName + ' pt with(nolock)
				where pt.pt_tourkey = ' + CAST(@tourkey as varchar) + ' and
				pt.pt_isenabled > 0 and
				pt.pt_main > 0 and
				pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
				pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
				pt.pt_rckey = ' + @tableName + '.pt_rckey and
				pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
				pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
				pt.pt_days = ' + @tableName + '.pt_days and
				pt.pt_nights = ' + @tableName + '.pt_nights and
				pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey)'
				--print @sql
				exec(@sql)

				-- disable all old prices for extra places for which does not exist old prices for main places (in the same old tour)
				set @sql = '
				update ' + @tableName + ' with(rowlock)
				set pt_isenabled = 0
				where pt_tourkey != ' + CAST(@tourkey as varchar) + '
				and isnull(pt_main, 0) <= 0 and pt_isenabled > 0 and not exists(
				select 1 from ' + @tableName + ' pt with(nolock)
				where pt.pt_tourkey = ' + @tableName + '.pt_tourkey and
				pt.pt_isenabled > 0 and
				isnull(pt.pt_main, 0) > 0 and
				pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
				pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
				pt.pt_rckey = ' + @tableName + '.pt_rckey and
				pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
				pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
				pt.pt_days = ' + @tableName + '.pt_days and
				pt.pt_nights = ' + @tableName + '.pt_nights and
				pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey)'
				--print @sql
				exec(@sql)
			end
		end
	end

	update mwSpoDataTable set sd_isenabled = @enabled where sd_tourkey = @tourkey	
end
go

grant exec on dbo.mwEnablePriceTour to public
go

--091006(mwSinglePrice).sql
--7.2 - 9.2
if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePrice')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePrice', '0')
go

if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePriceType')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePriceType', 'last')
go

if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePriceAllTours')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePriceAllTours', '1')
go

if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePriceAllHotelPrt')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePriceAllHotelPrt', '1')
go

if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePriceAllFlightPrt')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePriceAllFlightPrt', '0')
go

if not exists(select ss_parmname from dbo.systemsettings where ss_parmname = 'mwSinglePriceAllTourTypes')
	insert into systemsettings(ss_parmname, ss_parmvalue) values('mwSinglePriceAllTourTypes', '0')
go


if object_id('mwUpdate', 'tr') is not null
	drop trigger mwUpdate
go

if exists(select 1 from sysindexes where id = object_id('dbo.mwPriceDataTable') and name='x_singleprice')
	drop index mwPriceDataTable.x_singleprice
go

if exists(select 1 from sysindexes where id = object_id('dbo.mwPriceDataTable') and name='x_singleprice_tour')
	drop index mwPriceDataTable.x_singleprice_tour
go

declare @sql nvarchar(4000)

if (@@version like '%SQL Server 2005%')
	set @sql = '
	create index x_singleprice on mwPriceDataTable(
								pt_tourdate,
								pt_hdkey,
								pt_rmkey,
								pt_rckey,
								pt_ackey,
								pt_pnkey,
								pt_days,
								pt_nights)
							include(
								pt_hdpartnerkey,
								pt_chprkey,
								pt_tourtype,
								pt_main,
								pt_isenabled,								
								pt_tourkey,
								pt_price)
'
else
	set @sql = '
	create index x_singleprice on mwPriceDataTable(
								pt_tourdate,
								pt_hdkey,
								pt_rmkey,
								pt_rckey,
								pt_ackey,
								pt_pnkey,
								pt_days,
								pt_nights,
								pt_hdpartnerkey,
								pt_chprkey,
								pt_tourtype,
								pt_main,
								pt_isenabled,								
								pt_tourkey,
								pt_price)
'

exec(@sql)

if (@@version like '%SQL Server 2005%')
	set @sql = '
	create index x_singleprice_tour on mwPriceDataTable(pt_tourkey, pt_main)
	include(
		pt_tourdate,
		pt_hdkey,
		pt_rmkey,
		pt_rckey,
		pt_ackey,
		pt_pnkey,
		pt_days,
		pt_nights,
		pt_hdpartnerkey,
		pt_chprkey,
		pt_tourtype)
'
else
	set @sql = '
	create index x_singleprice_tour on mwPriceDataTable(
		pt_tourkey,
		pt_main,
		pt_tourdate,
		pt_hdkey,
		pt_rmkey,
		pt_rckey,
		pt_ackey,
		pt_pnkey,
		pt_days,
		pt_nights,
		pt_hdpartnerkey,
		pt_chprkey,
		pt_tourtype)
'

exec(@sql)


--sp_FillMasterWebSearchFields.sql
--7.2 - 9.2
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null, @forceEnable smallint = null)
-- if @forceEnable > 0 (by default) then make call mwEnablePriceTour @tokey, 1 at the end of the procedure
as
begin
	set @forceEnable = isnull(@forceEnable, 1)

	declare @replicationSetting nvarchar(254)
	select @replicationSetting = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUseWebReplication'
	if IsNull(@replicationSetting, '0') = '1'
	begin
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
		return
	end

	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200),
		thd_tourname nvarchar(200),
		thd_hdname nvarchar(200),
		thd_ctname nvarchar(200),
		thd_rsname nvarchar(200),
		thd_ctfromname nvarchar(200),
		thd_cttoname nvarchar(200),
		thd_tourtypename nvarchar(200),
		thd_pncode nvarchar(50),
		thd_hdorder int,
		thd_hotelkeys nvarchar(256),
		thd_pansionkeys nvarchar(256),
		thd_hotelnights nvarchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [nvarchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [nvarchar] (60),
		[pt_tourname] [nvarchar] (128),
		[pt_pnname] [nvarchar] (30),
		[pt_pncode] [nvarchar] (3),
		[pt_rmname] [nvarchar] (60),
		[pt_rmcode] [nvarchar] (60),
		[pt_rcname] [nvarchar] (60),
		[pt_rccode] [nvarchar] (40),
		[pt_acname] [nvarchar] (30),
		[pt_accode] [nvarchar] (30),
		[pt_rsname] [nvarchar] (50),
		[pt_ctname] [nvarchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [nvarchar] (3),
		[pt_toururl] [nvarchar] (128),
		[pt_hotelurl] [nvarchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys nvarchar(256),
		pt_hotelroomkeys nvarchar(256),
		pt_hotelstars nvarchar(256),
		pt_pansionkeys nvarchar(256),
		pt_hotelnights nvarchar(256),
		pt_chdirectkeys nvarchar(50) null,
		pt_chbackkeys nvarchar(50) null,
		[pt_topricefor] [smallint] NOT NULL DEFAULT (0)
	)

	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @sql nvarchar(4000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor]
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0),
		to_pricefor
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	if(@forceEnable > 0)
		exec dbo.mwEnablePriceTour @tokey, 1

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100, TO_DateCreated = GetDate() where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--030_Alter_sp_GetPermissions.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPermissions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetPermissions] 
GO

Create PROCEDURE [dbo].[GetPermissions] 
  (
	@sTable nvarchar(50) = null,
	@nSelect int  = null output,
	@nInsert int  = null output,
	@nUpdate int  = null output,
	@nDelete int  = null output
)
AS


Declare @sName nvarchar(50)
Declare @nPermissions int
Select @sName = Name FROM dbo.sysobjects WHERE id = object_id(@sTable ) and OBJECTPROPERTY(id, N'IsView') = 1
If @sName is not null
	set @sTable = 'tbl_' + @sTable
Select @nPermissions = PERMISSIONS (OBJECT_ID (@sTable))

--SELECT - 1
--UPDATE - 2
--INSERT - 8
--DELETE - 16
if (@nPermissions is not null)
begin
	Set @nSelect = @nPermissions & 1
	Set @nInsert = ( @nPermissions & 8 ) / 8
	Set @nUpdate = ( @nPermissions & 2 ) / 2
	Set @nDelete = ( @nPermissions & 16 ) / 16
end
else
begin
	Set @nSelect = 0
	Set @nInsert = 0
	Set @nUpdate = 0
	Set @nDelete = 0
end

Return  0
GO

GRANT EXECUTE ON [dbo].[GetPermissions]  TO Public
GO

--sp_ClearMasterWebSearchFields.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ClearMasterWebSearchFields]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP procedure [dbo].[ClearMasterWebSearchFields]
GO

CREATE PROCEDURE [dbo].[ClearMasterWebSearchFields]
	@tokey int -- ключ тура	
as
begin
	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	exec dbo.mwEnablePriceTour @tokey, 0

	delete from dbo.mwPriceDataTable where pt_tourkey = @tokey
	update dbo.TP_Tours set TO_Progress = 25 where TO_Key = @tokey

	delete from dbo.mwSpoDataTable where sd_tourkey = @tokey
	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	delete from dbo.mwPriceDurations where sd_tourkey = @tokey
	update dbo.TP_Tours set TO_Progress = 75 where TO_Key = @tokey

	delete from dbo.mwPriceHotels where sd_tourkey = @tokey
	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
end
GO

GRANT EXECUTE ON [dbo].[ClearMasterWebSearchFields] TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetCurrentNationalCurrencyRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetCurrentNationalCurrencyRate]
GO
CREATE PROCEDURE [dbo].[GetCurrentNationalCurrencyRate]
@currency varchar(100),
@res money output
AS
BEGIN
	set @res = null 
	 
	declare @national_currency varchar(5) 
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1 
	 
	if @national_currency = @currency 
	begin 
		set @res = 1 
	end 
	else 
	begin 
		select top 1 @res = RC_COURSE from RealCourses
		where 
		RC_RCOD1 = @national_currency and RC_RCOD2 = @currency 
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102) 
	end 
END

return 0
GO
GRANT EXECUTE ON [dbo].[GetCurrentNationalCurrencyRate] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetFinalPriceByNCRate]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetFinalPriceByNCRate]
GO
CREATE PROCEDURE [dbo].[GetFinalPriceByNCRate]
@dogovor_code varchar(100),
@currency varchar(5),
@old_currency varchar(5),
@price money,
@old_price money,
@final_price money output,
@national_currency_rate money output
AS
BEGIN
	set @final_price = null
	set @national_currency_rate = null

	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @course money
	set @course = -1

	select top 1 @course = cast(isnull(HI_TEXT, -1) as money) from History
	where HI_DGCOD = @dogovor_code and HI_OAId=20 order by HI_DATE desc

	if @currency = @national_currency
	begin
		set @national_currency_rate = 1
		--set @final_price = @price
	end
	else if @currency = @old_currency and @course <> -1
	begin
		set @national_currency_rate = @course
		--set @final_price = @price * @national_currency_rate
	end
	else
	begin
		declare @rc_course money
		set @rc_course = -1
		select top 1 @rc_course =  cast(isnull(RC_COURSE, -1) as money) from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)

		if @rc_course <> -1
		begin
			set @national_currency_rate = @rc_course
		end
		else
		begin
			set @national_currency_rate = null
		end
	end

	if @national_currency_rate is not null
	begin
		set @final_price = @national_currency_rate * @price

		-- пересчитываем цену, если надо
		declare @tmp_final_price money
		set @tmp_final_price = null
		exec [dbo].[CalcPriceByNationalCurrencyRate] @dogovor_code, @currency, @old_currency, @national_currency, @price, @old_price, '', '', @tmp_final_price output, @national_currency_rate, null

		if @tmp_final_price is not null
		begin
			set @final_price = @tmp_final_price
		end
		--
	end
END
GO

GRANT EXECUTE ON [dbo].[GetFinalPriceByNCRate] TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyJob]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyJob]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyJob]
AS
BEGIN
	declare @days int
	set @days = null

	select @days = cast(SS_ParmValue as int)
	from SystemSettings
	where SS_ParmName = 'NATIONAL_CURRENCY_EXPIRE'

	if @days is not null
	begin
		create table #tmp(DogovorCode varchar(255))

		insert into #tmp(DogovorCode)
		(
			select dg.DG_CODE as DogovorCode
			from tbl_dogovor dg with(nolock)
			where
			((select count(*) from history h where h.HI_DGCOD = dg.DG_CODE and h.HI_OaID in (20,21,22)) > 0)
			and
			dg.DG_SOR_CODE not in (7,23,24)
		)

		insert into #tmp(DogovorCode)
		(
			select  dg.DG_CODE as DogovorCode
			from tbl_dogovor dg with(nolock)
			where
			((select count(*) from history h where h.HI_DGCOD = dg.DG_CODE and h.HI_OaID in (20,21,22)) > 0)
			and
			dg.DG_SOR_CODE in (7,23,24)
			and
			(dg.DG_PAYED - dg.DG_PRICE) < 0
			and
			dbo.GetNumberOfWorkingDays(dg.DG_CODE) >= @days
		)

		declare @DogovorCode varchar(50)

		declare @currency varchar(5)

		declare @rc_course money
		declare @rc_courseStr char(30)

		declare @national_currency varchar(5)
		select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

		declare @sHI_WHO varchar(25)
		exec dbo.CurrentUser @sHI_WHO output

		declare cur cursor for
			select DogovorCode from #tmp

		open cur

		fetch next from cur into @DogovorCode

		while @@fetch_status = 0
		begin
			select @currency = DG_RATE from tbl_dogovor where DG_CODE = @DogovorCode

			if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@currency))
			begin
				set @rc_course = -1
				select top 1 @rc_courseStr = RC_COURSE from RealCourses
				where
				RC_RCOD1 = @national_currency and RC_RCOD2 = @currency
				and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
				set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
			end
			else
			begin
				set @rc_courseStr = '1'
				set @rc_course = 1
			end

			if @rc_course <> -1
			begin
				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, @rc_courseStr, @currency, 'UPD', 'DOGOVORCURRENCYJOB', 20)

				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = @rc_course * DG_PRICE,
					DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * DG_DISCOUNTSUM
				where
					DG_CODE = @DogovorCode
			end
			else
			begin
				update dbo.tbl_Dogovor
				set
					DG_NATIONALCURRENCYPRICE = null,
					DG_NATIONALCURRENCYDISCOUNTSUM = null
				where
					DG_CODE = @DogovorCode

				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
				values
				(@DogovorCode, @sHI_WHO, 'Курс отсутствует', @currency, 'UPD', 'DOGOVORCURRENCYJOB', 21)
			end

			fetch next from cur into @DogovorCode
		end

		close cur
		deallocate cur

		drop table #tmp
	end
END
GO

GRANT EXECUTE ON [dbo].[NationalCurrencyJob] TO PUBLIC 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[NationalCurrencyPrice]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[NationalCurrencyPrice]
GO
CREATE PROCEDURE [dbo].[NationalCurrencyPrice]
@sRate varchar(5), -- валюта пересчета
@sRateOld varchar(5), -- старая валюта
@sDogovor varchar(100), -- код договора
@nPrice money, -- новая цена в указанной валюте
@nPriceOld money, -- старая цена
@nDiscountSum money, -- новая скидка в указанной валюте
@sAction varchar(100), -- действие
@order_status smallint -- null OR passing the new value for dg_sor_code from the trigger when it's (dg_sor_code) updated
AS
BEGIN
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if @sAction = 'RECALCULATE_BY_TODAY_CURRENCY_RATE'
	begin
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else if @sAction = 'RECALCULATE_BY_OLD_CURRENCY_RATE'
	begin
		set @rc_course = -1
		select top 1 @rc_courseStr = HI_TEXT from History
		where HI_DGCOD = @sDogovor and HI_OAId=20 order by HI_DATE desc
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end

	if @sRate = @national_currency
	begin
		set @rc_courseStr = '1'
		set @rc_course = 1
	end
	
	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	if @rc_course <> -1
	begin
		declare @final_price money
		set @final_price = @rc_course * @nPrice

		-- пересчитываем цену, если надо
		declare @tmp_final_price money
		set @tmp_final_price = null
		exec [dbo].[CalcPriceByNationalCurrencyRate] @sDogovor, @sRate, @sRateOld, @national_currency, @nPrice, @nPriceOld, @sHI_WHO, 'INSERT_TO_HISTORY', @tmp_final_price output, @rc_course, @order_status

		if @tmp_final_price is not null
		begin
			set @final_price = @tmp_final_price
		end
		--

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'UPD', 'DOGOVORCURRENCY', 20)

		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @final_price,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_CODE = @sDogovor
	end
	else
	begin
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = null,
			DG_NATIONALCURRENCYDISCOUNTSUM = null
		where
			DG_CODE = @sDogovor

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'UPD', 'DOGOVORCURRENCYISNULL', 21)
	end
END
return 0
GO

GRANT EXECUTE ON [dbo].[NationalCurrencyPrice] TO PUBLIC 
GO
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[InsDogovor]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure dbo.InsDogovor
GO
CREATE procedure [dbo].[InsDogovor]
(
--<VERSION>2005.2.38</VERSION>
@nReturn int output,
@nKeyDogovor int output,				-- возвращает ключ созданного договора
@sDogovor varchar (10) = null,			-- номер путевки, которую требуется создать
@dTour datetime = null,					-- дата заезда
@nDays int = null,						-- количество дней поездки
@nTour int = null,						-- ключ тура (TurList)
@nCountry int = null,					-- ключ страны (Country) 
@nCity int = null,						-- ключ города (CityDictionary)
@nMen smallint = null,					-- количество человек в путевке
@sRate varchar (3) = null,				-- код валюты путевки
@nPrice money = null,					-- стоимость (к оплате)
@nPayed money = null,					-- оплачено по путевке (МТ передает "0")
@nDiscount money = null,				-- размер скидки(комиссии) номинальный
@nDiscountKey int = null,				-- ключ скидки(комиссии)
@nPcnt smallint = null,					-- скидка в процентах (1-да, 0-нет)
@nDiscountSum money = null,				-- величина скидки (комиссии) в у.е.
@nCauseDiscount int = null,				-- ключ причины скидки (CauseDiscount)
@nAgent int = null,						-- ключ покупателя (Partners)
@nOper int = null,						-- ключ менеджера создавшего путевку (UserList)
@sOper varchar (25) = null,				-- имя менеджера создавшего путевку
@sMainMen varchar (45) = null,			-- контактное лицо. ФИО (лицо, заключившее договор)
@sMainMenPhone varchar (30) = null,		-- контактное лицо. телефон
@sMainMenAdress varchar (70) = null,	-- контактное лицо. адрес
@sMainMenPasport varchar (70) = null,	-- контактное лицо. паспорт
@nOwner int = null,						-- ключ ведущего менеджера по путевке (UserList)
@nStatus int = null,					-- статус по умолчанию (OrderStatus)  		- МТ передает 1 (не определен)
@nPrintVaucher smallint = null,			-- признак путевки. ваучер распечатан		- МТ передает 0 (не распечатан)
@nPrintDogovor smallint = null,			-- признак путевки. путевка распечатана	 	- МТ передает 0 (не распечатан)
@nAdvertiseKey int = null,				-- ключ справочника источник рекламы (Advertisment) 
@nLocked smallint = null,				-- признак путевки. путевка заблокирована 	- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dVisaDate datetime = null,				-- дата сдачи документов для визы 		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPaymentDate datetime = null,			-- дата полной оплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@dPPaymentDate datetime = null,			-- дата предоплаты				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nRazmerPPayment int = null,			-- размер предоплаты 				- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nPercentPPayment int = null,			-- предоплата в % (1-да, 0-нет)			- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@sDocument varchar (250) = null,		-- принятые документы (текстовое поле)		- МТ НЕ ПЕРЕДАЕТ !!!!!!!!!!!!!
@nLeadDepartmentKey int = null,			-- ключ ведущего отдела (PrtDeps)	

@sMainMenEMail varchar (250) = null,	-- контактное лицо. e-mail
@sMainMenComment varchar (250) = null,	-- контактное лицо. комментарий
@nDupUserKey int = null,				-- менеджер покупателя (Dup_User)
@nBookingTypeKey int = null,			-- система бронирования (0-МТ, 1-MW) 		- МТ передает 0

@nPartnerDogovorKey int = null,			-- ключ договора партнера
@nCityDepartureKey int = null,			-- ключ города вылета
@nFilialKey int = null,					-- ключ филиала, к которому будет привязана путевка (если Null, то получит филиал ведущего менеджера)
@sOldDogovor varchar (10) = null		-- не использовать для переименования используйте ХП RenameDogovor
)
as
declare @nCount int
declare @sKeyTable varchar (11)
declare @sMode varchar (3)
declare @sText varchar (80)
declare @sValue varchar(254)
declare @dtCurrentDate DateTime
declare @sOperID varchar(255)
declare @nOperLeadDepartmentKey int
declare @sOperLat varchar(25)
declare @nDatePayed_Local int
declare @nDefaultProcent int
declare @nAgentDogovorGlobalType int
declare @nOperLeadFilialKey int

set @sDocument = RTRIM(LTRIM(@sDocument))
Select @nCount = count(*) from Dogovor where DG_Code=@sDogovor
if @nCount > 0
BEGIN
	set @nReturn = 1
	return 0
END

if @nKeyDogovor > 0 and @sOldDogovor != ''
BEGIN
	set @sMode = 'REN'
	Select @nFilialKey = DG_FilialKey from Dogovor where DG_Code = @sOldDogovor
END 
ELSE BEGIN
	set @sMode = 'BEG'
	IF (@nKeyDogovor <= 0 or @nKeyDogovor is null)
	BEGIN
		set @nKeyDogovor = 0
		set @sKeyTable = 'KEY_DOGOVOR'
		exec dbo.GETNEWKEY @sKeyTable, @nKeyDogovor output
	END

	IF @nKeyDogovor > 0
		set @nReturn = 0
	ELSE BEGIN
		set @nReturn = 1
		return 0
	END
END

if @nBookingTypeKey=1
BEGIN
	if (ISNULL(@nCityDepartureKey,0)=0) and (@nTour > 0)
		Select @nCityDepartureKey=TL_CTDepartureKey from TurList where TL_Key=@nTour
	if (ISNULL(@nPartnerDogovorKey,0)=0) and @nAgent>0
		Select top 1 @nPartnerDogovorKey=PD_Key from PrtDogs where PD_Key > 0 AND PD_PRKEY = @nAgent AND 
			(PD_DateBeg <= GetDate() OR PD_DateBeg is null) AND ((PD_DateEnd+1) >= GetDate() OR PD_DateEnd is null)
			ORDER BY PD_IsDefault DESC, PD_UpdDate DESC
END
set @nPartnerDogovorKey = ISNULL(@nPartnerDogovorKey,0)

If @sMode = 'BEG'
BEGIN
	Select @dtCurrentDate = GETDATE()
	SET @sRate = LTRIM(RTRIM(@sRate) )

	Exec dbo.GetUserKey @nOper output	
	Exec dbo.GetUserInfo @sOperID output, @nOper output, @sOper output, @nOperLeadFilialKey output, @nOperLeadDepartmentKey output, @sOperLat output
	If @nFilialKey is null or @nFilialKey = 0
		Set @nFilialKey = @nOperLeadFilialKey
	SET @sOper = LTRIM(RTRIM(@sOper) )
	SET @sMainMen = LTRIM(RTRIM(@sMainMen) )
	SET @sMainMenPhone = LTRIM(RTRIM(@sMainMenPhone) )
	SET @sMainMenAdress = LTRIM(RTRIM(@sMainMenAdress) )
	SET @sMainMenPasport = LTRIM(RTRIM(@sMainMenPasport) )
	SET @sMainMenEMail = LTRIM(RTRIM(@sMainMenEMail) )
	SET @sMainMenComment = LTRIM(RTRIM(@sMainMenComment) )

	If (@dPaymentDate is NULL or @nRazmerPPayment is NULL) and @nTour > 0
	BEGIN
		SELECT 	@nDatePayed_Local = TL_DatePayed, 
			@nDefaultProcent = TL_DfltPaymentPcnt
		FROM	TurList 
		WHERE	TL_Key=@nTour
	
		if @dPaymentDate is NULL
		begin
			if (GETDATE() + @nDatePayed_Local) >= @dTour
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), @dTour - 1, 102)
			end
			else
			begin
				Set @dPaymentDate = CONVERT(CHAR(10), GETDATE() + @nDatePayed_Local, 102)
			end
		end

		If @nRazmerPPayment is NULL
		BEGIN
			Set @nRazmerPPayment = @nDefaultProcent
			Set @nPercentPPayment = 1
		END
	END	

	SELECT	@nAgentDogovorGlobalType = PDT_Type FROM dbo.PrtDogs, dbo.PrtDogTypes WHERE PD_Key = @nPartnerDogovorKey and PD_DogType = PDT_ID

	Insert into dbo.tbl_Dogovor (DG_Key,DG_Code,DG_TurDate,DG_CnKey,DG_CtKey,
			DG_NMen,DG_Rate,DG_Price,DG_NDay,DG_PartnerKey,
			DG_PrtDogKey,DG_Operator,DG_Payed,DG_MainMen,DG_MainMenPhone,
			DG_MainMenAdress,DG_MainMenPasport,DG_Discount,DG_TypeCount,DG_DiscountSum,
			DG_CauseDisc,DG_TrKey,DG_PrintDogovor,DG_PrintVaucher,DG_Owner,
			DG_Creator,DG_CrDate,DG_sor_code,DG_ADVERTISE,DG_LOCKED,
			DG_VISADATE,DG_PAYMENTDATE,DG_PPAYMENTDATE,DG_RAZMERP,DG_PROCENT,
			DG_DOCUMENT,DG_FilialKey, DG_LeadDepartment, DG_MainMenComment, DG_MAINMENEMAIL, 
			DG_DupUserKey, DG_BTKey, DG_CTDepartureKey, DG_PDTType)
	Values (@nKeyDogovor, @sDogovor, @dTour, @nCountry, @nCity, 
			@nMen, @sRate, @nPrice, @nDays,	@nAgent, 
			@nPartnerDogovorKey, @sOper, @nPayed, @sMainMen, @sMainMenPhone, 
			@sMainMenAdress, @sMainMenPasport,@nDiscount, @nPcnt, @nDiscountSum, 
			@nCauseDiscount, @nTour, @nPrintDogovor, @nPrintVaucher, @nOwner, 
			@nOper,	@dtCurrentDate, @nStatus, @nAdvertiseKey, @nLocked, 
			@dVisaDate, @dPaymentDate, @dPPaymentDate, @nRazmerPPayment, @nPercentPPayment, 
			@sDocument, @nFilialKey, @nLeadDepartmentKey, @sMainMenComment, @sMainMenEMail, 
			@nDupUserKey, @nBookingTypeKey, @nCityDepartureKey, @nAgentDogovorGlobalType)


	-- Begin Donskov 17.03.2009

	-- находим национальную валюту
	declare @national_currency varchar(5)
	select top 1 @national_currency = RA_CODE from Rates where RA_National = 1

	declare @rc_course money
	declare @rc_courseStr char(30)


	if rtrim(ltrim(@national_currency)) <> rtrim(ltrim(@sRate))
	begin
		-- проверяем, есть ли курс валюты в базе
		set @rc_course = -1
		select top 1 @rc_courseStr = RC_COURSE from RealCourses
		where
		RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
		and convert(char(10), RC_DATEBEG, 102) = convert(char(10), getdate(), 102)
		set @rc_course = cast(isnull(@rc_courseStr, -1) as money)
	end
	else
	begin
		set @rc_course = 1
		set @rc_courseStr = '1'
	end

	declare @sHI_WHO varchar(25)
	exec dbo.CurrentUser @sHI_WHO output

	-- 1) пишем в хистори курс валюты
    -- 2) в созданную путёвку записываем стоимость в национальной валюте и скидку в национальной валюте
	--    (если присутствует соответствующий курс в базе)
	if @rc_course <> -1
	begin
		-- 1: пишем в хистори
		if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20) > 0
		begin
			delete from dbo.history where HI_DGCOD = @sDogovor and HI_MOD = 'INS' and HI_TYPE = 'DOGOVORCURRENCY' and HI_OAId = 20
		end

		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'INS', 'DOGOVORCURRENCY', 20)

		-- 2: в созданную путёвку записываем стоимость и скидку в национальной валюте 
		update dbo.tbl_Dogovor
		set
			DG_NATIONALCURRENCYPRICE = @rc_course * @nPrice,
			DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum
		where
			DG_Key = @nKeyDogovor
	end
	else
	begin
		insert into dbo.history
		(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
		values
		(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'INS', 'DOGOVORCURRENCYISNULL', 21)
	end
	-- End Donskov 17.03.2009

	--пишем ключ акции в историю
	if @nDiscountKey is not null and @nDiscountKey <> 0 and @nDiscountKey <> -1
	begin
		declare @da_key int
		set @da_key = null
		select @da_key = DS_DAKey from Discounts where DS_Key = @nDiscountKey
		if @da_key is not null
		begin
			if (select count(*) from dbo.history where HI_DGCOD = @sDogovor and HI_OAId = 25) > 0
			begin
				delete from dbo.history where HI_DGCOD = @sDogovor and HI_OAId = 25
			end

			insert into dbo.history
			(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId)
			values
			(@sDogovor, @sHI_WHO, cast(@da_key as varchar), 'Ключ акции', 'INS', 'DA_KEY', 25)
		end
	end


	if @@error = 0
		set @nReturn = 0
	else
		set @nReturn = 2

	set @sText = N'Создание путевки'
	--EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''

	Update Partners set PR_DateLastContact = GETDATE() WHERE PR_Key = @nAgent
	Select @sValue = SS_ParmValue from dbo.SystemSettings where SS_ParmName = 'SYSUseTimeLimit'
	if @sValue = '1'
		exec dbo.CreatePPaymentDate @sDogovor, @dTour, @dtCurrentDate

	exec InsMasterEvent 1, @nKeyDogovor
END
Else if @sMode = 'REN'
BEGIN
	/*
	set @sText = N'Переименование путевки с'+@sOldDogovor+' на '+@sDogovor
	set @sMode = 'REN'
	EXEC dbo.InsertHistory @sDogovor, '', @sMode, @sText, ''
	*/
	Update Dogovorlist set DL_DgCod = @sDogovor where DL_Dgcod = @sOldDogovor
	Update tbl_Turist set TU_DgCod = @sDogovor where TU_Dgcod = @sOldDogovor
	Update History set HI_DgCod = @sDogovor where HI_Dgcod = @sOldDogovor
	Update PrintDocuments set DC_DgCod = @sDogovor where DC_DgCod = @sOldDogovor
	Update SendMail set SM_DgCode = @sDogovor where SM_DgCode = @sOldDogovor
	Update BillsDogovor set BD_DgCod = @sDogovor where BD_DgCod = @sOldDogovor
	Update Accounts set AC_DgCod=@sDogovor where AC_DgCod=@sOldDogovor
	
	if exists(select st_version from setting where st_version like '5.2%')
	begin
		Update Orders set OR_Dogovor = @sDogovor where OR_Dogovor = @sOldDogovor
		Update OrderHistory set OH_DgCod = @sDogovor where OH_DgCod = @sOldDogovor
	end

	Update Dogovor set DG_Code = @sDogovor where DG_Code = @sOldDogovor
	if @@error = 0
		set @nReturn = 0
END
return 0
GO

GRANT EXECUTE ON dbo.InsDogovor TO PUBLIC 
GO

--mwCheckQuotesEx.sql
--9.2
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotesEx]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[mwCheckQuotesEx]
GO

CREATE FUNCTION [dbo].[mwCheckQuotesEx]
(
	@svkey int, 
	@code int, 
	@subcode1 int,
	@subcode2 int, 
	@agentKey int, 
	@partnerKey int, 
	@date datetime,
	@day int,
	@days int,
	@requestOnRelease smallint, 
	@noPlacesResult int, 
	@checkAgentQuotes smallint, 
	@checkCommonQuotes smallint,
	@checkNoLongQuotes smallint,
	@findFlight smallint,
	@cityFrom int,
	@cityTo int,
	@flightpkkey int,
	@tourDuration int,
	@expiredReleaseResult int)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000))
-- date 2009-03-26 15:40
begin

--	insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
--		qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
--	values(0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, '')
--		return 

	declare @ALLDAYS_CHECK int
	set @ALLDAYS_CHECK = -777
--	declare @STOP_SALE int
--	set @STOP_SALE = 777

	-- для квот на продолжительность
	declare @long int
	if(@svkey = 1 or @svkey = 2 or @svkey = 4 or @checkNoLongQuotes = @ALLDAYS_CHECK)
		set @long = @tourDuration
	else
		set @long = @days

	if(@day <= 0 or @day is null)
		set @day = 1
	if(@days <= 0 or @days is null)
		set @days = 1


	declare @dateFrom datetime
	declare @dateTo datetime
	set @dateFrom = dateadd(day, @day - 1, @date)
	set @dateTo = dateadd(day, @day + @days - 2, @date)

	declare @tmpSubcode1 int
	if(@svkey = 3 and @subcode1 > 0 and @subcode2 <= 0) -- hotelRoomKey --> subcode1, subcode2
	begin
		select @tmpSubcode1 = hr_rmkey, @subcode2 = hr_rckey from hotelrooms with(nolock) where hr_key = @subcode1
		set @subcode1 = @tmpSubcode1
	end
	else if(@svkey <> 3)
		set @subcode2 = 0
				
	
	declare @result int
	declare @currentDate datetime
	select @currentDate = currentDate from dbo.mwCurrentDate


	declare @qtSvkey int, @qtCode int, @qtSubcode1 int, @qtSubcode2 int, @qtAgent int,
		@qtPrkey int, @qtNotcheckin int, @qtRelease int, @qtPlaces int, @qtDate datetime,
		@qtByroom int, @qtType int, @qtLong int, @qtPlacesAll int, @qtStop smallint

	declare	@svkeyRes int, @codeRes int, @subcode1Res int, 
		@subcode2Res int, @agentRes int, @prkeyRes int,
		@bycheckinRes int, @byroomRes int, @placesRes int,
		@allPlacesRes int, @typeRes int, @longRes int, @releaseRes int, @additional varchar(2000), @stopSale smallint

	set @svkeyRes = 0
	set @codeRes = 0
	set @subcode1Res = 0
	set @subcode2Res = 0
	set @agentRes = 0
	set @prkeyRes = 0
	set @bycheckinRes = 0
	set @byroomRes = 0
	set @typeRes = 0
	set @allPlacesRes = 0
	set @longRes = 0
	set @releaseRes = -1
	set @additional = ''

	declare @tmpQuotes table(
		qt_svkey int,
		qt_code int,
		qt_subcode1 int,
		qt_subcode2 int,
		qt_agent int,
		qt_prkey int,
		qt_bycheckin int,
		qt_release int,
		qt_places int,
		qt_date datetime,
		qt_byroom int,
		qt_type int,
		qt_long int,
		qt_placesAll int,
		qt_stop smallint
	)

	declare @tmpDate datetime
	declare @dayOfWeek int

	if(@svkey <> 1 or @findFlight <= 0)
	begin
		if(@svkey = 1)
		begin


			set @dayOfWeek = datepart(dw, @dateFrom) - 1
			if(@dayOfWeek = 0)
				set @dayOfWeek = 7

				if (@flightpkkey < 0)
				begin
					 if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
					where ch_key = @code and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
						and @dateFrom between as_dateFrom and as_dateto)
					begin
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
						values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
							return 
					end
				end
				else
				begin
			if (@flightpkkey >= 0)
			begin
			 if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
					inner join tbl_costs on (cs_svkey = 1 and cs_code = ch_key and @dateFrom between cs_date and cs_dateend
						and cs_subcode1=@subcode1 and cs_pkkey = @flightpkkey)
					where ch_key = @code and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
						and @dateFrom between as_dateFrom and as_dateto)
				begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
						return 
				end
				end
			end
		end

		-- check stopsale
		if exists(select top 1 ss_id 
				from stopsales with(nolock) 
					inner join quotaobjects with(nolock) on ss_qoid = qo_id
				where qo_svkey = @svkey and qo_code = @code and isnull(qo_subcode1, 0) in (0, @subcode1)
					and isnull(qo_subcode2, 0) in (0, @subcode2) and ss_date between @dateFrom and @dateTo
					and ss_qdid is null and isnull(ss_isdeleted, 0) = 0)
		begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
						return 
		end
					
		--

		insert into @tmpQuotes
		select 
			qo_svkey,
			qo_code,
			isnull(qo_subcode1, 0) as qo_subcode1,
			isnull(qo_subcode2, 0) as qo_subcode2,
			isnull(qp_agentkey, 0) as qp_agentkey,
			isnull(qt_prkey, 0) as qt_prkey,
			isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
			qd_release, 
			isnull(qp_places, 0) - isnull(qp_busy, 0),
			qd_date,
			qt_byroom,
			qd_type,
			isnull(ql_duration, 0) as ql_duration,
			isnull(qp_places, 0),
			(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop
		from quotas q with(nolock) inner join 
			quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
			left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
			right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
			left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
		where
			qo_svkey = @svkey
			and qo_code = @code
			and isnull(qo_subcode1, 0) in (0, @subcode1)
			and (@svkey = 1 or isnull(qo_subcode2, 0) in (0, @subcode2))
			and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
				(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
				(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
			and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
			and ((@days = 1 and qd_date = @dateFrom) or (@days > 1 and qd_date between @dateFrom and @dateTo))
			and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
		order by
			qd_date, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC

		if(@tourDuration < 0) -- надо проверить все возможные квоты по дням на все возможные продолжительности (используется при проверке наличия мест в отеле и на перелете)
		begin
			set @checkNoLongQuotes = @ALLDAYS_CHECK

			declare @durations table(
				duration int
			)

			insert into @durations select distinct qt_long from @tmpQuotes order by qt_long

			declare @rowCount int
			set @rowCount = @@rowCount

			if(@rowCount > 1)
			begin
				declare @quotaDuration int
				declare durationCur cursor fast_forward read_only for
					select duration from @durations
	
				open durationCur
	
				fetch next from durationCur into @quotaDuration
				while(@@fetch_status = 0)
				begin
					if(len(@additional) > 0)
						set @additional = @additional + '|'
	
					select 
						@additional = @additional + qt_additional
					from dbo.mwCheckQuotesEx(@svkey, @code, @subcode1, @subcode2, @agentKey, @partnerKey, 
						@date, @day, @days, @requestOnRelease, @noPlacesResult, @checkAgentQuotes, 
						@checkCommonQuotes, @ALLDAYS_CHECK, @findFlight, @cityFrom,	@cityTo, @flightpkkey,
						@quotaDuration,	@expiredReleaseResult)
	
					fetch next from durationCur into @quotaDuration
				end
	
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
			
				close durationCur
				deallocate durationCur
	
				return
			end
			else if(@rowCount = 1)
				select @long = duration from @durations
			else
				set @long = 0
		end

		declare qCur cursor fast_forward read_only for 
		select
			qt_svkey,
			qt_code,
			qt_subcode1,
			qt_subcode2,
			qt_agent,
			qt_prkey,
			qt_bycheckin,
			qt_release,
			qt_places,
			qt_date,
			qt_byroom,
			qt_type,
			qt_long,
			qt_placesAll,
			qt_stop
		from @tmpQuotes

		open qCur

		fetch next from qCur 
			into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
				@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, 
				@qtByroom, @qtType, @qtLong, @qtPlacesAll, @qtStop

		if(@@fetch_status = 0)
		begin
			set @result = 1000000

			declare @prevDate datetime, @dateRes int, @dateAllPlaces int, 
				@wasLongQuota smallint, @wasAgentQuota smallint, @checkAfterWasLong smallint, @checkAfterWasAgent smallint

			set @prevDate = @dateFrom
			if(@qtDate = @dateFrom)
				set @dateRes = 0
			else
				set @dateRes = -1
			set @dateAllPlaces = 0
			set @stopSale = 1
			set @wasLongQuota = 0
			set @wasAgentQuota = 0
			set @checkAfterWasLong = 0
			set @checkAfterWasAgent = 0	

			declare @quoteOnFirstDayExist smallint -- признак существования квоты на ПЕРВЫЙ день
				set @quoteOnFirstDayExist = 0

			while(@@fetch_status = 0)
			begin

				-- Если обрабатываемая квота - квота на первый день, то выставляем индикатор в true
				if (@qtDate = @dateFrom and @qtNotcheckin = 0)
					set @quoteOnFirstDayExist = 1

				-- Если обрабатываемая квота - квота НЕ на первый день и в первый день ее не обнаруживалось, то возвращаем ЗАПРОС
				if (@qtDate != @dateFrom and @quoteOnFirstDayExist = 0)
				begin
					-- Если квота в первый день не заведена, то возвращаем ЗАПРОС
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
					values(0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0)
					return
				end

				if(@qtNotcheckin <= 0 or @qtDate <> @dateFrom or @checkNoLongQuotes = @ALLDAYS_CHECK)
				begin
					if(@prevDate != @qtDate)
					begin

						if(@dateRes = 0 /*and @stopSale <= 0*/ and ((@wasLongQuota > 0 and @checkAfterWasLong <= 0 and @checkNoLongQuotes > 0) or (@wasAgentQuota > 0 and @checkAfterWasAgent <= 0 and @checkCommonQuotes > 0)))
							set @dateRes = -1
				
						if(@checkNoLongQuotes = @ALLDAYS_CHECK)
						begin
							if(len(@additional) > 0)
								set @additional = @additional + ','

							if(@dateRes = 0 and @stopSale <= 0)
								set @dateRes = @noPlacesResult

							set @additional = @additional + ltrim(str(@dateRes)) + ':' + ltrim(str(@dateAllPlaces))
						end
						else
						if(@dateRes <= 0 or @dateRes < @result)
						begin
							set @result = @dateRes
							set @allPlacesRes = @dateAllPlaces -- total places in quota

							if(@result = 0) -- no places
							begin
								close qCur
								deallocate qCur

								insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
								values(0, 0, 0, 0, 0, 0, 0, 0, case when @stopSale > 0 then 0 else @noPlacesResult end, 0, 0, 0)
								return
							end
						end
						else
						begin
							if(@wasLongQuota > 0)
								set @checkAfterWasLong = 1

							if(@wasAgentQuota > 0)
								set @checkAfterWasAgent = 1
						end
		
						if(datediff(day, @prevDate, @qtDate) > 1) -- there are days for wich quota doesn't exist
						begin
							set @result = -1 -- request
							if(@checkNoLongQuotes = @ALLDAYS_CHECK)
							begin
								set @tmpDate = dateadd(day, 1, @prevDate)
								while(@tmpDate < @qtDate)
								begin
									if(len(@additional) > 0)
										set @additional = @additional + ','

									set @additional = @additional + '-1:0'
									set @tmpDate = dateadd(day, 1, @tmpDate)
								end
							end
						end

						if(@bycheckinRes > 0 and @checkNoLongQuotes <> @ALLDAYS_CHECK)
							break
							
						set @prevDate = @qtDate
						set @dateRes = 0
						set @dateAllPlaces = 0
						set @stopSale = 1
						set @wasLongQuota = 0
						set @wasAgentQuota = 0
						set @checkAfterWasLong = 0
						set @checkAfterWasAgent = 0
					end

					if(@dateRes = 0 /* and (@stopSale <= 0 or ((@prevSubCode1 = @qtSubcode1 and @prevSubCode2 = @qtSubcode2) or @prevQtType <> @qtType)) */ and isnull(@qtStop, 0) = 0 and not(@agentKey > 0 and @qtAgent = 0 and @wasAgentQuota > 0 and (@checkCommonQuotes <= 0))
								and not(@long > 0 and @qtLong = 0 and @wasLongQuota > 0 and (@checkNoLongQuotes <= 0)))
					begin
						if(@qtRelease is null or datediff(day, @currentDate, @qtDate) > isnull(@qtRelease, 0))
						begin
							if((@requestOnRelease <= 0 or @qtRelease is null or @qtRelease > 0) and
								@qtPlaces > 0 and not(@stopSale > 0 and @wasAgentQuota > 0 /*request for agents if they have agent quota and this quota is stopped (they try to reserve general quota by low cost)*/))
							begin
								set @dateRes = @qtPlaces
								set @dateAllPlaces = @qtPlacesAll

								if (@qtPlaces < @result) -- result перезапишется
								begin
									set @svkeyRes = @qtSvkey
									set @codeRes = @qtCode
									set @subcode1Res = @qtSubcode1
									set @subcode2Res = @qtSubcode2
									set @agentRes = @qtAgent
									set @prkeyRes = @qtPrkey										
									set @byroomRes = @qtByroom
									set @typeRes = @qtType
									set @longRes = @qtLong
									set @releaseRes = @qtRelease
								end
							end
							else if(@qtPlaces > 0)
								set @dateRes = -1
						end
						else 
						begin
							if(@qtPlaces > 0)
								set @dateRes = @expiredReleaseResult -- no or request (0 or -1)
							else
							begin
								set @dateRes = 0 -- stop sale
							end
						end
						set @bycheckinRes = 0

						set @stopSale = 0
					end
					else if(@dateRes = 0 and @checkNoLongQuotes <> @ALLDAYS_CHECK)
					begin
						close qCur
						deallocate qCur
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
						values(0, 0, 0, 0, 0, 0, 0, 0, case when @stopSale > 0 then 0 else @noPlacesResult end, 0, 0, 0)
						return 
					end

					if(@wasAgentQuota <= 0 and @qtAgent > 0) -- признак того, что агентская квота заведена, но закончилась
						set @wasAgentQuota = 1
					if(@wasLongQuota <= 0 and @qtLong > 0)  -- признак того, что квота на продолжительность заведена, но закончилась
						set @wasLongQuota = 1
				end

				
				fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
					@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
					@qtLong, @qtPlacesAll, @qtStop
			end

			if(@dateRes = 0 /*and @stopSale <= 0*/ and ((@wasLongQuota > 0 and @checkAfterWasLong <= 0 and @checkNoLongQuotes > 0) or (@wasAgentQuota > 0 and @checkAfterWasAgent <= 0 and @checkCommonQuotes > 0)))
				set @dateRes = -1

			if(@checkNoLongQuotes = @ALLDAYS_CHECK)
			begin
				if(len(@additional) > 0)
					set @additional = @additional + ','

				if(@dateRes = 0 and @stopSale <= 0)
					set @dateRes = @noPlacesResult
				
				set @additional = @additional + ltrim(str(@dateRes)) + ':' + ltrim(str(@dateAllPlaces))
			end
			else
			if(@dateRes <= 0 or @dateRes < @result)
			begin
				set @result = @dateRes
				set @allPlacesRes = @dateAllPlaces -- total places in quota

				if(@result = 0) -- iano iao
					set @result = case when @stopSale > 0 then 0 else @noPlacesResult end
			end

			if(@qtDate <> @dateTo and ((@result > 0 and @bycheckinRes <= 0) or @checkNoLongQuotes = @ALLDAYS_CHECK)) -- ia iaio ec aao aeaiaciia eaioa ia caaaaaia
			begin
				set @result = -1 -- cai?in
				if(@checkNoLongQuotes = @ALLDAYS_CHECK)
				begin
					set @tmpDate = dateadd(day, 1, @qtDate)
					while(@tmpDate <= @dateTo)
					begin
						if(len(@additional) > 0)
							set @additional = @additional + ','

						set @additional = @additional + '-1:0'
						set @tmpDate = dateadd(day, 1, @tmpDate)
					end
				end
			end
		end
		else
		begin
			set @result = -1
			if(@checkNoLongQuotes = @ALLDAYS_CHECK)
			begin
				set @tmpDate = @dateFrom
				while(@tmpDate <= @dateTo)
				begin
					if(len(@additional) > 0)
						set @additional = @additional + ','

					set @additional = @additional + '-1:0'
					set @tmpDate = dateadd(day, 1, @tmpDate)								
				end
			end
		end
	end
	else
	begin
		set @partnerKey = -1 -- подбираем перелеты от разных партнеров
		if(isnull(@cityFrom, 0) <= 0 or isnull(@cityTo, 0) <= 0)
			select @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @code
			
		set @dayOfWeek = datepart(dw, @dateFrom) - 1
		if(@dayOfWeek = 0)
			set @dayOfWeek = 7

		if @flightpkkey >= 0
		begin
			if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
				inner join tbl_costs with(nolock) on (cs_svkey = 1 and cs_code = ch_key and @dateFrom between cs_date and cs_dateend
					and cs_subcode1=@subcode1 and cs_pkkey = @flightpkkey)
				where ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
					and @dateFrom between as_dateFrom and as_dateto)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
					return 
			end

			insert into @tmpQuotes
			select distinct
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				isnull(qp_agentkey, 0) as qp_agentkey,
				isnull(qt_prkey, 0) as qt_prkey,
				isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
				qd_release as qt_release, 
				isnull(qp_places, 0) - isnull(qp_busy, 0),
				qd_date,
				qt_byroom,
				qd_type,
				isnull(ql_duration, 0) as ql_duration,
				isnull(qp_places, 0),
				(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop
			from quotas q with(nolock) inner join 
				quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
				left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
				right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
				left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
				 inner join charter on (qo_svkey = @svkey and ch_key = qo_code) inner join airseason on as_chkey = ch_key
			where
				exists (select top 1 cs_id from costs with(nolock)
					where cs_svkey=@svkey and cs_code=qo_code and cs_subcode1=@subcode1 
						and @dateFrom between cs_date and cs_dateend and cs_pkkey = @flightpkkey)
				and qo_svkey = @svkey
				and isnull(qo_subcode1, 0) in (0, @subcode1)
			--	and isnull(qo_subcode2, 0) in (0, @subcode2)
				and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
					(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
					(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
				and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
				and qd_date = @dateFrom
				and ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
				and @dateFrom between as_dateFrom and as_dateto
				and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
			order by
				qd_date, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
		end
		else
		begin
			if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
				where ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
					and @dateFrom between as_dateFrom and as_dateto)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
					return 
			end

			insert into @tmpQuotes
			select distinct
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				isnull(qp_agentkey, 0) as qp_agentkey,
				isnull(qt_prkey, 0) as qt_prkey,
				isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
				qd_release, 
				isnull(qp_places, 0) - isnull(qp_busy, 0),
				qd_date,
				qt_byroom,
				qd_type,
				isnull(ql_duration, 0) as ql_duration,
				isnull(qp_places, 0),
				(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop
			from quotas q with(nolock) inner join 
				quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
				left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
				right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
				left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
				inner join charter with(nolock) on (qo_svkey = @svkey and ch_key = qo_code) inner join airseason with(nolock) on as_chkey = ch_key
			where
				qo_svkey = @svkey
				and isnull(qo_subcode1, 0) in (0, @subcode1)
			--	and isnull(qo_subcode2, 0) in (0, @subcode2)
				and 
				(	(@agentKey != -666
						and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
						(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
						(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
					)
					or (@agentKey = -666 and qp_agentkey>0)
				)
				and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
				and qd_date = @dateFrom
				and ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo and as_week like ('%' + cast(@dayOfWeek as varchar) + '%')
				and @dateFrom between as_dateFrom and as_dateto
				and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
			order by
				qd_date, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
		end

		update @tmpQuotes 
			set qt_stop = 1 
		from stopsales with(nolock) inner join quotaobjects qo with(nolock) on (ss_qoid = qo_id and ss_date = @dateFrom)
				where qt_svkey = qo.qo_svkey and qt_code = qo.qo_code 
					and isnull(qt_subcode1, 0) in (0, qo.qo_subcode1)
					and isnull(qt_subcode2, 0) in (0, qo.qo_subcode2)					
					and ss_qdid is null and isnull(ss_isdeleted, 0) = 0

		declare qCur cursor fast_forward read_only for 
		select
			qt_svkey,
			qt_code,
			qt_subcode1,
			qt_subcode2,
			qt_agent,
			qt_prkey,
			qt_bycheckin,
			qt_release,
			qt_places,
			qt_date,
			qt_byroom,
			qt_type,
			qt_long,
			qt_placesAll,
			qt_stop
		from @tmpQuotes

		open qCur

		fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
			@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
			@qtLong, @qtPlacesAll, @qtStop

		declare @prevCode int
		declare @wasAgent int
		declare @wasLong int		
		if(@@fetch_status = 0)
		begin
			set @result = 0
			set @stopSale = 1
			set @wasAgent = 0
			set @wasLong = 0
			while(@@fetch_status = 0)
			begin
				if((@wasLong > 0 and @qtLong = 0 and (@result <> 0 or @checkNoLongQuotes <= 0)) or (@wasAgent > 0 and @qtAgent = 0 and (@result <> 0 or @checkCommonQuotes <= 0)))
					break

				if(isnull(@qtStop, 0) = 0)
					set @stopSale = 0

				if(@qtLong > 0)
					set @wasLong = 1

				if(@qtAgent > 0)
					set @wasAgent = 1

				if(@qtPlaces > 0 and @qtPlaces > @result and isnull(@qtStop, 0) = 0)
				begin
					if(@qtRelease is null or datediff(day, @currentDate, @qtDate) > isnull(@qtRelease, 0))
					begin
							if(@requestOnRelease <= 0 or @qtRelease is null or @qtRelease > 0)
							begin
								set @result = @qtPlaces

								set @svkeyRes = @qtSvkey
								set @codeRes = @qtCode
								set @subcode1Res = @qtSubcode1
								set @subcode2Res = @qtSubcode2
								set @agentRes = @qtAgent
								set @prkeyRes = @qtPrkey
								set @bycheckinRes = 0
								set @byroomRes = @qtByroom
								set @typeRes = @qtType
								set @longRes = @qtLong
								set @allPlacesRes = @qtPlacesAll
								set @releaseRes = @qtRelease
							end
							else if(@result = 0)
								set @result = -1;
					end
					else
					begin if(@result = 0)
						set @result = @expiredReleaseResult
					end
				end
	
				fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
					@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
					@qtLong, @qtPlacesAll, @qtStop
	
			end		

			if(@result = 0)
			begin
				if(@stopSale <= 0)
					set @result = @noPlacesResult
				else
					set @result = 0
			end
		end
		else
			set @result = -1
	end

	close qCur
	deallocate qCur

	if(@checkNoLongQuotes <> @ALLDAYS_CHECK)
	begin
		if (@result > 0)
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
			values(@svkeyRes, @codeRes, @subcode1Res, @subcode2Res, @agentRes, 
				@prkeyRes, @bycheckinRes, @byroomRes, @result, @allPlacesRes, @typeRes, @longRes)
		else
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
			values(0, 0, 0, 0, 0, 0, 0, 0, @result, 0, 0, 0)
	end
	else
	begin
			set @additional = ltrim(str(@long)) + '=' + @additional
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
	end
	
	return

--	return (@result)
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotesEx] TO PUBLIC
GO

--091013(Groups).sql
--7.2 - 9.2
if object_id('dbo.ObjectTypes', 'u') is null
begin
	create table dbo.ObjectTypes(
		ot_id int primary key,
		ot_code nvarchar(250),
		ot_name nvarchar(250),
		ot_namelat nvarchar(250),
		ot_comment nvarchar(500)
	)
end
go

if (not exists(select 1 from dbo.ObjectTypes where ot_id = 1))
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(1, 'AddDescriptions1', 'Дополнительное описание услуги 1')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 2))
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(2, 'AddDescriptions2', 'Дополнительное описание услуги 2')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 3))
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(3, 'Aircrafts', 'Самолеты')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 4))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(4, 'Airlines', 'Авиакомпании')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 5))
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(5, 'Airports', 'Аэропорты')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 6))
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(6, 'AirSeasons', 'Расписание рейсов')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 7))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(7, 'Cities', 'Города')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 8))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(8, 'Charters', 'Авиарейсы')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 9))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(9, 'Countries', 'Страны')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 10))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(10, 'Excursions', 'Экскурсии')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 11))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(11, 'Histories', 'История')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 12))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(12, 'Hotels', 'Отели')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 13))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(13, 'HotelRooms', 'Номера в отеле')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 14))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(14, 'AccmdMenTypes', 'Типы размещения в отеле')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 15))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(15, 'RoomsCategories', 'Категории проживания в отеле')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 16))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(16, 'Rooms', 'Типы номеров в отеле')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 17))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(17, 'Partners', 'Партнеры')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 18))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(18, 'Pansions', 'Типы питания')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 19))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(19, 'Rates', 'Валюты')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 20))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(20, 'Services', 'Классы услуг')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 21))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(21, 'ServiceLists', 'Услуги')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 22))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(22, 'AirServices', 'Тарифы авиаперелетов')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 23))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(23, 'Transferts', 'Трансферы')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 24))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(24, 'Transports', 'Транспорт')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 25))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(25, 'Resorts', 'Курорты')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 26))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(26, 'DiscountClients', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 27))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(27, 'Clients', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 28))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(28, 'Cards', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 29))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(29, 'Advertisements', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 30))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(30, 'ExchangeRates', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 31))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(31, 'Orders', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 32))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(32, 'PaymentKinds', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 33))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(33, 'PaymentTypes', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 34))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(34, 'Descriptions', 'Описания объектов')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 35))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(35, 'DescTypes', 'Типы описаний объектов')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 36))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(36, 'PriceTours', 'Рассчитанные прайсы')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 37))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(37, 'TurLists', 'Туры')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 38))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(38, 'CostsInsertNumber', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 39))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(39, 'PRConsolidation', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 40))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(40, 'IL_IncPartners', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 41))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(41, 'PrtDeps', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 42))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(42, 'PrtWarns', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 43))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(43, 'DupUsers', 'Представители')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 44))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(44, 'OrderStatuses', 'Статусы путевок')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 45))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(45, 'TipTurs', 'Типы туров')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 46))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(46, 'Ships', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 47))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(47, 'Cabines', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 48))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(48, 'Controls', 'Статусы услуг')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 49))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(49, 'Dogovors', 'Путевки')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 50))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(50, 'InsRates', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 51))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(51, 'InsRegions', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 52))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(52, 'InsVariants', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 53))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(53, 'InsRestrictedRegionCases', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 54))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(54, 'InsAgents', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 55))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(55, 'Users', 'Пользователи Мастер-Тур')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 56))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(56, 'KindOfPays', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 57))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(57, 'PartnerDepartments', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 58))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(58, 'Accounts', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 59))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(59, 'ObjectAliases', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 60))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(60, 'DogovorLists', 'Услуги в путевке')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 61))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(61, 'Turists', 'Туристы')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 62))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(62, 'VisaTuristServices', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 63))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(63, 'Payments', 'Платежи')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 64))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(64, 'PaymentDetails', 'Детализация платежей')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 65))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(65, 'TuristServices', 'Привязки услуг к туристам')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 66))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(66, 'Messages', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 67))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(67, 'CategoriesOfHotels', 'Категории отелей')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 68))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(68, 'VisaServiceToDocs', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 69))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(69, 'ServiceDefinitions', '')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 70))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(70, 'TurService', 'Услуги в туре')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 71))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(71, 'ServiceByDate', 'Привязка услуги к квоте')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 72))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(72, 'RealCourses', 'Реальные курсы')
if (not exists(select 1 from dbo.ObjectTypes where ot_id = 73))	
	insert into dbo.ObjectTypes(ot_id, ot_code, ot_name) values(73, 'Courses', 'Планируемые курсы')
go

grant select on dbo.ObjectTypes to public
go

if object_id('dbo.Groups', 'u') is null
begin
	create table dbo.Groups(
		gr_id int identity primary key,
		gr_name nvarchar(250),
		gr_comment nvarchar(500),
		gr_objtype int foreign key references dbo.ObjectTypes
	)
end
go

grant select, insert, update, delete on dbo.Groups to public
go


if object_id('dbo.GroupMembers', 'u') is null
begin
	create table dbo.GroupMembers(
		grm_id int identity primary key,
		grm_parent_group int foreign key references dbo.Groups on delete cascade,
		grm_objid int,
		grm_child_group int foreign key references dbo.Groups,
		grm_comment nvarchar(500)
	)
end
go

grant select, insert, update, delete on dbo.GroupMembers to public
go

if object_id('dbo.ObjectGroupLinks', 'u') is null
begin
	create table dbo.ObjectGroupLinks(
		ogl_id int identity primary key,
		ogl_objtype int foreign key references dbo.ObjectTypes,
		ogl_objid int,
		ogl_group int foreign key references dbo.Groups on delete cascade,
		ogl_linked_group int foreign key references dbo.Groups,
		ogl_linked_objtype int foreign key references dbo.ObjectTypes,
		ogl_linked_objid int
	)
end
go

grant select, insert, update, delete on dbo.ObjectGroupLinks to public
go

--090210(Update_ObjectAliases).sql
--7.2 - 9.2
IF NOT EXISTS (SELECT 1 FROM OBJECTALIASES WHERE OA_ID = 16)
	INSERT INTO OBJECTALIASES (OA_ID, OA_ALIAS, OA_NAME, OA_TABLEID) VALUES (16, 'FLIGHTCHANGE', 'Уведомление об изменении авиарейса', 0)

--090219(InsertObjectAliases).sql
--7.2 - 9.2
IF NOT EXISTS (SELECT 1 FROM OBJECTALIASES WHERE OA_ID = 18)
	INSERT INTO OBJECTALIASES (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
    VALUES (18, 'UserList', 'Пользователи', NULL, 55)

IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 18001))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (18001, 'US_DepartmentKey', 'Ключ отдела', NULL, 55)


IF(NOT EXISTS(SELECT 1 FROM ObjectAliases WHERE OA_Id = 1134))
	INSERT INTO ObjectAliases (OA_Id, OA_Alias, OA_Name, OA_NameLat, OA_TABLEID) 
	VALUES (1134, 'US_DepartmentKey', 'Ключ отдела создателя путевки', NULL, 55)

--mwCreatePriceHotelIndex.sql
--7.2 - 9.2
if exists(select * from sysobjects where name like 'mwCreatePriceHotelIndex')
	drop procedure [dbo].[mwCreatePriceHotelIndex]

GO

create procedure [dbo].[mwCreatePriceHotelIndex]
as
begin

if exists(select * from sysindexes where name like 'x_complex_rm' and id=object_id('dbo.mwPriceHotels'))
	drop index dbo.mwPriceHotels.x_complex_rm

declare @sql varchar(1500)

if (@@version like '%SQL Server 2005%')
	set @sql = '
CREATE NONCLUSTERED INDEX [x_complex_rm] ON [dbo].[mwPriceHotels] 
(
	[sd_tourkey] ASC,
	[sd_mainhdkey] ASC
)
include (sd_rmkey)
WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 90) ON [PRIMARY]
'
else
	set @sql = '
	CREATE NONCLUSTERED INDEX [x_complex_rm] ON [dbo].[mwPriceHotels] 
(
	[sd_tourkey] ASC,
	[sd_mainhdkey] ASC
)
'

exec(@sql)



end
go

grant exec on dbo.mwCreatePriceHotelIndex to public
go

--091019(AlterColumns_tbl_Turist).sql
--7.2 - 9.2 
IF(60 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_BIRTHCITY')) 
ALTER TABLE tbl_Turist ALTER COLUMN TU_BIRTHCITY VARCHAR(60) COLLATE Cyrillic_General_CS_AS
GO

IF(60 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_POSTCITY')) 
ALTER TABLE tbl_Turist ALTER COLUMN TU_POSTCITY VARCHAR(60) COLLATE Cyrillic_General_CS_AS
GO

IF(10 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='tbl_Turist' and COLUMN_NAME='TU_POSTBILD')) 
ALTER TABLE tbl_Turist ALTER COLUMN TU_POSTBILD VARCHAR(10) COLLATE Cyrillic_General_CS_AS
GO

EXEC sp_refreshviewforall 'Turist'
GO

--091019(AlterColumns_TP_Tours).sql
--7.2 - 9.2
IF(256 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='TP_Tours' and COLUMN_NAME='TO_HotelNights')) 
ALTER TABLE TP_Tours ALTER COLUMN TO_HotelNights NVARCHAR(256)
GO

--sp_FillMasterWebSearchFields.sql
--7.2 - 9.2
if exists(select id from sysobjects where xtype='p' and name='FillMasterWebSearchFields')
	drop proc dbo.FillMasterWebSearchFields
go

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @add smallint = null, @forceEnable smallint = null)
-- if @forceEnable > 0 (by default) then make call mwEnablePriceTour @tokey, 1 at the end of the procedure
as
begin
	set @forceEnable = isnull(@forceEnable, 1)

	declare @replicationSetting nvarchar(254)
	select @replicationSetting = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSUseWebReplication'
	if IsNull(@replicationSetting, '0') = '1'
	begin
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100 where TO_Key = @tokey
		return
	end

	if @tokey is null
	begin
		print 'Procedure does not support NULL param'
		return
	end

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200),
		thd_tourname nvarchar(200),
		thd_hdname nvarchar(200),
		thd_ctname nvarchar(200),
		thd_rsname nvarchar(200),
		thd_ctfromname nvarchar(200),
		thd_cttoname nvarchar(200),
		thd_tourtypename nvarchar(200),
		thd_pncode nvarchar(50),
		thd_hdorder int,
		thd_hotelkeys nvarchar(256),
		thd_pansionkeys nvarchar(256),
		thd_hotelnights nvarchar(256),
		thd_tourvalid datetime
	)

	create table #tempPriceTable(
		[pt_mainplaces] [int] NULL ,
		[pt_addplaces] [int] NULL ,
		[pt_main] [smallint] NULL ,
		[pt_tourvalid] [datetime] NULL ,
		[pt_tourcreated] [datetime] NULL ,
		[pt_tourdate] [datetime] NOT NULL,
		[pt_days] [int] NULL ,
		[pt_nights] [int] NULL ,
		[pt_cnkey] [int] NULL ,
		[pt_ctkeyfrom] [int] NULL ,
		[pt_apkeyfrom] [int] NULL ,
		[pt_ctkeyto] [int] NULL ,
		[pt_apkeyto] [int] NULL ,
		[pt_ctkeybackfrom] [int] NULL,
		[pt_ctkeybackto] [int] NULL,
		[pt_tourkey] [int] NOT NULL,
		[pt_tourtype] [int] NULL ,
		[pt_tlkey] [int] NULL ,
		[pt_pricelistkey] [int] NULL ,
		[pt_pricekey] [int] NOT NULL,
		[pt_price] [float] NULL ,
		[pt_hdkey] [int] NULL ,
		[pt_hdpartnerkey] [int] null,
		[pt_rskey] [int] NULL ,
		[pt_ctkey] [int] NULL ,
		[pt_hdstars] [nvarchar] (12) NULL ,
		[pt_pnkey] [int] NULL ,
		[pt_hrkey] [int] NULL ,
		[pt_rmkey] [int] NULL ,
		[pt_rckey] [int] NULL ,
		[pt_ackey] [int] NULL ,
		[pt_childagefrom] [int] NULL ,
		[pt_childageto] [int] NULL ,
		[pt_childagefrom2] [int] NULL ,
		[pt_childageto2] [int] NULL ,
		[pt_hdname] [nvarchar] (60),
		[pt_tourname] [nvarchar] (128),
		[pt_pnname] [nvarchar] (30),
		[pt_pncode] [nvarchar] (3),
		[pt_rmname] [nvarchar] (60),
		[pt_rmcode] [nvarchar] (60),
		[pt_rcname] [nvarchar] (60),
		[pt_rccode] [nvarchar] (40),
		[pt_acname] [nvarchar] (30),
		[pt_accode] [nvarchar] (30),
		[pt_rsname] [nvarchar] (50),
		[pt_ctname] [nvarchar] (50),
		[pt_rmorder] [int] NULL ,
		[pt_rcorder] [int] NULL ,
		[pt_acorder] [int] NULL ,
		[pt_rate] [nvarchar] (3),
		[pt_toururl] [nvarchar] (128),
		[pt_hotelurl] [nvarchar] (254),
		[pt_isenabled] [smallint] NULL,
		[pt_chkey] int null,
		[pt_chbackkey] int null,
		[pt_hdday] int null,
		[pt_hdnights] int null,
		[pt_chday] int null,
		[pt_chpkkey] int null,
		[pt_chprkey] int null,
		[pt_chbackday] int null,
		[pt_chbackpkkey] int null,
		[pt_chbackprkey] int null,
		pt_hotelkeys nvarchar(256),
		pt_hotelroomkeys nvarchar(256),
		pt_hotelstars nvarchar(256),
		pt_pansionkeys nvarchar(256),
		pt_hotelnights nvarchar(256),
		pt_chdirectkeys nvarchar(50) null,
		pt_chbackkeys nvarchar(50) null,
		[pt_topricefor] [smallint] NOT NULL DEFAULT (0)
	)

	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @sql nvarchar(4000)
	declare @countryKey int
	declare @cityFromKey int

---===========================---
---=== Реализация дозаписи ===---
---=                         =---

	set @add = isnull(@add, 0)

	create table #tmpPrices(
		tpkey int,
		tikey int
	)

	if(@add > 0)
	begin
		insert into #tmpPrices 
			select tp_key, tp_tikey 
			from tp_prices
			where tp_tokey = @toKey and tp_dateend >= getdate() and tp_key not in (select pt_pricekey from mwPriceDataTable with(nolock))
	end

---=                         =---
---===                     ===---
---===========================---

	update tp_lists with(rowlock)
	set
		ti_firsthotelday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = ti_tokey)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices 
				left join TP_Lists on ti_key = tp_tikey
				left join HotelRooms on hr_key = ti_firsthrkey
				
			where TP_TOKey = TO_Key and hr_main > 0 and isnull(HR_AGEFROM, 100) > 16
		)
		where TO_Key = @toKey

	update TP_Tours set TO_HotelNights = dbo.mwTourHotelNights(TO_Key) where TO_Key = @toKey


	update dbo.TP_Tours set TO_Progress = 13 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 20 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
	      						  end) + ts_day - 1 
     					   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 30 where TO_Key = @tokey

	update tp_lists with(rowlock)
	set
		ti_nights = (select sum(ts_days) 
				from tp_servicelists with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key 
				where tl_tikey = ti_key and ts_svkey = 3)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 40 where TO_Key = @tokey

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)
	where
		ti_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- город вылета
	update tp_lists
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists 
				inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
				inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
			where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_subcode2 = tl_ctdeparturekey)
	where ti_tokey = @tokey and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update tp_lists
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where tl_tikey = ti_key and ts_day <= tp_lists.ti_firsthotelday and ts_code = ti_chkey and ts_subcode2 = tl_ctdeparturekey
		and ti_tokey = @tokey and tl_tokey = @tokey and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	update tp_lists
	set 
		ti_ctkeyfrom = tl_ctdeparturekey
	from tp_tours inner join tbl_turList on tl_key = to_trkey
	where ti_tokey = to_key and to_key = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = tl_ctdeparturekey

	-- город прилета + обратный перелет
	update tp_lists 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists
		inner join tp_services on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours on ts_tokey = to_key inner join tbl_turList on tbl_turList.tl_key = to_trkey
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = tl_ctdeparturekey or @existBackCharter = 0)
		and ti_tokey = to_key
		and ti_tokey = @tokey
		and tl_tokey = @tokey
		and ts_tokey = @tokey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта вылета
	update tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- _ключ_ аэропорта прилета
	update tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport, charter 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)
	where
		ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- ключ города и ключ курорта + звезды
	update tp_lists
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary
	where 
		ti_tokey = @toKey and
		ti_firsthdkey = hd_key
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 60 where TO_Key = @tokey

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		to_isenabled, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid
	from tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @toKey and to_datevalid >= getdate() and ti_tokey = @toKey and tl_tokey = @toKey and ts_tokey = @toKey
		 and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'

	if (@add <= 0)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end

	insert into #tempPriceTable (
		[pt_mainplaces],
		[pt_addplaces],
		[pt_main],
		[pt_tourvalid],
		[pt_tourcreated],
		[pt_tourdate],
		[pt_days],
		[pt_nights],
		[pt_cnkey],
		[pt_ctkeyfrom],
		[pt_apkeyfrom],
		[pt_ctkeyto],
		[pt_apkeyto],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		[pt_tourkey],
		[pt_tourtype],
		[pt_tlkey],
		[pt_pricelistkey],
		[pt_pricekey],
		[pt_price],
		[pt_hdkey],
		[pt_hdpartnerkey],
		[pt_rskey],
		[pt_ctkey],
		[pt_hdstars],
		[pt_pnkey],
		[pt_hrkey],
		[pt_rmkey],
		[pt_rckey],
		[pt_ackey],
		[pt_childagefrom],
		[pt_childageto],
		[pt_childagefrom2],
		[pt_childageto2],
		[pt_hdname],
		[pt_tourname],
		[pt_pnname],
		[pt_pncode],
		[pt_rmname],
		[pt_rmcode],
		[pt_rcname],
		[pt_rccode],
		[pt_acname],
		[pt_accode],
		[pt_rsname],
		[pt_ctname],
		[pt_rmorder],
		[pt_rcorder],
		[pt_acorder],
		[pt_rate],
		[pt_toururl],
		[pt_hotelurl],
		[pt_isenabled],
		[pt_chkey],
		[pt_chbackkey],
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_chdirectkeys,
		pt_chbackkeys,
		[pt_topricefor]
	)
	select 
			(case when @mwAccomodationPlaces = '0'
				then isnull(rm_nplaces, 0)
				else isnull(ac_nrealplaces, 0) 
			end),
			(case isnull(ac_nmenexbed, -1) 
				when -1 then (case when @mwRoomsExtraPlaces <> '0' then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
						end) 
				else isnull(ac_nmenexbed, 0)
			end),
		hr_main, 
		to_datevalid, 
		to_datecreated, 
		td_date,
		ti_totaldays,
		ti_nights,
		to_cnkey, 
		isnull(ti_ctkeyfrom, 0), 
		ti_apkeyfrom,
		ti_ctkeyto, 
		ti_apkeyto, 
		null,
		null,
		to_key, 
		tl_tip,
		tl_key, 
		ti_key, 
		tp_key,
		tp_gross, 
		ti_firsthdkey, 
		ti_hdpartnerkey,
		hd_rskey, 
		hd_ctkey, 
		hd_stars, 
		ti_firstpnkey,
		ti_firsthrkey, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey,
		ac_agefrom, 
		ac_ageto, 
		ac_agefrom2,
		ac_ageto2, 
		hd_name, 
		tl_nameweb, 
		pn_name, 
		pn_code, 
		rm_name, 
		rm_code,
		rc_name, 
		rc_code, 
		ac_name, 
		ac_code, 
		rs_name,
		ct_name, 
		rm_order, 
		rc_order, 
		ac_order,
		to_rate,
		tl_webhttp,
		hd_http, 
		to_isenabled,
		ti_chkey,
		ti_chbackkey,
		ti_hdday,
		ti_hdnights,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hoteldays,
		dbo.mwGetTourCharters(ti_key, 1),
		dbo.mwGetTourCharters(ti_key, 0),
		to_pricefor
	from tp_tours with(nolock)
		inner join turList with(nolock) on to_trkey = tl_key
		inner join tp_lists with(nolock) on ti_tokey = to_key
		inner join tp_prices with(nolock) on tp_tikey = ti_key
		inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
		inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
		inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
		inner join pansion with(nolock) on ti_firstpnkey = pn_key
		inner join rooms with(nolock) on hr_rmkey = rm_key
		inner join roomscategory with(nolock) on hr_rckey = rc_key
		inner join accmdmentype with(nolock) on hr_ackey = ac_key
		inner join citydictionary with(nolock) on hd_ctkey = ct_key
		left outer join resorts with(nolock) on hd_rskey = rs_key
	where
		to_key = @toKey and ti_tokey = @toKey and tp_tokey = @toKey
		and (@add <= 0 or tp_key in (select tpkey from #tmpPrices))

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey

	insert into dbo.mwPriceDurations (
		sd_tourkey,
		sd_tlkey,
		sd_days,
		sd_nights,
		sd_hdnights
	)
	select distinct
		ti_tokey,
		to_trkey,
		ti_totaldays,
		ti_nights,
		ti_hoteldays
	from tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key
	where ti_tokey = @toKey
		and (@add <= 0 or ti_key in (select tikey from #tmpPrices))

	-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
	update mwspodatatable with(rowlock) set sd_tourcreated = to_datecreated from tp_tours where sd_tourkey = to_key and to_key = @tokey

	-- Переписываем данные из временной таблицы и уничтожаем ее
	if @mwSearchType = 0
	begin
		if (@add <= 0)
		begin
			set @sql = 'delete from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
			exec(@sql)
		end
		exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
	end
	else
	begin
		declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
		open cur
		fetch next from cur into @countryKey, @cityFromKey
		while @@fetch_status = 0
		begin
			exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

			if (@add <= 0)
			begin
				set @sql = 'delete from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20))
				exec(@sql)
			end

			exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

			exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
			fetch next from cur into @countryKey, @cityFromKey
		end		
		close cur
		deallocate cur
	end

	update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

	insert into dbo.mwPriceHotels (
		sd_tourkey,
		sd_mainhdkey,
		sd_mainpnkey,
		sd_hdkey,
		sd_hdstars,
		sd_hdctkey,
		sd_hdrskey,
		sd_hrkey,
		sd_rmkey,
		sd_rckey,
		sd_ackey,
		sd_pnkey,
		sd_hdorder)
	select distinct 
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey,
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey,
		thd_hdorder
	from #tmpHotelData

	-- информация об отелях
	insert into mwSpoDataTable(
		sd_tourkey, 
		sd_cnkey, 
		sd_hdkey, 
		sd_hdstars, 
		sd_ctkey, 
		sd_rskey, 
		sd_ctkeyfrom, 
		sd_ctkeyto, 
		sd_tlkey, 
		sd_isenabled, 
		sd_tourcreated,
		sd_main,
		sd_pnkey,
		sd_tourtype,
		sd_cnname,
		sd_tourname,
		sd_hdname,
		sd_ctname,
		sd_rsname,
		sd_ctfromname,
		sd_cttoname,
		sd_tourtypename,
		sd_pncode,
		sd_hotelkeys,
		sd_pansionkeys,
		sd_tourvalid
	) 
	select distinct 
		thd_tourkey, 
		thd_cnkey, 
		thd_hdkey, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated,
		thd_hdmain,
		thd_pnkey,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_tourvalid 
	from #tmpHotelData 
	where thd_hdmain > 0

	if(@forceEnable > 0)
		exec dbo.mwEnablePriceTour @tokey, 1

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100, TO_DateCreated = GetDate() where TO_Key = @tokey
end
go

grant exec on dbo.FillMasterWebSearchFields to public
go

--091019(Insert_SystemSettings).sql
--7.2 - 9.2
if not exists (select * from dbo.SystemSettings where SS_ParmName = 'SYSUseDiscountCards')
	insert into dbo.SystemSettings (SS_ParmName, SS_ParmValue) values ('SYSUseDiscountCards', '0')
GO

--sp_GetQuotaLoadListData_N.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetQuotaLoadListData_N]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetQuotaLoadListData_N] 
GO
create procedure [dbo].[GetQuotaLoadListData_N]
(
--<VERSION>2008.1.01.20a</VERSION>
@QT_ID int=null,
@Service_SVKey int=null,
@Service_Code int=null,
@DateStart smalldatetime = null,
@DaysCount int=null,			 -- для режима 10-для наличия мест - в этом поле передается продолжительность услуги

@nShowQuotaTypes smallint =null,  -- показывать квоты типа (0 - все, 1 - allotment, 2 - commitment)
@bShowCommonInfo bit =null,  -- показывать (1-общую информацию по квоте, 0-информацию по распределению квоты)
@bShowAgencyInfo bit =null,   -- показывать информацию об агентских квотах
@AgentKey int =null,
@bFreeSale bit =null,
@DLKey int =null,
@ResultType smallint=null,		--варианты отображения (0,null-общее, 10-для наличия мест(из оформления))
@TourDurations  smallint=null,
@DateStart2 smalldatetime = null,
@DateStart3 smalldatetime = null,
@bShowByCheckIn bit =null
)
as 

DECLARE @DateEnd smalldatetime, @Service_PRKey int, @QT_IDLocal int, @Result_From smallint, @Result_To smallint, @ServiceLong smallint, @DurationLocal smallint, @ByRoom int
--@Result
--11 - общее кол-во мест (строка 8000)
--12 - кол-во свободных мест (строка 8000)
--13 - кол-во занятых мест (строка 8000)
--21 - кол-во свободных мест (smallint)
--22 - % Stop-Sale (smallint)
--23 - возможен ли заезд (smallint)
if @ResultType is null or @ResultType not in (10)
	Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)
Else --для наличия мест(из оформления)
BEGIN
	Set @ServiceLong=@DaysCount
	Set @DateEnd = DATEADD(DAY,ISNULL(@DaysCount,1)-1,@DateStart3)
	Set @DaysCount=DATEDIFF(DAY,@DateStart,@DateEnd)+1

	if exists (select 1 from dbo.Service where SV_Key=@Service_SVKey and SV_IsDuration=1)
		set @DurationLocal=@ServiceLong
	Else
		set @DurationLocal=@TourDurations
END

--DECLARE @StopSaleTemp TABLE
--(
--SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
--)
-- Для совместимости с MSSQL 2000
CREATE TABLE #StopSaleTemp
(
SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
)

INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails	@DLKey, null, @DateStart, @DaysCount, null, null, @Service_SVKey, @Service_Code, null, null, 1

/*
select * from quotas,quotaobjects,quotadetails where 
qt_id=qo_qtid and qd_qtid=qt_id
and qo_code=8439 and qo_svkey=1 and QO_QTID is not null
and ISNULL(QD_IsDeleted,0)=0
and QD_Date between @DateStart and DATEADD(DAY,@DaysCount,@DateStart)
*/
CREATE TABLE #QuotaLoadList(
QL_QTID int, QL_PRKey int, QL_SubCode1 int, QL_PartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QL_Description nvarchar(255) collate Cyrillic_General_CI_AS, 
QL_dataType smallint, QL_Type smallint, QL_Release int, QL_Durations nvarchar(20) collate Cyrillic_General_CI_AS, QL_FilialKey int, 
QL_CityDepartments int, QL_AgentKey int, QL_CustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QL_DateCheckinMin smalldatetime,
QL_ByRoom int)

DECLARE @n int, @str varchar(1000)
if @ResultType is null or @ResultType not in (10)
BEGIN
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_B_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		--, QL_F_' + CAST(@n as varchar(3)) + ' varchar(8000)
		exec (@str)
		set @n = @n + 1
	END
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' smallint'
		exec (@str)
		set @n = @n + 1
	END
END


if @bShowCommonInfo = 1
BEGIN
	insert into #QuotaLoadList 
	(QL_QTID, QL_Type, QL_Release, QL_dataType, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select	DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, @DateEnd+1,QT_PRKey, QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and ISNULL(QD_IsDeleted,0)=0
			and QD_Date between @DateStart and @DateEnd
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0)
			and NU_ID between 1 and 3
END
else
BEGIN
	DECLARE @Service_SubCode1 int, @Object_SubCode1 int, @Object_SubCode2 int
	SET @Object_SubCode1=0
	SET @Object_SubCode2=0
	IF @DLKey is not null				-- если мы запустили процедуру из конкрентной услуги
	BEGIN
		SELECT	@Service_SVKey=DL_SVKey, @Service_Code=DL_Code, @Service_SubCode1=DL_SubCode1, @AgentKey=ISNULL(DL_Agent,0), @Service_PRKey=DL_PartnerKey
		FROM	DogovorList
		WHERE	DL_Key=@DLKey
		If @Service_SVKey=3
			SELECT @Object_SubCode1=HR_RMKey, @Object_SubCode2=HR_RCKey FROM dbo.HotelRooms WHERE HR_Key=@Service_SubCode1
		Else
			SET @Object_SubCode1=@Service_SubCode1
	END

if @ResultType is null or @ResultType not in (10)
BEGIN
	Set @Result_From=11
	Set @Result_To=13
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	Set @Result_From=21
	Set @Result_To=23
END	
	insert into #QuotaLoadList 
		(QL_QTID, QL_Type, QL_Release, QL_dataType, 
		QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	select DISTINCT QT_ID, QD_Type, QD_Release, NU_ID, 
		QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd+1,QT_PRKey,QT_ByRoom
	from	Quotas, QuotaObjects, QuotaDetails, QuotaParts, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID 
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and ISNULL(QP_IsDeleted,0)=0
			and ISNULL(QD_IsDeleted,0)=0
			and NU_ID between @Result_From and @Result_To
			and (@DLKey is null or (@DLKey is not null and QO_SubCode1 in (0,@Object_SubCode1) and QO_SubCode2 in (0,@Object_SubCode2)))
END

--update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_FilialKey and QL_FilialKey > 0)

DECLARE @QD_ID int, @Date smalldatetime, @State smallint, @QD_Release int, @QP_Durations varchar(20), @QP_FilialKey int,
		@QP_CityDepartments int, @QP_AgentKey int, @Quota_Places int, @Quota_Busy int, @QP_IsNotCheckIn bit,
		@QD_QTID int, @QP_ID int, @Quota_Comment varchar(8000), @Stop_Comment varchar(255) --,	@QT_ID int
DECLARE @ColumnName varchar(10), @QueryUpdate varchar(8000), @QueryUpdate1 varchar(255), @QueryWhere1 varchar(255), @QueryWhere2 varchar(255), 
		@QD_PrevID int, @StopSale_Percent int, @CheckInPlaces smallint, @CheckInPlacesBusy smallint --@QuotaObjects_Count int, 

if @bShowCommonInfo = 1
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,
			QD_Places, QD_Busy,
			0,'',0,0,0,0, ISNULL(REPLACE(QD_Comment,'''','"'),''),0,0
	FROM	Quotas, QuotaObjects, QuotaDetails
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID
else
	DECLARE curQLoadList CURSOR FOR SELECT
			QT_ID, QD_ID, QD_Date, QD_Type, QD_Release,			
			QP_Places, QP_Busy,
			QP_ID, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, ISNULL(QP_IsNotCheckIn,0), 
			ISNULL(REPLACE(QD_Comment,'''','"'),'') + '' + ISNULL(REPLACE(QP_Comment,'''','"'),''), QP_CheckInPlaces, QP_CheckInPlacesBusy
	FROM	Quotas, QuotaObjects, QuotaDetails,QuotaParts
	WHERE	QT_ID=QO_QTID and QD_QTID=QT_ID and QP_QDID = QD_ID			
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and QP_QDID = QD_ID	
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and (QP_IsDeleted = 0 or QP_IsDeleted is null)
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID

OPEN curQLoadList
FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
									@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
									@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy
SET @QD_PrevID = @QD_ID - 1
--SELECT @QuotaObjects_Count = count(*) from QuotaObjects, Quotas where QO_QTID = QT_ID and QT_ID = @QT_ID

SET @StopSale_Percent=0
WHILE @@FETCH_STATUS = 0
BEGIN
	set @QueryUpdate1=''
	if DATEADD(DAY,ISNULL(@QD_Release,0),GetDate()) < @Date
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
	set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))

	If @QD_PrevID != @QD_ID
	BEGIN
		SET @StopSale_Percent=0
		SET @Stop_Comment = ''
		IF @DLKey is null
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100*SST_QO_Count/SST_QO_CountWithStop, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END
		ELSE
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100, @Stop_Comment = SST_Comment FROM #StopSaleTemp WHERE SST_QDID = @QD_ID
		END

		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment
		SET @QD_PrevID = @QD_ID
	END	
	ELSE
		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment

	set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))
	if @QD_Release is null
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release is null' 
	else
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release = ' + CAST(@QD_Release as varchar(5))
	
	if @bShowCommonInfo = 1
	BEGIN
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10)) + ';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
		set @QueryUpdate = 'UPDATE #QuotaLoadList SET 
			QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 1 THEN ''' + CAST((@Quota_Places) as varchar(10))  + ''' WHEN 2 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10))  + ''' WHEN 3 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + ' and QL_dataType in (1,2,3) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		--print @QueryUpdate
		exec (@QueryUpdate)
	END
	else
	BEGIN
		set @QueryWhere2 = ''
		if @QP_Durations is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + @QP_Durations + ''''
		if @QP_FilialKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey = ' + CAST(@QP_FilialKey as varchar(10))
		if @QP_CityDepartments is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments = ' + CAST(@QP_CityDepartments as varchar(10))
 		if @QP_AgentKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey = ' + CAST(@QP_AgentKey as varchar(10))
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10))  + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7980)) + ''''
		IF @ResultType is null or @ResultType not in (10)
		BEGIN
			IF @bShowByCheckIn = 1 and @QP_Durations <> '' 
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST(ISNULL(@CheckInPlaces,0) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST(ISNULL(@CheckInPlaces-@CheckInPlacesBusy,0) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST(ISNULL(@CheckInPlacesBusy,0) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			ELSE
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST((@Quota_Places) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END
		ELSE
		BEGIN
		--для наличия мест(из оформления)
			--  WHEN 22 THEN ' + @StopSale_Percent + ' WHEN 23 THEN ' + @QP_IsNotCheckIn + ' END
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 21 THEN ' + CAST((@Quota_Places-@Quota_Busy) as varchar(5)) + ' WHEN 22 THEN ' + CAST(@StopSale_Percent as varchar(5)) + ' WHEN 23 THEN ' + CAST(@QP_IsNotCheckIn as varchar(5)) + ' END)' 
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (21,22,23) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END	
		--print @QueryUpdate
		exec (@QueryUpdate)
	END	
	FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
										@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
										@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, @QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy
END
CLOSE curQLoadList
DEALLOCATE curQLoadList

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	IF(@Service_SVKey = 3)
		SET @ByRoom = (SELECT AVG(ISNULL(QL_ByRoom,0)) FROM #QuotaLoadList)
	ELSE
		SET @ByRoom = 0

	insert into #QuotaLoadList 
		(QL_SubCode1, QL_Type, QL_dataType, QL_PRKey, QL_ByRoom)
	select DISTINCT DL_SubCode1, SD_State, 21, DL_PartnerKey, @ByRoom
	from	DogovorList,ServiceByDate
	where	SD_DLKey=DL_Key
			and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd))
			and SD_Date<=@DateEnd and SD_Date>=@DateStart
			and SD_State not in (1,2)
	group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
END

update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners where PR_Key = QL_AgentKey and QL_AgentKey > 0)
update #QuotaLoadList set QL_PartnerName = (Select PR_Name from Partners where PR_Key = QL_PRKey and QL_PRKey > 0)
update #QuotaLoadList set QL_PartnerName = 'All partners' where QL_PRKey=0

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	DECLARE @ServiceCount int, @SubCode1 int, @PartnerKey int

	DECLARE curQServiceList CURSOR FOR SELECT
		SD_Date, CASE @ByRoom WHEN 1 THEN count(distinct SD_RLID) ELSE count(SD_ID) END, 
		DL_SubCode1, DL_PartnerKey, SD_State
		from	DogovorList,ServiceByDate
		where	SD_DLKey=DL_Key
				and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
				and SD_State not in (1,2)
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
	OPEN curQServiceList
	FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))
		set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))

		set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + @ColumnName + ' = ''' + CAST((@ServiceCount) as varchar(10))  + ''' 
		WHERE QL_Type = ' + CAST(@State as varchar(1)) + ' and QL_SubCode1= ' + CAST(@SubCode1 as varchar(10)) + ' and QL_PRKey= ' + CAST(@PartnerKey as varchar(10))

		exec (@QueryUpdate)
		FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State
	END
	CLOSE curQServiceList
	DEALLOCATE curQServiceList
END

DECLARE @QO_SubCode int, @QO_TypeD smallint, @DL_SubCode1 int, @QT_ID_Prev int, @ServiceName1 varchar(100), @ServiceName2 varchar(100), @Temp varchar(100)
DECLARE curQLoadListQO CURSOR FOR 
	SELECT DISTINCT QO_QTID, QO_SubCode1, 1, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT QO_QTID, QO_SubCode2, 2, null FROM QuotaObjects WHERE QO_QTID in (SELECT DISTINCT QL_QTID FROM #QuotaLoadList) and QO_QTID is not null
	UNION
	SELECT DISTINCT null, null, null, QL_SubCode1 FROM #QuotaLoadList WHERE QL_SubCode1 is not null
	ORDER BY 1,3

OPEN curQLoadListQO
FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
Set @QT_ID_Prev=@QT_IDLocal
Set @ServiceName1=''
Set @ServiceName2=''


WHILE @@FETCH_STATUS = 0
BEGIN
	if @DL_SubCode1 is not null
	BEGIN
		Set @Temp=''
		exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, @Temp output, null, null

		Update #QuotaLoadList set QL_Description=ISNULL(QL_Description,'') + @Temp where QL_SubCode1=@DL_SubCode1
	END
	Else
	BEGIN
		If @QT_ID_Prev != @QT_IDLocal
		BEGIN
			If @Service_SVKey=3
			BEGIN
				Set @ServiceName2='(' + @ServiceName2 + ')'
			END
			Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev
			Set @ServiceName1=''
			Set @ServiceName2=''
		END
		SET @QT_ID_Prev=@QT_IDLocal
		Set @Temp=''
		If @Service_SVKey=3
		BEGIN
			IF @QO_TypeD=1
			BEGIN
				EXEC GetRoomName @QO_SubCode, @Temp output, null
				If @ServiceName1!=''
					Set @ServiceName1=@ServiceName1+','
				Set @ServiceName1=@ServiceName1+@Temp
			END			
			Set @Temp=''
			IF @QO_TypeD=2
			BEGIN
				EXEC GetRoomCtgrName @QO_SubCode, @Temp output, null
				If @ServiceName2!=''
					Set @ServiceName2=@ServiceName2+','
				Set @ServiceName2=@ServiceName2+@Temp
			END
		END
		ELse
		BEGIN
			exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, @Temp output, null, null
			If @ServiceName1!=''
				Set @ServiceName1=@ServiceName1+','
			Set @ServiceName1=@ServiceName1+@Temp
		END
	END
	FETCH NEXT FROM curQLoadListQO INTO	@QT_IDLocal, @QO_SubCode, @QO_TypeD, @DL_SubCode1
END
If @Service_SVKey=3
BEGIN
	Set @ServiceName2='(' + @ServiceName2 + ')'
END
Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@QT_ID_Prev

CLOSE curQLoadListQO
DEALLOCATE curQLoadListQO

If @Service_SVKey=3
BEGIN
	Update #QuotaLoadList set QL_Description = QL_Description + ' - Per person' where QL_ByRoom = 0
END

IF @ResultType is null or @ResultType not in (10)
BEGIN
	select * 
	from #QuotaLoadList 
	order by QL_QTID-QL_QTID DESC /*Сначала квоты, потом неквоты*/,QL_Description,QL_PartnerName,QL_Type DESC,QL_Release,QL_Durations,QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
	RETURN 0
END
ELSE
BEGIN --для наличия мест(из оформления)
	CREATE TABLE #ServicePlacesTr(
		SPT_QTID int, SPT_PRKey int, SPT_SubCode1 int, SPT_PartnerName varchar(100), SPT_Description varchar(255), 
		SPT_Type smallint, SPT_FilialKey int, SPT_CityDepartments int, SPT_Release int, SPT_Durations varchar(100),
		SPT_AgentKey int, SPT_Date smalldatetime, SPT_Places smallint, SPT_Stop smallint, SPT_CheckIn smallint)
	
	-- В MSSQL 2000 это не работает
	--ALTER TABLE #ServicePlacesTr ADD SPT_Date smalldatetime
	--ALTER TABLE #ServicePlacesTr ADD SPT_Places smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_Stop smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_CheckIn smallint


	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		DECLARE @curDate smalldatetime
		SET @curDate = DATEADD(DAY,@n-1,@DateStart)

		set @str = '
			INSERT INTO #ServicePlacesTr 
				(SPT_QTID, SPT_PRKey,SPT_SubCode1,SPT_PartnerName,SPT_Description,SPT_Type,
				SPT_FilialKey,SPT_CityDepartments,SPT_Release,SPT_Durations,SPT_AgentKey,
				SPT_Date,SPT_Places) 
			SELECT QL_QTID, QL_PRKey,QL_SubCode1,QL_PartnerName, QL_Description, QL_Type, 
				QL_FilialKey, QL_CityDepartments,QL_Release,QL_Durations,QL_AgentKey, 
				''' + CAST(@curDate as varchar(20)) + ''', QL_' + CAST(@n as varchar(3)) + '
				FROM #QuotaLoadList
				WHERE QL_dataType=21'
		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_Stop=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=22 and 
					SPT_QTID=QL_QTID and
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and 
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date=''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20))+ ''''

		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_CheckIn=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=23 and
					SPT_QTID=QL_QTID and 
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date= ''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20)) + ''''

		exec (@str)
		set @n = @n + 1
	END
END

--Select * from #ServicePlacesTr 	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

CREATE TABLE #ServicePlaces(
	SP_PRKey int, SP_SubCode1 int, SP_PartnerName varchar(100), SP_Description varchar(255), 
	SP_Type smallint, SP_FilialKey int, SP_CityDepartments int, 
	SP_Places1 smallint, SP_Places2 smallint, SP_Places3 smallint, 
	SP_NonReleasePlaces1 smallint,SP_NonReleasePlaces2 smallint,SP_NonReleasePlaces3 smallint, 
	SP_StopPercent1 smallint,SP_StopPercent2 smallint,SP_StopPercent3 smallint)

DECLARE @SPT_QTID int, @SPT_PRKey int, @SPT_SubCode1 int, @SPT_PartnerName varchar(100), @SPT_Description varchar(255), 
		@SPT_Type smallint, @SPT_FilialKey int, @SPT_CityDepartments int, @SPT_Release smallint, @SPT_Date smalldatetime, 
		@SPT_Places smallint, @SPT_Stop smallint, @SPT_CheckIn smallint, @SPT_PRKey_Old int, @SPT_PartnerName_Old varchar(100), 
		@SPT_SubCode1_Old int, @SPT_Description_Old varchar(255), @SPT_Type_Old smallint, @SPT_FilialKey_Old int,
		@SPT_CityDepartments_Old int, @SPT_Date_Old smalldatetime,
		@currentPlaces1 smallint, @currentPlaces2 smallint, @currentPlaces3 smallint,
		@currentNonReleasePlaces1 smallint, @currentNonReleasePlaces2 smallint, @currentNonReleasePlaces3 smallint,
		@OblectPlacesMin1 smallint, @OblectPlacesMin2 smallint, @OblectPlacesMin3 smallint,
		@OblectNonReleasePlacesMin1 smallint, @OblectNonReleasePlacesMin2 smallint, @OblectNonReleasePlacesMin3 smallint,
		@stopPercentSum1 smallint,@stopPercentSum2 smallint,@stopPercentSum3 smallint,
		@quotaCounter1 smallint,@quotaCounter2 smallint,@quotaCounter3 smallint,
		@Now smalldatetime

SET @Now = GETDATE()
		
DECLARE curQ2 CURSOR FOR SELECT
			 SPT_QTID, SPT_PRKey, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_Type, SPT_FilialKey, 
			 SPT_CityDepartments, ISNULL(SPT_Release, 0), SPT_Date, ISNULL(SPT_Places, 0), ISNULL(SPT_Stop,0), SPT_CheckIn
	FROM	#ServicePlacesTr
	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

OPEN curQ2
FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
		@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

SET @SPT_PRKey_Old=@SPT_PRKey
SET @SPT_Description_Old=@SPT_Description
SET @SPT_PartnerName_Old=@SPT_PartnerName
SET @SPT_Type_Old=@SPT_Type
SET @SPT_Date_Old=@SPT_Date
SET @currentPlaces1=0
SET @currentPlaces2=0
SET @currentPlaces3=0
SET @currentNonReleasePlaces1=0
SET @currentNonReleasePlaces2=0
SET @currentNonReleasePlaces3=0
SET @stopPercentSum1=0
SET @stopPercentSum2=0
SET @stopPercentSum3=0
SET @quotaCounter1=0
SET @quotaCounter2=0
SET @quotaCounter3=0


WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SPT_PRKey=@SPT_PRKey_Old and @SPT_Description=@SPT_Description_Old and ISNULL(@SPT_Type,-1)=ISNULL(@SPT_Type_Old,-1) and @SPT_Date!=@SPT_Date_Old
	BEGIN
		If (@OblectPlacesMin1 is null or @OblectPlacesMin1 > @currentPlaces1) AND @SPT_Date_Old BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
		BEGIN
			--Set @quotaCounter1=0
			Set @OblectPlacesMin1=@currentPlaces1
			--Set @currentPlaces1=0
			Set @OblectNonReleasePlacesMin1=@currentNonReleasePlaces1
			--Set @currentNonReleasePlaces1=0
		END
		If (@OblectPlacesMin2 is null or @OblectPlacesMin2 > @currentPlaces2) AND @SPT_Date_Old BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
		BEGIN
			--Set @quotaCounter2=0
			Set @OblectPlacesMin2=@currentPlaces2
			--Set @currentPlaces2=0
			Set @OblectNonReleasePlacesMin2=@currentNonReleasePlaces2
			--Set @currentNonReleasePlaces2=0
		END
		If (@OblectPlacesMin3 is null or @OblectPlacesMin3 > @currentPlaces3) AND @SPT_Date_Old BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
		BEGIN
			--Set @quotaCounter3=0
			Set @OblectPlacesMin3=@currentPlaces3
			--Set @currentPlaces3=0
			Set @OblectNonReleasePlacesMin3=@currentNonReleasePlaces3
			--Set @currentNonReleasePlaces3=0
		END
-- При смене даты обнуляем текущие колличества мест
		SET @currentPlaces1=0
		SET @currentPlaces2=0
		SET @currentPlaces3=0
		SET @currentNonReleasePlaces1=0
		SET @currentNonReleasePlaces2=0
		SET @currentNonReleasePlaces3=0
	END

	IF @SPT_PRKey!=@SPT_PRKey_Old or @SPT_Description!=@SPT_Description_Old or ISNULL(@SPT_Type,-1)!=ISNULL(@SPT_Type_Old,-1)
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
				SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
				SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
				SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
				@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
				ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
				ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
				@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)

		set @OblectPlacesMin1 = null
		set @OblectPlacesMin2 = null
		set @OblectPlacesMin3 = null
		set @OblectNonReleasePlacesMin1 = null
		set @OblectNonReleasePlacesMin2 = null
		set @OblectNonReleasePlacesMin3 = null
		Set @currentPlaces1=0
		Set @currentPlaces2=0
		Set @currentPlaces3=0
		Set @currentNonReleasePlaces1=0
		Set @currentNonReleasePlaces2=0
		Set @currentNonReleasePlaces3=0
		Set @stopPercentSum1=0
		Set @stopPercentSum2=0
		Set @stopPercentSum3=0
		Set @quotaCounter1=0
		Set @quotaCounter2=0
		Set @quotaCounter3=0
	END

	If @SPT_Date BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
	BEGIN
			Set @quotaCounter1=@quotaCounter1+1
		Set @stopPercentSum1 = @stopPercentSum1 + @SPT_Stop
		Set @currentPlaces1=@currentPlaces1+@SPT_Places
		If @DateStart > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces1=@currentNonReleasePlaces1+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
	BEGIN
			Set @quotaCounter2=@quotaCounter2+1
		Set @stopPercentSum2 = @stopPercentSum2 + @SPT_Stop
		Set @currentPlaces2=@currentPlaces2+@SPT_Places
		If @DateStart2 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces2=@currentNonReleasePlaces2+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
	BEGIN
			Set @quotaCounter3=@quotaCounter3+1
		Set @stopPercentSum3 = @stopPercentSum3 + @SPT_Stop
		Set @currentPlaces3=@currentPlaces3+@SPT_Places
		If @DateStart3 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces3=@currentNonReleasePlaces3+@SPT_Places
	END

	SET @SPT_PRKey_Old=@SPT_PRKey
	SET @SPT_PartnerName_Old=@SPT_PartnerName
	SET @SPT_Description_Old=@SPT_Description
	SET @SPT_Type_Old=@SPT_Type
	SET @SPT_Date_Old=@SPT_Date
	FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
			@SPT_Type, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

	If @@FETCH_STATUS != 0
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO #ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, 
			SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
			SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
			SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, 
			@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
			ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
			ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
			@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)
		END
END
CLOSE curQ2
DEALLOCATE curQ2

--select * from #ServicePlacesTr
--ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
--		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

--select * from #ServicePlaces


	select 
		SP_PRKey,SP_PartnerName,SP_Description,SP_SubCode1,SP_Type,SP_FilialKey,SP_CityDepartments,
		CAST(SP_Places1 as varchar(4))+';'+CAST(SP_NonReleasePlaces1 as varchar(4))+';'+CAST(SP_StopPercent1 as varchar(4)) as SP_1,
		CAST(SP_Places2 as varchar(4))+';'+CAST(SP_NonReleasePlaces2 as varchar(4))+';'+CAST(SP_StopPercent2 as varchar(4)) as SP_2,
		CAST(SP_Places3 as varchar(4))+';'+CAST(SP_NonReleasePlaces3 as varchar(4))+';'+CAST(SP_StopPercent3 as varchar(4)) as SP_3
	from #ServicePlaces
	order by SP_Description, SP_PartnerName, SP_Type

GO

GRANT EXECUTE ON [dbo].[GetQuotaLoadListData_N] TO PUBLIC 
GO

--091023_CreateTableDiscountScheme.sql
--7.2 - 9.2
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DiscountScheme]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[DiscountScheme]
	(
		DS_ID int identity(1,1),
		DS_SERIES		varchar(2),
		DS_CITYFROMKEY	int,
		DS_COUNTRYKEY	int,
		DS_CITYKEY		int,
		DS_TOURTYPEKEY	int,
		DS_DISCOUNT		decimal(18,2),
		DS_RESERVATIONSFROM		int,
		DS_RESERVATIONSTO		int,
		DS_TOTALCOSTFROM		int,
		DS_TOTALCOSTTO			int,
		DS_MINPRICE				int
	)
	GO

grant DELETE, INSERT, REFERENCES, SELECT, UPDATE on [dbo].[DiscountScheme] to public
GO

--091023_AlterTableCards.sql
--7.2 - 9.2
if not exists (select * from dbo.syscolumns where name = 'CD_CREATOR' and id = object_id(N'[dbo].[Cards]'))
	alter table dbo.Cards add CD_CREATOR int REFERENCES Userlist (US_KEY)
GO

--091023_AddActions.sql
--7.2 - 9.2
if not exists (select ac_key from dbo.Actions where AC_Key = 66)
	insert into dbo.Actions (ac_key, AC_Name, AC_NameLat) values (66, 'Возможность удалить дисконтную карту', 'User can delete discount card')	
GO

if not exists (select ac_key from dbo.Actions where AC_Key = 67)
	insert into dbo.Actions (ac_key, AC_Name, AC_NameLat) values (67, 'Возможность восстановить дисконтную карту', 'User can restore discount card')
GO

--sp_GetPartnerCommission.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetPartnerCommission] 
GO

CREATE   PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null,
	 @nDepartureCity int = 0,
	 @sDiscountCode varchar(5) = null,
	 @sDiscountNumber varchar(10) = null,
	 @price decimal(16,6) = null,
	 @rate varchar(3) = null,
	 @dogovorCode varchar(10) = null
AS
	declare @discountSettingValue varchar(256)
	select @discountSettingValue = ISNULL(SS_ParmValue, '0') from dbo.SystemSettings where SS_ParmName like 'SYSUseDiscountCards'
	if @discountSettingValue = '1' and ISNULL(@sDiscountCode, '') != '' and ISNULL(@sDiscountNumber, '') != ''
	begin
		
		declare @discountCode varchar(5)
		declare @discountNumber varchar(10)
		declare @reservationsCount int, @cardKey int
		declare @reservationsPrice decimal(16,6)
		declare @nationalRate varchar(3)
		declare @discount money
		declare @discountId int

		if (ISNULL(@dogovorCode, '') = '')
		begin
			set @sDiscountCode = rtrim(ltrim(@sDiscountCode))
			set @sDiscountNumber = rtrim(ltrim(@sDiscountNumber))
				
			select @cardKey = CD_Key from Cards where ISNULL(CD_Code, '') = ISNULL(@sDiscountCode, '') and ISNULL(CD_Number, '') = ISNULL(@sDiscountNumber, '')
			select @reservationsCount = count(RR_ID) from ReservationsRegister where RR_CardKey in (select CD_Key from dbo.Cards where CD_Code like ISNULL(@sDiscountCode, ''))
			select @reservationsPrice = sum(DG_NationalCurrencyPrice) from Dogovor where DG_CODE in (select RR_DGCODE  COLLATE Cyrillic_General_CI_AS from ReservationsRegister where RR_CardKey in (select CD_Key from dbo.Cards where CD_Code like ISNULL(@sDiscountCode, '')))
			select @nationalRate = RA_Code from dbo.Rates where RA_National = 1
			exec ExchangeCost @price output, @rate, @nationalRate, @dCheckinDate

			set @reservationsPrice = ISNULL(@reservationsPrice, 0)
		
			select top 1 @discount = cast(ISNULL(DS_DISCOUNT, 0) as money), @discountId = DS_ID  
				from dbo.DiscountScheme, dbo.TurList, dbo.TurService where 
				TL_Key = @nTLKey and 
				TS_TRKey = TL_Key and
				DS_Series like @sDiscountCode and
				((DS_CityFromKey is not null and DS_CityFromKey = TL_CTDepartureKey) or (DS_CityFromKey is null)) and
				((DS_CountryKey is not null and DS_CountryKey = TL_CNKey) or (DS_CountryKey is null)) and
				((DS_CityKey is not null and DS_CityKey = TS_CTKey) or (DS_CityKey is null)) and
				((DS_TourTypeKey is not null and DS_TourTypeKey = TL_TIP) or (DS_TourTypeKey is null)) and
				((DS_ReservationsFrom is not null and DS_ReservationsFrom <= (@reservationsCount + 1)) or (DS_ReservationsFrom is null)) and
				((DS_ReservationsTo is not null and DS_ReservationsTo >= (@reservationsCount + 1)) or (DS_ReservationsTo is null)) and
				((DS_TotalCostFrom is not null and DS_TotalCostFrom <= (@reservationsPrice + @price)) or (DS_TotalCostFrom is null)) and
				((DS_TotalCostTo is not null and DS_TotalCostTo >= (@reservationsPrice + @price)) or (DS_TotalCostTo is null)) and
				((DS_TotalCostTo is not null and DS_TotalCostTo >= (@reservationsPrice + @price)) or (DS_TotalCostTo is null)) and
				((DS_MinPrice is not null and DS_MinPrice <= @price) or (DS_MinPrice is null))
			order by DS_ID DESC

			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		else
		begin
			
			select @discount = DD_DiscountPercent from dbo.DogovorDetails where DD_DGCODE like @dogovorCode
			set @discount = ISNULL(@discount, 0)
			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		
	end

     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int, @nAttr int, @nCTDepartureKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) 
		from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (0,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200')
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO

GRANT EXECUTE ON [dbo].[GetPartnerCommission]  TO PUBLIC 
GO

--091023(CreateTable_DogovorDetails).sql
--7.2 - 9.2
if not exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DogovorDetails]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
	CREATE TABLE [dbo].[DogovorDetails]
	(
		DD_ID int identity(1, 1),
		DD_DGCODE varchar(10) COLLATE Cyrillic_General_CS_AS,
		DD_DiscountPercent float,
		DD_CardKey int REFERENCES Cards (CD_KEY)
	 CONSTRAINT [DD_ID] PRIMARY KEY CLUSTERED 
	(
		[DD_ID] ASC
	) ON [PRIMARY]
	) ON [PRIMARY]
GO

grant DELETE, INSERT, REFERENCES, SELECT, UPDATE on [dbo].[DogovorDetails] to public
GO

IF exists(Select * from sysviews where name = 'ReservationsRegister' and CREATOR = 'DBO')
	DROP VIEW dbo.ReservationsRegister
GO

CREATE VIEW [dbo].[ReservationsRegister] AS 
	SELECT DD_ID as RR_ID, DD_DGCODE as RR_DGCODE, DG_CRDATE as RR_CreateDate, US_FullName as RR_Manager, DG_TURDATE as RR_CHECKIN, 
			CN_NAME as RR_COUNTRY, CT_NAME as RR_CITY, DG_PRICE as RR_PRICE, DG_RATE as RR_CURRENCY, DG_DiscountSum as RR_Discount, DD_CardKey as RR_CardKey,
			TL_TIP as RR_TOURTYPE, DG_NMEN as RR_NMEN, DG_PAYED as RR_PAYED
	FROM DogovorDetails
		inner join Dogovor on DG_Code COLLATE Cyrillic_General_CI_AS = DD_DGCODE
		inner join UserList on US_KEY = DG_CREATOR
		inner join Country on CN_KEY = DG_CNKEY
		inner join CityDictionary on CT_KEY = DG_CTKEY
		inner join Turlist on TL_KEY = DG_TRKEY
GO

grant select ,insert, delete,update on  [dbo].[ReservationsRegister] to public
GO

--091026_DeleteFromUserSettings.sql
--7.2 - 9.2
delete from dbo.UserSettings where ST_ParmName like '%FindAgentForm%'
GO

--sp_CheckQuotaObjectForDelete.sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CheckQuotaObjectForDelete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[CheckQuotaObjectForDelete]
GO
Create PROCEDURE [dbo].[CheckQuotaObjectForDelete]
(
--<VERSION>2009.1.01.01a</VERSION>
	@qtid int =null,
	@qoid int =null
) AS
Declare @QDId Int
set @QdID =null
select @QDid=QD_ID from QuotaDetails where QD_QTID=@QTID 
if @Qdid is  null
BEGin
	DELETE from quotaobjects where qo_QTid=@QTID  and not exists(select 1 from stopsales where ss_qoid=qo_id)
	DELETE from quotas  where qt_id=@QTID and not exists(select 1 from QUOTADETAILS WHERE QD_QTID=@QTID)
END
delete from quotaobjects where qo_id=@qoid and not exists(select 1 from stopsales where ss_qoid=@qoid)

GO
GRANT EXECUTE ON [dbo].[CheckQuotaObjectForDelete] TO PUBLIC
GO

--091026(CreateProcedure_UpdateDogovorDetails).sql
--7.2 - 9.2
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[UpdateDogovorDetails]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[UpdateDogovorDetails]
GO

create procedure [dbo].[UpdateDogovorDetails]
	@dogovorCode varchar(10),
	@sDiscountCode varchar(5),
	@sDiscountNumber varchar(10)
as
begin

	declare @discount money
	declare @cardKey int

	select @discount = DG_Discount from Dogovor where DG_CODE like @dogovorCode
	select @cardKey = CD_Key from dbo.Cards where ISNULL(CD_Code, '') = ISNULL(@sDiscountCode, '') and ISNULL(CD_Number, '') = ISNULL(@sDiscountNumber, '')

	if not exists (select 1 from dbo.DogovorDetails where DD_DGCODE like @dogovorCode)
	begin
		insert into dbo.DogovorDetails (DD_DGCODE, DD_DiscountPercent, DD_CardKey) values(@dogovorCode, @discount, @cardKey)
	end

end
GO

GRANT EXEC ON [dbo].[UpdateDogovorDetails] TO PUBLIC
GO

--091023_CreateFunctions.sql
--7.2 - 9.2
/***********************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[DeleteDiscountCard]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[DeleteDiscountCard]
GO

create procedure dbo.DeleteDiscountCard
	@cardKey int
as
begin
	DELETE FROM Cards WHERE CD_Key = @cardKey
end
GO

GRANT EXECUTE ON dbo.DeleteDiscountCard TO PUBLIC
GO

/***********************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RestoreDiscountCard]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[RestoreDiscountCard]
GO

create procedure dbo.RestoreDiscountCard
	@cardId int output,
	@series varchar(5),
	@number varchar(10),
	@client int,
	@prevCardId int
as
begin
	exec dbo.RegisterDiscountCard @cardId output, @series, @number, @client
	
	update ReservationsRegister set RR_CardKey = @cardId where RR_CardKey = @prevCardId
	
	update CARDS set CD_IsValid = 0 where CD_Key = @prevCardId
end
GO

GRANT EXECUTE ON dbo.RestoreDiscountCard TO PUBLIC
GO

/***********************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[RegisterDiscountCard]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[RegisterDiscountCard]
GO

create procedure [dbo].[RegisterDiscountCard]
	@cardId int output,
	@series varchar(5),
	@number varchar(10),
	@client int
as
begin
	declare @reservationsCount int, @cardKey int
	declare @reservationsPrice decimal(16,6)
	declare @price money, @rate varchar(3)
	declare @nationalRate varchar(3)
	declare @checkinDate DateTime
	declare @trKey int
	declare @discount money
	declare @discountId int
	declare @dogovorCode varchar(10)
	declare @sDiscountCode varchar(5)
	declare @sDiscountNumber varchar(10)

	set @sDiscountCode = rtrim(ltrim(@series))
	set @sDiscountNumber = rtrim(ltrim(@number))

	declare @key int
	exec GetNKey 'Cards', @key output
	declare @user int
	select @user = US_KEY from UserList where US_USERID = SYSTEM_USER
	INSERT INTO CARDS (CD_CLKey, CD_Code, CD_Date, CD_DSKey, CD_IsValid, CD_Key, CD_Number, CD_Creator) 
	VALUES (@client, @series, GETDATE(), 0, 1, @key, @number, @user)

	set @cardId = @key
	
	select top 1 @dogovorCode = DG_CODE from Dogovor inner join Turist on TU_DGCOD = DG_CODE where tu_id = @client order by dg_key desc
	select @discount = DG_Discount from Dogovor where DG_CODE like @dogovorCode

	if not exists (select 1 from dbo.DogovorDetails where DD_DGCODE like @dogovorCode)
	begin
		insert into dbo.DogovorDetails (DD_DGCODE, DD_DiscountPercent, DD_CardKey) values(@dogovorCode, @discount, @cardId)
	end

end
GO

GRANT EXECUTE ON dbo.RegisterDiscountCard TO PUBLIC
GO

/***********************************************/
if exists (select * from sysobjects where name like 'ExchangeCostF'  and xtype like 'fn')
	drop function [dbo].[ExchangeCostF] 
go

CREATE FUNCTION dbo.ExchangeCostF
(
	@costIn  decimal(16,6),
	@rateFrom varchar(3), 
	@rateTo varchar(3),
	@date datetime, 
	@type int 
)
RETURNS decimal(16,6)
as
begin
	declare @cost decimal(16,6)
	set @cost = @costIn
	/*Из хранимой процедуры [ExchangeCost]*/
	--hawk 2009-09-28 порезал время во входящей дате
	--<VERSION>2005.2.34</VERSION>
	If @rateFrom = @rateTo or @cost = 0		
		Return 0
	set @date = CONVERT(DateTime, CONVERT( varchar, @date, 104), 104)
	declare @course decimal(16,6), @course_CB decimal(16,6) 
	If @rateFrom != @rateTo and @cost != 0
	BEGIN		
		Set @course = 0
		Set @course_CB = 0
		If ISNULL(@type,0) = 0
			SELECT	@course = Cr_Course 
			FROM	dbo.Courses
			WHERE	CR_RCod1=@rateFrom and
					CR_RCod2=@rateTo and
					@date between Cr_DateBeg and Cr_DateEnd
		ELSE
		BEGIN
			SELECT	@course = RC_Course, @course_CB = RC_Course_CB 
			FROM	dbo.RealCourses
			WHERE	RC_RCod1=@rateFrom and
					RC_RCod2=@rateTo and
					@date between RC_DateBeg and RC_DateEnd
			if @type = 2
				Set @course = @course_CB
		END

		If @course > 0
		BEGIN
			set @cost = @costIn/@course
			Return @cost
		END
		ELSE
		BEGIN
			If ISNULL(@type,0) = 0
				SELECT	@course = Cr_Course 
				FROM	dbo.Courses
				WHERE	CR_RCod2 = @rateFrom and
						CR_RCod1=@rateTo and
						@date between Cr_DateBeg and Cr_DateEnd
			ELSE
			BEGIN
				SELECT	@course = RC_Course, @course_CB = RC_Course_CB  
				FROM	dbo.RealCourses
				WHERE 	RC_RCod2 = @rateFrom and
						RC_RCod1=@rateTo and
						@date between RC_DateBeg and RC_DateEnd
				if @type = 2
					Set @course = @course_CB
			END
			If @course > 0
			BEGIN
				Set @cost = @costIn*@course
				Return @cost
			END
		END
	END
	Return -99999999
END
GO

GRANT EXECUTE ON dbo.ExchangeCostF To PUBLIC
GO
/***********************************************/

--091030(AlterColumns_Clients).sql
--7.2 - 9.2
IF(60 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='Clients' and COLUMN_NAME='CL_BIRTHCITY')) 
ALTER TABLE dbo.Clients ALTER COLUMN CL_BIRTHCITY VARCHAR(60) COLLATE Cyrillic_General_CS_AS
GO

IF(60 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='Clients' and COLUMN_NAME='CL_POSTCITY')) 
ALTER TABLE dbo.Clients ALTER COLUMN CL_POSTCITY VARCHAR(60) COLLATE Cyrillic_General_CS_AS
GO

IF(10 > (SELECT CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_SCHEMA.COLUMNS 
	WHERE TABLE_SCHEMA='dbo' and TABLE_NAME='Clients' and COLUMN_NAME='CL_POSTBILD')) 
ALTER TABLE dbo.Clients ALTER COLUMN CL_POSTBILD VARCHAR(10) COLLATE Cyrillic_General_CS_AS
GO

--Изменение версии

update [dbo].[setting] set st_version = '9.2.4', st_moduledate = convert(datetime, '2009-10-15', 120),  st_financeversion = '7.2.32', st_financedate = convert(datetime, '2009-10-08', 120)
GO
UPDATE dbo.SystemSettings SET SS_ParmValue='2009-10-15' WHERE SS_ParmName='SYSScriptDate'
GO