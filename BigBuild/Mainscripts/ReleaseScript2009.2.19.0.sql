/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*%%%%%%%%%%%%%%%%%%%%%%%% Дата формирования: 23.05.2013 17:48 %%%%%%%%%%%%%%%%%%%%%%%%*/
/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

/*********************************************************************/
/* begin (2013.06.13)_CheckSQLVersion.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2012-09-13</DATE>	
-- скрипт для проверки версии SQL-сервера

declare @minMajorVersion as int
declare @minMinorVersion as int
declare @minReleaseVersion as int

set @minMajorVersion = 10
set @minMinorVersion = 50
set @minReleaseVersion = 1600

DECLARE @ValidVersion bit
declare @ServerVersion varchar(250)
DECLARE @MajorVer int
DECLARE @MinorVer int
DECLARE @ReleaseVer int

set @ServerVersion = CAST(serverproperty('ProductVersion') AS nvarchar)
set @ServerVersion = @ServerVersion + '.'

-- get current server version
declare @lastDotIndex as int
declare @curDotIndex as int

set @lastDotIndex = CHARINDEX('.', @ServerVersion)
SET @MajorVer = convert(int, SUBSTRING(@ServerVersion, 1, @lastDotIndex - 1))

set @curDotIndex = CHARINDEX('.', @ServerVersion, @lastDotIndex + 1)
SET @MinorVer = convert(int, SUBSTRING(@ServerVersion, @lastDotIndex+1, @curDotIndex - @lastDotIndex - 1))
set @lastDotIndex = @curDotIndex

set @curDotIndex = CHARINDEX('.', @ServerVersion, @lastDotIndex + 1)
SET @ReleaseVer = convert(int, SUBSTRING(@ServerVersion, @lastDotIndex+1, @curDotIndex - @lastDotIndex - 1))
 
SET @ValidVersion = 0

-- check version minimum requirements
if (@MajorVer > @minMajorVersion) or (@MajorVer = @minMajorVersion and ((@MinorVer > @minMinorVersion) or (@MinorVer = @minMinorVersion and @ReleaseVer >= @minReleaseVersion)))
	SET @ValidVersion = 1

IF(@ValidVersion = 0)
begin
	print 'Используемая версия MS SQL Server — ' + CAST(serverproperty('ProductVersion') AS nvarchar) 
		+ ', для корректного обновления и работы ПК "Мастер-Тур" нужна версия не ниже MS SQL Server 2008 R2 (' 
		+ convert(nvarchar(5), @minMajorVersion) + '.' 
		+ convert(nvarchar(5), @minMinorVersion) + '.'
		+ convert(nvarchar(5), @minReleaseVersion) + ').'
end

GO
/*********************************************************************/
/* end (2013.06.13)_CheckSQLVersion.sql */
/*********************************************************************/


/*********************************************************************/
/* begin sp_RecreateDependentObjects.sql */
/*********************************************************************/
if exists(select top 1 1 from sys.objects where name = 'RecreateDependentObjects' and type = 'P')
	drop procedure RecreateDependentObjects
go

create procedure RecreateDependentObjects
-- выполняет указанный скрипт после удаления и до создания зависимых от колонки @ColumnName объектов
-- сейчас в качестве зависимых объектов поддерживаются только некластеризованные и кластеризованные индексы
--<VERSION>9.2.19</VERSION>
--<DATE>2013-12-05</DATE>
(
	@TableName sysname,				-- имя таблицы, колонка которой удаляется
	@ColumnName sysname,			-- имя удаляемой колонки
	@CustomScript nvarchar(max),	-- скрипт, выполняемый между созданием и удалением зависимых объектов
	@recreateWithoutColumn bit = 0	-- флаг, указывающий, что в зависимые объекты надо пересоздавать без переданной колонки
)
as
begin
	-- ANSI_PADDING OFF setting is incompatible with xml data types, used in this stored procedure
	SET ANSI_PADDING ON;

	declare @errorMessage nvarchar(max)

	-- check arguments
	if not exists (select top 1 1 from sys.tables where name = @TableName)
	begin
		set @errorMessage = 'Table ' + @TableName + ' was not found in database.'
		RAISERROR(@errorMessage, 16, 1)
		return
	end

	if not exists (select top 1 1 from sys.columns where name = @ColumnName)
	begin
		set @errorMessage = 'Column ' + @ColumnName + ' was not found in database.'
		RAISERROR(@errorMessage, 16, 1)
		return
	end

	if not exists (select top 1 1 from sys.columns where name = @ColumnName and object_id = object_id(@TableName))
	begin
		set @errorMessage = 'Incorrect parameters: column ' + @ColumnName + ' doesn''t belong to table ' + @TableName
		RAISERROR(@errorMessage, 16, 1)
		return
	end

	-- признак, что пересоздание ссылающихся на колонку объектов прошло успешно
	declare @updateReferencesComplete as bit
	declare @errmsg as nvarchar(max)

	-- обработка индексов
	declare @ixName sysname
	declare @ixType tinyint

	declare @totalSql as nvarchar(max)
	declare @dropIndexSql as nvarchar(max)
	declare @createIndexSql as nvarchar(max)
	set @dropIndexSql = ''
	set @createIndexSql = ''

	declare indexesCursor cursor for
	select ix.name, ix.type
	from sys.tables tab
	left join sys.indexes ix on ix.object_id = tab.object_id
	where tab.name = @TableName
		and exists (select top 1 1 
					from sys.index_columns ic
					left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
					where ic.index_id = ix.index_id 
						and ic.object_id = tab.object_id
						and col.name = @ColumnName
					)

	open indexesCursor

	begin try

	fetch next from indexesCursor into @ixName, @ixType
	while @@FETCH_STATUS = 0
	begin
		if @ixType <> 2 and @ixType <> 1
		begin
			set @errmsg = 'Not supported index type is dependent on specified column ' + @ColumnName + '
			This stored procedure supports only nonclustered and clustered indexes recreation! Not supported index name: ' 
				+ @ixName + ' on table: ' + @TableName
			RAISERROR(@errmsg, 16, 1)
		end

		declare @indexColumns nvarchar(max)
		declare @includedColumns nvarchar(max)

		set @indexColumns = ''
		set @indexColumns = stuff((select ',' + col.name + 
					case
						when ic.is_descending_key = 1 then ' desc'
						else ' asc'
					end
					from sys.tables tab
					left join sys.indexes ix on ix.object_id = tab.object_id
					left join sys.index_columns ic on ic.object_id = tab.object_id and ic.index_id = ix.index_id
					left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
					where ic.index_id = ix.index_id 
						and ic.object_id = tab.object_id
						and ic.is_included_column = 0
						and ((@recreateWithoutColumn = 1 and col.name <> @ColumnName) or @recreateWithoutColumn = 0)
						and tab.name = @TableName
						and ix.name = @ixName
					for xml path(''), type
					).value('.', 'varchar(max)'),1,1,'')

		set @includedColumns = stuff((select ',' + col.name
					from sys.tables tab
					left join sys.indexes ix on ix.object_id = tab.object_id
					left join sys.index_columns ic on ic.object_id = tab.object_id and ic.index_id = ix.index_id
					left join sys.columns col on col.column_id = ic.column_id and col.object_id = tab.object_id
					where ic.index_id = ix.index_id 
						and ic.object_id = tab.object_id
						and ic.is_included_column = 1
						and ((@recreateWithoutColumn = 1 and col.name <> @ColumnName) or @recreateWithoutColumn = 0)
						and tab.name = @TableName
						and ix.name = @ixName
					for xml path(''), type
					).value('.', 'varchar(max)'),1,1,'')

		set @dropIndexSql = @dropIndexSql + '
			drop index [@ixName] on [@TableName]'

		if @indexColumns is not null
		begin
			set @createIndexSql = @createIndexSql + 
			'
			create @indexType index [@ixName] on [@TableName]
			(
				@indexColumns
			)'

			if @includedColumns is not null
			begin
				set @createIndexSql = @createIndexSql + 
				'
				include
				(
					@includedColumns
				)
				'
				set @createIndexSql = replace(@createIndexSql, '@includedColumns', isnull(@includedColumns, ''))
			end
			set @createIndexSql = @createIndexSql + 
			'
			WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, 
				ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, FILLFACTOR = 70) ON [PRIMARY]
			'
			set @createIndexSql = replace(@createIndexSql, '@indexColumns', @indexColumns)
			set @createIndexSql = replace(@createIndexSql, '@indexType', case when @ixType = 2 then 'nonclustered' when @ixType = 1 then 'clustered' end)
		end

		set @createIndexSql = replace(@createIndexSql, '@ixName', @ixName)
		set @createIndexSql = replace(@createIndexSql, '@TableName', @TableName)
		set @dropIndexSql = replace(@dropIndexSql, '@ixName', @ixName)
		set @dropIndexSql = replace(@dropIndexSql, '@TableName', @TableName)

		fetch next from indexesCursor into @ixName, @ixType
	end
	end try
	begin catch 
		set @errmsg = error_message()
		set @updateReferencesComplete = 0
	end catch

	close indexesCursor
	deallocate indexesCursor

	if @updateReferencesComplete = 0
	begin
		RAISERROR(@errmsg, 16, 1)
		return
	end

	-- execute custom script between drop and recreate dependent objects
	set @totalSql = '
	begin transaction dropAndCreate
	' + @dropIndexSql + '
	' + @customScript + '
	' + @createIndexSql + '
	commit transaction dropAndCreate
	'

	exec sp_executesql @totalSql
end

GO

grant exec on RecreateDependentObjects to public

GO
/*********************************************************************/
/* end sp_RecreateDependentObjects.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.22)_Alter_Accmdmentype_Recreate_CalculatedColumns.sql */
/*********************************************************************/
-- Task 10657 10.01.2013
exec RecreateDependentObjects 'Accmdmentype', 'AC_NRealPlaces',
'if exists (select top 1 1 from sys.columns col left join sys.tables tab on col.object_id = tab.object_id where col.name = ''AC_NRealPlaces'' and tab.name = ''Accmdmentype'')
ALTER TABLE [dbo].[Accmdmentype]
   DROP COLUMN AC_NRealPlaces 

ALTER TABLE [dbo].[Accmdmentype]
   ADD AC_NRealPlaces AS ( 
   (case when [AC_NADMAIN] IS NULL AND [AC_NCHMAIN] IS NULL then NULL 
   else isnull([AC_NADMAIN],(0))+isnull([AC_NCHMAIN],(0)) end) )
'

exec RecreateDependentObjects 'Accmdmentype', 'AC_NMenExBed', '
if exists (select top 1 1 from sys.columns col left join sys.tables tab on col.object_id = tab.object_id where col.name = ''AC_NMenExBed'' and tab.name = ''Accmdmentype'')
ALTER TABLE [dbo].[Accmdmentype]
   DROP COLUMN AC_NMenExBed 

ALTER TABLE [dbo].[Accmdmentype]
   ADD AC_NMenExBed AS ( 
   (case when [AC_NADEXTRA] IS NULL AND [AC_NCHEXTRA] IS NULL then NULL 
   else isnull([AC_NADEXTRA],(0))+isnull([AC_NCHEXTRA],(0)) end) )
'

if exists (select top 1 1 from sys.fn_listextendedproperty('MS_Description', 'SCHEMA', 'dbo', 'TABLE', 'Accmdmentype', 'COLUMN', 'AC_NRealPlaces'))
	exec sp_dropextendedproperty @name=N'MS_Description', @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Accmdmentype', @level2type=N'COLUMN',@level2name=N'AC_NRealPlaces'

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Реальное количество основных мест' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Accmdmentype', @level2type=N'COLUMN',@level2name=N'AC_NRealPlaces'
GO

if exists (select top 1 1 from sys.fn_listextendedproperty('MS_Description', 'SCHEMA', 'dbo', 'TABLE', 'Accmdmentype', 'COLUMN', 'AC_NMenExBed'))
	exec sp_dropextendedproperty @name=N'MS_Description', @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Accmdmentype', @level2type=N'COLUMN',@level2name=N'AC_NMenExBed'

EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'Количество дополнительных мест' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Accmdmentype', @level2type=N'COLUMN',@level2name=N'AC_NMenExBed'
GO

if dbo.mwReplIsPublisher() > 0
begin
	if exists (select top 1 1 from sys.databases where name = 'distribution')
	begin
		if exists (select * from distribution.dbo.mspublications
								where publication = 'MW_PUB'
									and publisher_db = db_name())
		begin
			if exists (select * 
							from distribution.dbo.msarticles
							where publisher_db = db_name()
								and source_object = 'Accmdmentype'
								and publication_id in (select publication_id from distribution.dbo.mspublications
														where publication = 'MW_PUB')
							)
			begin
				-- если используется репликация, надо добавить новые колонки в синхронизацию
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NADMAIN', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NCHMAIN', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NADEXTRA', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NCHEXTRA', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NCHISINFMAIN', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
				exec sp_articlecolumn @publication = N'MW_PUB', @article = N'Accmdmentype', @column = N'AC_NCHISINFEXTRA', @operation = N'add', @force_invalidate_snapshot = 1, @force_reinit_subscription = 1
			end
		end
	end
end
else if dbo.mwReplIsSubscriber() > 0
begin
begin try
	declare @publicationName as varchar(100), @pubDBName as varchar(50)
	declare @sql nvarchar(max)

	set @publicationName = 'MW_PUB'
	set @sql = 'select @pubDBName = publisher_db from mt.distribution.dbo.MSpublications 
						where publication = ''' + ltrim(rtrim(@publicationName)) + ''''

	exec sp_executesql @sql, N'@pubDBName varchar(50) output', @pubDBName output

	set @sql = '
		-- синхронизируем данные
		update Accmdmentype
		set Accmdmentype.AC_CODE = pub.AC_CODE ,Accmdmentype.AC_NAME = pub.AC_NAME ,Accmdmentype.AC_MAIN = pub.AC_MAIN ,Accmdmentype.AC_AGEFROM = pub.AC_AGEFROM ,Accmdmentype.AC_AGETO = pub.AC_AGETO ,Accmdmentype.AC_CREATOR = pub.AC_CREATOR ,Accmdmentype.AC_UPDATEDATE = pub.AC_UPDATEDATE ,Accmdmentype.AC_Order = pub.AC_Order ,Accmdmentype.AC_StdKey = pub.AC_StdKey ,Accmdmentype.AC_CINNUM = pub.AC_CINNUM ,Accmdmentype.AC_AgeFrom2 = pub.AC_AgeFrom2 ,Accmdmentype.AC_AgeTo2 = pub.AC_AgeTo2 ,Accmdmentype.AC_Unicode = pub.AC_Unicode ,Accmdmentype.AC_NAMELAT = pub.AC_NAMELAT ,Accmdmentype.AC_PERROOM = pub.AC_PERROOM ,Accmdmentype.AC_NADMAIN = pub.AC_NADMAIN ,Accmdmentype.AC_NCHMAIN = pub.AC_NCHMAIN ,Accmdmentype.AC_NADEXTRA = pub.AC_NADEXTRA ,Accmdmentype.AC_NCHEXTRA = pub.AC_NCHEXTRA ,Accmdmentype.AC_NCHISINFMAIN = pub.AC_NCHISINFMAIN ,Accmdmentype.AC_NCHISINFEXTRA = pub.AC_NCHISINFEXTRA 
		from mt.[@pubDBName].dbo.Accmdmentype as pub
		where Accmdmentype.AC_KEY = pub.AC_KEY 
		and (ISNULL(Accmdmentype.AC_CODE, 0) <> ISNULL(pub.AC_CODE, 0) OR ISNULL(Accmdmentype.AC_NAME, 0) <> ISNULL(pub.AC_NAME, 0) OR ISNULL(Accmdmentype.AC_MAIN, 0) <> ISNULL(pub.AC_MAIN, 0) OR ISNULL(Accmdmentype.AC_AGEFROM, 0) <> ISNULL(pub.AC_AGEFROM, 0) OR ISNULL(Accmdmentype.AC_AGETO, 0) <> ISNULL(pub.AC_AGETO, 0) OR ISNULL(Accmdmentype.AC_CREATOR, 0) <> ISNULL(pub.AC_CREATOR, 0) OR ISNULL(Accmdmentype.AC_UPDATEDATE, 0) <> ISNULL(pub.AC_UPDATEDATE, 0) OR ISNULL(Accmdmentype.AC_Order, 0) <> ISNULL(pub.AC_Order, 0) OR ISNULL(Accmdmentype.AC_StdKey, 0) <> ISNULL(pub.AC_StdKey, 0) OR ISNULL(Accmdmentype.AC_CINNUM, 0) <> ISNULL(pub.AC_CINNUM, 0) OR ISNULL(Accmdmentype.AC_AgeFrom2, 0) <> ISNULL(pub.AC_AgeFrom2, 0) OR ISNULL(Accmdmentype.AC_AgeTo2, 0) <> ISNULL(pub.AC_AgeTo2, 0) OR ISNULL(Accmdmentype.AC_Unicode, 0) <> ISNULL(pub.AC_Unicode, 0) OR ISNULL(Accmdmentype.AC_NAMELAT, 0) <> ISNULL(pub.AC_NAMELAT, 0) OR ISNULL(Accmdmentype.AC_PERROOM, 0) <> ISNULL(pub.AC_PERROOM, 0) OR ISNULL(Accmdmentype.AC_NADMAIN, 0) <> ISNULL(pub.AC_NADMAIN, 0) OR ISNULL(Accmdmentype.AC_NCHMAIN, 0) <> ISNULL(pub.AC_NCHMAIN, 0) OR ISNULL(Accmdmentype.AC_NADEXTRA, 0) <> ISNULL(pub.AC_NADEXTRA, 0) OR ISNULL(Accmdmentype.AC_NCHEXTRA, 0) <> ISNULL(pub.AC_NCHEXTRA, 0) OR ISNULL(Accmdmentype.AC_NCHISINFMAIN, 0) <> ISNULL(pub.AC_NCHISINFMAIN, 0) OR ISNULL(Accmdmentype.AC_NCHISINFEXTRA, 0) <> ISNULL(pub.AC_NCHISINFEXTRA, 0))
				
		delete from Accmdmentype where AC_KEY not in (select AC_KEY from mt.[@pubDBName].dbo.Accmdmentype)

		insert into Accmdmentype( AC_KEY,AC_CODE,AC_NAME,AC_MAIN,AC_AGEFROM,AC_AGETO,AC_CREATOR,AC_UPDATEDATE,AC_Order,AC_StdKey,AC_CINNUM,AC_AgeFrom2,AC_AgeTo2,AC_Unicode,AC_NAMELAT,AC_PERROOM,AC_Description,AC_NADMAIN,AC_NCHMAIN,AC_NADEXTRA,AC_NCHEXTRA,AC_NCHISINFMAIN,AC_NCHISINFEXTRA ) 
		select AC_KEY,AC_CODE,AC_NAME,AC_MAIN,AC_AGEFROM,AC_AGETO,AC_CREATOR,AC_UPDATEDATE,AC_Order,AC_StdKey,AC_CINNUM,AC_AgeFrom2,AC_AgeTo2,AC_Unicode,AC_NAMELAT,AC_PERROOM,AC_Description,AC_NADMAIN,AC_NCHMAIN,AC_NADEXTRA,AC_NCHEXTRA,AC_NCHISINFMAIN,AC_NCHISINFEXTRA 
		from mt.[@pubDBName].dbo.Accmdmentype pub 
		where pub.AC_KEY not in (select AC_KEY from Accmdmentype) 
		'
	set @sql = replace(@sql, '@pubDBName', @pubDBName)
	exec(@sql)
end try
begin catch
	declare @errMsg as nvarchar(max)
	set @errMsg = 'Произошла ошибка при синхронизации таблицы Accmdmentype: ' + error_message()
	RAISERROR(@errMsg, 16, 1)
end catch
end
GO
/*********************************************************************/
/* end (2013.03.22)_Alter_Accmdmentype_Recreate_CalculatedColumns.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2012.10.22)_Create_Table_ReCalculateMarginResults.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateMarginResults]') AND type in (N'U'))
begin
	--<VERSION>2009.2.16</VERSION>
	--<DATE>2012-10-22</DATE>
	/*<SUMMARY>Создает темповую таблицу (частичная копия таблицы TP_TourMarginActualDate) для переливания обновленных записей с наценками в TP_TourMarginActualDate. 
	Наценки обрабатываются в сервисе TourMarginLogic(МТService) </SUMMARY>*/
	CREATE TABLE [dbo].[ReCalculateMarginResults](
		[RMR_Id] [int] IDENTITY(1,1) NOT NULL,
		[RMR_TmadId] [int] NOT NULL,
		[RMR_TRKey] [int] NOT NULL,
		[RMR_SvKey] [int] NOT NULL,
		[RMR_DateCheckIn] [datetime] NULL,
		[RMR_Percent][money] NULL,
		[RMR_IsCommission] [bit] NOT NULL,
		[RMR_CalculatingKey] [int] NOT NULL
	 CONSTRAINT [PK_ReCalculateMarginResults] PRIMARY KEY CLUSTERED 
	(
		[RMR_Id] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
end
go

grant select, insert, delete, update on [dbo].[ReCalculateMarginResults] to public
go
/*********************************************************************/
/* end (2012.10.22)_Create_Table_ReCalculateMarginResults.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2012.10.29)_Create_Type_ListIntValue.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ListIntValue' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ListIntValue] AS TABLE(
		-- список чисел
		[value] [int] NULL
	)
end
GO


/*********************************************************************/
/* end (2012.10.29)_Create_Type_ListIntValue.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2012.10.29)_Create_Type_ReCalculateAddCostResults.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ReCalculateAddCostResults' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ReCalculateAddCostResults] AS TABLE(
		[TrKey] [int] NOT NULL,
		[SvKey] [int] NOT NULL,
		[ScpId] [bigint] NOT NULL,
		[AddCostIsCommission] [money] NOT NULL,
		[AddCostNoCommission] [money] NOT NULL
	)
end
GO


/*********************************************************************/
/* end (2012.10.29)_Create_Type_ReCalculateAddCostResults.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2012.12.13)_Create_Type_ReCalculateCostResults.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'ReCalculateCostResults' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[ReCalculateCostResults] AS TABLE(
		[Id] [bigint] NOT NULL,
		[Netto] [money] NULL,
		[Gross] [money] NULL,
		[IsCommission] [bit] NOT NULL
	)
end
GO


/*********************************************************************/
/* end (2012.12.13)_Create_Type_ReCalculateCostResults.sql */
/*********************************************************************/

/*********************************************************************/
/* begin Create_Table_QueuesForRecalculateCosts.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QueuesForRecalculateCosts]') AND type in (N'U'))
begin
	--<VERSION>9.2.19</VERSION>
	--<DATE>2013-03-14</DATE>
	--<SUMMARY>
	--Создает таблицу для очередей при расчете цен
	--</SUMMARY>
	CREATE TABLE [dbo].[QueuesForRecalculateCosts](
		[QRC_Id] [bigint] IDENTITY(1,1) NOT NULL,
		[QRC_SPADId] [bigint] NOT NULL, -- ключ цены на услугу
		[QRC_SCPId] [bigint] NOT NULL, -- ключ услуги
		[QRC_QueueDate] [datetime] NOT NULL, -- дата постановки в очередь
		[QRC_CalcDate] [datetime] NULL,-- дата расчета
		[QRC_OldGross] [money] NULL,--нетто перед расчетом
		[QRC_OldNetto] [money] NULL,--брутто перед расчетом
		[QRC_NewGross] [money] NULL,--нетто после расчета
		[QRC_NewNetto] [money] NULL,--брутто после расчета
	 CONSTRAINT [PK_QueuesForRecalculateCosts] PRIMARY KEY CLUSTERED 
	(
		[QRC_Id] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
	) ON [PRIMARY]
end
go

grant select, insert, delete, update on [dbo].[QueuesForRecalculateCosts] to public
go
/*********************************************************************/
/* end Create_Table_QueuesForRecalculateCosts.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfGetActualPrice.sql */
/*********************************************************************/
		-- <version>2013.03.13</version>
		-- <data>2013-03-13</data>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WcfGetActualPrice]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WcfGetActualPrice]
GO
CREATE PROCEDURE WcfGetActualPrice
--Список ключей цен через запятую
	@tpKeys nvarchar(max)
AS
BEGIN	
	declare @commandLine varchar(2000), @path varchar(2000)
	
	select @path = SS_ParmValue from SystemSettings where SS_ParmName = 'PathToWcfClient'
	
	set @commandLine = @path + ' GetActualPrice'
	set @commandLine = @commandLine + ' "' + @tpKeys + '"'
	
	create table #resultTable
	(
		id int identity(1, 1),
		PC_TPKey int,
		PC_SummPrice money
	)
	
	create table #serviceTable
	(
		id int identity(1, 1),
		value nvarchar(max)
	)

	insert into #serviceTable
	exec xp_cmdshell @commandLine
	--структура результата PriceId, TourKey, SummPrice (на отдельных строках)
	
	Declare @i int, @count int
	set @count = (select count(*) from #serviceTable) - 1 --т.к. последняя строка, которая всегда приходит от WcfClient - это null, она не нужна
	set @i = 1
	
	while(@i<=@count) begin
	
		DECLARE @tourPriceKey int, @summPrice money
		Set @tourPriceKey = (select value from #serviceTable where id=@i)
		set @summPrice = (select replace(value,',','.') from #serviceTable where id=@i+2)
		set @i=@i+3
		
		insert into #resultTable(PC_TPKey, PC_SummPrice) values (@tourPriceKey, @summPrice)	
	end
	
	insert into #tmp (tpKey, newPrice)	
	select PC_TPKey, PC_SummPrice from #resultTable  order by PC_TPKey
END
GO

grant exec on [dbo].[WcfGetActualPrice] to public
go
/*********************************************************************/
/* end sp_WcfGetActualPrice.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwCheckFlightGroupsQuotes.sql */
/*********************************************************************/
if object_id('dbo.mwCheckFlightGroupsQuotes', 'p') is not null
	drop proc dbo.mwCheckFlightGroupsQuotes
go

create proc [dbo].[mwCheckFlightGroupsQuotes]
	@pagingType int,
	@chkey int,
	@flightGroups varchar(256),
	@agentKey int,
	@partnerKey int,
	@tourdate datetime,
	@day int,
	@requestOnRelease int,
	@noPlacesResult int,
	@checkAgentQuota int,
	@checkCommonQuota int,
	@checkNoLongQuota int,
	@findFlight smallint,
	@pkkey int,
	@tourDays int,
	@expiredReleaseResult int,
	@aviaQuotaMask smallint,
	@result varchar(256) output,	-- формат: <FreePlaces>:<TotalPlaces> [ | ...n]
	@linked_day int = null,
	@requestedPlaces int = 1
as
begin

	--<VERSION>9.2.18</VERSION>
	--<DATE>2013-02-19</DATE>
	if exists (select top 1 1 from SystemSettings with (nolock) where SS_ParmName = 'ServiceFlightSelection' and SS_ParmValue = 1)
	begin
		Declare @charterDateToService datetime
		set @charterDateToService = DATEADD(DAY, @day - 1, @tourdate)

		create table #resultTable
		(
			id int identity(1, 1),
			value nvarchar(max)
		)

		insert into #resultTable
		EXEC	[dbo].[WcfCheckFlightGroupQuotas]
				@charterGroupsString = @flightGroups,
				@charterKey = @chkey,
				@charterDate = @charterDateToService,
				@aviaQuotaMask = @aviaQuotaMask,
				@packetKey = @pkkey,
				@agentKey = @agentKey,
				@requestedPlaces = @requestedPlaces,
				@tourDuration = @tourDays

		select @result = value from #resultTable where id = 1
		Return;
	end
	
	-- настройки проверки квот через веб-сервис
	declare @checkQuotesOnWebService as bit, @checkQuotesService as nvarchar(150), @wasErrorCallingService bit
	set @checkQuotesOnWebService = 0
	set @wasErrorCallingService = 0
	select top 1 @checkQuotesOnWebService = ss_parmvalue from systemsettings with (nolock) where ss_parmname = 'NewSetToQuota'	

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @now datetime, @percentPlaces float
	select @now = currentDate from dbo.mwCurrentDate

	if(@aviaQuotaMask is null)
		set @aviaQuotaMask = 0

	declare @correctionResult varchar(128)
	set @result = ''
	set @correctionResult = ''

	declare @gpos int, @pos int, @gplaces int, @gallplaces int, @tmpPlaces int, @checkQuotesResult nvarchar(max), @tmpPlacesAll int, @gStep smallint, @gCorrection int
	set @gpos = 1
	
	declare @gseparatorPos int, @separatorPos int,
		@groupKeys varchar(256), @key varchar(256), @nkey int,
		@glen int, @len int

	set @glen = len(@flightGroups)
	while(@gpos < @glen)
	begin
		set @gseparatorPos = charindex('|', @flightGroups, @gpos)
		if(@gseparatorPos = 0)
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @glen - @gpos + 1)	
			set @gpos = @glen
		end
		else
		begin
			set @groupKeys = substring(@flightGroups, @gpos, @gseparatorPos - @gpos)
			set @gpos = @gseparatorPos + 1
		end

		if(len(@result) > 0)
		begin
			set @result = @result + '|'
			if(@pagingType = @DYNAMIC_SPO_PAGING)
			begin
				set @correctionResult = @correctionResult + '|'
			end
		end

		set @gplaces = 0
		set @gallplaces = 0
		set @pos = 1
		set @len = len(@groupKeys)		
		while(@pos < @len)
		begin
			set @separatorPos = charindex(',', @groupKeys, @pos)
			if(@separatorPos = 0)
			begin
				set @key = substring(@groupKeys, @pos, @len - @pos + 1)	
				set @pos = @len
			end
			else
			begin
				set @key = substring(@groupKeys, @pos, @separatorPos - @pos)
				set @pos = @separatorPos + 1
			end

			set @nkey = cast(@key as int)
			if @checkQuotesOnWebService = 1
			begin
				-- включена проверка квот через веб-сервис
				-- подбор перелетов
				declare @cityFrom as int, @cityTo as int
				declare @charterDate datetime, @dayOfWeek int
				select top 1 @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @chkey
				set @charterDate = DATEADD(DAY, @day - 1, @tourdate)
				
				set @wasErrorCallingService = 1	-- в случае, если сервис проверки не отработает - установим признак ошибки, чтобы проверить квоты старым способом
				
				set @dayOfWeek = datepart(dw, @charterDate) - 1
				if(@dayOfWeek = 0)
					set @dayOfWeek = 7

				declare altCharters cursor for
				select ch_key from
				(
					select distinct ch_key, case when ch_key=@chkey then 1 else 0 end as pr 
					from Charter with (nolock)
					left join AirSeason with (nolock) on AS_CHKEY = CH_KEY
					inner join tbl_costs with(nolock) on (cs_svkey = 1 
														and cs_code = ch_key 
														and (@charterDate between cs_date and cs_dateend
															or @charterDate between cs_checkindatebeg and cs_checkindateend)
														and cs_subcode1=@nkey 
														and cs_pkkey = @pkkey)
					where (@findFlight <> 0 or ch_key=@chkey)
						and CH_CITYKEYFROM = @cityFrom
						and CH_CITYKEYTO = @cityTo
						and (AS_WEEK is null 
								or len(as_week)=0 
								or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
						and @charterDate between as_dateFrom and as_dateto
				) as alts
				order by pr desc
				
				declare @remPlaces int, @remPlacesAll int, @remResult int
				create table #charterPlacesResult
				(
					xPlaces int,
					xPlacesAll int,
					xPriority int
				)

				declare @altChKey as int
				open altCharters

				fetch next from altCharters into @altChKey
				while @@FETCH_STATUS = 0
				begin
					declare @dateFrom datetime, @dateTo datetime
					set @dateFrom = dateadd(day, @day-1, @tourdate)
					set @dateTo = dateadd(day, @day-1, @tourdate)

					begin try							
						exec mwCheckQuotaOneResult 1, 1, @altChKey, @nkey, @dateFrom, @dateTo,
							0, @agentKey, @tourDays, @requestedPlaces, null, @checkQuotesResult output, @tmpPlaces output, @tmpPlacesAll output
						
						set @wasErrorCallingService = 0						
					end try
					begin catch
						set @wasErrorCallingService = 1
						break
					end catch
								
					declare @freePlacesMask as int

					if @checkQuotesResult in ('StopSale', 'NoPlaces')
						set @freePlacesMask = 2	-- no places
					else if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
					begin
						set @freePlacesMask = 4	-- request
						set @tmpPlaces = -1
					end
					else if @checkQuotesResult = 'QuotaExist'
						set @freePlacesMask = 1	-- yes
						
					if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
					begin
						declare @priority int
						if (@freePlacesMask = 1)
							set @priority = 1
						else if (@freePlacesMask = 4)
							set @priority = 2
						else
							set @priority = 3
						insert into #charterPlacesResult (xPlaces, xPlacesAll, xPriority) values (@tmpPlaces, @tmpPlacesAll, @priority)
					end
					
					fetch next from altCharters into @altChKey
				
				end
				
				if @wasErrorCallingService = 0
				begin
					select top 1 @tmpPlaces = xPlaces, @tmpPlacesAll = xPlacesAll from #charterPlacesResult order by xPriority asc					
				end
				
				close altCharters
				deallocate altCharters
				
				drop table #charterPlacesResult
			end
			
			-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
			-- ошибки работы с веб-сервисом проверки квот
			if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
			begin
				select @tmpPlaces = qt_places, @tmpPlacesAll = qt_allPlaces
				from dbo.mwCheckQuotesEx2(1, @chkey, @nkey, 0, @agentKey, @partnerKey, @tourdate,
					@day, 1, @requestOnRelease, @noPlacesResult, @checkAgentQuota,
					@checkCommonQuota, @checkNoLongQuota, @findFlight, 0, 0, @pkkey,
					@tourDays, @expiredReleaseResult, @linked_day)
			end

			if(@gplaces = 0 or (@tmpPlaces > 0 and @tmpPlaces > @gplaces))
			begin
				set @gplaces = @tmpPlaces
				set @gallplaces = @tmpPlacesAll

				if(@pagingType = @DYNAMIC_SPO_PAGING)
				begin
					set @percentPlaces = 0.0
					if(@gplaces > 0 and @gallplaces > 0)
						set @percentPlaces = 1.0*@gplaces/@gallplaces
					exec dbo.GetDynamicCorrections @now,@tourdate,1,@chkey,@nkey,0,@percentPlaces, @gStep output, @gCorrection output				
				end
			end

			if(@gplaces > 0)
				break	
		end

		set @result = @result + cast(@gplaces as varchar) + ':' + cast(@gallplaces as varchar)
		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @correctionResult = @correctionResult + cast(@gCorrection as varchar) + ':' + cast(@gStep as varchar)
	end

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @result = @result + '#' + @correctionResult
end
go

grant exec on dbo.mwCheckFlightGroupsQuotes to public
go
/*********************************************************************/
/* end sp_mwCheckFlightGroupsQuotes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwCheckQuotesCycle.sql */
/*********************************************************************/
-- добавление настройки, по которой включается проверка квот через веб-сервис
if (not exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota'))
begin
	insert into SystemSettings (SS_ParmName, SS_ParmValue)
	values ('NewSetToQuota', 0)
end

if (not exists (select top 1 1 from SystemSettings where SS_ParmName = 'CheckQuotesWebService'))
begin
	insert into SystemSettings (SS_ParmName, SS_ParmValue)
	values ('CheckQuotesWebService', '')
end

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwCheckQuotesCycle]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwCheckQuotesCycle]
GO

CREATE procedure [dbo].[mwCheckQuotesCycle]
--<VERSION>9.2.18.2</VERSION>
--<DATE>2013-03-06</DATE>
@pagingType	smallint,
@pageNum	int,		-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
@pageSize	int,
@agentKey	int,
@hotelQuotaMask smallint,
@aviaQuotaMask smallint,
@flightGroups	varchar(256),
@checkAgentQuota smallint,
@checkCommonQuota smallint,
@checkNoLongQuota smallint,
@requestOnRelease smallint,
@expiredReleaseResult int,
@noPlacesResult int,
@findFlight smallint = 0,	-- параметр устарел, вместо него используется признак подбора перелета. Оставлен для совместимости.
-- 4864 gorshkov
-- признак того, что мы подбираем варианты для подмешивания в поиск
@smartSearch bit = 0,
@tableName varchar(256) = null
as
begin
	-- настройки проверки квот через веб-сервис
	declare @checkQuotesOnWebService as bit, @checkQuotesService as nvarchar(150), @wasErrorCallingService bit
	set @checkQuotesOnWebService = 0
	set @wasErrorCallingService = 0
	select top 1 @checkQuotesOnWebService = ss_parmvalue from systemsettings with (nolock) where ss_parmname = 'NewSetToQuota'

	declare @sAviaTariffFirst varchar(10), @sAviaTariffSecond varchar(10), 
	@nAviaTariffFirst smallint, @nAviaTariffSecond smallint
	
	declare @initialFindflight int
	set @initialFindflight = @findFlight

	declare @GREEN_LABEL smallint, @YELLOW_LABEL smallint, @RED_LABEL smallint
	set @GREEN_LABEL = 1
	set @YELLOW_LABEL = 4
	set @RED_LABEL = 2

	declare @step_index smallint, @price_correction int, @additional varchar(2000)
	
	if (@smartSearch = 1)
	begin
		-- хранит ключи отелей которые были подмешаны в поиск
		declare @smartSearchKeys table (hdKey int);
	end
	else
	begin
		-- настройка включающая SmartSearch
		declare @mwUseSmartSearch int
		select @mwUseSmartSearch=isnull(SS_ParmValue,0) from dbo.systemsettings 
		where SS_ParmName='mwUseSmartSearch'
		-- пока SmartSearch работает с только с ACTUALPLACES_PAGING
		if (@pagingType <> 2)
		begin
			set @mwUseSmartSearch = 0
		end
	end

	declare @mwCheckInnerAviaQuotes int
	select @mwCheckInnerAviaQuotes = isnull(SS_ParmValue,0) from dbo.systemsettings 
	where SS_ParmName = 'mwCheckInnerAviaQuotes'

	declare @DYNAMIC_SPO_PAGING smallint
	set @DYNAMIC_SPO_PAGING=3

	declare @tmpHotelQuota varchar(10), @tmpThereAviaQuota varchar(256), @tmpBackAviaQuota varchar(256), @allPlaces int,@places int,@actual smallint,@tmp varchar(256),
			@ptkey int,@pttourkey int, @ptpricekey bigint, @hdkey int,@rmkey int,@rckey int,@tourdate datetime,@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,	@chday int,@chpkkey int,@chprkey int,@chbackday int,
		@chbackpkkey int,@chbackprkey int,@days int, @rowNum int, @hdStep smallint, @reviewed int,@selected int, @hdPriceCorrection int, 
		@pt_directFlightAttribute int, @pt_backFlightAttribute int, @pt_mainplaces int, @pt_hrkey int, @sql varchar(max)

	declare @pt_chdirectkeys varchar(256), @pt_chbackkeys varchar(256)
	declare @tmpAllHotelQuota varchar(128),@pt_hddetails varchar(256)

	set @reviewed= @pageNum
	set @selected=0

	declare @now datetime, @percentPlaces float, @pos int
	declare @dateFrom datetime, @dateTo datetime
	set @now = getdate()
	set @pos = 0

	fetch next from quotaCursor into
	@ptkey,	
	@pttourkey,
	@ptpricekey,
	@hdkey,
	@rmkey,
	@rckey,
	@tourdate,
	@hdday,
	@hdnights,
	@hdprkey,
	@chday,
	@chpkkey,
	@chprkey,
	@chbackday,
	@chbackpkkey,
	@chbackprkey,
	@days,
	@chkey,
	@chbackkey,
	@rowNum, 
	@pt_chdirectkeys, 
	@pt_chbackkeys, 
	@pt_hddetails, 
	@pt_directFlightAttribute, 
	@pt_backFlightAttribute,
	@pt_mainplaces,
	@pt_hrkey

	declare @priceKeysPackIndex int; set @priceKeysPackIndex = 0;
	declare @priceKeysPackSize int; set @priceKeysPackSize = 100;
	declare @priceKeysPackString varchar(1800); set @priceKeysPackString = '';
	declare @serviceFlightSelection int; select @serviceFlightSelection = SS_ParmValue from SystemSettings with (nolock) where SS_ParmName = 'ServiceFlightSelection';
	
	while(@@fetch_status=0 and @selected < @pageSize)
	begin 
		if (@serviceFlightSelection = 1)
		begin
			
			set @priceKeysPackIndex = @priceKeysPackIndex + 1;
			set @priceKeysPackString = @priceKeysPackString + ',' + @ptpricekey
		
			if (@priceKeysPackIndex = @priceKeysPackSize)
			begin
				insert into #paging (ptKey, pt_hdquota, ptpricekey, pt_chtherequota, pt_chbackquota, chkey, chbackkey, priceCorrection, pt_hdallquota, pt_smartSearch)
				exec WcfCheckQuotaCycle @priceKeysPackString;
				set @priceKeysPackString = '';
				set @priceKeysPackIndex = 0;
			end
			
		end
		else
		begin
			if (@pos >= @pageNum 
			-- для подмешиваемых вариантов - интересует только одно размещение для каждого отеля
			and (@smartSearch = 0 or not exists (select top 1 1 from @smartSearchKeys where hdKey = @hdkey)))
			begin
				set @actual=1
				if(@aviaQuotaMask > 0)
				begin		
					declare @editableCode int
					set @editableCode = 2
					declare @isEditableService bit
					set @tmpThereAviaQuota=null
					if(@chkey > 0)
					begin 
						if @pt_directFlightAttribute is null
						begin
							--kadraliev MEG00025990 03.11.2010 Если в туре запрещено менять рейс, устанавливаем @findFlight = 0
							exec dbo.mwGetServiceIsEditableAttribute @pttourkey, @chkey, @chday, @days, @chprkey, @chpkkey, @isEditableService output
							if (@isEditableService = 0)
								set @pt_directFlightAttribute = 0
							else
								set @pt_directFlightAttribute = 2
							if (@tableName is not null)
							begin
								set @sql = 'update ' + @tableName + ' set pt_directFlightAttribute = ' + ltrim(str(@pt_directFlightAttribute)) + ' where pt_key = ' + ltrim(str(@ptkey))
								exec (@sql)
							end
						end
						set @findFlight = (@pt_directFlightAttribute & 2) / 2
						
						set @places=0
						EXEC [dbo].[mwCacheQuotaSearch] 1, @chkey, 0, 0, @tourdate, @chday, @days, @chprkey, @chpkkey, 
							@tmpThereAviaQuota OUTPUT, @places output, @step_index output, @price_correction output, @additional output, @findFlight

						if (@tmpThereAviaQuota is null)
						begin		
							
							set @tmpThereAviaQuota = ''
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, 
								@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey,
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output, @chbackday, @pt_mainplaces
							if len(ISNULL(@tmpThereAviaQuota, '')) != 0
							begin
								set @nAviaTariffFirst=0
								set @nAviaTariffSecond=0
								if len(@tmpThereAviaQuota)!=0
								BEGIN
									select 
										@sAviaTariffFirst = LEFT(@tmpThereAviaQuota,PATINDEX('%:%',@tmpThereAviaQuota)-1),
										@sAviaTariffSecond = LEFT(
										SUBSTRING(@tmpThereAviaQuota,PATINDEX('%|%',@tmpThereAviaQuota)+1,LEN(@tmpThereAviaQuota)-PATINDEX('%|%',@tmpThereAviaQuota)),
										PATINDEX('%:%',SUBSTRING(@tmpThereAviaQuota,PATINDEX('%|%',@tmpThereAviaQuota)+1,LEN(@tmpThereAviaQuota)-PATINDEX('%|%',@tmpThereAviaQuota)))-1)
									IF ISNUMERIC(@sAviaTariffFirst)=1
										set @nAviaTariffFirst=CAST(@sAviaTariffFirst as smallint)
									IF ISNUMERIC(@sAviaTariffSecond)=1
										set @nAviaTariffSecond=CAST(@sAviaTariffSecond as smallint)
									SET @places = abs(@nAviaTariffFirst)+abs(@nAviaTariffSecond)
								END

								EXEC [dbo].[mwCacheQuotaInsert] 1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota, @places, 0, 0, @additional, @findFlight
							end
						end		
						
						if len(@tmpThereAviaQuota)!=0
						begin
							-- проверка наличия мест на прямом перелете на соответствие маске квот
							-- проверяются все классы перелетов, если хотя бы один подходит - результат принимается
							declare @curIndex as int
							set @curIndex = 1
							
							declare @quota as varchar(260)
							set @quota = @tmpThereAviaQuota + '|'

							set @actual=0

							while @curIndex <= LEN(@quota)
							begin

								declare @freePlaces as int
								declare @freePlacesString as varchar(20)
								
								set @freePlaces = 0
								
								set @freePlacesString = SUBSTRING(@quota, @curIndex, CHARINDEX(':', @quota, @curIndex)-@curIndex)
								if ISNUMERIC(@freePlacesString) = 1
									set @freePlaces = CAST(@freePlacesString as smallint)
								
								set @curIndex = CHARINDEX('|', @quota, @curIndex)+1

								declare @freePlacesMask as int

								if @freePlaces = 0
									set @freePlacesMask = 2	-- no places
								else if @freePlaces < 0
									set @freePlacesMask = 4	-- request
								else
									set @freePlacesMask = 1	-- yes
									
								if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
								begin
									-- прямой перелет удовлетворяет маске квот, прекращаем проверку
									set @actual=1
									break
								end
							end
						end
						else
							set @actual=0
					end
					if(@actual > 0)
					begin
						set @tmpBackAviaQuota=null
						if(@chbackkey > 0)
						begin
							if @pt_backFlightAttribute is null
							begin

								--karimbaeva MEG00038768 17.11.2011 получаем редактируемый атрибут услуги
								exec dbo.mwGetServiceIsEditableAttribute @pttourkey, @chbackkey, @chbackday, @days, @chbackprkey, @chbackpkkey, @isEditableService output
								if (@isEditableService = 0)
									set @pt_backFlightAttribute = 0
								else
									set @pt_backFlightAttribute = 2
								if (@tableName is not null)
								begin
									set @sql = 'update ' + @tableName + ' set pt_backFlightAttribute = ' + ltrim(str(@pt_backFlightAttribute)) + ' where pt_key = ' + ltrim(str(@ptkey))
									exec (@sql)
								end
			
							end

							set @findFlight = (@pt_backFlightAttribute & 2) / 2

							EXEC [dbo].[mwCacheQuotaSearch] 1, @chbackkey, 0, 0, @tourdate, @chbackday, @days, @chbackprkey, @chbackpkkey, 
								@tmpBackAviaQuota OUTPUT, @places output, @step_index output, @price_correction output, @additional output, @findFlight
								
							if (@tmpBackAviaQuota is null)
							begin

								set @tmpBackAviaQuota = ''												
								
								exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups, @agentKey, @chbackprkey, @tourdate,
									@chbackday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 
									@findFlight, @chbackpkkey, @days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output, @chday, @pt_mainplaces

								if len(ISNULL(@tmpBackAviaQuota, '')) != 0
								begin
									set @nAviaTariffFirst=0
									set @nAviaTariffSecond=0
									if len(@tmpBackAviaQuota)!=0
									BEGIN
										select 
										@sAviaTariffFirst = LEFT(@tmpBackAviaQuota,PATINDEX('%:%',@tmpBackAviaQuota)-1),
										@sAviaTariffSecond = LEFT(
										SUBSTRING(@tmpBackAviaQuota,PATINDEX('%|%',@tmpBackAviaQuota)+1,LEN(@tmpBackAviaQuota)-PATINDEX('%|%',@tmpBackAviaQuota)),
										PATINDEX('%:%',SUBSTRING(@tmpBackAviaQuota,PATINDEX('%|%',@tmpBackAviaQuota)+1,LEN(@tmpBackAviaQuota)-PATINDEX('%|%',@tmpBackAviaQuota)))-1)
										IF ISNUMERIC(@sAviaTariffFirst)=1
											set @nAviaTariffFirst=CAST(@sAviaTariffFirst as smallint)
										IF ISNUMERIC(@sAviaTariffSecond)=1
											set @nAviaTariffSecond=CAST(@sAviaTariffSecond as smallint)
										SET @places = abs(@nAviaTariffFirst)+abs(@nAviaTariffSecond)
									END
															
									EXEC [dbo].[mwCacheQuotaInsert] 1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota, @places, 0, 0, @additional, @findFlight
								end
							end

							if len(@tmpBackAviaQuota)!=0
							begin
								-- проверка наличия мест на обратном перелете на соответствие маске квот
								-- проверяются все классы перелетов, если хотя бы один подходит - результат принимается
								set @curIndex = 1						
								set @quota = @tmpBackAviaQuota + '|'
								set @actual=0

								while @curIndex <= LEN(@quota)
								begin
									
									set @freePlaces = 0
									
									set @freePlacesString = SUBSTRING(@quota, @curIndex, CHARINDEX(':', @quota, @curIndex)-@curIndex)
									if ISNUMERIC(@freePlacesString) = 1
										set @freePlaces = CAST(@freePlacesString as smallint)
									
									set @curIndex = CHARINDEX('|', @quota, @curIndex)+1
									if @freePlaces = 0
										set @freePlacesMask = 2	-- no places
									else if @freePlaces < 0
										set @freePlacesMask = 4	-- request
									else
										set @freePlacesMask = 1	-- yes
									
								if (@aviaQuotaMask & @freePlacesMask) = @freePlacesMask
									begin
										-- обратный перелет удовлетворяет маске квот, прекращаем проверку
										set @actual=1
										break
									end

								end
							
							end
							else
								set @actual=0				
								
						end
					end
				end			
				if(@hotelQuotaMask > 0)
				begin
					set @tmpAllHotelQuota = ''
					if(@actual > 0)
					begin
						if not (@pt_hddetails is not null and charindex(',', @pt_hddetails, 0) > 0)
						begin
							-- один отель
							set @tmpHotelQuota=null
							set @hdStep = 0
							set @hdPriceCorrection = 0
							set @places = 0

							EXEC [dbo].[mwCacheQuotaSearch] 3, @hdkey, @rmkey, @rckey, @tourdate, @hdday, @hdnights, @hdprkey, 0, 
								@tmpHotelQuota OUTPUT, @places output, @hdStep output, @hdPriceCorrection output, @additional output, 0

							if (@tmpHotelQuota is null)
							begin
								if @checkQuotesOnWebService = 1
								begin
									declare @checkQuotesResult as nvarchar(max)
									set @dateFrom = dateadd(day, @hdday - 1, @tourdate)
									set @dateTo = dateadd(day, @hdnights - 1, @dateFrom)
									
									-- включена проверка квот через веб-сервис								
									begin try
										exec mwCheckQuotaOneResult  1, 3, @hdkey, @pt_hrkey, @dateFrom, @dateTo, @hdprkey, 
												@agentKey, @hdnights, 1, null, @checkQuotesResult output, @places output, @allPlaces output
									end try
									begin catch
										-- Ошибка при вызове веб-сервиса. Логируем, отправляем письмо и отключаем проверку через сервис
										set @wasErrorCallingService = 1
									end catch
											
									if @checkQuotesResult in ('StopSale', 'NoPlaces')
										set @freePlacesMask = 2	-- no places
									else if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
									begin
										set @freePlacesMask = 4	-- request
										set @places = -1
									end
									else if @checkQuotesResult = 'QuotaExist'
										set @freePlacesMask = 1	-- yes
									
								end
								
								-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
								-- ошибки работы с веб-сервисом проверки квот
								if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
								begin
									select @places=qt_places,@allPlaces=qt_allPlaces,@additional=qt_additional 
									from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey, @hdprkey,@tourdate,@hdday,@hdnights, 
										@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0,
										@expiredReleaseResult)
										
									if @places = 0
										set @freePlacesMask = 2	-- no places
									else if @places < 0
									begin
										set @freePlacesMask = 4	-- request
									end
									else
										set @freePlacesMask = 1	-- yes
								end
								
								set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
								if(@pagingType = @DYNAMIC_SPO_PAGING and @places > 0)
								begin
									exec dbo.GetDynamicCorrections @now,@tourdate,3,@hdkey,@rmkey,@rckey,@places, @hdStep output, @hdPriceCorrection output
								end

								EXEC [dbo].[mwCacheQuotaInsert] 3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places,@hdStep,@hdPriceCorrection, @additional, 0
							end
						end 
						else
						-----------------------------------------------
						--=== Check quotes for all hotels in tour ===--
						--===              [BEGIN]                -----
						begin
							set @places = 10000			-- первоначальное значение для дальнейшего сравнения и выбора наименьшего количества мест
														-- в многоотельном туре
						
							set @tmpAllHotelQuota = ''
							-- Mask for hotel details column :
							-- [HotelKey]:[RoomKey]:[RoomCategoryKey]:[HotelDay]:[HotelDays]:[HotelPartnerKey],...
							declare @curHotelKey int, @curRoomKey int , @curRoomCategoryKey int , @curHotelDay int , @curHotelDays int , @curHotelPartnerKey int
							declare @curHotelRoomKey as int

							declare @curHotelDetails varchar(256)
							declare @tempPlaces int
							declare @tempAllPlaces int
							declare @curPosition int
								set @curPosition = 0
							declare @prevPosition int
								set @prevPosition = 0
							declare @curHotelQuota  varchar(256)
							while (1 = 1)
							begin
								set @curPosition = charindex(',', @pt_hddetails, @curPosition + 1)
								if (@curPosition = 0)
									set @curHotelDetails  = substring(@pt_hddetails, @prevPosition, 256)
								else
									set @curHotelDetails  = substring(@pt_hddetails, @prevPosition, @curPosition - @prevPosition)
								
								-- Get details by current hotel
								begin try
									exec mwParseHotelDetails @curHotelDetails, @curHotelKey output, @curRoomKey output, @curRoomCategoryKey output, 
										@curHotelDay output, @curHotelDays output, @curHotelPartnerKey output, @curHotelRoomKey output
								end try
								begin catch
									--произошла ошибка, последующие отели просто не будут проверяться на наличие мест
									break
								end catch
								-----
								set @curHotelQuota = null
								EXEC [dbo].[mwCacheQuotaSearch] 3, @curHotelKey, @curRoomKey, @curRoomCategoryKey, @tourdate, @curHotelDay, @curHotelDays, @curHotelPartnerKey, 0, 
									@curHotelQuota OUTPUT, @tempPlaces output, @hdStep output, @hdPriceCorrection output, @additional output, 0

								if (@curHotelQuota is null)
								begin
									if @checkQuotesOnWebService = 1
									begin
										begin try
											set @dateFrom = dateadd(day, @curHotelDay - 1, @tourdate)
											set @dateTo = dateadd(day, @curHotelDays - 1, @dateFrom)
											
											-- включена проверка квот через веб-сервис
											exec mwCheckQuotaOneResult 1, 3, @curHotelKey, @curHotelRoomKey, @dateFrom, @dateTo, @curHotelPartnerKey, 
													@agentKey, @curHotelDays, 1, null, @checkQuotesResult output, @tempPlaces output, @tempAllPlaces output
													
											-- отдельный случай для статуса "Запрос": сервис возвращает количество мест 0, а ожидается -1
											if @checkQuotesResult in ('Release', 'Duration', 'NoQuota')
												set @tempPlaces = -1
													
										end try
										begin catch
											set @wasErrorCallingService = 1
										end catch									
									end
									
									-- не сделано через else к условию if @checkQuotesOnWebService = 1, чтобы в случае
									-- ошибки работы с веб-сервисом проверки квот
									if @wasErrorCallingService = 1 or @checkQuotesOnWebService = 0
									begin
										select @tempPlaces=qt_places,@tempAllPlaces=qt_allPlaces,@additional=qt_additional 
										from dbo.mwCheckQuotesEx(3,@curHotelKey,@curRoomKey,@curRoomCategoryKey, @agentKey, @curHotelPartnerKey,@tourdate,@curHotelDay,@curHotelDays, 
												@requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, 0, 0, 0, 0, 0, @expiredReleaseResult)
									end
									
									set @curHotelQuota=ltrim(str(@tempPlaces)) + ':' + ltrim(str(@tempAllPlaces))

									EXEC [dbo].[mwCacheQuotaInsert] 3,@curHotelKey,@curRoomKey,@curRoomCategoryKey,@tourdate,@curHotelDay,@curHotelDays,@curHotelPartnerKey,0,@curHotelQuota,@tempPlaces,0,0, @additional, 0
								end
								-----
								set @tmpAllHotelQuota = @tmpAllHotelQuota + @curHotelQuota + '|'
								
								if (@tempPlaces < @places or (@places < 0 and @tempPlaces = 0)) and not (@places = 0 and @tempPlaces < 0)
								begin
									
									-- @places - результирующее значение количества мест в текущей строке. Оно принимается как
									-- минимальное из всех отелей в случае многоотельного тура
									-- Условие написано с учетом того, что в данном случае -1 > 0 (нет мест - более сильный статус, чем запрос)
									set @places = @tempPlaces
									set @tmpHotelQuota = @curHotelQuota

								end

								if (@curPosition = 0)
									break
								set @prevPosition = @curPosition + 1
							end
							
							-- Remove comma at the end of string
							if(len(@tmpAllHotelQuota) > 0)
								set @tmpAllHotelQuota = substring(@tmpAllHotelQuota, 1, len(@tmpAllHotelQuota) - 1)
						end
						--===                [END]                -----
						--=== Check quotes for all hotels in tour ===--
						-----------------------------------------------
						
						if @places = 0
							set @freePlacesMask = 2	-- no places
						else if @places < 0
						begin
							set @freePlacesMask = 4	-- request
						end
						else
							set @freePlacesMask = 1	-- yes
								
						if (@hotelQuotaMask & @freePlacesMask) = @freePlacesMask
							set @actual = 1
						else
							set @actual = 0
						
						--if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
						--	set @actual=0
					end
				end



		------==============================================================================================------
		--============================ Check inner avia quotes if needed by settings ===========================--
		--========																						========--
				if(@actual > 0 and @mwCheckInnerAviaQuotes > 0)
				begin
					-- Direct flights
					if (@pt_chdirectkeys is not null and charindex(',', @pt_chdirectkeys, 0) > 0)
					begin
						set @findFlight = @initialFindflight
						exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chdirectkeys, 
								@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
								@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpThereAviaQuota output, @pt_chbackkeys
						if (len(@tmpThereAviaQuota) = 0)
							set @actual = 0
					end 

					-- Back flights
					if(@actual > 0)
					begin
						if (@pt_chbackkeys is not null and charindex(',', @pt_chbackkeys, 0) > 0)
						begin
							set @findFlight = @initialFindflight
							exec dbo.mwCheckFlightGroupsQuotesWithInnerFlights @pagingType, @pt_chbackkeys,   
								@flightGroups, @agentKey, @tourdate, @requestOnRelease, @noPlacesResult, 
								@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, 
								@days, @expiredReleaseResult, @aviaQuotaMask, @tmpBackAviaQuota output, @pt_chdirectkeys
							if (len(@tmpBackAviaQuota) = 0)
								set @actual = 0
						end 
					end
				end
		--========																						========--
		--============================                                               ===========================--
		------==============================================================================================------
				
				if(@actual > 0)
				begin
					if (@smartSearch = 1)
					begin
						-- сохраним ключ отеля для которого уже было добавлено размещение
						insert into @smartSearchKeys(hdKey) values (@hdkey)
						set @selected=@selected + 1
						-- pt_smartSearch = 1 (для выделения подмешанных вариантов)
						insert into #Paging(ptKey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection, pt_hdallquota, pt_smartSearch)
						values(@ptkey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection, @tmpAllHotelQuota, 1)
					end
					-- если используется SmartSearch (глобально - включена настройка, но mwCheckQuotesCycle вызвана НЕ для подмешанных вариантов) 
					-- то возможна ситуация когда данный ptKey уже был добавлен в #Paging как подмешанный
					else if (@mwUseSmartSearch = 0 or not exists (select top 1 1 from #Paging where ptKey = @ptkey))
					begin
						set @selected=@selected + 1
						insert into #Paging(ptKey,ptpricekey,pt_hdquota,pt_chtherequota,pt_chbackquota,chkey,chbackkey,stepId,priceCorrection, pt_hdallquota)
						values(@ptkey,@ptpricekey,@tmpHotelQuota,@tmpThereAviaQuota,@tmpBackAviaQuota,@chkey,@chbackkey,@hdStep,@hdPriceCorrection, @tmpAllHotelQuota)
					end
				end

				set @reviewed=@reviewed + 1
			end
			fetch next from quotaCursor into @ptkey,@pttourkey,@ptpricekey,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,@chday,@chpkkey,
				@chprkey,@chbackday,@chbackpkkey,@chbackprkey,@days,@chkey,@chbackkey,@rowNum, @pt_chdirectkeys, @pt_chbackkeys, 
				@pt_hddetails, @pt_directFlightAttribute, @pt_backFlightAttribute, @pt_mainplaces, @pt_hrkey
			set @pos = @pos + 1
			if (@serviceFlightSelection = 1 and @priceKeysPackIndex > 0 and @@fetch_status <> 0)
			begin
				insert into #paging (ptKey, pt_hdquota, ptpricekey, pt_chtherequota, pt_chbackquota, chkey, chbackkey, priceCorrection, pt_hdallquota, pt_smartSearch)
				exec WcfCheckQuotaCycle @priceKeysPackString;
			end
		end
	end

	if (@smartSearch=0)
	begin
		select @reviewed
	end
end
GO

grant execute on [dbo].[mwCheckQuotesCycle] to public
GO
/*********************************************************************/
/* end sp_mwCheckQuotesCycle.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfQuotaCheckOneResult.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WcfQuotaCheckOneResult]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WcfQuotaCheckOneResult]
GO

CREATE PROCEDURE [dbo].[WcfQuotaCheckOneResult]
	(
		@useCache bit,
		@serviceKey int,
		@serviceCode int,
		@serviceSubCode1 int,
		@serviceDateBegin datetime,
		@serviceDateEnd datetime,
		@partnerKey int,
		@agentKey int,
		@tourDuration smallint,
		@quotaPlaces smallint,
		@pax smallint
		--<VERSION>11.1.2</VERSION>
	    --<DATA>2013.02.11</DATA>
	)
AS
BEGIN
	declare @commandLine varchar(2000), @path varchar(2000)
	
	select @path = SS_ParmValue from SystemSettings where SS_ParmName = 'PathToWcfClient'
	
	if (@path is not null)
	begin
		set @commandLine = @path + ' CheckOneResult'
		
		set @commandLine = @commandLine + ' ' + (case when @useCache = 1 then ' true' else ' false' end)
		set @commandLine = @commandLine + ' ' + convert(varchar, @serviceKey)
		set @commandLine = @commandLine + ' ' + convert(varchar, @serviceCode)
		set @commandLine = @commandLine + ' ' + convert(varchar, @serviceSubCode1)
		set @commandLine = @commandLine + ' "' + convert(varchar, @serviceDateBegin) + '"'
		set @commandLine = @commandLine + ' "' + convert(varchar, @serviceDateEnd) + '"'
		set @commandLine = @commandLine + ' ' + convert(varchar, @partnerKey)
		set @commandLine = @commandLine + ' ' + (case when @agentKey is null then 'null' else convert(varchar, @agentKey) end)
		set @commandLine = @commandLine + ' ' + (case when @tourDuration is null then 'null' else convert(varchar, @tourDuration) end)
		set @commandLine = @commandLine + ' ' + convert(varchar, @quotaPlaces)
		set @commandLine = @commandLine + ' ' + (case when @pax is null then 'null' else convert(varchar, @pax) end)
	end
	else
	begin
		RAISERROR('Ошибка: не указан пусть к сервису', 16, 1)
	end
	
	--print @commandLine
	exec xp_cmdshell @commandLine
END

GO
grant exec on [dbo].[WcfQuotaCheckOneResult] to public
go
/*********************************************************************/
/* end sp_WcfQuotaCheckOneResult.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ProcessCharterDeleteQueue.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE name = 'ProcessCharterDeleteQueue' and type='P')
	DROP PROCEDURE [dbo].[ProcessCharterDeleteQueue]
GO

CREATE PROCEDURE [dbo].[ProcessCharterDeleteQueue]
AS
BEGIN
	--<VERSION>9.2.18.0</VERSION>
	--<DATE>2013-02-20</DATE>

	declare @oldChId as int
	declare @queueId as int
	
	if not exists (select top 1 1 from CharterDeleteQueue with (nolock))
		return
	
	select top 1 
		@queueId = id, @oldChId = charterIdToReplace
	from CharterDeleteQueue with (nolock)
	where isProcessed = 0
	order by id asc
	
	if @oldChId is null	-- очередь пустая
		return
		
	update CharterDeleteQueue
	set startDate = GETDATE()
	where id = @queueId
	
	-- 1. определение направления перелета
	declare @cityFrom int, @cityTo int
	select top 1 @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @oldChId	
	
	-- 2. поиск заменяющего перелета
	declare @newChId int, @newPrId int, @newAirportFrom int, @newAirportTo int
	declare @oldPrKey int, @oldPkKey int
	
	select top 1 @oldPrKey = CS_PRKEY, @oldPkKey = CS_PKKEY
	from tbl_Costs
	where cs_svkey = 1 
		and cs_code = @oldChId
	
	set @newChId = null

	select top 1 @newChId = ch_key, @newPrId = CS_PRKEY, @newAirportFrom = apKeyFrom, @newAirportTo = apKeyTo
	from 
	(
		select top 1 ch_key, 1 as partnerMatch, CS_PRKEY, portFrom.ap_key apKeyFrom, portTo.ap_key apKeyTo
		from Charter with (nolock)
		inner join tbl_costs with(nolock) on (cs_svkey = 1 
												and cs_code = ch_key
												and CS_PRKEY = @oldPrKey
												and CS_PKKEY = @oldPkKey
											)
		left join Airport portFrom with (nolock) on portFrom.AP_CODE = CH_PORTCODEFROM
		left join Airport portTo with (nolock) on portTo.AP_CODE = CH_PORTCODETO
		where ch_citykeyfrom = @cityFrom
				and ch_citykeyto = @cityTo
				and ch_key <> @oldChId
				and CH_KEY not in (select charterIdToReplace from CharterDeleteQueue with (nolock))
		order by ch_key
						
		union all
		
		select top 1 ch_key, 0 as partnerMatch, CS_PRKEY, portFrom.ap_key apKeyFrom, portTo.ap_key apKeyTo
		from Charter with (nolock)
		inner join tbl_costs with(nolock) on (cs_svkey = 1 
												and cs_code = ch_key
												and CS_PKKEY = @oldPkKey
											)
		left join Airport portFrom with (nolock) on portFrom.AP_CODE = CH_PORTCODEFROM
		left join Airport portTo with (nolock) on portTo.AP_CODE = CH_PORTCODETO
		where ch_citykeyfrom = @cityFrom 
				and ch_citykeyto = @cityTo
				and ch_key <> @oldChId
				and CH_KEY not in (select charterIdToReplace from CharterDeleteQueue with (nolock))
		order by ch_key
	) as res
	order by partnerMatch desc
	
	update CharterDeleteQueue
	set newCharterId = @newChId, newCharterName = srcCH.CH_AIRLINECODE + ' ' + srcCH.CH_FLIGHT
	from
	(
		select CH_AIRLINECODE, CH_FLIGHT
		from Charter with (nolock)
		where CH_KEY = @newChId
	) as srcCH
	where id = @queueId

	declare @svName VARCHAR(800)
	declare @nCountry INT
	declare @nCity INT
	declare @nSvKey INT
	declare @nNDays INT
	declare @nCode1 INT
	declare @nCode2 INT
	declare @dServDate DATETIME

	if @newChId is not null
	begin
		if (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0) or dbo.mwReplIsPublisher() > 0
		begin
			-- 3. Публикатор (при репликации) или репликации нет
			-- Сначала обновим справочники
			
			BEGIN TRY
				declare @updatePortion int
				set @updatePortion = 10000
				
				-- TurService
				declare tsCursor cursor for
				select TS_Key from TurService with (nolock)
				where TS_CODE = @oldChId
				
				declare @tsKey as int
				open tsCursor
				fetch next from tsCursor into @tsKey
				while @@FETCH_STATUS = 0
				begin
				
					select @nCountry = TS_CNKEY, @nCity = TS_CTKEY, @nSvKey = TS_SVKEY, @nNDays = TS_NDAYS
						, @nCode1 = TS_SUBCODE1, @nCode2 = TS_SUBCODE2, @dServDate = getdate()
					from TurService
					where TS_key = @tsKey
					
					exec dbo.MakeFullSVName @nCountry, @nCity, @nSvKey, @newChId, @nNDays, @nCode1, @nCode2, @newPrId, @dServDate, null, @svName output, null
					update TurService
					set ts_code = @newChId, TS_PARTNERKEY = @newPrId, ts_name = @svName
					where TS_key = @tsKey

					fetch next from tsCursor into @tsKey
				
				end
				close tsCursor
				deallocate tsCursor
								
				-- tp_flights
				while exists(select top 1 1 from TP_Flights with (nolock) where TF_CodeOld = @oldChId)
					update top (@updatePortion) TP_Flights
					set TF_CodeOld = @newChId, TF_PRKeyOld = @newPrId
					where TF_CodeOld = @oldChId
				
				while exists(select top 1 1 from TP_Flights with (nolock) where TF_CodeNew = @oldChId)
					update top (@updatePortion) TP_Flights
					set TF_CodeNew = @newChId, TF_PRKeyNew = @newPrId
					where TF_CodeNew = @oldChId
				
				-- tp_lists
				while exists(select top 1 1 from TP_Lists with (nolock) where ti_chkey = @oldChId)
					update top (@updatePortion) TP_Lists
					set ti_chkey = @newChId, ti_chprkey = @newPrId, ti_apkeyfrom = @newAirportFrom
					where ti_chkey = @oldChId
				
				while exists(select top 1 1 from TP_Lists with (nolock) where ti_chbackkey = @oldChId)
					update top (@updatePortion) TP_Lists
					set ti_chbackkey = @newChId, ti_chbackprkey = @newPrId, ti_apkeyto = @newAirportTo
					where ti_chbackkey = @oldChId
				
				-- TP_ServiceComponents
				while exists(select top 1 1 from TP_ServiceComponents with (nolock) where SC_Code = @oldChId)
					update top (@updatePortion) TP_ServiceComponents
					set SC_Code = @newChId, SC_PRKey = @newPrId
					where SC_Code = @oldChId
				
				-- TP_Services
				while exists(select top 1 1 from TP_Services with (nolock) where TS_Code = @oldChId)
					update top (@updatePortion) TP_Services
					set TS_Code = @newChId, TS_OpPartnerKey = @newPrId
					where TS_Code = @oldChId
				
				-- tbl_DogovorList
				declare dlCursor cursor for
				select dl_key
				from tbl_DogovorList
				where DL_CODE = @oldChId
				
				declare @dlKey int
				declare @wasError bit
				set @wasError = 0
				
				begin try
					open dlCursor
					
					fetch next from dlCursor into @dlKey
					
					while @@FETCH_STATUS = 0
					begin

						select @nCountry = DL_CNKEY, @nCity = DL_CTKEY, @nSvKey = DL_SVKEY, @nNDays = DL_NDAYS
							, @nCode1 = DL_SUBCODE1, @nCode2 = DL_SUBCODE2, @dServDate = DL_DATEBEG
						from tbl_DogovorList
						where DL_KEY = @dlKey
						
						exec dbo.MakeFullSVName @nCountry, @nCity, @nSvKey, @newChId, @nNDays, @nCode1, @nCode2, @newPrId, @dServDate, null, @svName output, null

						update tbl_DogovorList
						set DL_CODE = @newChId, DL_PARTNERKEY = @newPrId, DL_NAME = @svName
						where DL_KEY = @dlKey

						delete from ServiceByDate where SD_DLKey = @dlKey
						exec DogListToQuotas @DLKey = @dlKey
					
						fetch next from dlCursor into @dlKey
					
					end
				end try
				begin catch
					set @wasError = 1
				end catch
				
				close dlCursor
				deallocate dlCursor	
				
				if @wasError = 1
				begin
					declare @innerErMsg nvarchar(max)
					set @innerErMsg = ERROR_MESSAGE()
					RAISERROR(@innerErMsg, 16, 1)
				end
			
			END TRY
			BEGIN CATCH
								
				declare @errMsg nvarchar(max)
				set @errMsg = 'Ошибка замены рейса ' + STR(@oldChId) + ': ' + error_message()
				RAISERROR(@errMsg, 16, 1)
			
			END CATCH

		end

		if (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0) or dbo.mwReplIsSubscriber() > 0
		begin
			-- 4. Подписчик (при репликации) или репликации нет
			-- Обновим ценовые таблицы		
			declare @mwSearchType int
			select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
			where SS_ParmName = 'MWDivideByCountry'
			
			declare @sql as nvarchar(max)
			declare @tablesCondition as nvarchar(100)
			
			if @mwSearchType = 0
				set @tablesCondition = 'mwPriceDataTable'
			else
				set @tablesCondition = 'mwPriceDataTable[_]%'
			
			declare tableCursor cursor for
			select name from sys.tables 
			where name like @tablesCondition
			
			declare @tableName nvarchar(100)
			open tableCursor
			
			fetch next from tableCursor into @tableName
			while @@FETCH_STATUS = 0
			begin
			
				set @sql = '
				
					while exists(select top 1 1 from #tableName with (nolock) where pt_chkey = @oldChId)
					begin
						update top (50000) #tableName
						set 
							pt_chkey = @newChId
							, pt_chprkey = @newPrId
							, pt_chdirectkeys = dbo.mwGetTourCharters(pt_pricelistkey, 1)
							, pt_apkeyfrom = @apKeyFrom
						where pt_chkey = @oldChId
					end
					
					while exists(select top 1 1 from #tableName with (nolock) where pt_chbackkey = @oldChId)
					begin
						update top (50000) #tableName
						set 
							pt_chbackkey = @newChId
							, pt_chbackprkey = @newPrId
							, pt_chbackkeys = dbo.mwGetTourCharters(pt_pricelistkey, 0)
							, pt_apkeyto = @apKeyTo
						where pt_chbackkey = @oldChId
					end
					'
				
				set @sql = REPLACE(@sql, '#tableName', @tableName)
				set @sql = REPLACE(@sql, '@newChId', @newChId)
				set @sql = REPLACE(@sql, '@newPrId', @newPrId)
				set @sql = REPLACE(@sql, '@oldChId', @oldChId)
				set @sql = REPLACE(@sql, '@apKeyFrom', @newAirportFrom)
				set @sql = REPLACE(@sql, '@apKeyTo', @newAirportTo)
				exec (@sql)
				
				fetch next from tableCursor into @tableName
			
			end
			
			close tableCursor
			deallocate tableCursor
			
		end
	
	end
	
	if (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0) or dbo.mwReplIsPublisher() > 0
	begin
		-- 5. Публикатор (при репликации) или репликации нет
		-- Теперь удалим запись из таблицы Charter
		update CharterDeleteQueue
		set isProcessed = 1
		where charterIdToReplace = @oldChId
		
		delete from Charter where CH_KEY = @oldChId
	end
	
	update CharterDeleteQueue
	set endDate = GETDATE()
	where id = @queueId

END
GO

grant exec on [dbo].[ProcessCharterDeleteQueue] to public
GO
/*********************************************************************/
/* end sp_ProcessCharterDeleteQueue.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.02.26)_Add_PTQ_IsByCheckin_ProTourQuotes.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2013-02-26</DATE>
--добавление колонки - признак что стоп/квота на заезд
if not exists (select 1 from dbo.syscolumns where name = 'PTQ_IsByCheckin' and id = object_id(N'[dbo].[ProTourQuotes]'))
	alter table ProTourQuotes Add PTQ_IsByCheckin bit null
GO



/*********************************************************************/
/* end (2013.02.26)_Add_PTQ_IsByCheckin_ProTourQuotes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ProtourSetServiceToQuota.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ProtourSetServiceToQuota]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ProtourSetServiceToQuota]
GO

CREATE PROCEDURE [dbo].[ProtourSetServiceToQuota]
	(
		--<VERSION>2009.2.3</VERSION>
		--<DATA>23.05.2013</DATA>
		@hotelKey int	-- qo_code из QuotaObject
		,@subCode2 int				-- описание 2 из QuotaObject
		,@date datetime
	)
as
begin
	declare @dlkey int, @DLDateBeg datetime, @DLDateEnd datetime
	
	-- таблица с отобранными услугами которые будем сажать в квоты		
	declare @dlKeyList table
	(
		dlKey int
	)	
	
	insert into @dlKeyList (dlKey)
	select DL_Key
	from Dogovorlist join HotelRooms on DL_SUBCODE1 = HR_KEY
	where dl_svkey = 3
	and dl_code = @hotelKey
	and ((@subCode2 = 0) or (HR_RCKEY = @subCode2))
	and (select COALESCE(min(SD_State), 4) from ServiceByDate where SD_DLKey = DL_Key) = 4
	and @date between DL_DateBeg and DL_DATEEND
	

	DECLARE cur_DogovorListAutoQuotesPlaces CURSOR FOR
		SELECT 	DL_Key, DL_DateBeg, DL_DateEnd
		FROM	Dogovorlist join @dlKeyList on dl_key = dlKey
		
	OPEN cur_DogovorListAutoQuotesPlaces
	FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLDateBeg, @DLDateEnd
	WHILE @@FETCH_STATUS = 0
	BEGIN
		--в этой хранимке будет выполнена попытка постановки услуги на квоту
		EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,null
				
		FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLDateBeg, @DLDateEnd
	
	END
	CLOSE cur_DogovorListAutoQuotesPlaces
	DEALLOCATE   cur_DogovorListAutoQuotesPlaces

end

GO

grant exec on [dbo].[ProtourSetServiceToQuota] to public
go
/*********************************************************************/
/* end sp_ProtourSetServiceToQuota.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_LoadProtourQuotes.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[LoadProtourQuotes]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[LoadProtourQuotes]
GO
CREATE PROCEDURE [dbo].[LoadProtourQuotes]
(
	--<VERSION>2009.2.14</VERSION>
	--<DATA>23.05.2013</DATA>
	@hotelKey int = null,	-- ключ отеля
	@startDate datetime = null,		-- дата начала интервала, по которому изменялись квоты (для стопов передается null)
	@endDate datetime = null,		-- дата окончания интервала, по которому изменялись квоты (для стопов передается null)
	@quotesUpdate bit = null			-- признак того, что обновлять надо квоты (т.е. 1 - обновление квот, 0 - обновление стопов)
)
AS
BEGIN
	if (dbo.mwReplIsSubscriber() = 1)
		return;

	declare @qtid int, @qoid int, @qdid int, @qdbusy int, @uskey int, @str nvarchar(max), @str1 nvarchar(max), @hdname varchar(100), 
			@partnerName varchar(100), @rcname varchar(100), @ss_allotmentAndCommitment int, @email varchar(1000), @bkid int, @isErrorState bit  
	
	if (@startDate is null)
		set @startDate = '1900-01-01'
	if (@endDate is null)
		set @endDate = '2099-12-01'
	
	set @str = 'Количество квот, полученное из ProTour меньше, чем число занятых мест. Параметры квот:'
	set @str1 = 'Из ProTour пришло отрицательное количество мест. Параметры квот:'
	
	set @isErrorState = 0			
	set @uskey = 0 
	select @uskey = ISNULL(US_Key,0) from dbo.UserList where US_USERID = SYSTEM_USER
	
	declare @ptq_Id	int, @ptq_PartnerKey int, @ptq_HotelKey	int, @ptq_RoomCategoryKey int, @ptq_Date datetime,
	@ptq_State smallint, @ptq_CommitmentTotal int, @ptq_AllotmentTotal int, @ptq_Release int, @ptq_StopSale bit, -- 0 - квоты, 1 - стопы 
	@ptq_CancelStopSale bit, -- 1 - удаление стопов, 0 - добавление стопов 
	@ptq_IsByCheckin bit, -- признак "запрет заезда"
	@ptq_ErrorState tinyint -- если равен 1, то заново письмо менеджерам не отправляем
	
	-- ключи квот, которые нужно удалить
	declare @tmpDeleteQuotаs table(
		tmpQoid int,
		tmpQtid int
		)
	
	if (@quotesUpdate = 1 or @quotesUpdate is null)
	begin
		DECLARE qCur CURSOR FOR
		SELECT	PTQ_Id, Ptq_PartnerKey, Ptq_HotelKey, Ptq_RoomCategoryKey, Ptq_Date, Ptq_State, Ptq_CommitmentTotal, Ptq_AllotmentTotal, 
				Ptq_Release, Ptq_StopSale, Ptq_CancelStopSale, PTQ_ErrorState	
				FROM ProtourQuotes where 	PTQ_State not in (2, 6)
											and ((@hotelKey IS NOT NULL AND PTQ_HotelKey = @hotelKey) or (@hotelKey is null))
											--and PTQ_Date between @startDate and @endDate
											and PTQ_StopSale=0 
											and (PTQ_IsByCheckin <> 1 or PTQ_IsByCheckin is null)
		
		OPEN qCur
		FETCH NEXT FROM qCur INTO	@ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, 
							@ptq_CommitmentTotal, @ptq_AllotmentTotal, @ptq_Release, @ptq_StopSale, @ptq_CancelStopSale, @ptq_ErrorState
						
		WHILE @@FETCH_STATUS = 0
		BEGIN 
			BEGIN TRY
				if (@ptq_CommitmentTotal >= 0 or (@ptq_CommitmentTotal = 0 and @ptq_AllotmentTotal = 0))
				begin
					-- проверяем если сегодня закачки квот из ProTour не было (SYSExistsProtourQuotesHistory = 0), то если @ptq_State=3 проверяем наличие квоты в МТ 
					if (@ptq_State=1 or @ptq_State=3) -- если квота новая
					begin
						if not exists (select TOP 1 1
									from Quotas with(nolock)
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QT_ByRoom = 1
									and QT_IsByCheckIn = 0) 
							and (@ptq_CommitmentTotal > 0)
						begin
							insert into Quotas (QT_PRKey, QT_ByRoom, QT_Comment, QT_IsByCheckIn) 
							values (@ptq_PartnerKey, 1, '', 0)
							set @qtid = SCOPE_IDENTITY()
							
							insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
							values (@qtid, 3, @ptq_HotelKey, 0, @ptq_RoomCategoryKey)
							set @qoid = SCOPE_IDENTITY()
							
							insert into QuotaDetails (QD_QTID, QD_Date, QD_Type, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey)
							values (@qtid, @ptq_Date, 2, @ptq_CommitmentTotal, 0, GETDATE(), ISNULL(@uskey,0)) 
							set @qdid = SCOPE_IDENTITY()
					
							insert into QuotaParts (QP_QDID, QP_Date, QP_Places, QP_Busy, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey, QP_Limit)
							values (@qdid, @ptq_Date, @ptq_CommitmentTotal, 0, 0, '', GETDATE(), ISNULL(@uskey,0), 0) 
							
							update QuotaObjects
							set QO_CTKey = (select HD_CTKey from HotelDictionary where HD_Key = QO_Code)
							where QO_SVKey = 3 and QO_ID = @qoid and QO_CTKey is null
						
							update QuotaObjects
							set QO_CNKey= (select CT_CNKey from CityDictionary where CT_Key=QO_CTKey) 
							where QO_CNKey is null and QO_CTKey is not null and QO_ID = @qoid
							
							update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
						end
						else
						begin
							if exists (select TOP 1 1
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 2
									and QT_IsByCheckIn = 0)
							begin
								select @qdid = QD_ID, @qdbusy = QD_Busy 
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 2
									and QT_IsByCheckIn = 0
								
								if (@qdbusy > @ptq_CommitmentTotal)
								begin
									-- если число занятых мест в МТ больше числа мест пришедших из Протура, то в Places = Busy
									update QuotaDetails set QD_Places = QD_Busy where QD_ID = @qdid 
									update QuotaParts set QP_Places = QP_Busy where QP_QDID = @qdid
									
									-- чтобы несколько раз письмо не отправлять	
									if (@ptq_ErrorState is null)
									begin
										-- и дальше отправляем письмо
										select @hdname = ISNULL(HD_Name,0) from HotelDictionary where HD_Key = @ptq_HotelKey
										select @rcname = ISNULL(RC_Name,0) from RoomsCategory where RC_key = @ptq_RoomCategoryKey
										select @partnerName = ISNULL(PR_FullName,0) from Partners where PR_Key = @ptq_PartnerKey
										set @str = @str + CHAR(13) + CHAR(13) + 'Партнер:' + convert(varchar(100),@partnerName) + '(' + convert(varchar(100),@ptq_PartnerKey) + ')' + CHAR(13) + 
																	'Отель:' + convert(varchar(100),@hdname) + '(' + convert(varchar(100),@ptq_HotelKey) + ')' + CHAR(13) +
																	'Категория номера:' + convert(varchar(100),@rcname) + CHAR(13) + 
																	'Дата:' + convert(varchar(100),@ptq_Date, 105) + CHAR(13) +
																	'Количество мест:' + convert(varchar(100),@ptq_CommitmentTotal) + CHAR(13)
										print @str
									end
									
									set @isErrorState = 1									
								end 
								else 
								begin
									-- если из Протура приходит 0 и в МТ кол-во занятых мест равно 0, то удаляем квоту, вне зависимости от значения кол-ва мест в МТ
									if (@ptq_CommitmentTotal = 0 and @qdbusy = 0) 
									begin
										update QuotaDetails
										set QD_IsDeleted = 4 -- Request
										where QD_ID = @qdid
											
										update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
									end
									else
									begin
										update QuotaDetails set QD_Places = @ptq_CommitmentTotal where QD_ID = @qdid 
										update QuotaParts set QP_Places = @ptq_CommitmentTotal where QP_QDID = @qdid
										update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
									end
								end 
							end
							else
							begin
								if (@ptq_CommitmentTotal > 0)
								begin
								select top 1 @qtid = QT_ID, @qoid = QO_ID 
									from Quotas with(nolock)
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QT_ByRoom = 1
									and QT_IsByCheckIn = 0
									order by QT_ID	
									
									insert into QuotaDetails (QD_QTID, QD_Date, QD_Type, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey)
									values (@qtid, @ptq_Date, 2, @ptq_CommitmentTotal, 0, GETDATE(), ISNULL(@uskey,0)) 
									set @qdid = SCOPE_IDENTITY()
						
									insert into QuotaParts (QP_QDID, QP_Date, QP_Places, QP_Busy, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey, QP_Limit)
									values (@qdid, @ptq_Date, @ptq_CommitmentTotal, 0, 0, '', GETDATE(), ISNULL(@uskey,0), 0)
									
									update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
								end								
							end
						end
					end
					
					if (@ptq_State=4) --удаляемая
					begin 
						update QuotaDetails
						set QD_IsDeleted = 4 -- Request
						from Quotas join QuotaDetails on QT_ID = QD_QTID
						join QuotaObjects on QT_ID = QO_QTID
						where QT_PRKey = @ptq_PartnerKey
							and QO_SVKey = 3
							and QO_Code = @ptq_HotelKey
							and QO_SubCode1 = 0
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and QD_Date = @ptq_Date
							and QT_ByRoom = 1
							and QD_Type = 2
							and QT_IsByCheckIn = 0
						
						insert into @tmpDeleteQuotаs (tmpQoid) 
						SELECT	QO_ID	
							FROM QuotaObjects join Quotas on QO_QTID = QT_ID
							where not exists (select 1 from StopSales where SS_QOID = QO_ID)
							and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
							and QO_SVKey = 3
							and QO_Code = @ptq_HotelKey
							and QO_SubCode1 = 0
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and QT_ByRoom = 1	
							and QT_IsByCheckIn = 0
						
						insert into @tmpDeleteQuotаs (tmpQtid) 
						SELECT	QT_ID	
							from Quotas join QuotaObjects on QT_ID = QO_QTID
							where not exists (select 1 from QuotaObjects where QO_QTID = QT_ID)
							and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
							and QT_ByRoom = 1 and QT_IsByCheckIn = 0
						
						delete ProtourQuotes where PTQ_Id = @ptq_Id
					end
				end 
			END TRY
			BEGIN CATCH
				DECLARE @errorMessage2 as nvarchar(max)
				SET @errorMessage2 = 'Error in SyncProtourQuotes commitment: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

				INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @errorMessage2)
			END CATCH
			
			BEGIN TRY
				if (@ptq_AllotmentTotal >= 0 or (@ptq_CommitmentTotal = 0 and @ptq_AllotmentTotal = 0)) 
				begin
					-- проверяем если сегодня закачки квот из ProTour не было (SYSExistsProtourQuotesHistory = 0), то если @ptq_State=3 проверяем наличие квоты в МТ 
					if (@ptq_State=1 or @ptq_State=3) -- если квота новая
					begin
						if not exists (select TOP 1 1
									from Quotas with(nolock) 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QT_ByRoom = 1
									and QT_IsByCheckIn = 0) 
							and (@ptq_AllotmentTotal > 0) 
						begin
							insert into Quotas (QT_PRKey, QT_ByRoom, QT_Comment, QT_IsByCheckIn) 
							values (@ptq_PartnerKey, 1, '', 0)
							set @qtid = SCOPE_IDENTITY()
							
							insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
							values (@qtid, 3, @ptq_HotelKey, 0, @ptq_RoomCategoryKey)
							set @qoid = SCOPE_IDENTITY()
							
							insert into QuotaDetails (QD_QTID, QD_Date, QD_Type, QD_Release, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey)
							values (@qtid, @ptq_Date, 1, nullif(@ptq_Release, 0), @ptq_AllotmentTotal, 0, GETDATE(), ISNULL(@uskey,0)) 
							set @qdid = SCOPE_IDENTITY()
					
							insert into QuotaParts (QP_QDID, QP_Date, QP_Places, QP_Busy, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey, QP_Limit)
							values (@qdid, @ptq_Date, @ptq_AllotmentTotal, 0, 0, '', GETDATE(), ISNULL(@uskey,0), 0) 
							
							update QuotaObjects
							set QO_CTKey = (select HD_CTKey from HotelDictionary where HD_Key = QO_Code)
							where QO_SVKey = 3 and QO_ID = @qoid and QO_CTKey is null
						
							update QuotaObjects
							set QO_CNKey= (select CT_CNKey from CityDictionary where CT_Key=QO_CTKey) 
							where QO_CNKey is null and QO_CTKey is not null and QO_ID = @qoid
							
							update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
						end
						else
						begin
							if exists (select TOP 1 1
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 1
									and QT_IsByCheckIn = 0)
							begin
								select @qdid = QD_ID, @qdbusy = QD_Busy 
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 1
									and QT_IsByCheckIn = 0
									
								if (@qdbusy > @ptq_AllotmentTotal)
								begin
									-- если число занятых мест в МТ больше числа мест пришедших из Протура, то в Places = Busy
									update QuotaDetails set QD_Places = QD_Busy, QD_Release = nullif(@ptq_Release, 0) where QD_ID = @qdid 
									update QuotaParts set QP_Places = QP_Busy where QP_QDID = @qdid
									
									-- чтобы несколько раз письмо не отправлять	
									if (@ptq_ErrorState is null)
									begin									
										-- и дальше отправляем письмо
										select @hdname = ISNULL(HD_Name,0) from HotelDictionary where HD_Key = @ptq_HotelKey
										select @rcname = ISNULL(RC_Name,0) from RoomsCategory where RC_key = @ptq_RoomCategoryKey
										select @partnerName = ISNULL(PR_FullName,0) from Partners where PR_Key = @ptq_PartnerKey
										set @str = @str + CHAR(13) + CHAR(13) + 'Партнер:' + convert(varchar(100),@partnerName) + '(' + convert(varchar(100),@ptq_PartnerKey) + ')' + CHAR(13) + 
																	'Отель:' + convert(varchar(100),@hdname) + '(' + convert(varchar(100),@ptq_HotelKey) + ')' + CHAR(13) +
																	'Категория номера:' + convert(varchar(100),@rcname) + CHAR(13) + 
																	'Дата:' + convert(varchar(100),@ptq_Date, 105) + CHAR(13) +
																	'Количество мест:' + convert(varchar(100),@ptq_AllotmentTotal) + CHAR(13)																											
									end	
									
									set @isErrorState = 1								
								end 
								else 
								begin
									-- если из Протура приходит 0 и в МТ кол-во занятых мест равно 0, то удаляем квоту, вне зависимости от значения кол-ва мест в МТ
									if (@ptq_AllotmentTotal = 0 and @qdbusy = 0) 
									begin
										update QuotaDetails
										set QD_IsDeleted = 4 -- Request
										where QD_ID = @qdid
											
										update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
									end
									else
									begin
										update QuotaDetails set QD_Places = @ptq_AllotmentTotal, QD_Release = nullif(@ptq_Release, 0) where QD_ID = @qdid 
										update QuotaParts set QP_Places = @ptq_AllotmentTotal where QP_QDID = @qdid
										update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
									end									
								end 
							end
							else
							begin
								if (@ptq_AllotmentTotal > 0) 
								begin
								select top 1 @qtid = QT_ID, @qoid = QO_ID 
									from Quotas with(nolock) 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QT_ByRoom = 1
									and QT_IsByCheckIn = 0
									order by QT_ID	
									
									insert into QuotaDetails (QD_QTID, QD_Date, QD_Type, QD_Release, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey)
									values (@qtid, @ptq_Date, 1, nullif(@ptq_Release, 0), @ptq_AllotmentTotal, 0, GETDATE(), ISNULL(@uskey,0)) 
									set @qdid = SCOPE_IDENTITY()
						
									insert into QuotaParts (QP_QDID, QP_Date, QP_Places, QP_Busy, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey, QP_Limit)
									values (@qdid, @ptq_Date, @ptq_AllotmentTotal, 0, 0, '', GETDATE(), ISNULL(@uskey,0), 0)
									
									update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
								end 							
							end
						end
					end
					
					if (@ptq_State=4) --удаляемая
					begin 
						update QuotaDetails
						set QD_IsDeleted = 4 -- Request
						from Quotas join QuotaDetails on QT_ID = QD_QTID
						join QuotaObjects on QT_ID = QO_QTID
						where QT_PRKey = @ptq_PartnerKey
							and QO_SVKey = 3
							and QO_Code = @ptq_HotelKey
							and QO_SubCode1 = 0
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and QD_Date = @ptq_Date
							and QT_ByRoom = 1
							and QD_Type = 1
							and QT_IsByCheckIn = 0
			
						insert into @tmpDeleteQuotаs (tmpQoid) 
						SELECT	QO_ID	
							from QuotaObjects join Quotas on QO_QTID = QT_ID
							where not exists (select 1 from StopSales where SS_QOID = QO_ID)
							and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
							and QO_SVKey = 3
							and QO_Code = @ptq_HotelKey
							and QO_SubCode1 = 0
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and QT_ByRoom = 1
							and QT_IsByCheckIn = 0
						
						insert into @tmpDeleteQuotаs (tmpQtid) 
						SELECT	QT_ID	
							from Quotas join QuotaObjects on QT_ID = QO_QTID
							where not exists (select 1 from QuotaObjects where QO_QTID = QT_ID)
							and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
							and QT_ByRoom = 1 and QT_IsByCheckIn = 0
						
						delete ProtourQuotes where PTQ_Id = @ptq_Id
					end
				end
			END TRY
			BEGIN CATCH
				DECLARE @errorMessage3 as nvarchar(max)
				SET @errorMessage3 = 'Error in SyncProtourQuotes allotment: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

				INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @errorMessage3)
			END CATCH
			
			if (@ptq_CommitmentTotal < 0 and @ptq_AllotmentTotal < 0 and @ptq_State in (1,3))
			begin
				-- и дальше отправляем письмо
				select @hdname = ISNULL(HD_Name,0) from HotelDictionary where HD_Key = @ptq_HotelKey
				select @rcname = ISNULL(RC_Name,0) from RoomsCategory where RC_key = @ptq_RoomCategoryKey
				select @partnerName = ISNULL(PR_FullName,0) from Partners where PR_Key = @ptq_PartnerKey
				set @str1 = @str1 + CHAR(13) + CHAR(13) + 'Партнер:' + convert(varchar(100),@partnerName) + '(' + convert(varchar(100),@ptq_PartnerKey) + ')' + CHAR(13) + 
														'Отель:' + convert(varchar(100),@hdname) + '(' + convert(varchar(100),@ptq_HotelKey) + ')' + CHAR(13) +
														'Категория номера:' + convert(varchar(100),@rcname) + CHAR(13) + 
														'Дата:' + convert(varchar(100),@ptq_Date, 105) + CHAR(13) +
														'Количество мест:' + convert(varchar(100),@ptq_AllotmentTotal) + CHAR(13)
				print @str1
				
				update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
			end
			
			-- рассадка в квоты по раннее оформленным услугам, т.е. зажаем в квоты услуги, которые сидят на запросе
			if exists (select TOP 1 1
						from Dogovorlist with(nolock) join HotelRooms with(nolock) on DL_SUBCODE1 = HR_KEY
						where dl_svkey = 3
						and dl_code = @ptq_HotelKey
						and ((@ptq_RoomCategoryKey = 0) or (HR_RCKEY = @ptq_RoomCategoryKey))
						and (select COALESCE(min(SD_State), 4) from ServiceByDate where SD_DLKey = DL_Key) = 4
						and @ptq_Date between DL_DateBeg and DL_DATEEND)
			begin
				exec ProtourSetServiceToQuota @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date
			end
			
			if (@isErrorState = 1)
			begin
				-- проставляем PTQ_ErrorState = 1, чтобы не отправлять в след раз письмо, так оно уже было отправлено в первый раз
				-- проставляем Ptq_CommitmentTotal = -1 и Ptq_AllotmentTotal = -1, чтобы запись снова смогла загрузиться из плагина Протура  
				update ProtourQuotes set PTQ_ErrorState = 1, PTQ_State = 6, Ptq_CommitmentTotal = -1, Ptq_AllotmentTotal = -1 
				where PTQ_Id = @ptq_Id	
			end
			else if (@isErrorState = 0 and @ptq_CommitmentTotal = 0 and @ptq_AllotmentTotal = 0)
			begin
				update ProtourQuotes set PTQ_State = 2, PTQ_ErrorState = null where PTQ_Id = @ptq_Id
			end
			
			set @isErrorState = 0
		
			FETCH NEXT FROM qCur INTO @ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, 
							@ptq_CommitmentTotal, @ptq_AllotmentTotal, @ptq_Release, @ptq_StopSale, @ptq_CancelStopSale, @ptq_ErrorState
						
		END
		CLOSE qCur
		DEALLOCATE qCur	
		
		-- удаление квот
		exec QuotaDetailAfterDelete
		
		delete QuotaObjects where QO_ID in (select tmpQoid from @tmpDeleteQuotаs)
		delete Quotas where QT_ID in (select tmpQtid from @tmpDeleteQuotаs)
		--
				
		BEGIN TRY
			if exists (select 1 from SystemSettings where SS_ParmName='SYSEmailProtourQuotes')
				select @email = SS_ParmValue from SystemSettings where SS_ParmName='SYSEmailProtourQuotes'
				
			if (@str <> 'Количество квот, полученное из ProTour меньше, чем число занятых мест. Параметры квот:')
			begin
				-- отправка письма, если количество квот, полученное из ProTour меньше, чем число занятых мест				
				insert into SendMail (SM_EMAIL, SM_Text, SM_Date, SM_DateGet, SM_Creator, SM_DgKey) values (ISNULL(@email,''), @str, GETDATE(), '1900-01-01', ISNULL(@uskey,0), 0)
			end
			
			if (@str1 <> 'Из ProTour пришло отрицательное количество мест. Параметры квот:')
			begin
				-- отправка письма, если из ProTour пришло отрицательное количество мест
				insert into SendMail (SM_EMAIL, SM_Text, SM_Date, SM_DateGet, SM_Creator, SM_DgKey) values (ISNULL(@email,''), @str1, GETDATE(), '1900-01-01', ISNULL(@uskey,0), 0)
			end
		END TRY
		BEGIN CATCH
			DECLARE @errorMessage4 as nvarchar(max)
			SET @errorMessage4 = 'Error in SyncProtourQuotes insert Blanks: ' + ERROR_MESSAGE()
			
			INSERT INTO SystemLog (sl_date, sl_message)
			VALUES (getdate(), @errorMessage4)
		END CATCH
	end
	--обрабатываем стопы
	if (@quotesUpdate = 0 or @quotesUpdate is null) 
	begin
		declare @tmpQuotаs table(
		ptqId int,
		ptqPartnerKey int,
		ptqHotelKey int,
		ptqRoomCategoryKey int,
		ptqDate datetime,
		ptqState smallint,
		ptqCommitmentTotal int,
		ptqAllotmentTotal int,
		ptqRelease int,
		ptqStopSale bit,
		ptqCancelStopSale bit
		)
		
		insert into @tmpQuotаs select * from
		(SELECT	PTQ_Id, Ptq_PartnerKey, Ptq_HotelKey, Ptq_RoomCategoryKey, Ptq_Date, Ptq_State, PTQ_CommitmentTotal, PTQ_AllotmentTotal, Ptq_Release, Ptq_StopSale, Ptq_CancelStopSale	
			FROM ProtourQuotes where (PTQ_HotelKey = @hotelKey or @hotelKey is null) and PTQ_StopSale=1 and PTQ_CancelStopSale = 0 and PTQ_State in (1, 3) and PTQ_Date < '2079-06-05'
			and (PTQ_IsByCheckin <> 1 or PTQ_IsByCheckin is null)
		) as innerQuotas 
		
		DECLARE qCur CURSOR FOR
		
		SELECT	PTQ_Id, Ptq_PartnerKey, Ptq_HotelKey, Ptq_RoomCategoryKey, Ptq_Date, Ptq_State, PTQ_CommitmentTotal, PTQ_AllotmentTotal, Ptq_Release, Ptq_StopSale, Ptq_CancelStopSale, PTQ_IsByCheckin	
			FROM ProtourQuotes where (PTQ_HotelKey = @hotelKey or @hotelKey is null) and PTQ_StopSale=1 and PTQ_State <> 2 and PTQ_Date < '2079-06-05'
										
		OPEN qCur
		FETCH NEXT FROM qCur INTO	@ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, @ptq_CommitmentTotal, @ptq_AllotmentTotal,
									@ptq_Release, @ptq_StopSale, @ptq_CancelStopSale, @ptq_IsByCheckin
						
		WHILE @@FETCH_STATUS = 0
		BEGIN
			BEGIN TRY
				if (@ptq_CommitmentTotal = 1 and @ptq_AllotmentTotal = 1)
				set @ss_allotmentAndCommitment = 1
				else if (@ptq_AllotmentTotal = 1 and @ptq_CommitmentTotal = 0) 
					set @ss_allotmentAndCommitment = 0
				else 
					set @ss_allotmentAndCommitment = 1
					
				if ((@ptq_State = 1 or @ptq_State = 3) and @ptq_CancelStopSale = 0 and (@ptq_IsByCheckin <> 1 or @ptq_IsByCheckin is null)) -- 0 - добавление стопов, 1 - удаление стопов
				begin
					if exists (select TOP 1 1 from QuotaObjects where QO_Code = @ptq_HotelKey and QO_SVKey = 3 and QO_SubCode1 = 0 and QO_SubCode2 = @ptq_RoomCategoryKey and QO_QTID is null) -- при передаче стопов, здесь лежит RM_Key
					begin
						if not exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID=QO_ID
								where SS_PRKey = @ptq_PartnerKey
								and QO_Code = @ptq_HotelKey
								and SS_Date = @ptq_Date
								and QO_SubCode2 = @ptq_RoomCategoryKey
								and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
								and QO_QTID is null
								and QO_SVKey = 3) -- при передаче стопов, здесь лежит RM_Key
						begin
							select @qoid = QO_ID from QuotaObjects where QO_Code = @ptq_HotelKey and QO_SVKey = 3 and QO_SubCode1 = 0 and QO_SubCode2 = @ptq_RoomCategoryKey and QO_QTID is null 
							
							insert into StopSales(SS_QOID, SS_QDID, SS_PRKey, SS_Date, SS_AllotmentAndCommitment, SS_Comment, SS_CreateDate, SS_CreatorKey, SS_LastUpdate)
								values (@qoid, null, @ptq_PartnerKey, @ptq_Date, @ss_allotmentAndCommitment, '', GETDATE(), ISNULL(@uskey,0), GETDATE())
								
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
						end
						else
						begin
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id	
							-- временно, для того чтобы отловить ошибку
							if not exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID=QO_ID
								where SS_PRKey = @ptq_PartnerKey
								and QO_Code = @ptq_HotelKey
								and SS_Date = @ptq_Date
								and QO_SubCode2 = @ptq_RoomCategoryKey
								and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
								and QO_QTID is null
								and QO_SVKey = 3)	
							begin
								DECLARE @errorMessage as nvarchar(max)
								SET @errorMessage = 'Error in SyncProtourQuotes stop (not exists):  ' + convert(nvarchar(max), @ptq_Id)

								INSERT INTO SystemLog (sl_date, sl_message)
								VALUES (getdate(), @errorMessage)
								
								update ProtourQuotes set PTQ_State = 3 where PTQ_Id = @ptq_Id	
							end
							--	
						end										
					end
					else
					begin
						insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
						values (null, 3, @ptq_HotelKey, 0, @ptq_RoomCategoryKey)
						set @qoid = SCOPE_IDENTITY()
						
						insert into StopSales(SS_QOID, SS_QDID, SS_PRKey, SS_Date, SS_AllotmentAndCommitment, SS_Comment, SS_CreateDate, SS_CreatorKey, SS_LastUpdate)
								values (@qoid, null, @ptq_PartnerKey, @ptq_Date, @ss_allotmentAndCommitment, '', GETDATE(), ISNULL(@uskey,0), GETDATE())
								
						update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
					end
					
					-- временно, для того чтобы отловить ошибку
					if not exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID=QO_ID
						where SS_PRKey = @ptq_PartnerKey
						and QO_Code = @ptq_HotelKey
						and SS_Date = @ptq_Date
						and QO_SubCode2 = @ptq_RoomCategoryKey
						and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
						and QO_QTID is null
						and QO_SVKey = 3)	
					begin
						DECLARE @errorMessage1 as nvarchar(max)
						SET @errorMessage1 = 'Error in SyncProtourQuotes stop (not exists):  ' + convert(nvarchar(max), @ptq_Id)

						INSERT INTO SystemLog (sl_date, sl_message)
						VALUES (getdate(), @errorMessage1)
								
						update ProtourQuotes set PTQ_State = 3 where PTQ_Id = @ptq_Id	
					end
					--
							
					update QuotaObjects
							set QO_CTKEY = (select HD_CTKEY from HotelDictionary where HD_KEY = QO_Code)
							where QO_ID = @qoid
						
					update QuotaObjects
							set QO_CNKey = (select CT_CNKEY from CityDictionary where CT_KEY = QO_CTKey)
							where QO_CNKey is null
							and QO_CTKey is not null
							and QO_ID = @qoid
				end
			END TRY
			BEGIN CATCH
				DECLARE @errorMessage_1 as nvarchar(max)
				SET @errorMessage_1 = 'Error in SyncProtourQuotes stop: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

				INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @errorMessage_1)
			END CATCH
			BEGIN TRY
				if ((@ptq_State = 1 or @ptq_State = 3) and @ptq_CancelStopSale = 1 and (@ptq_IsByCheckin <> 1 or @ptq_IsByCheckin is null)) 
				begin
					if (@ptq_CommitmentTotal = 1 and @ptq_AllotmentTotal = 1)
						set @ss_allotmentAndCommitment = 2
					else if (@ptq_AllotmentTotal = 1 and @ptq_CommitmentTotal = 0) 
						set @ss_allotmentAndCommitment = 0
					else if (@ptq_AllotmentTotal = 0 and @ptq_CommitmentTotal = 1) 
						set @ss_allotmentAndCommitment = 1
						
					if (@ss_allotmentAndCommitment = 0 or @ss_allotmentAndCommitment = 1)
					begin
						if exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID = QO_ID
						where QO_Code = @ptq_HotelKey
						and QO_SVKey = 3
						and QO_SubCode1 = 0 
						and SS_Date = @ptq_Date
						and SS_PRKey = @ptq_PartnerKey
						and QO_SubCode2 = @ptq_RoomCategoryKey
						and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
						and QO_QTID is null)
						begin
							delete StopSales
							from StopSales join QuotaObjects on SS_QOID = QO_ID
							where QO_Code = @ptq_HotelKey
							and QO_SVKey = 3
							and QO_SubCode1 = 0 
							and SS_Date = @ptq_Date
							and SS_PRKey = @ptq_PartnerKey
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
							and QO_QTID is null
						
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
						end
						else
						begin
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
							print 'Стоп-сейл был уже ранее удален'
						end
						
						-- если пришла отмена для всех размещений, удаляем стопы для всех размещений
						if (@ptq_RoomCategoryKey = 0)
						begin
							delete StopSales
							from StopSales join QuotaObjects on SS_QOID = QO_ID
							where QO_Code = @ptq_HotelKey
							and QO_SVKey = 3
							and QO_SubCode1 = 0 
							and SS_Date = @ptq_Date
							and SS_PRKey = @ptq_PartnerKey
							and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
							and QO_QTID is null
						end
					end
					else if (@ss_allotmentAndCommitment = 2) -- если пришла отмена на все (на allotment+commitment и на allotment)
					begin
						if exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID = QO_ID
						where QO_Code = @ptq_HotelKey
						and QO_SVKey = 3
						and QO_SubCode1 = 0 
						and SS_Date = @ptq_Date
						and SS_PRKey = @ptq_PartnerKey
						and QO_SubCode2 = @ptq_RoomCategoryKey
						and QO_QTID is null)
						begin
							delete StopSales
							from StopSales join QuotaObjects on SS_QOID = QO_ID
							where QO_Code = @ptq_HotelKey
							and QO_SVKey = 3
							and QO_SubCode1 = 0 
							and SS_Date = @ptq_Date
							and SS_PRKey = @ptq_PartnerKey
							and QO_SubCode2 = @ptq_RoomCategoryKey
							and QO_QTID is null
						
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
						end
						else
						begin
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
							print 'Стоп-сейл был уже ранее удален'
						end
						
						-- если пришла отмена для всех размещений, удаляем стопы для всех размещений
						if (@ptq_RoomCategoryKey = 0)
						begin
							delete StopSales
							from StopSales join QuotaObjects on SS_QOID = QO_ID
							where QO_Code = @ptq_HotelKey
							and QO_SVKey = 3
							and QO_SubCode1 = 0 
							and SS_Date = @ptq_Date
							and SS_PRKey = @ptq_PartnerKey
							and QO_QTID is null
						end
					end
				end
				if (@ptq_State = 4 and @ptq_CancelStopSale = 1)
				begin
					delete ProtourQuotes where PTQ_Id = @ptq_Id
				end
			END TRY
			BEGIN CATCH
				DECLARE @errorMessage9 as nvarchar(max)
				SET @errorMessage9 = 'Error in SyncProtourQuotes cancel stop: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

				INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @errorMessage9)
			END CATCH
			
			-- запретить заезд, т.е если @ptq_IsByCheckin = 1
			BEGIN TRY			
				if (@ptq_IsByCheckin = 1 and (@ptq_State = 1 or @ptq_State = 3))
				begin
					if (@ptq_CommitmentTotal >= 0)
					begin
						if exists (select TOP 1 1
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 2
									and QT_IsByCheckIn = 0)
						begin
							select @qdid = QD_ID
								from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
								inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
								where QT_PRKey = @ptq_PartnerKey
								and QO_SVKey = 3
								and QO_Code = @ptq_HotelKey
								and QO_SubCode1 = 0
								and QO_SubCode2 = @ptq_RoomCategoryKey
								and QD_Date = @ptq_Date
								and QT_ByRoom = 1
								and QD_Type = 2
								and QT_IsByCheckIn = 0
								
							UPDATE QuotaParts  SET QP_IsNotCheckIn = 1 WHERE QP_QDID = @qdid
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
						end
						
					end
					if (@ptq_AllotmentTotal >= 0)
					begin
						if exists (select TOP 1 1
									from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
									inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
									where QT_PRKey = @ptq_PartnerKey
									and QO_SVKey = 3
									and QO_Code = @ptq_HotelKey
									and QO_SubCode1 = 0
									and QO_SubCode2 = @ptq_RoomCategoryKey
									and QD_Date = @ptq_Date
									and QT_ByRoom = 1
									and QD_Type = 1
									and QT_IsByCheckIn = 0)
						begin
							select @qdid = QD_ID
								from Quotas with(nolock) inner join QuotaDetails with(nolock) on QT_ID = QD_QTID 
								inner join QuotaObjects with(nolock) on QT_ID = QO_QTID
								where QT_PRKey = @ptq_PartnerKey
								and QO_SVKey = 3
								and QO_Code = @ptq_HotelKey
								and QO_SubCode1 = 0
								and QO_SubCode2 = @ptq_RoomCategoryKey
								and QD_Date = @ptq_Date
								and QT_ByRoom = 1
								and QD_Type = 1
								and QT_IsByCheckIn = 0
							
							UPDATE QuotaParts  SET QP_IsNotCheckIn = 1 WHERE QP_QDID = @qdid
							update ProtourQuotes set PTQ_State = 2 where PTQ_Id = @ptq_Id
						end
					end
				end
			END TRY
			BEGIN CATCH
				DECLARE @errorMessage_20 as nvarchar(max)
				SET @errorMessage_20 = 'Error in SyncProtourQuotes ByCheckin: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

				INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @errorMessage_20)
			END CATCH
			
			FETCH NEXT FROM qCur INTO @ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, @ptq_CommitmentTotal, @ptq_AllotmentTotal,
							@ptq_Release, @ptq_StopSale, @ptq_CancelStopSale, @ptq_IsByCheckin
		END
		CLOSE qCur
		DEALLOCATE qCur
	end
	
	-- Контрольная проверка (проверяем попали ли записи из Протура в МТ). 
	DECLARE Cur CURSOR FOR
	select * from @tmpQuotаs
	
	OPEN Cur
	FETCH NEXT FROM Cur INTO	@ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, @ptq_CommitmentTotal, @ptq_AllotmentTotal,
								@ptq_Release, @ptq_StopSale, @ptq_CancelStopSale
						
	WHILE @@FETCH_STATUS = 0
	BEGIN
		if not exists (select TOP 1 1 from StopSales join QuotaObjects on SS_QOID=QO_ID
								where SS_PRKey = @ptq_PartnerKey
								and QO_Code = @ptq_HotelKey
								and SS_Date = @ptq_Date
								and QO_SubCode2 = @ptq_RoomCategoryKey
								and SS_AllotmentAndCommitment = @ss_allotmentAndCommitment
								and QO_QTID is null
								and QO_SVKey = 3)
		begin
			DECLARE @error as nvarchar(max)
			SET @error = 'Error in SyncProtourQuotes stop not exists: ' + ERROR_MESSAGE() + convert(nvarchar(max), @ptq_Id)

			INSERT INTO SystemLog (sl_date, sl_message)
				VALUES (getdate(), @error)
		end
		FETCH NEXT FROM Cur INTO @ptq_Id, @ptq_PartnerKey, @ptq_HotelKey, @ptq_RoomCategoryKey, @ptq_Date, @ptq_State, @ptq_CommitmentTotal, @ptq_AllotmentTotal,
								@ptq_Release, @ptq_StopSale, @ptq_CancelStopSale
	END
	CLOSE Cur
	DEALLOCATE Cur
	
	
	if not exists (select TOP 1 1 from History where (HI_Date between dateadd(dd,datediff(dd,0,getdate()),0) and getdate()) and HI_Text = 'Произошла закачка квот из ProtourQuotes')
	begin
		insert into History (HI_Date, HI_Text) values (getdate(), 'Произошла закачка квот из ProtourQuotes')
		--update SystemSettings set SS_ParmValue=convert(varchar(100), getdate(), 105) where SS_ParmName = 'SYSProtourQuotesHistory'
	end
															
END
GO
grant exec on [dbo].[LoadProtourQuotes] to public
go



/*********************************************************************/
/* end sp_LoadProtourQuotes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_DogListToQuotas.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DogListToQuotas]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[DogListToQuotas]
GO

CREATE PROCEDURE [dbo].[DogListToQuotas]
(
	--<VERSION>2009.2.38</VERSION>
	--<DATA>21.05.2013</DATA>
		@DLKey int,
	@SetQuotaCheck bit = null,			--если передается этот признак, то по услуге проверяются актуальные квоты, и в случае не актуальности номер/место снимается с квоты целиком и пытается поставиться на квоту заново
										--остальные квоты занимаемые услугой не снимаются, остаются как есть
	@SetQuotaRLKey int = null,
	@SetQuotaRPKey int = null,
	@SetQuotaQPID int = null,			--передается только из руч.режима (только для одной даты!!!!!!)	
	@SetQuotaDateBeg datetime = null,
	@SetQuotaDateEnd datetime = null,
	@SetQuotaAgentKey int = null, 
	@SetQuotaType smallint = null,		--при переходе на 2008.1 в этот параметр передается отрицательное число (-1 Allotment, -2 Коммитемент)
	@SetQuotaByRoom bit = null, 
	@SetQuotaPartner int = null, 
	@SetQuotaDuration smallint = null,
	@SetQuotaSubCode1 int = null,
	@SetQuotaSubCode2 int = null,
	@SetQuotaFilialKey int = null, 
	@SetQuotaCityDepartments int = null,
	@SetQuotaDateFirst datetime = null,
	@SetOkIfRequest bit = 0, -- запуск из тригера T_UpdDogListQuota
	@OldSetToQuota bit = 0 -- запустить старый механизм посадки
) 
AS

--insert into Debug (db_n1, db_n2, db_n3) values (@DLKey, @SetQuotaType, 999)
declare @SVKey int, @Code int, @SubCode1 int, @PRKey int, @AgentKey int, @DgKey int,
		@TourDuration int, @FilialKey int, @CityDepartment int,
		@ServiceDateBeg datetime, @ServiceDateEnd datetime, @Pax smallint, @IsWait smallint,@SVQUOTED smallint,
		@SdStateOld int, @SdStateNew int, @nHIID int, @dgCode nvarchar(10), @dlName nvarchar(max), @Long smallint
		
declare @sOldValue nvarchar(max), @sNewValue nvarchar(max)

-- если включена настройка то отрабатывает новый метод посадки и рассадки в квоту
if exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota' and SS_ParmValue = 1) and @OldSetToQuota = 0
begin
	-- запоминаем старый статус услуги
	select @SdStateOld = max(SD_State) from ServiceByDate where SD_DLKey = @DLKey


	exec WcfSetServiceToQuota @DLKey, @SetQuotaType
	
	-- находим новый статус
	select @SdStateNew = max(SD_State) from ServiceByDate where SD_DLKey = @DLKey

	-- устанавливаем новый статус
	Declare @dlControlNew int
	exec SetServiceStatusOk @DLKey, @dlControlNew output

	-- запись в историю, только если статус услуги поменялся
	if exists(select top 1 1 from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory' and SS_ParmValue = '1') and @SdStateOld != @SdStateNew
	begin
		IF ISNULL(@SdStateOld, 0) = 0
			SET @sOldValue = ''
		ELSE IF @SdStateOld = 1
			SET @sOldValue = 'Allotment'
		ELSE IF @SdStateOld = 2
			SET @sOldValue = 'Commitment'
		ELSE IF @SdStateOld = 3
			SET @sOldValue = 'Confirmed'
		ELSE IF @SdStateOld = 4
			SET @sOldValue = 'Wait'

		IF ISNULL(@SdStateNew, 0) = 0
			SET @sNewValue = ''
		ELSE IF @SdStateNew = 1
			SET @sNewValue = 'Allotment'
		ELSE IF @SdStateNew = 2
			SET @sNewValue = 'Commitment'
		ELSE IF @SdStateNew = 3
			SET @sNewValue = 'Confirmed'
		ELSE IF @SdStateNew = 4
			SET @sNewValue = 'Wait'

		EXEC @nHIID = dbo.InsHistory @dgCode, @DgKey, 19, '', 'UPD', @dlName, '', 0, ''
		EXECUTE dbo.InsertHistoryDetail @nHIID, 19001, @sOldValue, @sNewValue, @SdStateOld, @SdStateNew, '', '', 0
	end

	return;
end

SELECT	@SVKey=DL_SVKey, @Code=DL_Code, @SubCode1=DL_SubCode1, @PRKey=DL_PartnerKey, 
		@ServiceDateBeg=DL_DateBeg, @ServiceDateEnd=DL_DateEnd, @Pax=DL_NMen,
		@AgentKey=DG_PartnerKey, @TourDuration=DG_NDay, @FilialKey=DG_FilialKey, @CityDepartment=DG_CTDepartureKey, @IsWait=ISNULL(DL_Wait,0),
		@DgKey = DL_DGKEY,
		@dgCode = DG_CODE,
		@dlName = DL_NAME
FROM	DogovorList join Dogovor on DL_DGKey = DG_Key
WHERE	DL_Key = @DLKey

-- сохраним старое значение квотируемости
select @SdStateOld = MAX(SD_State) from ServiceByDate where SD_DLKey = @DLKey

if @IsWait=1 and (@SetQuotaType in (1,2) or @SetQuotaType is null)  --Установлен признак "Не снимать квоту при бронировании". На квоту не ставим
BEGIN
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null	-- изменение
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @dlkey
	end
	return 0
END

SELECT @SVQUOTED=isnull(SV_Quoted,0) from service where sv_key=@SVKEY
if @SVQUOTED=0
BEGIN
	UPDATE ServiceByDate SET SD_State=3 WHERE SD_DLKey=@DLKey	
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @dlkey
	end
	return 0
END

-- ДОБАВЛЕНА НАСТРОЙКА ЗАПРЕЩАЮЩАЯ СНЯТИЕ КВОТЫ ДЛЯ УСЛУГИ, 
-- ТАК КАК В КВОТАХ НЕТ РЕАЛЬНОЙ ИНФОРМАЦИИ, А ТОЛЬКО ПРИЗНАК ИХ НАЛИЧИЯ (ПЕРЕДАЕТСЯ ИЗ INTERLOOK)
IF (@SetQuotaType in (1,2) or @SetQuotaType is null) and  EXISTS (SELECT 1 FROM dbo.SystemSettings WHERE SS_ParmName='IL_SyncILPartners' and SS_ParmValue LIKE '%/' + CAST(@PRKey as varchar(20)) + '/%')
Begin
	UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3
	begin
		exec SetStatusInRoom @dlkey
	end
	return 0
End

-- проверим если это доп место в комнате, то ее нельзя посадить в квоты, сажаем внеквоты и эта квота за человека
if exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaForAddPlaces' and SS_ParmValue=1)
begin
set @SetQuotaByRoom=0
	if ( exists (select top 1 1 from ServiceByDate join RoomPlaces on SD_RPID = RP_ID where SD_DLKey = @DLKey and RP_Type = 1) and (@SetQuotaByRoom = 0))
	begin
		set @SetQuotaType = 3
	end
end

declare @Q_Count smallint, @Q_AgentKey int, @Q_Type smallint, @Q_ByRoom bit, 
		@Q_PRKey int, @Q_FilialKey int, @Q_CityDepartments int, @Q_Duration smallint, @Q_DateBeg datetime, @Q_DateEnd datetime, @Q_DateFirst datetime, @Q_SubCode1 int, @Q_SubCode2 int,
		@Query nvarchar(max), @SubQuery varchar(1500), @Current int, @CurrentString varchar(50), @QTCount_Need smallint, @n smallint, @Result_Exist bit, @nTemp smallint, @Quota_CheckState smallint, @dTemp datetime

--karimbaeva 19-04-2012  по умолчанию если не хватает квот на всех туристов, то ставим их всех на запрос, если установлена настройка 
-- SYSSetQuotaToTourist - 1 - ставим туристов на запрос, 0- снимаем квоты на кого хватает, остальных ставим на запрос
if not exists(select 1 from systemsettings where ss_parmname='SYSSetQuotaToTourist' and SS_ParmValue=0)
begin
	If exists (SELECT top 1 1 FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	BEGIN
	declare @QT_ByRoom_1 bit
	create table #DlKeys_1
	(
		dlKey int
	)

	insert into #DLKeys_1
		select dl_key 
		from dogovorlist 
		where dl_dgkey in (
							select dl_dgkey 
							from dogovorlist 
							where dl_key = @DLKey
						   )
		and dl_svkey = 3
		
		SELECT @QT_ByRoom_1=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID 
		and QP_ID = (select top 1 SD_QPID
					from ServiceByDate join RoomPlaces on SD_RLID = RP_RLID  
					where RP_Type = 0 and sd_dlkey in (select dlKey from #DlKeys_1) and SD_RLID = (select TOP 1 SD_RLID from ServiceByDate where sd_dlkey=@DlKey))
		
		
		if (@QT_ByRoom_1=0 or @QT_ByRoom_1 is null)
		begin	
		SET @Q_DateBeg=@ServiceDateBeg
		SET @Q_DateEnd=@ServiceDateEnd
		SET @Q_DateFirst=@ServiceDateBeg
	
		EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
				@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
				@FilialKey,	@CityDepartment, 2, @Pax,@IsWait, 
				@Quota_CheckState output, @dTemp output, @nTemp output,
				@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
				@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
						
		if @Quota_CheckState = 0	
		begin
			UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null
			-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
			if @SetQuotaByRoom = 0 and @SVKey = 3
			begin
				exec SetStatusInRoom @dlkey
			end
			return 0
		end	
		end	
END
end 

--Если идет полная постановка услуги на квоту (@SetQuotaType is null) обычно после бронирования
--Или прошло удаление какой-то квоты и сейчас требуется освободить эту квоту и занять другую
--То требуется найти оптимально подходящую квоту и ее использовать

If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
BEGIN
	IF @SetQuotaCheck=1 
	begin
		UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID in (SELECT DISTINCT SD_RPID FROM QuotaDetails,QuotaParts,ServiceByDate WHERE SD_QPID=QP_ID and QP_QDID=QD_ID and QD_IsDeleted=1 and SD_DLKey=@DLKey)
	end
	ELSE
	BEGIN
		IF @SetQuotaRLKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey
		ELSE IF @SetQuotaRPKey is not null
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey
		ELSE
			UPDATE ServiceByDate SET SD_State=null, SD_QPID=null where SD_DLKey=@DLKey
	END
	SET @Q_DateBeg=@ServiceDateBeg
	SET @Q_DateEnd=@ServiceDateEnd
	SET @Q_DateFirst=@ServiceDateBeg
	IF @SetQuotaType=-1
		SET @Q_Type=1
	ELSE IF @SetQuotaType=-2
		SET @Q_Type=2
	
	EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax, @IsWait,
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
END
ELSE
BEGIN
	IF @SetQuotaType=4 or @SetQuotaType=3  --если новый статус Wait-list или Ok(вне квоты), то меняем статус и выходим из хранимки
		Set @Q_Type=@SetQuotaType
	Else If @SetQuotaQPID is not null
	BEGIN
		If @SetQuotaType is not null and @SetQuotaType>=0
			Set @Q_Type=@SetQuotaType
		Else
			Select @Q_Type=QD_Type from QuotaDetails,QuotaParts Where QP_QDID=QD_ID and QP_ID=@SetQuotaQPID
	END
	Else
		Set @Q_Type=null		
	--@SetQuotaQPID это конкретная квота, ее заполнение возможно только из режима ручного постановки услуги на квоту
	IF @SetQuotaByRoom=1 and @SVKey=3
	BEGIN
		if @SetQuotaRLKey is null
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
		else
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
	END
	ELSE
	BEGIN
		if @SetQuotaRPKey is null
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
		else
		begin
			UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=@SetQuotaQPID where SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_Date between @SetQuotaDateBeg and @SetQuotaDateEnd
		end
	END
	IF @SetQuotaType=4 or @SetQuotaType=3 or @SetQuotaQPID is not null --собственно выход (либо не надо ставить на квоту либо квота конкретная)
	begin
		-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
		if @SetQuotaByRoom = 0 and @SVKey = 3
		begin
			exec SetStatusInRoom @dlkey
		end
		-- запускаем хранимку на установку статуса путевки
		--exec SetReservationStatus @DgKey
		return 0
	end

	--	select * from ServiceByDate where SD_DLKey=202618 and SD_RLID=740
	SET @Q_AgentKey=@SetQuotaAgentKey
	SET @Q_Type=@SetQuotaType
	SET @Q_ByRoom=@SetQuotaByRoom
	SET @Q_PRKey=@SetQuotaPartner
	SET @Q_FilialKey=@SetQuotaFilialKey
	SET @Q_CityDepartments=@SetQuotaCityDepartments
	SET @Q_Duration=@SetQuotaDuration
	SET @Q_SubCode1=@SetQuotaSubCode1
	SET @Q_SubCode2=@SetQuotaSubCode2
	SET @Q_DateBeg=@SetQuotaDateBeg
	SET @Q_DateEnd=@SetQuotaDateEnd
	SET @Q_DateFirst=ISNULL(@SetQuotaDateFirst,@Q_DateBeg)
	SET @Result_Exist=0	
END

set @n=0

If not exists (SELECT top 1 1 FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
	print 'WARNING_DogListToQuotas_1'
If @Q_Count is null
	print 'WARNING_DogListToQuotas_2'
If @Result_Exist > 0
	print 'WARNING_DogListToQuotas_3'

CREATE table #StopSales (SS_QDID int,SS_QOID int,SS_DATE dateTime)
CREATE table #Quotas1(QP_ID int,QD_QTID int,QD_ID int,QO_ID int,QD_Release smallint,QP_Durations varchar(20),
	QD_Date DateTime,QP_IsNotCheckIn bit,QP_CheckInPlaces smallint,QP_CheckInPlacesBusy smallint,
	QP_Places smallint,QP_Busy smallint,QT_ID int,QO_QTID int,QO_SVKey int,QO_Code int,QO_SubCode1 int,QO_SubCode2 int)

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
-- Разрешим посадить в квоту с релиз периодом 0 текущим числом
set @DATETEMP = DATEADD(day, -1, @DATETEMP)

if exists (select top 1 1 from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1) OR exists (select top 1 1 from systemsettings where SS_ParmName='SYSAddQuotaPastPermit' and SS_ParmValue=1 and @Q_DateFirst < @DATETEMP)
	SET @DATETEMP='10-JAN-1900'

IF exists (SELECT top 1 1 FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	SET @Long=DATEDIFF(DAY,@Q_DateBeg,@Q_DateEnd)+1
	
	insert into #Quotas1 (QP_ID,QD_QTID,QD_ID,QO_ID,QD_Release,QP_Durations,QD_Date,QP_IsNotCheckIn,QP_CheckInPlaces,QP_CheckInPlacesBusy,QP_Places,QP_Busy,QT_ID,QO_QTID,QO_SVKey,QO_Code,QO_SubCode1,QO_SubCode2)
		select QP_ID,QD_QTID,QD_ID,QO_ID,QD_Release,QP_Durations,QD_Date,QP_IsNotCheckIn,QP_CheckInPlaces,QP_CheckInPlacesBusy,QP_Places,QP_Busy,QT_ID,QO_QTID,QO_SVKey,QO_Code,QO_SubCode1,QO_SubCode2
		FROM QuotaParts as QP1
		inner join QuotaDetails as QD1 on QP_QDID=QD_ID and QD_Date = QP_Date
		inner join Quotas on QT_ID=QD_QTID
		inner join QuotaObjects on QO_QTID=QT_ID
		WHERE QD_Type=@Q_Type
		and QT_ByRoom=@Q_ByRoom
		and QD_IsDeleted is null
		and QP_IsDeleted is null
		and QO_SVKey=@SVKey
		and QO_Code=@Code
		and QO_SubCode1=@Q_SubCode1
		and QO_SubCode2=CASE WHEN @SVKey=3 THEN @Q_SubCode2 ELSE QO_SubCode2 END
		and ISNULL(QP_FilialKey, -100) = ISNULL(@Q_FilialKey, -100)
		and ISNULL(QP_CityDepartments, -100) = ISNULL(@Q_CityDepartments, -100)
		and ISNULL(QP_AgentKey, -100) = ISNULL(@Q_AgentKey, -100)
		and ISNULL(QT_PRKey, -100) = ISNULL(@Q_PRKey, -100)
		and QP_Durations = CASE WHEN @Q_Duration=0 THEN '' ELSE QP_Durations END
		and QD_Date between @Q_DateBeg and DATEADD(DAY,@Long,@Q_DateBeg)
		and (QP_Places-QP_Busy) > 0
		and (isnull(QP_Durations, '') = ''
		or (isnull(QP_Durations, '') != '' and (QP_IsNotCheckIn = 1 or QP_CheckInPlaces - QP_CheckInPlacesBusy > 0))
		or (isnull(QP_Durations, '') != '' and (QP_IsNotCheckIn = 0 or QP_Places - QP_Busy > 0))
		or (isnull(QP_Durations, '') != '' and QD_Date = @Q_DateFirst))
		and (QD1.QD_Date > @DATETEMP + ISNULL(QD1.QD_Release,-1) OR (QD1.QD_Date < getdate() - 1))
		and ((QP_IsNotCheckIn = 0) or (QP_IsNotCheckIn = 1 and exists (select top 1 1 from QuotaDetails as tblQD
																		inner join QuotaParts as tblQP
																		on tblQP.QP_QDID = tblQD.QD_ID and tblQP.QP_Date = tblQD.QD_Date
																		where tblQP.QP_IsNotCheckIn = 0
																		and tblQD.QD_Date=@Q_DateFirst
																		and tblQD.QD_QTID=QD1.QD_QTID)))
		and QP_ID not in
		(SELECT QP_ID FROM QuotaParts QP2 inner join QuotaDetails QD2 on QP_QDID=QD_ID and QD_Date=QP_Date inner join Quotas QT2 on QT_ID=QD_QTID
			WHERE QD2.QD_Type=@Q_Type
			and QT2.QT_ByRoom=@Q_ByRoom
			and QD2.QD_IsDeleted is null
			and QP2.QP_IsDeleted is null
			and ISNULL(QP2.QP_FilialKey, -100) = ISNULL(@Q_FilialKey, -100)
			and ISNULL(QP2.QP_CityDepartments, -100) = ISNULL(@Q_CityDepartments, -100)
			and ISNULL(QP2.QP_AgentKey, -100) = ISNULL(@Q_AgentKey, -100)
			and ISNULL(QT2.QT_PRKey, -100) = ISNULL(@Q_PRKey, -100)
			and QP2.QP_Durations = CASE WHEN @Q_Duration=0 THEN '' ELSE QP2.QP_Durations END
			and QP2.QP_ID in (CASE WHEN @Q_Duration<>0 THEN (Select QL_QPID From QuotaLimitations Where QL_Duration=@Q_Duration) ELSE QP2.QP_ID END)
			and QD2.QD_Date=@Q_DateFirst
			and (QP2.QP_IsNotCheckIn=1 or QP2.QP_CheckInPlaces-QP2.QP_CheckInPlacesBusy <= 0)
			and QO_QTID=QT2.QT_ID
			and ISNULL(QD2.QD_Release,0)=ISNULL(QD1.QD_Release,0)
			and QP2.QP_Durations COLLATE DATABASE_DEFAULT = QP1.QP_Durations COLLATE DATABASE_DEFAULT)
	
	if (@Q_Duration<>0)
	begin
		delete from #Quotas1 where QP_ID not in (Select QL_QPID From QuotaLimitations Where QL_Duration=@Q_Duration)
	end
	
	insert into #StopSales SELECT SS_QDID, SS_QOID, SS_Date FROM StopSales inner join #Quotas1 on SS_QOID=#Quotas1.QO_ID and SS_QDID=#Quotas1.QD_ID WHERE isnull(SS_IsDeleted, 0) = 0
	
	delete from #Quotas1 where exists (SELECT top 1 1 FROM #StopSales WHERE SS_QDID=QD_ID and SS_QOID=QO_ID and SS_Date=QD_Date)
END

WHILE exists (SELECT top 1 1 FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null and SD_Date between @ServiceDateBeg and @ServiceDateEnd) and @n<5 and (@Q_Count is not null or @Result_Exist=0)
BEGIN
	DECLARE @n1 smallint, @n2 smallint, @prev bit, @durations_prev varchar(25), @release_prev smallint, @QP_ID int, @SK_Current int, @Temp smallint, @Error bit
	DECLARE @ServiceKeys Table (SK_ID int identity(1,1), SK_Key int, SK_QPID int, SK_Date smalldatetime)
	
	set @n=@n+1
	
	IF (@SetQuotaType is null or @SetQuotaType < 0) --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN
		IF (@Q_ByRoom = 1)
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null
		ELSE
			INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null
	END
	ELSE IF @Q_ByRoom=1
	BEGIN
		INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RLID, SD_Date FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RLID=@SetQuotaRLKey and SD_State is null
	END
	ELSE IF @Q_ByRoom=0
	BEGIN
		INSERT INTO @ServiceKeys (SK_Key,SK_Date) SELECT DISTINCT SD_RPID, SD_Date FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_RPID=@SetQuotaRPKey and SD_State is null
	END
	
	SET @Error=0
	SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
		
	WHILE @SK_Current is not null and @Error=0
	BEGIN
		SET @n1=1
		
		WHILE @n1<=@Long and @Error=0
		BEGIN
			SET @QP_ID=null
			SET @n2=0
			
			WHILE (@QP_ID is null) and @n2<2
			BEGIN
				IF @prev=1
					SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release
						FROM #Quotas1 AS Q1
						WHERE QD_Date=DATEADD(DAY,@n1-1,@Q_DateBeg) and QP_Durations=@durations_prev and QD_Release=@release_prev
						ORDER BY ISNULL(QD_Release,0) DESC, (select count(distinct QD_QTID) from QuotaDetails as QDP
																join QuotaParts as QPP on QDP.QD_ID = QPP.QP_QDID and QDP.QD_Date = QPP.QP_Date
																where exists (select top 1 1 from @ServiceKeys as SKP
																				where SKP.SK_QPID = QPP.QP_ID)
																and QDP.QD_QTID = Q1.QD_QTID)
						DESC
				ELSE
					SELECT TOP 1 @QP_ID=QP_ID, @durations_prev=QP_Durations, @release_prev=QD_Release
						FROM #Quotas1 as Q1
						WHERE QD_Date=DATEADD(DAY,@n1-1,@Q_DateBeg)
						ORDER BY ISNULL(QD_Release,0) DESC, (select count(distinct QD_QTID) from QuotaDetails as QDP
																join QuotaParts as QPP on QDP.QD_ID = QPP.QP_QDID and QDP.QD_Date = QPP.QP_Date
																where exists (select top 1 1 from @ServiceKeys as SKP
																				where SKP.SK_QPID = QPP.QP_ID)
																and QDP.QD_QTID = Q1.QD_QTID)
						DESC
				
				SET @n2=@n2+1
				
				IF @QP_ID is null
				BEGIN
					SET @prev=1
					SET @Error=1
				END
				ELSE
					UPDATE @ServiceKeys SET SK_QPID=@QP_ID WHERE SK_Key=@SK_Current and SK_Date=DATEADD(DAY,@n1-1,@Q_DateBeg)
				END
				
				SET @n1=@n1+1
			END
			
			IF @Error=0
			begin
				IF @Q_ByRoom = 1
					UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=SD_RLID) WHERE SD_DLKey=@DLKey and SD_RLID=@SK_Current and SD_State is null
						 and SD_Date between @ServiceDateBeg and @ServiceDateEnd
				ELSE
					UPDATE ServiceByDate SET SD_State=@Q_Type, SD_QPID=(SELECT SK_QPID FROM @ServiceKeys WHERE SK_Date=SD_Date and SK_Key=SD_RPID) WHERE SD_DLKey=@DLKey and SD_RPID=@SK_Current and SD_State is null
						and SD_Date between @ServiceDateBeg and @ServiceDateEnd
			end
		SET @SK_Current=null
		SELECT @SK_Current=MIN(SK_Key) FROM @ServiceKeys WHERE SK_QPID is null
	END
	
	set @n=@n+1

	declare @@SVKey int, @RPType int, @SDState int, @QTByRoom bit
	
	SELECT top 1 @QTByRoom = QT_ByRoom 
		FROM Quotas
		join QuotaObjects on QT_ID = QO_QTID
		where QO_Code = @Code
		and QO_SVKey = 3
	
	-- Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	if @SetQuotaByRoom = 0 and @SVKey = 3 and @QTByRoom = 0
	begin
		exec SetStatusInRoom @dlkey
	end

	--если @SetQuotaType is null -значит это начальная постановка услги на квоту и ее надо делать столько раз
	--сколько номеров или людей в услуге.
	If @SetQuotaType is null or @SetQuotaType<0 --! @SetQuotaType<0 <--при переходе на 2008.1
	BEGIN		
		If exists (SELECT top 1 1 FROM ServiceByDate WHERE SD_DLKey=@DLKey and SD_State is null)
		BEGIN
			EXEC dbo.[CheckQuotaExist] @SVKey, @Code, @SubCode1, @Q_DateBeg,
						@Q_DateEnd, @Q_DateFirst, @PRKey, @AgentKey, @TourDuration, 
						@FilialKey,	@CityDepartment, 1, @Pax,@IsWait, 
						@nTemp output, @dTemp output, @nTemp output,
						@Q_Count output, @Q_AgentKey output, @Q_Type output, @Q_ByRoom output, @Q_PRKey output, 
						@Q_FilialKey output, @Q_CityDepartments output,	@Q_Duration output, @Q_SubCode1 output, @Q_SubCode2 output
		END
	END	
	ELSE --а если @SetQuotaType is not null -значит ставим на услугу конкретное место, а раз так то оно должно встать на квоту должно было с первого раза, устанавливаем бит выхода.	
		SET @Result_Exist=1		--бит выхода
END

if exists(select top 1 1 from ServiceByDate where SD_DLKey=@DLKey and SD_State is null) and @SVKey = 3
begin
	exec SetStatusInRoom @dlkey
end

drop table #StopSales
drop table #Quotas1

UPDATE ServiceByDate SET SD_State=4 WHERE SD_DLKey=@DLKey and SD_State is null

-- сохраним новое значение квотируемости
select @SdStateNew = MAX(SD_State) from ServiceByDate where SD_DLKey = @DLKey

-- запись в историю
if exists(select top 1 1 from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory' and SS_ParmValue = '1')
begin
	IF ISNULL(@SdStateOld, 0) = 0
		SET @sOldValue = ''
	ELSE IF @SdStateOld = 1
		SET @sOldValue = 'Allotment'
	ELSE IF @SdStateOld = 2
		SET @sOldValue = 'Commitment'
	ELSE IF @SdStateOld = 3
		SET @sOldValue = 'Confirmed'
	ELSE IF @SdStateOld = 4
		SET @sOldValue = 'Wait'

	IF ISNULL(@SdStateNew, 0) = 0
		SET @sNewValue = ''
	ELSE IF @SdStateNew = 1
		SET @sNewValue = 'Allotment'
	ELSE IF @SdStateNew = 2
		SET @sNewValue = 'Commitment'
	ELSE IF @SdStateNew = 3
		SET @sNewValue = 'Confirmed'
	ELSE IF @SdStateNew = 4
		SET @sNewValue = 'Wait'

	EXEC @nHIID = dbo.InsHistory @dgCode, @DgKey, 19, '', 'UPD', @dlName, '', 0, ''
	EXECUTE dbo.InsertHistoryDetail @nHIID, 19001, @sOldValue, @sNewValue, @SdStateOld, @SdStateNew, '', '', 0
end

-- 2012-10-12 tkachuk, task 8473 - меняем статус для услуг, привязанных к изменившимся квотам
DECLARE @dlControl int
EXEC dbo.SetServiceStatusOk @DlKey,@dlControl


SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[DogListToQuotas] TO PUBLIC
GO
/*********************************************************************/
/* end sp_DogListToQuotas.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_SetStatusInRoom.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SetStatusInRoom]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[SetStatusInRoom]
GO

CREATE PROCEDURE [dbo].[SetStatusInRoom] 
	(
		--<VERSION>2009.2.4</VERSION>
		--<DATA>20.05.2013</DATA>
		@DlKey int
	)
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	/*
	Хранимка в зависисмости от статусов, основных мест в комнате устанавливает статус квотирования на доп местах
	1. Если "Осн" в состоянии "Ок", "А", или "С" - тогда "доп" - в "Ок".
	2. Если "Осн" в "RQ" - тогда доп - в "RQ".
	*/
	declare @ServiceHotelKey int, @SVKey int		-- ключ услуги проживание
	declare @DGKey int, @RPType int, @SDState int, @QTByRoom bit, @Code int
	set @ServiceHotelKey = 3
	
	select @SVKey=dl_svkey, @DGKey = DL_DGKEY, @Code = DL_CODE from DogovorList where dl_key = @DLKey
	
	if (@SVKey <> @ServiceHotelKey)
		return 0
	
	SELECT top 1 @QTByRoom = QT_ByRoom 
		FROM Quotas
		join QuotaObjects on QT_ID = QO_QTID
		where QO_Code = @Code
		and QO_SVKey = @ServiceHotelKey
	
	if (@QTByRoom = 1)
	begin
		select @rpType = RP_Type, @SDState = MAX(COALESCE(SD_State, 4))
			from ServiceByDate
			join RoomPlaces on SD_RLID = RP_RLID
			where SD_DLKey = @DlKey
			group by SD_DLKey, RP_Type
		
		if (@rpType = 0)
		begin
			create table #DlKeys
			(
				dlKey int
			)
			
			insert into #DLKeys
				select dl_key
				from dogovorlist
				where dl_dgkey = @DGKey
				and dl_svkey = @ServiceHotelKey
			
			update ServiceByDate
				set SD_State = @SDState
				from RoomPlaces
				where RP_RLID = SD_RLID
				and SD_DLKey in (select dlKey from #DlKeys)
				and RP_Type = 1
				and SD_RLID in (select SD_RLID
								from ServiceByDate
								where SD_DLKey = @DlKey)
			
			drop table #DLKeys
		end
		else
		begin
			select @SDState = MAX(COALESCE(SD_State,4)) from DogovorList dl1
				inner join hotelRooms on dl_subcode1=hr_key
				inner join ServiceByDate on DL_KEY = SD_DLKey
				inner join RoomPlaces on SD_RLID = RP_RLID
				where DL_DGCOD = (select DL_DGCOD from dogovorlist dl2 where DL_KEY=@DlKey and dl1.DL_SVKEY=dl2.DL_SVKEY)
				and HR_MAIN = 1
				and RP_Type = 0
			
			update ServiceByDate
				set SD_State = @SDState
				where SD_DLKey = @DlKey
		end
	end
END

SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[SetStatusInRoom] TO PUBLIC
GO
/*********************************************************************/
/* end sp_SetStatusInRoom.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.10)_IX_ServiceByDateIndexes.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ServiceByDate]') AND name = N'X_SD_Object_5')
BEGIN
	CREATE NONCLUSTERED INDEX [X_SD_Object_5]
	ON [dbo].[ServiceByDate] ([SD_DLKey],[SD_RLID],[SD_RPID],[SD_State])
	INCLUDE ([SD_Date])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF,
	SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF,
	DROP_EXISTING = OFF, ONLINE = OFF,
	ALLOW_ROW_LOCKS  = ON,
	ALLOW_PAGE_LOCKS  = ON,
	FILLFACTOR = 70) ON [PRIMARY]
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ServiceByDate]') AND name = N'X_SD_Object_6')
BEGIN
	CREATE NONCLUSTERED INDEX [X_SD_Object_6]
	ON [dbo].[ServiceByDate] ([SD_DLKey],[SD_State])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF,
	SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF,
	DROP_EXISTING = OFF, ONLINE = OFF,
	ALLOW_ROW_LOCKS  = ON,
	ALLOW_PAGE_LOCKS  = ON,
	FILLFACTOR = 70) ON [PRIMARY]
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ServiceByDate]') AND name = N'X_SD_Object_7')
BEGIN
	CREATE NONCLUSTERED INDEX [X_SD_Object_7]
	ON [dbo].[ServiceByDate] ([SD_DLKey])
	INCLUDE ([SD_TUKey],[SD_State])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF,
	SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF,
	DROP_EXISTING = OFF, ONLINE = OFF,
	ALLOW_ROW_LOCKS  = ON,
	ALLOW_PAGE_LOCKS  = ON,
	FILLFACTOR = 70) ON [PRIMARY]
END
GO
/*********************************************************************/
/* end (2013.04.10)_IX_ServiceByDateIndexes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_ServiceByDateChanged.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='TR' and name='T_ServiceByDateChanged')
	-- удаляю лишний триггер
	drop trigger dbo.T_ServiceByDateChanged
go

CREATE TRIGGER [dbo].[T_ServiceByDateChanged] ON [dbo].[ServiceByDate]
AFTER INSERT, UPDATE, DELETE
AS
--<DATE>2013-04-16</DATE>
--<VERSION>2009.2.19.1</VERSION>
DECLARE @sMod varchar(3), @nHIID int, @sDGCode varchar(10), @nDGKey int, @sDLName varchar(150), @sTemp varchar(25), @sTemp2 varchar(255), @sTuristName varchar(55)
DECLARE @sOldValue varchar(255), @sNewValue varchar(255), @nOldValue int, @nNewValue int, @SDDate datetime
DECLARE @nRowsCount int, @sServiceStatusToHistory varchar(255)

DECLARE @SDID int, @N_SD_DLKey int, @N_SD_RLID int, @N_SD_TUKEY int, @N_SD_QPID int, @N_SD_State int, @N_SD_Date datetime,
		@O_SD_DLKey int, @O_SD_RLID int, @O_SD_TUKEY int, @O_SD_QPID int, @O_SD_State int, @O_SD_Date datetime, @QT_ByRoom bit,
		@nDelCount int, @nInsCount int, @DLDateBeg datetime, @DLNDays int, @QState int, @NewQState int

SELECT @nDelCount = COUNT(*) FROM DELETED
SELECT @nInsCount = COUNT(*) FROM INSERTED
IF (@nInsCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	O.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
			null, null, null, null, null, null
    FROM DELETED O
END
ELSE IF (@nDelCount = 0)
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			null, null, null, null, null, null,
			N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM	INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key
	-- CRM01871H3T9 30.05.2012 kolbeshkin: отсеиваем неквотируемые услуги, для них триггер не должен отрабатывать
	where exists (select 1 from DogovorList,[Service] where DL_KEY=N.SD_DLKey and DL_SVKEY=SV_KEY 
    and ISNULL(SV_QUOTED,0)<>0)
END
ELSE 
BEGIN
    DECLARE cur_ServiceByDateChanged CURSOR FOR 
    SELECT 	N.SD_ID,
			O.SD_DLKey, O.SD_RLID, O.SD_TUKey, O.SD_QPID, O.SD_State, O.SD_Date,
	  		N.SD_DLKey, N.SD_RLID, N.SD_TUKey, N.SD_QPID, N.SD_State, N.SD_Date
			--DL_DateBeg, DL_NDays
    FROM DELETED O, INSERTED N
	--LEFT OUTER JOIN tbl_DogovorList ON N.SD_DLKey = DL_Key 
    WHERE N.SD_ID = O.SD_ID
	-- CRM01871H3T9 30.05.2012 kolbeshkin: отсеиваем неквотируемые услуги, для них триггер не должен отрабатывать
	and exists (select 1 from DogovorList,[Service] where DL_KEY=N.SD_DLKey and DL_SVKEY=SV_KEY 
    and ISNULL(SV_QUOTED,0)<>0)
END

select @sServiceStatusToHistory = SS_ParmValue from SystemSettings where SS_ParmName like 'SYSServiceStatusToHistory'

declare @RLIDCount int

OPEN cur_ServiceByDateChanged
FETCH NEXT FROM cur_ServiceByDateChanged 
	INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
				@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
				--@DLDateBeg, @DLNDays
WHILE @@FETCH_STATUS = 0
BEGIN
	IF ISNULL(@O_SD_QPID,0)!=ISNULL(@N_SD_QPID,0) OR ISNULL(@O_SD_RLID,0)!=ISNULL(@N_SD_RLID,0)
	BEGIN
		If @O_SD_QPID is not null
		BEGIN			
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas inner join QuotaDetails on QD_QTID=QT_ID inner join QuotaParts on QD_ID=QP_QDID where QP_ID=@O_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@O_SD_QPID
				
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID WHERE QP_ID=@O_SD_QPID)
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@O_SD_QPID AND isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@O_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@O_SD_QPID
				
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QD_ID=QP_QDID where QP_ID=@O_SD_QPID)
				UPDATE QuotaDetails SET QD_Busy=(@RLIDCount) WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@O_SD_QPID)
				
				set @RLIDCount = (SELECT COUNT(*) FROM ServiceByDate inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@O_SD_QPID and isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@O_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
		
		If @N_SD_QPID is not null
		BEGIN
			SELECT @QT_ByRoom=QT_ByRoom FROM Quotas,QuotaDetails,QuotaParts WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QP_ID=@N_SD_QPID
			IF @QT_ByRoom = 1
			BEGIN
				set @RLIDCount=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@N_SD_QPID
				
				set @RLIDCount=(SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_ID=@N_SD_QPID)
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				
				set @RLIDCount = (SELECT COUNT(DISTINCT SD_RLID) FROM ServiceByDate inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@N_SD_QPID AND isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
			ELSE
			BEGIN
				set @RLIDCount=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_QPID=@N_SD_QPID)
				UPDATE QuotaParts SET QP_LastUpdate = GetDate(), QP_Busy=@RLIDCount WHERE QP_ID=@N_SD_QPID
				
				set @RLIDCount=(SELECT COUNT(*) FROM ServiceByDate inner join QuotaParts on SD_QPID=QP_ID inner join QuotaDetails on QP_QDID=QD_ID where QP_ID=@N_SD_QPID)
				UPDATE QuotaDetails SET QD_Busy=@RLIDCount WHERE QD_ID in (SELECT QP_QDID FROM QuotaParts WHERE QP_ID=@N_SD_QPID)
				
				set @RLIDCount=(SELECT COUNT(*) FROM ServiceByDate inner join tbl_DogovorList on SD_DATE=DL_DATEBEG AND SD_DLKey = DL_Key inner join [Service] on DL_SVKey = SV_KEY
					WHERE SD_QPID=@N_SD_QPID and isnull(SV_IsDuration, 0) = 1)
				UPDATE QuotaParts SET QP_CheckInPlacesBusy=@RLIDCount WHERE QP_ID=@N_SD_QPID AND QP_CheckInPlaces IS NOT NULL
			END
		END
	END
	
	IF (ISNULL(@O_SD_STATE, 0) != ISNULL(@N_SD_STATE, 0) or 
		ISNULL(@O_SD_TUKEY,0)!=ISNULL(@N_SD_TUKEY,0)) and ISNULL(@sServiceStatusToHistory, '0') != '0'
	BEGIN
		Select @QState = QS_STATE from QuotedState where QS_DLID = @N_SD_DLKey and ISNULL(QS_TUID,0) = ISNULL(@N_SD_TUKEY,0)
		IF @QState is NULL and @N_SD_DLKey is not NULL
		BEGIN
			Set @QState = 4
			Insert into QuotedState (QS_DLID, QS_TUID, QS_STATE) values (@N_SD_DLKey, @N_SD_TUKEY, @QState)
		END

		Select @NewQState = MAX(SD_STATE) from ServiceByDate where SD_DLKey = @N_SD_DLKey and ISNULL(SD_TUKEY,0) = ISNULL(@N_SD_TUKEY,0)
		
		if @NewQState is null
		 	set @NewQState = 4
		IF @QState <> @NewQState
			IF @N_SD_DLKey is not NULL
				Update QuotedState set QS_STATE = @NewQState where QS_DLID=@N_SD_DLKey and ISNULL(QS_TUID,0)=ISNULL(@N_SD_TUKEY,0)
			ELSE
				IF @O_SD_DLKey is not NULL
					Update QuotedState set QS_STATE = @NewQState where QS_DLID=@O_SD_DLKey and ISNULL(QS_TUID,0)=ISNULL(@N_SD_TUKEY,0)
	END
	FETCH NEXT FROM cur_ServiceByDateChanged 
		INTO @SDID, @O_SD_DLKey, @O_SD_RLID, @O_SD_TUKEY, @O_SD_QPID, @O_SD_State, @O_SD_Date,
					@N_SD_DLKey, @N_SD_RLID, @N_SD_TUKEY, @N_SD_QPID, @N_SD_State, @N_SD_Date
					--@DLDateBeg, @DLNDays
END
IF @O_SD_DLKey is not null and @N_SD_DLKey is null
	IF exists (SELECT 1 FROM RoomNumberLists WHERE not exists (SELECT 1 FROM ServiceByDate where SD_RLID=RL_ID) )
		DELETE FROM RoomNumberLists WHERE not exists (SELECT 1 FROM ServiceByDate where SD_RLID=RL_ID)

CLOSE cur_ServiceByDateChanged
DEALLOCATE cur_ServiceByDateChanged
GO
/*********************************************************************/
/* end T_ServiceByDateChanged.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_DROP_X_DOGOVORTOUR.sql */
/*********************************************************************/
/****** Object:  Index [X_DOGOVORTOUR]    Script Date: 04/19/2013 15:46:20 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbl_Dogovor]') AND name = N'X_DOGOVORTOUR')
DROP INDEX [X_DOGOVORTOUR] ON [dbo].[tbl_Dogovor] WITH ( ONLINE = OFF )
GO



/*********************************************************************/
/* end INDEX_DROP_X_DOGOVORTOUR.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_ADD_X_DOGOVORTOUR_DATE.sql */
/*********************************************************************/
/****** Object:  Index [X_DOGOVORTOUR_DATE]    Script Date: 04/19/2013 15:49:27 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbl_Dogovor]') AND name = N'X_DOGOVORTOUR_DATE')
begin
CREATE NONCLUSTERED INDEX [X_DOGOVORTOUR_DATE] ON [dbo].[tbl_Dogovor] 
(
	[DG_TRKEY] ASC,
	[DG_TURDATE] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end INDEX_ADD_X_DOGOVORTOUR_DATE.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetTourInfo.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwGetTourInfo')
	drop proc dbo.[mwGetTourInfo]
go

create proc [dbo].[mwGetTourInfo](@cityFromKey int, @countryKey int, @tourType int, @cityKey int, @dateFrom datetime, @dateTo datetime, @checkQuota smallint, @agentKey int, @setRequestOnZeroRelease smallint, @noPlacesResult smallint, @checkAgentQuota smallint, @checkCommonQuota smallint, @checkNoLongQuota smallint, @expiredReleaseResult smallint, @quotaYes smallint, @sort varchar(256), @viewType smallint = null)
as
begin
-- <date>2013-04-23</date>
-- <version>9.2.17.2</version>
declare @sql nvarchar(4000)

--13337. Кошелевым было принято решение отключить получение квот из-за долгой работы загрузки
set @checkQuota = -1

if(@viewType is null)
begin
	create table #tmpTours(
		tlkey int,
		tourkey int,
		tourname varchar(256),
		tourlink varchar(512),
		tourdays int,
		tournights int,
		tourprice float,
		pricelink varchar(512),
		quota int
	)
	
	insert into #tmpTours
		select distinct to_trkey as tlkey, to_key as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, 
		isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(to_key)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
		ti_totaldays as tourdays, ti_nights as tournights, cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota
		from tp_tours with(nolock)
		inner join tbl_turlist with(nolock) on to_trkey = tl_key
		inner join tp_lists ti with(nolock) on ti_tokey = to_key
		where to_isenabled > 0
		and to_cnkey = @countryKey
		and ti_firstctkey = case @cityKey when -1 then ti_firstctkey else @cityKey end
		and TO_TRKey in (select TD_TRKEY from TurDate td with(nolock) where TD_DATE between @dateFrom and @dateTo)
										
	update #tmpTours set tourprice = (select min(tp_gross)
		from tp_prices with(nolock)
		where TP_TIKey in (select TI_Key 
						   from TP_Lists with(nolock)
						   where TI_FIRSTHRKEY in (select HR_KEY from HotelRooms with(nolock) where HR_MAIN > 0)
						   and ti_totaldays = tourdays
						   and ti_nights = tournights
						   and TI_TOKey = tourkey)
		and TP_DateBegin >= @dateFrom
		and TP_TOKey = tourkey)

	if (@checkQuota = -1)
	begin
		update #tmpTours set quota = -1
	end
	else
	begin
		declare qtCursor cursor fast_forward read_only for 
			select tlkey, tourkey, tourdays, tournights from #tmpTours

		declare @tlkey int, @tourkey int, @tourdays int, @tournights int
		
		open qtCursor
		fetch next from qtCursor into @tlkey, @tourkey, @tourdays, @tournights
		while(@@fetch_status = 0)
		begin
			print @tlkey
			print @tourkey
			print @tourdays
			print @tournights
			print @dateFrom
			print @dateTo
			print @agentKey
			print @setRequestOnZeroRelease
			print @noPlacesResult
			print @checkAgentQuota
			print @checkCommonQuota
			print @checkNoLongQuota
			print @expiredReleaseResult
			update #tmpTours set quota = dbo.mwCheckTourQuotes(@tlkey, @tourkey, @tourdays, @tournights, @dateFrom, @dateTo, @agentKey, @setRequestOnZeroRelease, @noPlacesResult,
															@checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @expiredReleaseResult)
			
			fetch next from qtCursor into @tlkey, @tourkey, @tourdays, @tournights
		end

		close qtCursor
		deallocate qtCursor
	end
	
	update #tmpTours set pricelink = (ltrim(str(@countryKey)) + '|' + ltrim(str(tourkey)) 
		+ '|' + ltrim(str(datepart(yyyy, @dateFrom))) + '-' + ltrim(str(datepart(mm, @dateFrom))) + '-' + ltrim(str(datepart(dd, @dateFrom)))
		+ '|' + ltrim(str(datepart(yyyy, @dateTo))) + '-' + ltrim(str(datepart(mm, @dateTo))) + '-' + ltrim(str(datepart(dd, @dateTo)))
		+ '|' + ltrim(str(tourprice)))
	
	set @sql = N'select * from #tmpTours where tourprice is not null and quota <> case ' + ltrim(str(@quotaYes)) + ' when -1 then -10 else 0 end '
	
	if len(@sort) > 0
		set @sql = @sql + ' order by ' + @sort
	print @sql
	exec sp_executesql @sql
	
	drop table #tmpTours
end
else
begin
	create table #tmpTours1(
		cnname varchar(256),
		tourkey int,
		tourname varchar(256),
		tourtype int,
		tourtypename varchar(256),
		tourlink varchar(512),
		tourdates varchar(1024),
		hoteldays varchar(256),
		hotelstars varchar(256),
		tourprice float,
		pricelink varchar(512),
		quota int,
		cnkey int,
		tourrate varchar(3),
		departfrom varchar(256),
		tlkey int,
		t_id int identity primary key
	)

	if(@viewType = 1)
	begin
		insert into #tmpTours1
			select distinct cn_name as cnname, sd_tourkey as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, sd_tourtype, tp_name as tourtypename, 
			isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(sd_tourkey)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
			dbo.mwTop5TourDates(sd_cnkey, sd_tourkey, tl_key, 1) as tourdates, dbo.mwTourHotelNights(sd_tourkey) as hotelnights, dbo.mwTourHotelStars(sd_tourkey) as hotelstars, 
			cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota, sd_cnkey as cnkey, to_rate as tourrate, isnull(ct_name, '') as cityfrom, tl_key as tlkey
			from mwSpoData with(nolock) inner join 
			tp_tours with(nolock)  on sd_tourkey = to_key inner join 
			tbl_turlist with(nolock) on to_trkey = tl_key inner join
			tiptur with(nolock) on tl_tip = tp_key inner join 
			country with(nolock) on sd_cnkey = cn_key left outer join
			citydictionary with(nolock) on sd_ctkeyfrom = ct_key
			where (isnull(sd_ctkeyfrom, 0) = case @cityFromKey when - 1 then isnull(sd_ctkeyfrom, 0) else @cityFromKey end) and sd_cnkey = case @countryKey when -1 then sd_cnkey else @countryKey end and tl_tip = case @tourType when -1 then tl_tip else @tourType end and sd_ctkey = case @cityKey when -1 then sd_ctkey else @cityKey end
			and exists(select top 1 td_trkey from turdate where td_trkey = tl_key and td_date > getdate())
	end
	else
	if(@viewType = 2)
	begin
		insert into #tmpTours1
			select distinct cn_name as cnname, ti_tokey as tourkey, isnull(tl_nameweb, isnull(to_name, tl_name)) as tourname, tl_tip, tp_name as tourtypename, 
			isNull(tl_webhttp,'') + '|' + ltrim(str(@countryKey)) + '|' + ltrim(str(ti_tokey)) + '|' + isnull(tl_nameweb, isnull(to_name, tl_name)) as tourlink,
			dbo.mwTop5TourDates(to_cnkey, ti_tokey, tl_key, 1) as tourdates, dbo.mwTourHotelNights(ti_tokey) as hotelnights, dbo.mwTourHotelStars(ti_tokey) as hotelstars, 
			cast(0 as float) as tourprice, cast('' as varchar(500)) as pricelink, cast(0 as int) as quota, to_cnkey as cnkey, to_rate as tourrate, isnull(ct_name, '') as cityfrom, tl_key as tlkey
			from tp_lists with(nolock) inner join 
			tp_tours with(nolock)  on ti_tokey = to_key inner join 
			tbl_turlist with(nolock) on to_trkey = tl_key inner join
			tiptur with(nolock) on tl_tip = tp_key inner join 
			country with(nolock) on to_cnkey = cn_key left outer join
			citydictionary with(nolock) on ti_ctkeyfrom = ct_key
			where (isnull(ti_ctkeyfrom, 0) = case @cityFromKey when -1 then isnull(ti_ctkeyfrom, 0) else @cityFromKey end) and to_cnkey = case @countryKey when -1 then to_cnkey else @countryKey end and tl_tip = case @tourType when -1 then tl_tip else @tourType end and ti_firstctkey = case @cityKey when -1 then ti_firstctkey else @cityKey end
			and exists(select top 1 td_trkey from turdate where td_trkey = tl_key and td_date > getdate()) and to_isenabled > 0
	end

	update #tmpTours1 set tourprice = (select min(tp_gross) from tp_prices where tp_dateend > getdate() and tp_tikey in (select ti_key from tp_lists inner join hotelrooms on ti_firsthrkey = hr_key where ti_tokey = tourkey and hr_main > 0 and tp_gross > 0)),
		quota = 0
 
	update #tmpTours1 set pricelink = (ltrim(str(cnkey)) + '|' + ltrim(str(tourkey)) + '|' + dbo.mwFirstTourDate(tlkey) + '|' + ltrim(str(tourprice)) + '|' + tourrate)
  
	set @sql = N'select * from #tmpTours1 where tourprice is not null and quota <> case ' + ltrim(str(@quotaYes)) + ' when -1 then -10 else 0 end '

	if len(@sort) > 0
		set @sql = @sql + ' order by ' + @sort

	exec sp_executesql @sql

	drop table #tmpTours1
	
	end
end
go

grant exec on [dbo].[mwGetTourInfo] to public
go
/*********************************************************************/
/* end sp_mwGetTourInfo.sql */
/*********************************************************************/

/*********************************************************************/
/* begin fn_GetUserId.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetUserId]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[GetUserId]
GO
CREATE FUNCTION [dbo].[GetUserId]
(
--<VERSION>2009.2.19</VERSION>
--<DATE>2013-04-29</DATE>
)
RETURNS int
AS
BEGIN	
	DECLARE @Result int
	set @Result = 0
	
	SELECT @Result = US_KEY	from UserList where US_USERID = SYSTEM_USER
	
	RETURN @Result

END
GO
/*********************************************************************/
/* end fn_GetUserId.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.26)_Create_Table_Questionnaire.sql */
/*********************************************************************/
-- buryak Создание таблицы "Анкета"
--<DATE>2013-04-26</DATE>
--<VERSION>2009.2.19.0</VERSION>
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[Questionnaire]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[Questionnaire](
	[QU_Key] [int] IDENTITY(1,1) NOT NULL,
	[QU_Name] [nvarchar](200) NULL,
	[QU_NameLat] [nvarchar](200) NULL,
 CONSTRAINT [PK_Questionnaire] PRIMARY KEY CLUSTERED 
(
	[QU_Key] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

END
GO

/*********************************************************************/
/* end (2013.04.26)_Create_Table_Questionnaire.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.26)_Alter_Table_ServiceList.sql */
/*********************************************************************/
if not exists (select * from dbo.syscolumns where name = 'SL_quKey' and id = object_id(N'[dbo].[ServiceList]'))
begin
	ALTER TABLE [dbo].[ServiceList] ADD SL_quKey INT
	
	ALTER TABLE [dbo].[ServiceList] ADD CONSTRAINT [FK_ServiceList_Questionnaire] 
	FOREIGN KEY([SL_QUKey]) REFERENCES [dbo].[Questionnaire] ([QU_Key]) ON DELETE SET NULL
end
go
/*********************************************************************/
/* end (2013.04.26)_Alter_Table_ServiceList.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.26)_Create_Table_QuestionnaireFieldTemplate.sql */
/*********************************************************************/
-- buryak Создание таблицы "Шаблон поля анкеты"
--<DATE>2013-04-26</DATE>
--<VERSION>2009.2.19.0</VERSION>
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuestionnaireFieldTemplate]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[QuestionnaireFieldTemplate](
	[QFT_Key] [int] IDENTITY(1,1) NOT NULL,
	[QFT_Name] [nvarchar](200) NULL,
	[QFT_NameLat] [nvarchar](200) NULL,
 CONSTRAINT [PK_QuestionnaireFieldTemplate] PRIMARY KEY CLUSTERED 
(
	[QFT_Key] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
END
GO

/*********************************************************************/
/* end (2013.04.26)_Create_Table_QuestionnaireFieldTemplate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.26)_Create_Table_QuestionnaireField.sql */
/*********************************************************************/
-- buryak Создание таблицы "Поле анкеты"
--<DATE>2013-04-26</DATE>
--<VERSION>2009.2.19.0</VERSION>
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuestionnaireField]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[QuestionnaireField](
	[QF_Key] [int] IDENTITY(1,1) NOT NULL,
	[QF_QUKey] [int] NULL,
	[QF_QFTKey] [int] NULL,
	[QF_Name] [nvarchar](200) NULL,
	[QF_NameLat] [nvarchar](200) NULL,
	[QF_Order] [int] NULL,
	[QF_BitAttributes] [int] NOT NULL,
	[QF_DefaultValue] [nvarchar](200) NULL,
	[QF_RelatedTableId] [int] NOT NULL,
	[QF_RelatedColumnId] [int] NOT NULL,
	[QF_Comment] [nvarchar](200) NULL,
	[QF_TagXML] [nvarchar](50) NULL,
	[QF_Format] [nvarchar](50) NULL,
	[QF_Example] [nvarchar](200) NULL,
	[QF_QuerySQL] [nvarchar](200) NULL,
 CONSTRAINT [PK_QuestionnaireField] PRIMARY KEY CLUSTERED 
(
	[QF_Key] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[QuestionnaireField] ADD CONSTRAINT [FK_QuestionnaireField_Questionnaire] 
FOREIGN KEY([QF_QUKey]) REFERENCES [dbo].[Questionnaire] ([QU_Key]) ON DELETE CASCADE

ALTER TABLE [dbo].[QuestionnaireField] ADD CONSTRAINT [FK_QuestionnaireField_QuestionnaireFieldTemplate] 
FOREIGN KEY([QF_QFTKey]) REFERENCES [dbo].[QuestionnaireFieldTemplate] ([QFT_KEY]) ON DELETE CASCADE

ALTER TABLE [dbo].[QuestionnaireField] ADD CONSTRAINT [DF_QuestionnaireField_QF_BitAttributes]  DEFAULT ((0)) FOR [QF_BitAttributes]

ALTER TABLE [dbo].[QuestionnaireField] ADD CONSTRAINT [DF_QuestionnaireField_QF_RelatedTableId]  DEFAULT ((0)) FOR [QF_RelatedTableId]

ALTER TABLE [dbo].[QuestionnaireField] ADD CONSTRAINT [DF_QuestionnaireField_QF_RelatedColumnId]  DEFAULT ((0)) FOR [QF_RelatedColumnId]
END
GO

/*********************************************************************/
/* end (2013.04.26)_Create_Table_QuestionnaireField.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.26)_Create_Table_QuestionnaireFieldCase.sql */
/*********************************************************************/
-- buryak Создание таблицы "Вариант поля анкеты"
--<DATE>2013-04-26</DATE>
--<VERSION>2009.2.19.0</VERSION>
IF NOT EXISTS (SELECT 1 FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuestionnaireFieldCase]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[QuestionnaireFieldCase](
	[QFC_Key] [int] IDENTITY(1,1) NOT NULL,
	[QFC_QFKey] [int] NOT NULL,
	[QFC_Value] [nvarchar](200) NULL,
	[QFC_ValueLat] [nvarchar](200) NULL,
	[QFC_Order] [int] NULL,
 CONSTRAINT [PK_QuestionnaireFieldCase] PRIMARY KEY CLUSTERED 
(
	[QFC_Key] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

ALTER TABLE [dbo].[QuestionnaireFieldCase] ADD CONSTRAINT [FK_QuestionnaireFieldCase_QuestionnaireField] 
FOREIGN KEY([QFC_QFKey]) REFERENCES [dbo].[QuestionnaireField] ([QF_Key]) ON DELETE CASCADE

END
GO

/*********************************************************************/
/* end (2013.04.26)_Create_Table_QuestionnaireFieldCase.sql */
/*********************************************************************/

/*********************************************************************/
/* begin tbl_mwReplDeletedPricesTemp.sql */
/*********************************************************************/
if dbo.mwReplIsSubscriber() > 0
begin
	-- на подписчике пересоздадим таблицу, чтобы у неё у первичного ключа убрать признак автоинкремента
	IF  EXISTS (SELECT * FROM sys.objects with (nolock) WHERE object_id = OBJECT_ID(N'[mwReplDeletedPricesTemp]') AND type in (N'U'))
	begin
		DROP TABLE [mwReplDeletedPricesTemp]
	end
	
	CREATE TABLE [dbo].[mwReplDeletedPricesTemp](
		[rdp_id] [int] NOT NULL,
		[rdp_pricekey] [int] NOT NULL,
		[rdp_cnkey] [int] NULL,
		[rdp_ctdeparturekey] [int] NULL
			PRIMARY KEY CLUSTERED 
			(
				[rdp_id] ASC
			)
			) ON [PRIMARY]			

			CREATE NONCLUSTERED INDEX [x_pricekey] ON [dbo].[mwReplDeletedPricesTemp] 
			(
				[rdp_pricekey] ASC
			) ON [PRIMARY]			

		grant select, insert, update, delete on dbo.[mwReplDeletedPricesTemp] to public
end

if dbo.mwReplIsPublisher() > 0 or (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0)
begin
	-- если публикатор или публикации нет, то просто создадим таблицу в случае её отсутствия
	if not exists(select id from sysobjects with (nolock) where xtype = 'U' and name='mwReplDeletedPricesTemp')
	begin

		CREATE TABLE [dbo].[mwReplDeletedPricesTemp](
		[rdp_id] [int] IDENTITY(1,1) NOT NULL,
		[rdp_pricekey] [int] NOT NULL,
		[rdp_cnkey] [int] NULL,
		[rdp_ctdeparturekey] [int] NULL
			PRIMARY KEY CLUSTERED 
			(
				[rdp_id] ASC
			)
			) ON [PRIMARY]			

			CREATE NONCLUSTERED INDEX [x_pricekey] ON [dbo].[mwReplDeletedPricesTemp] 
			(
				[rdp_pricekey] ASC
			) ON [PRIMARY]

		grant select, insert, update, delete on dbo.[mwReplDeletedPricesTemp] to public

	end
end

if not exists (select top 1 1 
				from sys.tables tab with (nolock)
				left join sys.columns col with (nolock) on tab.object_id = col.object_id
				where tab.name = 'mwReplDeletedPricesTemp' and col.name = 'rdp_date')
begin
	ALTER TABLE mwReplDeletedPricesTemp ADD [rdp_date] [datetime] NOT NULL default(getdate())
end

GO
/*********************************************************************/
/* end tbl_mwReplDeletedPricesTemp.sql */
/*********************************************************************/

/*********************************************************************/
/* begin job_mwReplDisableDeletedPrices.sql */
/*********************************************************************/
-- job mwReplDisableDeletedPrices runs only at subscriber (if replication) or at main server (if no replication)
if dbo.mwReplIsPublisher() > 0 
begin
	if not exists (select top 1 1 from distribution.dbo.msArticles with (nolock) where article = 'mwReplDeletedPricesTemp')
	begin
		-- include mwReplDeletedPricesTemp in replication articles
		exec sp_addarticle @publication = N'MW_PUB', @article = N'mwReplDeletedPricesTemp', @source_owner = N'dbo', 
				@source_object = N'mwReplDeletedPricesTemp', @type = N'logbased', @description = N'', @creation_script = N'', @pre_creation_cmd = N'drop', 
				@schema_option = 0x00, @identityrangemanagementoption = N'none', @destination_table = N'mwReplDeletedPricesTemp', @destination_owner = N'dbo', 
				@status = 8, @vertical_partition = N'false', @ins_cmd = N'SQL', @del_cmd = N'SQL', @upd_cmd = N'SQL'
	end
	
	-- remove job from publisher
	IF  EXISTS (SELECT job_id FROM msdb.dbo.sysjobs_view WHERE name = N'mwReplDisableDeletedPrices')
	begin
		EXEC msdb.dbo.sp_delete_job @job_name=N'mwReplDisableDeletedPrices', @delete_unused_schedule=1
	end	
end

GO
/*********************************************************************/
/* end job_mwReplDisableDeletedPrices.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwReplDisableDeletedPrices.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDisableDeletedPrices]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplDisableDeletedPrices]
GO

create procedure [dbo].[mwReplDisableDeletedPrices]
--<DATE>2013-05-07</DATE>
--<VERSION>9.2.19</VERSION>
as
begin
	declare @cnKey int
	declare @ctKeyFrom int
	declare @sql varchar (500)
	declare @wasError as bit
	declare @errorText as nvarchar(max)

	set @wasError = 0

	select top 100000 * into #mwReplDeletedPricesTemp from dbo.mwReplDeletedPricesTemp with(nolock);
	create index x_pricekey on #mwReplDeletedPricesTemp(rdp_pricekey);

	begin try
	if (dbo.mwReplIsSubscriber() > 0 or (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0))
		and (exists(select top 1 1 from #mwReplDeletedPricesTemp))
	begin
		insert into dbo.mwDeleted with(rowlock) (del_key)
		select rdp_pricekey from #mwReplDeletedPricesTemp;

		if exists(select 1 from SystemSettings where SS_ParmName = 'MWDivideByCountry' and SS_ParmValue = 1)
		begin
			declare @wasErrorInCycle as bit
			set @wasErrorInCycle = 0

			begin try
				--Используется секционирование ценовых таблиц
				declare mwPriceDataTableNameCursor cursor for
					select distinct dbo.mwGetPriceTableName(rdp_cnkey, rdp_ctdeparturekey) as ptn_tablename
					from #mwReplDeletedPricesTemp with(nolock);

				declare @mwPriceDataTableName varchar(200);
				open mwPriceDataTableNameCursor;
				fetch next from mwPriceDataTableNameCursor into @mwPriceDataTableName;

				while @@FETCH_STATUS = 0
				begin
					if exists (select * from sys.tables where @mwPriceDataTableName like '%' + name)
					begin
						set @sql='
							update ' + @mwPriceDataTableName + ' with(rowlock)
							set pt_isenabled = 0
							where exists(select 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = pt_pricekey)';

						exec (@sql)
					end

					fetch next from mwPriceDataTableNameCursor into @mwPriceDataTableName
				end
			end try
			begin catch
				set @wasErrorInCycle = 1
				set @errorText = ERROR_MESSAGE()
			end catch

			-- release resources
			close mwPriceDataTableNameCursor
			deallocate mwPriceDataTableNameCursor

			if @wasError = 1
			begin
				-- rethrow error after resources release
				raiserror(@errorText, 16, 1)
			end
		end
		else
		begin
			--Секционирование не используется
			update dbo.mwPriceDataTable with(rowlock)
			set pt_isenabled = 0
			where exists(select 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = pt_pricekey);
		end
	end

	end try
	begin catch
		set @wasError = 1
		set @errorText = ERROR_MESSAGE()
	end catch

	if @wasError = 0
	begin
		-- delete from source table only if processing was successful
		delete from mwReplDeletedPricesTemp with(rowlock)
		where exists(select top 1 1 from #mwReplDeletedPricesTemp r where r.rdp_pricekey = mwReplDeletedPricesTemp.rdp_pricekey)
	end

	-- release resources
	drop index x_pricekey on #mwReplDeletedPricesTemp;
	drop table #mwReplDeletedPricesTemp;

	if @wasError = 1
	begin
		-- rethrow error after resources release
		raiserror(@errorText, 16, 1)
	end
end
GO

grant exec on [dbo].[mwReplDisableDeletedPrices] to public
GO
/*********************************************************************/
/* end sp_mwReplDisableDeletedPrices.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwCleaner.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCleaner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwCleaner]
GO

create proc [dbo].[mwCleaner] @priceCount int = 10000, @deleteToday smallint = 0
as
begin
	--<DATE>2013-05-07</DATE>
	--<VERSION>9.2.19</VERSION>
	declare @counter bigint
	declare @deletedRowCount bigint

	insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Запуск mwCleaner', 1)

	truncate table CacheQuotas

	declare @today datetime
	set @today = getdate()
	if (@deleteToday <> 1)
	begin
		set @today = dateadd(day, -1, @today)
	end

	delete from mwReplDeletedPricesTemp
	where rdp_date < DATEADD(MONTH, -1, @today)

	-- Удаляем записи из таблицы TP_ServiceTours, если таких туров больше нету
	-- Тут количество записей будет не большим, поэтому можно не делить на пачки, туры удаляются редко в ДЦ
	SELECT ST_Id 
	into #Keys
	FROM TP_ServiceTours with(nolock)
	where not exists (select top 1 1 from TP_Tours with(nolock) where TO_Key = ST_TOKey)
	and st_tokey not in (select CP_PriceTourKey from CalculatingPriceLists with(nolock) where CP_StartTime is not null)
	
	delete TP_ServiceTours WHERE ST_Id in (select x.ST_Id from #Keys as x)
	
	drop table #Keys
	
	-- Удаляем неактуальные цены
	set @counter = 0
	while(1 = 1)
	begin
	
		delete 
		from dbo.tp_prices with(rowlock) 
		where tp_key in (SELECT top (@priceCount/10) tp_key 
						 from dbo.tp_prices with(nolock) 
						 WHERE tp_dateend < @today 
							   and tp_tokey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							   and tp_tokey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
		)			
					
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_prices завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			--print 'Удаление tp_prices завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
			break
		end
		else
		begin
			print 'Удалено из tp_prices ' + ltrim(str(@deletedRowCount)) + ' записей'
			set @counter = @counter + @deletedRowCount
		end
	end

	-- Удаляем неактуальные удаленные цены из TP_PricesDeleted (ДЦ)
	set @counter = 0
	while(1 = 1)
	begin
		delete 
		from dbo.tp_pricesDeleted with(rowlock) 
		where tpd_id in (select top (@priceCount/5) tpd_id 
						 from dbo.tp_pricesDeleted with(nolock)
						 where tpd_dateend < @today 
							   and tpd_tokey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							   and tpd_tokey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
		)
		
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_pricesDeleted завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			print 'Удаление tp_pricesDeleted завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
			break
		end
		else
		begin
			print 'Удалено из tp_pricesDeleted ' + ltrim(str(@deletedRowCount)) + ' записей'
			set @counter = @counter + @deletedRowCount
		end
	end	
	
	-- Удаляем неактуальные удаленные цены из TP_PriceComponents (ДЦ)
	set @counter = 0
	while(1 = 1)
	begin
		delete 
		from dbo.TP_PriceComponents with(rowlock) 
		where PC_ID in (SELECT top (@priceCount/10) PC_ID 
						FROM dbo.TP_PriceComponents with(nolock) 
						WHERE PC_TourDate < @today
						and pc_tokey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
		)
		
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_PriceComponents завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			--print 'Удаление TP_PriceComponents завершено. Удалено ' + ltrim(str(@counter)) + ' записей'
			break
		end
		else
		begin
			print 'Удалено из TP_PriceComponents ' + ltrim(str(@deletedRowCount)) + ' записей'
			set @counter = @counter + @deletedRowCount
		end			
	end	
	
	-- Удаляем неактуальные удаленные цены из TP_ServiceCalculateParametrs (ДЦ)
	set @counter = 0
	while(1 = 1)
	begin
		delete 
		from dbo.TP_ServiceCalculateParametrs with(rowlock) 
		where SCP_ID in (select top (@priceCount) SCP_ID 
						 from dbo.TP_ServiceCalculateParametrs 
						 WHERE SCP_DateCheckIn < @today)
						 
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_ServiceCalculateParametrs завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end	

	if dbo.mwReplIsSubscriber() <= 0
	begin
		set @counter = 0
		while (1 = 1)
		begin
			delete 
			from dbo.tp_turdates with(rowlock) 
			where td_key in (select top (@priceCount/10) td_key 
							 from dbo.tp_turdates with(nolock) 
							 where td_date < @today 
							 and td_tokey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							 and td_tokey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расче
			)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
			begin
				insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление tp_turdates завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
				break
			end
			else
				set @counter = @counter + @deletedRowCount
		end
		
		create table #tikeys (tikey int, tokey int)
		insert into #tikeys 
		select ti_key, ti_tokey 
		from dbo.tp_lists with(nolock) 
		where not exists (select 1 from tp_prices with(nolock) where ti_key = tp_tikey)
			  and TI_TOKey not in (select CP_PriceTourKey from CalculatingPriceLists with(nolock) where CP_StartTime is not null) --за исключением отложенного расчета
			  and TI_TOKey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
		
		delete 
		from #tikeys 
		where exists (select 1 from TP_PricesDeleted with(nolock) where TPD_TIKey = tikey and TPD_TOKey = tokey)

		while (1 = 1)
		begin
			delete 
			from dbo.tp_servicelists with(rowlock) 
			where tl_key in (select top 10000 tl_key 
							 from dbo.tp_servicelists with(nolock)
							 where exists (select 1 from #tikeys where tl_tikey = tikey and tl_tokey = tokey)
			)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
				break
		end
		
		while (1 = 1)
		begin		
			delete 
			from dbo.tp_lists with(rowlock) 
			where ti_key in (select top 10000 ti_key 
							 from dbo.tp_lists with(nolock)
							 where exists (select 1 from #tikeys where ti_key = tikey and ti_tokey = tokey)
			)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
				break
		end	
		
		while (1 = 1)
		begin		
			delete 
			from dbo.tp_services 
			where TS_Key in (select top 10000 TS_Key 
							 from dbo.tp_services with(nolock) 
							 where not exists (SELECT 1 FROM TP_ServiceLists with(nolock) WHERE TL_TSKey = TS_Key ) 
							 and TS_TOKey in (SELECT DISTINCT tokey FROM #tikeys with(nolock))
			)
			
			set @deletedRowCount = @@ROWCOUNT
			if @deletedRowCount = 0
				break
		end	

		drop table #tikeys
	end
	else
	begin
		exec dbo.mwCleanerQuotes
	end

	declare @mwSearchType int
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'
	
	-- Удаляем неактуальные туры
	set @counter = 0
	while(1 = 1)
	begin

		delete 
		from dbo.TP_Tours with(rowlock) 
		where to_key in (SELECT TOP 1 TO_Key 
						 FROM TP_Tours 
						 WHERE to_datevalid < @today
						 and to_key not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
		)
			
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление TP_Tours завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)		
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end

	create table #tours
	(
		xKey int identity(1,1),
		xToKey int
	)
	
	insert into #tours (xToKey)
	select TO_Key
	from tp_tours with(nolock) where to_update = 0 and exists(select 1 from dbo.tp_turdates with(nolock) where td_tokey = to_key and td_date < @today)

	declare @currentKey int, @maxKey int
	set @currentKey = 0
	select @maxKey = MAX(xKey) from #tours
	while (@currentKey < @maxKey)
	begin
		set @currentKey = @currentKey + 1
		
		update dbo.tp_tours
		set to_pricecount = (select count(1) from dbo.tp_prices with(nolock) where tp_tokey = to_key), 
			to_updatetime = getdate()
		where to_key = (select xToKey from #tours where xKey = @currentKey)
		
	end
	
	drop table #tours

	insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Обновление tp_tours завершено. Обновлено ' + ltrim(@deletedRowCount) + ' записей', 1)

	if(@mwSearchType = 0)
	begin
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount * 100) from dbo.mwPriceDataTable with(rowlock) where pt_tourdate < @today and pt_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							and pt_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
			
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount * 100) from dbo.mwSpoDataTable with(rowlock) where sd_tourkey not in (select pt_tourkey from dbo.mwPriceDataTable with(nolock)) and sd_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							and sd_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwSpoDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
			
			set @counter = 0
			while(1 = 1)
			begin
				delete top (@priceCount * 100) from dbo.mwPriceDurations with(rowlock) where not exists(select 1 from dbo.mwPriceDataTable with(nolock) where pt_tourkey = sd_tourkey and pt_days = sd_days and pt_nights = sd_nights) and sd_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
							and sd_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null) --за исключением отложенного расчета
				set @deletedRowCount = @@ROWCOUNT
				if @deletedRowCount = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceDurations завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @deletedRowCount
			end
	end
	else
	begin
		declare @objName nvarchar(50), @counterPart int
		declare @sql nvarchar(500), @params nvarchar(500)
		declare delCursor cursor fast_forward read_only for select distinct sd_cnkey, sd_ctkeyfrom from dbo.mwSpoDataTable
		declare @cnkey int, @ctkeyfrom int
		open delCursor
		fetch next from delCursor into @cnkey, @ctkeyfrom
		while(@@fetch_status = 0)
		begin
			set @objName = dbo.mwGetPriceTableName(@cnkey, @ctkeyfrom)
			set @counter = 0
			while(1 = 1)
			begin
				set @sql = 'delete top (' + ltrim(rtrim(str(@priceCount * 100))) + ') from ' + @objName + ' with(rowlock) where pt_tourdate < @today and pt_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0) and pt_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null); set @counterOut = @@ROWCOUNT'
				set @params = '@today datetime, @counterOut int output'
				
				EXECUTE sp_executesql @sql, @params, @today = @today, @counterOut = @counterPart output
				
				if @counterPart = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление ' + @objName + ' завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @counterPart
			end

			set @counter = 0
			while(1 = 1)
			begin
				set @sql = 'delete top (' + ltrim(rtrim(str(@priceCount * 100))) + ') from dbo.mwSpoDataTable with(rowlock) where sd_cnkey = ' + ltrim(rtrim(str(@cnkey))) + ' and sd_ctkeyfrom = ' + ltrim(rtrim(str(@ctkeyfrom))) + ' and sd_tourkey not in (select pt_tourkey from ' + @objName + ' with(nolock)) and sd_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0) and sd_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null); set @counterOut = @@ROWCOUNT'
				set @params = '@counterOut int output'
				EXECUTE sp_executesql @sql, @params, @counterOut = @counterPart output
				
				if @counterPart = 0
				begin
					insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwSpoDataTable завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)	
					break
				end
				else
					set @counter = @counter + @counterPart
			end
			fetch next from delCursor into @cnkey, @ctkeyfrom
		end
		close delCursor
		deallocate delCursor
	end

	set @counter = 0
	while(1 = 1)
	begin
		delete top (@priceCount) from dbo.mwPriceHotels with(rowlock) where sd_tourkey not in (select sd_tourkey from dbo.mwSpoDataTable with(nolock)) and sd_tourkey not in (select to_key from tp_tours with(nolock) where to_update <> 0)
					and sd_tourkey not in (select CP_PriceTourKey from CalculatingPriceLists where CP_StartTime is not null)
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление mwPriceHotels завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end

	-- Удаляем неактуальные логи (остаются логи за последние 7 дней)
	set @counter = 0
	while(1 = 1)
	begin
		delete top (@priceCount) from dbo.SystemLog with(rowlock) where SL_DATE < DATEADD(day, -7, @today)
		set @deletedRowCount = @@ROWCOUNT
		if @deletedRowCount = 0
		begin
			insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Удаление systemLog завершено. Удалено ' + ltrim(str(@counter)) + ' записей', 1)
			break
		end
		else
			set @counter = @counter + @deletedRowCount
	end

	insert into SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID) values(1, GETDATE(), 'Окончание выполнения mwCleaner', 1)
end
GO

grant exec on dbo.mwCleaner to public
GO
/*********************************************************************/
/* end sp_mwCleaner.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (01.03.2013)_Alter_Messages.sql */
/*********************************************************************/

ALTER TABLE [Messages]  ALTER COLUMN MS_Text NVARCHAR(MAX) NOT NULL
GO
/*********************************************************************/
/* end (01.03.2013)_Alter_Messages.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (04.04.2013)_Alter_tbl_Costs.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[FX_CS_COID]') AND parent_object_id = OBJECT_ID(N'[tbl_Costs]'))
	ALTER TABLE [tbl_Costs] DROP CONSTRAINT [FX_CS_COID]
GO
/*********************************************************************/
/* end (04.04.2013)_Alter_tbl_Costs.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (08.04.2013)_Insert_SystemSettings.sql */
/*********************************************************************/
if not exists (select 1 from SystemSettings where SS_ParmName='SYSQoutaToZeroBySelPlaces')
	insert into SystemSettings(SS_ParmName,SS_ParmValue)
	values ('SYSQoutaToZeroBySelPlaces',0)
go

/*********************************************************************/
/* end (08.04.2013)_Insert_SystemSettings.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (12.03.2013)_Alter_CacheQuotas.sql */
/*********************************************************************/
--<DATE>2013-03-12</DATE>
--<VERSION>9.2.19</VERSION>
if not exists (select * from syscolumns where name='cq_key' and id=object_id('dbo.CacheQuotas'))
begin
	alter table dbo.CacheQuotas add cq_key int NOT NULL IDENTITY (1, 1) CONSTRAINT PK_CacheQuotas PRIMARY KEY;					
end
go
/*********************************************************************/
/* end (12.03.2013)_Alter_CacheQuotas.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (16.05.2013)_Alter_Rooms.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2013-05-16</DATE>
--Разрешил пустые названия типов номеров - как в других справочниках
ALTER table Rooms ALTER COLUMN RM_NAME varchar(60) NULL
GO
/*********************************************************************/
/* end (16.05.2013)_Alter_Rooms.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (19.03.2013)_Insert_SystemSettings.sql */
/*********************************************************************/
if not exists (select 1 from SystemSettings where SS_ParmName='SYSDeleteStopSaleOnDemand')
	insert into SystemSettings(SS_ParmName,SS_ParmValue)
	values ('SYSDeleteStopSaleOnDemand',0)
go

/*********************************************************************/
/* end (19.03.2013)_Insert_SystemSettings.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (20.02.2013)_Insert_SystemSettings.sql */
/*********************************************************************/
		--<VERSION>11.1.0</VERSION>
	    --<DATA>2013.02.20</DATA>
if not exists (select top 1 1 from SystemSettings with (nolock) where SS_ParmName = 'ServiceFlightSelection' )
begin
	insert into SystemSettings([SS_ParmName], [SS_ParmValue]) values('ServiceFlightSelection',0)
end
go
/*********************************************************************/
/* end (20.02.2013)_Insert_SystemSettings.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2012.12.03)_ALTER_CalculatingPriceLists.sql */
/*********************************************************************/
--добавление колонки выставление в интернет
if not exists (select * from dbo.syscolumns where name ='CP_ExposeWeb' and id = object_id(N'[dbo].[CalculatingPriceLists]'))
begin
	ALTER   TABLE    CalculatingPriceLists ADD [CP_ExposeWeb] [smallint] NOT NULL CONSTRAINT [CP_ExposeWeb_DEFAULT] DEFAULT 0
end
GO

if exists(select * from sys.sysobjects where xtype = 'D' and name like 'CP_Priority')
begin
	ALTER TABLE CalculatingPriceLists drop constraint CP_Priority
end
GO

if exists (select * from dbo.syscolumns where name ='CP_Priority' and id = object_id(N'[dbo].[CalculatingPriceLists]'))
begin
	ALTER TABLE CalculatingPriceLists drop column [CP_Priority]
end
GO

--добавление колонки приоритета расчета прайс листа
if not exists (select * from dbo.syscolumns where name ='CP_Priority' and id = object_id(N'[dbo].[CalculatingPriceLists]'))
begin
	ALTER   TABLE    CalculatingPriceLists     ADD    [CP_Priority] [smallint] NOT NULL CONSTRAINT [CP_Priority] DEFAULT 1
end
GO
/*********************************************************************/
/* end (2012.12.03)_ALTER_CalculatingPriceLists.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013-04-09)_AlterTable_mwReplQueue.sql */
/*********************************************************************/
--<VERSION>9.2.19</VERSION>
--<DATE>2013-04-09</DATE>
if not exists (select 1 from dbo.syscolumns where name = 'rq_cnkey' and id = object_id(N'[dbo].[mwReplQueue]'))
	alter table mwReplQueue Add rq_cnkey int null
go

if not exists (select 1 from dbo.syscolumns where name = 'rq_ctkeyfrom' and id = object_id(N'[dbo].[mwReplQueue]'))
	alter table mwReplQueue Add rq_ctkeyfrom int null
go

update mwReplQueue 
set rq_cnkey = TO_CNKey,
rq_ctkeyfrom = ISNULL(TL_CTDepartureKey, 0)
from mwReplQueue with(nolock)
join TP_Tours with(nolock) on TO_Key = rq_tokey
join tbl_TurList with(nolock) on TL_KEY = TO_TRKey
where rq_state in (1, 2, 4)
GO
/*********************************************************************/
/* end (2013-04-09)_AlterTable_mwReplQueue.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013-04-09)_CreateTable_mwReplDirections.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDirections]') AND type in (N'U'))
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-05-24</DATE>
	/*<SUMMARY>Создает таблицу направлений туров, нужно для оптимизации выставления и снятия туров из инета</SUMMARY>*/
	CREATE TABLE [dbo].[mwReplDirections](
		[RD_Id] [int] IDENTITY(1,1) NOT NULL,
		[RD_CNKey] [int] NOT NULL,
		[RD_CTKeyFrom] [int] NOT NULL,
		[RD_IsUsed] [smallint] NOT NULL default(0)
	 CONSTRAINT [PK_mwReplDirections] PRIMARY KEY CLUSTERED 
	(
		[RD_Id] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
	) ON [PRIMARY]
end
go

grant select, insert, delete, update on [dbo].[mwReplDirections] to public
go

if exists (select * from dbo.syscolumns where name = 'RD_TableCreated' and id = object_id(N'[dbo].[mwReplDirections]'))
begin

	-- drop dependent constraints
	declare @sql as nvarchar(max)
	declare @cName as nvarchar(200)		-- constraint name (for cursor iteration)
	
	declare constrs cursor for	
		select obj.name from sys.objects obj
		inner join sys.tables tab on obj.parent_object_id = tab.object_id
		inner join sys.sysconstraints constr on obj.object_id = constr.constid
		inner join sys.columns col on col.column_id = constr.colid and col.object_id = tab.object_id
		where tab.name = 'mwReplDirections'
			and col.name = 'RD_TableCreated'
		
	open constrs
	
	set @sql = ''
	fetch next from constrs into @cName
	while @@FETCH_STATUS = 0
	begin
	
		set @sql = @sql + '
			ALTER TABLE [mwReplDirections] DROP CONSTRAINT ' + ltrim(rtrim(@cName))
		
		fetch next from constrs into @cName
	
	end
	
	close constrs
	deallocate constrs

	exec (@sql)

	alter table mwReplDirections drop column RD_TableCreated
end
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[mwReplDirections]') AND name = N'IX_mwCNKey_CTKeyFrom')
begin
	CREATE UNIQUE NONCLUSTERED INDEX [IX_mwCNKey_CTKeyFrom] ON [dbo].[mwReplDirections] 
	(
		[RD_CNKey] ASC,
		[RD_CTKeyFrom] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO

insert into mwReplDirections (RD_CNKey, RD_CTKeyFrom)
select distinct TO_CNKey, ISNULL(TL_CTDepartureKey, 0)
from mwReplQueue with(nolock)
join TP_Tours with(nolock) on TO_Key = rq_tokey
join tbl_TurList with(nolock) on TL_KEY = TO_TRKey
where not exists (select 1 from mwReplDirections with(nolock) where RD_CNKey = TO_CNKey and RD_CTKeyFrom = ISNULL(TL_CTDepartureKey, 0))
GO
/*********************************************************************/
/* end (2013-04-09)_CreateTable_mwReplDirections.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.01.17)_ADD_MP_ImportIdentificator_Mappings.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2013-01-17</DATE>
--добавление колонки - состояние ЦБ в очереди
if not exists (select * from dbo.syscolumns where name ='MP_ImportIdentificator' and id = object_id(N'[dbo].[Mappings]'))
begin
	ALTER TABLE [Mappings] ADD [MP_ImportIdentificator] [nvarchar](200) NULL
end
go
/*********************************************************************/
/* end (2013.01.17)_ADD_MP_ImportIdentificator_Mappings.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.02.25)_Create_Index_DogovorListNeedQuoted.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[DogovorListNeedQuoted]') AND name = N'x_DlKeyState')
begin

	CREATE NONCLUSTERED INDEX [x_DlKeyState] ON [dbo].[DogovorListNeedQuoted] 
	(
		[DLQ_DLKey] ASC,
		[DLQ_State] ASC
	)
	INCLUDE ( [DLQ_Id],
	[DLQ_Date],
	[DLQ_Host],
	[DLQ_User]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO



/*********************************************************************/
/* end (2013.02.25)_Create_Index_DogovorListNeedQuoted.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.02.27)_Add_Columns_ProTourQuotes.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2013-02-27</DATE>
--добавление колонок - продолжительностей для квот на заезд
if not exists (select 1 from dbo.syscolumns where name = 'PTQ_DurationMin' and id = object_id(N'[dbo].[ProTourQuotes]'))
	alter table ProTourQuotes Add PTQ_DurationMin int null
go

if not exists (select 1 from dbo.syscolumns where name = 'PTQ_DurationMax' and id = object_id(N'[dbo].[ProTourQuotes]'))
	alter table ProTourQuotes Add PTQ_DurationMax int null
go


/*********************************************************************/
/* end (2013.02.27)_Add_Columns_ProTourQuotes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.06)_Create_Type_QueuesReCalculateCostResults.sql */
/*********************************************************************/
IF not EXISTS (SELECT * FROM sys.types st JOIN sys.schemas ss ON st.schema_id = ss.schema_id WHERE st.name = N'QueuesReCalculateCostResults' AND ss.name = N'dbo')
begin
	CREATE TYPE [dbo].[QueuesReCalculateCostResults] AS TABLE(
		[SPADId] [bigint] NOT NULL,
		[SCPId] [bigint] NOT NULL,
		[Netto] [money] NULL,
		[Gross] [money] NULL
	)
end
GO


/*********************************************************************/
/* end (2013.03.06)_Create_Type_QueuesReCalculateCostResults.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.11)UPdate_TipTur_and_DiscountScheme.sql */
/*********************************************************************/
---****************************************************************
--Работа с коммисиями
---****************************************************************

if exists(select * from TipTur where TP_NAME = 'Не определен')
BEGIN
	UPDATE Discounts
	SET DS_TPKEY= -1
	from Discounts
	where DS_TPKEY = 0


	UPDATE DiscountScheme
	SET DS_TOURTYPEKEY= -1
	from DiscountScheme
	where DS_TOURTYPEKEY = 0
	
END
ELSE
BEGIN
  RAISERROR('Внимание! Раньше тип тура с ключом «0» назывался «Не определен» и обрабатывался как «Все» типы туров при создании комиссий. 
При выполнении скрипта было обнаружено, что в базе данных название типа тура с ключом «0» изменено. 
Вероятно, данный тип тура использовался нестандартным образом. Поэтому комиссии, которые были привязаны к типу тура с ключом «0» не будут перенесены на комиссии с новым типом тура «Все». 
Для получения более подробной консультации, как исправить данную ситуацию обратитесь в службу поддержки компании «Мегатек».', 16, 1)
END	

GO
---****************************************************************
--Работа с коммисиями
---****************************************************************
GO





/*********************************************************************/
/* end (2013.03.11)UPdate_TipTur_and_DiscountScheme.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.14)_Create_Index_QueuesForRecalculateCosts.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QueuesForRecalculateCosts]') AND name = N'x_SPADIdSCPId')
begin

	CREATE NONCLUSTERED INDEX [x_SPADIdSCPId] ON [dbo].[QueuesForRecalculateCosts] 
	(
		[QRC_SPADId] ASC,
		[QRC_SCPId] ASC
	)
	INCLUDE ( [QRC_Id],
	[QRC_QueueDate],
	[QRC_CalcDate],
	[QRC_OldGross],
	[QRC_OldNetto],
	[QRC_NewGross],
	[QRC_NewNetto]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO



/*********************************************************************/
/* end (2013.03.14)_Create_Index_QueuesForRecalculateCosts.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.14)_IX_mwReplQueueIndexes.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[mwReplQueue]') AND name = N'IX_STATE')
begin
	CREATE NONCLUSTERED INDEX [IX_STATE]
	ON [dbo].[mwReplQueue] ([rq_state])
	INCLUDE ([rq_tokey])
end

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[mwReplQueue]') AND name = N'IX_STATE2')
begin
	CREATE NONCLUSTERED INDEX [IX_STATE2]
	ON [dbo].[mwReplQueue] ([rq_state])
	INCLUDE ([rq_id],[rq_crdate],[rq_mode],[rq_tokey],[rq_priority],[rq_overwritePrices],[rq_CalculatingKey])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end

GO
/*********************************************************************/
/* end (2013.03.14)_IX_mwReplQueueIndexes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.07.30)_Create_Table_CharterDeleteQueue.sql */
/*********************************************************************/
-- если есть репликация и таблица в статьях репликации, выдадим сообщение о необходимости пересоздания подписки
if dbo.mwReplIsPublisher() > 0 
begin
	if exists (select top 1 1 from sys.databases where name = 'distribution')
	begin
		if exists (select * from distribution.dbo.mspublications
								where publication = 'MW_PUB'
									and publisher_db = db_name())
		begin
			if exists (select * 
							from distribution.dbo.msarticles
							where publisher_db = db_name()
								and source_object = 'CharterDeleteQueue'
								and publication_id = (select top 1 publication_id from distribution.dbo.mspublications
														where publication = 'MW_PUB' and publisher_db = db_name())
						)
			begin
				-- drop all subscriptions
				declare @PublisherDBName sysname, @PublisherName sysname, @SubscriberName sysname, @SubscriptionDBName sysname

				create table #t
				(
					[PublisherDBName] sysname,
					PublisherName sysname,
					[SubscriberName] sysname,
					[SubscriptionDBName] sysname
				)

				insert into #t
				exec mwGetSubscriptions

				if exists (select top 1 1 from #t)
				begin
					declare subCursor cursor for
					select * from #t

					open subCursor
					fetch next from subCursor into @PublisherDBName, @PublisherName, @SubscriberName, @SubscriptionDBName
					while @@fetch_status = 0
					begin
						begin try
							print 'удаление подписки (publisher side) ' + @SubscriberName
							exec sp_dropsubscription @publication=N'MW_PUB', @subscriber = @SubscriberName, @article = N'all', @destination_db = @SubscriptionDBName
							print 'готово'

							print 'удаление подписки (subscriber side) ' + @SubscriberName
							declare @dropSql nvarchar(max)
							set @dropSql = 'exec (''exec [@SubscriptionDBName].dbo.sp_droppullsubscription @publisher = ''''@@servername'''', @publisher_db = ''''@PublisherDBName'''', @publication = ''''@pubName'''''')'
							if @SubscriberName <> @@servername
								set @dropSql = @dropSql + ' at [@ls]'

							set @dropSql = replace(@dropSql, '@ls', @SubscriberName)
							set @dropSql = replace(@dropSql, '@@servername', @@servername)
							set @dropSql = replace(@dropSql, '@PublisherDBName', @PublisherDBName)
							set @dropSql = replace(@dropSql, '@SubscriptionDBName', @SubscriptionDBName)
							set @dropSql = replace(@dropSql, '@pubName', 'MW_PUB')
							exec (@dropSql)
							print 'готово'
						end try
						begin catch
							print error_message()
							RAISERROR('Внимание! Не удалось удалить подписку. Для корректной работы пересоздайте её вручную или обратитесь в службу поддержки (см. след. сообщение)', 1, 1)
						end catch

						fetch next from subCursor into @PublisherDBName, @PublisherName, @SubscriberName, @SubscriptionDBName
					end

					close subCursor
					deallocate subCursor

					-- drop article
					begin try
						exec sp_droparticle @publication = N'MW_PUB', @article = N'CharterDeleteQueue'
					end try
					begin catch
						RAISERROR('Внимание! Не удалось удалить таблицу CharterDeleteQueue из статей репликации. Для корректной работы удалите её вручную или обратитесь в службу поддержки (см. след. сообщение)'
							, 1, 1)
					end catch

					RAISERROR('
	Внимание! Для корректной работы приложения Вам необходимо пересоздать подписку(и). 
	Вы можете сделать это либо самостоятельно, как описано здесь: http://wiki.megatec.ru/Мастер-Тур:Настройка_репликации#.D0.9F.D0.B5.D1.80.D0.B5.D1.81.D0.BE.D0.B7.D0.B4.D0.B0.D0.BD.D0.B8.D0.B5_.D0.BF.D0.BE.D0.B4.D0.BF.D0.B8.D1.81.D0.BA.D0.B8, 
	либо обратиться в службу поддержки по телефону +7 (495) 228-3284 или по e-mail: service@megatec.ru.', 16, 1)
				end

				drop table #t
			end
		
		end	
	end
end

if dbo.mwReplIsSubscriber() > 0
begin
	IF EXISTS (SELECT * FROM sys.objects WHERE name = 'CharterDeleteQueue' and type = 'U')
	begin
		drop table dbo.CharterDeleteQueue
	end
end

IF NOT EXISTS (SELECT * FROM sys.objects WHERE name = 'CharterDeleteQueue' and type = 'U')
begin
	CREATE TABLE dbo.CharterDeleteQueue
		(
			id int NOT NULL IDENTITY (1, 1),
			charterIdToReplace int NOT NULL,
			charterToReplaceName nvarchar(150),
			newCharterId int NULL,
			newCharterName nvarchar(150),
			createDate datetime not null,
			startDate datetime null,
			endDate datetime null,
			userId int not null,
			isProcessed bit NOT NULL default(0)
		)  ON [PRIMARY]
	
	ALTER TABLE dbo.CharterDeleteQueue ADD CONSTRAINT
		PK_CharterDeleteQueue PRIMARY KEY CLUSTERED 
		(
		id
		) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
end

GO
/*********************************************************************/
/* end (2013.07.30)_Create_Table_CharterDeleteQueue.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.22)_x_calcprice.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Lists]') AND name = N'x_calcprice')
begin
	CREATE NONCLUSTERED INDEX [x_calcprice] ON [dbo].[TP_Lists] 
	(
		[TI_TOKey] ASC,
		[TI_CalculatingKey] ASC
	)
	INCLUDE ( [TI_Key],
	[ti_totaldays]) WITH (FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end (2013.03.22)_x_calcprice.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.03.27)_IX_Cleaner_CalcPriceLists.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[CalculatingPriceLists]') AND name = N'IX_CLEANER')
begin
	CREATE NONCLUSTERED INDEX [IX_CLEANER]
	ON [dbo].[CalculatingPriceLists] ([CP_StartTime])
	INCLUDE ([CP_PriceTourKey])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end (2013.03.27)_IX_Cleaner_CalcPriceLists.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.02)_Add_Column_QRC_State.sql */
/*********************************************************************/
--<VERSION>9.2.19</VERSION>
--<DATE>2013-04-03</DATE>
--<summary> 0 - ожидает обработки, 1 - в обработке</summary>
if not exists (select 1 from dbo.syscolumns where name = 'QRC_State' and id = object_id(N'[dbo].[QueuesForRecalculateCosts]'))
	alter table dbo.QueuesForRecalculateCosts add QRC_State int default(0)
go
/*********************************************************************/
/* end (2013.04.02)_Add_Column_QRC_State.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (2013.04.22)_Insert_DotNetWindows.sql */
/*********************************************************************/
if not exists (select 1 from DotNetWindows where WN_WindowName = 'FlightChangeNotificationPlugin')
insert into DotNetWindows(WN_WindowName,WN_ExWindowName,WN_NameRus,WN_NameLat)
values ('FlightChangeNotificationPlugin','','Уведомление об изменении авиарейса','Flight change notification')
go
/*********************************************************************/
/* end (2013.04.22)_Insert_DotNetWindows.sql */
/*********************************************************************/

/*********************************************************************/
/* begin (28.02.2013)_Insert_SystemSettings.sql */
/*********************************************************************/
--<DATE>2013-02-28</DATE>
--<VERSION>9.2</VERSION>
--<DESCRIPTION>Настройка определяет, каким образом маржинальный монитор получает актуальные цены. 0 - если хранимкой, 1 - если сервисом</DESCRIPTION>
if not exists (SELECT * FROM SystemSettings WHERE ss_parmName = 'ServiceGetActualPrice')
begin
	insert into SystemSettings (SS_ParmName, SS_ParmValue)
	values ('ServiceGetActualPrice', 0)
end
GO
/*********************************************************************/
/* end (28.02.2013)_Insert_SystemSettings.sql */
/*********************************************************************/

/*********************************************************************/
/* begin 20130426_AlterTable_PriceServiceLink.sql */
/*********************************************************************/
if not exists 
	(
		select * from sys.columns col
		left join sys.tables tab on col.object_id = tab.object_id
		where tab.name = 'PriceServiceLink'
			and col.name = 'PS_Key'
			and is_identity = 1
	)
begin
	-- change primary key identity property to 1:
	-- first, delete all dependent objects
	if exists(select * from sys.sysobjects where name = 'PK_PriceServiceLink' and xtype = 'PK')
	begin
		ALTER TABLE PriceServiceLink drop constraint PK_PriceServiceLink
	end

	if exists (select top 1 1
			from sys.tables tab
			left join sys.indexes ix on ix.object_id = tab.object_id
			where tab.name = 'PriceServiceLink'
				and ix.name = 'PK_PriceServiceLink'
				and ix.type = 1)
	begin
		DROP INDEX PK_PriceServiceLink ON PriceServiceLink WITH ( ONLINE = OFF )
	end

	exec RecreateDependentObjects 'PriceServiceLink', 'PS_Key', '
	-- drop old column
	if exists (select * from dbo.syscolumns where name =''PS_Key'' and id = object_id(N''[dbo].[PriceServiceLink]''))
	begin
		ALTER TABLE PriceServiceLink drop column PS_Key
	end

	-- recreate primary key column with is_identity=1 property value
	if not exists (select * from dbo.syscolumns where name =''PS_Key'' and id = object_id(N''[dbo].[PriceServiceLink]''))
	begin
		ALTER TABLE PriceServiceLink add PS_Key int IDENTITY(1,1) NOT NULL
	end
	'
end
GO

if not exists(select * from sys.sysobjects where name like 'PK_PriceServiceLink' and xtype = 'PK')
begin
	if exists (select top 1 1
			from sys.tables tab
			left join sys.indexes ix on ix.object_id = tab.object_id
			where tab.name = 'PriceServiceLink'
				and ix.name = 'PK_PriceServiceLink'
				and ix.type = 1)
	begin
		DROP INDEX PK_PriceServiceLink ON PriceServiceLink WITH ( ONLINE = OFF )
	end

	ALTER TABLE PriceServiceLink add CONSTRAINT [PK_PriceServiceLink] PRIMARY KEY CLUSTERED 
	(
		[PS_Key] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end 20130426_AlterTable_PriceServiceLink.sql */
/*********************************************************************/

/*********************************************************************/
/* begin 20130426_AlterTable_ServiceLists.sql */
/*********************************************************************/
if exists(select * from sys.sysobjects where name like 'PK_TP_ServiceLists' and xtype = 'PK')
begin
	ALTER TABLE TP_ServiceLists drop constraint PK_TP_ServiceLists
end
GO

if exists (select * from dbo.syscolumns where name ='TL_Key' and id = object_id(N'[dbo].[TP_ServiceLists]'))
begin
	ALTER TABLE TP_ServiceLists drop column TL_Key
end
GO

if not exists (select * from dbo.syscolumns where name ='TL_Key' and id = object_id(N'[dbo].[TP_ServiceLists]'))
begin
	ALTER TABLE TP_ServiceLists add TL_Key int IDENTITY(1,1) NOT NULL
end
GO

if not exists(select * from sys.sysobjects where name like 'PK_TP_ServiceLists' and xtype = 'PK')
begin
	ALTER TABLE TP_ServiceLists add CONSTRAINT [PK_TP_ServiceLists] PRIMARY KEY CLUSTERED 
	(
		[TL_Key] ASC
	)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end 20130426_AlterTable_ServiceLists.sql */
/*********************************************************************/

/*********************************************************************/
/* begin AddSystemSetting_SYSHotelRoomsCount.sql */
/*********************************************************************/
--<DATE>2013-02-14</DATE>
--<VERSION>9.2</VERSION>
--<DESCRIPTION>Настройка по которой определяется максимальное количество показываемых вариантов размещений в форме "Цены на отели"</DESCRIPTION>
IF (SELECT COUNT(*)
	FROM SystemSettings
	WHERE SS_ParmName = 'SYSHotelRoomsCount') = 0
BEGIN
	INSERT INTO SystemSettings (SS_ParmName, SS_ParmValue)
	VALUES ('SYSHotelRoomsCount', 180)
END
go
/*********************************************************************/
/* end AddSystemSetting_SYSHotelRoomsCount.sql */
/*********************************************************************/

/*********************************************************************/
/* begin ADD_PRIMARY_KEY_ServiceList.sql */
/*********************************************************************/

-- добавляет первичный ключ к таблице ServiceList

IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS
              WHERE CONSTRAINT_TYPE = 'PRIMARY KEY'
              AND TABLE_NAME = 'ServiceList' 
              AND TABLE_SCHEMA = 'dbo')
BEGIN
	ALTER TABLE [ServiceList]
	ADD PRIMARY KEY ([SL_Key])
END

GO

/*********************************************************************/
/* end ADD_PRIMARY_KEY_ServiceList.sql */
/*********************************************************************/

/*********************************************************************/
/* begin fn_DelimitedSplit.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[DelimitedSplit]') AND type in (N'TF', N'IF'))
	DROP FUNCTION [dbo].[DelimitedSplit]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-11</DATE>
CREATE FUNCTION [dbo].[DelimitedSplit]
	(
		@pString VARCHAR(8000),
		@pDelimiter CHAR(1)
	)
RETURNS TABLE WITH SCHEMABINDING
AS
RETURN
	WITH
	-- таблица, содержащая 10 строк
	E1(N) AS
	(
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL
		SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1 UNION ALL SELECT 1
	),
	-- 10 * 10 = 100 строк
	E2(N) AS (SELECT 1 FROM E1 a, E1 b),
	-- 100 * 100 = 10000 строк, что гарантированно больше максимально возможного количества ключей
	E4(N) AS (SELECT 1 FROM E2 a, E2 b),
	-- таблица, содержащая числа от 0 до длины строки с ключами
	charIndexes(N) AS
	(
		SELECT 0 UNION ALL
		SELECT TOP (LEN(ISNULL(@pString, '1'))) ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) FROM E4
	),
	-- таблица, содержащая индексы начала ключей в строке
	keysIndexes(N) AS
	(
		SELECT charIndexes.N + 1
		FROM charIndexes
		WHERE (SUBSTRING(@pString, charIndexes.N, 1) = @pDelimiter OR charIndexes.N = 0)
	)
	
	-- для каждого индекса ключа получает ближайший разделитель и вытаскивает сам ключ
	-- если разделителя нет, тогда берет всю оставшуюся строку
	SELECT ItemNumber = ROW_NUMBER() OVER(ORDER BY N),
		Item = CAST(SUBSTRING(@pString, N, ISNULL(NULLIF(CHARINDEX(@pDelimiter, @pString, N), 0) - N, 8000)) AS INT)
	FROM keysIndexes
GO

GRANT SELECT ON [dbo].[DelimitedSplit] TO PUBLIC
GO
/*********************************************************************/
/* end fn_DelimitedSplit.sql */
/*********************************************************************/

/*********************************************************************/
/* begin fn_mwCheckQuotesEx2.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwCheckQuotesEx2]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION [dbo].[mwCheckQuotesEx2]
GO

CREATE FUNCTION [dbo].[mwCheckQuotesEx2]
(
	@svkey int, 
	@code int, 
	@subcode1 int,
	@subcode2 int, 
	@agentKey int, 
	@partnerKey int, 
	@date datetime,
	@day int,
	@days int,
	@requestOnRelease smallint, 
	@noPlacesResult int, 
	@checkAgentQuotes smallint, 
	@checkCommonQuotes smallint,
	@checkNoLongQuotes smallint,
	@findFlight smallint,
	@cityFrom int,
	@cityTo int,
	@flightpkkey int,
	@tourDuration int,
	@expiredReleaseResult int,
	@linked_day int = null)

returns @tmpResQuotes table(
	qt_svkey int,
	qt_code int,
	qt_subcode1 int,
	qt_subcode2 int,
	qt_agent int,
	qt_prkey int,
	qt_bycheckin int,
	qt_byroom int,
	qt_places int,
	qt_allPlaces int,
	qt_type int,
	qt_long int,
	qt_additional varchar(2000))
begin
	--<VERSION>9.2.19.10</VERSION>
	--<DATE>2013-05-07</DATE>

      declare @isSubCode2 smallint
      select @isSubCode2 = isnull(SV_ISSUBCODE2, 0) from [Service] where SV_key = @svkey
      if(@isSubCode2 <= 0)
            set @subcode2 = 0
            
      if(@svkey = 1)
            set @subcode2 = -1

      -- MEG00023260 Paul G 20.12.2010
      -- сделал для 9-й версии более гибкую настройку @noPlacesResult
      if exists(select 1 from systemsettings where ss_parmname like 'NoPlacesQuoteResult_' + convert(varchar, @svkey))
      begin
            select @noPlacesResult = cast(IsNull(ss_parmvalue,@noPlacesResult) as int) from systemsettings where ss_parmname like 'NoPlacesQuoteResult_' + convert(varchar, @svkey)
      end
      -- End MEG00023260

	if (@svkey = 1)
	begin
		declare @tariffToStop varchar(20)
		set @tariffToStop = ',' + ltrim(str(@subcode1)) + ','
		if exists(select 1 from dbo.systemsettings where ss_parmname='MWTariffsToStop' and charindex(@tariffToStop, ',' + ss_parmvalue + ',') > 0)
			set @noPlacesResult = 0
	end

	declare @ALLDAYS_CHECK int
	set @ALLDAYS_CHECK = -777

	-- для квот на продолжительность
	declare @long int
	if(@svkey = 1 or @svkey = 2 or @svkey = 4 or @checkNoLongQuotes = @ALLDAYS_CHECK)
		set @long = @tourDuration
	else
		set @long = @days

	if(@day <= 0 or @day is null)
		set @day = 1
	if(@days <= 0 or @days is null)
		set @days = 1


	declare @dateFrom datetime
	declare @dateTo datetime
	set @dateFrom = dateadd(day, @day - 1, @date)
	set @dateTo = dateadd(day, @day + @days - 2, @date)
	--karimbaeva 20-04-2012 не было обаботки квот, если стоп ставиться плагином Stop-sale на авиаперелеты
	declare @linked_date datetime, @dt1 datetime, @dt2 datetime, @ctFromStop int, @ctToStop int
	if @linked_day is not null
	begin
		set @linked_date = dateadd(day, @linked_day - 1, @date)
		if(@linked_date > @dateFrom)
		begin
			set @dt1 = @dateFrom
			set @dt2 = @linked_date
		end
		else
		begin
			set @dt1 = @linked_date
			set @dt2 = @dateFrom
		end
	end

	declare @tmpSubcode1 int
	if(@svkey = 3 and @subcode1 > 0 and @subcode2 <= 0) -- hotelRoomKey --> subcode1, subcode2
	begin
		select @tmpSubcode1 = hr_rmkey, @subcode2 = hr_rckey from hotelrooms with(nolock) where hr_key = @subcode1
		set @subcode1 = @tmpSubcode1
	end

	declare @result int
	declare @currentDate datetime
	select @currentDate = currentDate from dbo.mwCurrentDate


	declare @qtSvkey int, @qtCode int, @qtSubcode1 int, @qtSubcode2 int, @qtAgent int,
		@qtPrkey int, @qtNotcheckin int, @qtRelease int, @qtPlaces int, @qtDate datetime,
		@qtByroom int, @qtType int, @qtLong int, @qtPlacesAll int, @qtStop smallint, @qtQoId int

	declare	@svkeyRes int, @codeRes int, @subcode1Res int, 
		@subcode2Res int, @agentRes int, @prkeyRes int,
		@bycheckinRes int, @byroomRes int, @placesRes int,
		@allPlacesRes int, @typeRes int, @longRes int, @releaseRes int, @additional varchar(2000), @stopSale smallint

	set @svkeyRes = 0
	set @codeRes = 0
	set @subcode1Res = 0
	set @subcode2Res = 0
	set @agentRes = 0
	set @prkeyRes = 0
	set @bycheckinRes = 0
	set @byroomRes = 0
	set @typeRes = 0
	set @allPlacesRes = 0
	set @longRes = 0
	set @releaseRes = -1
	set @additional = ''

	declare @tmpQuotes table(
		qt_svkey int,
		qt_code int,
		qt_subcode1 int,
		qt_subcode2 int,
		qt_agent int,
		qt_prkey int,
		qt_bycheckin int,
		qt_release int,
		qt_places int,
		qt_date datetime,
		qt_byroom int,
		qt_type int,
		qt_long int,
		qt_placesAll int,
		qt_stop smallint,
		qt_qoid int,
		str_id int identity(1,1)
	)

	declare @tmpDate datetime
	declare @dayOfWeek int

	if(@svkey <> 1 or @findFlight <= 0)
	begin
		if(@svkey = 1)
		begin

			if(isnull(@cityFrom, 0) <= 0 or isnull(@cityTo, 0) <= 0)
				select @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @code
				
			--karimbaeva 20-04-2012 не было обаботки квот, если стоп ставиться плагином Stop-sale на авиаперелеты
			if(@linked_date is not null and @linked_date < @dateFrom)
			begin
				set @ctFromStop = @cityTo
				set @ctToStop = @cityFrom
			end
			else
			begin
				set @ctFromStop = @cityFrom
				set @ctToStop =@cityTo
			end

			set @dayOfWeek = datepart(dw, @dateFrom) - 1
			if(@dayOfWeek = 0)
				set @dayOfWeek = 7

				if (@flightpkkey < 0)
				begin
					 if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
				where ch_key = @code 
					and (AS_WEEK is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%')) -- Golubinsky. 13.12.2011. MEG00039207. проверка AS_WEEK на случай, когда поле не заполнено
					and (as_dateFrom is null or (as_dateFrom is not null and @dateFrom >= as_dateFrom))
					and (AS_DATETO is null or (AS_DATETO is not null and @dateFrom <= AS_DATETO)))	-- Golubinsky. 13.12.2011. MEG00039207. проверка диапазона дат на случай, если as_dateFrom и AS_DATETO null
					begin
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
						values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
							return
					end
				end
				else
				begin
			if (@flightpkkey >= 0)
			begin
			--karimbaeva 20-04-2012 не было обаботки квот, если стоп ставиться плагином Stop-sale на авиаперелеты
			 if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
						inner join tbl_costs on (cs_svkey = 1 and cs_code = ch_key 
						and (@dateFrom between cs_date and cs_dateend
							or @dateFrom between cs_checkindatebeg and cs_checkindateend)
						and cs_subcode1=@subcode1 and cs_pkkey = @flightpkkey)
						where ch_key = @code 
							and (AS_WEEK is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
							and (as_dateFrom is null or (as_dateFrom is not null and @dateFrom >= as_dateFrom))
							and (AS_DATETO is null or (AS_DATETO is not null and @dateFrom <= AS_DATETO)))
				or exists(select 1 from dbo.stopavia with(nolock) 
						where sa_ctkeyfrom = @ctFromStop and sa_ctkeyto = @ctToStop
							and isnull(sa_stop, 0) > 0
							and sa_dbeg = @dt1 and sa_dend = @dt2)
				begin
					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
						return 
				end
				end
			end
		end
					
		--

		insert into @tmpQuotes select * from 
		(select 
			qo_svkey,
			qo_code,
			isnull(qo_subcode1, 0) as qo_subcode1,
			isnull(qo_subcode2, 0) as qo_subcode2,
			isnull(qp_agentkey, 0) as qp_agentkey,
			isnull(qt_prkey, 0) as qt_prkey,
			isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
			qd_release, 
			isnull(qp_places, 0) - isnull(qp_busy, 0) as qt_freePlaces,
			qd_date,
			qt_byroom,
			qd_type,
			isnull(ql_duration, 0) as ql_duration,
			isnull(qp_places, 0) as qp_places,
			(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop,
			qo_id as qt_qoid
		from quotas q with(nolock) inner join 
			quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
			left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
			right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
			left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
		where
			qo_svkey = @svkey
			and ISNULL(QD_IsDeleted, 0) = 0
			and qo_code = @code
			and isnull(qo_subcode1, 0) in (0, @subcode1)
			and isnull(qo_subcode2, 0) in (0, @subcode2)
			and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
				(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
				(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
			and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
			and ((@days = 1 and qd_date = @dateFrom) or (@days > 1 and qd_date between @dateFrom and @dateTo))
			and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
			and not exists (select top 1 1 
									from StopSales inner join QuotaObjects on qo_id=ss_qoid
									where ((@days = 1 and ss_date = @dateFrom) or (@days > 1 and ss_date between @dateFrom and @dateTo))
									and ss_qdid is null
									and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))
									and isnull(ss_isdeleted, 0) = 0
									and qd.QD_Type = (SS_AllotmentAndCommitment + 1)
									and qo_svkey = @svkey
									and qo_code = @code
									and isnull(qo_subcode1, 0) in (@subcode1)
									and isnull(qo_subcode2, 0) in (0, @subcode2))
		-- Paul G 07.02.2011 MEG00031547, MEG00031454
		-- Не отлавливались такие дни, на которые нет квот, но есть стоп-сейл.
		-- Да и вообще не учитывались стопы с пустой ссылкой на QuotaDetails.
		-- Добавил union, который учитывает стопы с пустой ссылкой на QuotaDetails.
		union
			select
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				0,
				isnull(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,isnull(SS_AllotmentAndCommitment, 0) + 1,0,0,1,
				qo_id as qt_qoid
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
			where ((@days = 1 and ss_date = @dateFrom) or (@days > 1 and ss_date between @dateFrom and @dateTo))
					and ss_qdid is null
					and isnull(ss_isdeleted, 0) = 0
					and qo_svkey = @svkey
					and qo_code = @code
					and isnull(qo_subcode1, 0) in (0)
					and isnull(qo_subcode2, 0) in (0, @subcode2)
					and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))
			union
			select
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				0,
				isnull(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,isnull(SS_AllotmentAndCommitment, 0) + 1,QL_Duration,0,1,
				qo_id as qt_qoid
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
				inner join QuotaDetails on QD_ID=SS_QDID
				left join QuotaParts on QP_QDID = qd_id
				left join QuotaLimitations on QL_QPID = qp_id
			where ((@days = 1 and ss_date = @dateFrom) or (@days > 1 and ss_date between @dateFrom and @dateTo))
					and ss_qdid is not null
					and isnull(ss_isdeleted, 0) = 0
					and qo_svkey = @svkey
					and qo_code = @code
					and isnull(qo_subcode1, 0) in (@subcode1)
					and isnull(qo_subcode2, 0) in (0, @subcode2)
					and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))
		) as innerQuotas
		order by
			qd_date, qp_agentkey DESC, qt_freePlaces, QD_Release desc, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
		
		-- если квота проверяется из экранов AviaQuotes и HotelQuotes, проверка на наличие общего стопа
		if (@tourDuration < 0 and (@svkey = 1 or @svkey = 3))
		begin
			if exists(select 1 
					from stopsales with(nolock) 
						inner join quotaobjects qo with(nolock) on ss_qoid = qo_id
					where qo_svkey = @svkey and qo_code = @code and isnull(qo_subcode1, 0) in (0, @subcode1)
						and isnull(qo_subcode2, 0) in (0, @subcode2) and ss_date between @dateFrom and @dateTo
						and (ss_qdid is null ) 
						and isnull(ss_isdeleted, 0) = 0 
						and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))
						and (IsNull(ss_allotmentandcommitment, 0) = 1 
							or not exists(select 1 from
							quotas with(nolock) inner join quotaobjects qo1 with(nolock) on
							qo1.qo_qtid = qt_id inner join quotadetails with(nolock) on qd_qtid = qt_id
							 where qo.qo_svkey = qo1.qo_svkey and qo.qo_code = qo1.qo_code and (qo.qo_subcode1 in (qo1.qo_subcode1, 0) or qo1.qo_subcode1 = 0)
							 and (qo.qo_subcode2 in (qo1.qo_subcode2, 0) or qo1.qo_subcode2 = 0) and qd_date = ss_date and qd_places > qd_busy and qd_type = 2)))
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
				
				return
			end							 
		end
		
		-- для экранов AviaQuotes и HotelQuotes
		-- если не существует не одной квоты, то возвращаем запрос
		-- если есть места, но стоит стоп, то возвращаем нет мест	
		if (not exists (select top 1 1 from @tmpQuotes) and @tourDuration < 0
			and not exists(select top 1 1 from quotas q with(nolock) inner join 
											quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
											left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
											right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid
											where qo_svkey = @svkey
											and ISNULL(QD_IsDeleted, 0) = 0
											and qo_code = @code
											and isnull(qo_subcode1, 0) in (0, @subcode1)
											and isnull(qo_subcode2, 0) in (0, @subcode2)
											and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
												(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
												(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
											and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
											and ((@days = 1 and qd_date = @dateFrom) or (@days > 1 and qd_date between @dateFrom and @dateTo))
											and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK 
											and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))))
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, @noPlacesResult, 0, 0, 0, '0=-1:0')
			return
		end
		else if (not exists (select top 1 1 from @tmpQuotes) and @tourDuration < 0)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
			return
		end
		
		
		-- пробуем удалить стопы по следующему принципу: если стоит стоп на один тип квоты, но на другом типе с квотами все в порядке
		if ((select count(distinct qt_date) from @tmpQuotes where qt_places > 0 and qt_stop = 0 and qt_type = 1) = @days
			and exists(select 1 from @tmpQuotes where qt_stop = 1 and qt_type = 2))
		begin
			delete from @tmpQuotes where qt_stop = 1 and qt_type = 2
		end
		
		if ((select count(distinct qt_date) from @tmpQuotes where qt_places > 0 and qt_stop = 0 and qt_type = 2) = @days
			and exists(select 1 from @tmpQuotes where qt_stop = 1 and qt_type = 1)
		)
		begin
			delete from @tmpQuotes where qt_stop = 1 and qt_type = 1
		end
		
		-- если одновременно на alotment и commitment нет мест, возвращаем отсутствие мест
		if
		(
			(
				exists(select 1 from @tmpQuotes as tq1 where ((qt_stop = 1 or qt_places = 0) and qt_type = 2) and not exists(select 1 from @tmpQuotes as tq2 where tq2.qt_stop=0 and tq2.qt_places>0 and tq2.qt_date=tq1.qt_date))
			)
			and
			(
				exists(select 1 from @tmpQuotes as tq1 where ((qt_stop = 1 or qt_places = 0) and qt_type = 1) and not exists(select 1 from @tmpQuotes as tq2 where tq2.qt_stop=0 and tq2.qt_places>0 and tq2.qt_date=tq1.qt_date))
			)
		)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent, qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
				
			return
		end

		if(@tourDuration < 0) -- надо проверить все возможные квоты по дням на все возможные продолжительности (используется при проверке наличия мест в отеле и на перелете)
		begin
			set @checkNoLongQuotes = @ALLDAYS_CHECK

			declare @durations table(
				duration int
			)

			insert into @durations select distinct qt_long from @tmpQuotes order by qt_long

			declare @rowCount int
			set @rowCount = @@rowCount

			if(@rowCount > 1)
			begin
				declare @quotaDuration int
				declare durationCur cursor fast_forward read_only for
					select duration from @durations
	
				open durationCur
	
				fetch next from durationCur into @quotaDuration
				while(@@fetch_status = 0)
				begin
					if(len(@additional) > 0)
						set @additional = @additional + '|'
	
					select 
						@additional = @additional + qt_additional
					from dbo.mwCheckQuotesEx(@svkey, @code, @subcode1, @subcode2, @agentKey, @partnerKey, 
						@date, @day, @days, @requestOnRelease, @noPlacesResult, @checkAgentQuotes, 
						@checkCommonQuotes, @ALLDAYS_CHECK, @findFlight, @cityFrom,	@cityTo, @flightpkkey,
						@quotaDuration,	@expiredReleaseResult)
	
					fetch next from durationCur into @quotaDuration
				end
	
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
			
				close durationCur
				deallocate durationCur
	
				return
			end
			else if(@rowCount = 1)
				select @long = duration from @durations
			else
				set @long = 0
		end
		else
		begin
			-- удалим квоты с неподходящей продолжительностью
			if @svkey = 1
				delete from @tmpQuotes 
				where ISNULL(qt_long, 0) <> 0 and ISNULL(qt_long, 0) <> isnull(@tourDuration , 0)
		
			-- check stopsale
			-- MT ignore stop on object for commitment quotas
			if exists(select 1 
					from stopsales with(nolock) 
						inner join quotaobjects qo with(nolock) on ss_qoid = qo_id
					where qo_svkey = @svkey and qo_code = @code and isnull(qo_subcode1, 0) in (0, @subcode1)
						and isnull(qo_subcode2, 0) in (0, @subcode2) and ss_date between @dateFrom and @dateTo
						and (ss_qdid is null ) 
						and isnull(ss_isdeleted, 0) = 0 
						and (@partnerkey < 0 or isnull(ss_prkey, 0) in (isnull(@partnerkey, 0), 0))
						-- MEG00032187 Paul G 14.02.2011
						-- Отсеиваем те стопы, которые ставятся только на allotment (ss_allotmentandcommitment = 0)
						-- и по которым на соответствующие дни есть квоты commitment.
						and (IsNull(ss_allotmentandcommitment, 0) = 1 
							or not exists(select 1 from
							quotas with(nolock) inner join quotaobjects qo1 with(nolock) on
							qo1.qo_qtid = qt_id inner join quotadetails with(nolock) on qd_qtid = qt_id
						--MEG00029495 Paul G 18.02.2010
						--Добавил условие qd_places > qd_busy
						--Смысл в том, что это условие должно проверять существование квот commitment на некоторые дни, но только тех
						--на которые еще есть места. Иначе возможна ситуация, когда на все commitment закончились места, а allotment на стопе
						--и проверка на наличие стопа не сработает
							 where qo.qo_svkey = qo1.qo_svkey and qo.qo_code = qo1.qo_code and (qo.qo_subcode1 in (qo1.qo_subcode1, 0) or qo1.qo_subcode1 = 0)
							 and (qo.qo_subcode2 in (qo1.qo_subcode2, 0) or qo1.qo_subcode2 = 0) and qd_date = ss_date and qd_places > qd_busy and qd_type = 2 /*commitment*/)))
			begin
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
						values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
							return 
			end

		end

		if (isnull((select min(qt_bycheckin)
					from @tmpQuotes
					where qt_date = @dateFrom), 1) = 1 AND @checkNoLongQuotes != @ALLDAYS_CHECK AND (SELECT CASE WHEN (SELECT COUNT(*) FROM @tmpQuotes) > 0 THEN 1 ELSE 0 END)=1)
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
								values(0, 0, 0, 0, 0, 0, 0, 0, case when @stopSale > 0 then 0 else @noPlacesResult end, 0, 0, 0)
								return
		end

		if isnull((select max(stopSale)
					from (select min(qt_stop) as stopSale
							from @tmpQuotes
							where qt_qoid = (select top 1 qt_qoid from @tmpQuotes where qt_date = @dateFrom) and isnull(qt_prkey, 0) = isnull(@partnerkey, 0)
							group by qt_date) as tbl), 0) = 1
		begin
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
						values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
							return 
		end		

		-- MEG00024921, Danil, 10.02.2010: значения переменных предыдущей проверенной строки
		declare @prevSubCode1 int, @prevSubCode2 int, @prevQtType int
		-- MEG00024921 End

		declare qCur cursor fast_forward read_only for 
		select
			qt_svkey,
			qt_code,
			qt_subcode1,
			qt_subcode2,
			qt_agent,
			qt_prkey,
			qt_bycheckin,
			qt_release,
			qt_places,
			qt_date,
			qt_byroom,
			qt_type,
			qt_long,
			qt_placesAll,
			qt_stop,
			qt_qoid
		from @tmpQuotes

		open qCur

		fetch next from qCur 
			into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
				@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, 
				@qtByroom, @qtType, @qtLong, @qtPlacesAll, @qtStop, @qtQoId

		-- MEG00024921, Danil, 10.02.2010: значения переменных предыдущей проверенной строки
		set @prevSubCode1 = @qtSubcode1
		set @prevSubCode2 = @qtSubcode2
		set @prevQtType = @qtType
		-- MEG00024921 End

		if(@@fetch_status = 0)
		begin
			set @result = 1000000

			declare @prevDate datetime, @dateRes int, @dateAllPlaces int, @wasLongQuota smallint, @wasAgentQuota smallint, 
			@checkAfterWasLong smallint, @checkAfterWasAgent smallint, @isFirstDate bit, @prevDateRes int, @prevDateOld datetime

			set @prevDate = @dateFrom
			if(@qtDate = @dateFrom)
				set @dateRes = 0
			else
				set @dateRes = -1
			set @dateAllPlaces = 0
			set @stopSale = 1
			set @wasLongQuota = 0
			set @wasAgentQuota = 0
			set @checkAfterWasLong = 0
			set @checkAfterWasAgent = 0
			set @isFirstDate = 1
			set @prevDateRes = 0

			declare @quoteOnFirstDayExist smallint -- признак существования квоты на ПЕРВЫЙ день
				set @quoteOnFirstDayExist = 0

			while(@@fetch_status = 0)
			begin

				if(@qtStop > 0) -- stop sale
				begin
					close qCur
					deallocate qCur

					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
					return
				end

				if(@checkNoLongQuotes != @ALLDAYS_CHECK)
				begin
					-- Если обрабатываемая квота - квота на первый день, то выставляем индикатор в true
					if (@qtDate = @dateFrom and @qtNotcheckin = 0)
						set @quoteOnFirstDayExist = 1

					-- Если обрабатываемая квота - квота НЕ на первый день и в первый день ее не обнаруживалось, то возвращаем ЗАПРОС
					if (@qtDate != @dateFrom and @quoteOnFirstDayExist = 0)
					begin
						--MEG00032854 Paul G 05.04.2011
						--раньше в этом месте анализ квот прекращался и возвращался запрос, но это неправильно. 
						set @dateRes = -1
					end
				end

				--MEG00035270 Paul G 14.06.2011
				--для дальнейшего анализа квоты необходимо выполнение условия:
				--если она не на заезд, то должна найтись другая квота на заезд, на день предоставления услуги, но в том же объекте квотирования
				--эта проверка нужна для того, чтобы при наличии 2-х объектов квотирования с разными разбиениями на заезды не пересекались
				if (@qtNotcheckin = 1 and not exists(select 1 from @tmpQuotes where qt_qoid = @qtQoId and qt_bycheckin = 0 and qt_date = @dateFrom))
				begin
					fetch next from qCur 
						into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
							@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, 
							@qtByroom, @qtType, @qtLong, @qtPlacesAll, @qtStop, @qtQoId

					continue
				end
				--End MEG00035270

				if(@qtNotcheckin <= 0 or @qtDate <> @dateFrom or @checkNoLongQuotes = @ALLDAYS_CHECK)
				begin
					if(@prevDate != @qtDate)
					begin

						if(@dateRes = 0 /*and @stopSale <= 0*/ and ((@wasLongQuota > 0 and @checkAfterWasLong <= 0 and @checkNoLongQuotes > 0) or (@wasAgentQuota > 0 and @checkAfterWasAgent <= 0 and @checkCommonQuotes > 0)))
							set @dateRes = -1
				
						if(@checkNoLongQuotes = @ALLDAYS_CHECK)
						begin
							if(len(@additional) > 0)
								set @additional = @additional + ','

							if(@dateRes = 0 and @stopSale <= 0)
								set @dateRes = @noPlacesResult

							set @additional = @additional + ltrim(str(@dateRes)) + ':' + ltrim(str(@dateAllPlaces))
						end
						else
						if(@dateRes <= 0 or @dateRes < @result or @qtStop > 0)
						begin
							set @result = @dateRes
							set @allPlacesRes = @dateAllPlaces -- total places in quota

							if(@result = 0 or @qtStop > 0) -- no places
							begin
								close qCur
								deallocate qCur

								insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
									qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
								values(0, 0, 0, 0, 0, 0, 0, 0, case when @qtStop > 0 then 0 else @noPlacesResult end, 0, 0, 0, '0=0:0')
								return
							end
						end
						else
						begin
							if(@wasLongQuota > 0)
								set @checkAfterWasLong = 1

							if(@wasAgentQuota > 0)
								set @checkAfterWasAgent = 1
						end
		
						if(datediff(day, @prevDate, @qtDate) > 1) -- there are days for wich quota doesn't exist
						begin
							set @result = -1 -- request
							if(@checkNoLongQuotes = @ALLDAYS_CHECK)
							begin
								set @tmpDate = dateadd(day, 1, @prevDate)
								while(@tmpDate < @qtDate)
								begin
									if(len(@additional) > 0)
										set @additional = @additional + ','

									set @additional = @additional + '-1:0'
									set @tmpDate = dateadd(day, 1, @tmpDate)
								end
							end
						end

						
							
						set @prevDate = @qtDate
						set @dateRes = 0
						set @dateAllPlaces = 0
						set @stopSale = 1
						set @wasLongQuota = 0
						set @wasAgentQuota = 0
						set @checkAfterWasLong = 0
						set @checkAfterWasAgent = 0

						-- MEG00024921, Danil, 10.02.2010: значения переменных предыдущей проверенной строки
						set @prevSubCode1 = @qtSubcode1
						set @prevSubCode2 = @qtSubcode2
						set @prevQtType = @qtType
						-- MEG00024921 End

					end
					
					if( -- MEG00024921, Danil, 10.02.2010: это условие было странным образом закомментарено + добавлена проверка на qtStop.
						-- Привел логику в соответствие с версией хранимки для 2007.2, где в аналогичной ситуации все работает.
						-- Проверку на qtStop перенес в следующий if
						(@stopSale <= 0 or ((@prevSubCode1 = @qtSubcode1 and @prevSubCode2 = @qtSubcode2) or @prevQtType <> @qtType))
						and not(@agentKey > 0 and @qtAgent = 0 and @wasAgentQuota > 0 and (@checkCommonQuotes <= 0))
								and not(@long > 0 and @qtLong = 0 and @wasLongQuota > 0 and (@checkNoLongQuotes <= 0)))
					begin
						if((@qtRelease is null or datediff(day, @currentDate, @qtDate) >= isnull(@qtRelease, 0))
							-- MEG00024921, Danil, 10.02.2010: сюда перенес проверку на qtStop из условия выше (по аналогии с версией 2007.2)
							and isnull(@qtStop, 0) = 0)
							-- MEG00024921 End
						begin
							if((@requestOnRelease <= 0 or @qtRelease is null or @qtRelease > 0) and
								@qtPlaces > 0 and not(@stopSale > 0 and @wasAgentQuota > 0 /*request for agents if they have agent quota and this quota is stopped (they try to reserve general quota by low cost)*/))
							begin

								--koshelev
								--TFS 7661 28.08.2012
								if (@days = 1)
								begin
									set @dateRes = @qtPlaces--@dateRes + @qtPlaces
								end
								else
								begin
									if (@qtPlaces = 1)
										set @dateRes = @qtPlaces
									else									
										set @dateRes = @dateRes + @qtPlaces
								end
								set @dateAllPlaces = @dateAllPlaces + @qtPlacesAll
								
								if (@qtPlaces < @result) -- result перезапишется
								begin
									set @svkeyRes = @qtSvkey
									set @codeRes = @qtCode
									set @subcode1Res = @qtSubcode1
									set @subcode2Res = @qtSubcode2
									set @agentRes = @qtAgent
									set @prkeyRes = @qtPrkey										
									set @byroomRes = @qtByroom
									set @typeRes = @qtType
									set @longRes = @qtLong
									set @releaseRes = @qtRelease
								end
							end
							else if(@qtPlaces > 0)
								set @dateRes = -1
						end
						else 
						begin
							if(isnull(@qtStop, 0) = 0 and @qtPlaces > 0)
								set @dateRes = @expiredReleaseResult -- no or request (0 or -1)
							else
							-- MEG00024921, Danil, 10.02.2010: добавил эту секцию, чтобы в случае, если не стоп, 
							-- а просто закончились места возвращалось @noPlacesResult
							if(isnull(@qtStop, 0) = 0)
							begin
								set @dateRes = @noPlacesResult -- no places
							end
							else
							-- MEG00024921 End
							begin
								set @dateRes = 0 -- stop sale
								set @result = 0
							end
						end
						--set @bycheckinRes =  1 - @qtNotcheckin
--set @bycheckinRes =  0
						
						-- MEG00024921, Danil, 10.02.2010: простановка признака "был ли стоп" для проверяемой даты
						-- опять же по аналогии с 2007.2
						if (isnull(@qtStop, 0) = 0)
							set @stopSale = 0
						-- MEG00024921 End
					end
					else if(@dateRes = 0 and @checkNoLongQuotes <> @ALLDAYS_CHECK)
					begin
						close qCur
						deallocate qCur
						insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						-- MEG00024921, Danil, 10.02.2010: добавил значение qt_additional и его заполнение
							qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
						values(0, 0, 0, 0, 0, 0, 0, 0, case when @stopSale > 0 then 0 else @noPlacesResult end, 0, 0, 0, '0=0:0')
						-- MEG00024921 End
						return 
					end

					if(@wasAgentQuota <= 0 and @qtAgent > 0) -- признак того, что агентская квота заведена, но закончилась
						set @wasAgentQuota = 1
					if(@wasLongQuota <= 0 and @qtLong > 0)  -- признак того, что квота на продолжительность заведена, но закончилась
						set @wasLongQuota = 1
				end

				-- MEG00024921, Danil, 10.02.2010: значения переменных предыдущей проверенной строки
				set @prevSubCode1 = @qtSubcode1
				set @prevSubCode2 = @qtSubcode2
				set @prevQtType = @qtType
				-- MEG00024921 End
				if (@isFirstDate = 0 and @prevDateOld = @qtDate and @prevDateRes > 0)
				begin
					set @dateRes = @prevDateRes
				end
				set @isFirstDate = 0
				set @prevDateRes = @dateRes
				set @prevDateOld = @qtDate
				fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
					@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
					@qtLong, @qtPlacesAll, @qtStop, @qtQoId
			end

			if(@checkNoLongQuotes = @ALLDAYS_CHECK)
			begin
				if(len(@additional) > 0)
					set @additional = @additional + ','

				if(@dateRes = 0 and @stopSale <= 0)
					set @dateRes = @noPlacesResult
				
				set @additional = @additional + ltrim(str(@dateRes)) + ':' + ltrim(str(@dateAllPlaces))
			end
			else
			if(@dateRes <= 0 or @dateRes < @result)
			begin
				set @result = @dateRes
				set @allPlacesRes = @dateAllPlaces -- total places in quota

				if(@result = 0) -- iano iao
					set @result = case when @stopSale > 0 then 0 else @noPlacesResult end
			end

			if(@qtDate <> @dateTo and ((@result > 0 and @bycheckinRes <= 0) or @checkNoLongQuotes = @ALLDAYS_CHECK)) -- ia iaio ec aao aeaiaciia eaioa ia caaaaaia
			begin
				set @result = -1 -- cai?in
				if(@checkNoLongQuotes = @ALLDAYS_CHECK)
				begin
					set @tmpDate = dateadd(day, 1, @qtDate)
					while(@tmpDate <= @dateTo)
					begin
						if(len(@additional) > 0)
							set @additional = @additional + ','

						set @additional = @additional + '-1:0'
						set @tmpDate = dateadd(day, 1, @tmpDate)
					end
				end
			end
		end
		else
		begin
			set @result = -1
			if(@checkNoLongQuotes = @ALLDAYS_CHECK)
			begin
				set @tmpDate = @dateFrom
				while(@tmpDate <= @dateTo)
				begin
					if(len(@additional) > 0)
						set @additional = @additional + ','

					set @additional = @additional + '-1:0'
					set @tmpDate = dateadd(day, 1, @tmpDate)								
				end
			end
		end
	end
	else
	begin
		declare @oldPartnerKey int
		-- сохраняем ключ партнера, чтобы находить стопы, только от данного партнера
		set @oldPartnerKey = @partnerKey
		set @partnerKey = -1 -- подбираем перелеты от разных партнеров
		if(isnull(@cityFrom, 0) <= 0 or isnull(@cityTo, 0) <= 0)
			select @cityFrom = ch_citykeyfrom, @cityTo = ch_citykeyto from charter with(nolock) where ch_key = @code
		
		if(@linked_date is not null and @linked_date < @dateFrom)
		begin
			set @ctFromStop = @cityTo
			set @ctToStop = @cityFrom
				end
		else
		begin
			set @ctFromStop = @cityFrom
			set @ctToStop =@cityTo
		end
			
		set @dayOfWeek = datepart(dw, @dateFrom) - 1
		if(@dayOfWeek = 0)
			set @dayOfWeek = 7
		
		--karimbaeva 20-04-2012 не было обаботки квот, если стоп ставиться плагином Stop-sale на авиаперелеты	
		if @flightpkkey >= 0
		begin
			if not exists(
				select top 1 ch_key 
				from charter with(nolock) 
				inner join airseason with(nolock) on as_chkey = ch_key
				inner join tbl_costs with(nolock) on (cs_svkey = 1 
														and cs_code = ch_key 
														and ((@dateFrom between cs_date and cs_dateend
															or @dateFrom between cs_checkindatebeg and cs_checkindateend)
															and (cs_DateSellEnd is null or @dateFrom <= cs_DateSellEnd)
															and (cs_DateSellBeg is null or @dateFrom >= cs_DateSellBeg))
														and cs_subcode1=@subcode1 
														and cs_pkkey = @flightpkkey)
				where ch_citykeyfrom = @cityFrom 
						and ch_citykeyto = @cityTo 
						and (AS_WEEK is null 
								or len(as_week)=0 
								or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
						and @dateFrom between as_dateFrom and as_dateto
						and (CS_Long is null or CS_LongMin is null or @long between CS_LongMin and CS_Long)
						)
			or exists(select 1 from dbo.stopavia with(nolock) 
						where sa_ctkeyfrom = @ctFromStop and sa_ctkeyto = @ctToStop
							and isnull(sa_stop, 0) > 0 
							and sa_dbeg = @dt1 and sa_dend = @dt2)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
					return 
			end

			insert into @tmpQuotes
			select distinct
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				isnull(qp_agentkey, 0) as qp_agentkey,
				isnull(qt_prkey, 0) as qt_prkey,
				isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
				qd_release as qt_release, 
				isnull(qp_places, 0) - isnull(qp_busy, 0),
				qd_date,
				qt_byroom,
				qd_type,
				isnull(ql_duration, 0) as ql_duration,
				isnull(qp_places, 0),
				(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop,
				qo_id as qt_qoid
			from quotas q with(nolock) inner join 
				quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
				left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
				right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
				left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
				 inner join charter on (qo_svkey = @svkey and ch_key = qo_code) inner join airseason on as_chkey = ch_key
			where
				exists (select top 1 cs_id from tbl_costs with(nolock)
					where cs_svkey=@svkey and cs_code=qo_code and cs_subcode1=@subcode1 
						and (@dateFrom between cs_date and cs_dateend 
							or @dateFrom between cs_checkindatebeg and cs_checkindateend)
						and cs_pkkey = @flightpkkey)
				and qo_svkey = @svkey
				and ISNULL(QD_IsDeleted, 0) = 0
				and isnull(qo_subcode1, 0) in (0, @subcode1)
			--	and isnull(qo_subcode2, 0) in (0, @subcode2)
				and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
					(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
					(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
				and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
				and qd_date = @dateFrom
				and ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo 
				and (AS_WEEK is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
				and @dateFrom between as_dateFrom and as_dateto
				and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
				and not exists (select top 1 1 
									from StopSales inner join QuotaObjects on qo_id=ss_qoid
									where ss_date = @dateFrom
									and ss_qdid is null
									and (@oldPartnerKey < 0 or isnull(ss_prkey, 0) in (isnull(@oldPartnerKey, 0), 0))
									and isnull(ss_isdeleted, 0) = 0
									and qd.QD_Type = (SS_AllotmentAndCommitment + 1)
									and qo_svkey = @svkey
									and qo_code = @code
									and (isnull(qo_subcode1, 0) in (0, @subcode1) or qo_subcode1 = 0))
			 -- нужно учитывать стопы общие и частные, даже если квот нету
			union
			select
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				0,
				isnull(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,isnull(SS_AllotmentAndCommitment, 0) + 1,0,0,1,
				qo_id as qt_qoid
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
			where ss_date = @dateFrom
					and ss_qdid is null
					and isnull(ss_isdeleted, 0) = 0
					and qo_svkey = @svkey
					and qo_code = @code
					and (isnull(qo_subcode1, 0) in (0, @subcode1) or qo_subcode1 = 0)
					and (@oldPartnerKey < 0 or isnull(ss_prkey, 0) in (isnull(@oldPartnerKey, 0), 0))
			union
			select
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				0,
				isnull(ss_prkey, 0) as qt_prkey,
				0,null,0,ss_date,null,isnull(SS_AllotmentAndCommitment, 0) + 1,0,0,1,
				qo_id as qt_qoid
			from StopSales
				inner join QuotaObjects on qo_id=ss_qoid
				inner join QuotaDetails on QD_ID=SS_QDID
			where ss_date = @dateFrom
					and ss_qdid is not null
					and isnull(ss_isdeleted, 0) = 0
					and qo_svkey = @svkey
					and qo_code = @code
					and isnull(qo_subcode1, 0) in (0, @subcode1)
					and (@oldPartnerKey < 0 or isnull(ss_prkey, 0) in (isnull(@oldPartnerKey, 0), 0))	
			order by
				qd_date, qt_stop desc, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
		end
		else
		begin
		--karimbaeva 20-04-2012 не было обаботки квот, если стоп ставиться плагином Stop-sale на авиаперелеты
			if not exists(select top 1 ch_key from charter with(nolock) inner join airseason with(nolock) on as_chkey = ch_key
				where ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo 
					and (AS_WEEK is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
					and @dateFrom between as_dateFrom and as_dateto)
				or exists(select 1 from dbo.stopavia with(nolock) 
						where sa_ctkeyfrom = @cityFrom and sa_ctkeyto = @cityTo
							and isnull(sa_stop, 0) > 0 
							and sa_dbeg = @dt1 and sa_dend = @dt2)
			begin
				insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
					qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
				values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
					return 
			end

			insert into @tmpQuotes
			select distinct
				qo_svkey,
				qo_code,
				isnull(qo_subcode1, 0) as qo_subcode1,
				isnull(qo_subcode2, 0) as qo_subcode2,
				isnull(qp_agentkey, 0) as qp_agentkey,
				isnull(qt_prkey, 0) as qt_prkey,
				isnull(qp_isnotcheckin, 0) as qp_isnotcheckin, 
				qd_release, 
				isnull(qp_places, 0) - isnull(qp_busy, 0),
				qd_date,
				qt_byroom,
				qd_type,
				isnull(ql_duration, 0) as ql_duration,
				isnull(qp_places, 0),
				(case when (isnull(ss_id, 0) > 0 and isnull(ss_isdeleted, 0) = 0) then 1 else 0 end) as qt_stop,
				qo_id as qt_qoid
			from quotas q with(nolock) inner join 
				quotadetails qd with(nolock) on qt_id = qd_qtid inner join quotaparts qp with(nolock) on qd_id = qp_qdid
				left outer join quotalimitations ql with(nolock) on qp_id = ql_qpid
				right outer join quotaobjects qo with(nolock) on qt_id = qo_qtid 
				left outer join StopSales ss with(nolock) on (qd_id = ss_qdid and isnull(ss_isdeleted, 0) = 0)
				inner join charter with(nolock) on (qo_svkey = @svkey and ch_key = qo_code) inner join airseason with(nolock) on as_chkey = ch_key
			where
				qo_svkey = @svkey
				--and isnull(QP_IsNotCheckin, 0) = 0
				and isnull(qo_subcode1, 0) in (0, @subcode1)
			--	and isnull(qo_subcode2, 0) in (0, @subcode2)
				and 
				(	(@agentKey != -666
						and ((@checkAgentQuotes > 0 and @checkCommonQuotes > 0 and isnull(qp_agentkey, 0) in (0, @agentKey)) or
						(@checkAgentQuotes <= 0 and isnull(qp_agentkey, 0) = 0) or
						(@checkAgentQuotes > 0 and @checkCommonQuotes <= 0 and isnull(qp_agentkey, 0) in (0, @agentKey)))
					)
					or (@agentKey = -666 and qp_agentkey>0)
				)
				and (@partnerKey < 0 or isnull(qt_prkey, 0) in (0, @partnerKey))
				and qd_date = @dateFrom
				and ch_citykeyfrom = @cityFrom and ch_citykeyto = @cityTo 
				and (AS_WEEK is null or len(as_week)=0 or as_week like ('%' + cast(@dayOfWeek as varchar) + '%'))
				and @dateFrom between as_dateFrom and as_dateto
				and (@tourDuration < 0 or (@checkNoLongQuotes <> @ALLDAYS_CHECK and isnull(ql_duration, 0) in (0, @long)) or (@checkNoLongQuotes = @ALLDAYS_CHECK and isnull(ql_duration, 0) = @long))
			order by
				qd_date, qp_agentkey DESC, qd_type DESC, QT_PrKey DESC, qp_isnotcheckin, ql_duration DESC, qo_subcode1 DESC, qo_subcode2 DESC
				
			update @tmpQuotes 
			set qt_stop = 1 
			from stopsales with(nolock) inner join quotaobjects qo with(nolock) on (ss_qoid = qo_id and ss_date = @dateFrom)
				where qt_svkey = qo.qo_svkey and qt_code = qo.qo_code 
					and (isnull(qt_subcode1, 0) in (0, qo.qo_subcode1) or qo.qo_subcode1 = 0)
					and isnull(qt_subcode2, 0) in (0, qo.qo_subcode2)					
					and ss_qdid is null and isnull(ss_isdeleted, 0) = 0

		end	
		
		-- пробуем удалить стопы по следующему принципу: если стоит стоп на один тип квоты, но на другом типе с квотами все в порядке
		if (exists(select top 1 1 from @tmpQuotes where qt_places > 0 and qt_stop = 0 and qt_type = 1) 
			and exists(select 1 from @tmpQuotes where qt_stop = 1 and qt_type = 2))
		begin
			delete from @tmpQuotes where qt_stop = 1 and qt_type = 2
		end
			
		if (exists(select top 1 1 from @tmpQuotes where qt_places > 0 and qt_stop = 0 and qt_type = 2) 
			and exists(select 1 from @tmpQuotes where qt_stop = 1 and qt_type = 1))
		begin
			delete from @tmpQuotes where qt_stop = 1 and qt_type = 1
		end	
			
		declare qCur cursor fast_forward read_only for 
		select
			qt_svkey,
			qt_code,
			qt_subcode1,
			qt_subcode2,
			qt_agent,
			qt_prkey,
			qt_bycheckin,
			qt_release,
			qt_places,
			qt_date,
			qt_byroom,
			qt_type,
			qt_long,
			qt_placesAll,
			qt_stop,
			qt_qoid
		from @tmpQuotes

		open qCur

		fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
			@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
			@qtLong, @qtPlacesAll, @qtStop, @qtQoId

		declare @prevCode int
		declare @wasAgent int
		declare @wasLong int		
		if(@@fetch_status = 0)
		begin
			set @result = 0
			set @stopSale = 1
			set @wasAgent = 0
			set @wasLong = 0
			while(@@fetch_status = 0)
			begin

				if(@qtStop > 0) -- stop sale
				begin
					close qCur
					deallocate qCur

					insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
						qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
					values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '0=0:0')
					return
				end

				if((@wasLong > 0 and @qtLong = 0 and (@result <> 0 or @checkNoLongQuotes <= 0)) or (@wasAgent > 0 and @qtAgent = 0 and (@result <> 0 or @checkCommonQuotes <= 0)))
					break

				if(isnull(@qtStop, 0) = 0)
					set @stopSale = 0
				else
					set @stopSale = 1

				if(@qtLong > 0)
					set @wasLong = 1

				if(@qtAgent > 0)
					set @wasAgent = 1

				if(@qtPlaces > 0 and @qtPlaces > @result and isnull(@qtStop, 0) = 0)
				begin
					if(@qtRelease is null or datediff(day, @currentDate, @qtDate) > isnull(@qtRelease, 0))
					begin
							if(@requestOnRelease <= 0 or @qtRelease is null or @qtRelease > 0)
							begin
								set @result = @qtPlaces

								set @svkeyRes = @qtSvkey
								set @codeRes = @qtCode
								set @subcode1Res = @qtSubcode1
								set @subcode2Res = @qtSubcode2
								set @agentRes = @qtAgent
								set @prkeyRes = @qtPrkey
								set @bycheckinRes = 0
								set @byroomRes = @qtByroom
								set @typeRes = @qtType
								set @longRes = @qtLong
								set @allPlacesRes = @qtPlacesAll
								set @releaseRes = @qtRelease
							end
							else if(@result = 0)
								set @result = -1;
					end
					else
					begin if(@result = 0)
						set @result = @expiredReleaseResult
					end
				end
	
				fetch next from qCur into @qtSvkey, @qtCode, @qtSubcode1, @qtSubcode2, @qtAgent,
					@qtPrkey, @qtNotcheckin, @qtRelease, @qtPlaces, @qtDate, @qtByroom, @qtType, 
					@qtLong, @qtPlacesAll, @qtStop, @qtQoId
	
			end		

			if(@result = 0)
			begin
				if(@stopSale <= 0)
					set @result = @noPlacesResult
				else
					set @result = 0
			end
		end
		else
			set @result = -1
	end

	close qCur
	deallocate qCur

	if(@checkNoLongQuotes <> @ALLDAYS_CHECK)
	begin
		if (@result > 0)
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
			values(@svkeyRes, @codeRes, @subcode1Res, @subcode2Res, @agentRes, 
				@prkeyRes, @bycheckinRes, @byroomRes, @result, @allPlacesRes, @typeRes, @longRes)
		else
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long)
			values(0, 0, 0, 0, 0, 0, 0, 0, @result, 0, 0, 0)
	end
	else
	begin
			set @additional = ltrim(str(@long)) + '=' + @additional
			insert into @tmpResQuotes(qt_svkey, qt_code, qt_subcode1, qt_subcode2, qt_agent,
				qt_prkey, qt_bycheckin, qt_byroom, qt_places, qt_allPlaces, qt_type, qt_long, qt_additional)
			values(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, @additional)
	end
	
	return
end
GO

GRANT SELECT ON [dbo].[mwCheckQuotesEx2] TO PUBLIC
GO

/*********************************************************************/
/* end fn_mwCheckQuotesEx2.sql */
/*********************************************************************/

/*********************************************************************/
/* begin fn_mwGetPriceTableName.sql */
/*********************************************************************/
if exists(select id from sysobjects where name='mwGetPriceTableName' and xtype='fn')
	drop function [dbo].[mwGetPriceTableName]
go

create function [dbo].[mwGetPriceTableName](@countryKey int, @cityFromKey int) 
returns varchar(30)
--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-03-27</DATE>
as
begin
	return 'mwPriceDataTable_' + ltrim(rtrim(cast(isnull(@countryKey, 0) as varchar))) + '_' + ltrim(rtrim(cast(isnull(@cityFromKey, 0) as varchar)))
end
go

grant exec on [dbo].[mwGetPriceTableName] to public
go
/*********************************************************************/
/* end fn_mwGetPriceTableName.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_ADD_IX_DELETED_QuotaDetails.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[QuotaDetails]') AND name = N'IX_DELETED')
begin
	CREATE NONCLUSTERED INDEX IX_DELETED
	ON [dbo].[QuotaDetails] ([QD_IsDeleted])
	INCLUDE ([QD_ID])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end INDEX_ADD_IX_DELETED_QuotaDetails.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_ADD_IX_DELETE_TP_PriceComponents.sql */
/*********************************************************************/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_PriceComponents]') AND name = N'IX_DELETE')
begin
	CREATE NONCLUSTERED INDEX [IX_DELETE]
	ON [dbo].[TP_PriceComponents] ([PC_TOKey])
	INCLUDE ([PC_Id],[SCPId_1],[SCPId_2],[SCPId_3],[SCPId_4],[SCPId_5],[SCPId_10],[SCPId_11],[SCPId_12],[SCPId_13],[SCPId_14],[SCPId_15])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO

/*********************************************************************/
/* end INDEX_ADD_IX_DELETE_TP_PriceComponents.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_ADD_PriceServiceLink_IX_HOTEL_FIND.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PriceServiceLink]') AND name = N'IX_HOTEL_FIND')
	DROP INDEX [IX_HOTEL_FIND] ON [dbo].[PriceServiceLink] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[PriceServiceLink]') AND name = N'IX_HOTEL_FIND')
begin
	CREATE NONCLUSTERED INDEX [IX_HOTEL_FIND]
	ON [dbo].[PriceServiceLink] ([PS_HDKEY])
	INCLUDE ([PS_Key],[PS_HRKEY],[PS_ORKey],[PS_RPSVKEY],[PS_RPCODE],[PS_RPSUBCODE1],[PS_RPSUBCODE2],[PS_RPPRKEY],[PS_RPPKKEY])
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end INDEX_ADD_PriceServiceLink_IX_HOTEL_FIND.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_ADD_x_mwFill_Prices.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TP_Prices]') AND name = N'x_mwfill')
DROP INDEX [x_mwfill] ON [dbo].[TP_Prices] WITH ( ONLINE = OFF )
GO
		
CREATE NONCLUSTERED INDEX [x_mwfill] ON [dbo].[TP_Prices] 
(
	[TP_TOKey] ASC,
	[TP_TIKey] ASC,
	[TP_DateBegin] ASC,
	[TP_DateEnd] ASC
)
INCLUDE(TP_Gross)
WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
GO
/*********************************************************************/
/* end INDEX_ADD_x_mwFill_Prices.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_RECREATE_ServiceByDate_X_SD_Object_4.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ServiceByDate]') AND name = N'X_SD_Object_4')
	DROP INDEX [X_SD_Object_4] ON [dbo].[ServiceByDate] WITH ( ONLINE = OFF )
GO

IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[ServiceByDate]') AND name = N'X_SD_Object_4')
begin
	CREATE NONCLUSTERED INDEX [X_SD_Object_4] ON [dbo].[ServiceByDate] 
	(
		[SD_QPID] ASC
	)
	INCLUDE(SD_DLKey, SD_RLID)
	WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end INDEX_RECREATE_ServiceByDate_X_SD_Object_4.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_RECREATE_X_DOGOVORLISTSVKEY.sql */
/*********************************************************************/
/****** Object:  Index [X_DOGOVORLISTSVKEY]    Script Date: 04/19/2013 16:14:40 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbl_DogovorList]') AND name = N'X_DOGOVORLISTSVKEY')
DROP INDEX [X_DOGOVORLISTSVKEY] ON [dbo].[tbl_DogovorList] WITH ( ONLINE = OFF )
GO

/****** Object:  Index [X_DOGOVORLISTSVKEY]    Script Date: 04/19/2013 16:15:23 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[tbl_DogovorList]') AND name = N'X_DOGOVORLISTSVKEY')
begin
CREATE NONCLUSTERED INDEX [X_DOGOVORLISTSVKEY] ON [dbo].[tbl_DogovorList] 
(
	[DL_SVKEY] ASC
)
INCLUDE ( [DL_KEY],
[DL_CONTROL]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO

/*********************************************************************/
/* end INDEX_RECREATE_X_DOGOVORLISTSVKEY.sql */
/*********************************************************************/

/*********************************************************************/
/* begin INDEX_RECREATE_X_TURISTSERVICET.sql */
/*********************************************************************/
/****** Object:  Index [X_TURISTSERVICET]    Script Date: 04/19/2013 16:08:02 ******/
IF  EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TuristService]') AND name = N'X_TURISTSERVICET')
DROP INDEX [X_TURISTSERVICET] ON [dbo].[TuristService] WITH ( ONLINE = OFF )
GO

/****** Object:  Index [X_TURISTSERVICET]    Script Date: 04/19/2013 16:11:39 ******/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[TuristService]') AND name = N'X_TURISTSERVICET')
begin
CREATE NONCLUSTERED INDEX [X_TURISTSERVICET] ON [dbo].[TuristService] 
(
	[TU_TUKEY] ASC
)
INCLUDE ( [TU_DLKEY]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 70) ON [PRIMARY]
end
GO
/*********************************************************************/
/* end INDEX_RECREATE_X_TURISTSERVICET.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_AutoQuotesPlaces.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[AutoQuotesPlaces]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[AutoQuotesPlaces]
GO

CREATE PROCEDURE [dbo].[AutoQuotesPlaces]
	(
		--<VERSION>2009.2.4</VERSION>
		--<DATA>28.04.2013</DATA>
		@pSv_key int
		,@pCode int						-- sv_code из QuotaObject
		,@pSub_code1 int				-- описание 1 из QuotaObject
		,@pSub_code2 int				-- описание 2 из QuotaObject
		,@datestart smalldatetime
		,@dateend smalldatetime
	)
as
begin

	Declare @TUKEY INT, @dlkey int, @DGKey int, @DLSVKey int, @DLCode int, @DLSubcode1 int, @DLDateBeg datetime, @DLDateEnd datetime, @DLNMen int, @QuoteKey int, @QuoteType smallint, @TempType smallint, @HRMain smallint
	Declare @qddate datetime ,@qtkey  int ,@from int 
	declare @Date datetime, @RLID int, @NewSetToQuota bit 
	declare @HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int
	Declare	@NeedPlacesForMen int,@rpid int ,
			@RMPlacesMain smallint, @RMPlacesEx smallint,
			@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
			@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
			@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
			@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint	
	
	-- таблица с оттобранными услугами которые будем пересаживать		
	declare @dlKeyList table
	(
		dlKey int
	)
	
	-- для перелета
	if (@pSv_key = 1)
	begin
		insert into @dlKeyList (dlKey)
		select DL_Key
		from Dogovorlist
		where dl_svkey = 1
		and dl_code = @pCode
		and ((@pSub_code1 = 0) or (dl_subcode1 = @pSub_code1))
		and isnull((select max(SD_State) from ServiceByDate where SD_DLKey = DL_Key), 4) = 4
		and ((@datestart between DL_DateBeg and DL_DATEEND)  or (DL_DATEBEG between @datestart and @dateend))
	end
	-- для проживания
	else if (@pSv_key = 3)
	begin
		insert into @dlKeyList (dlKey)
		select DL_Key
		from Dogovorlist join HotelRooms on DL_SUBCODE1 = HR_KEY
		where dl_svkey = 3
		and dl_code = @pCode
		and ((@pSub_code1 = 0) or (HR_RMKEY = @pSub_code1))
		and ((@pSub_code2 = 0) or (HR_RCKEY = @pSub_code2))
		and (select COALESCE(min(SD_State), 4) from ServiceByDate where SD_DLKey = DL_Key) = 4
		and ((@datestart between DL_DateBeg and DL_DATEEND)  or (DL_DATEBEG between @datestart and @dateend))
	end	
	-- для остальных услуг
	else
	begin
		if (exists (select 1 from [Service] where SV_KEY = @pSv_key and isnull(SV_QUOTED, 0) = 1))
		begin
			insert into @dlKeyList (dlKey)
			select DL_Key
			from Dogovorlist
			where dl_code = @pCode
			and ((@pSub_code1 = 0) or (DL_SUBCODE1 = @pSub_code1))
			and ((@pSub_code2 = 0) or (DL_SUBCODE2 = @pSub_code2))
			and (select COALESCE(min(SD_State), 4) from ServiceByDate where SD_DLKey = DL_Key) = 4
			and ((@datestart between DL_DateBeg and DL_DATEEND)  or (DL_DATEBEG between @datestart and @dateend))
		end
	end	
	
	if exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota' and SS_ParmValue = 1)
		set @NewSetToQuota = 1
	
	DECLARE cur_DogovorListAutoQuotesPlaces CURSOR FOR
		SELECT 	DL_Key,DL_SvKey, DL_Code, DL_SubCode1, DL_DateBeg, DL_DateEnd, DL_NMen, DL_QuoteKey
		FROM	Dogovorlist join @dlKeyList on dl_key = dlKey
		
	OPEN cur_DogovorListAutoQuotesPlaces
	FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey
	WHILE @@FETCH_STATUS = 0
	BEGIN
		if (@NewSetToQuota = 1)
		begin
			SET XACT_ABORT OFF
			
			begin try
			--в этой хранимке будет выполнена попытка постановки услуги на квоту
				EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,null, @OldSetToQuota = 0
			end try
			begin catch			
				print 'Произошла ошибка при посадке новым методом, запускаем старый метод'
			end catch
		end
		else 
			EXEC DogListToQuotas @DLKey,null,null,null,null,@DLDateBeg, @DLDateEnd,null,null, @OldSetToQuota = 1
				
		FETCH NEXT FROM cur_DogovorListAutoQuotesPlaces
		INTO @DLKey, @DLSVKey, @DLCode, @DLSubCode1, @DLDateBeg, @DLDateEnd, @DLNMen, @QuoteKey
	
	ENd
	CLOSE cur_DogovorListAutoQuotesPlaces
	DEALLOCATE   cur_DogovorListAutoQuotesPlaces

end

GO

grant exec on [dbo].[AutoQuotesPlaces] to public
go
/*********************************************************************/
/* end sp_AutoQuotesPlaces.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CalculatePriceList.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[CalculatePriceList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[CalculatePriceList]
GO
CREATE PROCEDURE [dbo].[CalculatePriceList]
  (
	@nPriceTourKey int,			-- ключ обсчитываемого тура
	@nCalculatingKey int,		-- ключ итерации дозаписи
	@dtSaleDate datetime,		-- дата продажи
	@nNullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@nUseHolidayRule smallint		-- Правило выходного дня: 0 - не использовать, 1 - использовать
  )
AS
--<DATE>2013-01-11</DATE>
---<VERSION>9.2.18.1</VERSION>

--проверяем настройку со страной, если совпала - запускаем новый CalculatePriceList
declare @toCnKey varchar(30), @setting varchar(260),@newpricesetting varchar 

select @toCnKey = rtrim(ltrim(str(to_cnkey))) from tp_tours where to_key = @nPriceTourKey

select @setting = rtrim(ltrim(ss_parmvalue)) from systemsettings where ss_parmname = 'MTDynamicCountries'

select @newpricesetting = SS_ParmValue from systemsettings where ss_parmname = 'NewReCalculatePrice'

if isnull(@newpricesetting,'') = '1'
begin
	if (IsNull(@setting, '') = '' OR exists (select top 1 1 from dbo.ParseKeys(@setting) where xt_key = convert(int, @toCnKey)))
	begin
		exec [dbo].[CalculatePriceListDynamic] @nPriceTourKey,@nCalculatingKey,@dtSaleDate,@nNullCostAsZero,@nNoFlight,@nUpdate,@nUseHolidayRule
		return
	end 
end

declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @nettoDetail nvarchar(max)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------
declare @ROUND_NOTWITHDISC int
declare @ROUND_SERVICE_MATH int
declare @ROUND_SERVICE0_5 int
declare @ROUND_PRICE0_5 int
declare @ROUND_SERVICE int
declare @ROUND_PRICE int
declare @ROUND_NOT int

Set @ROUND_NOTWITHDISC = 64
Set @ROUND_SERVICE_MATH = 32
Set @ROUND_SERVICE0_5 = 16
Set @ROUND_PRICE0_5 = 8
Set @ROUND_SERVICE = 4
Set @ROUND_PRICE = 2
Set @ROUND_NOT = 1
---------------------------------------------
declare @nIsEnabled smallint
select @nIsEnabled = TO_IsEnabled from TP_Tours where TO_Key = @nPriceTourKey
---------------------------------------------
declare @tpPricesCount int
declare @isPriceListPluginRecalculation smallint
select @tpPricesCount = count(1) from tp_prices with(nolock) where tp_tokey = @nPriceTourKey

Set @nTotalProgress=1
	update tp_tours with(rowlock) set to_progress = @nTotalProgress, TO_UPDATETIME = GetDate() where to_key = @nPriceTourKey

--осуществляется пересчет прайса планировщиком
if (@tpPricesCount > 0 and @nUpdate = 0)
begin
	set @isPriceListPluginRecalculation = 1
	set @nCalculatingKey = null
	
	select top 1 @nCalculatingKey = CP_Key from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey and CP_Update = 0
	update tp_turdates set td_update = 0 where td_tokey = @nPriceTourKey
	update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
	
	set @nUpdate = 0
end
else
	set @isPriceListPluginRecalculation = 0

--if (@nCalculatingKey is null)
--begin
--	select top 1 @nCalculatingKey = CP_Key from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey and CP_Update = 0
--	update tp_turdates set td_update = 0 where td_tokey = @nPriceTourKey
--	update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
--end

declare @nSign tinyint

create table #GetServiceCost(
	tid int identity primary key,
	svkey int,
	code int,
	subcode1 int,
	subcode2 int,
	prkey int,
	pkkey int,
	date datetime,
	days int,
	rate varchar(3),
	nmen int,
	margin money,
	marginType int,
	saleDate datetime,
	netto money,
	brutto money,
	discount money,
	details varchar(100),
	badrate varchar(3),
	baddate datetime,
	details2 varchar(100),
	spid int,
	row_sign tinyint
)

create index x_getservicecost on #GetServiceCost(svkey, code, subcode1, subcode2, prkey, pkkey, date, days)

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

BEGIN
	set nocount on

	--koshelev
	--MEG00027550
	if @nUpdate = 0
		update tp_tours with(rowlock) set to_datecreated = GetDate() where to_key = @nPriceTourKey

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours with(nolock) where to_key = @nPriceTourKey

	delete from CalculatingPriceLists with(rowlock) where CP_PriceTourKey not in (select to_key from tp_tours with(nolock))

	if not exists (select 1 from CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey) and @nPriceTourKey is not null
	begin	
		insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_TourKey, CP_UserKey, CP_Status, CP_UseHolidayRule)
		values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @TrKey, @userKey, 1, @nUseHolidayRule)
	end
	else if @nPriceTourKey is not null
	begin
		update CalculatingPriceLists with(rowlock) set CP_Status = 1 where CP_Key = @nCalculatingKey
	end

	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours with(nolock) where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nUseHolidayRule = 0
		SET @sHI_Text = 'NO'
	ELSE
		SET @sHI_Text = 'YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11008, null, @sHI_Text, null, @nUpdate, null, null, 0

	--Засекаем время начала рассчета begin
	declare @beginPriceCalculate datetime
	set @beginPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@beginPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11009, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время начала рассчета end
	
	-- koshelev 15.02.2011
	-- для подбора перелетов
	if exists(select 1 from tp_lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_TotalDays is null)
	begin
		select TI_Key as xTI_Key, TI_TOKey as xTI_TOKey, TI_CalculatingKey as xTI_CalculatingKey, ti_totaldays as xti_totaldays
		into #tmp
		from tp_lists with(nolock)
		where TI_TOKey = @nPriceTourKey 
		and TI_TotalDays is null
		
		update #tmp with(rowlock)
		set
			xti_totaldays = (select max(case ts_svkey 
							when 3 
							then ts_day + ts_days 
							else (case ts_days 
								when 0 
								then 1 
								else ts_days 
      								  end) + ts_day - 1 
 							   end)
					from dbo.tp_services with (nolock)
						inner join dbo.tp_servicelists with (nolock) on (tl_tskey = ts_key and TS_TOKey = @nPriceTourKey and TL_TOKey = @nPriceTourKey)
					where tl_tikey = xti_key)
		
		update TP_Lists
		set ti_totaldays = xti_totaldays
		from #tmp
		where xTI_Key = TI_Key
	end

	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_CalculatingKey, TF_TourDate)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey,
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, ti_totaldays, @nCalculatingKey, TD_Date
			From TP_Services with(nolock), TP_TurDates with(nolock), TP_Tours with(nolock), TP_Lists with(nolock), TP_ServiceLists with(nolock)
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TI_TOKey = TO_Key and TL_TOKey = TO_Key and TL_TSKey = TS_Key and TL_TIKey = TI_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		select distinct TO_Key, TD_Date + TS_Day - 1 flight_day, TS_Code , TS_OpPartnerKey,	TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, ti_totaldays, TD_Date
		into #tp_flights
		from TP_Tours with(nolock) join TP_Services with(nolock) on TO_Key = TS_TOKey and TS_SVKey = 1
			join TP_ServiceLists with(nolock) on TL_TSKey = TS_Key and TS_TOKey = TO_Key
			join TP_Lists with(nolock) on TL_TIKey = TI_Key and TI_TOKey = TO_Key
			join TP_TurDates with(nolock) on TD_TOKey = TO_Key
		where TO_Key = @nPriceTourKey
		
		delete from #tp_flights where exists (Select 1 From TP_Flights with(nolock) Where TF_TOKey=@nPriceTourKey and TF_Date=flight_day
			and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
			and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2 and TF_Days = ti_totaldays)
	
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_TourDate, TF_CalculatingKey)
		select *, @nCalculatingKey  from #tp_flights
	END

--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	--Update	TP_Flights with(rowlock) Set 	TF_CodeNew = TF_CodeOld,
	--			TF_PRKeyNew = TF_PRKeyOld
	--Where	(SELECT count(*) FROM AirSeason  with(nolock) WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') > 0 
	--	and TF_TOKey = @nPriceTourKey	
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld, TF_PRKeyNew = TF_PRKeyOld, TF_SubCode1New = TF_SubCode1, TF_CalculatingKey = @nCalculatingKey
	Where	exists (SELECT 1 FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%')
			and exists (select 1 from Costs where CS_Code = TF_CodeOld and CS_SVKey = 1 and CS_SubCode1 = TF_Subcode1 and CS_PRKey = TF_PRKeyOld and CS_PKKey = TF_PKKey 
			and TF_Date BETWEEN ISNULL(CS_Date, '1900-01-01') AND ISNULL(CS_DateEnd, '2053-01-01') 
			and TF_TourDate BETWEEN ISNULL(CS_CHECKINDATEBEG, '1900-01-01') AND ISNULL(CS_CHECKINDATEEND, '2053-01-01')
			and (ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') 
			and (CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long))
			and TF_TOKey = @nPriceTourKey

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----
		IF exists(SELECT TF_ID FROM TP_Flights with(nolock) WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null)
		begin
			print 'Подбираем перелет'
			
			declare @newFlightsPartnerTable table
			(
				-- идентификатор
				xId int identity(1,1),
				-- ключ услуги перелет
				xTFId int,
				-- ключ исходного партнера
				xPRKey int,
				-- ключ партнера которого подобрали
				xPRKeyNew int,
				-- ключ перелета
				xCHKey int,
				-- ключ тарифа на перелет
				xASKey int
			)
			-- подбираем подходящие нам перелеты
			insert into @newFlightsPartnerTable (xTFId, xCHKey, xASKey, xPRKey, xPRKeyNew)
			SELECT TF_Id, CH_Key, CS_SubCode1, TF_PRKeyOld, CS_PRKey
			FROM AirSeason with(nolock), Charter with(nolock), Costs with(nolock), TP_Flights with(nolock)
			WHERE CH_CityKeyFrom = TF_Subcode2 and
			CH_CityKeyTo = TF_CTKey and
			CS_Code = CH_Key and
			AS_CHKey = CH_Key and
			CS_SVKey = 1 and
			(	isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = CS_SubCode1), '')
				= 
				isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = TF_Subcode1), '')
			) and
			CS_PKKey = TF_PKKey and
			TF_Date BETWEEN AS_DateFrom and AS_DateTo and
			TF_Date BETWEEN CS_Date and CS_DateEnd and
			AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%' and
			(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') and
			(CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) and
			TF_CodeNew is Null and 
			TF_TOKey = @nPriceTourKey
			group by TF_Id, CH_Key, CS_SubCode1, TF_PRKeyOld, CS_PRKey
			
			-- удаляем повторяющиеся (если подобралось несколько перелетов)
			delete @newFlightsPartnerTable
			from @newFlightsPartnerTable as a
			where a.xId != (select top 1 b.xId 
							from @newFlightsPartnerTable as b 
							where b.xTFId = a.xTFId
							-- и приорететнее те перелеты в которых партнеры совпадают с исходным
							order by case when b.xPRKey = b.xPRKeyNew then 0 else 1 end)
			
			-- обновляем информацию о найденом перелете
			update TP_Flights with(rowlock)
			set TF_CodeNew = xCHKey,
			TF_SubCode1New = xASKey,
			TF_PRKeyNew = xPRKeyNew,
			TF_CalculatingKey = @nCalculatingKey
			from TP_Flights with(rowlock) join @newFlightsPartnerTable on TF_Id = xTFId
			
			print 'Закончили подбор перелетов'
		end
	END
	-----если перелет так и не найден, то в поле TF_CodeNew будет NULL

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------
	--if ISNULL((select to_update from [dbo].tp_tours with(nolock) where to_key = @nPriceTourKey),0) <> 1
	if (1 = 1)
	BEGIN

		update [dbo].tp_tours with(rowlock) set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices
		(
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			[xTP_Gross] [money] NULL ,
			[xTP_TIKey] [int] NOT NULL,
			[xTP_CalculatingKey] [int] NULL
		)

		CREATE NONCLUSTERED INDEX [x_fields] ON [#TP_Prices] 
		(
			[xTP_TOKey] ASC,
			[xTP_TIKey] ASC,
			[xTP_DateBegin] ASC,
			[xTP_DateEnd] ASC
		)

		DELETE FROM #TP_Prices
		--INSERT INTO #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey) select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey from tp_prices where tp_tokey = @nPriceTourKey
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		

		---------------------------------------разбиваем данные в таблицах tp_prices по датам
		if (select COUNT(TP_Key) from TP_Prices with(nolock) where TP_DateBegin != TP_DateEnd and TP_TOKey = @nPriceTourKey) > 0
		begin
			select @numDates = COUNT(1) from TP_TurDates with(nolock), TP_Lists with(nolock), TP_Prices with(nolock) where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			exec GetNKeys 'TP_PRICES', @numDates, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @numDates + 1
		
			declare datesCursor cursor local fast_forward for
			select TD_Date, TI_Key, TP_Gross from TP_TurDates with(nolock), TP_Lists with(nolock), TP_Prices with(nolock) where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			
			open datesCursor
			fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			while @@FETCH_STATUS = 0
			begin
				insert into #TP_Prices (xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd, xTP_CalculatingKey) 
				values (@nTP_PriceKeyCurrent, @nPriceTourKey, @priceListKey, @priceListGross, @priceDate, @priceDate, @nCalculatingKey)
				set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
				fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			end
			
			close datesCursor
			deallocate datesCursor
			
			begin tran tEnd
				delete from TP_Prices with(rowlock) where TP_TOKey = @nPriceTourKey
				
				insert into TP_Prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd, TP_CalculatingKey)
				select xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd, @nCalculatingKey
				from #TP_Prices  
				where xTP_DateBegin = xTP_DateEnd
				
				delete from #TP_Prices
			commit tran tEnd
		end
		--------------------------------------------------------------------------------------
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours with(nolock) where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано
		Set @NumCalculated = (SELECT COUNT(1) FROM tp_prices with(nolock) where tp_tokey = @nPriceTourKey)
		--считаем сколько записей надо посчитать
		set @NumPrices = ((select count(1) from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * (select count(1) from tp_turdates with(nolock) where td_tokey = @nPriceTourKey and td_update = @nUpdate))

		if (@NumCalculated + @NumPrices) = 0
			set @NumPrices = 1

		--Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		set @nTotalProgress = @nTotalProgress + CAST(@NumCalculated as money) / CAST((@NumCalculated + @NumPrices) as money)
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services with(rowlock) set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates with(rowlock) set td_checkmargin = 1 where
			exists(select 1 from TurMargin with(nolock) WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN

--		update TP_Services set ts_tempgross = null where ts_tokey = @nPriceTourKey
		declare serviceCursor cursor local fast_forward for
			select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, to_rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_totaldays, ts_ctkey, ts_attribute
			from tp_tours with(nolock), tp_services with(nolock), tp_lists with(nolock), tp_servicelists with(nolock), tp_turdates with(nolock)
			where to_key = @nPriceTourKey and to_key = ts_tokey and to_key = ti_tokey and to_key = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and to_key = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate and (@nUseHolidayRule = 0 or (case cast(datepart(weekday, td_date) as int) when 7 then 0 else cast(datepart(weekday, td_date) as int) end + ti_days) >= 8)
			order by ti_firsthdkey, td_date, ti_key

		open serviceCursor
		SELECT @round = ST_RoundService FROM Setting
		--MEG00036108 увеличил значение
		set @nProgressSkipLimit = 10000

		set @nProgressSkipCounter = 0
		--Set @nTotalProgress = @nTotalProgress + 1
		--update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		delete from #TP_Prices

		declare @calcPricesCount int, @calcPriceListCount int, @calcTurDates int
		select @calcPriceListCount = COUNT(1) from TP_Lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_UPDATE = @nUpdate
		select @calcTurDates = COUNT(1) from TP_TurDates with(nolock) where TD_TOKey = @nPriceTourKey and TD_UPDATE = @nUpdate
		select @calcPricesCount = @calcPriceListCount * @calcTurDates

		insert into #TP_Prices (xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey, xTP_CalculatingKey) 
		select tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey, TP_CalculatingKey
		from tp_prices with(nolock)
		where tp_tokey = @nPriceTourKey and 
			tp_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tp_datebegin in (select td_date from tp_turdates with(nolock) where td_tokey = @nPriceTourKey and td_update = @nUpdate)
		

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		set @fetchStatus = @@fetch_status
		While (@fetchStatus = 0)
		BEGIN
		
			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу #TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN
				--записываем данные в таблицу #TP_Prices
				if @nPrevVariant <> -1
				begin
					if @price_brutto is not null
					BEGIN
						exec RoundPriceList @round, @price_brutto output

						if exists(select 1 from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
						begin
							--select @nCalculatingKey
							if (@isPriceListPluginRecalculation = 0)
								update #TP_Prices set xtp_gross = @price_brutto, xtp_calculatingkey = @nCalculatingKey, xtp_key = @nTP_PriceKeyCurrent where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							else
								update #TP_Prices set xtp_gross = @price_brutto, xtp_key = @nTP_PriceKeyCurrent where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
						end
						else if (@isPriceListPluginRecalculation = 0)
						begin
							--select @nCalculatingKey
							
							insert into #TP_Prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_gross, xtp_tikey, xTP_CalculatingKey) 
							values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @price_brutto, @nPrevVariant, @nCalculatingKey)
							
							set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
						end
					END
					ELSE
					BEGIN
						delete from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant
					END
				end
			
				--очищаем данные
				if @@fetch_status = 0
				begin
					if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
					BEGIN
						exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
						set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
					END
					
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				set @prevHdKey = @hdKey
			end
			
			if @@fetch_status <> 0
				break
						
			---------------------------------------------------------------------------------

				if @tsCheckMargin = 1 and @tdCheckMargin = 1
					exec GetTourMargin @TrKey, @turdate, @nMargin output, @nMarginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
				else
				BEGIN
					set @nMargin = 0
					set @nMarginType = 0
				END
				set @servicedate = @turdate + @nDay - 1
				if @nSvkey = 1
					set @nDays = @TI_DAYS

				-- kurskih 2006/10/11
				-- добавил проверку признака нерассчитываемой услуги
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				BEGIN
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
				END
				else
				BEGIN

					if @nSvkey = 1
					BEGIN
						SELECT 	@nCode = TF_CodeNew,
								@nPrkey = TF_PRKeyNew,
								@nSubcode1 = TF_SubCode1New
						FROM	TP_Flights with(nolock)
						WHERE	TF_TOKey = @nPriceTourKey AND
								TF_CodeOld = @nCode AND
								TF_PRKeyOld = @nPrkey AND
								TF_Date = @servicedate AND
								TF_Days = @TI_DAYS AND
								TF_Subcode1 = @nSubcode1
					END	
					Set @nSPId = null		
					Set @nBrutto = null	
					if @nCode is not null
					begin
						set @nSign = null

						select
							@nNetto = netto,						
							@nBrutto = brutto,
							@nDiscount = discount,
							@sDetailed = details,
							@sBadRate = badRate,
							@dtBadDate = badDate,
							@sDetailed = details2,
							@nSPId = spid,
							@nSign = row_sign
						from
							#GetServiceCost
						where
							svkey = @nSvkey
							and code = @nCode
							and subcode1 = @nSubcode1
							and subcode2 = @nSubcode2
							and prkey = @nPrkey
							and pkkey = @nPacketkey
							and date = @servicedate
							and days = @nDays
							and rate = @sRate
							and nmen = @nMen
							and margin = @nMargin
							and marginType = @nMarginType
							and saleDate = @dtSaleDate

						if(@nSign is null) -- cost not found
						begin
							exec GetServiceCost @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays,
							@sRate, @nMen, 0, @nMargin, @nMarginType,
							@dtSaleDate, @nNetto output, @nBrutto output, @nDiscount output,
							@nettoDetail output, @sBadRate output, @dtBadDate output,
							@sDetailed output, @nSPId output, 0, @TrKey, @turdate, @TI_DAYS, 1
							
							if @nMen > 1 and @nPriceFor = 0
								set @nBrutto = @nBrutto / @nMen
							if @nBrutto is not null and (@round = @ROUND_SERVICE or @round = @ROUND_SERVICE0_5 or @round = @ROUND_SERVICE_MATH)
								exec RoundPriceList @round, @nBrutto output

							insert into #GetServiceCost(
								svkey,
								code,
								subcode1,
								subcode2,
								prkey,
								pkkey,
								date,
								days,
								rate,
								nmen,
								margin,
								marginType,
								saleDate,
								netto,
								brutto,
								discount,
								details,
								badrate,
								baddate,
								details2,
								spid,
								row_sign)
							values(
								@nSvkey,
								@nCode,
								@nSubcode1,
								@nSubcode2,
								@nPrkey,
								@nPacketkey,
								@servicedate,
								@nDays,
								@sRate,
								@nMen,
								@nMargin,
								@nMarginType,
								@dtSaleDate,
								@nNetto,
								@nBrutto,
								@nDiscount,
								@sDetailed,
								@sBadRate,
								@dtBadDate,
								@sDetailed,
								@nSPId,
								1)
						end
					end
					else
						set @nBrutto = null

					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
						set @nBrutto = 0
					if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
						set @nBrutto = 0	
		
				END

			set @price_brutto = @price_brutto + @nBrutto
			---------------------------------------------------------------------------------

			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE
		END
		close serviceCursor
		deallocate serviceCursor

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 97
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		
		--удаление из веба
		if (@nIsEnabled = 1)
		begin
			if (@isPriceListPluginRecalculation = 0)
				EXEC ClearMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
			else	
				EXEC ClearMasterWebSearchFields @nPriceTourKey, null
		end

		delete from tp_prices with(rowlock)
		where tp_tokey = @nPriceTourKey and 
			tp_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tp_DateBegin in (select td_date from TP_TurDates with(nolock) where td_tokey = @nPriceTourKey and TD_Update = @nUpdate)
			
		INSERT INTO TP_Prices with(rowlock) (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey, TP_CalculatingKey) 
			select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, xTP_Gross, xTP_TIKey, xTP_CalculatingKey 
			from #TP_Prices 

		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------

		update tp_lists with(rowlock) set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates with(rowlock) set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices with(nolock) Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services with(rowlock) set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey

	END

	update CalculatingPriceLists with(rowlock) set CP_Status = 0, CP_CreateDate = GetDate(), CP_StartTime = null where CP_PriceTourKey = @nPriceTourKey
	------------------------------------		

	--Заполнение полей в таблице tp_lists
	declare @toKey int, @add int
	set @toKey = @nPriceTourKey
	set @add = @nUpdate

		update tp_lists with(rowlock)
			set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
				ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
				ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
				ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
				ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key),
				ti_nights = dbo.mwGetTiNights(ti_key)
		where
			ti_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey
		
		update tp_lists with(rowlock)
		set
			ti_hdpartnerkey = ts_oppartnerkey,
			ti_firsthotelpartnerkey = ts_oppartnerkey,
			ti_hdday = ts_day,
			ti_hdnights = ts_days
		from tp_servicelists with (nolock)
			inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
		where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
			and ts_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey
		------------------------------------------------------------------------------

	Set @nTotalProgress = 100
	update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst

	set nocount off

	--Засекаем время окончания рассчета begin
	declare @endPriceCalculate datetime
	set @endPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@endPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11010, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время окончания рассчета end

	--Записываем кол-во рассчитанных цен begin
	SET @sHI_Text = CONVERT(varchar(10),@calcPricesCount)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11011, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем кол-во рассчитанных цен end

	--Записываем скорость расчета цен begin
	declare @calculatingSpeed decimal(10,2), @seconds int
	set @seconds = datediff(ss,@beginPriceCalculate,@endPriceCalculate)
	if @seconds = 0
		set @seconds = 1
	set @calculatingSpeed = @calcPricesCount / @seconds
	SET @sHI_Text = CONVERT(varchar(10),@calculatingSpeed)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11012, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем скорость расчета цен end
	
	if (@nIsEnabled = 1)
	begin
		if (@isPriceListPluginRecalculation = 0)
			EXEC FillMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
		else
			EXEC FillMasterWebSearchFields @nPriceTourKey, null
	end

	Return 0
END
GO

SET QUOTED_IDENTIFIER OFF
GO
SET ANSI_NULLS ON 
GO

GRANT EXEC ON [dbo].[CalculatePriceList] TO PUBLIC
GO

/*********************************************************************/
/* end sp_CalculatePriceList.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CalculatePriceListDynamic.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CalculatePriceListDynamic]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CalculatePriceListDynamic]
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[CalculatePriceListDynamic]
(
	--<data>2013-03-18</data>
	--<version>2009.02.19</version>
	@nPriceTourKey int,				-- ключ обсчитываемого тура
	@nCalculatingKey int,			-- ключ итерации дозаписи
	@dtSaleDate datetime,			-- дата продажи
	@nNullCostAsZero smallint,		-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@nNoFlight smallint,			-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@nUpdate smallint,				-- признак дозаписи 0 - расчет, 1 - дозапись
	@nUseHolidayRule smallint		-- Правило выходного дня: 0 - не использовать, 1 - использовать
)
AS

SET ARITHABORT off;
set nocount on;
declare @beginTime datetime
set @beginTime = getDate()

declare @variant int
declare @pricetour int
declare @turdate datetime
declare @servicedate datetime
declare @price_brutto money
declare @TrKey int
declare @userKey int
--
declare @nServiceKey int
declare @nSvkey int
declare @nCode int
declare @nSubcode1 int
declare @nSubcode2 int
declare @nPrkey int
declare @nPacketkey int
declare @nDay int
declare @nDays int
declare @sRate varchar(3)
declare @nMen int
declare @nMargin money
declare @nMarginType int
declare @nNetto money
declare @nBrutto money
declare @nDiscount money
declare @nTempGross money
declare @tsCheckMargin smallint
declare @tdCheckMargin smallint
declare @TI_DAYS int
declare @TS_CTKEY int
declare @TS_ATTRIBUTE int
--
declare @SERV_NOTCALCULATE int
--
declare @dtPrevDate datetime
declare @nPrevVariant int
declare @nPrevGross money
declare @nPrevGrossKey int
declare @nPrevGrossDate datetime
declare @nPriceFor smallint
declare @nTP_PriceKeyCurrent int
declare @nTP_PriceKeyMax int
declare @NumPrices int, @NumCalculated int
--
declare @fetchStatus smallint
--declare @nCount int
declare @nDeltaProgress money
declare @nTotalProgress money
declare @round smallint
--
declare @hdKey int
declare @prevHdKey int
--
declare @nProgressSkipLimit smallint
declare @nProgressSkipCounter smallint
declare @weekday varchar(3)
declare @nDateFirst smallint
declare @nFlightEnabled smallint
declare @nCH_Key int
declare @CS_PRKEY int
declare @dDateBeg1 datetime -- дата начала 1го периода
declare @dDateBeg3 datetime -- дата начала 2,3го периода
declare @dDateEnd1 datetime -- дата окончания 1го периода
declare @dDateEnd3 datetime -- дата окончания 2,3го периода
--
declare @sDetailed varchar(100) -- не используется, необходима только для передачи в качестве параметра в GSC
declare @sBadRate varchar(3)
declare @dtBadDate DateTime
--
declare @nSPId int -- возвращается из GSC, фактически это ключ из ServicePrices
declare @nPDId int 
declare @nBruttoWithCommission money

--переменные для разбиения сгруппированных цен
declare @priceDate datetime
declare @priceListKey int
declare @numDates int
declare @priceListGross int
---------------------------------------------
declare @ROUND_NOTWITHDISC int
declare @ROUND_SERVICE_MATH int
declare @ROUND_SERVICE0_5 int
declare @ROUND_PRICE0_5 int
declare @ROUND_SERVICE int
declare @ROUND_PRICE int
declare @ROUND_NOT int

Set @ROUND_NOTWITHDISC = 64
Set @ROUND_SERVICE_MATH = 32
Set @ROUND_SERVICE0_5 = 16
Set @ROUND_PRICE0_5 = 8
Set @ROUND_SERVICE = 4
Set @ROUND_PRICE = 2
Set @ROUND_NOT = 1
---------------------------------------------
declare @nIsEnabled smallint
--select @nIsEnabled = TO_IsEnabled from TP_Tours where TO_Key = @nPriceTourKey
--set @nIsEnabled = 0
---------------------------------------------
declare @tpPricesCount int
declare @isPriceListPluginRecalculation smallint
select @tpPricesCount = count(1) from tp_prices with(nolock) where tp_tokey = @nPriceTourKey

update TP_Lists with(rowlock)
	set
		ti_totaldays = (select max(case ts_svkey 
						when 3 
						then ts_day + ts_days 
						else (case ts_days 
							when 0 
							then 1 
							else ts_days 
      							  end) + ts_day - 1 
 						   end)
				from dbo.tp_services with (nolock)
					inner join dbo.tp_servicelists with (nolock) on (tl_tskey = ts_key and TS_TOKey = @nPriceTourKey and TL_TOKey = @nPriceTourKey)
				where tl_tikey = ti_key)
from TP_Lists
where ti_tokey = @nPriceTourKey
and ti_totaldays is null


if (@nCalculatingKey is null)
begin
	select top 1 @nCalculatingKey = CP_Key from CalculatingPriceLists where CP_PriceTourKey = @nPriceTourKey and CP_Update = 0
	update tp_turdates set td_update = 0 where td_tokey = @nPriceTourKey
	update tp_lists set ti_update = 0 where ti_tokey = @nPriceTourKey
	if (@tpPricesCount <> 0)
		set @isPriceListPluginRecalculation = 1
	else
		set @isPriceListPluginRecalculation = 0
end
else
	set @isPriceListPluginRecalculation = 0

declare @calculatingPriceListsExists smallint -- 0 - CalculatingPriceLists нет, 1 - CalculatingPriceLists есть в базе

print 'Инициализация: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @beginTime = getDate()

BEGIN		
	--koshelev
	--MEG00027550
	if @nUpdate = 0
	begin
		update tp_tours with(rowlock) set to_datecreated = GetDate() where to_key = @nPriceTourKey
	end

	select @TrKey = to_trkey, @userKey = to_opkey from tp_tours with(nolock) where to_key = @nPriceTourKey

	delete from CalculatingPriceLists with(rowlock) where CP_PriceTourKey not in (select to_key from tp_tours with(nolock))

	if not exists (select 1 from CalculatingPriceLists with(nolock) where CP_PriceTourKey = @nPriceTourKey) and @nPriceTourKey is not null
	begin	
		insert into CalculatingPriceLists (CP_PriceTourKey, CP_SaleDate, CP_NullCostAsZero, CP_NoFlight, CP_Update, CP_TourKey, CP_UserKey, CP_Status, CP_UseHolidayRule)
		values (@nPriceTourKey, @dtSaleDate, @nNullCostAsZero, @nNoFlight, @nUpdate, @TrKey, @userKey, 1, @nUseHolidayRule)
	end
	else if @nPriceTourKey is not null
	begin
		update CalculatingPriceLists with(rowlock) set CP_Status = 1 where CP_Key = @nCalculatingKey
	end

	DECLARE @sHI_Text varchar(254), @nHIID int
	SELECT @sHI_Text=TO_Name FROM tp_tours with(nolock) where to_key = @nPriceTourKey
	EXEC @nHIID = dbo.InsHistory '', null, 11, @nPriceTourKey, 'INS', @sHI_Text, '', 0, ''

	SET @sHI_Text=CONVERT(varchar(30),@dtSaleDate,104)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11001, null, @sHI_Text, null, null, null, @dtSaleDate, 0
	If @nNullCostAsZero=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11002, null, @sHI_Text, null, @nNullCostAsZero, null, null, 0
	If @nNoFlight=0
		SET @sHI_Text='NO'
	ELSE
		SET @sHI_Text='Flight search'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11003, null, @sHI_Text, null, @nNoFlight, null, null, 0
	If @nUpdate=0
		SET @sHI_Text='First calculate'
	ELSE
		SET @sHI_Text='Add calculate'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11004, null, @sHI_Text, null, @nUpdate, null, null, 0
	If @nUseHolidayRule = 0
		SET @sHI_Text = 'NO'
	ELSE
		SET @sHI_Text = 'YES'
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11008, null, @sHI_Text, null, @nUpdate, null, null, 0
	
	--Засекаем время начала рассчета begin
	declare @beginPriceCalculate datetime
	set @beginPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@beginPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11009, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время начала рассчета end
	
	print 'Запись в историю: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	Set @nTotalProgress=1
	update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	select @nDateFirst = @@DATEFIRST
	set DATEFIRST 1
	set @SERV_NOTCALCULATE = 32768

	If @nUpdate=0
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_TourDate, TF_CalculatingKey)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey,
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, TI_Days, TD_Date, @nCalculatingKey
			From TP_Services with(nolock), TP_TurDates with(nolock), TP_Tours with(nolock), TP_Lists with(nolock), TP_ServiceLists with(nolock)
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TI_TOKey = TO_Key and TL_TOKey = TO_Key and TL_TSKey = TS_Key and TL_TIKey = TI_Key and TO_Key = @nPriceTourKey
	Else
	BEGIN
		insert into dbo.TP_Flights (TF_TOKey, TF_Date, TF_CodeOld, TF_PRKeyOld, TF_PKKey, TF_CTKey, TF_SubCode1, TF_SubCode2, TF_Days, TF_TourDate, TF_CalculatingKey)
		select distinct TO_Key, TD_Date + TS_Day - 1, TS_Code, TS_OpPartnerKey,
			TS_OpPacketKey, TS_CTKey, TS_SubCode1, TS_SubCode2, TI_Days, TD_Date, @nCalculatingKey
			From TP_Services with(nolock), TP_TurDates with(nolock), TP_Tours with(nolock), TP_Lists with(nolock), TP_ServiceLists with(nolock)
			where TS_TOKey = TO_Key and TS_SVKey = 1 and TD_TOKey = TO_Key and TI_TOKey = TO_Key and TL_TOKey = TO_Key and TL_TSKey = TS_Key and TL_TIKey = TI_Key and TO_Key = @nPriceTourKey
			and not exists (Select TF_ID From TP_Flights with(nolock) Where TF_TOKey=TO_Key and TF_Date=(TD_Date + TS_Day - 1) 
						and TF_CodeOld=TS_Code and TF_PRKeyOld=TS_OpPartnerKey and TF_PKKey=TS_OpPacketKey
						and TF_CTKey=TS_CTKey and TF_SubCode1=TS_SubCode1 and TF_SubCode2=TS_SubCode2 and TF_Days = TI_Days and TF_CodeNew is not null)	
	END

	print 'Подбор перелетов 1: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
--------------------------------------- ищем подходящий перелет, если стоит настройка подбора перелета --------------------------------------

	------ проверяем, а подходит ли текущий рейс, указанный в туре ----
	Update	TP_Flights Set 	TF_CodeNew = TF_CodeOld, TF_PRKeyNew = TF_PRKeyOld, TF_SubCode1New = TF_SubCode1
	Where	exists (SELECT 1 FROM AirSeason WHERE AS_CHKey = TF_CodeOld AND TF_Date BETWEEN AS_DateFrom AND AS_DateTo AND AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%')
			and exists (select 1 from Costs where CS_Code = TF_CodeOld and CS_SVKey = 1 and CS_SubCode1 = TF_Subcode1 and CS_PRKey = TF_PRKeyOld and CS_PKKey = TF_PKKey and TF_Date BETWEEN CS_Date AND  CS_DateEnd and (ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') and (CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long))
			and TF_TOKey = @nPriceTourKey
	
	print 'Подбор перелетов 2: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	If @nNoFlight = 2
	BEGIN
		------ проверяем, а есть ли у данного парнера по рейсу, цены на другие рейсы в этом же пакете ----		
		
		IF exists(SELECT TF_ID FROM TP_Flights with(nolock) WHERE TF_TOKey = @nPriceTourKey and TF_CodeNew is Null) 
		begin
			print 'Подбираем перелет'
			
			declare @newFlightsPartnerTable table
			(
				-- идентификатор
				xId int identity(1,1),
				-- ключ услуги перелет
				xTFId int,
				-- ключ исходного партнера
				xPRKey int,
				-- ключ партнера которого подобрали
				xPRKeyNew int,
				-- ключ перелета
				xCHKey int,
				-- ключ тарифа на перелет
				xASKey int
			)
			-- подбираем подходящие нам перелеты
			insert into @newFlightsPartnerTable (xTFId, xCHKey, xASKey, xPRKey, xPRKeyNew)
			SELECT TF_Id, CH_Key, CS_SubCode1, TF_PRKeyOld, CS_PRKey
			FROM AirSeason with(nolock), Charter with(nolock), Costs with(nolock), TP_Flights with(nolock)
			WHERE CH_CityKeyFrom = TF_Subcode2 and
			CH_CityKeyTo = TF_CTKey and
			CS_Code = CH_Key and
			AS_CHKey = CH_Key and
			CS_SVKey = 1 and
			(	isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = CS_SubCode1), '')
				= 
				isnull((select top 1 AS_GROUP from AirService with(nolock) where AS_KEY = TF_Subcode1), '')
			) and
			CS_PKKey = TF_PKKey and
			TF_Date BETWEEN AS_DateFrom and AS_DateTo and
			TF_Date BETWEEN CS_Date and CS_DateEnd and
			AS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%' and
			(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+cast(datepart(weekday, TF_Date)as varchar(1))+'%') and
			(CS_Long is null or CS_LongMin is null or TF_Days between CS_LongMin and CS_Long) and
			TF_CodeNew is Null and 
			TF_TOKey = @nPriceTourKey
			group by TF_Id, CH_Key, CS_SubCode1, TF_PRKeyOld, CS_PRKey
			
			-- удаляем повторяющиеся (если подобралось несколько перелетов)
			delete @newFlightsPartnerTable
			from @newFlightsPartnerTable as a
			where a.xId != (select top 1 b.xId 
							from @newFlightsPartnerTable as b 
							where b.xTFId = a.xTFId
							-- и приорететнее те перелеты в которых партнеры совпадают с исходным
							order by case when b.xPRKey = b.xPRKeyNew then 0 else 1 end)
			
			-- обновляем информацию о найденом перелете
			update TP_Flights with(rowlock)
			set TF_CodeNew = xCHKey,
			TF_SubCode1New = xASKey,
			TF_PRKeyNew = xPRKeyNew,
			TF_CalculatingKey = @nCalculatingKey
			from TP_Flights with(rowlock) join @newFlightsPartnerTable on TF_Id = xTFId
			
			print 'Закончили подбор перелетов'			
		end
		
		print 'Подбор перелетов 3: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	END

	--------------------------------------- закончили поиск подходящего перелета --------------------------------------
	if (1 = 1)
	BEGIN
		update [dbo].tp_tours with(rowlock) set to_update = 1 where to_key = @nPriceTourKey
		Set @nTotalProgress=4
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	
		--------------------------------------- сохраняем цены во временной таблице --------------------------------------
		CREATE TABLE #TP_Prices
		(
			[xTP_Key] [int] PRIMARY KEY NOT NULL ,
			[xTP_OrderKey] [int] NOT NULL IDENTITY(1,1),
			[xTP_TOKey] [int] NOT NULL ,
			[xTP_DateBegin] [datetime] NOT NULL ,
			[xTP_DateEnd] [datetime] NULL ,
			-- формула расчета общей цены тура
			[xTP_Gross] as (((case when  [xSCPId_1] is not null then  [xGross_1] else 0 end) * (1 + (isnull( [xMarginPercent_1], 0)/100) * (1 + (isnull( [xIsCommission_1], 0) - 1) * isnull( [xCommissionOnly_1], 0))) + isnull( [xAddCostIsCommission_1], 0) * (1 + (isnull( [xMarginPercent_1], 0)/100)) + isnull( [xAddCostNoCommission_1], 0) * (1 + (isnull( [xMarginPercent_1], 0)/100) * (1 - isnull( [xCommissionOnly_1], 0)))) +
							((case when  [xSCPId_2] is not null then  [xGross_2] else 0 end) * (1 + (isnull( [xMarginPercent_2], 0)/100) * (1 + (isnull( [xIsCommission_2], 0) - 1) * isnull( [xCommissionOnly_2], 0))) + isnull( [xAddCostIsCommission_2], 0) * (1 + (isnull( [xMarginPercent_2], 0)/100)) + isnull( [xAddCostNoCommission_2], 0) * (1 + (isnull( [xMarginPercent_2], 0)/100) * (1 - isnull( [xCommissionOnly_2], 0)))) +
							((case when  [xSCPId_3] is not null then  [xGross_3] else 0 end) * (1 + (isnull( [xMarginPercent_3], 0)/100) * (1 + (isnull( [xIsCommission_3], 0) - 1) * isnull( [xCommissionOnly_3], 0))) + isnull( [xAddCostIsCommission_3], 0) * (1 + (isnull( [xMarginPercent_3], 0)/100)) + isnull( [xAddCostNoCommission_3], 0) * (1 + (isnull( [xMarginPercent_3], 0)/100) * (1 - isnull( [xCommissionOnly_3], 0)))) +
							((case when  [xSCPId_4] is not null then  [xGross_4] else 0 end) * (1 + (isnull( [xMarginPercent_4], 0)/100) * (1 + (isnull( [xIsCommission_4], 0) - 1) * isnull( [xCommissionOnly_4], 0))) + isnull( [xAddCostIsCommission_4], 0) * (1 + (isnull( [xMarginPercent_4], 0)/100)) + isnull( [xAddCostNoCommission_4], 0) * (1 + (isnull( [xMarginPercent_4], 0)/100) * (1 - isnull( [xCommissionOnly_4], 0)))) +
							((case when  [xSCPId_5] is not null then  [xGross_5] else 0 end) * (1 + (isnull( [xMarginPercent_5], 0)/100) * (1 + (isnull( [xIsCommission_5], 0) - 1) * isnull( [xCommissionOnly_5], 0))) + isnull( [xAddCostIsCommission_5], 0) * (1 + (isnull( [xMarginPercent_5], 0)/100)) + isnull( [xAddCostNoCommission_5], 0) * (1 + (isnull( [xMarginPercent_5], 0)/100) * (1 - isnull( [xCommissionOnly_5], 0)))) +
							((case when  [xSCPId_6] is not null then  [xGross_6] else 0 end) * (1 + (isnull( [xMarginPercent_6], 0)/100) * (1 + (isnull( [xIsCommission_6], 0) - 1) * isnull( [xCommissionOnly_6], 0))) + isnull( [xAddCostIsCommission_6], 0) * (1 + (isnull( [xMarginPercent_6], 0)/100)) + isnull( [xAddCostNoCommission_6], 0) * (1 + (isnull( [xMarginPercent_6], 0)/100) * (1 - isnull( [xCommissionOnly_6], 0)))) +
							((case when  [xSCPId_7] is not null then  [xGross_7] else 0 end) * (1 + (isnull( [xMarginPercent_7], 0)/100) * (1 + (isnull( [xIsCommission_7], 0) - 1) * isnull( [xCommissionOnly_7], 0))) + isnull( [xAddCostIsCommission_7], 0) * (1 + (isnull( [xMarginPercent_7], 0)/100)) + isnull( [xAddCostNoCommission_7], 0) * (1 + (isnull( [xMarginPercent_7], 0)/100) * (1 - isnull( [xCommissionOnly_7], 0)))) +
							((case when  [xSCPId_8] is not null then  [xGross_8] else 0 end) * (1 + (isnull( [xMarginPercent_8], 0)/100) * (1 + (isnull( [xIsCommission_8], 0) - 1) * isnull( [xCommissionOnly_8], 0))) + isnull( [xAddCostIsCommission_8], 0) * (1 + (isnull( [xMarginPercent_8], 0)/100)) + isnull( [xAddCostNoCommission_8], 0) * (1 + (isnull( [xMarginPercent_8], 0)/100) * (1 - isnull( [xCommissionOnly_8], 0)))) +
							((case when  [xSCPId_9] is not null then  [xGross_9] else 0 end) * (1 + (isnull( [xMarginPercent_9], 0)/100) * (1 + (isnull( [xIsCommission_9], 0) - 1) * isnull( [xCommissionOnly_9], 0))) + isnull( [xAddCostIsCommission_9], 0) * (1 + (isnull( [xMarginPercent_9], 0)/100)) + isnull( [xAddCostNoCommission_9], 0) * (1 + (isnull( [xMarginPercent_9], 0)/100) * (1 - isnull( [xCommissionOnly_9], 0)))) +
							((case when [xSCPId_10] is not null then [xGross_10] else 0 end) * (1 + (isnull([xMarginPercent_10], 0)/100) * (1 + (isnull([xIsCommission_10], 0) - 1) * isnull([xCommissionOnly_10], 0))) + isnull([xAddCostIsCommission_10], 0) * (1 + (isnull([xMarginPercent_10], 0)/100)) + isnull([xAddCostNoCommission_10], 0) * (1 + (isnull([xMarginPercent_10], 0)/100) * (1 - isnull([xCommissionOnly_10], 0)))) +
							((case when [xSCPId_11] is not null then [xGross_11] else 0 end) * (1 + (isnull([xMarginPercent_11], 0)/100) * (1 + (isnull([xIsCommission_11], 0) - 1) * isnull([xCommissionOnly_11], 0))) + isnull([xAddCostIsCommission_11], 0) * (1 + (isnull([xMarginPercent_11], 0)/100)) + isnull([xAddCostNoCommission_11], 0) * (1 + (isnull([xMarginPercent_11], 0)/100) * (1 - isnull([xCommissionOnly_11], 0)))) +
							((case when [xSCPId_12] is not null then [xGross_12] else 0 end) * (1 + (isnull([xMarginPercent_12], 0)/100) * (1 + (isnull([xIsCommission_12], 0) - 1) * isnull([xCommissionOnly_12], 0))) + isnull([xAddCostIsCommission_12], 0) * (1 + (isnull([xMarginPercent_12], 0)/100)) + isnull([xAddCostNoCommission_12], 0) * (1 + (isnull([xMarginPercent_12], 0)/100) * (1 - isnull([xCommissionOnly_12], 0)))) +
							((case when [xSCPId_13] is not null then [xGross_13] else 0 end) * (1 + (isnull([xMarginPercent_13], 0)/100) * (1 + (isnull([xIsCommission_13], 0) - 1) * isnull([xCommissionOnly_13], 0))) + isnull([xAddCostIsCommission_13], 0) * (1 + (isnull([xMarginPercent_13], 0)/100)) + isnull([xAddCostNoCommission_13], 0) * (1 + (isnull([xMarginPercent_13], 0)/100) * (1 - isnull([xCommissionOnly_13], 0)))) +
							((case when [xSCPId_14] is not null then [xGross_14] else 0 end) * (1 + (isnull([xMarginPercent_14], 0)/100) * (1 + (isnull([xIsCommission_14], 0) - 1) * isnull([xCommissionOnly_14], 0))) + isnull([xAddCostIsCommission_14], 0) * (1 + (isnull([xMarginPercent_14], 0)/100)) + isnull([xAddCostNoCommission_14], 0) * (1 + (isnull([xMarginPercent_14], 0)/100) * (1 - isnull([xCommissionOnly_14], 0)))) +
							((case when [xSCPId_15] is not null then [xGross_15] else 0 end) * (1 + (isnull([xMarginPercent_15], 0)/100) * (1 + (isnull([xIsCommission_15], 0) - 1) * isnull([xCommissionOnly_15], 0))) + isnull([xAddCostIsCommission_15], 0) * (1 + (isnull([xMarginPercent_15], 0)/100)) + isnull([xAddCostNoCommission_15], 0) * (1 + (isnull([xMarginPercent_15], 0)/100) * (1 - isnull([xCommissionOnly_15], 0))))),
			[xTP_TIKey] [int] NOT NULL,
			[xTP_HotelKey] [int] NOT NULL,
			[xTP_DepartureKey] [int] NOT NULL,
			[xTP_CalculatingKey] [int] NULL,
			[xTP_Days] [int] null,
			[xTP_Rate] [nvarchar](2) null,
			[xSCPId_1] [int] null,
			[xSCPId_2] [int] null,
			[xSCPId_3] [int] null,
			[xSCPId_4] [int] null,
			[xSCPId_5] [int] null,
			[xSCPId_6] [int] null,
			[xSCPId_7] [int] null,
			[xSCPId_8] [int] null,
			[xSCPId_9] [int] null,
			[xSCPId_10] [int] null,
			[xSCPId_11] [int] null,
			[xSCPId_12] [int] null,
			[xSCPId_13] [int] null,
			[xSCPId_14] [int] null,
			[xSCPId_15] [int] null,
			
			[xSvKey_1] [int] null,
			[xSvKey_2] [int] null,
			[xSvKey_3] [int] null,
			[xSvKey_4] [int] null,
			[xSvKey_5] [int] null,
			[xSvKey_6] [int] null,
			[xSvKey_7] [int] null,
			[xSvKey_8] [int] null,
			[xSvKey_9] [int] null,
			[xSvKey_10] [int] null,
			[xSvKey_11] [int] null,
			[xSvKey_12] [int] null,
			[xSvKey_13] [int] null,
			[xSvKey_14] [int] null,
			[xSvKey_15] [int] null,
			
			[xGross_1] [money] null,
			[xGross_2] [money] null,
			[xGross_3] [money] null,
			[xGross_4] [money] null,
			[xGross_5] [money] null,
			[xGross_6] [money] null,
			[xGross_7] [money] null,
			[xGross_8] [money] null,
			[xGross_9] [money] null,
			[xGross_10] [money] null,
			[xGross_11] [money] null,
			[xGross_12] [money] null,
			[xGross_13] [money] null,
			[xGross_14] [money] null,
			[xGross_15] [money] null,
			
			[xAddCostIsCommission_1] [money] null,
			[xAddCostIsCommission_2] [money] null,
			[xAddCostIsCommission_3] [money] null,
			[xAddCostIsCommission_4] [money] null,
			[xAddCostIsCommission_5] [money] null,
			[xAddCostIsCommission_6] [money] null,
			[xAddCostIsCommission_7] [money] null,
			[xAddCostIsCommission_8] [money] null,
			[xAddCostIsCommission_9] [money] null,
			[xAddCostIsCommission_10] [money] null,
			[xAddCostIsCommission_11] [money] null,
			[xAddCostIsCommission_12] [money] null,
			[xAddCostIsCommission_13] [money] null,
			[xAddCostIsCommission_14] [money] null,
			[xAddCostIsCommission_15] [money] null,
			
			[xAddCostNoCommission_1] [money] null,
			[xAddCostNoCommission_2] [money] null,
			[xAddCostNoCommission_3] [money] null,
			[xAddCostNoCommission_4] [money] null,
			[xAddCostNoCommission_5] [money] null,
			[xAddCostNoCommission_6] [money] null,
			[xAddCostNoCommission_7] [money] null,
			[xAddCostNoCommission_8] [money] null,
			[xAddCostNoCommission_9] [money] null,
			[xAddCostNoCommission_10] [money] null,
			[xAddCostNoCommission_11] [money] null,
			[xAddCostNoCommission_12] [money] null,
			[xAddCostNoCommission_13] [money] null,
			[xAddCostNoCommission_14] [money] null,
			[xAddCostNoCommission_15] [money] null,
			
			[xMarginPercent_1] [money] null,
			[xMarginPercent_2] [money] null,
			[xMarginPercent_3] [money] null,
			[xMarginPercent_4] [money] null,
			[xMarginPercent_5] [money] null,
			[xMarginPercent_6] [money] null,
			[xMarginPercent_7] [money] null,
			[xMarginPercent_8] [money] null,
			[xMarginPercent_9] [money] null,
			[xMarginPercent_10] [money] null,
			[xMarginPercent_11] [money] null,
			[xMarginPercent_12] [money] null,
			[xMarginPercent_13] [money] null,
			[xMarginPercent_14] [money] null,
			[xMarginPercent_15] [money] null,
			
			[xCommissionOnly_1] [bit] null,
			[xCommissionOnly_2] [bit] null,
			[xCommissionOnly_3] [bit] null,
			[xCommissionOnly_4] [bit] null,
			[xCommissionOnly_5] [bit] null,
			[xCommissionOnly_6] [bit] null,
			[xCommissionOnly_7] [bit] null,
			[xCommissionOnly_8] [bit] null,
			[xCommissionOnly_9] [bit] null,
			[xCommissionOnly_10] [bit] null,
			[xCommissionOnly_11] [bit] null,
			[xCommissionOnly_12] [bit] null,
			[xCommissionOnly_13] [bit] null,
			[xCommissionOnly_14] [bit] null,
			[xCommissionOnly_15] [bit] null,
			
			[xIsCommission_1] [bit] null,
			[xIsCommission_2] [bit] null,
			[xIsCommission_3] [bit] null,
			[xIsCommission_4] [bit] null,
			[xIsCommission_5] [bit] null,
			[xIsCommission_6] [bit] null,
			[xIsCommission_7] [bit] null,
			[xIsCommission_8] [bit] null,
			[xIsCommission_9] [bit] null,
			[xIsCommission_10] [bit] null,
			[xIsCommission_11] [bit] null,
			[xIsCommission_12] [bit] null,
			[xIsCommission_13] [bit] null,
			[xIsCommission_14] [bit] null,
			[xIsCommission_15] [bit] null
		)

		CREATE NONCLUSTERED INDEX [x_fields] ON [#TP_Prices] 
		(
			[xTP_TOKey] ASC,
			[xTP_TIKey] ASC,
			[xTP_DateBegin] ASC,
			[xTP_DateEnd] ASC
		)

		DELETE FROM #TP_Prices
		---------------------------------------КОНЕЦ  сохраняем цены во временной таблице --------------------------------------
		

		---------------------------------------разбиваем данные в таблицах tp_prices по датам
		if (select COUNT(TP_Key) from TP_Prices with(nolock) where TP_DateBegin != TP_DateEnd and TP_TOKey = @nPriceTourKey) > 0
		begin
			
			select @numDates = COUNT(1) from TP_TurDates with(nolock), TP_Lists with(nolock), TP_Prices with(nolock) where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			exec GetNKeys 'TP_PRICES', @numDates, @nTP_PriceKeyMax output
			set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @numDates + 1
		
			declare datesCursor cursor local fast_forward for
			select TD_Date, TI_Key, TP_Gross from TP_TurDates with(nolock), TP_Lists with(nolock), TP_Prices with(nolock) where TP_TIKey = TI_Key and TD_Date between TP_DateBegin and TP_DateEnd and TP_TOKey = @nPriceTourKey and TD_TOKey = @nPriceTourKey and TI_TOKey = @nPriceTourKey
			
			open datesCursor
			fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			while @@FETCH_STATUS = 0
			begin
				insert into #TP_Prices (xTP_Key, xTP_TOKey, xTP_TIKey, xTP_DateBegin, xTP_DateEnd, xTP_CalculatingKey) 
				values (@nTP_PriceKeyCurrent, @nPriceTourKey, @priceListKey, @priceDate, @priceDate, @nCalculatingKey)
				set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
				fetch next from datesCursor into @priceDate, @priceListKey, @priceListGross
			end
			
			close datesCursor
			deallocate datesCursor
			
			begin tran tEnd
				delete from TP_Prices with(rowlock) where TP_TOKey = @nPriceTourKey
				
				insert into TP_Prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd, TP_CalculatingKey)
				select xTP_Key, xTP_TOKey, xTP_TIKey, xTP_Gross, xTP_DateBegin, xTP_DateEnd, @nCalculatingKey
				from #TP_Prices  
				where xTP_DateBegin = xTP_DateEnd
				
				delete from #TP_Prices
			commit tran tEnd
		end
		--------------------------------------------------------------------------------------
		
		select @TrKey = to_trkey, @nPriceFor = to_pricefor from tp_tours with(nolock) where to_key = @nPriceTourKey

		--смотрим сколько записей по текущему прайсу уже посчитано
		Set @NumCalculated = (SELECT COUNT(1) FROM tp_prices with(nolock) where tp_tokey = @nPriceTourKey)
		--считаем сколько записей надо посчитать
		set @NumPrices = (	(select count(1) from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) * 
							(select count(1) from tp_turdates with(nolock) where td_tokey = @nPriceTourKey and td_update = @nUpdate));

		if (@NumCalculated + @NumPrices) = 0
			set @NumPrices = 1

		--Set @nTotalProgress=@nTotalProgress + (CAST(@NumCalculated as money)/CAST((@NumCalculated+@NumPrices) as money) * (90-@nTotalProgress))
		set @nTotalProgress = @nTotalProgress + CAST(@NumCalculated as money) / CAST((@NumCalculated + @NumPrices) as money)
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		update tp_services with(rowlock) set ts_checkmargin = 1 where
		(ts_svkey in (select tm_svkey FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)
		or
		exists(select 1 FROM TurMargin with(nolock), tp_turdates with(nolock)
		WHERE	TM_TlKey = @TrKey and td_tokey = @nPriceTourKey
			and td_date Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
			and tm_svkey = 0)
		)and ts_tokey = @nPriceTourKey

		update [dbo].tp_turdates with(rowlock) set td_checkmargin = 1 where
			exists(select 1 from TurMargin with(nolock) WHERE TM_TlKey = @TrKey
			and TD_DATE Between TM_DateBeg and TM_DateEnd
			and (@dtSaleDate >= TM_DateSellBeg  or TM_DateSellBeg is null)
			and (@dtSaleDate <= TM_DateSellEnd or TM_DateSellEnd is null)
		)and td_tokey = @nPriceTourKey
		----------------------------------------------------------- Здесь апдейтим TS_CHECKMARGIN и TD_CHECKMARGIN
		
		print 'Инициализация расчета цен: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
		
		declare @tempTO_Rate nvarchar(3), @tempTO_TRKey int
		
		select @tempTO_Rate = TO_Rate, @tempTO_TRKey = TO_TRKey from tp_tours with(nolock) where TO_Key = @nPriceTourKey

		declare serviceCursor cursor local fast_forward for
			select ti_firsthdkey, ts_key, ti_key, td_date, ts_svkey, ts_code, ts_subcode1, ts_subcode2, ts_oppartnerkey, ts_oppacketkey, ts_day, ts_days, @tempTO_Rate, ts_men, ts_tempgross, ts_checkmargin, td_checkmargin, ti_days, ts_ctkey, ts_attribute, (select TL_CTDepartureKey from tbl_TurList with(nolock) where @tempTO_TRKey = TL_KEY), SV_IsDuration, ti_totaldays
			from tp_services with(nolock), tp_lists with(nolock), tp_servicelists with(nolock), tp_turdates with(nolock), [Service]
			where @nPriceTourKey = ts_tokey and @nPriceTourKey = ti_tokey and @nPriceTourKey = tl_tokey and ts_key = tl_tskey and ti_key = tl_tikey and @nPriceTourKey = td_tokey
				and ti_update = @nUpdate and td_update = @nUpdate and (@nUseHolidayRule = 0 or (case cast(datepart(weekday, td_date) as int) when 7 then 0 else cast(datepart(weekday, td_date) as int) end + ti_days) >= 8)
				and ts_svkey = SV_KEY
			order by ti_firsthdkey, td_date, ti_key, case when ti_firsthdkey = ts_code and TS_SVKey = 3 then 0 else 1 end

		open serviceCursor
		
		SELECT @round = ST_RoundService FROM Setting
		--MEG00036108 увеличил значение
		set @nProgressSkipLimit = 100

		set @nProgressSkipCounter = 0
		
		if @NumPrices <> 0
			set @nDeltaProgress = (95.0-@nTotalProgress) / @NumPrices
		else
			set @nDeltaProgress = 95.0-@nTotalProgress

		exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
		set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
		set @dtPrevDate = '1899-12-31'
		set @nPrevVariant = -1
		set @nPrevGross = -1
		set @nPrevGrossDate = '1899-12-31'
		set @prevHdKey = -1

		delete from #TP_Prices
		declare @calcPricesCount int, @calcPriceListCount int, @calcTurDates int, @oldPriceKeyCurrent int
		
		declare @IsDuration smallint
		declare @tiCtKeyFrom int, @tiDays int, @titotaldays int
		declare @tsKey_1 int, @tsKey_2 int, @tsKey_3 int, @tsKey_4 int, @tsKey_5 int, @tsKey_6 int, @tsKey_7 int, @tsKey_8 int, @tsKey_9 int, @tsKey_10 int, @tsKey_11 int, @tsKey_12 int, @tsKey_13 int, @tsKey_14 int, @tsKey_15 int
		declare @tsSVKey_1 int, @tsSVKey_2 int, @tsSVKey_3 int, @tsSVKey_4 int, @tsSVKey_5 int, @tsSVKey_6 int, @tsSVKey_7 int, @tsSVKey_8 int, @tsSVKey_9 int, @tsSVKey_10 int, @tsSVKey_11 int, @tsSVKey_12 int, @tsSVKey_13 int, @tsSVKey_14 int, @tsSVKey_15 int
		declare @tsGross_1 money, @tsGross_2 money, @tsGross_3 money, @tsGross_4 money, @tsGross_5 money, @tsGross_6 money, @tsGross_7 money, @tsGross_8 money, @tsGross_9 money, @tsGross_10 money, @tsGross_11 money, @tsGross_12 money, @tsGross_13 money, @tsGross_14 money, @tsGross_15 money
		declare @tsAddIsCommission_1 money, @tsAddIsCommission_2 money, @tsAddIsCommission_3 money, @tsAddIsCommission_4 money, @tsAddIsCommission_5 money, @tsAddIsCommission_6 money, @tsAddIsCommission_7 money, @tsAddIsCommission_8 money, @tsAddIsCommission_9 money, @tsAddIsCommission_10 money, @tsAddIsCommission_11 money, @tsAddIsCommission_12 money, @tsAddIsCommission_13 money, @tsAddIsCommission_14 money, @tsAddIsCommission_15 money
		declare @tsAddNoCommission_1 money, @tsAddNoCommission_2 money, @tsAddNoCommission_3 money, @tsAddNoCommission_4 money, @tsAddNoCommission_5 money, @tsAddNoCommission_6 money, @tsAddNoCommission_7 money, @tsAddNoCommission_8 money, @tsAddNoCommission_9 money, @tsAddNoCommission_10 money, @tsAddNoCommission_11 money, @tsAddNoCommission_12 money, @tsAddNoCommission_13 money, @tsAddNoCommission_14 money, @tsAddNoCommission_15 money
		declare @tsMarginPercent_1 money, @tsMarginPercent_2 money, @tsMarginPercent_3 money, @tsMarginPercent_4 money, @tsMarginPercent_5 money, @tsMarginPercent_6 money, @tsMarginPercent_7 money, @tsMarginPercent_8 money, @tsMarginPercent_9 money, @tsMarginPercent_10 money, @tsMarginPercent_11 money, @tsMarginPercent_12 money, @tsMarginPercent_13 money, @tsMarginPercent_14 money, @tsMarginPercent_15 money
		declare @tsCommissionOnly_1 money, @tsCommissionOnly_2 money, @tsCommissionOnly_3 money, @tsCommissionOnly_4 money, @tsCommissionOnly_5 money, @tsCommissionOnly_6 money, @tsCommissionOnly_7 money, @tsCommissionOnly_8 money, @tsCommissionOnly_9 money, @tsCommissionOnly_10 money, @tsCommissionOnly_11 money, @tsCommissionOnly_12 money, @tsCommissionOnly_13 money, @tsCommissionOnly_14 money, @tsCommissionOnly_15 money
		declare @tsIsCommission_1 bit, @tsIsCommission_2 bit, @tsIsCommission_3 bit, @tsIsCommission_4 bit, @tsIsCommission_5 bit, @tsIsCommission_6 bit, @tsIsCommission_7 bit, @tsIsCommission_8 bit, @tsIsCommission_9 bit, @tsIsCommission_10 bit, @tsIsCommission_11 bit, @tsIsCommission_12 bit, @tsIsCommission_13 bit, @tsIsCommission_14 bit, @tsIsCommission_15 bit
		
		select @calcPriceListCount = COUNT(1) from TP_Lists with(nolock) where TI_TOKey = @nPriceTourKey and TI_UPDATE = @nUpdate
		select @calcTurDates = COUNT(1) from TP_TurDates with(nolock) where TD_TOKey = @nPriceTourKey and TD_UPDATE = @nUpdate
		select @calcPricesCount = @calcPriceListCount * @calcTurDates

		fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE, @tiCtKeyFrom, @IsDuration, @titotaldays
		
		set @fetchStatus = @@fetch_status		
		print 'Расчет цен 0: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
		While (@fetchStatus = 0)
		BEGIN
			--данных не нашлось, выходим
			if @@fetch_status <> 0 and @nPrevVariant = -1
				break
				
			--очищаем переменные, записываем данные в таблицу #TP_Prices
			if @nPrevVariant <> @variant or @dtPrevDate <> @turdate or @@fetch_status <> 0
			BEGIN				
				--записываем данные в таблицу #TP_Prices
				if @nPrevVariant <> -1
				begin
					if exists(select 1 from #TP_Prices where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant)
					begin
						--select @nCalculatingKey
						update #TP_Prices set xtp_calculatingkey = @nCalculatingKey, xtp_key = @nTP_PriceKeyCurrent where xtp_tokey = @nPriceTourKey and xtp_datebegin = @dtPrevDate and xtp_dateend = @dtPrevDate and xtp_tikey = @nPrevVariant and xtp_gross <> @price_brutto
						set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
						
					end
					else if (@isPriceListPluginRecalculation = 0)
					begin
						--select @nCalculatingKey
						insert into #TP_Prices (xtp_key, xtp_tokey, xtp_datebegin, xtp_dateend, xtp_tikey, xTP_CalculatingKey, xTP_Days, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
						, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
						, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
						, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
						, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
						, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
						, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
						, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
						, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15)
						values (@nTP_PriceKeyCurrent, @nPriceTourKey, @dtPrevDate, @dtPrevDate, @nPrevVariant, @nCalculatingKey, @tiDays, @sRate, @hdKey, @tiCtKeyFrom
						, @tsKey_1, @tsKey_2, @tsKey_3, @tsKey_4, @tsKey_5, @tsKey_6, @tsKey_7, @tsKey_8, @tsKey_9, @tsKey_10, @tsKey_11, @tsKey_12, @tsKey_13, @tsKey_14, @tsKey_15
						, @tsSVKey_1, @tsSVKey_2, @tsSVKey_3, @tsSVKey_4, @tsSVKey_5, @tsSVKey_6, @tsSVKey_7, @tsSVKey_8, @tsSVKey_9, @tsSVKey_10, @tsSVKey_11, @tsSVKey_12, @tsSVKey_13, @tsSVKey_14, @tsSVKey_15
						, @tsGross_1, @tsGross_2, @tsGross_3, @tsGross_4, @tsGross_5, @tsGross_6, @tsGross_7, @tsGross_8, @tsGross_9, @tsGross_10, @tsGross_11, @tsGross_12, @tsGross_13, @tsGross_14, @tsGross_15
						, @tsAddIsCommission_1, @tsAddIsCommission_2, @tsAddIsCommission_3, @tsAddIsCommission_4, @tsAddIsCommission_5, @tsAddIsCommission_6, @tsAddIsCommission_7, @tsAddIsCommission_8, @tsAddIsCommission_9, @tsAddIsCommission_10, @tsAddIsCommission_11, @tsAddIsCommission_12, @tsAddIsCommission_13, @tsAddIsCommission_14, @tsAddIsCommission_15
						, @tsAddNoCommission_1, @tsAddNoCommission_2, @tsAddNoCommission_3, @tsAddNoCommission_4, @tsAddNoCommission_5, @tsAddNoCommission_6, @tsAddNoCommission_7, @tsAddNoCommission_8, @tsAddNoCommission_9, @tsAddNoCommission_10, @tsAddNoCommission_11, @tsAddNoCommission_12, @tsAddNoCommission_13, @tsAddNoCommission_14, @tsAddNoCommission_15
						, @tsMarginPercent_1, @tsMarginPercent_2, @tsMarginPercent_3, @tsMarginPercent_4, @tsMarginPercent_5, @tsMarginPercent_6, @tsMarginPercent_7, @tsMarginPercent_8, @tsMarginPercent_9, @tsMarginPercent_10, @tsMarginPercent_11, @tsMarginPercent_12, @tsMarginPercent_13, @tsMarginPercent_14, @tsMarginPercent_15
						, @tsCommissionOnly_1, @tsCommissionOnly_2, @tsCommissionOnly_3, @tsCommissionOnly_4, @tsCommissionOnly_5, @tsCommissionOnly_6, @tsCommissionOnly_7, @tsCommissionOnly_8, @tsCommissionOnly_9, @tsCommissionOnly_10, @tsCommissionOnly_11, @tsCommissionOnly_12, @tsCommissionOnly_13, @tsCommissionOnly_14, @tsCommissionOnly_15
						, @tsIsCommission_1, @tsIsCommission_2, @tsIsCommission_3, @tsIsCommission_4, @tsIsCommission_5, @tsIsCommission_6, @tsIsCommission_7, @tsIsCommission_8, @tsIsCommission_9, @tsIsCommission_10, @tsIsCommission_11, @tsIsCommission_12, @tsIsCommission_13, @tsIsCommission_14, @tsIsCommission_15)
												
						set @tiDays = null
						
						set @tsKey_1 = null
						set @tsKey_2 = null
						set @tsKey_3 = null
						set @tsKey_4 = null
						set @tsKey_5 = null
						set @tsKey_6 = null
						set @tsKey_7 = null
						set @tsKey_8 = null
						set @tsKey_9 = null
						set @tsKey_10 = null
						set @tsKey_11 = null
						set @tsKey_12 = null
						set @tsKey_13 = null
						set @tsKey_14 = null
						set @tsKey_15 = null
						
						set @tsSVKey_1 = null
						set @tsSVKey_2 = null
						set @tsSVKey_3 = null
						set @tsSVKey_4 = null
						set @tsSVKey_5 = null
						set @tsSVKey_6 = null
						set @tsSVKey_7 = null
						set @tsSVKey_8 = null
						set @tsSVKey_9 = null
						set @tsSVKey_10 = null
						set @tsSVKey_11 = null
						set @tsSVKey_12 = null
						set @tsSVKey_13 = null
						set @tsSVKey_14 = null
						set @tsSVKey_15 = null
						
						set @tsGross_1 = null
						set @tsGross_2 = null
						set @tsGross_3 = null
						set @tsGross_4 = null
						set @tsGross_5 = null
						set @tsGross_6 = null
						set @tsGross_7 = null
						set @tsGross_8 = null
						set @tsGross_9 = null
						set @tsGross_10 = null
						set @tsGross_11 = null
						set @tsGross_12 = null
						set @tsGross_13 = null
						set @tsGross_14 = null
						set @tsGross_15 = null
						
						set @tsAddIsCommission_1 = null
						set @tsAddIsCommission_2 = null
						set @tsAddIsCommission_3 = null
						set @tsAddIsCommission_4 = null
						set @tsAddIsCommission_5 = null
						set @tsAddIsCommission_6 = null
						set @tsAddIsCommission_7 = null
						set @tsAddIsCommission_8 = null
						set @tsAddIsCommission_9 = null
						set @tsAddIsCommission_10 = null
						set @tsAddIsCommission_11 = null
						set @tsAddIsCommission_12 = null
						set @tsAddIsCommission_13 = null
						set @tsAddIsCommission_14 = null
						set @tsAddIsCommission_15 = null
						
						set @tsAddNoCommission_1 = null
						set @tsAddNoCommission_2 = null
						set @tsAddNoCommission_3 = null
						set @tsAddNoCommission_4 = null
						set @tsAddNoCommission_5 = null
						set @tsAddNoCommission_6 = null
						set @tsAddNoCommission_7 = null
						set @tsAddNoCommission_8 = null
						set @tsAddNoCommission_9 = null
						set @tsAddNoCommission_10 = null
						set @tsAddNoCommission_11 = null
						set @tsAddNoCommission_12 = null
						set @tsAddNoCommission_13 = null
						set @tsAddNoCommission_14 = null
						set @tsAddNoCommission_15 = null
						
						set @tsMarginPercent_1 = null
						set @tsMarginPercent_2 = null
						set @tsMarginPercent_3 = null
						set @tsMarginPercent_4 = null
						set @tsMarginPercent_5 = null
						set @tsMarginPercent_6 = null
						set @tsMarginPercent_7 = null
						set @tsMarginPercent_8 = null
						set @tsMarginPercent_9 = null
						set @tsMarginPercent_10 = null
						set @tsMarginPercent_11 = null
						set @tsMarginPercent_12 = null
						set @tsMarginPercent_13 = null
						set @tsMarginPercent_14 = null
						set @tsMarginPercent_15 = null
						
						set @tsCommissionOnly_1 = null
						set @tsCommissionOnly_2 = null
						set @tsCommissionOnly_3 = null
						set @tsCommissionOnly_4 = null
						set @tsCommissionOnly_5 = null
						set @tsCommissionOnly_6 = null
						set @tsCommissionOnly_7 = null
						set @tsCommissionOnly_8 = null
						set @tsCommissionOnly_9 = null
						set @tsCommissionOnly_10 = null
						set @tsCommissionOnly_11 = null
						set @tsCommissionOnly_12 = null
						set @tsCommissionOnly_13 = null
						set @tsCommissionOnly_14 = null
						set @tsCommissionOnly_15 = null
						
						set @tsIsCommission_1 = null
						set @tsIsCommission_2 = null
						set @tsIsCommission_3 = null
						set @tsIsCommission_4 = null
						set @tsIsCommission_5 = null
						set @tsIsCommission_6 = null
						set @tsIsCommission_7 = null
						set @tsIsCommission_8 = null
						set @tsIsCommission_9 = null
						set @tsIsCommission_10 = null
						set @tsIsCommission_11 = null
						set @tsIsCommission_12 = null
						set @tsIsCommission_13 = null
						set @tsIsCommission_14 = null
						set @tsIsCommission_15 = null
						
						set @nTP_PriceKeyCurrent = @nTP_PriceKeyCurrent + 1
					end
				end
				
				--очищаем данные
				if @@fetch_status = 0
				begin
					if @nTP_PriceKeyCurrent > @nTP_PriceKeyMax
					BEGIN
						exec GetNKeys 'TP_PRICES', @NumPrices, @nTP_PriceKeyMax output
						set @nTP_PriceKeyCurrent = @nTP_PriceKeyMax - @NumPrices + 1
					END
					
					set @price_brutto = 0
					set @nPrevVariant = @variant
					set @dtPrevDate = @turdate
				end
				
				set @nTotalProgress = @nTotalProgress + @nDeltaProgress
				if @nProgressSkipCounter = @nProgressSkipLimit
				BEGIN
					update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_updatetime = GetDate() where to_key = @nPriceTourKey
					set @nProgressSkipCounter = 0
				END
				else
					set @nProgressSkipCounter = @nProgressSkipCounter + 1
			END

			--переписываем данные в таблицу tp_prices
			if @hdKey <> @prevHdKey or @@fetch_status <> 0
			begin
				set @prevHdKey = @hdKey
			end
			
				if @@fetch_status <> 0
					break	
										
				declare @margin float, @marginType int, @addCostValueIsCommission money, @addCostValueNoCommission money
				declare @scId int -- ключ найденой записи в таблице TP_ServiceComponents
				declare @scpId int -- ключ найденой записи в таблице TP_ServiceCalculateParametrs
				declare @spadId  int -- ключ найденой записи в тиблице TP_ServiePriceActualDate
				
				-- gorshkov поднял дату сюда т.к. она нужна при замене дефолтного перелета на подобранный
				set @servicedate = dateAdd(dd, @nDay-1, @turdate)
				
				-- gorshkov проверка на то что данную услугу вообще нужно расчитывать
				if @TS_ATTRIBUTE & @SERV_NOTCALCULATE = @SERV_NOTCALCULATE
				begin
					set @nNetto = 0
					set @nBrutto = 0
					set @nDiscount = 0
					set @nPDID = 0
					
				end
				else
				begin
					-- gorshkov здесь нужно проверить, что если это перелет, 
					-- то для него мы подменим параметры из TP_Services соответсвующие TF_TSKeyNew
					-- если перелет не дефолтный, т.е. TF_TSKeyNew != TF_TSKeyOld
					if (@nSvkey=1)
					begin	
						select
							@nCode = TF_CodeNew,
							@nPrKey = TF_PRKeyNew,
							@nSubCode1 = TF_SubCode1New
						from TP_Flights
						where TF_TOKey = @nPriceTourKey
						and TF_CalculatingKey = @nCalculatingKey
						and TF_CodeOld = @nCode
						and TF_PRKeyOld = @nPrKey
						and TF_SubCode1 = @nSubCode1
						and TF_SubCode2 = @nSubcode2
						and tf_days = @TI_DAYS
						and TF_Date = @servicedate
					end
					
					-- если есть ключ услуги то расчитываем, иначе проставляем null
					if (@nCode is not null)
					begin					
						set @tiDays = @TI_DAYS
						
						/*создадим структуру таблиц если ее нету*/
						exec ReCalculate_CreateServiceCalculateParametrs @TrKey, @nPriceTourKey, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nDay, @turdate, @nMen, @nDays, @nPacketkey, @titotaldays, @scId output, @scpId output
											
						declare @gross money, @addCostIsCommission money, @addCostNoCommission money, @addCostFromAdult money, @addCostFromChild money, @marginPercent money, @CommissionOnly bit, @isCommission bit, @tourRate varchar(2)
						
						/*Производим расчет стоимости услуги*/
						exec ReCalculateCosts_CalculatePriceList @scpId, @nBrutto output, @isCommission output, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @servicedate, @nDays, @sRate, @nMen, 0, @nMargin, @nMarginType, null, @nNetto, @nDiscount, @sDetailed, @sBadRate, @dtBadDate, @sDetailed, @nSPId, @TrKey, @turdate, @TI_DAYS, @IsDuration
						
						-- проверям считать ли null цены = 0					
						if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey not in (1,3)
							set @nBrutto = 0
						if @nNullCostAsZero = 1 and @nBrutto is null and @nSvkey = 1 and @nNoFlight = 0
							set @nBrutto = 0
							
						set @gross = @nBrutto
						
						/*Производим расчет наценки*/
						-- промежуточная хранимка для работы с кэшем (TP_TourMarginActualDate)
						exec ReCalculateMargins_CalculatePriceList @TrKey, @nPriceTourKey, @turdate, @margin output, @marginType output, @nSvkey, @TI_DAYS, @dtSaleDate, @nPacketkey
						set @marginPercent = @margin
						set @CommissionOnly = @marginType
						
						/*Производим расчет доплаты*/
						exec GetServiceAddCosts @TrKey, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @turdate, @TI_DAYS, @nDays, @nMen, null, null, @addCostValueIsCommission output, @addCostValueNoCommission output, @addCostFromAdult output, @addCostFromChild output, @tourRate output
						set @addCostIsCommission = @addCostValueIsCommission
						set @addCostNoCommission = @addCostValueNoCommission
					end
					else
					begin
						set @gross = null
						set @addCostIsCommission = null
						set @addCostNoCommission = null
						set @marginPercent = null
						set @CommissionOnly = null
						set @isCommission = null
					end
				
					-- запишем ключи TS_Key в таблицу (получим список услуг из которых состоит TP_Prices)
					if (@tsKey_1 is null)
					begin
						set @tsKey_1 = @scpId
						set @tsSVKey_1 = @nSvkey
						set @tsGross_1 = @gross
						set @tsAddIsCommission_1 = @addCostIsCommission
						set @tsAddNoCommission_1 = @addCostNoCommission
						set @tsMarginPercent_1 = @marginPercent
						set @tsCommissionOnly_1 = @CommissionOnly
						set @tsIsCommission_1 = @isCommission
					end
					else if (@tsKey_2 is null)
					begin
						set @tsKey_2 = @scpId
						set @tsSVKey_2 = @nSvkey
						set @tsGross_2 = @gross
						set @tsAddIsCommission_2 = @addCostIsCommission
						set @tsAddNoCommission_2 = @addCostNoCommission
						set @tsMarginPercent_2 = @marginPercent
						set @tsCommissionOnly_2 = @CommissionOnly
						set @tsIsCommission_2 = @isCommission
					end
					else if (@tsKey_3 is null)
					begin
						set @tsKey_3 = @scpId
						set @tsSVKey_3 = @nSvkey
						set @tsGross_3 = @gross
						set @tsAddIsCommission_3 = @addCostIsCommission
						set @tsAddNoCommission_3 = @addCostNoCommission
						set @tsMarginPercent_3 = @marginPercent
						set @tsCommissionOnly_3 = @CommissionOnly
						set @tsIsCommission_3 = @isCommission
					end
					else if (@tsKey_4 is null)
					begin
						set @tsKey_4 = @scpId
						set @tsSVKey_4 = @nSvkey
						set @tsGross_4 = @gross
						set @tsAddIsCommission_4 = @addCostIsCommission
						set @tsAddNoCommission_4 = @addCostNoCommission
						set @tsMarginPercent_4 = @marginPercent
						set @tsCommissionOnly_4 = @CommissionOnly
						set @tsIsCommission_4 = @isCommission
					end
					else if (@tsKey_5 is null)
					begin
						set @tsKey_5 = @scpId
						set @tsSVKey_5 = @nSvkey
						set @tsGross_5 = @gross
						set @tsAddIsCommission_5 = @addCostIsCommission
						set @tsAddNoCommission_5 = @addCostNoCommission
						set @tsMarginPercent_5 = @marginPercent
						set @tsCommissionOnly_5 = @CommissionOnly
						set @tsIsCommission_5 = @isCommission
					end
					else if (@tsKey_6 is null)
					begin
						set @tsKey_6 = @scpId
						set @tsSVKey_6 = @nSvkey
						set @tsGross_6 = @gross
						set @tsAddIsCommission_6 = @addCostIsCommission
						set @tsAddNoCommission_6 = @addCostNoCommission
						set @tsMarginPercent_6 = @marginPercent
						set @tsCommissionOnly_6 = @CommissionOnly
						set @tsIsCommission_6 = @isCommission
					end
					else if (@tsKey_7 is null)
					begin
						set @tsKey_7 = @scpId
						set @tsSVKey_7 = @nSvkey
						set @tsGross_7 = @gross
						set @tsAddIsCommission_7 = @addCostIsCommission
						set @tsAddNoCommission_7 = @addCostNoCommission
						set @tsMarginPercent_7 = @marginPercent
						set @tsCommissionOnly_7 = @CommissionOnly
						set @tsIsCommission_7 = @isCommission
					end
					else if (@tsKey_8 is null)
					begin
						set @tsKey_8 = @scpId
						set @tsSVKey_8 = @nSvkey
						set @tsGross_8 = @gross
						set @tsAddIsCommission_8 = @addCostIsCommission
						set @tsAddNoCommission_8 = @addCostNoCommission
						set @tsMarginPercent_8 = @marginPercent
						set @tsCommissionOnly_8 = @CommissionOnly
						set @tsIsCommission_8 = @isCommission
					end
					else if (@tsKey_9 is null)
					begin
						set @tsKey_9 = @scpId
						set @tsSVKey_9 = @nSvkey
						set @tsGross_9 = @gross
						set @tsAddIsCommission_9 = @addCostIsCommission
						set @tsAddNoCommission_9 = @addCostNoCommission
						set @tsMarginPercent_9 = @marginPercent
						set @tsCommissionOnly_9 = @CommissionOnly
						set @tsIsCommission_9 = @isCommission
					end
					else if (@tsKey_10 is null)
					begin
						set @tsKey_10 = @scpId
						set @tsSVKey_10 = @nSvkey
						set @tsGross_10 = @gross
						set @tsAddIsCommission_10 = @addCostIsCommission
						set @tsAddNoCommission_10 = @addCostNoCommission
						set @tsMarginPercent_10 = @marginPercent
						set @tsCommissionOnly_10 = @CommissionOnly
						set @tsIsCommission_10 = @isCommission
					end
					else if (@tsKey_11 is null)
					begin
						set @tsKey_11 = @scpId
						set @tsSVKey_11 = @nSvkey
						set @tsGross_11 = @gross
						set @tsAddIsCommission_11 = @addCostIsCommission
						set @tsAddNoCommission_11 = @addCostNoCommission
						set @tsMarginPercent_11 = @marginPercent
						set @tsCommissionOnly_11 = @CommissionOnly
						set @tsIsCommission_11 = @isCommission
					end
					else if (@tsKey_12 is null)
					begin
						set @tsKey_12 = @scpId
						set @tsSVKey_12 = @nSvkey
						set @tsGross_12 = @gross
						set @tsAddIsCommission_12 = @addCostIsCommission
						set @tsAddNoCommission_12 = @addCostNoCommission
						set @tsMarginPercent_12 = @marginPercent
						set @tsCommissionOnly_12 = @CommissionOnly
						set @tsIsCommission_12 = @isCommission
					end
					else if (@tsKey_13 is null)
					begin
						set @tsKey_13 = @scpId
						set @tsSVKey_13 = @nSvkey
						set @tsGross_13 = @gross
						set @tsAddIsCommission_13 = @addCostIsCommission
						set @tsAddNoCommission_13 = @addCostNoCommission
						set @tsMarginPercent_13 = @marginPercent
						set @tsCommissionOnly_13 = @CommissionOnly
						set @tsIsCommission_13 = @isCommission
					end
					else if (@tsKey_14 is null)
					begin
						set @tsKey_14 = @scpId
						set @tsSVKey_14 = @nSvkey
						set @tsGross_14 = @gross
						set @tsAddIsCommission_14 = @addCostIsCommission
						set @tsAddNoCommission_14 = @addCostNoCommission
						set @tsMarginPercent_14 = @marginPercent
						set @tsCommissionOnly_14 = @CommissionOnly
						set @tsIsCommission_14 = @isCommission
					end
					else if (@tsKey_15 is null)
					begin
						set @tsKey_15 = @scpId
						set @tsSVKey_15 = @nSvkey
						set @tsGross_15 = @gross
						set @tsAddIsCommission_15 = @addCostIsCommission
						set @tsAddNoCommission_15 = @addCostNoCommission
						set @tsMarginPercent_15 = @marginPercent
						set @tsCommissionOnly_15 = @CommissionOnly
						set @tsIsCommission_15 = @isCommission
					end
				end
			fetch next from serviceCursor into @hdKey, @nServiceKey, @variant, @turdate, @nSvkey, @nCode, @nSubcode1, @nSubcode2, @nPrkey, @nPacketkey, @nDay, @nDays, @sRate, @nMen, @nTempGross, @tsCheckMargin, @tdCheckMargin, @TI_DAYS, @TS_CTKEY, @TS_ATTRIBUTE, @tiCtKeyFrom, @IsDuration, @titotaldays
		END
		close serviceCursor
		deallocate serviceCursor
		
		print 'Расчет цен END: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()

		----------------------------------------------------- возвращаем обратно цены ------------------------------------------------------

		Set @nTotalProgress = 97
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
		
		--удаление из веба
		if (@nIsEnabled = 1)
		begin
			if (@isPriceListPluginRecalculation = 0)
				EXEC ClearMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
			else
				EXEC ClearMasterWebSearchFields @nPriceTourKey, null
		end

		-- удаляем старые цены
		
		-- запомним ключи цен которые потом нужно будет удалить из TP_PriceComponents
		declare @tpKeysForDelete table
		(
			xtp_key int
		)
		
		insert into @tpKeysForDelete
		select tp_key from tp_prices with(nolock)
		where tp_tokey = @nPriceTourKey and 
			tp_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tp_DateBegin in (select td_date from TP_TurDates with(nolock) where td_tokey = @nPriceTourKey and TD_Update = @nUpdate)
		union
		select tpd_tpkey from dbo.TP_PricesDeleted with(nolock)
		where tpd_tokey = @nPriceTourKey and 
			tpd_tikey in (select ti_key from tp_lists with(nolock) where ti_tokey = @nPriceTourKey and ti_update = @nUpdate) and
			tpd_DateBegin in (select td_date from TP_TurDates with(nolock) where td_tokey = @nPriceTourKey and TD_Update = @nUpdate)
		
		insert into TP_PricesCleaner(PC_TRKEY, PC_TOKEY, PC_TPKEY, PC_CalculatingKey)
		select @trKey, TP_TOKEY, TP_KEY, @nCalculatingKey from dbo.TP_Prices with(nolock)
		where TP_Key in (select xtp_key from @tpKeysForDelete)		

		delete from dbo.TP_Prices with(rowlock)
		where TP_Key in (select xtp_key from @tpKeysForDelete)
		
		delete from dbo.TP_PricesDeleted with(rowlock)
		where TPD_TPKey in (select xtp_key from @tpKeysForDelete)
		
		delete from dbo.TP_PriceComponents with(rowlock)
		where PC_TPKey in (select xtp_key from @tpKeysForDelete)
		
		-- удалим цены которые не посчитались
		delete #TP_Prices
		where xTP_Gross is null
			
		INSERT INTO TP_Prices with(rowlock) (tp_key, tp_tokey, tp_dateBegin, tp_DateEnd, TP_Gross, TP_TIKey, TP_CalculatingKey) 
		select xtp_key, xtp_tokey, xtp_dateBegin, xtp_DateEnd, CEILING(xTP_Gross), xTP_TIKey, xTP_CalculatingKey 
		from #TP_Prices
		
		-- заносим детализацию по посчитанному туру
		declare @countPrices int  
		declare @countInsert int
		
		select @countPrices = COUNT(*) from #TP_Prices
		
		while (@countInsert < @countPrices)
		begin	
		
			insert into TP_PriceComponents with(rowlock) (PC_TIKey, PC_TOKey, PC_TRKey, PC_TourDate, PC_TPKey, PC_Days, PC_Rate, PC_HotelKey, PC_DepartureKey
			, SCPId_1, SCPId_2, SCPId_3, SCPId_4, SCPId_5, SCPId_6, SCPId_7, SCPId_8, SCPId_9, SCPId_10, SCPId_11, SCPId_12, SCPId_13, SCPId_14, SCPId_15
			, SVKey_1, SVKey_2, SVKey_3, SVKey_4, SVKey_5, SVKey_6, SVKey_7, SVKey_8, SVKey_9, SVKey_10, SVKey_11, SVKey_12, SVKey_13, SVKey_14, SVKey_15
			, Gross_1, Gross_2, Gross_3, Gross_4, Gross_5, Gross_6, Gross_7, Gross_8, Gross_9, Gross_10, Gross_11, Gross_12, Gross_13, Gross_14, Gross_15
			, AddCostIsCommission_1, AddCostIsCommission_2, AddCostIsCommission_3, AddCostIsCommission_4, AddCostIsCommission_5, AddCostIsCommission_6, AddCostIsCommission_7, AddCostIsCommission_8, AddCostIsCommission_9, AddCostIsCommission_10, AddCostIsCommission_11, AddCostIsCommission_12, AddCostIsCommission_13, AddCostIsCommission_14, AddCostIsCommission_15
			, AddCostNoCommission_1, AddCostNoCommission_2, AddCostNoCommission_3, AddCostNoCommission_4, AddCostNoCommission_5, AddCostNoCommission_6, AddCostNoCommission_7, AddCostNoCommission_8, AddCostNoCommission_9, AddCostNoCommission_10, AddCostNoCommission_11, AddCostNoCommission_12, AddCostNoCommission_13, AddCostNoCommission_14, AddCostNoCommission_15
			, MarginPercent_1, MarginPercent_2, MarginPercent_3, MarginPercent_4, MarginPercent_5, MarginPercent_6, MarginPercent_7, MarginPercent_8, MarginPercent_9, MarginPercent_10, MarginPercent_11, MarginPercent_12, MarginPercent_13, MarginPercent_14, MarginPercent_15
			, CommissionOnly_1, CommissionOnly_2, CommissionOnly_3, CommissionOnly_4, CommissionOnly_5, CommissionOnly_6, CommissionOnly_7, CommissionOnly_8, CommissionOnly_9, CommissionOnly_10, CommissionOnly_11, CommissionOnly_12, CommissionOnly_13, CommissionOnly_14, CommissionOnly_15
			, IsCommission_1, IsCommission_2, IsCommission_3, IsCommission_4, IsCommission_5, IsCommission_6, IsCommission_7, IsCommission_8, IsCommission_9, IsCommission_10, IsCommission_11, IsCommission_12, IsCommission_13, IsCommission_14, IsCommission_15)
			select xTP_TIKey, xtp_tokey, @TrKey, xtp_dateBegin, xtp_key, xTP_Days, xTP_Rate, xTP_HotelKey, xTP_DepartureKey
			, xSCPId_1, xSCPId_2, xSCPId_3, xSCPId_4, xSCPId_5, xSCPId_6, xSCPId_7, xSCPId_8, xSCPId_9, xSCPId_10, xSCPId_11, xSCPId_12, xSCPId_13, xSCPId_14, xSCPId_15
			, xSvKey_1, xSvKey_2, xSvKey_3, xSvKey_4, xSvKey_5, xSvKey_6, xSvKey_7, xSvKey_8, xSvKey_9, xSvKey_10, xSvKey_11, xSvKey_12, xSvKey_13, xSvKey_14, xSvKey_15
			, xGross_1, xGross_2, xGross_3, xGross_4, xGross_5, xGross_6, xGross_7, xGross_8, xGross_9, xGross_10, xGross_11, xGross_12, xGross_13, xGross_14, xGross_15
			, xAddCostIsCommission_1, xAddCostIsCommission_2, xAddCostIsCommission_3, xAddCostIsCommission_4, xAddCostIsCommission_5, xAddCostIsCommission_6, xAddCostIsCommission_7, xAddCostIsCommission_8, xAddCostIsCommission_9, xAddCostIsCommission_10, xAddCostIsCommission_11, xAddCostIsCommission_12, xAddCostIsCommission_13, xAddCostIsCommission_14, xAddCostIsCommission_15
			, xAddCostNoCommission_1, xAddCostNoCommission_2, xAddCostNoCommission_3, xAddCostNoCommission_4, xAddCostNoCommission_5, xAddCostNoCommission_6, xAddCostNoCommission_7, xAddCostNoCommission_8, xAddCostNoCommission_9, xAddCostNoCommission_10, xAddCostNoCommission_11, xAddCostNoCommission_12, xAddCostNoCommission_13, xAddCostNoCommission_14, xAddCostNoCommission_15
			, xMarginPercent_1, xMarginPercent_2, xMarginPercent_3, xMarginPercent_4, xMarginPercent_5, xMarginPercent_6, xMarginPercent_7, xMarginPercent_8, xMarginPercent_9, xMarginPercent_10, xMarginPercent_11, xMarginPercent_12, xMarginPercent_13, xMarginPercent_14, xMarginPercent_15
			, xCommissionOnly_1, xCommissionOnly_2, xCommissionOnly_3, xCommissionOnly_4, xCommissionOnly_5, xCommissionOnly_6, xCommissionOnly_7, xCommissionOnly_8, xCommissionOnly_9, xCommissionOnly_10, xCommissionOnly_11, xCommissionOnly_12, xCommissionOnly_13, xCommissionOnly_14, xCommissionOnly_15
			, xIsCommission_1, xIsCommission_2, xIsCommission_3, xIsCommission_4, xIsCommission_5, xIsCommission_6, xIsCommission_7, xIsCommission_8, xIsCommission_9, xIsCommission_10, xIsCommission_11, xIsCommission_12, xIsCommission_13, xIsCommission_14, xIsCommission_15
			from #TP_Prices where xTP_OrderKey < @countInsert + 100000 and xTP_OrderKey >= @countInsert

			set @countInsert = @countInsert + 100000
			
		end
				
		-----------------------------------------------------КОНЕЦ возвращаем обратно цены ------------------------------------------------------
		Set @nTotalProgress = 98
		update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey

		update tp_lists with(rowlock) set ti_update = 0 where ti_tokey = @nPriceTourKey
		update tp_turdates with(rowlock) set td_update = 0, td_checkmargin = 0 where td_tokey = @nPriceTourKey
		Set @nTotalProgress = 99
		update tp_tours with(rowlock) set to_progress = @nTotalProgress, to_update = 0, to_updatetime = GetDate(),
							TO_CalculateDateEnd = GetDate(), TO_PriceCount = (Select Count(*) 
			From TP_Prices with(nolock) Where TP_ToKey = to_key) where to_key = @nPriceTourKey
		update tp_services with(rowlock) set ts_checkmargin = 0 where ts_tokey = @nPriceTourKey
		
		print 'Запись результатов: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	END

	update CalculatingPriceLists with(rowlock) set CP_Status = 0, CP_CreateDate = GetDate(), CP_StartTime = null where CP_PriceTourKey = @nPriceTourKey

	--Заполнение полей в таблице tp_lists
	declare @toKey int, @add int
	set @toKey = @nPriceTourKey
	set @add = @nUpdate

	update tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key),
			ti_nights = dbo.mwGetTiNights(ti_key)
	where
		ti_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey
	
	update tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and ti_tokey = @toKey and tl_tokey = @toKey
		and ts_tokey = @toKey and ti_CalculatingKey = @nCalculatingKey
	------------------------------------------------------------------------------

	Set @nTotalProgress = 100
	update tp_tours with(rowlock) set to_progress = @nTotalProgress where to_key = @nPriceTourKey
	set DATEFIRST @nDateFirst
	
	select @nIsEnabled = TO_IsEnabled from TP_Tours where TO_Key = @nPriceTourKey
	
	
	--Засекаем время окончания рассчета begin
	declare @endPriceCalculate datetime
	set @endPriceCalculate = GETDATE()
	SET @sHI_Text = CONVERT(varchar(30),@endPriceCalculate,121)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11010, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Засекаем время окончания рассчета end

	--Записываем кол-во рассчитанных цен begin
	SET @sHI_Text = CONVERT(varchar(10),@calcPricesCount)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11011, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем кол-во рассчитанных цен end

	--Записываем скорость расчета цен begin
	declare @calculatingSpeed decimal(10,2), @seconds int
	set @seconds = datediff(ss,@beginPriceCalculate,@endPriceCalculate)
	if @seconds = 0
		set @seconds = 1
	set @calculatingSpeed = @calcPricesCount / @seconds
	SET @sHI_Text = CONVERT(varchar(10),@calculatingSpeed)
	EXECUTE dbo.InsertHistoryDetail @nHIID , 11012, null, @sHI_Text, null, @nUpdate, null, null, 0
	--Записываем скорость расчета цен end
	

	if (@nIsEnabled = 1)
	begin
		if (@isPriceListPluginRecalculation = 0)
			EXEC FillMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
		else
			EXEC FillMasterWebSearchFields @nPriceTourKey, @nCalculatingKey
	end
	
	print 'Выставление в инет: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	Return 0
END

go 

grant exec on CalculatePriceListDynamic to public

go
/*********************************************************************/
/* end sp_CalculatePriceListDynamic.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CheckDoubleDogovor.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='CheckDoubleDogovor')
	drop proc dbo.CheckDoubleDogovor
go

create procedure [dbo].[CheckDoubleDogovor]  
	--<VERSION>2009.2.19.0<VERSION/>
	--<DATA>2013-04-19<DATA/>
	@TourDate varchar (10),
	@TourDuration int,
	@LastName varchar (25),
	@FirstName varchar (25),
	@Sex int,	
	@HotelKey int,
	@HotelStartDate varchar (10) = null,
	@HotelEndDate varchar (10) = null,
	@Birthday varchar (10) = null,
	@PassportType varchar(5) = null,
	@PassportNum varchar(13) = null
AS
begin
-- Task 13501 19.04.2013 kolbeshkin: сделано READ UNCOMMITTED
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
BEGIN TRANSACTION
    --CRM01804K4X8 27.07.2012 kolbeshkin: переделал хранимку проверки дублирования туристов
	SET @LastName = REPLACE (@LastName,'''','')
	SET @FirstName = REPLACE (@FirstName,'''','')
	-- проверяем только: 
	-- 1.Взрослых
	-- 2.Если есть отель, т.к. остальные услуги могут быть по 2 и более и разнесены по разным путевкам
	IF @Sex NOT IN (0,1) OR @HotelKey < 0 OR @HotelStartDate IS NULL OR @HotelEndDate IS NULL
		RETURN
	-- Сравнение:
	-- 1.Фамилия
	-- 2.Имя
	-- 3.Пересекаются ли даты тура
	-- 4.Пол
	-- 5.Существует ли проживание и пересекаются ли его даты
	DECLARE @sql nvarchar(max)
	SET @sql = 'SELECT TU_DGCOD, TU_KEY 
			From [dbo].[tbl_turist] 
			where RTRIM(LTRIM((UPPER(TU_NAMERUS)))) = RTRIM(LTRIM((UPPER(''' + @LastName + ''')))) 
			AND RTRIM(LTRIM((UPPER(TU_FNAMERUS)))) = RTRIM(LTRIM((UPPER(''' + @FirstName + ''')))) 
			AND EXISTS (SELECT DG_KEY 
						FROM tbl_dogovor 
						where DG_CODE = TU_DGCOD
						and (''' + @TourDate + ''' between DG_TURDATE and DATEADD(DAY, DG_NDAY - 1, DG_TURDATE)
								or DG_TURDATE between ''' + @TourDate + ''' and DATEADD(DAY, ' + CAST(@TourDuration AS varchar(3)) + ' - 1, ''' + @TourDate + '''))) 
			AND ISNULL(TU_SEX,0) in (0,1) AND ISNULL(TU_SEX,0) = ' + CAST(@Sex AS varchar(2)) + '
			AND EXISTS (SELECT 1 FROM tbl_DogovorList,TuristService WHERE DL_SVKey=3 and TU_DLKey=DL_Key and DL_DGCOD=TU_DGCOD and TU_TUKey=TU_Key
						AND (''' + @HotelStartDate + ''' between DL_DATEBEG and DATEADD(DAY,-1,DL_DATEEND) 
							OR DL_DATEBEG between ''' + @HotelStartDate + ''' and DATEADD(DAY,-1,''' + @HotelEndDate + ''')) )'
	-- 6.Дата рождения (если задана у бронирующего)						
	IF @Birthday IS NOT NULL
		SET @sql = @sql + '
		 AND (TU_BIRTHDAY IS NULL OR TU_BIRTHDAY = ''' + @Birthday + ''')'
	-- 7.Серия паспорта (если задана у бронирующего)			
	IF @PassportType IS NOT NULL
		SET @sql = @sql + '
		 AND (TU_PASPORTTYPE IS NULL OR TU_PASPORTTYPE = ''' + @PassportType + ''')'
	-- 8.Серия паспорта (если задана у бронирующего)	
	IF @PassportNum IS NOT NULL
		SET @sql = @sql + '
		 AND (TU_PASPORTNUM IS NULL OR TU_PASPORTNUM = ''' + @PassportNum + ''')'
		
 --print @sql
 EXECUTE sp_executesql @sql
 COMMIT TRANSACTION
end
go

grant exec on [dbo].[CheckDoubleDogovor] to public
go


/*********************************************************************/
/* end sp_CheckDoubleDogovor.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CheckQuotaExist.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CheckQuotaExist]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CheckQuotaExist]
GO

CREATE PROCEDURE [dbo].[CheckQuotaExist]
(
--<DATE>2013-05-20</VERSION>
--<VERSION>2009.2.5</VERSION>
@SVKey int,
	@Code int,
	@SubCode1 int,
	@DateBeg datetime, 
	@DateEnd datetime,
	@DateFirst datetime,
	@PRKey int,
	@AgentKey int,
	@TourDuration smallint,
	@FilialKey int,				--пока не обрабатывается 
	@CityDepartment int,		--пока не обрабатывается 
	--возвращаемые параметры
	--при наличии Stop-Sale возвращаем

--	Убрал, не нужны более
--	@StopExist int output, --ключ стопа
--	@StopDate smalldatetime output, --дата стопа 

	--переехали из [CheckQuotaInfo]
	@TypeOfResult smallint =null,			
	/*	тип результата 
			0-возвращение полной таблицы данных (без фильтров) используется в экране проверки мест, 
			1-информация о первой подходящей квоте, 
			2-максимальное доступное число мест по всем квотам */	
	@Pax smallint =null,					--кол-во туристов по услуге
	--возвращаемые параметры, в случае @TypeOfResult=2 (попытка проверить возможность постановки услуги на квоту)
	@Wait smallint =null, --в случае не надо снимать квоту,
	@Quota_CheckState smallint =null output,
	/*	0 - RQ (можно бронировать только под запрос)
		1 - OK (можно посадить на квоту)
		2 - STOP (стоп, мест на сущ.квотах недостаточно)
		3 - RELEASE (стопа нет, есть релиз, мест на сущ.квотах недостаточно)	*/
	@Quota_CheckDate smalldatetime =null output,
	/*  если @Quota_Check=2, то в этом поле дата на которую стоит стоп */
	@Quota_CheckInfo smallint =null output,
	/*  если @Quota_Check in (0,3), то в этом поле сколько мест не хватает */

	--возвращаемые параметры, в случае @TypeOfResult=1 (возвращаем характеристики оптимальной квоты)
	@Quota_Count int =null output,
	@Quota_AgentKey int =null output,
	@Quota_Type smallint =null output,
	@Quota_ByRoom bit =null output,
	@Quota_PRKey int =null output, 
	@Quota_FilialKey int =null output,
	@Quota_CityDepartments int =null output,
	@Quota_Duration smallint =null output,
	@Quota_SubCode1 int =null output,
	@Quota_SubCode2 int =null output
	
) AS

if (@Wait=1 AND @TypeOfResult=2)
BEGIN
	set @Quota_CheckState=0
	return 0
end
declare @quoted smallint
select @quoted = isnull(SV_Quoted, 0) from Service where SV_Key = @SVKEY
if (@quoted = 0)
BEGIN
	set @Quota_CheckState=1
	return 0
end
Set @DateFirst=ISNULL(@DateFirst,@DateBeg)

declare @LimitAgentQuote bit, @LimitQuoteLong bit
set @LimitAgentQuote = 0
set @LimitQuoteLong = 0

IF EXISTS(SELECT top 1 1 FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitAgentQuote' and SS_ParmValue = 1)
	set @LimitAgentQuote = 1
IF EXISTS(SELECT top 1 1 FROM dbo.SystemSettings WHERE SS_ParmName='SYSLimitQuoteLong' and SS_ParmValue = 1)
	set @LimitQuoteLong = 1

--Проверка отсутствия Стопа
declare @StopExist int, @StopDate smalldatetime

exec CheckStopInfo 1,null,@SVKey,@Code,@SubCode1,@PRKey,@DateBeg,@DateEnd,@StopExist output,@StopDate output

declare @Q_QTID int, @Q_Partner int, @Q_ByRoom int, @Q_Type int, @Q_Release int, 
		@Q_FilialKey int, @Q_CityDepartments int, @Q_AgentKey int, @Q_Duration smallint,
		@Q_Places smallint, @ServiceWithDuration bit, @SubQuery varchar(5000), @Query varchar(5000),
		@Q_SubCode1 int, @Q_SubCode2 int, @Q_QTID_Prev int, @DaysCount int, @Q_IsByCheckIn smallint

SET @DaysCount=DATEDIFF(DAY,@DateBeg,@DateEnd)+1
SET @Q_QTID_Prev=0

SELECT @ServiceWithDuration=ISNULL(SV_IsDuration,0) FROM [Service] WHERE SV_Key=@SVKey
IF @ServiceWithDuration=1
	SET @TourDuration=DATEDIFF(DAY,@DateBeg,@DateEnd)+1

-- karimbaeva 28-04-2012 чтобы не выводилось сообщение о недостатке квоты на дополнительное место, если квота последняя и размещение на номер 
IF @SVKey=3 and exists(SELECT TOP 1 1 FROM QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QO_QTID=QT_ID
	and HR_Key=@SubCode1 and HR_MAIN=0 and QT_ByRoom = 1 and (QP_AgentKey=@AgentKey or QP_AgentKey is null)
	and (QT_PRKey=@PRKey or QT_PRKey=0) and QO_Code=@Code and QD_Date between @DateBeg and @DateEnd and QP_Date = QD_Date
	and QD_Busy = QD_Places
	and QP_ID in (select SD_QPID
					from ServiceByDate as SBD2 join RoomPlaces as RP2 on SBD2.SD_RPID = RP2.RP_ID
					where RP2.RP_Type = 0))
begin
	set @Quota_CheckInfo = 0
	--Set @Quota_CheckState = 1
	If @StopExist > 0
	BEGIN
		Set @Quota_CheckState = 2						
		Set @Quota_CheckDate = @StopDate
		return 0
	END
end
	
-- создаем таблицу со стопами
CREATE TABLE #StopSaleTemp
(SST_Code int, SST_SubCode1 int, SST_SubCode2 int, SST_QOID int, SST_PRKey int, SST_Date smalldatetime,
SST_QDID int, SST_Type smallint, SST_State smallint, SST_Comment varchar(255)
)

-- Task 9148 31.10.2012 ошибка при преобразовании datetime в smalldatetime
if @DateBeg<'1900-01-01'
	set @DateBeg='1900-01-01'
--
INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails NULL, @Q_QTID, @DateBeg, @DaysCount, null, null, @SVKey, @Code, @SubCode1, @PRKey

IF @SVKey=3
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms
		where	QO_SVKey=@SVKey and QO_Code=@Code and HR_Key=@SubCode1 and (QO_SubCode1=HR_RMKey or QO_SubCode1=0) and (QO_SubCode2=HR_RCKey or QO_SubCode2=0) and QO_QTID=QT_ID
			and QD_QTID=QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_Date = QD_Date
			and QP_QDID = QD_ID
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
			and not exists(select top 1 1
							from #StopSaleTemp 
							where SST_PRKey = QT_PRKey
							and SST_QOID = QO_ID
							and SST_QDID = QD_ID
							and SST_Date = QD_Date
							and SST_State is not null)
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		--having Count(*) = (@Days+1)
		order by QP_AgentKey DESC, QT_PRKey DESC
END
ELSE
BEGIN
	declare CheckQuotaExistСursor cursor for 
		select	DISTINCT QT_ID, QT_PRKey, QT_ByRoom, 
				QD_Type, 
				QP_FilialKey, QP_CityDepartments, QP_AgentKey, CASE WHEN QP_Durations='' THEN 0 ELSE @TourDuration END, QP_FilialKey, QP_CityDepartments, 
				QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		from	QuotaObjects, Quotas, QuotaDetails, QuotaParts
		where	
			QO_SVKey = @SVKey and QO_Code = @Code and (QO_SubCode1=@SubCode1 or QO_SubCode1=0) and QO_QTID=QT_ID
			and QD_QTID = QT_ID and QD_Date between @DateBeg and @DateEnd
			and QP_QDID = QD_ID
			and QP_Date = QD_Date
			and (QP_AgentKey=@AgentKey or QP_AgentKey is null) 
			and (QT_PRKey=@PRKey or QT_PRKey=0)
			and QP_IsDeleted is null and QD_IsDeleted is null	
			and (QP_Durations = '' or @TourDuration in (Select QL_Duration From QuotaLimitations Where QL_QPID=QP_ID))
			and not exists(select top 1 1
							from #StopSaleTemp 
							where SST_PRKey = QT_PRKey
							and SST_QOID = QO_ID
							and SST_QDID = QD_ID
							and SST_Date = QD_Date
							and SST_State is not null)
		group by QT_ID, QT_PRKey, QT_ByRoom, QD_Type, QP_FilialKey, QP_CityDepartments, QP_AgentKey, QP_Durations, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn
		order by QP_AgentKey DESC, QT_PRKey DESC
END
open CheckQuotaExistСursor
fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
									@Q_Type, 
									@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
									@Q_SubCode1, @Q_SubCode2, @Q_IsByCheckIn

CREATE TABLE #Tbl (	TMP_Count int, TMP_QTID int, TMP_AgentKey int, TMP_Type smallint, TMP_Date datetime, 
					TMP_ByRoom bit, TMP_Release smallint, TMP_Partner int, TMP_Durations nvarchar(25) COLLATE Cyrillic_General_CI_AS, TMP_FilialKey int, 
					TMP_CityDepartments int, TMP_SubCode1 int, TMP_SubCode2 int, TMP_IsByCheckIn smallint, TMP_DurationsCheckIn nvarchar(25))

While (@@fetch_status = 0)
BEGIN
	SET @SubQuery = 'QD_QTID = QT_ID and QP_QDID = QD_ID 
		and QT_ID=' + CAST(@Q_QTID as varchar(10)) + '
		and QT_ByRoom=' + CAST(@Q_ByRoom as varchar(1)) + ' 
		and QD_Type=' + CAST(@Q_Type as varchar(1)) + ' 
		and QO_SVKey=' + CAST(@SVKey as varchar(10)) + '
		and QO_Code=' + CAST(@Code as varchar(10)) + ' 
		and QO_SubCode1=' + CAST(@Q_SubCode1 as varchar(10)) + ' 
		and QO_SubCode2=' + CAST(@Q_SubCode2 as varchar(10)) + '	
		and (QD_Date between ''' + CAST((@DateBeg) as varchar(20)) + ''' and ''' + CAST(@DateEnd as varchar(20)) + ''') and QD_IsDeleted is null'

	IF @Q_FilialKey is null
		SET @SubQuery = @SubQuery + ' and QP_FilialKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_FilialKey=' + CAST(@Q_FilialKey as varchar(10))
	IF @Q_CityDepartments is null
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_CityDepartments=' + CAST(@Q_CityDepartments as varchar(10))
	IF @Q_AgentKey is null
		SET @SubQuery = @SubQuery + ' and QP_AgentKey is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_AgentKey=' + CAST(@Q_AgentKey as varchar(10))		
	IF @Q_Duration=0
		SET @SubQuery = @SubQuery + ' and QP_Durations = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QP_ID in (Select QL_QPID From QuotaLimitations Where QL_Duration=' + CAST(@Q_Duration as varchar(5)) + ') '
	IF @Q_Partner =''
		SET @SubQuery = @SubQuery + ' and QT_PRKey = '''' '
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_PRKey=' + CAST(@Q_Partner as varchar(10))
	IF @Q_IsByCheckIn is null
		SET @SubQuery = @SubQuery + ' and QT_IsByCheckIn is null'
	ELSE
		SET @SubQuery = @SubQuery + ' and QT_IsByCheckIn=' + CAST(@Q_IsByCheckIn as varchar(10))

	declare @SubCode2 int
	
	IF (@Q_IsByCheckIn = 0 or @Q_IsByCheckIn is null)
		SET @Query = 
		'
		INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
							TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
							TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn)
			SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
					QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
					QP_CityDepartments, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn, '''' 
			FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
			WHERE	QO_ID = SST_QOID and QD_ID = SST_QDID and SST_State is null and ' + @SubQuery
	
	IF @Q_IsByCheckIn = 1
		SET @Query = 
		'
		INSERT INTO #Tbl (	TMP_Count, TMP_QTID, TMP_AgentKey, TMP_Type, TMP_Date, 
							TMP_ByRoom, TMP_Release, TMP_Partner, TMP_Durations, TMP_FilialKey, 
							TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn)
			SELECT	DISTINCT QP_Places-QP_Busy as d1, QT_ID, QP_AgentKey, QD_Type, QD_Date, 
					QT_ByRoom, QD_Release, QT_PRKey, QP_Durations, QP_FilialKey,
					QP_CityDepartments, QO_SubCode1, QO_SubCode2, QT_IsByCheckIn, convert(nvarchar(max) ,QD_LongMin) + ''-'' + convert(nvarchar(max) ,QD_LongMax)
			FROM	Quotas QT1, QuotaDetails QD1, QuotaParts QP1, QuotaObjects QO1, #StopSaleTemp
			WHERE	QO_ID = SST_QOID and QD_ID = SST_QDID and SST_State is null and ' + @SubQuery
			
	print @Query

	exec (@Query)
	
	SET @Q_QTID_Prev=@Q_QTID
	fetch CheckQuotaExistСursor into	@Q_QTID, @Q_Partner, @Q_ByRoom, 
										@Q_Type, 
										@Q_FilialKey, @Q_CityDepartments, @Q_AgentKey, @Q_Duration, @Q_FilialKey, @Q_CityDepartments, 
										@Q_SubCode1, @Q_SubCode2, @Q_IsByCheckIn	
END

--select * from #tbl

/*
Обработаем настройки
						При наличии квоты на агенство, запретить бронирование из общей квоты
						При наличии квоты на продолжительность, запретить бронировать из квоты без продолжительности
*/

-- если стоят 2 настройки и параметры пришли и на продолжительность и на агенство и есть такая квота сразу на агенство и на продолжительность,
-- то удалим остальные
if ((@LimitAgentQuote = 1) and (@LimitQuoteLong = 1))
begin
	if ((isnull(@AgentKey, 0) != 0) and (isnull(@TourDuration, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey and isnull(TMP_Durations, 0) = @TourDuration)))
	begin
		delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey or isnull(TMP_Durations, 0) != @TourDuration
	end
	
	--бывают случаии когда обе настройки включены, но найти нужно только по одному из параметров
	if (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey))
	begin
		delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey
	end
	if (exists (select top 1 1 from #Tbl where isnull(TMP_Durations, 0) = @TourDuration))
	begin
		delete #Tbl where isnull(TMP_Durations, 0) != @TourDuration
	end
end
-- если стоит настройка только на агенство и нам пришол параметром агенство и квота на агенство есть,
-- то удалим остальные
else if ((@LimitAgentQuote = 1) and (@LimitQuoteLong = 0) and (isnull(@AgentKey, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_AgentKey, 0) = @AgentKey)))
begin
	delete #Tbl where isnull(TMP_AgentKey, 0) != @AgentKey
end
-- если есть настройка на продолжительность, и нам пришол параметр продолжительность и есть квота на продолжительность,
-- то удалим остальные
else if ((@LimitAgentQuote = 0) and (@LimitQuoteLong = 1) and (isnull(@TourDuration, 0) != 0) and (exists (select top 1 1 from #Tbl where isnull(TMP_Durations, 0) = @TourDuration)))
begin
	delete #Tbl where isnull(TMP_Durations, 0) != @TourDuration	
end

DELETE FROM #Tbl WHERE exists 
		(SELECT top 1 1  FROM QuotaParts QP2, QuotaDetails QD2, Quotas QT2 
		WHERE	QT_ID=QD_QTID and QP_QDID=QD_ID
				and QD_Type=TMP_Type and QT_ByRoom=TMP_ByRoom
				and QD_IsDeleted is null and QP_IsDeleted is null
				and QT_ID=TMP_QTID
				and ISNULL(QP_FilialKey,-1)=ISNULL(TMP_FilialKey,-1) and ISNULL(QP_CityDepartments,-1)=ISNULL(TMP_CityDepartments,-1)
				and ISNULL(QP_AgentKey,-1)=ISNULL(TMP_AgentKey,-1) and ISNULL(QT_PRKey,-1)=ISNULL(TMP_Partner,-1)
				and QP_Durations=TMP_Durations and ISNULL(QD_Release,-1)=ISNULL(TMP_Release,-1)
				and QD_Date=@DateFirst and (QP_IsNotCheckIn=1 or QP_CheckInPlaces-QP_CheckInPlacesBusy <= 0))

close CheckQuotaExistСursor
deallocate CheckQuotaExistСursor

DECLARE @Tbl_DQ Table 
 		(TMP_Count smallint, TMP_AgentKey int, TMP_Type smallint, TMP_ByRoom bit, 
				TMP_Partner int, TMP_Duration smallint, TMP_FilialKey int, TMP_CityDepartments int,
				TMP_SubCode1 int, TMP_SubCode2 int, TMP_ReleaseIgnore bit, TMP_IsByCheckIn smallint, TMP_DurationsCheckIn nvarchar(25))

DECLARE @DATETEMP datetime
SET @DATETEMP = GetDate()
-- Разрешим посадить в квоту с релиз периодом 0 текущим числом
set @DATETEMP = DATEADD(day, -1, @DATETEMP)
if exists (select top 1 1 from systemsettings where SS_ParmName='SYSCheckQuotaRelease' and SS_ParmValue=1) OR exists (select top 1 1 from systemsettings where SS_ParmName='SYSAddQuotaPastPermit' and SS_ParmValue=1 and @DateBeg < @DATETEMP)
	SET @DATETEMP='01-JAN-1900'
INSERT INTO @Tbl_DQ
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, 0 as TMP_ReleaseIgnore, TMP_IsByCheckIn, TMP_DurationsCheckIn FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
		FROM	#Tbl
		WHERE	(TMP_Date >= @DATETEMP + ISNULL(TMP_Release,0) OR (TMP_Date < GETDATE() - 1))
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1
	UNION
	SELECT	MIN(d1) as TMP_Count, TMP_AgentKey, TMP_Type, TMP_ByRoom, TMP_Partner, 
			d2 as TMP_Duration, TMP_FilialKey, TMP_CityDepartments, TMP_SubCode1, TMP_SubCode2, 1 as TMP_ReleaseIgnore, TMP_IsByCheckIn, TMP_DurationsCheckIn FROM
		(SELECT	SUM(TMP_Count) as d1, TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner, 
				TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END as d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
		FROM	#Tbl
		GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
					TMP_FilialKey, TMP_CityDepartments, TMP_Date, CASE WHEN TMP_Durations='' THEN 0 ELSE @TourDuration END, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn) D
	GROUP BY	TMP_Type, TMP_ByRoom, TMP_AgentKey, TMP_Partner,
				TMP_FilialKey, TMP_CityDepartments, d2, TMP_SubCode1, TMP_SubCode2, TMP_IsByCheckIn, TMP_DurationsCheckIn
	HAVING count(*)=DATEDIFF(day,@DateBeg,@DateEnd)+1


/*
Комментарии к запросу выше!!!
Заполняем таблицу квот, которые могут нам подойти (группируя квоты по всем разделяемым параметрам, кроме релиз-периода
Все строки в таблице дублируются (важно! 11-ый параметр): 
	квоты с учетом релиз-периода (0) --TMP_ReleaseIgnore
	квоты без учета релиз-периода (1)--TMP_ReleaseIgnore
При выводе всех доступных квот требуется отсекать строки без учета релиз-периода и с количеством мест <=0 
*/


IF @SVKey=3 and exists(SELECT TOP 1 1 FROM QuotaObjects, Quotas, QuotaDetails, QuotaParts, HotelRooms WHERE QD_QTID=QT_ID and QD_ID=QP_QDID and QO_QTID=QT_ID
	and HR_Key=@SubCode1 and HR_MAIN=0 and QT_ByRoom = 1 and (QP_AgentKey=@AgentKey or QP_AgentKey is null)
	and (QT_PRKey=@PRKey or QT_PRKey=0) and QO_Code=@Code and QD_Date between @DateBeg and @DateEnd and QP_Date = QD_Date
	and QD_Busy = QD_Places
	and QP_ID in (select SD_QPID
					from ServiceByDate as SBD2 join RoomPlaces as RP2 on SBD2.SD_RPID = RP2.RP_ID
					where RP2.RP_Type = 0))
begin
	update @Tbl_DQ set TMP_Count=1 where TMP_Count=0
end

DECLARE @IsCommitmentFirst bit
IF Exists (SELECT SS_ID FROM dbo.SystemSettings WHERE SS_ParmName='SYS_Commitment_First' and SS_ParmValue='1')
	SET @IsCommitmentFirst=1

If @TypeOfResult is null or @TypeOfResult=0
BEGIN
	IF @IsCommitmentFirst=1
		select * from @Tbl_DQ order by TMP_IsByCheckIn DESC
	ELSE
		select * from @Tbl_DQ order by TMP_IsByCheckIn DESC
END

DECLARE @Priority int;
SELECT @Priority=QPR_Type FROM   QuotaPriorities 
WHERE  QPR_Date=@DateFirst and QPR_SVKey = @SVKey and QPR_Code=@Code and QPR_PRKey=@PRKey

IF @Priority is not null
	SET @IsCommitmentFirst=@Priority-1

If @TypeOfResult=1 --(возвращаем характеристики оптимальной квоты)
BEGIN
	If exists (SELECT top 1 1 FROM @Tbl_DQ)
	BEGIN
		IF @Quota_Type=1 or @IsCommitmentFirst=1
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type DESC, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
		ELSE
			select	TOP 1 @Quota_Count=TMP_Count, 
					@Quota_AgentKey=TMP_AgentKey, @Quota_Type=TMP_Type, @Quota_ByRoom=TMP_ByRoom,
					@Quota_PRKey=TMP_Partner, @Quota_FilialKey=TMP_FilialKey, @Quota_CityDepartments=TMP_CityDepartments, 
					@Quota_Duration=TMP_Duration, @Quota_SubCode1=TMP_SubCode1, @Quota_SubCode2=TMP_SubCode2
			from	@Tbl_DQ 
			where	TMP_Count>0 and TMP_ReleaseIgnore=0
			order by TMP_ReleaseIgnore, TMP_Type, TMP_Partner DESC, TMP_AgentKey DESC, TMP_SubCode1 DESC, TMP_SubCode2 DESC, TMP_Duration DESC
	END
END

	-- Проверим на стоп
	--если существуют два стопа и нет дней с незаведенными квотами
	if (@StopExist > 0 and
		exists(select 1 from #StopSaleTemp where SST_State is not null and SST_Date between @DateBeg and @DateEnd and SST_Type=1 and (SST_State=1 or SST_State=2)) and
		exists(select 1 from #StopSaleTemp where SST_State is not null and SST_Date between @DateBeg and @DateEnd and SST_Type=2 and (SST_State=1 or SST_State=2)) and
		((select COUNT(distinct SST_Date) from #StopSaleTemp where SST_Type=1) = @DaysCount) and
			((select COUNT(distinct SST_Date) from #StopSaleTemp where SST_Type=2) = @DaysCount))
	BEGIN
		Set @Quota_CheckState = 2
		Set @Quota_CheckDate = @StopDate
		return
	END

	--если есть стоп на commitment и закончился релиз-период на alotment, или наоборот...
	if (not exists(select 1 from #Tbl where TMP_Type=2 and TMP_Date = @DateBeg and dateadd(day, -1, GETDATE()) < (@DateBeg - ISNULL(TMP_Release, 0)))
		and
		(select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=TMP_Type) and TMP_Type=1) < @DaysCount
		or
		not exists(select 1 from #Tbl where TMP_Type=1 and TMP_Date = @DateBeg and dateadd(day, -1, GETDATE()) < (@DateBeg - ISNULL(TMP_Release, 0)))
		and
		(select count (distinct TMP_Date) from #Tbl where TMP_QTID not in (select TMP_QTID from #Tbl,#StopSaleTemp where TMP_Date=SST_Date and SST_State=2 and SST_Type=TMP_Type) and TMP_Type=2) < @DaysCount)
	begin
		if exists(select 1 from #Tbl where TMP_Release is not null and TMP_Release!=0 and TMP_Date = @DateBeg AND dateadd(day, -1, GETDATE()) >= (@DateBeg - ISNULL(TMP_Release, 0)))
		begin
			set @Quota_CheckState = 3	-- наступил РЕЛИЗ-Период
			return
		end
	end
	
	--если существует стоп и на первый день нет квот
	If @StopExist > 0 and not exists (select 1 from #Tbl where TMP_Count > 0 and TMP_Date = @DateBeg)
	BEGIN
		Set @Quota_CheckState = 2						--Возвращаем "Внимание STOP"
		Set @Quota_CheckDate = @StopDate
		return
	END

	--Проверим на наличие квот
	if not exists (select 1 from #Tbl where TMP_Count > 0)
	begin
		Set @Quota_CheckState = 0
		return
	end

If @TypeOfResult=2 --(попытка проверить возможность постановки услуги на квоту)
BEGIN
	DECLARE @Places_Count int, @Rooms_Count int,		 --доступное количество мест/номеров в квотах
			@Places_Count_ReleaseIgnore int, @Rooms_Count_ReleaseIgnore int,		 --доступное количество мест/номеров в квотах
			@PlacesNeed_Count smallint,					-- количество мест, которых недостаточно для оформления услуги
			@PlacesNeed_Count_ReleaseIgnore smallint					-- количество мест, которых недостаточно для оформления услуги

	If exists (SELECT top 1 1 FROM @Tbl_DQ)
	BEGIN
		set @PlacesNeed_Count = 0
		set @PlacesNeed_Count_ReleaseIgnore = 0
		
		select @Places_Count = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 0 and TMP_ReleaseIgnore = 0
		select @Places_Count_ReleaseIgnore = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 0 and TMP_ReleaseIgnore = 1

		If @SVKey=3
		begin
			select @Rooms_Count = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 1 and TMP_ReleaseIgnore = 0
			select @Rooms_Count_ReleaseIgnore = SUM(TMP_Count) from @Tbl_DQ where TMP_Count > 0 and TMP_ByRoom = 1 and TMP_ReleaseIgnore = 1
		end
		
		Set @Places_Count = ISNULL(@Places_Count,0)
		Set @Rooms_Count = ISNULL(@Rooms_Count,0)
		Set @Places_Count_ReleaseIgnore = ISNULL(@Places_Count_ReleaseIgnore,0)
		Set @Rooms_Count_ReleaseIgnore = ISNULL(@Rooms_Count_ReleaseIgnore,0)
		
		SET @StopExist = ISNULL(@StopExist, 0)
		
		--проверяем достаточно ли будет текущего кол-ва мест для бронирования, если нет устанавливаем статус бронирования под запрос
		declare @nPlaces smallint, @nRoomsService smallint
		If @SVKey = 3 and @Rooms_Count > 0
		BEGIN
			exec GetServiceRoomsCount @Code, @SubCode1, @Pax, @nRoomsService output
			
			If @nRoomsService > @Rooms_Count
			begin
				Set @PlacesNeed_Count = @nRoomsService - @Rooms_Count
				Set @Quota_CheckState = 0
			end
				
			If @nRoomsService > @Rooms_Count_ReleaseIgnore
			begin
				Set @PlacesNeed_Count_ReleaseIgnore = @nRoomsService - @Rooms_Count_ReleaseIgnore
				Set @Quota_CheckState = 0
			end
		END
		ELSE
		begin
			If @Pax > @Places_Count
			begin
				Set @PlacesNeed_Count = @Pax - @Places_Count
				Set @Quota_CheckState = 0
			end 
			
			If @Pax > @Places_Count_ReleaseIgnore
			begin
				Set @PlacesNeed_Count_ReleaseIgnore = @Pax - @Places_Count_ReleaseIgnore
				Set @Quota_CheckState = 0
			end
		end
		
		-- проверим на релиз
		If @PlacesNeed_Count_ReleaseIgnore <= 0 --мест в квоте хватило
			Set @Quota_CheckState = 3						--Возвращаем "Release" (мест не достаточно, но наступил РЕЛИЗ-Период)"
		
		If @PlacesNeed_Count <= 0 --мест в квоте хватило
			Set @Quota_CheckState = 1						--Возвращаем "Ok (квоты есть)"
		else
			set @Quota_CheckInfo = @PlacesNeed_Count
	END
	else
	begin
		-- если выборка пустая
		Set @Quota_CheckState = 0
	end
END
GO
grant exec on [dbo].[CheckQuotaExist] to public
go

/*********************************************************************/
/* end sp_CheckQuotaExist.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ClearMasterWebSearchFields.sql */
/*********************************************************************/
if exists(select id from sysobjects where name='ClearMasterWebSearchFields' and xtype='p')
	drop procedure [dbo].[ClearMasterWebSearchFields]
go

CREATE PROCEDURE [dbo].[ClearMasterWebSearchFields]
	@tokey int, -- ключ тура
	@calcKey int = null
as
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-10</DATE>

	update dbo.TP_Tours set TO_Update = 1, TO_Progress = 0 where TO_Key = @tokey

	if(@calcKey is null)
		exec dbo.mwEnablePriceTour @tokey, 0, @calcKey
		
	-- если есть репликация и это не подписчик, прекратим выполнение
	if dbo.mwReplIsPublisher() > 0
	begin	
		update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100, TO_UpdateTime = GetDate() where TO_Key = @tokey
		return
	end
		
	update dbo.TP_Tours set TO_Progress = 10 where TO_Key = @tokey

	declare @tableName as nvarchar(150)
	declare tCur cursor for
	select name from sys.tables where name like 'mwPriceDataTable%'

	declare @sql as nvarchar(max)
	declare @condition as nvarchar(300)
	
	if(@calcKey is not null)
	begin		
		set @condition = 'pt_pricekey in (select tp_key from tp_prices with(nolock) where tp_calculatingkey = ' + STR(@calcKey) + ')'
	end
	else
	begin
		set @condition = 'pt_tourkey = ' + STR(@tokey)
	end

	open tCur
	fetch next from tCur into @tableName
	
	while @@fetch_status = 0
	begin
	
		set @sql = '
			while (1 = 1)
			begin
				delete top (100000) from #tableName where #condition
				if (@@ROWCOUNT = 0)
					break
			end
		'
		
		set @sql = REPLACE(@sql, '#tableName', @tableName)
		set @sql = REPLACE(@sql, '#condition', @condition)
		
		print @sql
		exec (@sql)
	
		fetch next from tCur into @tableName
	
	end
	
	close tCur
	deallocate tCur

	update dbo.TP_Tours set TO_Progress = 25 where TO_Key = @tokey

	update dbo.TP_Tours set TO_Progress = 50 where TO_Key = @tokey

	if(@calcKey is null)		
	begin
		while(1 = 1)
		begin
			delete top(100000) from dbo.mwPriceDurations where sd_tourkey = @tokey
			if (@@ROWCOUNT = 0)
				break
		end
	end

	update dbo.TP_Tours set TO_Progress = 75 where TO_Key = @tokey

	if(@calcKey is null)		
	begin
		while (1 = 1)
		begin
			delete top(100000) from dbo.mwPriceHotels where sd_tourkey = @tokey
			if (@@ROWCOUNT = 0)
				break
		end
	end

	update dbo.TP_Tours set TO_Update = 0, TO_Progress = 100, TO_UpdateTime = GetDate() where TO_Key = @tokey
end
GO

grant exec on [dbo].[ClearMasterWebSearchFields] to public
go
/*********************************************************************/
/* end sp_ClearMasterWebSearchFields.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CopyPrivileges.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CopyPrivileges]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CopyPrivileges]
GO
CREATE PROCEDURE [dbo].[CopyPrivileges]
(
	@uskeyto int, 
	@uskeyfrom int	
)
AS
BEGIN
	--<VERSION>9.2.19.0</VERSION>
	--<DATE>2013-04-25</DATE>	
	SET NOCOUNT ON;
	
	DECLARE @roleName nvarchar(50)
	DECLARE @tableName nvarchar(50)
	
	DECLARE @groupUid smallint
	DECLARE @groupName nvarchar(50)
		
	declare @dropSqlCommand nvarchar(max)
	set @dropSqlCommand = ''
	
	DECLARE @usernamefrom nvarchar(50)
	SELECT @usernamefrom = US_USERID FROM UserList WHERE US_KEY = @uskeyfrom	
	DECLARE @uidfrom smallint
	SELECT	@uidfrom = [UID] FROM	SysUsers WHERE	NAME LIKE @usernamefrom
	
	DECLARE @usernameto nvarchar(50)
	SELECT @usernameto = US_USERID FROM UserList WHERE US_KEY = @uskeyto	
	DECLARE @uidto smallint
	SELECT	@uidto = [UID] FROM	SysUsers WHERE	NAME LIKE @usernameto
	
	DECLARE @grasykey INT, @gralokey INT, @select NVARCHAR(50), @insert NVARCHAR(50), @delete NVARCHAR(50), @update NVARCHAR(50), @ackey INT
	DECLARE @sykey INT
	
	DECLARE @vikey INT, @viname NVARCHAR(50), @vikeycolumn NVARCHAR(50), @vitextcolumn NVARCHAR(50), @vitype INT
	
	DECLARE @sql NVARCHAR(MAX)
	
	--Удаляем записи для пользователя To из LogObjAuth
	DELETE	FROM dbo.LogObjAuth WHERE LOA_USKey = @uskeyto
	
	--Удаляем записи для пользователя To из ViewContents
	DELETE	FROM dbo.ViewContents WHERE VIC_USKey = @uskeyto
	
	--Удаляем пользователя To из всех групп
	
	DECLARE rolesCursor CURSOR
	FAST_FORWARD READ_ONLY
	FOR SELECT [Name] FROM SysUsers WHERE [UID] IN (
		SELECT GroupUID FROM SysUsers, SysMembers 
		WHERE Name LIKE @usernameto AND (GroupUID >= 16400 OR GroupUID = 0) AND UID = MEMBERUID 
	)
	
	OPEN rolesCursor
	
	FETCH NEXT FROM rolesCursor INTO @roleName
	WHILE @@FETCH_STATUS = 0
	BEGIN		
		EXEC sp_droprolemember @roleName, @usernameto
		FETCH NEXT FROM rolesCursor INTO @roleName
	END
	
	CLOSE rolesCursor
	DEALLOCATE rolesCursor
	
	-- Удаление всех объектов, созданных для пользователя To
	
	select @dropSqlCommand = @dropSqlCommand
		+ 'ALTER TABLE '+SCHEMA_NAME(fk.schema_id)+'.'+OBJECT_NAME(fk.parent_object_id)+' DROP CONSTRAINT '+ fk.name
		+ CHAR(13)
	from sys.foreign_keys fk
	join sys.tables t on t.object_id = fk.referenced_object_id
	where t.schema_id = schema_id(@usernameto)
		   and fk.schema_id <> t.schema_id
	order by fk.name desc

	select @dropSqlCommand = @dropSqlCommand
		+ 'ALTER TABLE '+schema_name(t.schema_id)+'.'+OBJECT_NAME(fk.parent_object_id)+' DROP CONSTRAINT '+ fk.[Name]
		+ CHAR(13)
	from sys.objects fk
	  join sys.tables t on t.object_id = fk.parent_object_id
	where t.schema_id = schema_id(@usernameto)
	  and fk.type IN ('D', 'C', 'F')

	SELECT @dropSqlCommand = @dropSqlCommand
		+ CASE 
			WHEN SO.type='PK' THEN 'ALTER TABLE ['+SCHEMA_NAME(SO.schema_id)+'].'+OBJECT_NAME(SO.parent_object_id)+' DROP CONSTRAINT '+ SO.name
			WHEN SO.type='U' THEN 'DROP TABLE ['+SCHEMA_NAME(SO.schema_id)+'].'+ SO.[Name]
			WHEN SO.type='V' THEN 'DROP VIEW  ['+SCHEMA_NAME(SO.schema_id)+'].'+ SO.[Name]
			WHEN SO.type='P' THEN 'DROP PROCEDURE  ['+SCHEMA_NAME(SO.schema_id)+'].'+ SO.[Name]         
			WHEN SO.type='TR' THEN 'DROP TRIGGER  ['+SCHEMA_NAME(SO.schema_id)+'].'+ SO.[Name]
			WHEN SO.type  IN ('FN', 'TF','IF','FS','FT') THEN 'DROP FUNCTION  ['+SCHEMA_NAME(SO.schema_id)+'].'+ SO.[Name]
		END
		+ CHAR(13)
	FROM SYS.OBJECTS SO
	WHERE SO.schema_id = schema_id(@usernameto)
	  AND SO.type IN ('PK', 'FN', 'TF', 'TR', 'V', 'U', 'P')
	ORDER BY CASE WHEN type = 'PK' THEN 1
				  WHEN type in ('FN', 'TF', 'P','IF','FS','FT') THEN 2
				  WHEN type = 'TR' THEN 3
				  WHEN type = 'V' THEN 4
				  WHEN type = 'U' THEN 5
				ELSE 6
			  END

	EXEC (@dropSqlCommand)
	
	--Добавляем пользователя To в те же группы, в которые входит пользователь From
	
	DECLARE groupsCursor CURSOR
	FAST_FORWARD READ_ONLY
	FOR SELECT	GROUPUID, G.NAME FROM 	SysUsers U, SysUsers G, SysMembers
	WHERE 	U.UID = MEMBERUID AND MEMBERUID = @uidfrom
		AND G.UID = GROUPUID
		
	OPEN groupsCursor
	
	FETCH NEXT FROM groupsCursor INTO @groupUid, @groupName
	WHILE @@FETCH_STATUS = 0
	BEGIN
	   EXEC sp_addrolemember @groupName, @usernameto

	   DECLARE rightsCursor CURSOR
	   FAST_FORWARD READ_ONLY	   
	   FOR SELECT GRA_SYKey, GRA_LOKey, GRA_Select, GRA_Insert, GRA_Delete, GRA_Update, GRA_ACKey
	   FROM	GroupAuth WHERE GRA_GRKey = @groupUid

	   OPEN rightsCursor

	   FETCH NEXT FROM rightsCursor INTO @grasykey, @gralokey, @select, @insert, @delete, @update, @ackey
	   WHILE @@FETCH_STATUS = 0
	   BEGIN
		  
		         	 			
		  
		  IF @gralokey IS NOT NULL AND @gralokey > 0
		  BEGIN
			 
			
			DECLARE tablesCursor CURSOR
			FAST_FORWARD READ_ONLY
			FOR SELECT sy_key
			FROM dbo.Synonyms, dbo.LoContents
			WHERE sy_key = LOC_SYKEY AND LOC_LOKEY = @gralokey
			
			SET @sql = ''
			
			OPEN tablesCursor
			
			FETCH NEXT FROM tablesCursor INTO @sykey
			WHILE @@FETCH_STATUS = 0
			BEGIN				    
			    
			    --Call SetUserAccessToTbl( strUser, nUSKey, strTableName,
							--		nType, STRING_Null, REVOKE_FROM_LO, nLOKey )
			    
				SELECT @tableName = CASE SY_ISVIEW WHEN 0 THEN sy_name ELSE 'tbl_'+SY_NAME END 
				from Synonyms where sy_key = @grasykey 
				
				IF @select LIKE 'y'
				BEGIN
				    SET @sql = 'GRANT SELECT ON dbo.'  +  @tableName + ' TO ' + '[' + @usernameto + ']' + CHAR(13)
				END		
				IF @insert LIKE 'y'		
				BEGIN
				    SET @sql = 'GRANT INSERT ON dbo.'  +  @tableName + ' TO ' + '[' + @usernameto + ']' + CHAR(13)				
				END
				IF @delete LIKE 'y'		
				BEGIN
				    SET @sql = 'GRANT DELETE ON dbo.'  +  @tableName + ' TO ' + '[' + @usernameto + ']' + CHAR(13)				
				END
				IF @update LIKE 'y'		
				BEGIN
				    SET @sql = 'GRANT UPDATE ON dbo.'  +  @tableName + ' TO ' + '[' + @usernameto + ']' + CHAR(13)				
				END
				
				EXEC (@sql)
			    
			    FETCH NEXT FROM tablesCursor INTO @sykey
			END
			
			CLOSE tablesCursor				
			DEALLOCATE tablesCursor
			
			SET @sql = ''
			IF @select LIKE 'y'
			BEGIN
			    SET @sql = 'LOA_Select'
			END		
			IF @insert LIKE 'y'		
			BEGIN
			    SET @sql = 'LOA_Insert'
			END
			IF @delete LIKE 'y'		
			BEGIN
			    SET @sql = 'LOA_Delete'
			END
			IF @update LIKE 'y'		
			BEGIN
			    SET @sql = 'LOA_Update'
			END
			
			IF (@sql NOT LIKE '')
			BEGIN
			IF EXISTS(SELECT TOP 1 1 FROM dbo.LogObjAuth WHERE LOA_USKEY = @uskeyto AND LOA_LOKEY = @gralokey)
			BEGIN
			 SET @sql = 'UPDATE dbo.LogObjAuth
			 SET ' + @sql + ' = ''Y''
			 WHERE LOA_LOKEY = ' + STR(@gralokey) + 'AND LOA_USKEY = ' +  STR(@uskeyto) + CHAR(13)
			END
			ELSE BEGIN
			 SET @sql = 'INSERT INTO dbo.LogObjAuth (LOA_LOKEY,LOA_USKEY,' + @sql + ')
			 VALUES  ( ' + LTRIM(RTRIM(STR(@gralokey))) + ', ' + LTRIM(RTRIM(STR(@uskeyto))) + ', ''Y'')
			 '
			END
			
			
			EXEC (@sql)
			END
			
			DELETE FROM dbo.LogObjAuth
			WHERE LOA_LOKey = @gralokey AND LOA_USKey = @uskeyto
				AND LOA_Select IS NULL AND LOA_Insert IS NULL
				AND LOA_Delete IS NULL AND LOA_Update IS NULL
				
			
		  END

		  FETCH NEXT FROM rightsCursor INTO @grasykey, @gralokey, @select, @insert, @delete, @update, @ackey
	   END

	   CLOSE rightsCursor
	   DEALLOCATE rightsCursor
        						
	   FETCH NEXT FROM groupsCursor INTO @groupUid, @groupName
	END
	   
     
	CLOSE groupsCursor
    DEALLOCATE groupsCursor
    
    --Копируем набор прав пользователя From пользователю TO
    
    DECLARE viewsCursor CURSOR
    FAST_FORWARD READ_ONLY
    FOR SELECT	VI_Key, VI_Name, VI_KeyColumn, VI_TextColumn, VI_Type FROM [dbo].[View]
    
    OPEN viewsCursor
    
    FETCH NEXT FROM viewsCursor INTO @vikey, @viname, @vikeycolumn, @vitextcolumn, @vitype
    WHILE @@FETCH_STATUS = 0
    BEGIN
	   INSERT INTO dbo.ViewContents
	           ( VIC_VIKEY ,
	             VIC_KEYVALUE ,
	             VIC_USKEY
	           )
	   SELECT @vikey, VIC_KEYVALUE, @uskeyto
	   FROM dbo.ViewContents
	   WHERE VIC_USKEY = @uskeyfrom AND VIC_VIKEY = @vikey
	   
	   
	  --Call RemakeViewByColumnValue( nVIKey, nNewUSKey,
			--								strTableName, strKeyColumn, strTextColumn, FALSE )	
	  -- Получаем ранее установленные на данное View права	
	  
	  --CheckAccessToTbl
	  
	  --DECLARE @protecttype INT, @action NVARCHAR(50)
	  DECLARE @bSel BIT, @bIns BIT, @bDel BIT, @bUpd BIT
	  
	  --DECLARE protectsCursor CURSOR
	  --FAST_FORWARD READ_ONLY
	  --FOR 		  
	  
	  SELECT 
		 @bSel = CASE WHEN p.action = 193 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		 @bIns = CASE WHEN p.action = 195 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		 @bDel = CASE WHEN p.action = 196 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		 @bUpd = CASE WHEN p.action = 197 AND p.protecttype <> 206 THEN 1 ELSE 0 END
	  FROM SysProtects p, SysObjects o
	  WHERE
	  p.id= o.id
	  AND (p.uid = @uidto OR p.uid IN (SELECT groupuid FROM SysMembers WHERE memberuid = @uidto))
	  AND o.name LIKE @viname
	  ORDER BY p.action, p.protecttype DESC
	  
	  --OPEN protectsCursor		  
	  --FETCH NEXT FROM protectsCursor INTO @protecttype, @action
	  --WHILE @@FETCH_STATUS = 0
	  --BEGIN		  
		 --FETCH NEXT FROM protectsCursor INTO @protecttype, @action
	  --END
	  --CLOSE protectsCursor
	  --DEALLOCATE protectsCursor
	  
	  -- Return to RemakeViewByColumnValue
	  
	  --Получаем список доступных пользователю ключей для этого VIEW
	  --		Для SYSADM ничего не проверяем, у него должен быть полный доступ
	  DECLARE @count INT
	  SET @count = 0
	  IF (@usernameto NOT LIKE 'dbo')
	  BEGIN
		 SELECT @count = COUNT(1) FROM dbo.ViewContents WHERE VIC_VIKEY = @vikey AND VIC_USKEY LIKE @usernameto
	  END
	  SET @sql = '
			CREATE VIEW [' + @usernameto + '].' + @viname + ' AS SELECT * FROM dbo.' + @viname + '
		 '
	  IF @count > 0		  
	  BEGIN
		 DECLARE @key INT		  
		 DECLARE @keys NVARCHAR(200)
	  
		 DECLARE keysCursor CURSOR
		 FAST_FORWARD READ_ONLY
		 FOR SELECT VIC_KeyValue FROM dbo.ViewContents WHERE VIC_VIKEY = @vikey AND VIC_USKEY LIKE @usernameto
		 
		 OPEN keysCursor
		 
		 FETCH NEXT FROM keysCursor INTO @key
		 WHILE @@FETCH_STATUS = 0
		 BEGIN
			IF @keys = ''
			    SET @keys = LTRIM(RTRIM(STR(@key)))
			ELSE
			    SET @keys = @keys + ',' + LTRIM(RTRIM(STR(@key)))				  
			FETCH NEXT FROM keysCursor INTO @key
		 END
		 
		 CLOSE keysCursor
		 DEALLOCATE keysCursor	
		 IF @vitype = 0
		 BEGIN
			SET @sql = @sql + 'WHERE ' + @vikeycolumn + ' IN (' + @keys + ')
			'
		 END
		 ELSE
		 BEGIN
			--RemakeViewByUserName
			--Определяем префикс названий всех столбцов таблицы
			
			DECLARE @prefix NVARCHAR(50)
			SELECT @prefix = SUBSTRING([name], 1, CHARINDEX('_', [NAME]) - 1)
			FROM dbo.SCOLUMNS
			WHERE TBNAME LIKE @viname
			
			SELECT @count = COUNT(1) FROM dbo.SCOLUMNS WHERE TBNAME LIKE @viname AND CHARINDEX('_CREATOR', NAME) > 0
			
			IF (@count>0)
			BEGIN
			    SET @sql = @sql + 'WHERE ' + @prefix + '_CREATOR IN (' + @keys + ')' + CHAR(13)
			END
			ELSE BEGIN
			    SET @sql = @sql + 'WHERE ' + @prefix + '_OWNER IN (' + @keys + ')' + CHAR(13)
			END
			
		 END			 
	  END
	  
	  EXEC (@sql)
	  SET @sql = 'SELECT'
	  IF (@bIns > 0)
		 SET @sql = @sql + ',INSERT'
	  IF (@bDel > 0)
		 SET @sql = @sql + ',DELETE'
	  IF (@bUpd > 0)
		 SET @sql = @sql + ',UPDATE'
	  
	  SET @sql = 'GRANT ' + @sql + ' ON dbo.' + @viname + ' TO [' + @usernameto + ']' + CHAR(13)	  		  
	  
	  EXEC(@sql)	
	  
	  
	   	   
	  FETCH NEXT FROM viewsCursor INTO @vikey, @viname, @vikeycolumn, @vitextcolumn, @vitype
    END
    CLOSE viewsCursor
    DEALLOCATE viewsCursor
     
    
    DECLARE tcur Cursor
    fast_forward read_only
    for select distinct name from systabauth where grantee like @usernamefrom and (creator like 'dbo' or creator LIKE @usernamefrom)
    
    OPEN tcur
    FETCH NEXT FROM tcur INTO @viname
    WHILE @@FETCH_STATUS = 0
    BEGIN
	   SELECT
		    @bSel = CASE WHEN p.action = 193 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		    @bIns = CASE WHEN p.action = 195 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		    @bDel = CASE WHEN p.action = 196 AND p.protecttype <> 206 THEN 1 ELSE 0 END,
		    @bUpd = CASE WHEN p.action = 197 AND p.protecttype <> 206 THEN 1 ELSE 0 END
	    FROM SysProtects p, SysObjects o
	    WHERE
			   p.id= o.id
			   AND (p.uid = @uidfrom OR p.uid IN (SELECT groupuid FROM SysMembers WHERE memberuid = @uidfrom))
			   AND o.name LIKE @viname
	    ORDER BY p.action, p.protecttype DESC 	 
	  SET @sql = ''
	  IF (@bSel > 0)
		 SET @sql = @sql + ',SELECT'
	  IF (@bIns > 0)
		 SET @sql = @sql + ',INSERT'
	  IF (@bDel > 0)
		 SET @sql = @sql + ',DELETE'
	  IF (@bUpd > 0)
		 SET @sql = @sql + ',UPDATE'
	  
	  SET @sql = 'GRANT ' + SUBSTRING(@sql, 2, LEN(@sql)-1) + ' ON dbo.' + @viname + ' TO [' + @usernameto + ']' + CHAR(13)	  		  
	 
	  EXEC(@sql)
	    
	   FETCH NEXT FROM tcur INTO @viname
    END
    CLOSE tcur
    DEALLOCATE tcur
    
    --Устанавливаем те же права на LO новому пользователю
    
    INSERT INTO dbo.LogObjAuth    
            ( LOA_LOKEY ,
		LOA_USKEY,
              LOA_SELECT ,
              LOA_INSERT ,
              LOA_DELETE ,
              LOA_UPDATE
            )
    SELECT l.LOA_LOKEY, @uskeyto, l.LOA_SELECT, l.LOA_INSERT, l.LOA_DELETE, l.LOA_UPDATE
    FROM dbo.LogObjAuth l
    WHERE l.LOA_USKEY = @uskeyfrom
    
    --Устанавливаем те же права на ACTIONS новому пользователю
    
    --DECLARE @ackey INT
    
    DECLARE actionCursor CURSOR
    FAST_FORWARD READ_ONLY
    FOR SELECT aca_ackey FROM dbo.ActionsAuth WHERE ACA_USKey = @uskeyfrom
    
    OPEN actionCursor
    
    FETCH NEXT FROM actionCursor INTO @ackey
    WHILE @@FETCH_STATUS = 0
    BEGIN
	   
	   IF NOT EXISTS (SELECT TOP 1 1 FROM dbo.ActionsAuth WHERE ACA_ACKey = @ackey AND ACA_USKey = @uskeyto)
	   BEGIN
		  INSERT INTO dbo.ActionsAuth
		          ( ACA_ACKey, ACA_USKey )
		  VALUES  ( @ackey, @uskeyto)
	   END   
	   
	   FETCH NEXT FROM actionCursor INTO @ackey
    END
    
    CLOSE actionCursor
    DEALLOCATE actionCursor
END
GO

grant exec on [dbo].[CopyPrivileges] to public
GO


/*********************************************************************/
/* end sp_CopyPrivileges.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_CostOfferChangeState.sql */
/*********************************************************************/
--<VERSION>2009.2.19.1</VERSION>
--<DATE>2013-05-21</DATE>
--хранимка активирует, деактивирует или публикует ЦБ

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[CostOfferChangeState]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[CostOfferChangeState]
GO

CREATE PROCEDURE [dbo].[CostOfferChangeState]
	(
		-- ключ ЦБ
		-- null - если вызов ХП осуществляется без передачи параметров, и тогда берем первый попавшийся ЦБ
		@coId int=null,
		-- ключ операции 1 - активировать, 2 - деактивировать, 3 - публиковать
		@operationId smallint=null
	)
AS
BEGIN TRY
	Set NOCOUNT OFF
	-- проверяем, что было перадано процедуре во входных параметрах
	-- если входные параметры отсут-т, то выбираем 1ый ЦБ из очереди, который ожидает обработки 
	-- или в противном случае берем тот, который в прошлый раз завершился с ошибкой
	-- 0(ожидает), 1 (в обработке), -1(завершилось с ошибкой)
	BEGIN TRANSACTION
	DECLARE @rowcount INT
	DECLARE @COQueuesCount INT
	if(@coId is null Or @operationId is null)
	BEGIN 		
		-- кол-во костофферов в таблице очереди [QueuesCostOffers]
		declare @costOffersCount int
		select @costOffersCount = COUNT(*) from [dbo].[QueuesCostOffers] where [QCO_State] = 0 or [QCO_State] = -1
		if(@costOffersCount > 0)
		begin
			select top 1 @coId = [QCO_COId], @operationId = [QCO_OperationId] from [QueuesCostOffers]
			where [QCO_State] = 0 or [QCO_State] = -1
			order by [QCO_State] desc, QCO_QueuedDate
		end
		ELSE
		begin
			PRINT 'В таблице отсутствуют ценовые блоки для обработки'
			ROLLBACK TRANSACTION
            RETURN
		end
	END

	-- обновляем состояние очереди для текущего ЦБ в 1, чтобы проинформировать о процессе обработки ЦБ
	update [QueuesCostOffers]
	set [QCO_State] = 1
	where [QCO_COId] = @coId and [QCO_OperationId] = @operationId
	SET @rowcount = @@ROWCOUNT
	COMMIT TRANSACTION
	
	IF @rowcount = 1
	begin
		-- временная таблица для цен
		declare @spadIdTable table
		(
			spadId bigint		
		)
		
		-- временная таблица для цен на будущие даты
		declare @spndIdTable table
		(
			spndId bigint
		)

		-- активация ценового блока или деактивация
		if (@operationId = 1 or @operationId = 2)
		begin	
			insert into @spadIdTable (spadId)
			select spad.SPAD_Id
			from (dbo.TP_ServicePriceActualDate as spad with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spad.SPAD_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on co.CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on co.CO_SeasonId = seas.SN_Id)
			where
				[co].CO_Id = @coId
				-- должны публиковаться только последние актуальные цены
				and spad.SPAD_SaleDate is null
				and seas.SN_IsActive = 1			
				and SC_SVKey = co.CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = co.CO_PKKey
				and SC_PRKey = co.CO_PartnerKey
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = co.CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = co.CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = co.CO_SVKey)
			
			-- в ценах которые расчитали на будущее, тоже нужно пересчитать	
			insert into @spndIdTable (spndId)
			select spnd.SPND_Id
			from (dbo.TP_ServicePriceNextDate as spnd with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spnd.SPND_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on [co].CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on [co].CO_SeasonId = seas.SN_Id)
			where			
				[co].CO_Id = @coId
				and seas.SN_IsActive = 1
				and SC_SVKey = [co].CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = [co].CO_PKKey
				and SC_PRKey = [co].CO_PartnerKey
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = [co].CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				
			while(exists (select top 1 1 from @spadIdTable))
			begin			
				update top (10000) spad
				set 
				spad.SPAD_NeedApply = 1,
				spad.SPAD_DateLastChange = getdate()
				from dbo.TP_ServicePriceActualDate as spad join @spadIdTable on spad.SPAD_Id = spadId
				
				delete @spadIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceActualDate as spad with(nolock) 
								where spad.SPAD_Id = spadId 
								and (spad.SPAD_NeedApply = 1))
			end
				
			while(exists (select top 1 1 from @spndIdTable))
			begin			
				update top (10000) spnd
				set spnd.SPND_NeedApply = 1,
				spnd.SPND_DateLastChange = getdate()
				from dbo.TP_ServicePriceNextDate as spnd join @spndIdTable on spnd.SPND_Id = spndId
				
				delete @spndIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceNextDate as spnd with(nolock) 
								where spnd.SPND_Id = spndId
								and spnd.SPND_NeedApply = 1)
			end

			if (@operationId = 1)
			begin
				-- переводим ЦБ в активное состояние и состояние очереди ЦБ в FALSE
				-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
				select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
				where [QCO_COId] = @coId
				if (@COQueuesCount > 1)
				begin
					update CostOffers
					set CO_State = 1, CO_DateActive = ISNULL(CO_DateActive, getdate())
					where CO_Id = @coId
				end
				else
				begin
					update CostOffers
					set CO_State = 1, CO_DateActive = ISNULL(CO_DateActive, getdate()),[CO_InQueue] = 0
					where CO_Id = @coId
				end
			end
			else if (@operationId = 2)
			begin
				-- переводим ЦБ в закрытое состояние и состояние очереди ЦБ в FALSE			
				-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
				select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
				where [QCO_COId] = @coId
				if (@COQueuesCount > 1)
				begin	
					update CostOffers
					set CO_State = 2, CO_DateClose = getdate()
					where CO_Id = @coId
				end
				else
				begin
					update CostOffers
					set CO_State = 2, CO_DateClose = getdate(), [CO_InQueue] = 0
					where CO_Id = @coId
				end
			end

		end	
		-- публикация ценового блока
		else if (@operationId = 3)
		begin
			insert into @spadIdTable (spadId)
			select spad.SPAD_Id
			from (dbo.TP_ServicePriceActualDate as spad with (nolock)
					join dbo.TP_ServiceCalculateParametrs as scp with (nolock) on spad.SPAD_SCPId = scp.SCP_Id
					join dbo.TP_ServiceComponents as sc with (nolock) on scp.SCP_SCId = sc.SC_Id)
					cross join
				(CostOffers as [co] with (nolock)
					join dbo.CostOfferServices as [cos] with (nolock) on [co].CO_Id = [cos].COS_COID
					join dbo.Seasons as seas with (nolock) on [co].CO_SeasonId = seas.SN_Id)
			where
				[co].CO_Id = @coId
				-- должны публиковаться только последние актуальные цены
				and spad.SPAD_SaleDate is null
				and seas.SN_IsActive = 1			
				and SC_SVKey = [co].CO_SVKey
				and sc.SC_Code = [cos].COS_CODE
				and scp.SCP_PKKey = [co].CO_PKKey
				and SC_PRKey = [co].CO_PartnerKey
				-- и дата продажи ценового блока должна быть вокруг текущей даты
				and getdate() between isnull([co].CO_SaleDateBeg, '1900-01-01') and isnull([co].CO_SaleDateEnd, '2072-01-01')
				--mv 13102012 для индекса	
				and scp.SCP_SvKey = [co].CO_SVKey
				--mv 13102012 дата заезда при отборе должна быть ограничена датами заезда в ценах
				and scp.SCP_DateCheckIn between  
							(SELECT MIN(ISNULL(CS_CHECKINDATEBEG,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey) 
						and (SELECT MAX(ISNULL(CS_CHECKINDATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда должна быть больше текущей даты
				and scp.SCP_DateCheckIn >= DATEADD(DAY,-1,GetDate())
				--mv 13102012 дата заезда не можеть быть больше максимальной даты в ценах
				and scp.SCP_DateCheckIn <= (SELECT MAX(ISNULL(CS_DATEEND,'01-01-2100')) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				--mv 13102012 дата заезда + продолжительность тура не можеть быть меньше, чем минимальная дата в ценах
				and DATEADD(DAY, scp.SCP_TourDays, scp.SCP_DateCheckIn) >= (SELECT MIN(ISNULL(CS_DATE,DATEADD(DAY,-1,GetDate()))) FROM dbo.tbl_costs with (nolock) WHERE CS_COID = [co].CO_Id and CS_CODE = sc.SC_Code and CS_SVKEY = [co].CO_SVKey)
				
			while(exists (select top 1 1 from @spadIdTable))
			begin			
				update top (10000) spad
				set 		
				spad.SPAD_NeedApply = 1,	
				spad.SPAD_AutoOnline = 1,
				spad.SPAD_DateLastChange = getdate()
				from dbo.TP_ServicePriceActualDate as spad join @spadIdTable on spad.SPAD_Id = spadId
				
				delete @spadIdTable 
				where exists (	select top 1 1 
								from dbo.TP_ServicePriceActualDate as spad with(nolock) 
								where spad.SPAD_Id = spadId 
								and (spad.SPAD_AutoOnline = 1))
			end
			
			-- обновим дату публикации и состояние очереди ЦБ в FALSE
			-- надо только проверить нет ли других очередей для данного ЦБ, тогда в этом случае проверяем на > 1
			select @COQueuesCount=Count(*) from [dbo].[QueuesCostOffers]
			where [QCO_COId] = @coId
			if (@COQueuesCount > 1)
			begin	
				update CostOffers
				set CO_DateLastPublish = getdate()
				where CO_Id = @coId
			end
			else
			begin
				update CostOffers
				set CO_DateLastPublish = getdate(), [CO_InQueue] = 0
				where CO_Id = @coId
			end
		end
		-- удаляем очередь для текущего ЦБ
		delete from [dbo].[QueuesCostOffers]
		where [QCO_COId] = @coId and [QCO_OperationId] = @operationId
	end
END TRY

BEGIN CATCH
	ROLLBACK TRANSACTION
	-- ставим состояние очереди ЦБ в -1, если произошла ошибка
	update [QueuesCostOffers]
	set [QCO_State] = -1
	where [QCO_COId] = @coId
END CATCH;
GO

grant exec on [dbo].[CostOfferChangeState] to public
go
/*********************************************************************/
/* end sp_CostOfferChangeState.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_FillMasterWebSearchFields.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[FillMasterWebSearchFields]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[FillMasterWebSearchFields]
GO

create procedure [dbo].[FillMasterWebSearchFields](@tokey int, @calcKey int = null, @forceEnable smallint = null, @overwritePrices bit = null)
-- if @forceEnable > 0 (by default) then make call mwEnablePriceTour @calcKey, 1 at the end of the procedure
as
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-10</DATE>
	set @forceEnable = isnull(@forceEnable, 1)
	
	declare @findByAdultChild int, @newRecalcPrice int
	
	declare @counter int, @deleteCount int, @params nvarchar(500)
	
	set @findByAdultChild = isnull((select top 1 convert(int, SS_ParmValue) from SystemSettings where SS_ParmName = 'OnlineFindByAdultChild'), 0)
	set @newRecalcPrice = isnull((select top 1 convert(int, SS_ParmValue) from SystemSettings where SS_ParmName = 'NewReCalculatePrice'), 0)

	if (@tokey is null)
	begin
		print 'Procedure does not support NULL param. You must specify @tokey parameter.'
		return
	end

	DECLARE @departFromKey INT
	SELECT top 1 @departFromKey = TL_CTDepartureKey FROM tbl_TurList 
	INNER JOIN tp_Tours 
	ON TL_KEY = TO_TRKey
	WHERE TO_Key = @tokey
	
	IF EXISTS(SELECT 1 FROM mwSpoDataTable WHERE sd_tourkey = @tokey AND sd_ctkeyfrom <> @departFromKey)
	BEGIN
		SET @calcKey = null
		EXEC mwReplDisablePriceTour @tokey
	END

	update dbo.TP_Tours set TO_Progress = 0 where TO_Key = @tokey

	if dbo.mwReplIsSubscriber() > 0
	begin
		exec dbo.mwFillTP @tokey, @calcKey
	end

	create table #tmpHotelData (
		thd_tourkey int, 
		thd_firsthdkey int,
		thd_firstpnkey int, 
		thd_cnkey int, 
		thd_tlkey int, 
		thd_isenabled smallint, 
		thd_tourcreated datetime, 
		thd_hdstars nvarchar(15), 
		thd_ctkey int, 
		thd_rskey int, 
		thd_hdkey int, 
		thd_hdpartnerkey int, 
		thd_hrkey int, 
		thd_rmkey int, 
		thd_rckey int, 
		thd_ackey int, 
		thd_pnkey int, 
		thd_hdmain smallint,
		thd_firsthotelday int,
		thd_ctkeyfrom int, 
		thd_ctkeyto int, 
		thd_apkeyfrom int, 
		thd_apkeyto int,
		thd_tourtype int,
		thd_cnname nvarchar(200) collate database_default,
		thd_tourname nvarchar(200) collate database_default,
		thd_hdname nvarchar(200) collate database_default,
		thd_ctname nvarchar(200) collate database_default,
		thd_rsname nvarchar(200) collate database_default,
		thd_ctfromname nvarchar(200) collate database_default,
		thd_cttoname nvarchar(200) collate database_default,
		thd_tourtypename nvarchar(200) collate database_default,
		thd_pncode nvarchar(50) collate database_default,
		thd_hdorder int,
		thd_hotelkeys nvarchar(256) collate database_default,
		thd_pansionkeys nvarchar(256) collate database_default,
		thd_hotelnights nvarchar(256) collate database_default,
		thd_tourvalid datetime,
		thd_hotelurl varchar(254) collate database_default
	)

	-- создадим темповую ценовую таблицу
	select top 1 * into #tempPriceTable from mwPriceDataTable with(nolock)
	truncate table #tempPriceTable
	
	
	CREATE NONCLUSTERED INDEX [x_main] ON [dbo].[#tempPriceTable] 
	(
		pt_tourdate asc,
		pt_hdkey asc,
		pt_rmkey asc,
		pt_rckey asc,
		pt_ackey asc,
		pt_pnkey asc,
		pt_days asc,
		pt_nights asc,
		pt_tourtype asc,
		pt_ctkeyfrom asc
	)

	select top 1
		ti_key,
		ti_tokey,
		ti_firsthdkey,
		ti_firstpnkey,
		ti_firsthrkey,
		ti_firsthotelday,
		ti_lasthotelday,
		ti_totaldays,
		ti_nights,
		ti_hotelkeys,
		ti_hotelroomkeys,
		ti_hoteldays,
		ti_hotelstars,
		ti_pansionkeys,
		ti_hdpartnerkey,
		ti_firsthotelpartnerkey,
		ti_hdday,
		ti_hdnights,
		ti_chkey,
		ti_chday,
		ti_chpkkey,
		ti_chprkey,
		ti_ctkeyfrom,
		ti_chbackkey,
		ti_chbackday,
		ti_chbackpkkey,
		ti_chbackprkey,
		ti_ctkeyto,
		ti_apkeyfrom,
		ti_apkeyto,
		ti_firstctkey,
		ti_firstrskey,
		ti_firsthdstars
	into #tp_lists
	from tp_lists with(nolock)

	truncate table #tp_lists
	alter table #tp_lists add primary key(ti_key)

	if(@calcKey is not null)
	begin
		insert into #tp_lists
		select
			ti_key,
			ti_tokey,
			ti_firsthdkey,
			ti_firstpnkey,
			ti_firsthrkey,
			ti_firsthotelday,
			ti_lasthotelday,
			ti_totaldays,
			ti_nights,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hoteldays,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hdpartnerkey,
			ti_firsthotelpartnerkey,
			ti_hdday,
			ti_hdnights,
			ti_chkey,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_ctkeyfrom,
			ti_chbackkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_ctkeyto,
			ti_apkeyfrom,
			ti_apkeyto,
			ti_firstctkey,
			ti_firstrskey,
			ti_firsthdstars
		from tp_lists with(nolock)
		where TI_CalculatingKey = @calcKey
	end
	else
	begin
		insert into #tp_lists
		select
			ti_key,
			ti_tokey,
			ti_firsthdkey,
			ti_firstpnkey,
			ti_firsthrkey,
			ti_firsthotelday,
			ti_lasthotelday,
			ti_totaldays,
			ti_nights,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hoteldays,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hdpartnerkey,
			ti_firsthotelpartnerkey,
			ti_hdday,
			ti_hdnights,
			ti_chkey,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_ctkeyfrom,
			ti_chbackkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_ctkeyto,
			ti_apkeyfrom,
			ti_apkeyto,
			ti_firstctkey,
			ti_firstrskey,
			ti_firsthdstars
		from tp_lists with(nolock)
		where TI_TOKey = @tokey		
	end

	declare @mwAccomodationPlaces nvarchar(254)
	declare @mwRoomsExtraPlaces nvarchar(254)
	declare @mwSearchType int
	declare @sql nvarchar(4000)
	declare @countryKey int
	declare @cityFromKey int

	declare @firsthdday int
	select @firsthdday = (select min(ts_day) 
				from tp_services with (nolock)
 				where ts_svkey = 3 and ts_tokey = @tokey)

	update #tp_lists with(rowlock)
	set
		ti_firsthotelday = @firsthdday

	update dbo.TP_Tours with(rowlock) set TO_Progress = 7 where TO_Key = @tokey

	update TP_Tours with(rowlock) set TO_MinPrice = (
			select min(TP_Gross) 
			from TP_Prices with(nolock) 
				left join TP_Lists with(nolock) on ti_key = tp_tikey
				left join HotelRooms with(nolock) on hr_key = ti_firsthrkey				
			where TP_TOKey = TO_Key 
					and hr_main > 0 
					and (isnull(HR_AGEFROM, 0) <= 0 or isnull(HR_AGEFROM, 0) > 16)
		)
		where TO_Key = @tokey

	update dbo.TP_Tours with(rowlock) set TO_Progress = 13 where TO_Key = @tokey

	update #tp_lists with(rowlock)
	set
		ti_lasthotelday = (select max(ts_day)
				from tp_servicelists  with (nolock)
					inner join tp_services with (nolock) on tl_tskey = ts_key
				where tl_tikey = ti_key and ts_svkey = 3 and TS_TOKey = @tokey and TL_TOKey = @tokey)

	update dbo.TP_Tours with(rowlock) set TO_Progress = 20 where TO_Key = @tokey	

	update dbo.TP_Tours with(rowlock) set TO_Progress = 30 where TO_Key = @tokey

	-- MEG00024548 Paul G 11.01.2009
	-- изменил логику подсчёта кол-ва ночей в туре
	-- раньше было сумма ночей проживания по всем отелям в туре
	-- теперь если проживания пересекаются, лишние ночи не суммируются
	update #tp_lists with(rowlock)
	set
		ti_nights = dbo.mwGetTiNights(ti_key)

	--koshelev
	--02.04.2012 MEG00040744
    declare @result nvarchar(256)
    set @result = N''
    select @result = @result + rtrim(ltrim(str(tbl.ti_nights))) + N', ' from (select distinct ti_nights from (select ti_nights from #tp_lists union select ti_nights from tp_lists where ti_tokey = @tokey ) as tbl2) tbl order by tbl.ti_nights
    declare @len int
    set @len = len(@result)
    if(@len > 0)
          set @result = substring(@result, 1, @len - 1)

    update TP_Tours with(rowlock) set TO_HotelNights = @result where TO_Key = @tokey

	update dbo.TP_Tours with(rowlock) set TO_Progress = 40 where TO_Key = @tokey

	update #tp_lists with(rowlock)
		set ti_hotelkeys = dbo.mwGetTiHotelKeys(ti_key),
			ti_hotelroomkeys = dbo.mwGetTiHotelRoomKeys(ti_key),
			ti_hoteldays = dbo.mwGetTiHotelNights(ti_key),
			ti_hotelstars = dbo.mwGetTiHotelStars(ti_key),
			ti_pansionkeys = dbo.mwGetTiPansionKeys(ti_key)

	update #tp_lists with(rowlock)
	set
		ti_hdpartnerkey = ts_oppartnerkey,
		ti_firsthotelpartnerkey = ts_oppartnerkey,
		ti_hdday = ts_day,
		ti_hdnights = ts_days
	from tp_servicelists with (nolock)
		inner join tp_services with (nolock) on (tl_tskey = ts_key and ts_svkey = 3)
	where tl_tikey = ti_key and ts_code = ti_firsthdkey and TS_TOKey = @tokey and TL_TOKey = @tokey

	-- Город отправления из свойств тура
	declare @ctdeparturekey int
	select	@ctdeparturekey = tl_ctdeparturekey
	from	tp_tours with(nolock)
		inner join tbl_turList with(nolock) on tbl_turList.tl_key = to_trkey
	where to_key = @tokey

	if (@ctdeparturekey is null or @ctdeparturekey = 0)
	begin
		-- Подбираем город вылета первого рейса
		exec GetCityDepartureKey @tokey, @ctdeparturekey output
	end

	-- город вылета
	update #tp_lists with(rowlock)
	set 
		ti_chkey = (select top 1 ts_code
			from tp_servicelists with(nolock) 
				inner join tp_services with(nolock) on tl_tskey = ts_key and ts_svkey = 1
			where tl_tikey = ti_key and ts_tokey = @tokey and tl_tokey = @tokey 
				and (ts_day <= ti_firsthotelday or (ts_day = 1 and ti_firsthotelday = 0)) and ts_subcode2 = @ctdeparturekey)

	update dbo.TP_Tours with(rowlock) set TO_Progress = 50 where TO_Key = @tokey

	-- город вылета + прямой перелет
	update #tp_lists with(rowlock)
	set 
		ti_chday = ts_day,
		ti_chpkkey = ts_oppacketkey,
		ti_chprkey = ts_oppartnerkey
	from tp_servicelists with(nolock) inner join tp_services with(nolock) on tl_tskey = ts_key and ts_svkey = 1
	where	tl_tikey = ti_key 
		and (ts_day <= ti_firsthotelday or (ts_day = 1 and ti_firsthotelday = 0))
		and ts_code = ti_chkey 
		and ts_subcode2 = @ctdeparturekey
		and TS_TOKey = @tokey and TL_TOKey = @tokey

	update #tp_lists with(rowlock)
	set 
		ti_ctkeyfrom = @ctdeparturekey

	-- Проверка наличия перелетов в город вылета
	declare @existBackCharter smallint
	select	@existBackCharter = count(ts_key)
	from	tp_services
	where	ts_tokey = @tokey
		and	ts_svkey = 1
		and ts_ctkey = @ctdeparturekey

	-- город прилета + обратный перелет
	update #tp_lists with(rowlock) 
	set 
		ti_chbackkey = ts_code,
		ti_chbackday = ts_day,
		ti_chbackpkkey = ts_oppacketkey,
		ti_chbackprkey = ts_oppartnerkey,
		ti_ctkeyto = ts_subcode2
	from tp_servicelists with(nolock)
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 1)
		inner join tp_tours with(nolock) on ts_tokey = to_key 
	where 
		tl_tikey = ti_key 
		and ts_day > ti_lasthotelday
		and (ts_ctkey = @ctdeparturekey or @existBackCharter = 0)
		and TI_TOKey = @tokey
		and TS_TOKey = @tokey and TL_TOKey = @tokey

	-- _ключ_ аэропорта вылета
	update #tp_lists with(rowlock)
	set 
		ti_apkeyfrom = (select top 1 ap_key from airport with(nolock), charter with(nolock) 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chkey)

	-- _ключ_ аэропорта прилета
	update #tp_lists with(rowlock)
	set 
		ti_apkeyto = (select top 1 ap_key from airport with(nolock), charter with(nolock) 
				where ch_portcodefrom = ap_code 
					and ch_key = ti_chbackkey)

	-- ключ города и ключ курорта + звезды
	update #tp_lists with(rowlock)
	set
		ti_firstctkey = hd_ctkey,
		ti_firstrskey = hd_rskey,
		ti_firsthdstars = hd_stars
	from hoteldictionary with(nolock)
	where 
		ti_firsthdkey = hd_key

	update dbo.TP_Tours with(rowlock) set TO_Progress = 60 where TO_Key = @tokey

	if dbo.mwReplIsPublisher() > 0
	begin
		declare @trkey int
		select @trkey = to_trkey from dbo.tp_tours with(nolock) where to_key = @tokey
		
		insert into dbo.mwReplTours with(rowlock) (rt_trkey, rt_tokey, rt_date, rt_CalcKey)
		values (@trkey, @tokey, getdate(), @calcKey)
		
		update CalculatingPriceLists with(rowlock) set CP_Status = 0 where CP_PriceTourKey = @tokey
		update dbo.TP_Tours with(rowlock) 
		set TO_Update = 0, 
			TO_Progress = 100,
			TO_IsEnabled = 1
		where TO_Key = @tokey
		
		--return
	end

	-- временная таблица с информацией об отелях
	insert into #tmpHotelData (
		thd_tourkey, 
		thd_firsthdkey, 
		thd_firstpnkey, 
		thd_cnkey, 
		thd_tlkey, 
		thd_isenabled, 
		thd_tourcreated, 
		thd_hdstars, 
		thd_ctkey, 
		thd_rskey, 
		thd_hdkey, 
		thd_hdpartnerkey, 
		thd_hrkey, 
		thd_rmkey, 
		thd_rckey, 
		thd_ackey, 
		thd_pnkey, 
		thd_hdmain,
		thd_firsthotelday,
		thd_ctkeyfrom, 
		thd_ctkeyto, 
		thd_apkeyfrom, 
		thd_apkeyto,
		thd_tourtype,
		thd_cnname,
		thd_tourname,
		thd_hdname,
		thd_ctname,
		thd_rsname,
		thd_ctfromname,
		thd_cttoname,
		thd_tourtypename,
		thd_pncode,
		thd_hotelkeys,
		thd_pansionkeys,
		thd_hotelnights,
		thd_tourvalid,
		thd_hotelurl
	)
	select distinct 
		to_key, 
		ti_firsthdkey, 
		ti_firstpnkey,
		to_cnkey, 
		to_trkey, 
		@forceEnable, 
		to_datecreated, 
		hd_stars, 
		hd_ctkey, 
		hd_rskey, 
		ts_code, 
		ts_oppartnerkey, 
		ts_subcode1, 
		hr_rmkey, 
		hr_rckey, 
		hr_ackey, 
		ts_subcode2, 
		(case ts_code when ti_firsthdkey then 1 else 0 end),
		ti_firsthotelday,
		isnull(ti_ctkeyfrom, 0), 
		ti_ctkeyto, 
		ti_apkeyfrom, 
		ti_apkeyto,
		tl_tip,
		cn_name,
		isnull(tl_nameweb, isnull(to_name, tl_name)),
		hd_name,
		ct_name,
		null,
		null,
		null,
		tp_name,
		pn_code,
		ti_hotelkeys,
		ti_pansionkeys,
		ti_hoteldays,
		to_datevalid,
		hd_http
	from #tp_lists with(nolock)
		inner join tp_tours with(nolock) on ti_tokey = to_key
		inner join tp_servicelists with(nolock) on tl_tikey = ti_key 
		inner join tp_services with(nolock) on (tl_tskey = ts_key and ts_svkey = 3) 
		inner join hoteldictionary with(nolock) on ts_code = hd_key
		inner join hotelrooms with(nolock) on hr_key = ts_subcode1
		inner join turList with(nolock) on turList.tl_key = to_trkey
		inner join country with(nolock) on cn_key = to_cnkey
		inner join citydictionary with(nolock) on ct_key = hd_ctkey
		inner join tiptur with(nolock) on tp_key = tl_tip
		inner join pansion with(nolock) on pn_key = ts_subcode2
	where to_key = @tokey and to_datevalid >= getdate() 
		and TS_TOKey = @tokey and TL_TOKey = @tokey

	update #tmpHotelData set thd_hdorder = (select min(ts_day) from tp_services with(nolock) where ts_tokey = thd_tourkey and ts_svkey = 3 and ts_code = thd_hdkey)
	update #tmpHotelData set thd_rsname = rs_name from resorts with(nolock) where rs_key = thd_rskey
	update #tmpHotelData set thd_ctfromname = ct_name from citydictionary with(nolock) where ct_key = thd_ctkeyfrom
	update #tmpHotelData set thd_ctfromname = '-Без перелета-' where thd_ctkeyfrom = 0
	update #tmpHotelData set thd_cttoname = ct_name from citydictionary with(nolock) where ct_key = thd_ctkeyto
	update #tmpHotelData set thd_cttoname = '-Без перелета-' where thd_ctkeyto = 0
	--

	update dbo.TP_Tours set TO_Progress = 70 where TO_Key = @tokey

	select @mwAccomodationPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings with(nolock)
	where SS_ParmName = 'MWAccomodationPlaces'

	select @mwRoomsExtraPlaces = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWRoomsExtraPlaces'

	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'

	if (@calcKey is null)
	begin
		delete from dbo.mwSpoDataTable with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceHotels with(rowlock) where sd_tourkey = @tokey
		delete from dbo.mwPriceDurations with(rowlock) where sd_tourkey = @tokey
	end
	else
	begin
		--saifullina 16.01.2013 если мы изменили название и дозаписываем тур, то должны дозаписать с новым названием
		update dbo.mwSpoDataTable set sd_tourname=(select to_name from TP_Tours where TO_Key=@tokey) where sd_tourkey = @tokey
	end

	--MEG00026692 Paul G 25.03.2010
	--функции от ti_key должны вызываться на каждую запись из tp_lists
	--поэтому результаты их выполнения записываю в темповую таблицу
	--которую джоиню в последующем селекте
	create table #tempTourInfo (
		tt_tikey int,
		tt_charterto varchar(256) collate database_default,
		tt_charterback varchar(256) collate database_default,
		tt_tourhotels varchar(256) collate database_default,
		tt_directFlightAttribute int,
		tt_backFlightAttribute int
	)

	insert into #tempTourInfo
	(
		tt_tikey, 
		tt_charterto, 
		tt_charterback, 
		tt_tourhotels,
		tt_directFlightAttribute,
		tt_backFlightAttribute
	)
	select 
		ti_key, 
		dbo.mwGetTourCharters(ti_key, 1), 
		dbo.mwGetTourCharters(ti_key, 0), 
		dbo.mwGetTourHotels(ti_key),
		dbo.mwGetTourCharterAttribute(ti_key, 1),
		dbo.mwGetTourCharterAttribute(ti_key, 0)
	from #tp_lists with(nolock)
	--End MEG00026692	

	if(@calcKey is not null)
	begin
		insert into #tempPriceTable (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys,
			[pt_topricefor],
			pt_tlattribute,
			pt_hddetails,
			pt_directFlightAttribute,
			pt_backFlightAttribute
		)
		select 
				(	case when @mwAccomodationPlaces = '0'
					then isnull(rm_nplaces, 0)
					else (	case when @findByAdultChild = 1 -- искать по взрослым
							then isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
							-- искать по основным
							else isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
							end)
					end),
				(	case when isnull(ac_nmenexbed, -1) = -1
					then (	case when @mwRoomsExtraPlaces <> '0' 
							then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
							end)
					else (	case when @findByAdultChild = 1 -- искать по детям
							then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
							-- искать по дополнительным местам
							else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
							end)
					end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			substring(tl_nameweb,1,128), 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			@forceEnable,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays,
			tt_charterto,
			tt_charterback,
			to_pricefor,
			tl_attribute,
			tt_tourhotels,
			tt_directFlightAttribute,
			tt_backFlightAttribute
		from tp_tours with(nolock)
			inner join turList with(nolock) on to_trkey = tl_key
			inner join #tp_lists with(nolock) on ti_tokey = to_key
			inner join tp_prices with(nolock) on tp_tikey = ti_key
			inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
			inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
			inner join pansion with(nolock) on ti_firstpnkey = pn_key
			inner join rooms with(nolock) on hr_rmkey = rm_key
			inner join roomscategory with(nolock) on hr_rckey = rc_key
			inner join accmdmentype with(nolock) on hr_ackey = ac_key
			inner join citydictionary with(nolock) on hd_ctkey = ct_key
			left outer join resorts with(nolock) on hd_rskey = rs_key
			inner join #tempTourInfo on tt_tikey = ti_key
		where
			to_key = @tokey and TP_CalculatingKey = @calcKey
	end
	else
	begin
		insert into #tempPriceTable (
			[pt_mainplaces],
			[pt_addplaces],
			[pt_main],
			[pt_tourvalid],
			[pt_tourcreated],
			[pt_tourdate],
			[pt_days],
			[pt_nights],
			[pt_cnkey],
			[pt_ctkeyfrom],
			[pt_apkeyfrom],
			[pt_ctkeyto],
			[pt_apkeyto],
			[pt_ctkeybackfrom],
			[pt_ctkeybackto],
			[pt_tourkey],
			[pt_tourtype],
			[pt_tlkey],
			[pt_pricelistkey],
			[pt_pricekey],
			[pt_price],
			[pt_hdkey],
			[pt_hdpartnerkey],
			[pt_rskey],
			[pt_ctkey],
			[pt_hdstars],
			[pt_pnkey],
			[pt_hrkey],
			[pt_rmkey],
			[pt_rckey],
			[pt_ackey],
			[pt_childagefrom],
			[pt_childageto],
			[pt_childagefrom2],
			[pt_childageto2],
			[pt_hdname],
			[pt_tourname],
			[pt_pnname],
			[pt_pncode],
			[pt_rmname],
			[pt_rmcode],
			[pt_rcname],
			[pt_rccode],
			[pt_acname],
			[pt_accode],
			[pt_rsname],
			[pt_ctname],
			[pt_rmorder],
			[pt_rcorder],
			[pt_acorder],
			[pt_rate],
			[pt_toururl],
			[pt_hotelurl],
			[pt_isenabled],
			[pt_chkey],
			[pt_chbackkey],
			[pt_hdday],
			[pt_hdnights],
			[pt_chday],
			[pt_chpkkey],
			[pt_chprkey],
			[pt_chbackday],
			[pt_chbackpkkey],
			[pt_chbackprkey],
			pt_hotelkeys,
			pt_hotelroomkeys,
			pt_hotelstars,
			pt_pansionkeys,
			pt_hotelnights,
			pt_chdirectkeys,
			pt_chbackkeys,
			[pt_topricefor],
			pt_tlattribute,
			pt_hddetails,
			pt_directFlightAttribute,
			pt_backFlightAttribute
		)
		select
				(	case when @mwAccomodationPlaces = '0'
					then isnull(rm_nplaces, 0)
					else (	case when @findByAdultChild = 1 -- искать по взрослым
							then isnull(AC_NADMAIN, 0) + isnull(AC_NADEXTRA,0)
							-- искать по основным
							else isnull(AC_NADMAIN, 0) + isnull(AC_NCHMAIN, 0)
							end)
					end),
				(	case when isnull(ac_nmenexbed, -1) = -1
					then (	case when @mwRoomsExtraPlaces <> '0' 
							then isnull(rm_nplacesex, 0)
							else isnull(ac_nmenexbed, 0)
							end)
					else (	case when @findByAdultChild = 1 -- искать по детям
							then isnull(AC_NCHMAIN, 0) + isnull(AC_NCHEXTRA, 0)
							-- искать по дополнительным местам
							else isnull(AC_NADEXTRA, 0) + isnull(AC_NCHEXTRA, 0)
							end)
					end),
			hr_main, 
			to_datevalid, 
			to_datecreated, 
			td_date,
			ti_totaldays,
			ti_nights,
			to_cnkey, 
			isnull(ti_ctkeyfrom, 0), 
			ti_apkeyfrom,
			ti_ctkeyto, 
			ti_apkeyto, 
			null,
			null,
			to_key, 
			tl_tip,
			tl_key, 
			ti_key, 
			tp_key,
			tp_gross, 
			ti_firsthdkey, 
			ti_hdpartnerkey,
			hd_rskey, 
			hd_ctkey, 
			hd_stars, 
			ti_firstpnkey,
			ti_firsthrkey, 
			hr_rmkey, 
			hr_rckey, 
			hr_ackey,
			ac_agefrom, 
			ac_ageto, 
			ac_agefrom2,
			ac_ageto2, 
			hd_name, 
			substring(tl_nameweb,1,128), 
			pn_name, 
			pn_code, 
			rm_name, 
			rm_code,
			rc_name, 
			rc_code, 
			ac_name, 
			ac_code, 
			rs_name,
			ct_name, 
			rm_order, 
			rc_order, 
			ac_order,
			to_rate,
			tl_webhttp,
			hd_http, 
			@forceEnable,
			ti_chkey,
			ti_chbackkey,
			ti_hdday,
			ti_hdnights,
			ti_chday,
			ti_chpkkey,
			ti_chprkey,
			ti_chbackday,
			ti_chbackpkkey,
			ti_chbackprkey,
			ti_hotelkeys,
			ti_hotelroomkeys,
			ti_hotelstars,
			ti_pansionkeys,
			ti_hoteldays,
			tt_charterto,
			tt_charterback,
			to_pricefor,
			tl_attribute,
			tt_tourhotels,
			tt_directFlightAttribute,
			tt_backFlightAttribute
		from tp_tours with(nolock)
			inner join turList with(nolock) on to_trkey = tl_key
			inner join #tp_lists with(nolock) on ti_tokey = to_key
			inner join tp_prices with(nolock) on tp_tikey = ti_key
			inner join tp_turdates with(nolock) on (td_tokey = to_key and td_date between tp_datebegin and tp_dateend)
			inner join hoteldictionary with(nolock) on ti_firsthdkey = hd_key
			inner join hotelrooms with(nolock) on ti_firsthrkey = hr_key
			inner join pansion with(nolock) on ti_firstpnkey = pn_key
			inner join rooms with(nolock) on hr_rmkey = rm_key
			inner join roomscategory with(nolock) on hr_rckey = rc_key
			inner join accmdmentype with(nolock) on hr_ackey = ac_key
			inner join citydictionary with(nolock) on hd_ctkey = ct_key
			left outer join resorts with(nolock) on hd_rskey = rs_key
			inner join #tempTourInfo on tt_tikey = ti_key
		where
			to_key = @tokey and TP_TOKey = @tokey
	end	

	--чтобы не перевыставлялись удаленные цены при выставлении тура в он-лайн
	update #tempPriceTable set pt_isenabled = 0 where exists (select 1 from mwdeleted with (nolock) where del_key = pt_pricekey)

	update dbo.TP_Tours set TO_Progress = 80 where TO_Key = @tokey
	
	if dbo.mwReplIsPublisher() <= 0
	begin
		insert into dbo.mwPriceDurations with(rowlock) (
			sd_tourkey,
			sd_tlkey,
			sd_days,
			sd_nights,
			sd_hdnights
		)
		select distinct
			ti_tokey,
			to_trkey,
			ti_totaldays,
			ti_nights,
			ti_hoteldays
		from #tp_lists with(nolock) inner join tp_tours with(nolock) on ti_tokey = to_key

		-- Даты в поисковой таблице ставим как в таблице туров - чтобы не было двоений MEG00021274
		update mwspodatatable with(rowlock) 
		set sd_tourcreated = to_datecreated 
		from tp_tours with(nolock)
		where sd_tourkey = to_key 		
			and to_key = @tokey
			and sd_tourcreated != to_datecreated 

		set @counter = -1
		set @deleteCount = 50000
		set @params = '@counterOut int output'

		-- Переписываем данные из временной таблицы и уничтожаем ее
		if @mwSearchType = 0
		begin
			while(@counter <> 0)
			begin
				if (@calcKey is not null)
					set @sql = 'delete top (' + ltrim(STR(@deleteCount)) +  ') from mwPriceDataTable with(rowlock) where pt_pricekey in (select tp_key from tp_prices with(nolock) where TP_CalculatingKey = ' + cast(@calcKey as nvarchar(20)) + '); set @counterOut = @@ROWCOUNT'
				else
					set @sql = 'delete top(' + ltrim(STR(@deleteCount)) + ') from mwPriceDataTable with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20)) + ';set @counterOut = @@ROWCOUNT'
				EXECUTE sp_executesql @sql, @params, @counterOut = @counter output
			end
		
			exec dbo.mwFillPriceTable '#tempPriceTable', 0, 0
		end
		else
		begin			
			declare cur cursor fast_forward for select distinct thd_cnkey, isnull(thd_ctkeyfrom, 0) from #tmpHotelData
			open cur
			fetch next from cur into @countryKey, @cityFromKey
			while @@fetch_status = 0
			begin
				exec dbo.mwCreateNewPriceTable @countryKey, @cityFromKey

				set @counter = -1
				set @params = '@counterOut int output'
				while(@counter <> 0)
				begin
					if (@calcKey is not null)
						set @sql = 'delete top (' + ltrim(rtrim(str(@deleteCount)))  + ') from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_pricekey in (select tp_key from tp_prices with(nolock) where TP_CalculatingKey = ' + cast(@calcKey as nvarchar(20)) + '); set @counterOut = @@ROWCOUNT'
					else
						set @sql = 'delete top (' + ltrim(rtrim(str(@deleteCount))) + ') from ' + dbo.mwGetPriceTableName(@countryKey, @cityFromKey) + ' with(rowlock) where pt_tourkey = ' + cast(@tokey as nvarchar(20)) + '; set @counterOut = @@ROWCOUNT'
					EXECUTE sp_executesql @sql, @params, @counterOut = @counter output
				end

				exec dbo.mwFillPriceTable '#tempPriceTable', @countryKey, @cityFromKey

				exec dbo.mwCreatePriceTableIndexes @countryKey, @cityFromKey
				fetch next from cur into @countryKey, @cityFromKey
			end		
			close cur
			deallocate cur
		end
	end
	
	if dbo.mwReplIsPublisher() <= 0
	begin

		update dbo.TP_Tours set TO_Progress = 90 where TO_Key = @tokey

		insert into dbo.mwPriceHotels with(rowlock) (
			sd_tourkey,
			sd_mainhdkey,
			sd_mainpnkey,
			sd_hdkey,
			sd_hdstars,
			sd_hdctkey,
			sd_hdrskey,
			sd_hrkey,
			sd_rmkey,
			sd_rckey,
			sd_ackey,
			sd_pnkey,
			sd_hdorder)
		select distinct 
			thd_tourkey, 
			thd_firsthdkey, 
			thd_firstpnkey,
			thd_hdkey, 
			thd_hdstars, 
			thd_ctkey, 
			thd_rskey, 
			thd_hrkey, 
			thd_rmkey, 
			thd_rckey, 
			thd_ackey, 
			thd_pnkey,
			thd_hdorder
		from #tmpHotelData

		-- информация об отелях
		insert into mwSpoDataTable with(rowlock)(
			sd_tourkey, 
			sd_cnkey, 
			sd_hdkey, 
			sd_hdstars, 
			sd_ctkey, 
			sd_rskey, 
			sd_ctkeyfrom, 
			sd_ctkeyto, 
			sd_tlkey, 
			sd_isenabled, 
			sd_tourcreated,
			sd_main,
			sd_pnkey,
			sd_tourtype,
			sd_cnname,
			sd_tourname,
			sd_hdname,
			sd_ctname,
			sd_rsname,
			sd_ctfromname,
			sd_cttoname,
			sd_tourtypename,
			sd_pncode,
			sd_hotelkeys,
			sd_pansionkeys,
			sd_tourvalid,

			sd_hotelurl,
			sd_hdprkey
		) 
		select distinct 
			thd_tourkey, 
			thd_cnkey, 
			thd_hdkey, 
			thd_hdstars, 
			thd_ctkey, 
			thd_rskey, 
			thd_ctkeyfrom, 
			thd_ctkeyto, 
			thd_tlkey, 
			thd_isenabled, 
			thd_tourcreated,
			thd_hdmain,
			thd_pnkey,
			thd_tourtype,
			thd_cnname,
			thd_tourname,
			thd_hdname,
			thd_ctname,
			thd_rsname,
			thd_ctfromname,
			thd_cttoname,
			thd_tourtypename,
			thd_pncode,
			thd_hotelkeys,
			thd_pansionkeys,
			thd_tourvalid,
			thd_hotelurl,
			thd_hdpartnerkey
		from #tmpHotelData 
		where thd_hdmain > 0

		update mwPriceHotels with(rowlock) set ph_sdkey = mwsdt.sd_key
			from mwSpoDataTable mwsdt with(nolock)
			where mwsdt.sd_tourkey = mwPriceHotels.sd_tourkey and mwsdt.sd_hdkey = mwPriceHotels.sd_mainhdkey
				and mwsdt.sd_tourkey = @tokey
				and mwPriceHotels.sd_tourkey = @tokey

		-- Указываем на необходимость обновления в таблице минимальных цен отеля
		update mwHotelDetails with(rowlock)
			set htd_needupdate = 1
			where htd_hdkey in (select thd_hdkey from #tmpHotelData)
			
	end
	
	if dbo.mwReplIsSubscriber() > 0
	begin
		while 1=1
		begin
			delete top (10000) from TP_Prices with(rowlock) where tp_tokey = @tokey
			if @@rowcount = 0
				break
		end
	
		while 1=1
		begin
			delete top (10000) from TP_ServiceLists with(rowlock) where tl_tokey = @tokey
			if @@rowcount = 0
				break
		end
		
		while 1=1
		begin
			delete top (10000) from TP_Services with(rowlock) where ts_tokey = @tokey
			if @@rowcount = 0
				break
		end
		
		while 1=1
		begin
			delete top (10000) from TP_Lists with(rowlock) where ti_tokey = @tokey
			if @@rowcount = 0
				break
		end
		-- don't delete from TP_Tours	
	end
	else
	begin
		update tp_lists with(rowlock)
		set
			ti_firsthdkey = ti.ti_firsthdkey,
			ti_lasthotelday = ti.ti_lasthotelday,			
			ti_nights = ti.ti_nights,
			ti_hotelkeys = ti.ti_hotelkeys,
			ti_hotelroomkeys = ti.ti_hotelroomkeys,
			ti_hoteldays = ti.ti_hoteldays,
			ti_hotelstars = ti.ti_hotelstars,
			ti_pansionkeys = ti.ti_pansionkeys,
			ti_hdpartnerkey = ti.ti_hdpartnerkey,
			ti_firsthotelpartnerkey = ti.ti_firsthotelpartnerkey,
			ti_hdday = ti.ti_hdday,
			ti_hdnights = ti.ti_hdnights,
			ti_chkey = ti.ti_chkey,
			ti_chday = ti.ti_chday,
			ti_chpkkey = ti.ti_chpkkey,
			ti_chprkey = ti.ti_chprkey,
			ti_ctkeyfrom = ti.ti_ctkeyfrom,
			ti_chbackkey = ti.ti_chbackkey,
			ti_chbackday = ti.ti_chbackday,
			ti_chbackpkkey = ti.ti_chbackpkkey,
			ti_chbackprkey = ti.ti_chbackprkey,
			ti_ctkeyto = ti.ti_ctkeyto,
			ti_apkeyfrom = ti.ti_apkeyfrom,
			ti_apkeyto = ti.ti_apkeyto,
			ti_firstctkey = ti.ti_firstctkey,
			ti_firstrskey = ti.ti_firstrskey,
			ti_firsthdstars = ti.ti_firsthdstars
		from #tp_lists ti
		where
			(tp_lists.TI_CalculatingKey = @calcKey or @calcKey is null)
			and tp_lists.TI_Key = ti.TI_Key
			and
			(
				isnull(tp_lists.ti_firsthdkey, 0) <> isnull(ti.ti_firsthdkey , 0)
				or isnull(tp_lists.ti_lasthotelday, 0) <> isnull(ti.ti_lasthotelday, 0)
				or isnull(tp_lists.ti_nights, 0) <> isnull(ti.ti_nights, 0)
				or isnull(tp_lists.ti_hotelkeys, 0) <> isnull(ti.ti_hotelkeys, 0)
				or isnull(tp_lists.ti_hotelroomkeys, 0) <> isnull(ti.ti_hotelroomkeys, 0)
				or isnull(tp_lists.ti_hoteldays, 0) <> isnull(ti.ti_hoteldays, 0)
				or isnull(tp_lists.ti_hotelstars, 0) <> isnull(ti.ti_hotelstars, 0)
				or isnull(tp_lists.ti_pansionkeys, 0) <> isnull(ti.ti_pansionkeys, 0)
				or isnull(tp_lists.ti_hdpartnerkey, 0) <> isnull(ti.ti_hdpartnerkey, 0)
				or isnull(tp_lists.ti_firsthotelpartnerkey, 0) <> isnull(ti.ti_firsthotelpartnerkey, 0)
				or isnull(tp_lists.ti_hdday, 0) <> isnull(ti.ti_hdday, 0)
				or isnull(tp_lists.ti_hdnights, 0) <> isnull(ti.ti_hdnights, 0)
				or isnull(tp_lists.ti_chkey, 0) <> isnull(ti.ti_chkey, 0)
				or isnull(tp_lists.ti_chday, 0) <> isnull(ti.ti_chday, 0)
				or isnull(tp_lists.ti_chpkkey, 0) <> isnull(ti.ti_chpkkey, 0)
				or isnull(tp_lists.ti_chprkey, 0) <> isnull(ti.ti_chprkey, 0)
				or isnull(tp_lists.ti_ctkeyfrom, 0) <> isnull(ti.ti_ctkeyfrom, 0)
				or isnull(tp_lists.ti_chbackkey, 0) <> isnull(ti.ti_chbackkey, 0)
				or isnull(tp_lists.ti_chbackday, 0) <> isnull(ti.ti_chbackday, 0)
				or isnull(tp_lists.ti_chbackpkkey, 0) <> isnull(ti.ti_chbackpkkey, 0)
				or isnull(tp_lists.ti_chbackprkey, 0) <> isnull(ti.ti_chbackprkey, 0)
				or isnull(tp_lists.ti_ctkeyto, 0) <> isnull(ti.ti_ctkeyto, 0)
				or isnull(tp_lists.ti_apkeyfrom, 0) <> isnull(ti.ti_apkeyfrom, 0)
				or isnull(tp_lists.ti_apkeyto, 0) <> isnull(ti.ti_apkeyto, 0)
				or isnull(tp_lists.ti_firstctkey, 0) <> isnull(ti.ti_firstctkey, 0)
				or isnull(tp_lists.ti_firstrskey, 0) <> isnull(ti.ti_firstrskey, 0)
				or isnull(tp_lists.ti_firsthdstars, 0) <> isnull(ti.ti_firsthdstars, 0)
			)
	end

	if(@forceEnable > 0 and @calcKey is null)
	begin
		exec mwEnablePriceTourNewSinglePrice @tokey, '#tempPriceTable'

		update tp_tours with(rowlock)
		set to_isenabled = 1
		where to_key = @tokey
	end
		
	drop table #tempPriceTable

	update dbo.TP_Tours with(rowlock)
	set TO_Update = 0,
		TO_Progress = 100,
		TO_DateCreated = GetDate(),
		TO_UpdateTime = GetDate()
	where
		TO_Key = @tokey

	EXECUTE mwFillPriceListDetails @tokey

end
GO

GRANT EXEC ON [dbo].[FillMasterWebSearchFields] TO PUBLIC
GO
/*********************************************************************/
/* end sp_FillMasterWebSearchFields.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetAddCostsForReCalculate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetAddCostsForReCalculate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetAddCostsForReCalculate]
GO
CREATE PROCEDURE [dbo].[GetAddCostsForReCalculate]
(
	-- хранимка возвращает данные для расчета доплат
	@tlKey int,
	@queueKeys dbo.ListIntValue readonly
)
AS
BEGIN
	--<VERSION>9.2.17.1</VERSION>
	--<DATE>2012-12-07</DATE>
	SET ARITHABORT ON;
	set nocount on;
	
	-- только проживание
	select QAC_Id, SCP_Id, ADC_TLKey, SC_SVKey, SC_Code, SC_SubCode1, SC_SubCode2, SCP_DateCheckIn, SCP_Days, SC_PRKey, SCP_Men, SCP_TourDays
	from TP_ServiceTours with(nolock)
	join TP_ServiceComponents with(nolock) on SC_ID = ST_SCId
	join TP_ServiceCalculateParametrs with(nolock) on SCP_SCID = SC_ID
	join AddCosts with(nolock) on ADC_TLKey = ST_TRKey
	join TP_QueueAddCosts with(nolock) on QAC_ADCId = ADC_Id and ST_SVKey = ADC_SVKey
	where
	QAC_Id in (select value from @queueKeys)
	and ADC_SVKey = 3
	and ST_TRKey = @tlKey
	and ADC_SVKey = SC_SVKey
	and (ADC_Code = 0 OR ADC_Code = SC_Code)
	and (ADC_SubCode1 = 0 OR SC_SubCode1 in (SELECT HR_Key FROM HotelRooms with(nolock) WHERE HR_RMKey=ADC_SubCode1))
	and (ADC_SubCode2 = 0 OR SC_SubCode1 in (SELECT HR_Key FROM HotelRooms with(nolock) WHERE HR_RCKey=ADC_SubCode2))
	and (ADC_PansionKey = 0 OR SC_SubCode2 = ADC_PansionKey)
	and (ADC_PartnerKey = 0 OR ADC_PartnerKey = SC_PRKey)
	-- нам нужны только доплаты на будующие даты
	and SCP_DateCheckIn > getdate()
	and SCP_DateCheckIn between ADC_CheckInDateBeg and ADC_CheckInDateEnd
	and (SCP_TourDays between case when isnull(ADC_LongMin, 0) = 0 then -100500 else ADC_LongMin end
		and case when isnull(ADC_LongMax, 0) = 0 then 100500 else ADC_LongMax end)
	union
	-- остальные услуги
	select QAC_Id, SCP_Id, ADC_TLKey, SC_SVKey, SC_Code, SC_SubCode1, SC_SubCode2, SCP_DateCheckIn, SCP_Days, SC_PRKey, SCP_Men, SCP_TourDays
	from TP_ServiceTours with(nolock)
	join TP_ServiceComponents with(nolock) on SC_ID = ST_SCId
	join TP_ServiceCalculateParametrs with(nolock) on SCP_SCID = SC_ID
	join AddCosts with(nolock) on ADC_TLKey = ST_TRKey
	join TP_QueueAddCosts with(nolock) on QAC_ADCId = ADC_Id and ST_SVKey = ADC_SVKey
	where 
	QAC_Id in (select value from @queueKeys)
	and ADC_SVKey != 3
	and ST_TRKey = @tlKey
	and ADC_SVKey = SC_SVKey
	and (ADC_Code = 0 OR ADC_Code = SC_Code)
	and (ADC_SubCode1 = 0 OR ADC_SubCode1 = SC_SubCode1)
	and (ADC_SubCode2 = 0 OR ADC_SubCode2 = SC_SubCode2)
	and (ADC_PartnerKey = 0 OR ADC_PartnerKey = SC_PRKey)
	-- нам нужны только доплаты на будующие даты
	and SCP_DateCheckIn > getdate()
	and SCP_DateCheckIn between ADC_CheckInDateBeg and ADC_CheckInDateEnd
	and (SCP_TourDays between case when isnull(ADC_LongMin, 0) = 0 then -100500 else ADC_LongMin end
		and case when isnull(ADC_LongMax, 0) = 0 then 100500 else ADC_LongMax end)
	option(maxdop 10);
END
GO

grant exec on [dbo].[GetAddCostsForReCalculate] to public
go
/*********************************************************************/
/* end sp_GetAddCostsForReCalculate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetNKey.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetNKey]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[GetNKey]
GO
CREATE PROCEDURE [dbo].[GetNKey]
  (@sTable varchar(50) = null,
  @nNewKey int = null output)
AS
--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-03-26</DATE>
declare @nID int
if @sTable = 'TP_TURDATES'
	set @sTable = 'TP_TOURDATES'
set nocount on

begin tran

	Select @nNewKey = id + 1 from Keys WITH (UPDLOCK) where Key_Table = @sTable
	update Keys set Id = @nNewKey where Key_Table = @sTable

commit tran

	if @nNewKey is Null
		begin
			insert into Keys (Key_Table, Id) values (@sTable, 2)
			set @nNewKey=1
		end
return 0
GO
GRANT EXECUTE ON [dbo].[GetNKey] TO Public
GO
/*********************************************************************/
/* end sp_GetNKey.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetNKeys.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetNKeys]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetNKeys]
GO

CREATE PROCEDURE [dbo].[GetNKeys]
  (@sTable varchar(50) = null,
  @nKeyCount int,
  @nNewKey int = null output)
AS
--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-03-21</DATE>
declare @nID int
set nocount on
if @nKeyCount is null
	set @nKeyCount = 0
	
if @sTable = 'TP_TURDATES'
	set @sTable = 'TP_TOURDATES'
	
begin tran

	Select @nNewKey = id + @nKeyCount from Keys WITH (UPDLOCK) where Key_Table = @sTable
	update Keys set Id = @nNewKey where Key_Table = @sTable

commit tran

if @nNewKey is Null
	begin
		insert into Keys (Key_Table, Id) values (@sTable, 2)
		set @nNewKey=@nKeyCount
	end
return 0
GO

grant exec on [dbo].[GetNKeys] to public
go
/*********************************************************************/
/* end sp_GetNKeys.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetPartnerCommission.sql */
/*********************************************************************/
if EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'[dbo].[GetPartnerCommission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE [dbo].[GetPartnerCommission]
GO

CREATE PROCEDURE [dbo].[GetPartnerCommission] 
     @nTLKey int,
     @nPRKey int,
     @nBTKey int,
     @nDSKey int output,
     @nValue money output,
     @nIsPercent int output, 
	 @dCheckinDate datetime,
	 @nCNKey int=0,
	 @DGCreateDate datetime = null,
	 @nDepartureCity int = 0,
	 @sDiscountCode varchar(5) = null,
	 @sDiscountNumber varchar(10) = null,
	 @price decimal(16,6) = null,
	 @rate varchar(3) = null,
	 @dogovorCode varchar(10) = null
AS
    --<VERSION>2009.2.18</VERSION>
    --<DATE>2013-03-11</DATE>
	declare @discountSettingValue varchar(256)
	select @discountSettingValue = ISNULL(SS_ParmValue, '0') from dbo.SystemSettings where SS_ParmName like 'SYSUseDiscountCards'
	if @discountSettingValue = '1' and ISNULL(@sDiscountCode, '') != '' and ISNULL(@sDiscountNumber, '') != ''
	begin
		
		declare @discountCode varchar(5)
		declare @discountNumber varchar(10)
		declare @reservationsCount int, @cardKey int
		declare @reservationsPrice decimal(16,6)
		declare @nationalRate varchar(3)
		declare @discount money
		declare @discountId int

		if (ISNULL(@dogovorCode, '') = '')
		begin
			set @sDiscountCode = rtrim(ltrim(@sDiscountCode))
			set @sDiscountNumber = rtrim(ltrim(@sDiscountNumber))
				
			select @cardKey = CD_Key from Cards where ISNULL(CD_Code, '') = ISNULL(@sDiscountCode, '') and ISNULL(CD_Number, '') = ISNULL(@sDiscountNumber, '')
			select @reservationsCount = count(RR_ID) from ReservationsRegister where RR_CardKey = @cardKey
			select @reservationsPrice = sum(DG_NationalCurrencyPrice) from Dogovor where DG_CODE in (select RR_DGCODE  COLLATE Cyrillic_General_CI_AS from ReservationsRegister where RR_CardKey = @cardKey)
			select @nationalRate = RA_Code from dbo.Rates where RA_National = 1
			exec ExchangeCost @price output, @rate, @nationalRate, @dCheckinDate

			set @reservationsPrice = ISNULL(@reservationsPrice, 0)
		
			select top 1 @discount = cast(ISNULL(DS_DISCOUNT, 0) as money), @discountId = DS_ID  
				from dbo.DiscountScheme, dbo.TurList, dbo.TurService where 
				TL_Key = @nTLKey and 
				TS_TRKey = TL_Key and
				DS_Series like @sDiscountCode and
				((DS_CityFromKey is not null and DS_CityFromKey = TL_CTDepartureKey) or (DS_CityFromKey is null)) and
				((DS_CountryKey is not null and DS_CountryKey = TL_CNKey) or (DS_CountryKey is null)) and
				((DS_CityKey is not null and DS_CityKey = TS_CTKey) or (DS_CityKey is null)) and
				((DS_TourTypeKey is not null and DS_TourTypeKey = TL_TIP) or (DS_TourTypeKey is null) or DS_TourTypeKey = -1) and
				((DS_ReservationsFrom is not null and DS_ReservationsFrom <= (@reservationsCount + 1)) or (DS_ReservationsFrom is null)) and
				((DS_ReservationsTo is not null and DS_ReservationsTo >= (@reservationsCount + 1)) or (DS_ReservationsTo is null)) and
				((DS_TotalCostFrom is not null and DS_TotalCostFrom <= (@reservationsPrice + @price)) or (DS_TotalCostFrom is null)) and
				((DS_TotalCostTo is not null and DS_TotalCostTo >= (@reservationsPrice + @price)) or (DS_TotalCostTo is null)) and
				((DS_MinPrice is not null and DS_MinPrice <= @price) or (DS_MinPrice is null))
			order by DS_ID DESC

			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		else
		begin
			
			select @discount = DD_DiscountPercent from dbo.DogovorDetails where DD_DGCODE like @dogovorCode
			set @discount = ISNULL(@discount, 0)
			set @nDSKey = -1
			set @nValue = @discount
			set @nIsPercent = 1
			return 1
		end
		
	end

     if @nPRKey = 0
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
		  return 0
     end

	declare @nPGKey int, @nTpKey int, @nAttr int, @nCTDepartureKey int
	set @nTpKey=0
	if 	@nPRKey>0
		select @nPGKey = PR_PGKey from Partners where PR_Key = @nPRKey
	else
		set @nPGKey=0
	if @nTLKey>0
		select @nCNKey = TL_CNKey, @nTpKey=TL_TIP, @nAttr = isnull(TL_Attribute, 0) 
		from TurList where TL_Key = @nTLKey

	declare @discountAction int
	set @discountAction = 0
	if @nAttr & 16 > 0
		set @discountAction = 1

	if @dCheckinDate is null
		SET @dCheckinDate=ISNULL(@dCheckinDate,GetDate())
     if @nBTKey = 0 or @nBTKey is null
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (-1,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and dateadd(second,-1,dateadd(day,1,CONVERT(char(10), ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200'),126)))
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_Priority, DS_BTKey desc, DS_TLKey, DS_CNKey,DS_TPKEY, DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end
     else
     begin
          select @nDSKey = DS_Key, @nValue = DS_Value, @nIsPercent = DS_IsPercent from Discounts
          where DS_PRKey IN(0, @nPRKey) AND DS_BTKey IN (0, @nBTKey) AND DS_PGKey IN (0, @nPGKey) 
				AND DS_TLKey IN (0, @nTLKey) AND DS_CNKey IN (0, @nCNKey) AND DS_TPKEY IN (-1,@nTpKey)
				AND @dCheckinDate between ISNULL(DS_CheckInFrom,'30-DEC-1899') and ISNULL(DS_CheckInTo,'30-DEC-2200')
				AND DATEDIFF(d, GetDate(), @dCheckinDate) <= ISNULL(DS_DaysBeforeCheckIn, 99999)
				AND ISNULL(@DGCreateDate, ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899')) between ISNULL(DS_DogovorCreateDateFrom,'30-DEC-1899') and dateadd(second,-1,dateadd(day,1,CONVERT(char(10), ISNULL(DS_DogovorCreateDateTo,'30-DEC-2200'),126)))
				AND (CASE WHEN @discountAction = 0 THEN ISNULL(DS_DAKey, 0) ELSE 0 END) = 0
				AND DS_DepartureCityKey IN (0, @nDepartureCity)
          order by DS_Priority, DS_BTKey, DS_TLKey, DS_CNKey, DS_TPKEY,DS_PRKey, DS_PGKey, DS_DepartureCityKey, @dCheckinDate - ISNULL(DS_DaysBeforeCheckIn, 77777) asc, DS_DogovorCreateDateFrom asc, DS_DogovorCreateDateTo asc, DS_DAKey asc
     end

     if @nDSKey is null
     begin
          set @nDSKey = -1     
          set @nValue = 0     
          set @nIsPercent = 1     
     end
GO

grant execute on [dbo].[GetPartnerCommission] to public
GO
/*********************************************************************/
/* end sp_GetPartnerCommission.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetPricePage_VP.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[sp_GetPricePage_VP]') AND xtype in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[sp_GetPricePage_VP]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-24</DATE>

-- Версия sp_GetPricePage для динамического ценообразования
CREATE PROCEDURE [dbo].[sp_GetPricePage_VP]
     @TourKey		int,			-- ключ тура (из таблицы TP_Tours)
     @calcKeyFrom	bigint,			-- начальный ключ calculatingKey
     @calcKeyTo		bigint			-- конечный ключ calculatingKey
AS

create table #TP_PRICES
	(
		xTP_Key [int] NOT NULL PRIMARY KEY CLUSTERED, 
		xTP_TIKEY [int]
	)

INSERT INTO #TP_PRICES(xTP_Key,xTP_TIKEY) 
SELECT TP_KEY, TP_TIKEY  
FROM TP_PRICES WITH(NOLOCK)
WHERE  TP_TOKEY = @TourKey 
   and TP_CalculatingKey between @calcKeyFrom and @calcKeyTo
ORDER BY TP_KEY
option(maxdop 10);

--get output results
SELECT * 
FROM TP_PRICES WITH(NOLOCK) 
WHERE TP_Key IN (SELECT xTP_Key FROM #TP_PRICES)
ORDER BY TP_KEY
option(maxdop 10);

-- Получаем все ServiceSet (варианты набора услуг).
SELECT DISTINCT xTP_TIKEY AS 'TP_TIKey' FROM #TP_PRICES
option(maxdop 10);

--Console.WriteLine("||  Получаем все связи услуг");
SELECT * FROM TP_SERVICELISTS WITH(NOLOCK)
WHERE TL_TIKEY in (SELECT DISTINCT xTP_TIKEY FROM #TP_PRICES)
ORDER BY TL_TIKEY
option(maxdop 10);

-- Получаем список удаленных цен
SELECT DISTINCT TPD_TPKey, TPD_TOKey, TPD_DateBegin, TPD_DateEnd, TPD_Gross, TPD_TIKey FROM TP_PricesDeleted WITH(NOLOCK)
WHERE TPD_TOKey = @TourKey
	and TPD_CalculatingKey between @calcKeyFrom and @calcKeyTo
option(maxdop 10);

GO
/*********************************************************************/
/* end sp_GetPricePage_VP.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetQuotaLoadListData_N.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetQuotaLoadListData_N]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetQuotaLoadListData_N]
GO

CREATE procedure [dbo].[GetQuotaLoadListData_N]
(
--<VERSION>2009.2.17.8</VERSION>
--<DATE>2013-05-07</DATE>
@QT_ID int=null,
@Service_SVKey int=null,
@Service_Code int=null,
@DateStart smalldatetime = null,
@DaysCount int=null,			 -- для режима 10-для наличия мест - в этом поле передается продолжительность услуги

@nShowQuotaTypes smallint =null,  -- показывать квоты типа (0 - все, 1 - allotment, 2 - commitment)
@bShowCommonInfo bit =null,  -- показывать (1-общую информацию по квоте, 0-информацию по распределению квоты)
@bShowAgencyInfo bit =null,   -- показывать информацию об агентских квотах
@AgentKey int =null,
@bFreeSale bit =null,
@DLKey int =null,
@ResultType smallint=null,		--варианты отображения (0,null-общее, 10-для наличия мест(из оформления))
@TourDurations  smallint=null,
@DateStart2 smalldatetime = null,
@DateStart3 smalldatetime = null,
@bShowByCheckIn bit =null,
@bCommonRelease bit =null,
@bShowCommonRequest bit = null,   --отображение услуг по запросу одной строкой
@nGridFilter int = 0              -- фильтр в зависимости от экрана / 3-английский вариант экранов
)
as 

DECLARE @DateEnd smalldatetime, @Service_PRKey int, @QT_IDLocal int, @Result_From smallint, @Result_To smallint, @ServiceLong smallint, @DurationLocal smallint, @ByRoom int
--@Result
--11 - общее кол-во мест (строка 8000)
--12 - кол-во свободных мест (строка 8000)
--13 - кол-во занятых мест (строка 8000)
--21 - кол-во свободных мест (smallint)
--22 - % Stop-Sale (smallint)
--23 - возможен ли заезд (smallint)
if @ResultType is null or @ResultType not in (10)
	Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)
Else --для наличия мест(из оформления)
BEGIN
	Set @ServiceLong=@DaysCount
	Set @DateEnd = DATEADD(DAY,ISNULL(@DaysCount,1)-1,@DateStart3)
	Set @DaysCount=DATEDIFF(DAY,@DateStart,@DateEnd)+1

	if exists (select 1 from dbo.Service(nolock) where SV_Key=@Service_SVKey and SV_IsDuration=1)
		set @DurationLocal=@ServiceLong
	Else
		set @DurationLocal=@TourDurations
END

CREATE TABLE #StopSaleTemp
(
SST_QDID int, SST_QO_Count smallint, SST_QO_CountWithStop smallint, SST_Comment varchar(255)
)

CREATE CLUSTERED INDEX idx_StopSaleTemp
ON #StopSaleTemp(SST_QDID ASC)

INSERT INTO #StopSaleTemp exec dbo.GetTableQuotaDetails	@DLKey, null, @DateStart, @DaysCount, null, null, @Service_SVKey, @Service_Code, null, null, 1

--SELECT * FROM #StopSaleTemp

CREATE TABLE #QuotaLoadList(QL_ID int identity(1,1),
QL_QTID int, QL_QOID int, QL_PRKey int, QL_SubCode1 int, QL_SubCode2 int, QL_PartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QL_Description nvarchar(255) collate Cyrillic_General_CI_AS, 
QL_dataType smallint, QL_Type smallint, QL_TypeQuota smallint, QL_Release nvarchar(max), QL_Durations nvarchar(20) collate Cyrillic_General_CI_AS, QL_FilialKey int, 
QL_CityDepartments int, QL_AgentKey int, QL_CustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QL_DateCheckinMin smalldatetime,
QL_ByRoom int)

DECLARE @n int, @str varchar(8000)
if (@ResultType is null) or (@ResultType <> 10)
BEGIN
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #QuotaLoadList ADD QL_' + CAST(@n as varchar(3)) + ' varchar(8000)'--' smallint'
		exec (@str)
		set @n = @n + 1
	END
END


if @bShowCommonInfo = 1
BEGIN
	insert into #QuotaLoadList 
	(QL_QTID, QL_Type, QL_Release, QL_dataType, QL_DateCheckinMin, QL_PRKey, QL_ByRoom, QL_TypeQuota)
	select	DISTINCT QT_ID, QD_Type, case when QD_Release = 0 then null else QD_Release end, NU_ID, @DateEnd+1,QT_PRKey, QT_ByRoom, QT_IsByCheckIn
	from	Quotas, QuotaObjects, QuotaDetails, Numbers
	where	QT_ID=QO_QTID and QD_QTID=QT_ID
			and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
			and ISNULL(QD_IsDeleted,0)=0
			and QD_Date between @DateStart and @DateEnd
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0)
			and NU_ID between 1 and 3
END
else
BEGIN
	DECLARE @Service_SubCode1 int, @Object_SubCode1 int, @Object_SubCode2 int, @Service_SubCode2 int
	SET @Object_SubCode1=0
	SET @Object_SubCode2=0
	IF @DLKey is not null				-- если мы запустили процедуру из конкрентной услуги
	BEGIN
		SELECT	@Service_SVKey=DL_SVKey, @Service_Code=DL_Code, @Service_SubCode1=DL_SubCode1
			  , @AgentKey=ISNULL(DL_Agent,0), @Service_PRKey=DL_PartnerKey, @Service_SubCode2 = DL_SubCode2
		FROM	DogovorList (nolock)
		WHERE	DL_Key=@DLKey
		If @Service_SVKey=3
			SELECT @Object_SubCode1=HR_RMKey, @Object_SubCode2=HR_RCKey 
			FROM dbo.HotelRooms (nolock) WHERE HR_Key=@Service_SubCode1
		Else
			SET @Object_SubCode1=@Service_SubCode1
		IF @Service_SVKey=1
			SET @Object_SubCode2=@Service_SubCode2
	END

if @ResultType is null or @ResultType not in (10)
BEGIN
	Set @Result_From=11
	Set @Result_To=13
END
ELSE
BEGIN
	--для наличия мест(из оформления)
	Set @Result_From=21
	Set @Result_To=23
END;
	-- сначала заполняем таблицу квотами
	-- чтобы ускорить инсерт добавим временную таблицу
	DECLARE @TempTable2 TABLE
	(
		QL_QTID int,
		QL_Type smallint,
		QL_TypeQuota smallint,
		QL_Release int,
		QL_Durations varchar(20),
		QL_FilialKey int,
		QL_CityDepartments int,
		QL_AgentKey int,
		QL_CustomerInfo varchar(150),
		QL_DateCheckinMin smalldatetime,
		QL_PRKey int,
		QL_ByRoom int		
	)
	
	declare @QT_IsByCheckIn bit
	select @QT_IsByCheckIn = QT_IsByCheckIn from Quotas where QT_ID = @QT_ID
	
	if (@QT_IsByCheckIn = 1 or @QT_IsByCheckIn is null)
		insert into @TempTable2 (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
		select QT_ID, QD_Type, QT_IsByCheckIn, QD_Release, convert(nvarchar(max) ,QD_LongMin) + '-' + convert(nvarchar(max) ,QD_LongMax), QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd + 1, QT_PRKey,QT_ByRoom
		from	Quotas (nolock), QuotaObjects (nolock), QuotaDetails (nolock), QuotaParts (nolock)
		where	QT_ID=QO_QTID
				and QD_QTID=QT_ID
				and QP_QDID = QD_ID
				and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
				and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
				and QD_Date between @DateStart and @DateEnd
				and QP_Date between @DateStart and @DateEnd
				and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
				and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
				and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations (nolock) WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
				and ISNULL(QP_IsDeleted,0)=0
				and ISNULL(QD_IsDeleted,0)=0			
				and (@DLKey is null or (@DLKey is not null
				and ((QO_SubCode1 = -1) or (QO_SubCode1 in (0,@Object_SubCode1))) 
				and ((QO_SubCode2 = -1) or (QO_SubCode2 in (0,@Object_SubCode2)))))
				and QT_IsByCheckIn = 1 
	if (@QT_IsByCheckIn = 0 or @QT_IsByCheckIn is null)
		insert into @TempTable2 (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
		select QT_ID, QD_Type, QT_IsByCheckIn, QD_Release, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, '', @DateEnd + 1, QT_PRKey,QT_ByRoom
		from	Quotas (nolock), QuotaObjects (nolock), QuotaDetails (nolock), QuotaParts (nolock)
		where	QT_ID=QO_QTID
				and QD_QTID=QT_ID
				and QP_QDID = QD_ID
				and ((QO_Code=@Service_Code and QO_SVKey=@Service_SVKey and QO_QTID is not null and @QT_ID is null) or (@QT_ID is not null and @QT_ID=QT_ID))
				and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
				and QD_Date between @DateStart and @DateEnd
				and QP_Date between @DateStart and @DateEnd
				and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
				and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
				and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations (nolock) WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
				and ISNULL(QP_IsDeleted,0)=0
				and ISNULL(QD_IsDeleted,0)=0			
				and (@DLKey is null or (@DLKey is not null
				and ((QO_SubCode1 = -1) or (QO_SubCode1 in (0,@Object_SubCode1))) 
				and ((QO_SubCode2 = -1) or (QO_SubCode2 in (0,@Object_SubCode2)))))
				and QT_IsByCheckIn = 0 

	insert into #QuotaLoadList (QL_QTID, QL_Type, QL_TypeQuota, QL_Release, QL_dataType, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom)
	SELECT DISTINCT QL_QTID, QL_Type, QL_TypeQuota, QL_Release, NU_ID, QL_Durations, QL_FilialKey, QL_CityDepartments, QL_AgentKey, QL_CustomerInfo, QL_DateCheckinMin, QL_PRKey, QL_ByRoom
	FROM @TempTable2 nolock, Numbers (nolock)
	WHERE NU_ID between @Result_From and @Result_To

END

DECLARE @QD_ID int, @Date smalldatetime, @State smallint, @QD_Release int, @QP_Durations varchar(20), @QP_FilialKey int,
		@QP_CityDepartments int, @QP_AgentKey int, @Quota_Places int, @Quota_Busy int, @QP_IsNotCheckIn bit,
		@QD_QTID int, @QP_ID int, @Quota_Comment varchar(8000), @Stop_Comment varchar(255), @QO_ID int, @QT_IsNotCheckIn smallint, @QD_LongMin smallint, @QD_LongMax smallint--,	@QT_ID int
DECLARE @ColumnName varchar(10), @QueryUpdate varchar(8000), @QueryUpdate1 varchar(255), @QueryWhere1 varchar(255), @QueryWhere2 varchar(255), 
		@QD_PrevID int, @StopSale_Percent int, @CheckInPlaces smallint, @CheckInPlacesBusy smallint --@QuotaObjects_Count int, 

if @bShowCommonInfo = 1
	DECLARE curQLoadList CURSOR FOR SELECT 
			QT_ID, QD_ID, QD_Date, QD_Type, case when QD_Release = 0 then null else QD_Release end,
			QD_Places, QD_Busy,
			0,'',0,0,0,0, ISNULL(REPLACE(QD_Comment,'''','"'),''),0,0,0,0,0
	FROM	Quotas, QuotaDetails
	WHERE	QD_QTID=QT_ID
			and 
			(	
				(@QT_ID is null and exists 
					(	
						SELECT 1 FROM QuotaObjects WHERE QT_ID=QO_QTID 
						and QO_Code=@Service_Code and QO_SVKey=@Service_SVKey
					)
				)
				or
				(@QT_ID is not null and @QT_ID=QT_ID)
			)
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) and QD_Date between @DateStart and @DateEnd
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID
else
	DECLARE curQLoadList CURSOR FOR 
	SELECT QT_ID, QD_ID, QD_Date, QD_Type, QD_Release, 
			QP_Places, QP_Busy, 
			QP_ID, QP_Durations, QP_FilialKey, QP_CityDepartments, QP_AgentKey, ISNULL(QP_IsNotCheckIn,0), ISNULL(REPLACE(QD_Comment,'''','"'),'') + '' + ISNULL(REPLACE(QP_Comment,'''','"'),''), QP_CheckInPlaces, QP_CheckInPlacesBusy, QT_IsByCheckIn, QD_LongMin, QD_LongMax
	FROM	Quotas, QuotaDetails,QuotaParts
	WHERE	QD_QTID=QT_ID and QP_QDID = QD_ID
			and 
			(	
				(@QT_ID is null and exists 
					(	
						SELECT 1 FROM QuotaObjects WHERE QT_ID=QO_QTID 
						and QO_Code=@Service_Code and QO_SVKey=@Service_SVKey
					)
				)
				or
				(@QT_ID is not null and @QT_ID=QT_ID)
			)
			and (QD_Type = @nShowQuotaTypes or @nShowQuotaTypes = 0) 
			and QD_Date between @DateStart and @DateEnd
			and QP_Date between @DateStart and @DateEnd
			and QP_QDID = QD_ID	
			and (QP_AgentKey is null or (@bShowAgencyInfo=1 and ((@AgentKey=QP_AgentKey) or (@AgentKey is null))))
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey=QT_PRKey or QT_PRKey=0)))
			and (QP_Durations='' or (@DurationLocal is null or (@DurationLocal is not null and exists (Select QL_QPID From QuotaLimitations WHERE QL_Duration=@DurationLocal and QL_QPID=QP_ID))))
			and (QP_IsDeleted = 0 or QP_IsDeleted is null)
			and (QD_IsDeleted = 0 or QD_IsDeleted is null)
	ORDER BY QD_Date DESC, QD_ID


OPEN curQLoadList
FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
									@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
									@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, 
									@QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy, @QT_IsNotCheckIn, @QD_LongMin, @QD_LongMax
SET @QD_PrevID = @QD_ID - 1

SET @StopSale_Percent=0
WHILE @@FETCH_STATUS = 0
BEGIN
	set @QueryUpdate1=''
	if DATEADD(DAY,ISNULL(@QD_Release,0),DATEADD(hh,0,GETDATE()- {fn CURRENT_time()})) < @Date
	begin
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
		--print @QueryUpdate1
	end
	--если релиз период наступил сегодня
	if DATEADD(DAY,ISNULL(@QD_Release,0),DATEADD(hh,0,GETDATE()- {fn CURRENT_time()})) = @Date
	begin
		set @QueryUpdate1=', QL_DateCheckInMin=''' + CAST(@Date as varchar(250)) + ''''
		--print @QueryUpdate1
	end
	set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))

	If @QD_PrevID != @QD_ID
	BEGIN
		SET @StopSale_Percent=0
		
		SET @Stop_Comment = ''
		IF @DLKey is null
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100*SST_QO_Count/SST_QO_CountWithStop, @Stop_Comment = SST_Comment FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID
		END
		ELSE
		BEGIN
			if Exists (SELECT 1 FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID )
				SELECT @StopSale_Percent = 100, @Stop_Comment = SST_Comment FROM #StopSaleTemp (nolock) WHERE SST_QDID = @QD_ID
		END

		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment
		SET @QD_PrevID = @QD_ID
	END	
	ELSE
		If @Stop_Comment!=''
			SET @Quota_Comment=@Quota_Comment+ 'Stop-Sale info: ' + @Stop_Comment

	set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))
	if @QD_Release is null
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release is null' 
	else
		set @QueryWhere1 = @QueryWhere1 + ' and QL_Release = ' + CAST(@QD_Release as varchar(5))
	
	if @bShowCommonInfo = 1
	BEGIN
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10)) + ';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
		set @QueryUpdate = 'UPDATE #QuotaLoadList SET 
			QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 1 THEN ''' + CAST((@Quota_Places) as varchar(10))  + ''' WHEN 2 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10))  + ''' WHEN 3 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+' + ''';' + CAST(@QD_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@Quota_Comment as varchar(7980)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + ' and QL_dataType in (1,2,3) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		--print @QueryUpdate
		exec (@QueryUpdate)
	END
	else
	BEGIN
		set @QueryWhere2 = ''
		
		if (@QT_IsNotCheckIn = 1 or @QT_IsNotCheckIn is null)
		begin
			if @QD_LongMin is null and @QD_LongMax is null
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
			else
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + (convert(nvarchar(max) ,@QD_LongMin) + '-' + convert(nvarchar(max) ,@QD_LongMax)) + ''''
		end
		if (@QT_IsNotCheckIn = 0 or @QT_IsNotCheckIn is null)
		begin
			if @QP_Durations is null
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations is null' 
			else
				set @QueryWhere2 = @QueryWhere2 + ' and QL_Durations = ''' + @QP_Durations + ''''
		end
		
		if @QP_FilialKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_FilialKey = ' + CAST(@QP_FilialKey as varchar(10))
		if @QP_CityDepartments is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_CityDepartments = ' + CAST(@QP_CityDepartments as varchar(10))
 		if @QP_AgentKey is null
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey is null' 
		else
			set @QueryWhere2 = @QueryWhere2 + ' and QL_AgentKey = ' + CAST(@QP_AgentKey as varchar(10))
	--			+ ',QL_B_' + @ColumnName + ' = ''' + CAST((@Quota_Busy) as varchar(10))  + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7980)) + ''''
		IF @ResultType is null or @ResultType not in (10)
		BEGIN
			IF @bShowByCheckIn = 1 and @QP_Durations <> '' 
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 11 THEN ''' + CAST(ISNULL(@CheckInPlaces,0) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST(ISNULL(@CheckInPlaces-@CheckInPlacesBusy,0) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST(ISNULL(@CheckInPlacesBusy,0) as varchar(10)) + ''' END)+' + ''';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			ELSE
			BEGIN
				-- @StopSaleOrPlaces служит для показывания буквы 'S' для стопов на объекты квотирования вместо 0
				DECLARE @StopSaleOrPlaces varchar(255)
				if @QD_ID < 0
					set @StopSaleOrPlaces = '''S'
				else
					set @StopSaleOrPlaces = '(CASE QL_dataType WHEN 11 THEN ''' + CAST((@Quota_Places) as varchar(10)) + ''' WHEN 12 THEN ''' + CAST((@Quota_Places-@Quota_Busy) as varchar(10)) + ''' WHEN 13 THEN ''' + CAST((@Quota_Busy) as varchar(10)) + ''' END)+'''
					
				set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = ' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''''
					+ @QueryUpdate1
					+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (11,12,13) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
			END		
		END
		ELSE
		BEGIN
		--для наличия мест(из оформления)
			--  WHEN 22 THEN ' + @StopSale_Percent + ' WHEN 23 THEN ' + @QP_IsNotCheckIn + ' END
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET	
					QL_' + @ColumnName + ' = (CASE QL_dataType WHEN 21 THEN ' + CAST((@Quota_Places-@Quota_Busy) as varchar(5)) + ' WHEN 22 THEN ' + CAST(@StopSale_Percent as varchar(5)) + ' WHEN 23 THEN ' + CAST(@QP_IsNotCheckIn as varchar(5)) + ' END)' 
				+ @QueryUpdate1
				+ @QueryWhere1 + @QueryWhere2 + ' and QL_dataType in (21,22,23) and QL_QTID=' + CAST(@QT_IDLocal as varchar(10))
		END	
		--print @QueryUpdate
		exec (@QueryUpdate)
	END	
	FETCH NEXT FROM curQLoadList INTO	@QT_IDLocal,
										@QD_ID, @Date, @State, @QD_Release, @Quota_Places, @Quota_Busy,
										@QP_ID, @QP_Durations, @QP_FilialKey, @QP_CityDepartments, @QP_AgentKey, 
										@QP_IsNotCheckIn, @Quota_Comment, @CheckInPlaces, @CheckInPlacesBusy, @QT_IsNotCheckIn, @QD_LongMin, @QD_LongMax
END
CLOSE curQLoadList
DEALLOCATE curQLoadList

--select * from #QuotaLoadList
-- заполняем таблицу стопами, т.е. обозначаем квоты на которых стоит стоп, и если стоп поставлен плагином, добавляем строчку с буквой "S"
DECLARE @TEMP_QL_ID INT, 
	@SS_Code INT, @SS_SubCode1 INT, @SS_SubCode2 INT, @SS_PRKey INT, @SS_AllotmentAndCommitment INT, @SS_Date datetime, @SS_Comment varchar(255),
	@SS_PrevCode INT, @SS_PrevSubCode1 INT, @SS_PrevSubCode2 INT, @SS_PrevPRKey INT, @SS_PrevAllotmentAndCommitment INT, @SS_PrevDate datetime, 
	@SS_PrevComment varchar(255)

SET @StopSaleOrPlaces = 'S'
SET @QP_ID=-1
SET @StopSale_Percent = 100
SET @QP_IsNotCheckIn = 0
SET @TEMP_QL_ID = null

declare StopSaleWithOutQO CURSOR FOR
	SELECT	QO_Code, QO_SubCode1, QO_SubCode2, SS_PRKey, ISNULL(SS_AllotmentAndCommitment,0), SS_Date, SS_Comment
	FROM	QuotaObjects, StopSales 
	WHERE	QO_ID = SS_QOID 
			and QO_Code = @Service_Code and QO_SVKey = @Service_SVKey and QO_QTID is null
			and SS_Date between @DateStart and @DateEnd
			and (@Service_PRKey is null or (@Service_PRKey is not null and (@Service_PRKey = SS_PRKey or SS_PRKey = 0)))
			and ISNULL(SS_IsDeleted,0) = 0
	ORDER BY QO_Code, QO_SubCode1, QO_SubCode2, SS_PRKey, SS_AllotmentAndCommitment, SS_Date, SS_Comment
OPEN StopSaleWithOutQO
FETCH NEXT FROM StopSaleWithOutQO INTO	
			@SS_Code, @SS_SubCode1, @SS_SubCode2, @SS_PRKey, @SS_AllotmentAndCommitment, @SS_Date, @SS_Comment
WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SS_Code != ISNULL(@SS_PrevCode,-100)
		OR @SS_SubCode1 != @SS_PrevSubCode1
		OR @SS_SubCode2 != @SS_PrevSubCode2
		OR @SS_PRKey != @SS_PrevPRKey
		OR @SS_AllotmentAndCommitment != @SS_PrevAllotmentAndCommitment
	BEGIN
		SET @SS_PrevDate = null
		SET @ColumnName = CAST((DATEDIFF(DAY,@DateStart,@SS_Date)+1) as varchar(3))
		SET @Quota_Comment = ISNULL(@SS_Comment,'')
		SET @QueryUpdate='INSERT INTO #QuotaLoadList 
			(QL_QTID, QL_PRKey, QL_SubCode1, QL_SubCode2, QL_dataType, 
			QL_Type, QL_ByRoom, QL_' + @ColumnName + ')
			values 
			(0, ' + CAST(@SS_PRKey as varchar(15)) + ', ' + CAST(@SS_SubCode1 as varchar(15)) + ', ' + CAST(@SS_SubCode2 as varchar(15)) + ', 11, ' +
			CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) + ', 1, 
			''' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + '''
			)
		'
		exec (@QueryUpdate)
	END
	ELSE
	BEGIN
		IF @SS_Date != @SS_PrevDate
		BEGIN
			SET @ColumnName = CAST((DATEDIFF(DAY,@DateStart,@SS_Date)+1) as varchar(3))
			SET @Quota_Comment = ISNULL(@SS_Comment,'')
			SET @QueryUpdate='UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = ''' + @StopSaleOrPlaces + ';' + CAST(@QP_ID as varchar(10)) + ';' + CAST(@StopSale_Percent as varchar(10)) + ';' + CAST(@QP_IsNotCheckIn as varchar(1)) + ';'  + CAST(@Quota_Comment as varchar(7900)) + ''' 
						WHERE 
							QL_PRKey = ' + CAST(@SS_PRKey as varchar(15)) + '
							AND QL_SubCode1 = ' + CAST(@SS_SubCode1 as varchar(15)) + '
							AND QL_SubCode2 = ' + CAST(@SS_SubCode2 as varchar(15)) + '
							AND QL_Type = ' + CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) 
							
			exec (@QueryUpdate)
		END
		ELSE IF @SS_Date = @SS_PrevDate
		BEGIN 
			IF @SS_Comment != @SS_PrevComment
			BEGIN
				SET @Quota_Comment = ISNULL(@SS_Comment,'')
				SET @QueryUpdate='UPDATE #QuotaLoadList SET	
						QL_' + @ColumnName + ' = QL_' + @ColumnName + ' + CAST(' + @Quota_Comment + ' as varchar(7900)) +  
						WHERE 
							QL_PRKey = ' + CAST(@SS_PRKey as varchar(15)) + '
							AND QL_SubCode1 = ' + CAST(@SS_SubCode1 as varchar(15)) + '
							AND QL_SubCode2 = ' + CAST(@SS_SubCode2 as varchar(15)) + '
							AND QL_Type = ' + CAST((@SS_AllotmentAndCommitment+1) as varchar(2)) 
				exec (@QueryUpdate)
			END
		END
	END
	SET @SS_PrevDate = @SS_Date
	SET @SS_PrevComment = @SS_Comment	
	SET @SS_PrevCode = @SS_Code
	SET @SS_PrevSubCode1 = @SS_SubCode1
	SET @SS_PrevSubCode2 = @SS_SubCode2
	SET @SS_PrevPRKey = @SS_PRKey
	SET @SS_PrevAllotmentAndCommitment = @SS_AllotmentAndCommitment
	FETCH NEXT FROM StopSaleWithOutQO INTO	
				@SS_Code, @SS_SubCode1, @SS_SubCode2, @SS_PRKey, @SS_AllotmentAndCommitment, @SS_Date, @SS_Comment
END
CLOSE StopSaleWithOutQO
DEALLOCATE StopSaleWithOutQO


IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	IF(@Service_SVKey = 3)
		SET @ByRoom = (SELECT AVG(ISNULL(QL_ByRoom,0)) FROM #QuotaLoadList)
	ELSE
		SET @ByRoom = 0

	insert into #QuotaLoadList 
		(QL_SubCode1, QL_Type, QL_dataType, QL_PRKey, QL_ByRoom)
	select DISTINCT DL_SubCode1, SD_State, 21, DL_PartnerKey, @ByRoom
	from	DogovorList (nolock),ServiceByDate (nolock)
	where	SD_DLKey=DL_Key
			and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd))
			and SD_Date<=@DateEnd and SD_Date>=@DateStart
			and SD_State not in (1,2)
	group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
END

if (@nGridFilter=3)
begin
	update #QuotaLoadList set QL_CustomerInfo = (Select PR_NameENG from Partners (nolock) where PR_Key = QL_AgentKey and QL_AgentKey > 0)
	update #QuotaLoadList set QL_PartnerName = (Select PR_NameENG from Partners (nolock) where PR_Key = QL_PRKey and QL_PRKey > 0)
end
else
begin
	update #QuotaLoadList set QL_CustomerInfo = (Select PR_Name from Partners (nolock) where PR_Key = QL_AgentKey and QL_AgentKey > 0)
	update #QuotaLoadList set QL_PartnerName = (Select PR_Name from Partners (nolock) where PR_Key = QL_PRKey and QL_PRKey > 0)
end
update #QuotaLoadList set QL_PartnerName = 'All partners' where QL_PRKey=0

IF @DLKey is null and @QT_ID is null and (@ResultType is null or @ResultType not in (10))
BEGIN
	DECLARE @ServiceCount int, @SubCode1 int, @PartnerKey int

	DECLARE curQServiceList CURSOR FOR SELECT
		SD_Date,
		CASE @ByRoom WHEN 1 THEN count(distinct SD_RLID) ELSE count(SD_ID) END,
		DL_SubCode1,
		DL_PartnerKey,
		SD_State
		from	DogovorList (nolock),ServiceByDate (nolock)
		where	SD_DLKey=DL_Key
				and DL_SVKey=@Service_SVKey and DL_Code=@Service_Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
				and SD_State not in (1,2)
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
	OPEN curQServiceList
	FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State

	WHILE @@FETCH_STATUS = 0
	BEGIN
		set @ColumnName = CAST(CAST((@Date-@DateStart+1) as int) as varchar(6))
		set @QueryWhere1 = ' where QL_Type = ' + CAST(@State as varchar(1))

		set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + @ColumnName + ' = ''' + CAST((@ServiceCount) as varchar(10))  + ''' 
		WHERE QL_Type = ' + CAST(@State as varchar(1)) + ' and QL_SubCode1= ' + CAST(@SubCode1 as varchar(10)) + ' and QL_PRKey= ' + CAST(@PartnerKey as varchar(10))

		exec (@QueryUpdate)
		FETCH NEXT FROM curQServiceList INTO	@Date, @ServiceCount, @SubCode1, @PartnerKey, @State
	END
	CLOSE curQServiceList
	DEALLOCATE curQServiceList
END

DECLARE @QO_SubCode int, @QO_TypeD smallint, @DL_SubCode1 int, @QT_ID_Prev int, @ServiceName1 varchar(100), @ServiceName2 varchar(100), @Temp varchar(100),
	@IDEN_Local int, @IDEN_Prev int, @IDENTYPE_Local int, @IDENTYPE_Prev int
DECLARE curQLoadListQO CURSOR FOR 
	SELECT DISTINCT QO_QTID, QO_SubCode1, 1, null, 1 FROM QuotaObjects (nolock) WHERE QO_QTID in (SELECT QL_QTID FROM #QuotaLoadList (nolock) WHERE QO_QTID is not null)
	UNION
	SELECT DISTINCT QO_QTID, QO_SubCode2, 2, null, 1 FROM QuotaObjects (nolock) WHERE QO_QTID in (SELECT QL_QTID FROM #QuotaLoadList (nolock) WHERE QO_QTID is not null)
	UNION
	SELECT DISTINCT QL_ID, QL_SubCode1, 1, null, 3 FROM #QuotaLoadList (nolock) WHERE QL_SubCode1 is not null
	UNION
	SELECT DISTINCT QL_ID, QL_SubCode2, 2, null, 3 FROM #QuotaLoadList (nolock) WHERE QL_SubCode2 is not null
	UNION
	SELECT DISTINCT null, null, null, QL_SubCode1, 2 FROM #QuotaLoadList (nolock) WHERE QL_SubCode1 is not null
	ORDER BY 5,1,3

OPEN curQLoadListQO
FETCH NEXT FROM curQLoadListQO INTO	@IDEN_Local, @QO_SubCode, @QO_TypeD, @DL_SubCode1, @IDENType_Local
Set @IDEN_Prev=@IDEN_Local
Set @IDENTYPE_Prev=@IDENTYPE_Local

Set @ServiceName1=''
Set @ServiceName2=''

WHILE @@FETCH_STATUS = 0
BEGIN
	if @DL_SubCode1 is not null
	BEGIN
		Set @Temp=''
		if (@nGridFilter=3)
			begin
				--для англ версии
				exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, null, null, @Temp output
			end
			else
			begin
				--для русской версии
				exec GetSvCode1Name @Service_SVKey, @DL_SubCode1, null, @Temp output, null, null
			end

		Update #QuotaLoadList set QL_Description=ISNULL(QL_Description,'') + @Temp where QL_SubCode1=@DL_SubCode1
		--print @Temp
	END
	Else
	BEGIN
		If (@IDEN_Prev != @IDEN_Local) OR (@IDENTYPE_Prev != @IDENTYPE_Local)
		BEGIN
			If @Service_SVKey=3
			BEGIN
				Set @ServiceName2='(' + @ServiceName2 + ')'
			END
			IF @IDENTYPE_Prev = 1
				Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@IDEN_Prev
			IF @IDENTYPE_Prev = 3
			--обработка стоп сейла
				Update #QuotaLoadList set QL_Description=LEFT(@ServiceName1 + @ServiceName2,255) where QL_ID=@IDEN_Prev and QL_QTID is not null
			Set @ServiceName1=''
			Set @ServiceName2=''
		END
		
		SET @IDEN_Prev=@IDEN_Local
		SET @IDENTYPE_Prev=@IDENTYPE_Local
		Set @Temp=''
		If @Service_SVKey=3
		BEGIN
			IF @QO_TypeD=1
			BEGIN
				if (@nGridFilter=3)
				begin
					--для англ версии
					EXEC GetRoomName @QO_SubCode, null, @Temp output
				end
				else
				begin
					--для русской версии
					EXEC GetRoomName @QO_SubCode, @Temp output, null
				end
				If @ServiceName1!=''
					Set @ServiceName1=@ServiceName1+','
				Set @ServiceName1=@ServiceName1+@Temp
			END			
			Set @Temp=''
			IF @QO_TypeD=2
			BEGIN
				if (@nGridFilter=3)
				begin
					--для англ версии
					EXEC GetRoomCtgrName @QO_SubCode, null, @Temp output
				end
				else
				begin
					--для русской версии
					EXEC GetRoomCtgrName @QO_SubCode, @Temp output, null
				end
				If @ServiceName2!=''
					Set @ServiceName2=@ServiceName2+','
				Set @ServiceName2=@ServiceName2+@Temp
				--print @Temp
			END
		END
		ELse
		BEGIN
			if (@nGridFilter=3)
			begin
				--для англ версии
				exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, null, null, @Temp output
			end
			else
			begin
				--для русской версии
				exec GetSvCode1Name @Service_SVKey, @QO_SubCode, null, @Temp output, null, null
			end
			If @ServiceName1!=''
				Set @ServiceName1=@ServiceName1+','
			Set @ServiceName1=@ServiceName1+@Temp
		END
	END
	FETCH NEXT FROM curQLoadListQO INTO	@IDEN_Local, @QO_SubCode, @QO_TypeD, @DL_SubCode1, @IDENType_Local
END


If @Service_SVKey=3
BEGIN
	Set @ServiceName2='(' + @ServiceName2 + ')'
END
	IF @IDENTYPE_Prev = 1
		Update #QuotaLoadList set QL_Description=LEFT(ISNULL(QL_Description,'') + @ServiceName1 + @ServiceName2,255) where QL_QTID=@IDEN_Prev
	IF @IDENTYPE_Prev = 3
		--обработка стоп сейла
		Update #QuotaLoadList set QL_Description=LEFT(@ServiceName1 + @ServiceName2,255) where QL_ID=@IDEN_Prev and QL_QTID is not null
	--print @ServiceName1
	--print @ServiceName2
CLOSE curQLoadListQO
DEALLOCATE curQLoadListQO


/*
-- 29-03-2012 karimbaeva удаляю строки, чтобы не дублировались при выводе в окне, если стоп стоит по нескольким типам номеров
delete from #QuotaLoadList where ql_qoid <> (select top 1  ql_qoid from #QuotaLoadList) and ql_qoid is not null
*/

if (@bShowCommonRequest=1)
begin

--saifullina 11.02.2013
--формируем темповую таблицу для услуг на запросе
CREATE TABLE #tmpQuotaLoadList(QLID int,
	QLQTID int, QLQOID int, QLPRKey int, QLSubCode1 int, QLSubCode2 int, QLPartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QLDescription nvarchar(255) collate Cyrillic_General_CI_AS, 
	QLdataType smallint, QLType smallint, QLTypeQuota smallint, QLRelease int, QLDurations nvarchar(20) collate Cyrillic_General_CI_AS, QLFilialKey int, 
	QLCityDepartments int, QLAgentKey int, QLCustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QLDateCheckinMin smalldatetime,
	QLByRoom int)
	
	set @n=1 
	set @str = ''
	 
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #tmpQuotaLoadList ADD QL' + CAST(@n as varchar(3)) + ' int'
		exec (@str)
		set @n = @n + 1
	END

declare @qlid int,
@qlPrKey int,
@qlAgentKey int,
@qlAgentName varchar(max),
@qlPartnerName varchar(max)
	--добавляем все услуги на запросе в таблицу
	DECLARE qCur CURSOR FAST_FORWARD READ_ONLY FOR
	select QL_ID,QL_PRKey,QL_AgentKey,QL_PartnerName,QL_CustomerInfo from #QuotaLoadList where QL_Type = 4		
	OPEN qCur								
	FETCH NEXT FROM qCur INTO @qlid,@qlPrKey,@qlAgentKey,@qlPartnerName,@qlAgentName		
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #tmpQuotaLoadList (QLID,QLSubCode1, QLType, QLdataType, QLByRoom,QLAgentKey,QLPRKey) select top 1 QL_ID, QL_SubCode1, QL_Type, QL_dataType, QL_ByRoom, QL_AgentKey, QL_PRKey from #QuotaLoadList where QL_ID=@qlid
		set @n = 1
		declare @turist nvarchar(max)
		WHILE @n <= @DaysCount
		begin
			set @QueryUpdate = ''
		set @QueryUpdate = 'UPDATE #tmpQuotaLoadList SET QL' + CAST(@n as varchar(3)) + ' = (select CAST (QL_' + CAST(@n as varchar(3))  +' as int) from #QuotaLoadList
		WHERE QL_ID = ' + CAST(@qlid as varchar(10)) + ' and QL_' + CAST(@n as varchar(3)) + ' is not null) where QLID='+CAST(@qlid as varchar(25))
		exec (@QueryUpdate) 
			set @n = @n + 1
		end
		
		delete #QuotaLoadList where QL_Type=4 and QL_ID=@qlid
		
		if not exists (select * from #QuotaLoadList where (QL_Description like 'Любое' or  QL_Description like 'Any') and QL_Type=4 and QL_dataType=21 and (QL_AgentKey=@qlAgentKey or (QL_AgentKey is null and @qlAgentKey is null))and QL_PRKey = @qlPrKey)
		begin
			if (@ngridfilter=3)
			begin
				insert into #QuotaLoadList (QL_Description, QL_Type,QL_dataType,QL_AgentKey,QL_PRKey, QL_CustomerInfo, QL_PartnerName) values ('Any',4,21,@qlAgentKey,@qlPrKey,@qlAgentName,@qlPartnerName)
			end
			else
			begin
				insert into #QuotaLoadList (QL_Description, QL_Type,QL_dataType,QL_AgentKey,QL_PRKey, QL_CustomerInfo, QL_PartnerName) values ('Любое',4,21,@qlAgentKey,@qlPrKey,@qlAgentName,@qlPartnerName)
			end
		end
		
	FETCH NEXT FROM qCur INTO @qlid,@qlPrKey,@qlAgentKey,@qlPartnerName,@qlAgentName
	END
	CLOSE qCur
	DEALLOCATE qCur

set @n = 1
WHILE @n <= @DaysCount
	begin
		set @QueryUpdate = ''
	set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' =' + '(select SUM(QL' + CAST(@n as varchar(3)) + ') from #tmpQuotaLoadList)
	WHERE QL_Type=4'
	exec (@QueryUpdate) 
		set @n = @n + 1
	end
drop table #tmpQuotaLoadList

end

If @Service_SVKey=3
BEGIN
	Update #QuotaLoadList set QL_Description = QL_Description + ' - Per person' where QL_ByRoom = 0
END
--Общий релиз период
if (@bCommonRelease is not null and @bCommonRelease = 1) and (@ResultType is null or @ResultType not in (10))
begin
	update #QuotaLoadList set QL_Release=0 where QL_Release is null
	
	CREATE TABLE #tempQuotaLoadList(QLID int,
	QLQTID int, QLQOID int, QLPRKey int, QLSubCode1 int, QLSubCode2 int, QLPartnerName nvarchar(100) collate Cyrillic_General_CI_AS, QLDescription nvarchar(255) collate Cyrillic_General_CI_AS, 
	QLdataType smallint, QLType smallint, QLTypeQuota smallint, QLRelease nvarchar(max), QLDurations nvarchar(20) collate Cyrillic_General_CI_AS, QLFilialKey int, 
	QLCityDepartments int, QLAgentKey int, QLCustomerInfo nvarchar(150) collate Cyrillic_General_CI_AS, QLDateCheckinMin smalldatetime,
	QLByRoom int)

	set @n=1 
	set @str = ''
	 
	WHILE @n <= @DaysCount
	BEGIN
		set @str = 'ALTER TABLE #tempQuotaLoadList ADD QL' + CAST(@n as varchar(3)) + ' varchar(8000)'
		exec (@str)
		set @n = @n + 1
	END
	
	declare @Qtid int, @Prkey int, @partnerName nvarchar(100), @description nvarchar(100), @dataType smallint, @type smallint, 
	@typeQuota smallint, @durations nvarchar(20), @agent int, @qlid_min int 
	DECLARE qCur CURSOR FAST_FORWARD READ_ONLY FOR
	select QL_QTID, QL_PRKey, QL_PartnerName, QL_Description, QL_DataType, QL_Type, QL_TypeQuota, QL_Durations, QL_AgentKey, MIN(QL_ID) as ql_id
								from #QuotaLoadList
								where QL_Release is not null
								group by QL_QTID, QL_PRKey, QL_PartnerName, QL_Description, QL_DataType, QL_Type, QL_TypeQuota, QL_Durations, QL_AgentKey
								having count(*)>1
								
	OPEN qCur								
	FETCH NEXT FROM qCur INTO @Qtid, @Prkey, @partnerName, @description, @dataType, @type, @typeQuota, @durations, @agent, @qlid_min 						
	WHILE @@FETCH_STATUS = 0
	BEGIN
		insert into #tempQuotaLoadList 
		select *
		from #QuotaLoadList where QL_QTID = @Qtid and QL_PRKey = @Prkey and QL_PartnerName = @partnerName 
		and QL_Description = @description and QL_DataType = @dataType and QL_Type = @type 
		and QL_TypeQuota = @typeQuota and ((QL_Durations is null and @durations is null) or (QL_Durations = @durations))   
		and ((QL_AgentKey is null and @agent is null) or (QL_AgentKey = @agent))
		and QL_ID <> @qlid_min
		
		set @n = 1
		WHILE @n <= @DaysCount
		begin
			set @QueryUpdate = ''
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' = QL' + CAST(@n as varchar(3)) + '
			from #tempQuotaLoadList
			WHERE QL_ID = ' + CAST(@qlid_min as varchar(10)) + ' and QL' + CAST(@n as varchar(3)) + ' is not null'

			exec (@QueryUpdate) 
			set @n = @n + 1
		end
				
		declare @commonRelease nvarchar(20), @tempRelease nvarchar(max)
		set @tempRelease = ''
		DECLARE qCurs CURSOR FAST_FORWARD READ_ONLY FOR
		select QLRelease from #tempQuotaLoadList
		OPEN qCurs								
		FETCH NEXT FROM qCurs INTO @commonRelease					
		WHILE @@FETCH_STATUS = 0
		BEGIN
			set @tempRelease = @tempRelease + ',' + @commonRelease
			FETCH NEXT FROM qCurs INTO @commonRelease			
		END
		CLOSE qCurs
		DEALLOCATE qCurs
		update #QuotaLoadList set QL_Release = QL_Release + @tempRelease where QL_ID = @qlid_min
				
		delete from #QuotaLoadList where QL_ID in (select QLID from #tempQuotaLoadList)
		truncate table #tempQuotaLoadList
		FETCH NEXT FROM qCur INTO @Qtid, @Prkey, @partnerName, @description, @dataType, @type, @typeQuota, @durations, @agent, @qlid_min 
	END
	CLOSE qCur
	DEALLOCATE qCur
	drop table #tempQuotaLoadList
end

-- удаляем вспомогательный столбец
alter table #QuotaLoadList drop column QL_QOID
alter table #QuotaLoadList drop column QL_SubCode2
alter table #QuotaLoadList drop column QL_ID

-- если запуск из экрана Статус бронирования
-- фильтруем по квотам на зезд, они должны отображаться только на 1-й день
if (@nGridFilter=1)
begin
	set @n = 2
		WHILE @n <= @DaysCount
		begin
			set @QueryUpdate = ''
			--set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' = null 
			--WHERE QL_QTID in (select QT_ID from Quotas join QuotaDetails on QT_ID = QD_QTID where QT_IsByCheckIn=1 and QD_Date <> ' + CAST(@DateStart as varchar(20))  +')'
			set @QueryUpdate = 'UPDATE #QuotaLoadList SET QL_' + CAST(@n as varchar(3)) + ' = null 
			WHERE QL_TypeQuota = 1'
			--print @QueryUpdate
			exec (@QueryUpdate) 
			set @n = @n + 1
		end
end

IF @ResultType is null or @ResultType not in (10)
BEGIN
	if (@bCommonRelease is not null and @bCommonRelease = 1)
	begin
		select *
		from #QuotaLoadList (nolock)
		order by
			(case
			when QL_QTID is not null then 1
			else 0
			end) DESC,
			QL_Description /*Сначала квоты, потом неквоты*/,QL_PartnerName,QL_Type DESC, 
			CONVERT(int,SUBSTRING(QL_Release,0,CHARINDEX('-',QL_Release))),
			--сортируем по первому числу продолжительности если продолжительность с "-",","," "
			case 
			when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int, REPLACE(QL_DURATIONS, '-', ''))
			when CHARINDEX(',',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(',',QL_DURATIONS)))
			when CHARINDEX(' ',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(' ',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) = 0 then CONVERT(int,QL_DURATIONS)
			end,
			QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
		RETURN 0
	end
	else
	begin
		select *
		from #QuotaLoadList (nolock)
		order by
			(case
			when QL_QTID is not null then 1
			else 0
			end) DESC,
			QL_Description /*Сначала квоты, потом неквоты*/,QL_PartnerName,QL_Type DESC, CONVERT(int, QL_Release),
			--сортируем по первому числу продолжительности если продолжительность с "-",","," "
			case 
			--when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX('-',QL_DURATIONS)) + SUBSTRING(QL_DURATIONS,CHARINDEX('-',QL_DURATIONS) + 1, LEN(QL_DURATIONS) - CHARINDEX('-',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) <>0 then CONVERT(int, REPLACE(QL_DURATIONS, '-', ''))
			when CHARINDEX(',',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(',',QL_DURATIONS)))
			when CHARINDEX(' ',QL_DURATIONS) <>0 then CONVERT(int,SUBSTRING(QL_DURATIONS,0,CHARINDEX(' ',QL_DURATIONS)))
			when CHARINDEX('-',QL_DURATIONS) = 0 then CONVERT(int,QL_DURATIONS)
			end,
			QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,QL_QTID,QL_DataType
		RETURN 0
	end
END
ELSE
BEGIN --для наличия мест(из оформления)
	CREATE TABLE #ServicePlacesTr(
		SPT_QTID int, SPT_PRKey int, SPT_SubCode1 int, SPT_PartnerName varchar(100), SPT_Description varchar(255), 
		SPT_Type smallint, SPT_TypeQuota smallint, SPT_FilialKey int, SPT_CityDepartments int, SPT_Release int, SPT_Durations varchar(100),
		SPT_AgentKey int, SPT_Date smalldatetime, SPT_Places smallint, SPT_Stop smallint, SPT_CheckIn smallint)
	
	-- В MSSQL 2000 это не работает
	--ALTER TABLE #ServicePlacesTr ADD SPT_Date smalldatetime
	--ALTER TABLE #ServicePlacesTr ADD SPT_Places smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_Stop smallint
	--ALTER TABLE #ServicePlacesTr ADD SPT_CheckIn smallint


	set @n=1
	WHILE @n <= @DaysCount
	BEGIN
		DECLARE @curDate smalldatetime
		SET @curDate = DATEADD(DAY,@n-1,@DateStart)

		set @str = '
			INSERT INTO #ServicePlacesTr 
				(SPT_QTID, SPT_PRKey,SPT_SubCode1,SPT_PartnerName,SPT_Description,SPT_Type, SPT_TypeQuota,
				SPT_FilialKey,SPT_CityDepartments,SPT_Release,SPT_Durations,SPT_AgentKey,
				SPT_Date,SPT_Places) 
			SELECT QL_QTID, QL_PRKey,QL_SubCode1,QL_PartnerName, QL_Description, QL_Type, QL_TypeQuota,
				QL_FilialKey, QL_CityDepartments,QL_Release,QL_Durations,QL_AgentKey, 
				''' + CAST(@curDate as varchar(20)) + ''', QL_' + CAST(@n as varchar(3)) + '
				FROM #QuotaLoadList
				WHERE QL_dataType=21'
		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_Stop=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=22 and 
					SPT_QTID=QL_QTID and
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and 
					SPT_TypeQuota = QL_TypeQuota and
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and 
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date=''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20))+ ''''

		exec (@str)

		set @str = 'UPDATE #ServicePlacesTr SET SPT_CheckIn=
					(SELECT QL_' + CAST(@n as varchar(3)) + '
					FROM #QuotaLoadList
					WHERE  QL_dataType=23 and
					SPT_QTID=QL_QTID and 
					SPT_PRKey=QL_PRKey and 
					ISNULL(SPT_SubCode1,-1)=ISNULL(QL_SubCode1,-1) and 
					SPT_PartnerName=QL_PartnerName and 
					SPT_Description=QL_Description and 
					SPT_Type=QL_Type and
					SPT_TypeQuota = QL_TypeQuota and 
					ISNULL(SPT_FilialKey,-1)=ISNULL(QL_FilialKey,-1) and 
					ISNULL(SPT_CityDepartments,-1)=ISNULL(QL_CityDepartments,-1) and 
					ISNULL(SPT_Release,-1)=ISNULL(QL_Release,-1) and 
					ISNULL(SPT_Durations,-1)=ISNULL(QL_Durations,-1) and
					ISNULL(SPT_AgentKey,-1)=ISNULL(QL_AgentKey,-1) and 
					SPT_Date= ''' + CAST(@curDate as varchar(20)) + ''')
					WHERE SPT_Date=''' + CAST(@curDate as varchar(20)) + ''''

		exec (@str)
		set @n = @n + 1
	END
END

--Select * from #ServicePlacesTr 	ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

DECLARE @ServicePlaces TABLE
(
	SP_PRKey int, SP_SubCode1 int, SP_PartnerName nvarchar(100), SP_Description nvarchar(255), 
	SP_Type smallint, SP_TypeQuota smallint, SP_FilialKey int, SP_CityDepartments int, 
	SP_Places1 smallint, SP_Places2 smallint, SP_Places3 smallint, 
	SP_NonReleasePlaces1 smallint,SP_NonReleasePlaces2 smallint,SP_NonReleasePlaces3 smallint, 
	SP_StopPercent1 smallint,SP_StopPercent2 smallint,SP_StopPercent3 smallint
)

DECLARE @SPT_QTID int, @SPT_PRKey int, @SPT_SubCode1 int, @SPT_PartnerName varchar(100), @SPT_Description varchar(255), 
		@SPT_Type smallint, @SPT_TypeQuota smallint, @SPT_FilialKey int, @SPT_CityDepartments int, @SPT_Release smallint, @SPT_Date smalldatetime, 
		@SPT_Places smallint, @SPT_Stop smallint, @SPT_CheckIn smallint, @SPT_PRKey_Old int, @SPT_PartnerName_Old varchar(100), 
		@SPT_SubCode1_Old int, @SPT_Description_Old varchar(255), @SPT_Type_Old smallint, @SPT_TypeQuota_Old smallint, @SPT_FilialKey_Old int,
		@SPT_CityDepartments_Old int, @SPT_Date_Old smalldatetime,
		@currentPlaces1 smallint, @currentPlaces2 smallint, @currentPlaces3 smallint,
		@currentNonReleasePlaces1 smallint, @currentNonReleasePlaces2 smallint, @currentNonReleasePlaces3 smallint,
		@OblectPlacesMin1 smallint, @OblectPlacesMin2 smallint, @OblectPlacesMin3 smallint,
		@OblectNonReleasePlacesMin1 smallint, @OblectNonReleasePlacesMin2 smallint, @OblectNonReleasePlacesMin3 smallint,
		@stopPercentSum1 smallint,@stopPercentSum2 smallint,@stopPercentSum3 smallint,
		@quotaCounter1 smallint,@quotaCounter2 smallint,@quotaCounter3 smallint,
		@Now smalldatetime

SET @Now = GETDATE()
		
DECLARE curQ2 CURSOR FOR SELECT
			 SPT_QTID, SPT_PRKey, SPT_SubCode1, SPT_PartnerName, SPT_Description, SPT_Type, SPT_TypeQuota, SPT_FilialKey, 
			 SPT_CityDepartments, ISNULL(SPT_Release, 0), SPT_Date, ISNULL(SPT_Places, 0), ISNULL(SPT_Stop,0), SPT_CheckIn
	FROM	#ServicePlacesTr
	ORDER BY  SPT_PRKey DESC, SPT_Description DESC, SPT_Type DESC, SPT_TypeQuota DESC, SPT_Date DESC, SPT_SubCode1 DESC, SPT_PartnerName DESC, 
		SPT_FilialKey DESC, SPT_CityDepartments DESC, SPT_Places, SPT_Release DESC

OPEN curQ2
FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
		@SPT_Type, @SPT_TypeQuota, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

SET @SPT_PRKey_Old=@SPT_PRKey
SET @SPT_Description_Old=@SPT_Description
SET @SPT_PartnerName_Old=@SPT_PartnerName
SET @SPT_Type_Old=@SPT_Type
SET @SPT_TypeQuota_Old=@SPT_TypeQuota
SET @SPT_Date_Old=@SPT_Date
SET @currentPlaces1=0
SET @currentPlaces2=0
SET @currentPlaces3=0
SET @currentNonReleasePlaces1=0
SET @currentNonReleasePlaces2=0
SET @currentNonReleasePlaces3=0
SET @stopPercentSum1=0
SET @stopPercentSum2=0
SET @stopPercentSum3=0
SET @quotaCounter1=0
SET @quotaCounter2=0
SET @quotaCounter3=0


WHILE @@FETCH_STATUS = 0
BEGIN
	IF @SPT_PRKey=@SPT_PRKey_Old and @SPT_Description=@SPT_Description_Old and ISNULL(@SPT_Type,-1)=ISNULL(@SPT_Type_Old,-1) and @SPT_Date!=@SPT_Date_Old
	BEGIN
		If (@OblectPlacesMin1 is null or @OblectPlacesMin1 > @currentPlaces1) AND @SPT_Date_Old BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
		BEGIN
			--Set @quotaCounter1=0
			Set @OblectPlacesMin1=@currentPlaces1
			--Set @currentPlaces1=0
			Set @OblectNonReleasePlacesMin1=@currentNonReleasePlaces1
			--Set @currentNonReleasePlaces1=0
		END
		If (@OblectPlacesMin2 is null or @OblectPlacesMin2 > @currentPlaces2) AND @SPT_Date_Old BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
		BEGIN
			--Set @quotaCounter2=0
			Set @OblectPlacesMin2=@currentPlaces2
			--Set @currentPlaces2=0
			Set @OblectNonReleasePlacesMin2=@currentNonReleasePlaces2
			--Set @currentNonReleasePlaces2=0
		END
		If (@OblectPlacesMin3 is null or @OblectPlacesMin3 > @currentPlaces3) AND @SPT_Date_Old BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
		BEGIN
			--Set @quotaCounter3=0
			Set @OblectPlacesMin3=@currentPlaces3
			--Set @currentPlaces3=0
			Set @OblectNonReleasePlacesMin3=@currentNonReleasePlaces3
			--Set @currentNonReleasePlaces3=0
		END
-- При смене даты обнуляем текущие количества мест
		SET @currentPlaces1=0
		SET @currentPlaces2=0
		SET @currentPlaces3=0
		SET @currentNonReleasePlaces1=0
		SET @currentNonReleasePlaces2=0
		SET @currentNonReleasePlaces3=0
	END

	IF @SPT_PRKey!=@SPT_PRKey_Old or @SPT_Description!=@SPT_Description_Old or ISNULL(@SPT_Type,-1)!=ISNULL(@SPT_Type_Old,-1) or ISNULL(@SPT_TypeQuota,-1)!=ISNULL(@SPT_TypeQuota_Old,-1)
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO @ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, SP_TypeQuota,
				SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
				SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
				SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, @SPT_TypeQuota_Old,
				@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
				@currentPlaces1, @currentPlaces2, @currentPlaces3,
				ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
				@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)

		set @OblectPlacesMin1 = null
		set @OblectPlacesMin2 = null
		set @OblectPlacesMin3 = null
		set @OblectNonReleasePlacesMin1 = null
		set @OblectNonReleasePlacesMin2 = null
		set @OblectNonReleasePlacesMin3 = null
		Set @currentPlaces1=0
		Set @currentPlaces2=0
		Set @currentPlaces3=0
		Set @currentNonReleasePlaces1=0
		Set @currentNonReleasePlaces2=0
		Set @currentNonReleasePlaces3=0
		Set @stopPercentSum1=0
		Set @stopPercentSum2=0
		Set @stopPercentSum3=0
		Set @quotaCounter1=0
		Set @quotaCounter2=0
		Set @quotaCounter3=0
	END

	If @SPT_Date BETWEEN @DateStart AND DATEADD(DAY,@ServiceLong-1,@DateStart)
	BEGIN
			Set @quotaCounter1=@quotaCounter1+1
		Set @stopPercentSum1 = @stopPercentSum1 + @SPT_Stop
		Set @currentPlaces1=@currentPlaces1+@SPT_Places
		If @DateStart > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces1=@currentNonReleasePlaces1+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart2 AND DATEADD(DAY,@ServiceLong-1,@DateStart2)
	BEGIN
			Set @quotaCounter2=@quotaCounter2+1
		Set @stopPercentSum2 = @stopPercentSum2 + @SPT_Stop
		Set @currentPlaces2=@currentPlaces2+@SPT_Places
		If @DateStart2 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces2=@currentNonReleasePlaces2+@SPT_Places
	END
	If @SPT_Date BETWEEN @DateStart3 AND DATEADD(DAY,@ServiceLong-1,@DateStart3)
	BEGIN
			Set @quotaCounter3=@quotaCounter3+1
		Set @stopPercentSum3 = @stopPercentSum3 + @SPT_Stop
		Set @currentPlaces3=@currentPlaces3+@SPT_Places
		If @DateStart3 > DATEADD(DAY,@SPT_Release,@Now)
			Set @currentNonReleasePlaces3=@currentNonReleasePlaces3+@SPT_Places
	END

	SET @SPT_PRKey_Old=@SPT_PRKey
	SET @SPT_PartnerName_Old=@SPT_PartnerName
	SET @SPT_Description_Old=@SPT_Description
	SET @SPT_Type_Old=@SPT_Type
	SET @SPT_TypeQuota_Old=@SPT_TypeQuota
	SET @SPT_Date_Old=@SPT_Date
	FETCH NEXT FROM curQ2 INTO @SPT_QTID, @SPT_PRKey, @SPT_SubCode1, @SPT_PartnerName, @SPT_Description, 
			@SPT_Type, @SPT_TypeQuota, @SPT_FilialKey, @SPT_CityDepartments, @SPT_Release, @SPT_Date, @SPT_Places, @SPT_Stop, @SPT_CheckIn	

	If @@FETCH_STATUS != 0
	BEGIN
		IF @quotaCounter1 = 0 SET @quotaCounter1 = 1
		IF @quotaCounter2 = 0 SET @quotaCounter2 = 1
		IF @quotaCounter3 = 0 SET @quotaCounter3 = 1
		INSERT INTO @ServicePlaces (SP_PRKey, SP_SubCode1, SP_PartnerName, SP_Description, SP_Type, SP_TypeQuota,
			SP_FilialKey, SP_CityDepartments, SP_Places1, SP_Places2, SP_Places3, 
			SP_NonReleasePlaces1, SP_NonReleasePlaces2, SP_NonReleasePlaces3,
			SP_StopPercent1,SP_StopPercent2,SP_StopPercent3)
		Values (@SPT_PRKey_Old, @SPT_SubCode1_Old, @SPT_PartnerName_Old, @SPT_Description_Old, @SPT_Type_Old, @SPT_TypeQuota_Old,
			@SPT_FilialKey_Old, @SPT_CityDepartments_Old, 
			ISNULL(@OblectPlacesMin1,@currentPlaces1), ISNULL(@OblectPlacesMin2,@currentPlaces2), ISNULL(@OblectPlacesMin3,@currentPlaces3),
			ISNULL(@OblectNonReleasePlacesMin1,@currentNonReleasePlaces1), ISNULL(@OblectNonReleasePlacesMin2,@currentNonReleasePlaces2), ISNULL(@OblectNonReleasePlacesMin3,@currentNonReleasePlaces3),
			@stopPercentSum1/@quotaCounter1,@stopPercentSum2/@quotaCounter2,@stopPercentSum3/@quotaCounter3)
		END
END
CLOSE curQ2
DEALLOCATE curQ2

--select * from #ServicePlacesTr
--ORDER BY  SPT_PRKey, SPT_Type, SPT_SubCode1, SPT_PartnerName, SPT_Description, 
--		SPT_FilialKey, SPT_CityDepartments, SPT_Date, SPT_Release

--select * from #ServicePlaces


	select 
		SP_PRKey,SP_PartnerName,SP_Description,SP_SubCode1,SP_Type,SP_TypeQuota,SP_FilialKey,SP_CityDepartments,
		CAST(SP_Places1 as varchar(4))+';'+CAST(SP_NonReleasePlaces1 as varchar(4))+';'+CAST(SP_StopPercent1 as varchar(4)) as SP_1,
		CAST(SP_Places2 as varchar(4))+';'+CAST(SP_NonReleasePlaces2 as varchar(4))+';'+CAST(SP_StopPercent2 as varchar(4)) as SP_2,
		CAST(SP_Places3 as varchar(4))+';'+CAST(SP_NonReleasePlaces3 as varchar(4))+';'+CAST(SP_StopPercent3 as varchar(4)) as SP_3
	from @ServicePlaces
	order by SP_Description, SP_PartnerName, SP_Type, SP_TypeQuota
GO
grant execute on [dbo].[GetQuotaLoadListData_N] to public
GO
/*********************************************************************/
/* end sp_GetQuotaLoadListData_N.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetServiceAddCosts.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetServiceAddCosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetServiceAddCosts]
GO
CREATE PROCEDURE [dbo].[GetServiceAddCosts]
	(
		-- хранимка расчитывает доплаты по услуге
		--<date>2013-04-22</date>
		--<version>2009.2.18.2</version>
		/*mv 27.01.2012 : Внимание!
			в хранимке [dbo].[GetServiceAddCosts] 
			добавил параметр @days - новый обязательный параметр
			передача ключа партнера теперь идет сразу за SubCode2 (по аналогии с GetServiceCosts)
			переименовал параметр, возвращающий валюту @addCostRate
		  mv 27.01.2012_2 Добавил учет типа доплаты (за взрослого/ребенка и т.д.)
		  mv 27.01.2012_3 Добавил параметр "дата расчета" - @sellDate
		  AleXK 31.01.2012 Добавил 2 выходных параметра доплата за ребенка и доплата за взрослого
		  Gorshkov 10.02.2012 Добавил необязательный параметр - тип доплаты (@addCostType)
		  Gorshkov 10.02.2012_2 Теперь хранимка возвращает не сумму всех доплат, а только сумму последних доплат по каждому классу доплат
		*/
		@tourKey int,
		@svKey int,
		@code int,
		@SubCode1 int,
		@SubCode2 int,
		@partnerKey int,
		@tourDate datetime,
		@tourDays int,
		@serviceDays int,
		@men int,
		@sellDate datetime = null,
		@addCostClass int = null,
		@addCostValueIsCommission money output,
		@addCostValueNoCommission money output,
		-- тут доплата только за 1 взрослого
		@addCostFromAdult money output,
		-- тут доплата только за 1 ребенка
		@addCostFromChild money output,
		@addCostRate nvarchar(2) output
	)
AS
BEGIN
	set @addCostValueIsCommission = null
	set @addCostValueNoCommission = null
	set @addCostFromAdult = null
	set @addCostFromChild = null
	set	@addCostRate=null

	if @tourKey is null
	begin
		return 0
	end

	declare @internal_pansionKey int, @internal_subCode1 int, @internal_subCode2 int, @internal_subCode3 int,
			@internal_Main_Count int, @internal_ExB_Count int
	-- отдельно обработаем отель
	if (@svKey = 3)
	begin
		set @internal_pansionKey = @SubCode2
		
		select @internal_subCode1 = HR_RMKEY, @internal_subCode2 = HR_RCKEY, @internal_subCode3=HR_ACKEY
		from HotelRooms with(nolock)
		where HR_KEY = @SubCode1
		
		if @internal_subCode1 is null
		begin
			return 0
		end
		
		select @internal_Main_Count=IsNull(AC_NRealPlaces,0), @internal_ExB_Count=IsNull(AC_NMenExBed,0) 
		from Accmdmentype with(nolock)
		where AC_Key=@internal_subCode3
		
		-- если доплата за человека то берем количество людей из Accmdmentype
		set @men = @internal_Main_Count
		
		If @internal_Main_Count=0 and @internal_ExB_Count=0
		begin
			set @internal_Main_Count=1
		end
	end
	else
	begin
		set @internal_pansionKey = null
		set @internal_subCode1=@SubCode1 
		set @internal_subCode2=@SubCode2
	end
	
	-- если наща услуга без продолжительности то устанавливаем ей продолжительность равную продолжительности тура
	-- что бы доплата не обнылялась если она за сутки
	if (exists (select top 1 1 from [Service] with(nolock) where SV_KEY = @svKey and SV_IsDuration != 1))
	begin
		set @serviceDays = @tourDays
	end;
	
	with onlyNeededAddCosts as
	(
		select *
		from dbo.AddCosts with(nolock)
		where 
			ADC_TLKey = @tourKey
			and ADC_SVKey = @svKey
			and (ADC_Code = 0 or ADC_Code = @code)
			and (ADC_SubCode1=0 or ADC_SubCode1 = @internal_subCode1)
			and (ADC_SubCode2=0 or ADC_SubCode2 = @internal_subCode2)
			and (ADC_PartnerKey=0 or ADC_PartnerKey = @partnerKey)
			and ((@internal_pansionKey is not null and (ADC_PansionKey=0 or ADC_PansionKey = @internal_pansionKey)) or (@internal_pansionKey is null))	
			and @tourDate between ADC_CheckinDateBeg and ADC_CheckinDateEnd
			and ((isnull(ADC_LongMin, 0) = 0 and isnull(ADC_LongMax, 0) = 0) or (@tourDays between ADC_LongMin and ADC_LongMax))
			and ((@sellDate is not null and @sellDate >= ADC_CreateDate) or (@sellDate is null))
			and ((ADC_DisableDate is null) or (ADC_DisableDate is not null and @sellDate < ADC_DisableDate))
			and (@addCostClass is null or ADC_ACNId = @addCostClass)
	),
	theLatestInEachAddCostType as
	(
		select ADC_TypeId, ADC_Value, ADC_ValueChild, ADC_CreateDate, ADC_Rate, ADC_IsCommission, ADC_IsDay
		from onlyNeededAddCosts as onac
		where ADC_Id = (select top 1 ac.ADC_ID
						from onlyNeededAddCosts as ac
						where ac.ADC_ACNId = onac.ADC_ACNId
						order by ac.ADC_CreateDate desc, ac.ADC_ID)
	)
	
	select top 1
		@addCostValueIsCommission = sum(case when ADC_IsCommission = 1 then isnull(ADC_Value * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END) * (CASE ADC_TypeID WHEN 1 THEN 1 WHEN 3 THEN @internal_Main_Count ELSE @men END), 0) else 0 end) +
									sum(case when ADC_IsCommission = 1 then isnull(isnull(ADC_ValueChild, 0) * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END) * (CASE ADC_TypeID WHEN 1 THEN 0 when 2 then 0 WHEN 3 THEN @internal_ExB_Count END), 0) else 0 end),
		@addCostValueNoCommission = sum(case when ADC_IsCommission = 0 then isnull(ADC_Value * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END) * (CASE ADC_TypeID WHEN 1 THEN 1 WHEN 3 THEN @internal_Main_Count ELSE @men END), 0) else 0 end) +
									sum(case when ADC_IsCommission = 0 then isnull(isnull(ADC_ValueChild, 0) * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END) * (CASE ADC_TypeID WHEN 1 THEN 0 when 2 then 0 WHEN 3 THEN @internal_ExB_Count END), 0) else 0 end),
		@addCostFromAdult = sum(isnull(ADC_Value * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END), 0)),
		@addCostFromChild = sum(isnull((case when ADC_TypeID = 3 then isnull(ADC_ValueChild, 0) else ADC_Value end) * (CASE WHEN ADC_IsDay = 0 THEN @serviceDays ELSE 1 END), 0)),
		@addCostRate = ADC_Rate
	from theLatestInEachAddCostType
	group by ADC_Rate;
END
GO
grant exec on [dbo].[GetServiceAddCosts] to public
GO
/*********************************************************************/
/* end sp_GetServiceAddCosts.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetServiceCost.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetServiceCost]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[GetServiceCost]
GO

CREATE PROCEDURE [dbo].[GetServiceCost] 
	(
		--<date>2013-05-21</date>
		--<version>2009.2.19.2</version>
		--.18 gorshkov 12.03.2012 - для динамического ценообразования @CS_Profit заполняется нулями
		--.17 mv 06.02.2012 (MEG00040397) обработка продолжительности а/п
		--.15 mv 27.01.2012: Изменил обвязку рядом вокруг sp "GetServiceAddCosts"
		@svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
		@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2) = 0, @marginType int =0,
		@sellDate dateTime, @netto decimal(14,2) output, @brutto decimal(14,2) output, @discount decimal(14,2) output, 
		@nettoDetail varchar(100) = '' output, @sBadRate varchar(2) = '' output, @dtBadDate DateTime = '' output,
		@sDetailed varchar(100) = '' output,  @nSPId int = null output, @useDiscountDays int = 0 output,
		@tourKey int = 0, @tourDate datetime, @tourDays int, @includeAddCost bit = 1
	)
as
SET DATEFIRST 1
DECLARE @tourlong int


If @svKey = 1 and @days > 0
BEGIN
	Set @tourlong = @days
	Set @days = 0
END
else
	set @tourlong = 0
If ((((@days <= 0) or (@days is null)) and (@svKey != 3 and @svKey != 8)) or (@svKey = 1 and isnull(@tourDays,0) > 0))
	Set @days = 1

/*
Новый код!!!!!!
НАЧАЛО
*/
declare @rakey int, @marginCalcValue decimal(14,2), @bSPUpdate bit, @sUseServicePrices varchar(1)
Select @rakey = RA_Key from dbo.Rates with(nolock) where RA_Code = @resRate

select @sUseServicePrices = SS_ParmValue from systemsettings with(nolock) where SS_ParmName = 'UseServicePrices'
if @sUseServicePrices = '1'
BEGIN
	SET @bSPUpdate = 0
	set @netto = null

	if @nSPId is not null 
		if exists (select SP_ID from dbo.ServicePrices with(nolock) where SP_ID = @nSPId)
			Set @bSPUpdate = 1

	if @bSPUpdate = 0
	BEGIN
		select	@nSPId = SP_ID, @netto = SP_Cost, @brutto = SP_Price, @discount = SP_PriceWithCommission
		from	dbo.ServicePrices with(nolock)
		where 
				SP_SVKey = @svKey and SP_Code = @code and SP_SubCode1 = @code1 and
				SP_SubCode2 = @code2 and SP_PRKey = @prKey and SP_PKKey = @packetKey and
				SP_Long = @days and SP_Date = @date and SP_Pax = @men and
				SP_RateKey = @rakey
	END
END

if @nSPId is null or @bSPUpdate = 1
BEGIN
/*
Новый код!!!!!!
КОНЕЦ
*/

DECLARE @profitValue decimal(14,2)
Set @marginType = ISNULL(@marginType,0)
Set @packetKey = ISNULL(@packetKey,0)

DECLARE @TMP_Number_Period int, @TMP_DATE_Period datetime, @nCostByDayExists smallint, @WeekDate varchar(1), @IsFetchNormal bit, @csid int
DECLARE @TMP_Number INT, @DayOfWeek char(1), @DayOfWeeks varchar(13), @String varchar(500), @COST_ID INT, @TMP_Date DATETIME, @CS_Date DATETIME, @CS_DateEnd DATETIME, @CS_Week varchar(7), @CS_CostNetto decimal(14,4), @CS_Cost decimal(14,4)
DECLARE @CS_Discount decimal(14,4), @CS_Type INT, @CS_Rate varchar(2), @CS_LongMin int, @CS_Long int
--DECLARE @CS_ByDay INT, @CS_Profit decimal(8,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (8,6), @sBadRate varchar(3), @dtBadDate DateTime
DECLARE @CS_ByDay INT, @CS_Profit decimal(14,4), @CS_ID INT, @TMP_Rate varchar(2), @course decimal (18,8), @CS_CheckInDateBEG datetime, @CS_CheckInDateEND datetime, @CS_DateSellBeg datetime, @CS_DateSellEnd datetime, @NotCalculatedCosts smallint, @CS_Pax smallint, @FindCostByPeriod smallint
DECLARE @serviceEndDate datetime

set @NotCalculatedCosts = 1
set @WeekDate = DATEPART (weekday, @date)

--	REGION		MEG00015352 2008-02-22
	DECLARE @RealNetto decimal(14,2)	-- Сюда будем фиксировать НЕТТО, если цены в базе разделены 
	DECLARE @UseTypeDivisionMode int	-- Переменная, которая определяет ведется ли расчет отдельно по брутто и отдельно по нетто ценам
	DECLARE @TypeDivision int	-- Переменная указывает по какому типу цены ведем расчет (1-нетто, 2-брутто)
	SET @TypeDivision = 0

	SELECT @UseTypeDivisionMode = SS_ParmValue from dbo.SystemSettings with(nolock) where SS_ParmName = 'SYSUseCostTypeDivision'
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SELECT @UseTypeDivisionMode = COUNT(*) FROM tbl_costs with(nolock)
			WHERE	CS_TYPEDIVISION > 0 AND
					CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					CS_PrKey = @prKey and CS_PkKey = @packetKey
					and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null)) 
					and (CS_DateEnd >= @date and CS_DATE < @date+isnull(@days,0) or CS_DATE IS NULL) 
	END
	-- Если есть разделение цен на НЕТТО и БРУТТО
	IF @UseTypeDivisionMode is not null and @UseTypeDivisionMode > 0
	BEGIN
		SET @UseTypeDivisionMode = 2
		SET @TypeDivision = 1
	END
	ELSE
	BEGIN
		SET @UseTypeDivisionMode = 0	-- там и так ноль, но для наглядности
		SET @TypeDivision = 0
	END
	
		
	WHILE @TypeDivision <= @UseTypeDivisionMode
	BEGIN
	--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО
		
		if @UseTypeDivisionMode > 0
			declare costCursor cursor local fast_forward for
			select 
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
			ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
				from tbl_costs with(nolock)           
				WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and 
					    CS_PrKey = @prKey and CS_PkKey = @packetKey
					--	and (CS_CheckInDateEnd >= @date or CS_CheckInDateEnd is null)
						and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null)) 
					    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
		            --    and ((GetDate() between CS_DateSellBeg and CS_DateSellEnd) or (CS_DateSellBeg is null))
						and (CS_TYPEDIVISION IN (0,@TypeDivision) OR CS_TYPEDIVISION IS NULL)	-- отбираем цены только определенного типа при использовании режима разделения цен (брутто или нетто)
			    ORDER BY
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
		else if ( exists( select top 1 1 from SystemSettings with(nolock) where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))
			declare costCursor cursor local fast_forward for
			select 
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, 0 /* т.к. профиты конвертнулись в AddCosts */, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND, 
			ISNULL(CO_SaleDateBeg, '1900-01-01'), ISNULL(CO_SaleDateEnd, '2072-01-01')
				from tbl_costs with(nolock) join CostOffers with(nolock) on CS_COID = CO_Id
				join Seasons with(nolock) on CO_SeasonId = SN_Id
				WHERE	isnull(SN_IsActive, 0) = 1
						-- проверим активность костофера на нужную нам дату продажи
						and ((@sellDate is null and CO_State = 1) 
							or (CO_State in (1,2) and @sellDate is not null and @sellDate between isnull(CO_DateActive, '1900-01-01') and isnull(CO_DateClose, '2072-01-01')))
						-- проверим период продажи ценового блока
						and isnull(@sellDate, getdate()) between isnull(CO_SaleDateBeg, '1900-01-01') and isnull(CO_SaleDateEnd, '2072-01-01')
						and CS_SVKey = @svKey
						and CS_Code = @code
						and CS_SubCode1 = @code1
						and CS_SubCode2 = @code2
						and CS_PrKey = @prKey
						and CS_PkKey = @packetKey
						and @date between isnull(CS_CheckInDateBEG, '1900-01-01') and isnull(CS_CheckInDateEnd, '2072-01-01')
						-- либо дата начала услуги лежит между началом и концом цены,
						-- либо дата начала цены лежит между датой начала и концом услуги
						and (CS_DATE is null 
								or @date between CS_DATE and CS_DATEEND
								or CS_DATE between @date and dateadd(dd, isnull(@days,0), @date))
				ORDER BY
						-- если не задана дата продажи то смотрим по текущему полю последней даты активации
						-- иначе смотрим по истории активации
						isnull(CO_DateActive,'1900-01-01') desc,
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc, 
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC
		else
			declare costCursor cursor local fast_forward for
			select
			CS_DATE, CS_DATEEND, CS_WEEK, CS_COSTNETTO, CAST(CS_COST as decimal(14,2)),
			CS_DISCOUNT, isnull(CS_TYPE,0), CS_RATE, CS_LONGMIN, CS_LONG,
			CS_BYDAY, CS_PROFIT, CS_ID, CS_CheckInDateBEG, CS_CheckInDateEND,
			ISNULL(CS_DateSellBeg, '19000101'), ISNULL(CS_DateSellEnd, '99980101')
				from tbl_costs with(nolock)
				WHERE	CS_SVKey = @svKey and CS_Code = @code and CS_SubCode1 = @code1 and CS_SubCode2 = @code2 and
					    CS_PrKey = @prKey and CS_PkKey = @packetKey
						and ((@date between CS_CheckInDateBEG and CS_CheckInDateEnd) or (CS_CheckInDateBEG is null and CS_CheckInDateEnd is null))
					    and (CS_DateEnd >= @date and CS_DATE <= @date+isnull(@days,0) or (CS_DATE is null and CS_DateEnd is null))
			    ORDER BY
						CS_CheckInDateBEG Desc, CS_CheckInDateEnd, CS_Date Desc, CS_DATEEND, CS_LONGMIN desc,
						CS_LONG, CS_DateSellBeg Desc, CS_DateSellEnd, CS_BYDAY,	CS_WEEK ASC				

	Set @sellDate = ISNULL(@sellDate,GetDate())
	open costCursor
	set @nCostByDayExists = 0

	fetch next from costCursor 
		into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
				@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
				@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

		If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
		BEGIN
			If @@fetch_status = 0
			BEGIN

				declare @TMPTable Table 
 				( CL_Date datetime,
				CL_CostNetto decimal(14,6),
				CL_Cost decimal(14,6),
				CL_Discount smallint,
				CL_Type smallint,
				CL_Rate varchar(2),
				CL_Course decimal(14,6),
				CL_Pax smallint default 1,
				CL_ByDay smallint,
				CL_Part smallint,
				CL_Profit decimal(14,6))

				DECLARE @temp_date DATETIME
				SET @temp_date = @date + @days - 1

				while @temp_date >= @date 
				BEGIN -- begin while @temp_date >= @date 
					insert into @TMPTable (CL_Date, CL_ByDay) values (@temp_date, -1 )
					set @temp_date = @temp_date - 1 
				END  -- end while @temp_date >= @date 
			END
			Else
			BEGIN
				close costCursor
				deallocate costCursor
				return 0
			END

			set @COST_ID = 1 --идетификатор уникальности цены
			If @CS_ByDay = 2
				Set @nCostByDayExists = 1

			If @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) --or (@CS_ByDay = 0 and @days = 0)
				insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
		END

		set @NotCalculatedCosts = 1
		set @FindCostByPeriod = 0   --переменная контролирует поиск цены за период, точно совпадающий с периодом предоставления услуги

	While (@@fetch_status = 0) and (@NotCalculatedCosts > 0 or @FindCostByPeriod > 0)  --цены уже могут быть найдены на все даты, но возможно где-то еще есть цена на период...
	BEGIN -- While (@@fetch_status = 0)
		-- подправим продолжительность цены, чтобы было проще искать по периодам и по неделям
		Set @IsFetchNormal = 1
			-- если не указаны даты периодов, то значит указаны даты заедов
			-- в этом случае "дни недели", подразумевают дни заездов, и действуют все дни из периодов]

		If	@CS_CheckInDateBEG is not null and @CS_Date is null and @CS_Week is not null and @CS_Week != ''
			if CHARINDEX ( @WeekDate, @CS_Week ) = 0
				Set @IsFetchNormal = 0
			Else
				Set @CS_Week = ''

		If @tourlong > 0 and @svKey = 1
		Begin		
			If (@CS_LongMin is null or @tourlong >= @CS_LongMin) and (@CS_Long is null or @tourlong <= @CS_Long)
				Set @IsFetchNormal = @IsFetchNormal
			else
				Set @IsFetchNormal = 0
		end     

		If @svKey != 1
		begin
			If @CS_LongMin is not null and @CS_LongMin > @days
				Set @IsFetchNormal = 0
		end

		-- Если время не задано, то увеличиваем период продажи на один день. Иначе, смотрим точный период.
		If DATEPART(hour, @CS_DateSellEnd)+DATEPART(minute, @CS_DateSellEnd) = 0
			Set @CS_DateSellEnd = @CS_DateSellEnd + 1
		-- При переходе с 5.2 возможны цены с периодом продаж оганиченном только с одной стороны.
		If (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
			Set @IsFetchNormal = @IsFetchNormal 
		else
			Set @IsFetchNormal = 0
			
		if (@svKey = 3 or @svKey = 8)
			set @serviceEndDate = @date + @days - 1
		else
			set @serviceEndDate = @date + @days

		If @FindCostByPeriod = 1 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null) and @CS_DateEnd = @serviceEndDate -- смотрим может есть цена за период точно совпадает с периодом действия услуги
			Update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
				CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null

	--	If @CS_ByDay = 1 and @CS_Long is not null and @CS_Long < @days
	--		Set @IsFetchNormal = 0
		If @CS_Week != '' and (@days = 0 or (@days = 1 and (@CS_ByDay != 2 or (@svKey!=3 and @svKey!=8) ) ) )
		BEGIN
			If CHARINDEX ( @WeekDate, @CS_Week ) > 0
				Set @IsFetchNormal = @IsFetchNormal 
			Else
				Set @IsFetchNormal = 0
		END

		If @Days = 1 and @CS_Date > @date
			Set @IsFetchNormal = 0

		If @Days = 1 and @CS_ByDay in (3,4)
			Set @IsFetchNormal = 0

	--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
	--ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! ВНИМАНИЕ!!!! 
	/*
		If 	@CS_CheckInDateBEG is not null
		BEGIN
			Set @CS_Date = null
			Set @CS_DateEnd = null
		END
	*/
			If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @IsFetchNormal = 1 	-- fetch нам подходит
			BEGIN			--цены подходят для поиска
				Set @CS_Date = (isnull(@CS_Date,@date))
				Set @CS_DateEnd = isnull(@CS_DateEnd,@date+ISNULL(@CS_Long,999))

				If @nCostByDayExists = 0 and @CS_ByDay = 2 and (@svKey = 3 or @svKey = 8)
				BEGIN
					update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
							CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
					if not exists (select * from @TMPTable where CL_Date = @date + @days)
						insert into @TMPTable (CL_Date, CL_ByDay) values (@date + @days, -1 )
					Set @nCostByDayExists = 1	
				END

				if @CS_Date < @date
					Set @CS_Date = @date
				if @CS_DateEnd > @date + @days
					Set @CS_DateEnd = @date + @days
				Set @CS_Discount = ISNULL(@CS_Discount,0)
				Set @TMP_Number_Period = null

				if @CS_ByDay = 3 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за неделю
				BEGIN -- if @CS_ByDay = 3
					if (@CS_DateEnd - @CS_Date + 1) >= 7 and ((@days between @CS_LongMin and @CS_Long) or @CS_Long is null)
					BEGIN
						select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable Where CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay in (-1,1,4)
						while @TMP_Number >= 7
						BEGIN
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
								CL_Pax = 1, CL_Profit = @CS_Profit
								WHERE CL_DATE between @TMP_Date and @TMP_Date + 6  and CL_ByDay  in (-1,1,4)
		
							UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
							SET @TMP_Number = @TMP_Number - 7
							SET @TMP_Date = @TMP_Date + 7
							SET @COST_ID = @COST_ID + 1
						END
					END
				END	-- if @CS_ByDay = 3

		--		print 'поиск'
				if @CS_ByDay = 0 and (@nCostByDayExists = 0 or (@svKey != 3 and @svKey != 8)) -- если цена за период
				BEGIN -- if @CS_ByDay = 0
		--			print 'период'
					select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
						Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and CL_ByDay != 0

					if @CS_Date < @TMP_Date and @date < @TMP_Date
					BEGIN
						select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date - 1 and CL_ByDay = 0
				--		print @TMP_Number_Period
						if @TMP_Number_Period is not null
						BEGIN					
							select @TMP_Date_Period = MIN(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
							if @CS_Date <= @TMP_Date_Period and (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date_Period,@TMP_Date + @TMP_Number))
							BEGIN
								select @TMP_Number = count(*), @TMP_Date = MIN(CL_Date) from @TMPTable 
									Where	CL_Date between @CS_Date and @CS_DateEnd and CL_ByDay != 3 and (CL_ByDay != 0 or CL_Part = @TMP_Number_Period)					
							END
						END
						Set @TMP_Number_Period = null
					END

					if @CS_Long is null or @CS_Long > @TMP_Number
					BEGIN
						--если предыдущий период захватывается полностью, то его надо включить
						--это делается только в случае, если цену указана за период
				--		print @TMP_Date + @TMP_Number
						select @TMP_Number_Period = CL_Part from @TMPTable where CL_Date = @TMP_Date + @TMP_Number and CL_ByDay = 0
			--			print @TMP_Number_Period
						if @TMP_Number_Period is not null
						BEGIN 
							select @TMP_Date_Period = MAX(CL_Date) from @TMPTable where CL_Part = @TMP_Number_Period
		--					print @TMP_Date_Period
							if (@CS_Long is null or @CS_Long > DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and (@CS_LongMin is null or @CS_LongMin <= DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period + 1)) and @TMP_Date_Period <= @CS_DateEnd
								Set @TMP_Number = DATEDIFF(DAY,@TMP_Date,@TMP_Date_Period) + 1
						END
					END

					--mv 06.02.2012 (MEG00040397) Сделал проверку только НЕ для а/п
					If @svKey != 1
					begin
						if @CS_Long is not null and @CS_Long < @TMP_Number
							set @TMP_Number = @CS_Long
					end

					--mv 06.02.2012 (MEG00040397) отдельная проверка на продолжительность а/п
					if @CS_LongMin is null or @CS_LongMin <= @TMP_Number 
						or (@svKey=1 and (@CS_LongMin is null or @tourDays >= @CS_LongMin) and (@CS_Long is null or @tourDays <= @CS_Long))
					BEGIN
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID, 
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, 
							CL_Pax = 1, CL_Profit = @CS_Profit
							WHERE CL_DATE between @TMP_Date and @TMP_Date + @TMP_Number - 1 and CL_ByDay != 3
						UPDATE @TMPTable SET CL_Pax = 0 WHERE CL_DATE != @TMP_Date and CL_Part = @COST_ID
						SET @COST_ID = @COST_ID + 1
					END
				END	-- if @CS_ByDay = 0
		
				if (@CS_ByDay = 1 and @nCostByDayExists = 0) or (@CS_ByDay = 2 and @nCostByDayExists = 1) or ((@svKey != 3 and @svKey != 8) and @CS_ByDay in (1,2))  -- если цена за ночь / день
				BEGIN -- if @CS_ByDay = 1/2
					if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
						Set @CS_DateEnd = @date + @CS_Long - 1
					if 1=1 -- временная заглушка, 
					BEGIN  -- если Цена удовлетворяет условиям
						SET @DayOfWeeks = @CS_Week
						While exists (select TOP 1 CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd)
						BEGIN
							select TOP 1 @TMP_Number = CL_Part from @TMPTable where CL_ByDay = 0 group by CL_Part having MIN(CL_Date) >= @CS_Date and MAX(CL_Date) <= @CS_DateEnd
							update @TMPTable Set CL_CostNetto = null, CL_Cost = null, CL_Discount = null, CL_Type = null, 
								CL_Rate = null, CL_Course = null, CL_Pax = 1, CL_ByDay =-1, CL_Part = null, CL_Profit = null
								Where CL_Part = @TMP_Number
						END				

						IF @DayOfWeeks = ''
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
								WHERE	CL_DATE between @CS_Date and @CS_DateEnd 
								and ((@CS_CheckInDateBEG is null and CL_ByDay in (-1,4)) or (@CS_CheckInDateBEG is not null and CL_ByDay in (-1,1,2,4)) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999)))
						ELSE
							UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
								CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate, CL_Profit = @CS_Profit, CL_Course = ISNULL(@CS_Long,999)
								WHERE	CL_DATE between @CS_Date and @CS_DateEnd 
								and ((@CS_CheckInDateBEG is null and CL_ByDay in (-1,4)) or (@CS_CheckInDateBEG is not null and CL_ByDay in (-1,1,2,4)) or (CL_ByDay in (1,2) and CL_Course < ISNULL(@CS_Long,999))) AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0

						SET @COST_ID = @COST_ID + 1
					END   -- если Цена удовлетворяет условиям
				END	-- if @CS_ByDay = 1

				if @CS_ByDay = 4 --and @nCostByDayExists = 0 -- если цена за доп.ночь
				BEGIN -- if @CS_ByDay = 4
					if @CS_DateEnd > @date + @CS_Long - 1		-- если дата окончания цены действует в паре с продолжительностью
						Set @CS_DateEnd = @date + @CS_Long - 1

					SET @DayOfWeeks = ''
					Set @CS_Week = REPLACE(@CS_Week,'.','');

					if @CS_Week != ''
					BEGIN			
						Set @TMP_Number = 1
						Set @DayOfWeeks = LEFT(@CS_Week,1)
						while @TMP_Number < LEN(@CS_Week)
						BEGIN
							Set @TMP_Number = @TMP_Number + 1
							Set @DayOfWeeks = @DayOfWeeks + ',' + SUBSTRING(@CS_Week, @TMP_Number, 1)				
						END
					END
					
					-- доп.ночи могут только добивать в конец, первый день точно не к ним
					If @CS_Date = @date
						Set @CS_Date = @CS_Date + 1

					IF @DayOfWeeks = ''
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd /*and (CL_ByDay = -1)*/
					ELSE
						UPDATE @TMPTable SET CL_CostNetto = @CS_CostNetto, CL_ByDay = @CS_ByDay, CL_Part = @COST_ID,
							CL_Cost = @CS_Cost, CL_Discount = (CASE WHEN @CS_Discount=1 THEN 1 ELSE null END), CL_Type = @CS_Type, CL_Rate = @CS_Rate
							WHERE	CL_DATE between @CS_Date and @CS_DateEnd /*and (CL_ByDay = -1)*/ AND CHARINDEX(CAST(DATEPART (weekday, CL_DATE) as varchar(1)),@DayOfWeeks) > 0
					SET @COST_ID = @COST_ID + 1
				END	-- if @CS_ByDay = 4
				select @NotCalculatedCosts = Count(*) from @TMPTable where CL_CostNetto is null
			END -- цены подходят для поиска и есть продолжительность
			ELSE
				If @IsFetchNormal = 1
					Set @NotCalculatedCosts = 0

		If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) or @IsFetchNormal = 0
		BEGIN
			fetch next from costCursor 
				into	@CS_Date, @CS_DateEnd, @CS_Week, @CS_CostNetto, @CS_Cost, 
						@CS_Discount, @CS_Type, @CS_Rate, @CS_LongMin, @CS_Long, 
						@CS_ByDay, @CS_Profit, @CS_ID, @CS_CheckInDateBEG, @CS_CheckInDateEND, @CS_DateSellBeg, @CS_DateSellEnd

			If @CS_ByDay = 0 and @CS_Date = @date and @CS_DateEnd <= (@date + @days) and @days > 1 and (@sellDate between ISNULL(@CS_DateSellBeg, @sellDate - 1) and ISNULL(@CS_DateSellEnd, @sellDate + 1))
				Set @FindCostByPeriod = 1  -- отметка, что может быть эта цена за период, нам супер подойдет
			Else
				Set @FindCostByPeriod = 0
		END
	END -- While (@@fetch_status = 0)
	close costCursor
	deallocate costCursor


if @NotCalculatedCosts > 0
BEGIN
--	delete from @TMPTable
	if @bSPUpdate = 1
		delete from dbo.ServicePrices where SP_ID = @nSPId	
	return 0
END

If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN
	Update @TMPTable set CL_Course = null
	Update @TMPTable set CL_Course = 1 Where CL_Rate = @resRate
	Update @TMPTable set CL_Course = 0 Where CL_CostNetto = 0 and ISNULL(CL_Cost,0) = 0 and ISNULL(CL_Profit,0) = 0

	set @TMP_Rate = null
	SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null

	while @TMP_Rate is not null
	BEGIN
		Set @course = 1
		exec ExchangeCost @course output, @TMP_Rate, @resRate, @date
		if (@course is null) 
		begin 
			set @sBadRate=@TMP_Rate
			set @dtBadDate =@date
			--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
			if @bSPUpdate = 1
				delete from dbo.ServicePrices where SP_ID = @nSPId	
			return 0 		
		end 
		Update @TMPTable set CL_Course = @course Where CL_Rate = @TMP_Rate

		set @TMP_Rate = null
		SELECT TOP 1 @TMP_Rate = CL_Rate from @TMPTable where CL_Course is null
	END
end
else
BEGIN
	set @course=1
	If @CS_CostNetto = 0 and ISNULL(@CS_Cost,0) = 0 and ISNULL(@CS_Profit,0) = 0
		set @course = 0
	Else IF (@CS_Rate<>@resRate)
		exec ExchangeCost @course output, @CS_Rate, @resRate, @date             

	if (@course is null) 
	begin 
		set @sBadRate = @CS_Rate
		set @dtBadDate = @date
		--print 'нет курса между ' + ISNULL(@TMP_Rate,'NULL') + ' и ' + ISNULL(@resRate,'NULL') + ' на ' + CAST(@dtBadDate as varchar(12))
		--delete from @TMPTable
		if @bSPUpdate = 1
			delete from dbo.ServicePrices where SP_ID = @nSPId	
		return 0 		
	end 			
END

--select * from TMP
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
	Update @TMPTable set CL_Pax = CL_Pax * @men Where CL_Type = 0
else
	If (isnull(@CS_Type, 0) = 0)
		Set @CS_Pax = @men
	Else
		Set @CS_Pax = 1

--Update @TMP set CL_Course = 0 Where CL_ByDay not in (0,3) and CL_DateFirst != CL_Date
--Update @TMP set CL_Course = CL_Course*(@margin + 100)/100 Where CL_Discount + (1- @marginType) != 0
If @days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)
BEGIN	
	update @TMPTable set CL_Profit = 0 where CL_Date != @date
	if not exists (Select * from @TMPTable where CL_Cost is null)
		select	@brutto = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax),
				@discount = SUM((CL_Cost + ISNULL(CL_Profit,0)) * CL_Course * CL_Pax * CL_Discount) 
		from @TMPTable
	select	@netto = SUM(CL_CostNetto * CL_Course * CL_Pax) from @TMPTable
--	select	@profitValue = ISNULL(CL_Profit * CL_Course * CL_Pax * CL_Margin,0) from @TMPTable where CL_Date = @date
--	select	@profitValue = CL_Profit from @TMPTable where CL_Date = @date
	set @useDiscountDays = (select SUM(ISNULL(CL_Discount,0)) from @TMPTable)
	
END
else
BEGIN
	set @brutto = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax
	set @discount = (@CS_Cost + ISNULL(@CS_Profit,0)) * @course * @CS_Pax * @CS_Discount
	set @netto = @CS_CostNetto * @course * @CS_Pax 
	set @useDiscountDays = @CS_Discount
--	set @profitValue = @CS_Profit * @course * @CS_Pax * @CS_Margin
END

/*
Новый код!!!!!!
НАЧАЛО
*/
If @sUseServicePrices = '1'
BEGIN
		if @bSPUpdate = 1
			update	dbo.ServicePrices 
					set	SP_Cost = @netto, SP_Price = @brutto, SP_PriceWithCommission = ISNULL(@discount,0)
			where SP_ID = @nSPId	
		else
		begin
			insert into dbo.ServicePrices (SP_SVKey, SP_Code, SP_SubCode1, SP_SubCode2, SP_PRKey,
				SP_PKKey, SP_Long, SP_Date, SP_Pax, SP_Cost, 
				SP_Price, SP_PriceWithCommission, SP_RateKey)
			values (@svKey, @code, @code1, @code2, @prKey,
				@packetKey, @days, @date, @men, @netto,
				@brutto, ISNULL(@discount,0), @rakey )
			Set @nSPId = SCOPE_IDENTITY()
		end
	END

--	REGION		MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО		
		IF		(@TypeDivision = 1)	-- Если производили расчет по ценам НЕТТО
			BEGIN
				SET @RealNetto = @netto -- Фиксируем НЕТТО
				DELETE FROM @TMPTable	-- Подчищаем за собой для следующей итерации
			END
		ELSE IF	(@TypeDivision = 2)	-- Если производили расчет по ценам БРУТТО
			BEGIN
				SET @netto = @RealNetto	-- Восстанавливаем НЕТТО
			END
		SET @TypeDivision = @TypeDivision + 1
	END -- WHILE @TypeDivision <= @UseTypeDivisionMode
--	ENDREGION	MEG00015352 2008-02-22 Разделение цен на НЕТТО и БРУТТО

END -- Это конец основного блока !!!!!!!!!
/*
Новый код!!!!!!
КОНЕЦ
*/

--@discount на данный момент хранит сумму, с которой надо давать скидку
declare @sum_with_commission decimal(18,2)
set @sum_with_commission = @discount

/*Посчитаем доплату*/
if (@includeAddCost = 1 and exists( select top 1 1 from SystemSettings where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))
begin
	declare @addCostValueIsCommission money, @addCostValueNoCommission money, @addCostFromAdult money, @addCostFromChild money, @addCostRate nvarchar(2)
	--print @tourKey
	exec GetServiceAddCosts @tourKey, @svKey, @code, @code1, @code2, @prKey, @tourDate, @tourDays, @days, @men, @sellDate, null, @addCostValueIsCommission output, @addCostValueNoCommission output, @addCostFromAdult output, @addCostFromChild output, @addCostRate output
	/*
	print @addCostValueIsCommission
	print @addCostValueNoCommission
	*/
	--конвертируем доплаты в валюту расчета из валюты тура (в которой они задавались)
	If @addCostValueIsCommission is not null
		exec ExchangeCost @addCostValueIsCommission output, @addCostRate, @resRate, @date
	If @addCostValueNoCommission is not null
		exec ExchangeCost @addCostValueNoCommission output, @addCostRate, @resRate, @date
	
	if @addCostValueIsCommission is not null
		set @sum_with_commission = isnull(@sum_with_commission,0) + isnull(@addCostValueIsCommission, 0)
	set @brutto = @brutto + isnull(@addCostValueIsCommission, 0) + isnull(@addCostValueNoCommission, 0)
end

If @marginType = 0 -- даем наценку, вне зависмости от наличия комиссии по услуге
	Set @brutto = ISNULL(@brutto,0) * (100 + @margin) / 100 
Else -- даем наценку, только при наличии комиссии
	Set @brutto = ISNULL(@brutto,0) - ISNULL(@sum_with_commission,0) + ISNULL(@sum_with_commission,0) * (100 + @margin) / 100 

--теперь @discount это именно сумма скидки
Set @discount = @sum_with_commission * ((100 + @margin) / 100) * @discountPercent / 100

exec RoundCost @brutto output, 1

Set @brutto = ISNULL(@brutto,0) - ISNULL(@discount,0)

if (not exists( select top 1 1 from SystemSettings with(nolock) where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))
begin
	DECLARE @TMP_Number_Course decimal(12,4), @TMP_Number_Part INT, @TMP_Number_Pax int
	DECLARE @TMP_Number_CostNetto decimal(12,2), @TMP_Number_Cost decimal(12,2)

	If (@days > 1 or (@CS_ByDay = 2 and (@svKey = 3 or @svKey = 8) and @days=1)) and @nSPId is null    -- Новый код !!!!!  and @useServicePrices is null
	BEGIN
		set @nettoDetail = '='
		set @sDetailed = '='
		while exists (select * from @TMPTable where CL_Course != 0)
		begin
			SELECT TOP 1	@CS_Date = CL_Date, @TMP_Number_CostNetto = CL_CostNetto, @TMP_Number_Cost = CL_Cost, @TMP_Number_Course = CL_Course, 
							@TMP_Number_Part = CL_Part, @TMP_Number_Pax = CL_Pax
			from			@TMPTable 
			where			CL_Course != 0	 
			Order By		CL_Date

			Set @TMP_Number = 0
			Select @TMP_Number = Count(*) from @TMPTable where CL_Part = @TMP_Number_Part and CL_Pax != 0
			UPDATE @TMPTable SET CL_Course = 0 WHERE ISNULL(CL_Part, 0) = ISNULL(@TMP_Number_Part, 0)
			if @nettoDetail != '='
				Set @nettoDetail = @nettoDetail + ' +'
			if @sDetailed != '='
				Set @sDetailed = @sDetailed + ' +'

			Set @nettoDetail = @nettoDetail + CAST(@TMP_Number_CostNetto as varchar(15)) 
			Set @sDetailed = @sDetailed + CAST(@TMP_Number_Cost as varchar(15)) 

			if @TMP_Number != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number as varchar(15)) 
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number as varchar(15)) 
			end

			if @TMP_Number_Pax != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Pax as varchar(15))
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Pax as varchar(15))
			end

			if @TMP_Number_Course != 1
			begin
				Set @nettoDetail = @nettoDetail + '*' + CAST(@TMP_Number_Course as varchar(15)) 
				Set @sDetailed = @sDetailed + '*' + CAST(@TMP_Number_Course as varchar(15)) 
			end
		end

		If ISNULL(@profitValue,0) > 0
			Set @sDetailed = @sDetailed + ' +' + CAST(@profitValue as varchar(15)) 

		if @marginCalcValue > 0
			Set @sDetailed = @sDetailed + '+' + CAST(@marginCalcValue as varchar(15)) 

		If ISNULL(@discount,0) > 0
			Set @sDetailed = @sDetailed + ' -' + CAST(@discount as varchar(15)) 
	END
end
GO

grant exec on [dbo].[GetServiceCost] to public
go
/*********************************************************************/
/* end sp_GetServiceCost.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetServiceList.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetServiceList]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetServiceList]
GO

CREATE procedure [dbo].[GetServiceList] 
(
--<VERSION>2009.2.18.1</VERSION>
--<DATE>2013-05-06</DATE>
@TypeOfRelult int, -- 1-список по по услугам, 2-список по туристам на услуге
@SVKey int, 
@Codes varchar(100), 
@SubCode1 int=null,
@Date datetime =null, 
@QDID int =null,
@QPID int =null,
@ShowHotels bit =null,
@ShowFligthDep bit =null,
@ShowDescription bit =null,
@State smallint=null,
@SubCode2 int = null
)
as 

--koshelev
--2012-07-19 TFS 6699 блокировки на базе мешали выполнению хранимки, вынужденная мера
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

declare @Query varchar(8000)
 
CREATE TABLE #Result
(
	DG_Code nvarchar(max), DG_Key int, DG_DiscountSum money, DG_Price money, DG_Payed money,
	DG_PriceToPay money, DG_Rate nvarchar(3), DG_NMen int, PR_Name nvarchar(max), PR_Name_Lat nvarchar(max), CR_Name nvarchar(max), CR_Name_Lat nvarchar(max),
	DL_Key int, DL_NDays int, DL_NMen int, DL_Reserved int, DL_CTKeyTo int, DL_CTKeyFrom int, DL_CNKEYFROM int,
	DL_SubCode1 int, TL_Key int, TL_Name nvarchar(max), TL_Name_Lat nvarchar(max),  TUCount int, TU_NameRus nvarchar(max), TU_NameLat nvarchar(max),
	TU_FNameRus nvarchar(max), TU_FNameLat nvarchar(max), TU_Key int, TU_Sex Smallint, TU_PasportNum nvarchar(max),
	TU_PasportType nvarchar(max), TU_PasportDateEnd datetime, TU_BirthDay datetime, TU_Hotels nvarchar(max), TU_Hotels_Lat nvarchar(max),
	Request smallint, Commitment smallint, Allotment smallint, Ok smallint, TicketNumber nvarchar(max),
	FlightDepDLKey int, FligthDepDate datetime, FlightDepNumber nvarchar(max), ServiceDescription nvarchar(max), ServiceDescription_Lat nvarchar(max),
	ServiceDateBeg datetime, ServiceDateEnd datetime, RM_Name nvarchar(max), RC_Name nvarchar(max), SD_RLID int,
	TU_SNAMERUS nvarchar(max), TU_SNAMELAT nvarchar(max), TU_IDKEY int, OkWait smallint
)
 
if @TypeOfRelult = 2
begin
	--- создаем таблицу в которой пронумируем незаполненых туристов
	CREATE TABLE #TempServiceByDate
	(
		SD_ID int identity(1,1) not null,
		SD_Date datetime,
		SD_DLKey int,
		SD_RLID int,
		SD_QPID int,
		SD_TUKey int,
		SD_RPID int,
		SD_State int,
		SD_QPIdOld int
	)

	-- вносим все записи которые нам могут подойти
	insert into #TempServiceByDate(SD_Date, SD_DLKey, SD_RLID, SD_QPID,	SD_TUKey, SD_RPID, SD_State, SD_QPIdOld)
	select SD_Date, SD_DLKey, SD_RLID, SD_QPID,	SD_TUKey, SD_RPID, SD_State, SD_QPIdOld
	from ServiceByDate as SSD join Dogovorlist on DL_KEY = SD_DLKey
	where DL_SVKEY = @SVKey
	and DL_CODE = convert(int, @Codes)
	and ((@SubCode1 is null) or (DL_SUBCODE1 = @SubCode1))
	and ((@QPID is null) or (SD_QPID = @QPID))
	and ((@State is null) or (SD_State = @State))
	--mv 24.10.2012 не понячл зачем нужен был подзапрос, но точно он приводил к следущей проблеме
	-- если отбираем с фильтром по статусу, то статус проверял на любой из дней, а не тот на который формируется список
	and SSD.SD_Date = @Date
	--and exists (select 1 from ServiceByDate as SSD2 where SSD.SD_DLKey = SSD2.SD_DLKey and SSD2.SD_Date = @Date)
	
	declare @Id int, @SDDate datetime, @SDDLKey int, @SDTUKey int,
	@oldDlKey int, @oldDate datetime, @i int

	set @i = -1
	 
	DECLARE noBodyTurists CURSOR FOR 
	select SD_ID, SD_Date, SD_DLKey, SD_TUKey
	from #TempServiceByDate
	where SD_TUKey is null
	order by SD_DLKey, SD_Date

	OPEN noBodyTurists
	FETCH NEXT FROM noBodyTurists INTO @Id, @SDDate, @SDDLKey, @SDTUKey
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- если мы встретили новую дату или услугу то сбрасываем счетчик
		if @oldDlKey != @SDDLKey or @oldDate != @SDDate
		begin
			set @i = -1
		end
			
		update #TempServiceByDate
		set SD_TUKey = @i
		where SD_ID = @Id
		
		set @i = @i - 1

		set @oldDlKey = @SDDLKey
		set @oldDate = @SDDate
		
		FETCH NEXT FROM noBodyTurists INTO @Id, @SDDate, @SDDLKey, @SDTUKey
	END
	CLOSE noBodyTurists
	DEALLOCATE noBodyTurists 

	--select * from #TempServiceByDate


	SET @Query = '
		INSERT INTO #Result (DG_Code, DG_Key, DG_DiscountSum, DG_Price, DG_Payed, 
		DG_PriceToPay, DG_Rate, DG_NMen, 
		PR_Name, PR_Name_Lat, CR_Name,  CR_Name_Lat,
		DL_Key, DL_NDays, DL_NMen, DL_Reserved, DL_CTKeyTo, DL_CTKeyFrom, DL_SubCode1, ServiceDateBeg, ServiceDateEnd, 
		TL_Key, TUCount, TU_NameRus, TU_NameLat, TU_FNameRus, TU_FNameLat, TU_Key, 
		TU_Sex, TU_PasportNum, TU_PasportType, TU_PasportDateEnd, TU_BirthDay, TicketNumber, TU_SNAMERUS, TU_SNAMELAT, TU_IDKEY)
		SELECT	  DG_CODE, DG_KEY, DG_DISCOUNTSUM, DG_PRICE, DG_PAYED, 
		(case DG_PDTTYPE when 1 then DG_PRICE+DG_DISCOUNTSUM else DG_PRICE end ), DG_RATE, DG_NMEN, 
		PR_NAME, PR_NAMEENG, CR_NAME, CR_NameLat, DL_KEY, DL_NDays, DL_NMEN, DL_RESERVED, DL_CTKey, DL_SubCode2, DL_SubCode1, 
		DL_DateBeg, CASE WHEN ' + CAST(@SVKey as varchar(10)) + '=3 THEN DATEADD(DAY,1,DL_DateEnd) ELSE DL_DateEnd END,
		DG_TRKey, 0, TU_NAMERUS, TU_NAMELAT, TU_FNAMERUS, TU_FNAMELAT, SD_TUKey, case when SD_TUKey > 0 then isnull(TU_SEX,0) else null end, TU_PASPORTTYPE + ''№'' + TU_PASPORTNUM, TU_PASPORTTYPE, 
		TU_PASPORTDATEEND, TU_BIRTHDAY, TU_NumDoc, TU_SNAMERUS, TU_SNAMELAT, TU_IDKEY
		FROM  Dogovor join Dogovorlist on dl_dGKEY = DG_KEY
		left join Partners on dl_agent = pr_key
		join Controls on dl_control = cr_key
		join #TempServiceByDate on SD_DLKey = DL_KEY
		left join TuristService on tu_dlkey = dl_key and TU_TUKEY = SD_TUKey
		left join Turist on tu_key = tu_tukey
		WHERE '

		SET @Query=@Query + '
			 DL_SVKEY=' + CAST(@SVKey as varchar(20)) + ' AND DL_CODE in (' + @Codes + ') AND ''' + CAST(@Date as varchar(20)) + ''' BETWEEN DL_DATEBEG AND DL_DATEEND '

		IF @QPID is not null or @QDID is not null
		BEGIN
			IF @QPID is not null
				SET @Query=@Query + 'and SD_QPID IN (' + CAST(@QPID as varchar(20)) + ')'
			ELSE
				--buryak
				--2013-02-20 TFS 11520 MT.Экран "Список на услугу".Не отображались путевки без туристов.
				SET @Query=@Query + 'and exists (SELECT top 1 SD_DLKEY FROM #TempServiceByDate, QuotaParts WHERE SD_QPID=QP_ID and QP_QDID IN (' + CAST(@QDID as varchar(20)) + ') and SD_DLKEY=DL_Key and (tu_tukey is null or sd_tukey = tu_tukey))'
		END
				
		if (@SubCode1 != '0')
			SET @Query=@Query + ' AND DL_SUBCODE1 in (' + CAST(@SubCode1 as varchar(20)) + ')'
		IF @State is not null
			SET @Query=@Query + ' and SD_State=' + CAST(@State as varchar(1))
		if (@SubCode2 != '0')
			SET @Query=@Query + ' AND DL_SUBCODE2 in (' + CAST(@SubCode2 as varchar(20)) + ')'
		SET @Query=@Query + ' 
		group by DG_CODE, DG_KEY, DG_DISCOUNTSUM, DG_PRICE, DG_PAYED, DG_PDTTYPE, DG_RATE, DG_NMEN, 
		PR_NAME, PR_NAMEENG, CR_NAME, CR_NameLat, DL_KEY, DL_NDays, DL_NMEN, DL_RESERVED, DL_CTKey, DL_SubCode2, DL_SubCode1, DL_DateBeg,
		DL_DateEnd, DG_TRKey, TU_NAMERUS, TU_NAMELAT, TU_FNAMERUS,
		TU_FNAMELAT, SD_TUKey, TU_SEX, TU_PASPORTNUM, TU_PASPORTTYPE, TU_PASPORTDATEEND, TU_BIRTHDAY, TU_NumDoc, TU_SNAMERUS, TU_SNAMELAT, TU_IDKEY'
end
else
begin
	SET @Query = '
		INSERT INTO #Result (DG_Code, SD_RLID, RM_Name, RC_Name, DG_KEY, DG_DISCOUNTSUM, DG_PRICE, DG_PAYED,
		DG_PriceToPay, DG_RATE, DG_NMEN,
		PR_NAME, PR_Name_Lat, CR_NAME, CR_NAME_Lat, DL_NDays, DL_NMEN, DL_RESERVED, DL_CTKeyTo, DL_SubCode1,
		ServiceDateBeg, ServiceDateEnd, TL_Key, TUCount, DL_Key, DL_CTKeyFrom)
		select DG_CODE, SD_RLID, RM_Name, RC_Name, DG_KEY, DG_DISCOUNTSUM, DG_PRICE, DG_PAYED,
		(case when DG_PDTTYPE = 1 then DG_PRICE+DG_DISCOUNTSUM else DG_PRICE end ), DG_RATE, DG_NMEN,
		PR_NAME, PR_NAMEENG, CR_NAME, CR_NAMELat, DL_NDays, 
		--mv 24.10.2012 -убрал очень странный код - в поле кол-во человек выводилосб количество комнат, сделал количество мест хотя бы
		--case when QT_ByRoom = 1 then count(distinct SD_RLID) else count(distinct SD_RPID) end as DL_NMEN,
		COUNT(SD_RPID),
		DL_RESERVED, DL_CTKey, DL_SubCode2, DL_DateBeg, CASE WHEN ' + CAST(@SVKey as varchar(10)) + ' = 3 THEN DATEADD(DAY,1,DL_DateEnd) ELSE DL_DateEnd END, DG_TRKey, Count(distinct SD_TUKey), DL_KEY, DL_SubCode2
		from ServiceByDate left join RoomNumberLists on sd_rlid = rl_id
		left join Rooms on rl_rmkey = rm_key
		left join RoomsCategory on rl_rckey = rc_key
		left join QuotaParts on sd_qpid = qp_id
		left join QuotaDetails on QP_QDID = QD_ID and QP_Date = QD_Date
		left join Quotas on QT_ID = QD_QTID
		join Dogovorlist on sd_dlkey = dl_key
		join Controls on dl_control = cr_key
		left join Partners on dl_agent = pr_key
		join Dogovor on dl_dGKEY = DG_KEY
		where DL_SVKEY=' + CAST(@SVKey as varchar(20)) + ' 
			AND DL_CODE in (' + @Codes + ') 
			AND ''' + CAST(@Date as varchar(20)) + ''' BETWEEN DL_DATEBEG AND DL_DATEEND
			--mv 24.10.2012 добавил фильтр по дате SD, так как просмотр идет относительно этой даты
			AND SD_Date = ''' + CAST(@Date as varchar(20)) + ''' '
		
	if @QDID is not null
		SET @Query = @Query + ' and qp_qdid = ' + CAST(@QDID as nvarchar(max))
	if @QPID is not null
		SET @Query = @Query + ' and qp_id = ' + CAST(@QPID as nvarchar(max))
	IF @State is not null
		SET @Query=@Query + ' and SD_State=' + CAST(@State as varchar(1))
	-- mv 24.10.2012 - не было фильтра по услуге, в список попадали лишние
	IF @SubCode1 is not null
		SET @Query=@Query + ' and DL_SUBCODE1 = ' + CAST(@SubCode1 as varchar(20))
	
	SET @Query = @Query + '
		group by DG_CODE, SD_RLID, DG_KEY, DG_DISCOUNTSUM, DG_PRICE, DG_PAYED,
		DG_PDTTYPE, DG_DISCOUNTSUM, DG_RATE, DG_NMEN,
		PR_NAME, PR_NAMEENG, CR_NAME,CR_NAMELat, DL_NDays, DL_RESERVED, DL_CTKey, DL_SubCode2,
		DL_DateBeg, DL_DateEnd, DG_TRKey, RM_Name, RC_Name, QT_ByRoom, DL_KEY'
end

--PRINT @Query
EXEC (@Query)
 
UPDATE #Result SET #Result.TL_Name=(SELECT TL_Name FROM TurList WHERE #Result.TL_Key=TurList.TL_Key)
UPDATE #Result SET #Result.TL_Name_Lat=(SELECT TL_NameLat FROM TurList WHERE #Result.TL_Key=TurList.TL_Key)

--select * from  #Result

if @TypeOfRelult=1
BEGIN
	UPDATE #Result SET #Result.Request=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_DLKey = #Result.DL_Key AND SD_State=4)
	UPDATE #Result SET #Result.Commitment=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_DLKey = #Result.DL_Key AND SD_State=2)
	UPDATE #Result SET #Result.Allotment=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_DLKey = #Result.DL_Key AND SD_State=1)
	--saifullina 14-11-2012 task 9326 добавлена новая колонка чтобы менеджер имел возможность отличать туристов, которые ждут посадки на квоту, от реально подтвержденных вне квоты
	UPDATE #Result SET #Result.OkWait=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_DLKey = #Result.DL_Key AND SD_State=3 AND SD_QPIDOld is not null)
	UPDATE #Result SET #Result.Ok=(SELECT COUNT(*) FROM ServiceByDate WHERE SD_DLKey = #Result.DL_Key AND SD_State=3)-#Result.OkWait
END
else
BEGIN
	UPDATE #Result SET #Result.Request=(SELECT COUNT(*) FROM #TempServiceByDate WHERE SD_DLKey=#Result.DL_Key AND SD_TUKey=#Result.TU_Key and SD_State=4)
	UPDATE #Result SET #Result.Commitment=(SELECT COUNT(*) FROM #TempServiceByDate WHERE SD_DLKey=#Result.DL_Key AND SD_TUKey=#Result.TU_Key and SD_State=2)
	UPDATE #Result SET #Result.Allotment=(SELECT COUNT(*) FROM #TempServiceByDate WHERE SD_DLKey=#Result.DL_Key AND SD_TUKey=#Result.TU_Key and SD_State=1)
	--saifullina 14-11-2012 task 9326 добавлена новая колонка чтобы менеджер имел возможность отличать туристов, которые ждут посадки на квоту, от реально подтвержденных вне квоты
	UPDATE #Result SET #Result.OkWait=(SELECT COUNT(*) FROM #TempServiceByDate WHERE SD_DLKey=#Result.DL_Key AND SD_TUKey=#Result.TU_Key and SD_State=3 AND SD_QPIDOld is not null)
	UPDATE #Result SET #Result.Ok=(SELECT COUNT(*) FROM #TempServiceByDate WHERE SD_DLKey=#Result.DL_Key AND SD_TUKey=#Result.TU_Key and SD_State=3)-#Result.OkWait
END
 
IF @ShowHotels=1
BEGIN
	IF @TypeOfRelult = 2
	BEGIN
		DECLARE @HD_Name varchar(100), @HD_Name2_Lat varchar(100),  @HD_Stars varchar(25), @PR_Name varchar(100), @PR_Name_Lat varchar(100), @TU_Key int, @HD_Key int, @PR_Key int, @TU_KeyPrev int, @TU_Hotels varchar(255), @TU_Hotels_Lat varchar(255)
		DECLARE curServiceList CURSOR FOR 
			SELECT	  DISTINCT HD_Name, HD_NAMELAT, HD_Stars, PR_Name, PR_NAMEENG, TU_TUKey, HD_Key, PR_Key 
			FROM  HotelDictionary, DogovorList, TuristService, Partners
			WHERE	  PR_Key=DL_PartnerKey and HD_Key=DL_Code and TU_DLKey=DL_Key and TU_TUKey in (SELECT TU_Key FROM #Result) and dl_SVKey=3 
			ORDER BY TU_TUKey
		OPEN curServiceList
		FETCH NEXT FROM curServiceList INTO	  @HD_Name,@HD_Name2_Lat, @HD_Stars,@PR_Name, @PR_Name_Lat, @TU_Key, @HD_Key, @PR_Key
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @TU_Key!=@TU_KeyPrev or @TU_KeyPrev is null
			begin
			  Set @TU_Hotels=@HD_Name+' '+@HD_Stars+' ('+@PR_Name+')'
			  Set @TU_Hotels_Lat=@HD_Name2_Lat+' '+@HD_Stars+' ('+@PR_Name_Lat+')'
			end
			ELSE
			begin
			  Set @TU_Hotels=@TU_Hotels+', '+@HD_Name+' '+@HD_Stars+' ('+@PR_Name+')'
			  Set @TU_Hotels_Lat=@TU_Hotels_Lat+', '+@HD_Name2_Lat+' '+@HD_Stars+' ('+@PR_Name_Lat+')'
			end
			UPDATE #Result SET TU_Hotels=@TU_Hotels WHERE TU_Key=@TU_Key
			UPDATE #Result SET TU_Hotels_Lat=@TU_Hotels_Lat WHERE TU_Key=@TU_Key
			SET @TU_KeyPrev=@TU_Key
			FETCH NEXT FROM curServiceList INTO	   @HD_Name,@HD_Name2_Lat, @HD_Stars, @PR_Name, @PR_Name_Lat, @TU_Key, @HD_Key, @PR_Key
		END
		CLOSE curServiceList
		DEALLOCATE curServiceList
	END
	IF @TypeOfRelult = 1
	BEGIN
		DECLARE @HD_Name1 varchar(100), @HD_Name1_lat varchar(100), @HD_Stars1 varchar(25), @PR_Name1 varchar(100), @PR_Name1_Lat varchar(100), @DL_Key1 int, @HD_Key1 int, 
				@PR_Key1 int, @DL_KeyPrev1 int, @TU_Hotels1 varchar(255), @TU_Hotels1_Lat varchar(255), @DG_Key int, @DG_KeyPrev int
		DECLARE curServiceList CURSOR FOR 
			--SELECT DISTINCT HD_Name, HD_Stars, P.PR_Name, DogList.DL_Key, HD_Key, PR_Key--, DG_Key
			--FROM HotelDictionary, DogovorList DogList, TuristService, Partners P
			--WHERE P.PR_Key = DogList.DL_PartnerKey and HD_Key = DogList.DL_Code and TU_DLKey = DogList.DL_Key and
			--TU_TUKey in (SELECT TU_TUKEY FROM TuristService WHERE TU_DLKEY in (SELECT DL_KEY FROM #Result)) 
			--and DL_SVKey=3 
			--ORDER BY DogList.DL_Key
			SELECT DISTINCT HD_Name, HD_NameLat, HD_Stars, HD_Key, P.PR_Name, PR_NAMEENG, P.PR_Key, DogList.DL_Key, R.DG_Key
			FROM HotelDictionary, DogovorList DogList, Partners P, #Result R
			WHERE P.PR_Key = DogList.DL_PartnerKey and HD_Key = DogList.DL_Code and DogList.DL_DGKey = R.DG_Key			
				  and DogList.DL_SVKey=3 
			ORDER BY R.DG_Key
		OPEN curServiceList
		FETCH NEXT FROM curServiceList INTO @HD_Name1, @HD_Name1_lat, @HD_Stars1, @HD_Key1, @PR_Name1, @PR_Name1_Lat, @PR_Key1, @DL_Key1, @DG_Key
		WHILE @@FETCH_STATUS = 0
		BEGIN
			IF @DG_Key != @DG_KeyPrev or @DG_KeyPrev is null  
			BEGIN
			  Set @TU_Hotels1=@HD_Name1+' '+@HD_Stars1+' ('+@PR_Name1+')'
			  Set @TU_Hotels1_Lat=@HD_Name1_lat+' '+@HD_Stars1+' ('+@PR_Name1_Lat+')'
			END
			ELSE
			BEGIN
			  Set @TU_Hotels1=@TU_Hotels1+', '+@HD_Name1+' '+@HD_Stars1+' ('+@PR_Name1+')'
			  Set @TU_Hotels1=@TU_Hotels1_Lat+', '+@HD_Name1_lat+' '+@HD_Stars1+' ('+@PR_Name1_Lat+')'
			END
			UPDATE #Result SET TU_Hotels=@TU_Hotels1 WHERE DG_Key=@DG_Key --DL_Key=@DL_Key1
			UPDATE #Result SET TU_Hotels_Lat=@TU_Hotels1_Lat WHERE DG_Key=@DG_Key --DL_Key=@DL_Key1
			SET @DG_KeyPrev = @DG_Key
			FETCH NEXT FROM curServiceList INTO @HD_Name1, @HD_Name1_lat, @HD_Stars1, @HD_Key1, @PR_Name1, @PR_Name1_Lat, @PR_Key1, @DL_Key1, @DG_Key
		END
		CLOSE curServiceList
		DEALLOCATE curServiceList
	END
END
 
IF @ShowFligthDep=1 and @SVKey=1
BEGIN
	IF @TypeOfRelult = 2
	BEGIN
		Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList,TuristService Where TU_DLKey=DL_Key and DL_DGKey=#Result.DG_Key and DL_CTKey=#Result.DL_CTKeyFrom and DL_SubCode2=#Result.DL_CTKeyTo and TU_TUKey=#Result.TU_Key and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc)
		if exists (select 1 from #Result Where FlightDepDLKey is null)
			Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList,TuristService Where TU_DLKey=DL_Key and DL_DGKey=#Result.DG_Key and DL_CTKey=#Result.DL_CTKeyFrom and TU_TUKey=#Result.TU_Key and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc) where FlightDepDLKey is null
		--если по городу не нашли ишем по стране
		if exists (select 1 from #Result Where FlightDepDLKey is null)     
		begin
			update #Result set DL_CNKEYFROM = (select top 1 ct_cnkey from citydictionary where ct_key =#Result.DL_CTKEYFROM)
			Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList,TuristService Where TU_DLKey=DL_Key and DL_DGKey=#Result.DG_Key and DL_CNKey=#Result.DL_CNKeyFrom and TU_TUKey=#Result.TU_Key and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc)	where FlightDepDLKey is null	  
		end
	END
	ELSE
	BEGIN
		Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList Where DL_DGKey=#Result.DG_Key and DL_CTKey=#Result.DL_CTKeyFrom and DL_SubCode2=#Result.DL_CTKeyTo and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc)
		if exists (select 1 from #Result Where FlightDepDLKey is null)
			Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList Where DL_DGKey=#Result.DG_Key and DL_CTKey=#Result.DL_CTKeyFrom and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc) where FlightDepDLKey is null
		--если по городу не нашли ишем по стране
		if exists (select 1 from #Result Where FlightDepDLKey is null)     
		begin
			update #Result set DL_CNKEYFROM = (select top 1 ct_cnkey from citydictionary where ct_key =#Result.DL_CTKEYFROM)
			Update #Result SET FlightDepDLKey=(Select TOP 1 DL_Key From DogovorList,TuristService Where TU_DLKey=DL_Key and DL_DGKey=#Result.DG_Key and DL_CNKey=#Result.DL_CNKeyFrom and TU_TUKey=#Result.TU_Key and DL_DGKey=#Result.DG_Key and dl_svkey=1 order by dl_datebeg desc)	where FlightDepDLKey is null	  
		end
	END
	Update #Result set FligthDepDate = (select dl_dateBeg From DogovorList where DL_Key=#Result.FlightDepDLKey)
	Update #Result set FlightDepNumber = (select CH_AirLineCode + ' ' + CH_Flight From DogovorList, Charter where DL_Code=CH_Key and DL_Key=#Result.FlightDepDLKey)
END

IF @ShowDescription=1
BEGIN
	IF @SVKey=1
		Update #Result SET ServiceDescription=LEFT((SELECT ISNUll(AS_Code, '') + '-' + AS_NameRus FROM AirService WHERE AS_Key=DL_SubCode1),80),
		ServiceDescription_Lat=LEFT((SELECT ISNUll(AS_Code, '') + '-' + AS_NAMELAT FROM AirService WHERE AS_Key=DL_SubCode1),80)
	ELSE IF (@SVKey=2 or @SVKey=4)
		Update #Result SET ServiceDescription=LEFT((SELECT TR_Name FROM Transport WHERE TR_Key=DL_SubCode1),80),
							ServiceDescription_Lat=LEFT((SELECT TR_NAMELAT FROM Transport WHERE TR_Key=DL_SubCode1),80)
	ELSE IF (@SVKey=3 or @SVKey=8)
	BEGIN
		Update #Result SET ServiceDescription=LEFT((SELECT RM_Name + '(' + RC_Name + ')' + AC_Name FROM Rooms,RoomsCategory,AccMdMenType,HotelRooms WHERE HR_Key=DL_SubCode1 and HR_RMKey=RM_Key and HR_RCKey=RC_Key and HR_ACKey=AC_Key),80),
							ServiceDescription_Lat=LEFT((SELECT RM_NAMELAT + '(' + RC_NAMELAT + ')' + AC_NAMELAT FROM Rooms,RoomsCategory,AccMdMenType,HotelRooms WHERE HR_Key=DL_SubCode1 and HR_RMKey=RM_Key and HR_RCKey=RC_Key and HR_ACKey=AC_Key),80)
		IF @SVKey=8
			Update #Result SET ServiceDescription='All accommodations' where DL_SubCode1=0
	END
	ELSE IF (@SVKey=7 or @SVKey=9)
	BEGIN
		Update #Result SET ServiceDescription=LEFT((SELECT ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_Name,'') FROM Cabine WHERE CB_Key=DL_SubCode1),80),
							ServiceDescription=LEFT((SELECT ISNULL(CB_Code,'') + ',' + ISNULL(CB_Category,'') + ',' + ISNULL(CB_NAMELAT,'') FROM Cabine WHERE CB_Key=DL_SubCode1),80)
		IF @SVKey=9
			Update #Result SET ServiceDescription='All accommodations' where DL_SubCode1=0
	END
	ELSE
		Update #Result SET ServiceDescription=LEFT((SELECT A1_Name FROM AddDescript1 WHERE A1_Key=DL_SubCode1),80), 
							ServiceDescription_Lat=LEFT((SELECT A1_NAMELAT FROM AddDescript1 WHERE A1_Key=DL_SubCode1),80) WHERE ISNULL(DL_SubCode1,0)>0
END

--print @Query
SELECT * FROM #Result

GO
GRANT EXECUTE ON [dbo].[GetServiceList] TO Public
GO
/*********************************************************************/
/* end sp_GetServiceList.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetServiceListQuotaTypeTransfer.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetServiceListQuotaTypeTransfer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[GetServiceListQuotaTypeTransfer]
GO
CREATE PROCEDURE [dbo].[GetServiceListQuotaTypeTransfer] 
(
	--<DATA>12.03.2013</DATA>
	@serviceKey int = null,
	@countryKey int = null,
	@cityKey int = null,
	@partnerKey int = null,
	@dateTo datetime = null,
	@dateFrom datetime = null,
	@cityDepartureKey int = null,
	@flightFromKey int = null,  -- передается только у перелета
	@agentKey int = null
)
AS

--темповая таблица, содержит ключи путевок, которые уже пересаживались
create table #tmpHotelData (
dl_key int, existQuota int, busyPlaces int)

--темповая таблица, содержит ключи подобронных по приоритету квот
create table #quotaTransfer (
qp_id int, byRoom int)

create table #result(
DlKey int, QuotaExist int, busyPlaces int)

declare @quotapart int
declare @DLKey int
declare @defaultType int
declare @checkQuotesResult nvarchar(max)
declare @freePlaces int
declare @totalPlaces int
declare @quotapartService int
declare @serviceKey_2 int
declare @serviceCode int
declare @serviceSubCode1 int
declare @serviceDateBegin datetime
declare @serviceDateEnd datetime
declare @partnerKey_2 int
declare @agentKey_2 int
declare @tourDuration smallint
declare @quotaPlaces smallint
declare @pax smallint
declare @roomKey int
declare @notTransfer int
declare @dlkeycur int
declare @qp2 int
declare @firstQuotaParts nvarchar(max)
declare @byRoom int

declare @wasError as bit
declare @errorMessage as nvarchar(150)

begin 

	set @pax = null
	select @defaultType = SS_ParmValue from SystemSettings where SS_ParmName like 'SYS_COMMITMENT_FIRST'
	set @defaultType = @defaultType + 1

	set @dateTo = DATEADD(dd, 0, DATEDIFF(dd, 0, @dateTo)) 
	set @dateFrom = DATEADD(dd, 0, DATEDIFF(dd, 0, @dateFrom)) 
	
	DECLARE recalc CURSOR FOR 
		--коммитмент и allotment
		select qp1.QP_ID, qp1.QP_AgentKey,qo1.QO_Code,qo1.QO_SVKey,qo1.QO_SubCode1,qt1.QT_PRKey,qt1.QT_ByRoom
		from Quotas as qt1
		join QuotaObjects as qo1 on QO_QTID = QT_ID
		join QuotaDetails as qd1 on QD_QTID = QT_ID
		join QuotaParts as qp1 on QP_QDID = QD_ID
		join Quotas as qt2 on qt2.QT_ByRoom = qt1.QT_ByRoom and qt1.QT_PRKey=qt2.QT_PRKey
		join QuotaObjects as qo2 on qo2.QO_QTID = qt2.QT_ID and qo1.QO_Code=qo2.QO_Code
		join QuotaDetails as qd2 on qd2.QD_QTID = qt2.QT_ID
		join QuotaParts as qp2 on qp2.QP_QDID = qd2.QD_ID
		
		where qd1.QD_Busy > 0
		and (qd2.QD_Places - qd2.QD_Busy) > 0
		and qd1.QD_Date > dateadd(day, -1, GETDATE())
		and qd1.QD_Type<>qd2.QD_Type
		and qd1.QD_Date=qd2.QD_Date
		and qt1.QT_PRKey = qt2.QT_PRKey
		and qd2.QD_Type = @defaultType
		--если субкоды совпадают или второй субкод все
		and (qo1.QO_SubCode1 = qo2.QO_SubCode1 or qo2.QO_SubCode1 = 0 
				or (qo1.QO_SubCode1=0 
					and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RMKEY = qo2.QO_SubCode1)))
		and (qo1.QO_SubCode2 = qo2.QO_SubCode2 or qo2.QO_SubCode2 = 0
				or (qo1.QO_SubCode2=0 
					and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RCKEY = qo2.QO_SubCode2)))
		and (exists(select 1 from QuotaPriorities where QPR_Date=qd2.QD_Date and QPR_Type=qd2.QD_Type and QPR_Code=qo1.QO_Code)
		or not exists (select 1 from QuotaPriorities where QPR_Date=qd2.QD_Date and QPR_Code=qo1.QO_Code))
		
		and (qo2.QO_SVKey=@serviceKey or @serviceKey is null)    --- фильтр по классу услуги
		and (qo2.QO_CNKey = @countryKey or @countryKey is null)  --- фильтр по стране
		and (qo2.QO_CTKey = @cityKey or @cityKey is null or @cityKey=-1)        --- фильтр по городу
		and (qt2.QT_PRKey = @partnerKey or @partnerKey is null or @partnerKey=-1) --- фильтр по партнеру
		and (qd2.QD_Date between @dateFrom and @dateTo)          --- данная квота находится между указанными числами
		and (qo2.QO_SubCode2=@flightFromKey or @flightFromKey is null or @flightFromKey=-1 or qo2.QO_SVKey<>1 or @flightFromKey=0)   -- фильтр по городу вылета
		and (qp2.QP_AgentKey = @agentKey or @agentKey is null or @agentKey=-1)   --фильт по покупателю

		union
		--более частная квота свободна или выше по приоритету квота на зазд свободна
		(select qp1.QP_ID, qp1.QP_AgentKey,qo1.QO_Code,qo1.QO_SVKey,qo1.QO_SubCode1,qt1.QT_PRKey, qt1.QT_ByRoom
		from Quotas as qt1
		join QuotaObjects as qo1 on QO_QTID = QT_ID
		join QuotaDetails as qd1 on QD_QTID = QT_ID
		join QuotaParts as qp1 on QP_QDID = QD_ID
		where QD_Busy > 0
		and exists(select 1 from QuotaObjects as qo2 
					join Quotas as qt2 on qo2.QO_QTID = qt2.QT_ID
					join QuotaDetails as qd2 on qo2.QO_QTID = qd2.QD_QTID
					join QuotaParts as qp2 on qp2.QP_QDID = qd2.QD_ID
					where qo2.QO_SVKey=3 and qo2.QO_Code = qo1.QO_Code and qd1.QD_Date=qd2.QD_Date and qt1.QT_ByRoom=qt2.QT_ByRoom  
					and qt1.QT_PRKey=qt2.QT_PRKey
					and (((qo1.QO_SubCode1  = 0 and (qo2.QO_SubCode1 <> 0 and  exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RMKEY = qo2.QO_SubCode1)))
					or (qo1.QO_SubCode2  = 0 and (qo2.QO_SubCode2 <> 0 and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RCKEY = qo2.QO_SubCode2))))
					or (qt2.QT_IsByCheckIn=1 and qt1.QT_IsByCheckIn=0))
					and (qd2.QD_Places - qd2.QD_Busy) > 0 and qd2.QD_Type=qd1.QD_Type	
		and (qo2.QO_SVKey=@serviceKey or @serviceKey is null)    --- фильтр по классу услуги
		and (qo2.QO_CNKey = @countryKey or @countryKey is null)  --- фильтр по стране
		and (qo2.QO_CTKey = @cityKey or @cityKey is null or @cityKey=-1)        --- фильтр по городу
		and (qt2.QT_PRKey = @partnerKey or @partnerKey is null or @partnerKey=-1) --- фильтр по партнеру
		and (qd2.QD_Date between @dateFrom and @dateTo)          --- данная квота находится между указанными числами
		and (qo2.QO_SubCode2=@flightFromKey or @flightFromKey is null or @flightFromKey=-1 or qo2.QO_SVKey<>1 or @flightFromKey=0)   -- фильтр по городу вылета
		and (qp2.QP_AgentKey = @agentKey or @agentKey is null or @agentKey=-1)))   --фильт по покупателю
	
		
		OPEN recalc
		FETCH NEXT FROM recalc INTO @quotapart, @agentKey_2, @serviceCode, @serviceKey_2, @serviceSubCode1, @partnerKey_2, @byRoom
		WHILE @@FETCH_STATUS = 0
		BEGIN
			begin try

				insert into #quotaTransfer (qp_id, byRoom) values (@quotapart, @byRoom)
				
				--проверяем с нужными ли статусами услуги
				declare @orderStatus varchar (max)
				select @orderStatus = SS_ParmValue from SystemSettings where SS_ParmName = 'SYSStatusToQuotaTransfer'

				if @quotapart not in (select SD_QPID from ServiceByDate join #tmpHotelData on dl_key=SD_DLKey) -- эти путевки еще не рассматривались)
					begin
						
						if  (@orderStatus is not null and  @orderStatus<>'' and @orderStatus<>'null')
								select @DLKey=DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart 
																					and DG_SOR_CODE in (select * from ParseKeys(@orderStatus))
						else
						begin
							select @DLKey=DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart
						end
						
						if (@DLKey is not null)
						begin
							insert into #tmpHotelData (dl_key) 
							select distinct DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart
						end
						
					end
			end try
			begin catch
				print 'Произошла ошибка'
			end catch
			
		FETCH NEXT FROM recalc INTO @quotapart, @agentKey_2, @serviceCode, @serviceKey_2, @serviceSubCode1, @partnerKey_2, @byRoom
		END
		CLOSE recalc
		DEALLOCATE recalc

		--проверяем можем ли поставить эти услуги на квоты
		DECLARE servicePlaceExist CURSOR FOR 
		select DL_SUBCODE1,DL_KEY from  tbl_DogovorList where DL_KEY in (select DL_KEY from #tmpHotelData) and not exists (select 1 from ServiceByDate where SD_DLKey=DL_KEY and SD_State in (3,4))
		order by DL_CreateDate asc, DL_NMEN desc
		OPEN servicePlaceExist
		FETCH NEXT FROM servicePlaceExist INTO @roomKey, @dlkeycur
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		begin try

			select @serviceDateBegin=DL_DATEBEG, @serviceDateEnd=DL_DATEEND, @tourDuration=DL_NDAYS, @quotaPlaces=DL_NMEN from DogovorList where DL_Key=@dlkeycur

			select @serviceKey_2 = QO_SVKey, @serviceCode = QO_Code, @partnerKey_2 = QT_PRKey, @agentKey_2 = QP_AgentKey
			from Quotas as qt1
			join QuotaObjects as qo1 on QO_QTID = QT_ID
			join QuotaDetails as qd1 on QD_QTID = QT_ID
			join QuotaParts as qp1 on QP_QDID = QD_ID and QP_ID=@qp2

			--если эта квота за номер
			if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=1)
			begin
				select @quotaPlaces = COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur
			end

			exec mwCheckQuotaOneResult 
					0, @serviceKey_2, @serviceCode, @roomKey, 
					@serviceDateBegin, @serviceDateEnd, @partnerKey_2, 
					@agentKey_2, @tourDuration, @quotaPlaces, @quotaPlaces, @checkQuotesResult output, @freePlaces output, @totalPlaces output, @firstQuotaParts output
		
		--если эта квота за номер
		if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=1)
		begin
		print 1 
			--если количество уже севших и сейчас готовы на посадку больше 0, то данную путевку рассматриваем
			if (@freePlaces - (select COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur) - (select SUM(isnull(busyPlaces, 0)) from #tmpHotelData) >=0 )
			begin
				update #tmpHotelData set busyPlaces = (select COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur)
			end
		end
		
		--если эта квота за человека
		if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=0)
		begin
		print 2
			--если количество уже севших и сейчас готовы на посадку больше 0, то данную путевку рассматриваем
			if (@freePlaces - (select DL_NMEN from tbl_DogovorList where dl_key=@dlkeycur) - (select SUM(isnull(busyPlaces, 0)) from #tmpHotelData) >=0 )
			begin
				update #tmpHotelData set busyPlaces = (select DL_NMEN from tbl_DogovorList where dl_key=@dlkeycur) where dl_key=@dlkeycur
			end
		end

		--если сервис проверки квот вернул нам те же квоты которые не сидят в приоритете (значит там стоп или запрет)
		if exists (select * from ServiceByDate where SD_DLKey=@dlkeycur and SD_QPID in (select * from ParseKeys(@firstQuotaParts)) and SD_QPID in (select qp_id from #quotaTransfer))
		begin
			delete #tmpHotelData where dl_key=@dlkeycur
		end
		
		if (@checkQuotesResult='QuotaExist')
		begin
			update  #tmpHotelData set existQuota = 1 where dl_key=@dlkeycur
			--delete #tmpHotelData where dl_key=@dlkeycur
		end
		else if (@checkQuotesResult='StopSale')
		begin
			update  #tmpHotelData set existQuota = 2, busyPlaces=0 where dl_key=@dlkeycur
		end
		else if (@checkQuotesResult='Release')
		begin
			update  #tmpHotelData set existQuota = 3, busyPlaces=0 where dl_key=@dlkeycur
		end
		else if (@checkQuotesResult='NoPlaces')
		begin
			update  #tmpHotelData set existQuota = 4, busyPlaces=0 where dl_key=@dlkeycur
		end
		end try
		begin catch
			update  #tmpHotelData set existQuota = 5, busyPlaces=0 where dl_key=@dlkeycur
			insert into SystemLog (SL_Message,SL_Date) values(ERROR_MESSAGE(),GETDATE())
			print 'Произошла ошибка'
		end catch

		
		FETCH NEXT FROM servicePlaceExist INTO @roomKey,@dlkeycur
		END
		CLOSE servicePlaceExist
		DEALLOCATE servicePlaceExist
		
		--если наши услуги не попали в курсор проверки квот (значит они сидят на запросе или вне квоты)
		delete #tmpHotelData where existQuota is null
		
		--если нет значени в таблице то передаем 0
		if not exists (select dl_key from #tmpHotelData)
			insert into #tmpHotelData (dl_key) values (0)
		
		UPDATE #tmpHotelData SET existQuota = 0 where existQuota is null
		
		insert into #result select *  from #tmpHotelData where busyPlaces is not null
		
		select  DlKey,QuotaExist  from #result   -- возвращает ключи договоров у которых надо персадить услуги в более приоритетную квоту
		
		drop table #quotaTransfer
		drop table #tmpHotelData
		drop table #result
		
end

GO
grant exec on [dbo].[GetServiceListQuotaTypeTransfer] to public
go
/*********************************************************************/
/* end sp_GetServiceListQuotaTypeTransfer.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetServiceLoadListData.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[GetServiceLoadListData]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[GetServiceLoadListData]
GO

create procedure [dbo].[GetServiceLoadListData]
(
--<VERSION>2009.2.19</VERSION>
--<DATE>2013-05-06</DATE>
@SVKey int,
@Code int,
@PRKey int =null,-- @PRKEY=null все
@DateStart smalldatetime = null,
@DaysCount int,
@CityDepartureKey int = null,-- город вылета
@bShowByRoom     bit =null,  -- показывать информацию по номерам (по умолчанию по людям)
@bShowByPartner  bit =null,  -- информацию разделять по партнерам
@bShowState      bit =null,  -- показать статус бронирования (запрос, на квоте, Ok) 
@bShowCommonInfo bit =null  -- показывать общую информацию по загрузке услуги
)
as 
/*
insert into debug (db_date,db_n1,db_n2,db_n3) values (@DateStart,@DaysCount,@SVKey,89)
insert into debug (db_date,db_n1,db_n2,db_n3) values (@DateStart,@PRKey,@bShowByRoom,88)
insert into debug (db_date,db_n1,db_n2,db_n3) values (@DateStart,@bShowByPartner,@bShowState,87)
insert into debug (db_date,db_n1,db_n2,db_n3) values (@DateStart,@bShowCommonInfo,@Code,86)
*/
if @SVKey!=3
	Set @bShowByRoom=0

DECLARE @DateEnd smalldatetime
Set @DateEnd = DATEADD(DAY, @DaysCount-1, @DateStart)

CREATE TABLE #ServiceLoadList
(
SL_ID INT IDENTITY(1,1) NOT NULL, 
SL_ServiceName nvarchar(100), SL_State smallint,
SL_SubCode1 int, SL_SubCode2 int, SL_PRKey int
/*SL_DataType это мнимая колонка, есть только при выводе результата 
содержит тип информации для записей с итогами
(1 - общий итог, 2 - данные по услуге)
*/
)
DECLARE @n int, @nMax int, @str nvarchar(max),@SL_SubCode1 int, @SL_SubCode2 int, @s nvarchar(1), @ServiceName nvarchar(255), @ServiceName_1 nvarchar(255)
set @n=1 

WHILE @n <= @DaysCount
BEGIN
	set @str = 'ALTER TABLE #ServiceLoadList ADD SL_' + CAST(@n as nvarchar(3)) + ' nvarchar(20)'
	exec (@str)
	set @n = @n + 1
END

if @SVKey != 8
begin
	if @bShowByPartner =1 and @bShowState=1
	insert into #ServiceLoadList (SL_SubCode1, SL_PRKey, SL_State)
		select distinct DL_SubCode1, DL_PartnerKey, ISNULL(SD_State,0) from DogovorList, ServiceByDate, Dogovor
		where	SD_DLKey=DL_Key and DG_Key=DL_DGKey and DL_SVKey=@SVKey and DL_Code=@Code and SD_Date between @DateStart and @DateEnd and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
else if @bShowByPartner =0 and @bShowState=1
	insert into #ServiceLoadList (SL_SubCode1, SL_State)
		select distinct DL_SubCode1, ISNULL(SD_State,0) from DogovorList, ServiceByDate, Dogovor
		where	SD_DLKey=DL_Key and DG_Key=DL_DGKey and DL_SVKey=@SVKey and DL_Code=@Code and SD_Date between @DateStart and @DateEnd and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
else if @bShowByPartner =1 and @bShowState=0
	insert into #ServiceLoadList (SL_SubCode1, SL_PRKey)
		select distinct DL_SubCode1, DL_PartnerKey from DogovorList, Dogovor
		where	DL_SVKey=@SVKey and DG_Key=DL_DGKey and DL_Code=@Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd)) and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
else
	insert into #ServiceLoadList (SL_SubCode1)
		select distinct DL_SubCode1 from DogovorList, Dogovor
		where	DL_SVKey=@SVKey and DG_Key=DL_DGKey and DL_Code=@Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd)) and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
end if @SVKey = 8
begin 
	if @bShowByPartner =1 and @bShowState=1
		insert into #ServiceLoadList (SL_SubCode1, SL_SubCode2, SL_PRKey, SL_State)
			select distinct DL_SubCode1, DL_SubCode2, DL_PartnerKey, ISNULL(SD_State,0) from DogovorList, ServiceByDate, Dogovor
			where	SD_DLKey=DL_Key and DG_Key=DL_DGKey and DL_SVKey=@SVKey and DL_Code=@Code and SD_Date between @DateStart and @DateEnd and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
	else if @bShowByPartner =0 and @bShowState=1
		insert into #ServiceLoadList (SL_SubCode1, SL_SubCode2, SL_State)
			select distinct DL_SubCode1, DL_SubCode2, ISNULL(SD_State,0) from DogovorList, ServiceByDate, Dogovor
			where	SD_DLKey=DL_Key and DG_Key=DL_DGKey and DL_SVKey=@SVKey and DL_Code=@Code and SD_Date between @DateStart and @DateEnd and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
	else if @bShowByPartner =1 and @bShowState=0
		insert into #ServiceLoadList (SL_SubCode1, SL_SubCode2, SL_PRKey)
			select distinct DL_SubCode1, DL_SubCode2, DL_PartnerKey from DogovorList, Dogovor
			where	DL_SVKey=@SVKey and DG_Key=DL_DGKey and DL_Code=@Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd)) and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
	else
		insert into #ServiceLoadList (SL_SubCode1, SL_SubCode2)
			select distinct DL_SubCode1, DL_SubCode2 from DogovorList, Dogovor
			where	DL_SVKey=@SVKey and DG_Key=DL_DGKey and DL_Code=@Code and ((DL_DateBeg between @DateStart and @DateEnd) or (DL_DateEnd between @DateStart and @DateEnd)) and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
end
 
while exists(select SL_SubCode1 from #ServiceLoadList where SL_ServiceName is null)
BEGIN
	if @SVKey != 8
	begin
		select @SL_SubCode1=SL_SubCode1 from #ServiceLoadList where SL_ServiceName is null
		exec GetSvCode1Name @SVKey,@SL_SubCode1,@s output,@ServiceName output,@s output,@s output
		UPDATE #ServiceLoadList SET SL_ServiceName = COALESCE(@ServiceName, '') where SL_SubCode1=@SL_SubCode1
	end if @SVKey = 8
	begin
		select @SL_SubCode1=SL_SubCode1, @SL_SubCode2=SL_SubCode2 from #ServiceLoadList where SL_ServiceName is null
		exec GetSvCode1Name @SVKey,@SL_SubCode1,@s output,@ServiceName output,@s output,@s output
		exec dbo.GetSvCode2Name @SVKey, @SL_SubCode2, @ServiceName_1 output, @s output
		UPDATE #ServiceLoadList SET SL_ServiceName = COALESCE(@ServiceName, '') + N',' + COALESCE(@ServiceName_1, '') where SL_SubCode1=@SL_SubCode1 and SL_SubCode2=@SL_SubCode2
	end 
END

If @bShowByRoom=1
begin

	DECLARE curSLoadList CURSOR FOR SELECT
		'UPDATE #ServiceLoadList SET SL_' + CAST(CAST(SD_Date-@DateStart+1 as int) as nvarchar(5)) + '= ISNULL(SL_' + CAST(CAST(SD_Date-@DateStart+1 as int) as nvarchar(5)) + ',0)+' + CAST(Count(Distinct SD_RLID) as nvarchar(5)) + ' WHERE SL_SubCode1=' + CAST(DL_SubCode1 as nvarchar(10)) + CASE WHEN @bShowByPartner=1 THEN ' AND SL_PRKey=' + CAST(DL_PartnerKey as nvarchar(10)) ELSE '' END + CASE WHEN @bShowState=1 THEN ' AND SL_State=' + CAST(ISNULL(SD_STATE,0) as nvarchar(10)) ELSE '' END
		from	DogovorList,ServiceByDate, Dogovor 
		where	SD_DLKey=DL_Key and DG_Key=DL_DGKey
				and DL_SVKey=@SVKey and DL_Code=@Code 
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State
end
Else
begin

	DECLARE curSLoadList CURSOR FOR SELECT
		'UPDATE #ServiceLoadList SET SL_' + CAST(CAST(SD_Date-@DateStart+1 as int) as nvarchar(5)) + '= ISNULL(SL_' + CAST(CAST(SD_Date-@DateStart+1 as int) as nvarchar(5)) + ',0)+' + CAST(Count(SD_ID) as nvarchar(5)) + ' WHERE SL_SubCode1=' + CAST(DL_SubCode1 as nvarchar(10)) + CASE WHEN @SVKey=8 THEN 'AND SL_SubCode2=' + CAST(DL_SUBCODE2 as nvarchar(10)) ELSE '' END + CASE WHEN @bShowByPartner=1 THEN ' AND SL_PRKey=' + CAST(DL_PartnerKey as nvarchar(10)) ELSE '' END + CASE WHEN @bShowState=1 THEN ' AND SL_State=' + CAST(ISNULL(SD_STATE,0) as nvarchar(10)) ELSE '' END
		from	DogovorList,ServiceByDate, Dogovor 
		where	SD_DLKey=DL_Key and DG_Key=DL_DGKey
				and DL_SVKey=@SVKey and DL_Code=@Code
				and DL_DateBeg<=@DateEnd and DL_DateEnd>=@DateStart
				and ((DL_PartnerKey=@PRKEY) or (@PRKEY is null)) 
				and ((DG_CTDepartureKey=@CityDepartureKey) or (@CityDepartureKey is null))
				and SD_Date<=@DateEnd and SD_Date>=@DateStart
		group by SD_Date,DL_SubCode1,DL_PartnerKey,SD_State, DL_SVKey, DL_SUBCODE2
end
		

OPEN curSLoadList
FETCH NEXT FROM curSLoadList INTO	@str
WHILE @@FETCH_STATUS = 0
BEGIN
	--print @DateStart
	--print @str
	exec (@str)
	FETCH NEXT FROM curSLoadList INTO	@str
END
CLOSE curSLoadList
DEALLOCATE curSLoadList

Set @str = ''
set @n=1
set @str = @str + 'SELECT SL_ServiceName, SL_State, SL_SubCode1, ' + CASE WHEN @SVKey=8 THEN 'SL_SubCode2, ' ELSE '' END + ' SL_PRKey '
WHILE @n <= @DaysCount
BEGIN
	--print @str
	set @str = @str + ', SL_' + CAST(@n as nvarchar(3)) 
	set @n = @n + 1
END
/*
Set @str = @str + ' from #QuotaLoadList, Numbers where NU_ID between 1 and 3
and QL_IsQD=0
order by QL_Type,QL_Release,QL_Durations,QL_CityDepartments,QL_FilialKey,QL_CustomerInfo,NU_ID'
*/
Set @str = @str + ' from #ServiceLoadList order by SL_ServiceName, SL_SubCode1, ' + CASE WHEN @SVKey=8 THEN 'SL_SubCode2,' ELSE '' END + ' SL_PRKey, SL_State'

exec (@str)
GO

grant execute on [dbo].[GetServiceLoadListData] to public
GO
/*********************************************************************/
/* end sp_GetServiceLoadListData.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_GetSvCode1Name.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[GetSvCode1Name]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP procedure [dbo].[GetSvCode1Name]
GO
CREATE PROCEDURE [dbo].[GetSvCode1Name]
(
--<VERSION>2009.2.18.0</VERSION>
--<DATA>07.05.2013</DATA>
	@nSvKey INT,
	@nCode1 INT,
	@sTitle VARCHAR(800) OUTPUT,
	@sName VARCHAR(800) OUTPUT,
	@sTitleLat VARCHAR(800) OUTPUT,
	@sNameLat VARCHAR(800) OUTPUT,
	@bIsQuote bit = null
) AS
DECLARE 
	@nRoom INT,
	@nCategory INT,
	@sNameCategory VARCHAR(800),
	@sNameCategoryLat VARCHAR(800),
	@nHrMain INT,
	@nAgeFrom INT,
	@nAgeTo INT,
	@sAcCode VARCHAR(800),
	@sAcCodeLat VARCHAR(800),
	@sTmp VARCHAR(800),
	@bTmp INT,

	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
		
	Set @sName = ''

	IF @nSvKey = @TYPE_FLIGHT
	BEGIN
		SET @sTitle = 'Тариф'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Tariff'
		SET @sNameLat = 'Any'

		IF EXISTS(SELECT * FROM dbo.AirService WHERE AS_Key = @nCode1) and (@nCode1 <> -1)
			SELECT	@sName = IsNull(AS_Code, '') + '-' + AS_NameRus,
				@sNameLat = IsNull(AS_Code, '') + '-' + IsNull(AS_NameLat, AS_NameRus)
			FROM 	dbo.AirService 
			WHERE	AS_Key = @nCode1
	END
	ELSE
	IF (@nSvKey = @TYPE_TRANSFER) or (@nSvKey = @TYPE_EXCUR)
	BEGIN
		SET @sTitle = 'Транспорт'
		SET @sName = 'Любой'
		SET @sTitleLat = 'Transport'
		SET @sNameLat = 'Any'
		
		IF EXISTS(SELECT * FROM dbo.Transport WHERE TR_Key = @nCode1)
			SELECT 	@sName = TR_Name + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5)),
				@sNameLat = IsNull(TR_NameLat, TR_Name) + ',' + CAST(IsNull(TR_NMen, 0) AS varchar(5))
			FROM 	dbo.Transport 
			WHERE 	TR_Key = @nCode1		
	END
	ELSE
	IF (@nSvKey = @TYPE_HOTELADDSRV or @nSvKey = @TYPE_HOTEL)
	BEGIN
		IF @nCode1 = 0
			IF ISNULL(@bIsQuote,0) = 1
			BEGIN
				SET @sTitle = 'Тип номера'
				SET @sName = 'Все типы номеров'
				SET @sTitleLat = 'Room type'
				SET @sNameLat = 'All room types'
			END
			ELSE
			BEGIN
				SET @sTitle = 'Размещение'
				SET @sName = 'Все размещения'
				SET @sTitleLat = 'Accommodation'
				SET @sNameLat = 'All accommodations'
			END
		ELSE	
			IF ISNULL(@bIsQuote,0) = 1
			BEGIN
				EXEC GetRoomName @nCode1, @sName output, @sNameLat output

				Set @sTitle = 'Тип номера'
				Set @sTitleLat = 'Room type'
			END
			ELSE
			BEGIN
				EXEC GetRoomKey @nCode1, @nRoom output
				EXEC GetRoomCategoryKey @nCode1, @nCategory output
				EXEC GetRoomName @nRoom, @sName output, @sNameLat output
				EXEC GetRoomCtgrName @nCategory, @sNameCategory output, @sNameCategoryLat output

				Set @sName = @sName + '(' + @sNameCategory + ')'
				Set @sNameLat = @sNameLat + '(' + @sNameCategoryLat + ')'
				Set @sTitle = 'Размещение'
				Set @sTitleLat = 'Accommodation'
			END
			
			if isnull((select SS_ParmValue from SystemSettings where SS_ParmName = 'CartAccmdMenTypeView'), 0) = 0
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Name, ''),  @sAcCodeLat = IsNull(AC_NameLat, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)				
			end
			else
			begin
				SELECT @nHrMain = IsNull(HR_Main, 0), @nAgeFrom = IsNull(HR_AgeFrom, 0), @nAgeTo = IsNull(HR_AgeTo, 0), @sAcCode = IsNull(AC_Code, '') FROM dbo.HotelRooms, dbo.AccmdMenType WHERE (HR_Key = @nCode1) AND (HR_AcKey = AC_Key)
			end
	END
	ELSE
	if (@nSvKey = @TYPE_SHIPADDSRV or @nSvKey = @TYPE_SHIP)
	BEGIN
		IF @nCode1 = 0
		BEGIN
			Set @sTitle = 'Каюта'
			Set @sName = 'Все каюты'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'All cabins'
		END
		ELSE
		BEGIN
			SET @sTitle = 'Каюта'
			SET @sName = 'Любая'
			SET @sTitleLat = 'Cabin'
			SET @sNameLat = 'Any'

			IF EXISTS( SELECT * FROM dbo.Cabine WHERE CB_Key = @nCode1 )
				SELECT	@sName = CB_Code + ',' + CB_Category + ',' + CB_Name,
					@sNameLat = CB_Code + ',' + CB_Category + ',' + ISNULL(CB_NameLat,CB_Name)
				FROM dbo.Cabine 
				WHERE CB_Key = @nCode1
		END
	END
	ELSE
	BEGIN
		Set @sTmp = 'CODE1'
		EXEC dbo.GetSvListParm @nSvKey, @sTmp, @bTmp output
	
		IF @bTmp > 0
		BEGIN
			SET @sTitle = 'Доп.описание'
			SET @sName = 'Любое'
			SET @sTitleLat = 'Add.description'
			SET @sNameLat = 'Any'
			
			IF EXISTS( SELECT * FROM dbo.AddDescript1 WHERE A1_Key = @nCode1 )
				SELECT	@sName = A1_Name + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END), 
					@sNameLat = ISNULL(A1_NameLat,A1_Name) + 
						(CASE 
							WHEN ( LEN(IsNull(A1_Code, '')) > 0 ) THEN (','+ A1_Code) 
							ELSE ('') 
						END)
				FROM dbo.AddDescript1 
				WHERE A1_Key = @nCode1
		END
		ELSE
		BEGIN
			SET @sTitle = ''
			SET @sTitleLat = ''
		END
	END


	IF @nCode1 > 0 and ((@nSvKey = @TYPE_HOTEL) or (@nSvKey = @TYPE_HOTELADDSRV))
	BEGIN
		if @sAcCode is not null
			begin
				Set @sName = @sName + ',' + isnull(@sAcCode, '')
			end
		if @sAcCodeLat is not null
			begin
                Set @sNameLat = @sNameLat + ',' + isnull(@sAcCodeLat, '')  
             end
                       

		SET @sTmp = isnull(CAST(@nAgeFrom as varchar(5)), '0') + '-' + isnull(cast(@nAgeTo as varchar(5)), '')
		-- Task 10655 09.01.2013 kolbeshkin: исправил задвоение размещения, если оно не основное
		If @nHrMain <= 0 and charindex(isnull(@sAcCode, ''), @sName) = 0
		begin				
			  Set @sName = @sName + ',' + isnull(@sAcCode, '')
              Set @sNameLat = @sNameLat + ',' + isnull(@sAcCodeLat, '')
                      
		END
		ELSE
			-- Task 8610 05.10.2012 kolbeshkin: если возраст уже есть в названии размещения, то второй раз не добавляем
			IF ((@nAgeFrom > 0) or (@nAgeTo > 0)) and charindex('(' + @sTmp + ')', @sName) = 0
			BEGIN
				print @sTmp
				SET @sName =  @sName + ' (' + @sTmp + ')'
				SET @sNameLat = @sNameLat + ' (' + @sTmp + ')'				
			END
	END
GO
GRANT EXECUTE ON [dbo].[GetSvCode1Name] TO PUBLIC
GO
/*********************************************************************/
/* end sp_GetSvCode1Name.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_MarginMonitor_PriceFilter.sql */
/*********************************************************************/
SET QUOTED_IDENTIFIER ON
GO

--реализация основных фильтров Маржинального монитора
--<version>2009.18.1</version>
--<data>2013-04-01</data>
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MarginMonitor_PriceFilter]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MarginMonitor_PriceFilter]
GO
CREATE PROCEDURE [dbo].[MarginMonitor_PriceFilter]
(
	@tourDates                    XML ([dbo].[ArrayOfDateTime]),      -- даты туров
	@hotelKeys                    XML ([dbo].[ArrayOfInt]),			  -- ключи отелей
	@roomCategoryKeys             XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи категорий комнат
	@pansionKeys                  XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи питаний
	@longList                     XML ([dbo].[ArrayOfInt]) = NULL,	  -- продолжительности
	@countryKey                   INT,                                -- страна
	@departCityKey                INT = NULL,                         -- город вылета
	@targetFlyCityKey             INT,                                -- город прилета
	@targetCitiesKeys             XML ([dbo].[ArrayOfInt]),           -- список городов проживания
	@priceMin                     MONEY = NULL,                       -- минимальная стоимость тура
	@priceMax                     MONEY = NULL,                       -- максимальная стоимость тура
	@isDeletedPriceOnly           BIT   = NULL,                       -- только снятые цены
	@isMinPrice                   BIT   = NULL,                       -- по минимальным ценам
	@isOnlineOnly                 BIT   = NULL,                       -- только выставленные в интернет туры
	@isModifyPriceOnly            BIT   = NULL,                       -- только измененные цены
	@isAllotment                  BIT   = NULL,                       -- для отелей по квотам элотмент
	@isCommitment                 BIT   = NULL,                       -- для отелей по квотам коммитмент
	@accmdDefaultKey              INT   = NULL,                       -- тип размещения по умолчанию
	@roomTypeDefaultKey           INT   = NULL,                       -- тип комнаты по умолчанию
	@isOnlyActualTourDates        BIT   = 1,                          -- 1-отбор по датам не ниже текущей    0-отбор по всем переданным датам
	@isAccommodationWithAdult     BIT   = 1,                          -- только размещения без доп. мест
	@isWholeHotel                 BIT   = 1,                          -- 1 - поиск по всему отелю, 0 - по категориям номеров
	@priceKeys                    XML ([dbo].[ArrayOfLong]) = NULL	  -- ключи уже отобранных цен (для работы кнопки "Применить фильтр к отобранным турам")
) AS BEGIN

SET ARITHABORT ON;
SET DATEFIRST 1;
SET NOCOUNT ON;

DECLARE @beginTime DATETIME, @debug varchar(255)

CREATE TABLE #tourDatesTable (tourDate DATETIME)
INSERT INTO #tourDatesTable (tourDate)
SELECT tbl.res.value('.', 'datetime')
FROM @tourDates.nodes('/ArrayOfDateTime/dateTime') AS tbl(res)
CREATE INDEX IX_tourDatesTable
ON #tourDatesTable(tourDate)

IF @isOnlyActualTourDates = 1
BEGIN
	DELETE #tourDatesTable
	WHERE tourDate < CONVERT(datetime, dateadd(day, -1, GETDATE()))
END

CREATE TABLE #targetCitiesKeysTable(cityKey INT)
INSERT INTO #targetCitiesKeysTable (cityKey)
SELECT tbl.res.value('.', 'int')
FROM @targetCitiesKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_targetCitiesKeysTable
ON #targetCitiesKeysTable(cityKey)

CREATE TABLE #hotelKeysTable (hotelKey INT)
INSERT INTO #hotelKeysTable (hotelKey)
SELECT tbl.res.value('.', 'int')
FROM @hotelKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_hotelKeysTable
ON #hotelKeysTable(hotelKey)

create table #tourKeysTable (tourKey int)
insert into #tourKeysTable (tourKey)
select distinct TI_TOKey 
from TP_Lists with(nolock) 
where ti_firsthdkey in (select hotelKey from #hotelKeysTable)
CREATE INDEX IX_tourKeysTable
ON #tourKeysTable(tourKey)

CREATE TABLE #roomCategoryKeysTable (rcKey INT)
INSERT INTO #roomCategoryKeysTable (rcKey)
SELECT tbl.res.value('.', 'int')
FROM @roomCategoryKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_roomCategoryKeysTable
ON #roomCategoryKeysTable(rcKey)

CREATE TABLE #pansionKeysTable(pansionKey INT)
INSERT INTO #pansionKeysTable(pansionKey)
SELECT tbl.res.value('.', 'int')
FROM @pansionKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_pansionKeysTable
ON #pansionKeysTable(pansionKey)

CREATE TABLE #longListTable (longValue SMALLINT)
INSERT INTO #longListTable (longValue)
SELECT tbl.res.value('.', 'int')
FROM @longList.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_longListTable
ON #longListTable(longValue)

CREATE TABLE #priceKeysTable  (priceKey BIGINT)
INSERT INTO #priceKeysTable(priceKey)
SELECT tbl.res.value('.', 'bigint')
FROM @priceKeys.nodes('/ArrayOfLong/long') AS tbl(res)
CREATE INDEX IX_priceKeysTable
ON #priceKeysTable(priceKey)

SELECT AC_KEY 
into #AccomType
FROM Accmdmentype WHERE (ISNULL(AC_NADMAIN, 0) > 0) AND (ISNULL(AC_NCHMAIN, 0) = 0) AND (ISNULL(AC_NCHISINFMAIN, 0) = 0)
CREATE INDEX IX_AccomType
ON #AccomType(AC_KEY)

-- прямые и обратные перелеты
CREATE TABLE #chartersTable 
(
	xCityFrom INT,
	xCityTo INT,
	xCH_Key BIGINT,
	xCharterDate DATETIME,
	xTS_PKKey BIGINT,
	xTS_SubCode1 BIGINT,
	xBusyPlaces INT,
	xTotalPlaces INT
)

-- выборка прямых и обратных перелетов
SET @beginTime = GETDATE()

INSERT INTO #chartersTable(xCityFrom, xCityTo, xCH_Key, xCharterDate, xTS_PKKey, xTS_SubCode1)
select distinct TF_SubCode2, TF_CTKey, TF_CodeNew, TF_Date, TF_PKKey, TF_SubCode1New
from TP_Flights with(nolock)
where TF_TourDate in (SELECT tourDate FROM #tourDatesTable)
and ((TF_Date = TF_TourDate and TF_CTKey = @targetFlyCityKey and TF_SubCode2 = @departCityKey) or (TF_Date <> TF_TourDate and TF_CTKey = @departCityKey and TF_SubCode2 = @targetFlyCityKey))
and TF_SubCode1New is not null
and TF_CodeNew is not null

--SELECT DISTINCT
--	TS_SubCode2, TS_CTKey, TS_Code,
--	case TS_Day when 1 then TD_Date else TD_Date + TI_Days - 1 end,
--	TS_OpPacketKey, TS_SubCode1
--FROM TP_Lists WITH(NOLOCK)
--JOIN TP_TurDates WITH(NOLOCK) ON TI_TOKey = TD_TOKey
--JOIN TP_Services WITH(NOLOCK) ON TS_TOKey = TI_TOKey AND TS_SVKey = 1
--WHERE
--	(TD_Date IN (SELECT tourDate FROM @tourDatesTable)) AND
--	(((TS_Day = 1) AND (TS_CTKey = @targetFlyCityKey) AND (TS_SubCode2 = @departCityKey)) OR
--	 ((TS_Day = TI_Days) AND (TS_CTKey = @departCityKey) AND (TS_SubCode2 = @targetFlyCityKey))
--	)

PRINT 'грузим прямые перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'грузим прямые перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SET @beginTime = GETDATE()

-- дополнительные перелеты
CREATE TABLE #addChartersTable 
(
	xCH_Key BIGINT,
	xAddChKey BIGINT,
	xCharterDate DATETIME,
	xTS_SubCode1 BIGINT,
	xTS_PKKey BIGINT,
	xAddFlight VARCHAR(4),
	xAddAirlineCode VARCHAR(3),
	xOrder INT DEFAULT 1,
	xAS_Week VARCHAR(7),
	xAS_TimeFrom DATETIME
)

CREATE INDEX IX_addChartersTable
ON #addChartersTable(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey,xAS_Week)
INCLUDE (xAddFlight,xAddAirlineCode,xOrder);

INSERT INTO #addChartersTable(xCH_Key, xAddChKey, xCharterDate, xTS_SubCode1, xTS_PKKey, xAddFlight, xAddAirlineCode, xAS_Week, xAS_TimeFrom)
SELECT DISTINCT ct.xCH_Key, CH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey, CH_FLIGHT, CH_AIRLINECODE, AS_WEEK, AS_TimeFrom
FROM AirSeason WITH(NOLOCK), Charter WITH(NOLOCK), Costs WITH(NOLOCK), #chartersTable ct
WHERE
	CH_CityKeyFrom = ct.xCityFrom AND
	CH_CityKeyTo = ct.xCityTo AND
	CS_Code = CH_Key AND
	AS_CHKey = CH_Key AND
	CS_SVKey = 1 AND
	(ISNULL((SELECT TOP 1 AS_GROUP FROM AIRSERVICE WITH(NOLOCK) WHERE AS_KEY = CS_SubCode1), '')
	 =
	 ISNULL((SELECT TOP 1 AS_GROUP FROM AIRSERVICE WITH(NOLOCK) WHERE AS_KEY = ct.xTS_SubCode1), '')
	) AND
	CS_PKKey = xTS_PKKey AND
	ct.xCharterDate BETWEEN AS_DateFrom AND AS_DateTo AND
	ct.xCharterDate BETWEEN CS_Date AND CS_DateEnd AND
	AS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, ct.xCharterDate)AS VARCHAR(1))+'%' AND
	(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, ct.xCharterDate) AS VARCHAR(1))+'%')

-- чтобы рейс, с которым был рассчитан тур, был первым
UPDATE #addChartersTable SET xOrder = 0 WHERE xCH_Key = xAddChKey

CREATE TABLE #addChartersTableString 
(
	xCH_Key bigint,                 -- исходный перелет
	xAddChKeyString nvarchar(max),  -- список доп. перелетов через запятую (включая исходный)
	xCharterDate datetime,
	xTS_SubCode1 bigint,
	xTS_PKKey bigint,
	xAS_Week varchar(7),
	xAS_TimeFrom nvarchar(max)
)

CREATE INDEX IX_addChartersTableString
ON #addChartersTableString(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey)
INCLUDE (xAddChKeyString, xAS_Week, xAS_TimeFrom);

-- все доп. перелеты соединяем через запятую в одну строку
insert into #addChartersTableString(xCH_Key, xCharterDate, xTS_SubCode1, xTS_PKKey, xAS_Week, xAddChKeyString, xAS_TimeFrom)
select distinct t1.xCH_Key, t1.xCharterDate, t1.xTS_SubCode1, t1.xTS_PKKey,
	-- xAS_Week
	(select top 1 xAS_Week
	from #addChartersTable t2
	where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
	order by len(xAS_Week) - len(replace(xAS_Week, '.', '')) desc),
 	-- xAddAirlineCode + xAddFlight
	(select xAddAirlineCode + xAddFlight + ', '
    from #addChartersTable t2
    where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
    order by xOrder asc, xAddAirlineCode + xAddFlight asc
    for xml path('')),
    -- xAS_TimeFrom
    (select SUBSTRING(CONVERT(VARCHAR(8), xAS_TimeFrom, 108),0,6) + ', '
    from #addChartersTable t2
    where (t2.xCH_Key = t1.xCH_Key) and (t2.xCharterDate = t1.xCharterDate) and (t2.xTS_SubCode1 = t1.xTS_SubCode1) and (t2.xTS_PKKey = t1.xTS_PKKey)
    order by xOrder asc, xAddAirlineCode + xAddFlight asc
    for xml path(''))
from #addChartersTable t1

-- избавляемся от хвостовых запятых
update #addChartersTableString
set xAddChKeyString = LEFT(xAddChKeyString, LEN(xAddChKeyString) - 1),
    xAS_TimeFrom = LEFT(xAS_TimeFrom, LEN(xAS_TimeFrom) - 1)

UPDATE #chartersTable
SET xTotalPlaces = q.TotalPlaces, xBusyPlaces = q.BusyPlaces
FROM
   (SELECT ct.xCH_Key AS CH_Key, ct.xCharterDate AS CharterDate, SUM(QP_Places) AS TotalPlaces, SUM(QP_Busy) AS BusyPlaces
	FROM #chartersTable ct, QuotaDetails
	JOIN QuotaParts WITH(NOLOCK) ON QP_QDID = QD_ID
	JOIN QuotaObjects WITH(NOLOCK) ON QO_QTID = QD_QTID
	WHERE
		(QO_SVKey = 1) AND
		(QO_SubCode1 = ct.xTS_SubCode1) AND
		(QD_Date = ct.xCharterDate) AND
		(ISNULL(QP_IsDeleted,0) = 0) AND
		(ISNULL(QP_AgentKey,0) = 0) AND
		 QO_Code IN (SELECT act.xAddChKey FROM #addChartersTable act
					 WHERE (act.xCharterDate = ct.xCharterDate) AND
						   (act.xCH_Key = ct.xCH_Key) AND
						   (act.xTS_PKKey = ct.xTS_PKKey) AND
						   (act.xTS_SubCode1 = ct.xTS_SubCode1))
	GROUP BY ct.xCH_Key, ct.xCharterDate) AS q
WHERE xCH_Key = q.CH_Key AND xCharterDate = CharterDate

PRINT 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

--SELECT * from @chartersTable
--SELECT * from @addChartersTable
--SELECT * from @addChartersTableString

CREATE TABLE #tmpPriceTable 
(
	xTP_Key INT,
	xTP_TOKey INT,
	xTP_DateBegin DATETIME,
	xTP_Gross MONEY,
	xTP_TIKey INT,
	xCH_Key INT,
	xCH_TSOpPacketKey INT,
	xCH_TSSubCode1 INT
)

CREATE INDEX IX_tmpPriceTable
ON #tmpPriceTable(xTP_TOKey, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
INCLUDE (xTP_Key, xTP_DateBegin, xTP_Gross);

-- только снятые цены
IF (ISNULL(@isDeletedPriceOnly, 0) = 0) BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTP_Gross, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
	SELECT TP_Key, TP_TOKey, TP_DateBegin, TP_Gross, TP_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1
	FROM TP_Prices WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TP_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	WHERE
		(TP_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		 -- отсев по продолжительностям
		(@longList IS NULL OR TI_DAYS IN (SELECT longValue FROM #longListTable))
		and TI_TOKey in (select tourKey from #tourKeysTable)
		and TP_TOKey in (select tourKey from #tourKeysTable)
END


IF ISNULL(@isOnlineOnly,0) = 0 BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTP_Gross, xTP_TIKey, xCH_Key, xCH_TSOpPacketKey, xCH_TSSubCode1)
	SELECT TPD_TPKey, TPD_TOKey, TPD_DateBegin, null, TPD_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1
	FROM TP_PricesDeleted WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TPD_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	WHERE
		(TPD_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		 -- отсев по продолжительностям
		(@longList IS NULL OR TI_DAYS IN (SELECT longValue FROM #longListTable))
		and TPD_TOKey in (select tourKey from #tourKeysTable)
END


CREATE TABLE #prices 
(
	TourOldPrice                MONEY,
	TR_Key                      INT,
	TP_Key                      INT,
	IsOnline                    BIT,
	TourName                    NVARCHAR(MAX),
	TourDate                    DATETIME,
	TourDays                    SMALLINT,
	HotelDays                   SMALLINT,
	AccommodationKey            INT,
	AccommodationName           NVARCHAR(MAX),
	RoomKey                     INT,
	HotelCityName               NVARCHAR(MAX),
	HotelKey                    INT,
	HotelName                   NVARCHAR(MAX),
	HotelRoomKey                INT,
	RoomName                    NVARCHAR(MAX),
	RoomCategoryKey             INT,
	RoomCategoryName            NVARCHAR(MAX),
	PansionKey                  INT,
	PansionName                 NVARCHAR(MAX),
	PansionCode                 VARCHAR(100),
	PartnerKey                  INT,
	Mens                        SMALLINT,
	Airport                     VARCHAR(100),
	Charters                    NVARCHAR(MAX),
	FlightDays                  VARCHAR(7),
	FlightTime                  NVARCHAR(MAX),
	CharterBusyPlaces           INT,
	CharterTotalPlaces          INT,
	CharterUnsolidBackPlaces    INT,
	AllotmentDaysCount          INT,
	CommitmentDaysCount         INT,
	HotelAllPlaces              INT,
	HotelBusyPlaces             INT,
	HotelCommitmentPlaces       INT,
	StopSale                    BIT
)

SET @beginTime = GETDATE()

INSERT INTO #prices
(
	TourOldPrice,
	TR_Key,
	TP_Key,
	IsOnline,
	TourName,
	TourDate,
	TourDays,
	HotelDays,
	AccommodationKey,
	AccommodationName,
	RoomKey,
	HotelCityName,
	HotelKey,
	HotelName,
	HotelRoomKey,
	RoomName,
	RoomCategoryKey,
	RoomCategoryName,
	PansionKey,
	PansionName,
	PansionCode,
	PartnerKey,
	Mens,
	Airport,
	Charters,
	FlightDays,
	FlightTime,
	CharterBusyPlaces,
	CharterTotalPlaces,
	CharterUnsolidBackPlaces,
	AllotmentDaysCount,
	CommitmentDaysCount,
	HotelAllPlaces,
	HotelBusyPlaces,
	HotelCommitmentPlaces,
	StopSale
)
SELECT DISTINCT
	pr.xTP_Gross AS TourOldPrice,
	TO_TRKey AS TR_Key,
	pr.xTP_Key AS TP_Key,
	TO_IsEnabled AS IsOnline,
	TO_Name AS TourName,
	pr.xTP_DateBegin AS TourDate,
	lst.TI_DAYS AS TourDays,
	hs.TS_Days AS HotelDays,
	hr.HR_ACKEY AS AccommodationKey,
	ac.AC_CODE AS AccommodationName,
	hr.HR_RMKEY AS RoomKey,
	ct.CT_NAME AS HotelCityName,
	lst.TI_FirstHDKey AS HotelKey,
	hd.HD_NAME AS HotelName,
	hs.TS_SubCode1 AS HotelRoomKey,
	rm.RM_NAME AS RoomName,
	hr.HR_RCKEY AS RoomCategoryKey,
	rc.RC_Name AS RoomCategoryName,
	lst.TI_FirstPNKey AS PansionKey,
	pn.PN_Name AS PansionName,
	pn.PN_Code AS PansionCode,
	hs.TS_OpPartnerKey AS PartnerKey,
	hs.TS_Men AS Mens,
	-- CharterPortCodeFrom
	(SELECT TOP 1 CH_PortCodeFrom FROM Charter WHERE CH_Key = pr.xCH_Key)
	AS Airport,
	-- Charters
	(SELECT TOP 1 xAddChKeyString FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS Charters,
	-- FlightDays
	(SELECT TOP 1 xAS_Week FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS FlightDays,
	-- FlightTime
	(SELECT TOP 1 xAS_TimeFrom FROM #addChartersTableString act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_Key = pr.xCH_Key) and (act.xTS_PKKey = pr.xCH_TSOpPacketKey) and (act.xTS_SubCode1 = pr.xCH_TSSubCode1))
	AS FlightTime,
	-- CharterBusyPlaces
	--(SELECT TOP 1 xBusyPlaces FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	NULL AS CharterBusyPlaces,
	-- CharterTotalPlaces
	--(SELECT TOP 1 xTotalPlaces FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	null AS CharterTotalPlaces,
	-- CharterUnsolidBackPlaces
	--(SELECT TOP 1 (xTotalPlaces - xBusyPlaces) FROM @chartersTable
	--WHERE (xCharterDate = pr.xTP_DateBegin + lst.TI_Days - 1) AND (xTS_PKKey = pr.xCH_TSOpPacketKey) AND (xTS_SubCode1 = pr.xCH_TSSubCode1))
	null AS CharterUnsolidBackPlaces,
	-- AllotmentDaysCount
	--CASE @isAllotment WHEN 1 THEN
	--	dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Day, lst.TI_FirstHDKey, hr.HR_RMKEY, hr.HR_RCKEY, 1)
	--ELSE NULL END
	null AS AllotmentDaysCount,
	-- CommitmentDaysCount
	--CASE @isCommitment WHEN 1 THEN
	--	dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Day, lst.TI_FirstHDKey, hr.HR_RMKEY, hr.HR_RCKEY, 2)
	--ELSE NULL END
	null AS CommitmentDaysCount,
	-- HotelAllPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelAllPlaces,
	-- HotelBusyPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 0, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelBusyPlaces,
	-- HotelCommitmentPlaces
	--dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, 2, lst.TI_Days, hr.HR_RCKEY)
	null AS HotelCommitmentPlaces,
	-- Stop sale
--	(SELECT TOP 1 1 FROM StopSales WITH(NOLOCK)
--     INNER JOIN QuotaObjects WITH(NOLOCK) ON QO_ID = SS_QOID
--     WHERE
--        ISNULL(SS_IsDeleted, 0) = 0
--        AND SS_Date BETWEEN (pr.xTP_DateBegin + hs.TS_Day - 1) AND (pr.xTP_DateBegin + hs.TS_Day - 1 + hs.TS_Days - 1)
--	    AND QO_SVKey = 3
--		AND QO_Code = lst.TI_FirstHDKey
--		AND (QO_SubCode1 = HR_RMKEY OR QO_SubCode1 = 0)
--		AND (QO_SubCode2 = HR_RCKEY OR QO_SubCode2 = 0))
	null AS StopSale
FROM #tmpPriceTable       pr
JOIN TP_Tours             tour    WITH(NOLOCK) ON tour.TO_Key = pr.xTP_TOKey
JOIN TP_Lists             lst     WITH(NOLOCK) ON pr.xTP_TIKey = lst.TI_Key
JOIN HotelRooms           hr      WITH(NOLOCK) ON lst.TI_FirstHRKey = hr.HR_Key
JOIN Rooms                rm      WITH(NOLOCK) ON rm.RM_KEY = hr.HR_RMKey
JOIN RoomsCategory        rc      WITH(NOLOCK) ON hr.HR_RCKEY = rc.RC_Key
JOIN HotelDictionary      hd      WITH(NOLOCK) ON lst.TI_FirstHDKey = hd.HD_Key
JOIN TP_ServiceLists      slhs    WITH(NOLOCK) ON lst.TI_Key = slhs.TL_TIKey
JOIN TP_Services          hs      WITH(NOLOCK) ON slhs.TL_TSKey = hs.TS_Key AND hs.TS_SVKey = 3 AND hs.TS_Code = lst.TI_FirstHDKey
JOIN Pansion              pn      WITH(NOLOCK) ON lst.TI_FirstPNKey = pn.PN_Key
JOIN CityDictionary       ct      WITH(NOLOCK) ON hd.HD_CTKEY = ct.CT_KEY
JOIN Accmdmentype         ac      WITH(NOLOCK) ON hr.HR_ACKEY = ac.AC_KEY
WHERE
	TL_TOKey in (select tourKey from #tourKeysTable)
	and (ISNULL(@isAccommodationWithAdult, 0) = 0 OR (HR_ACKEY IN (SELECT AC_KEY FROM #AccomType))) AND
	-- фильтр по мин. ценам НЕ задан
	((ISNULL(@isMinPrice, 0) = 0 AND
	-- проверяем тур на те категории номеров и питаний, которые были переданы
	hr.HR_RCKEY IN (SELECT rcKey FROM #roomCategoryKeysTable) AND
	lst.TI_FirstPNKey IN (SELECT pansionKey FROM #pansionKeysTable))
	OR
	-- фильтр по мин. ценам задан
	(ISNULL(@isMinPrice, 0) != 0 AND
	-- проверяем по базовым привязкам отеля
	hr.HR_RCKEY = (SELECT TOP 1 ahc.AH_RcKey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	lst.TI_FirstPNKey = (SELECT TOP 1 ahc.ah_pnkey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	-- если заданы обе настройки с типом размещения и типом комнаты, то отсеиваем по ним
	(ISNULL(@accmdDefaultKey, 0) = 0 OR ISNULL(@roomTypeDefaultKey, 0) = 0 OR
	((hr.HR_ACKEY = @accmdDefaultKey) AND (hr.HR_RMKEY = @roomTypeDefaultKey))))
	) AND
	-- только выставленные в интернет туры
	(@isOnlineOnly IS NULL OR (@isOnlineOnly = CASE WHEN pr.xTP_Gross IS NULL THEN 0 ELSE TO_IsEnabled END)) AND
	-- отсев по ценам за тур
	(ISNULL(@priceMin, 0) = 0 OR (pr.xTP_Gross >= @priceMin)) AND
	(ISNULL(@priceMax, 0) = 0 OR (pr.xTP_Gross <= @priceMax))

-- только измененные цены
IF ISNULL(@isModifyPriceOnly, 0) != 0 BEGIN
	-- удаляем из @prices все неизмененные цены
	DELETE FROM #prices
	WHERE TP_Key IN (
		SELECT p.TP_Key FROM #prices p
		JOIN TP_PriceComponents pc ON p.TP_Key = pc.PC_TPKey
		WHERE NOT EXISTS(
		             SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_1  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_2  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_3  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_4  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_5  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_6  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_7  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_8  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_9  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_10 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_11 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_12 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_13 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_14 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_15 IS NOT NULL) AND (spad.SPAD_NeedApply != 0))
	)
END

	       
PRINT 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SET @beginTime = GETDATE()
-- актуализируем цены по отобранным турам
declare @tpKeys nvarchar(max)
set @tpKeys = ''
select @tpKeys = @tpKeys + convert(nvarchar(max), p.TP_Key) + ', '
from #prices p
create table #tmp
	(
		tpKey bigint,
		newPrice money
	)
--По настройке получаем актуальную цену через сервис или хранимкой
if exists (select top 1 1 from SystemSettings with (nolock) where SS_ParmName = 'ServiceGetActualPrice' and SS_ParmValue = 1)
	begin
		print 'exec WcfGetActualPrice ' + '''' +  @tpKeys + ''''
		-- делаем инсерт во веременную таблицу, что бы результата не выводился при запуске этой хранимки
		exec WcfGetActualPrice @tpKeys
	end
else
	begin
		print 'exec ReCalculate_CheckActualPrice ' + '''' +  @tpKeys + ''''
		-- делаем инсерт во веременную таблицу, что бы результата не выводился при запуске этой хранимки
		insert into #tmp (tpKey, newPrice)
		exec ReCalculate_CheckActualPrice @tpKeys
	end
print 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
set @debug = 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
insert into Debug (db_Date, db_Mod, db_Text)
values(GETDATE(), 'MM', substring(@debug, 0, 255))

SELECT p.*,
	pc.PC_Id AS PC_Id,
    pc.PC_Rate AS Rate,
	AddCostIsCommission_1,  AddCostNoCommission_1,  CommissionOnly_1,  Gross_1,  IsCommission_1,  MarginPercent_1,  SCPId_1,  SVKey_1,
	AddCostIsCommission_2,  AddCostNoCommission_2,  CommissionOnly_2,  Gross_2,  IsCommission_2,  MarginPercent_2,  SCPId_2,  SVKey_2,
	AddCostIsCommission_3,  AddCostNoCommission_3,  CommissionOnly_3,  Gross_3,  IsCommission_3,  MarginPercent_3,  SCPId_3,  SVKey_3,
	AddCostIsCommission_4,  AddCostNoCommission_4,  CommissionOnly_4,  Gross_4,  IsCommission_4,  MarginPercent_4,  SCPId_4,  SVKey_4,
	AddCostIsCommission_5,  AddCostNoCommission_5,  CommissionOnly_5,  Gross_5,  IsCommission_5,  MarginPercent_5,  SCPId_5,  SVKey_5,
	AddCostIsCommission_6,  AddCostNoCommission_6,  CommissionOnly_6,  Gross_6,  IsCommission_6,  MarginPercent_6,  SCPId_6,  SVKey_6,
	AddCostIsCommission_7,  AddCostNoCommission_7,  CommissionOnly_7,  Gross_7,  IsCommission_7,  MarginPercent_7,  SCPId_7,  SVKey_7,
	AddCostIsCommission_8,  AddCostNoCommission_8,  CommissionOnly_8,  Gross_8,  IsCommission_8,  MarginPercent_8,  SCPId_8,  SVKey_8,
	AddCostIsCommission_9,  AddCostNoCommission_9,  CommissionOnly_9,  Gross_9,  IsCommission_9,  MarginPercent_9,  SCPId_9,  SVKey_9,
	AddCostIsCommission_10, AddCostNoCommission_10, CommissionOnly_10, Gross_10, IsCommission_10, MarginPercent_10, SCPId_10, SVKey_10,
	AddCostIsCommission_11, AddCostNoCommission_11, CommissionOnly_11, Gross_11, IsCommission_11, MarginPercent_11, SCPId_11, SVKey_11,
	AddCostIsCommission_12, AddCostNoCommission_12, CommissionOnly_12, Gross_12, IsCommission_12, MarginPercent_12, SCPId_12, SVKey_12,
	AddCostIsCommission_13, AddCostNoCommission_13, CommissionOnly_13, Gross_13, IsCommission_13, MarginPercent_13, SCPId_13, SVKey_13,
	AddCostIsCommission_14, AddCostNoCommission_14, CommissionOnly_14, Gross_14, IsCommission_14, MarginPercent_14, SCPId_14, SVKey_14,
	AddCostIsCommission_15, AddCostNoCommission_15, CommissionOnly_15, Gross_15, IsCommission_15, MarginPercent_15, SCPId_15, SVKey_15
	FROM #prices p
	JOIN TP_PriceComponents pc WITH(NOLOCK) ON pc.PC_TPKey = p.TP_Key
	WHERE (@priceKeys IS NULL OR pc.PC_Id IN (SELECT priceKey FROM #priceKeysTable))
END
GO
grant exec on [dbo].[MarginMonitor_PriceFilter] to public
go
/*********************************************************************/
/* end sp_MarginMonitor_PriceFilter.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_MarginMonitor_PriceFilter_Testing.sql */
/*********************************************************************/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--реализация основных фильтров Маржинального монитора
--<version>2009.18.1</version>
--<data>2013-04-01</data>

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MarginMonitor_PriceFilter_Testing]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MarginMonitor_PriceFilter_Testing]
GO
CREATE PROCEDURE [dbo].[MarginMonitor_PriceFilter_Testing]
(
	@tourDates                    XML ([dbo].[ArrayOfDateTime]),      -- даты туров
	@hotelKeys                    XML ([dbo].[ArrayOfInt]),			  -- ключи отелей
	@roomCategoryKeys             XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи категорий комнат
	@pansionKeys                  XML ([dbo].[ArrayOfInt]) = NULL,	  -- ключи питаний
	@longList                     XML ([dbo].[ArrayOfInt]) = NULL,	  -- продолжительности
	@countryKey                   INT,                                -- страна
	@departCityKey                INT = NULL,                         -- город вылета
	@targetFlyCityKey             INT,                                -- город прилета
	@targetCitiesKeys             XML ([dbo].[ArrayOfInt]),           -- список городов проживания
	@priceMin                     MONEY = NULL,                       -- минимальная стоимость тура
	@priceMax                     MONEY = NULL,                       -- максимальная стоимость тура
	@isDeletedPriceOnly           BIT   = NULL,                       -- только снятые цены
	@isMinPrice                   BIT   = NULL,                       -- по минимальным ценам
	@isOnlineOnly                 BIT   = NULL,                       -- только выставленные в интернет туры
	@isModifyPriceOnly            BIT   = NULL,                       -- только измененные цены
	@isAllotment                  BIT   = NULL,                       -- для отелей по квотам элотмент
	@isCommitment                 BIT   = NULL,                       -- для отелей по квотам коммитмент
	@accmdDefaultKey              INT   = NULL,                       -- тип размещения по умолчанию
	@roomTypeDefaultKey           INT   = NULL,                       -- тип комнаты по умолчанию
	@isOnlyActualTourDates        BIT   = 1,                          -- 1-отбор по датам не ниже текущей    0-отбор по всем переданным датам
	@isAccommodationWithAdult     BIT   = 1,                          -- только размещения без доп. мест
	@isWholeHotel                 BIT   = 1,                          -- 1 - поиск по всему отелю, 0 - по категориям номеров
	@priceKeys                    XML ([dbo].[ArrayOfLong]) = NULL	  -- ключи уже отобранных цен (для работы кнопки "Применить фильтр к отобранным турам")
) AS BEGIN

SET ARITHABORT ON;
SET DATEFIRST 1;
SET NOCOUNT ON;

DECLARE @beginTime DATETIME, @debug varchar(255)
CREATE TABLE #tourDatesTable (tourDate DATETIME)
INSERT INTO #tourDatesTable (tourDate)
SELECT tbl.res.value('.', 'datetime')
FROM @tourDates.nodes('/ArrayOfDateTime/dateTime') AS tbl(res)
CREATE INDEX IX_tourDatesTable
ON #tourDatesTable(tourDate)

IF @isOnlyActualTourDates = 1
BEGIN
	DELETE #tourDatesTable
	WHERE tourDate < CONVERT(datetime, dateadd(day, -1, GETDATE()))
END

CREATE TABLE #targetCitiesKeysTable(cityKey INT)
INSERT INTO #targetCitiesKeysTable (cityKey)
SELECT tbl.res.value('.', 'int')
FROM @targetCitiesKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_targetCitiesKeysTable
ON #targetCitiesKeysTable(cityKey)

CREATE TABLE #hotelKeysTable (hotelKey INT)
INSERT INTO #hotelKeysTable (hotelKey)
SELECT tbl.res.value('.', 'int')
FROM @hotelKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_hotelKeysTable
ON #hotelKeysTable(hotelKey)

create table #tourKeysTable (tourKey int)
insert into #tourKeysTable (tourKey)
select distinct TI_TOKey 
from TP_Lists with(nolock) 
where ti_firsthdkey in (select hotelKey from #hotelKeysTable)
CREATE INDEX IX_tourKeysTable
ON #tourKeysTable(tourKey)

CREATE TABLE #roomCategoryKeysTable (rcKey INT)
INSERT INTO #roomCategoryKeysTable (rcKey)
SELECT tbl.res.value('.', 'int')
FROM @roomCategoryKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_roomCategoryKeysTable
ON #roomCategoryKeysTable(rcKey)

CREATE TABLE #pansionKeysTable(pansionKey INT)
INSERT INTO #pansionKeysTable(pansionKey)
SELECT tbl.res.value('.', 'int')
FROM @pansionKeys.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_pansionKeysTable
ON #pansionKeysTable(pansionKey)

CREATE TABLE #longListTable (longValue SMALLINT)
INSERT INTO #longListTable (longValue)
SELECT tbl.res.value('.', 'int')
FROM @longList.nodes('/ArrayOfInt/int') AS tbl(res)
CREATE INDEX IX_longListTable
ON #longListTable(longValue)

CREATE TABLE #priceKeysTable  (priceKey BIGINT)
INSERT INTO #priceKeysTable(priceKey)
SELECT tbl.res.value('.', 'bigint')
FROM @priceKeys.nodes('/ArrayOfLong/long') AS tbl(res)
CREATE INDEX IX_priceKeysTable
ON #priceKeysTable(priceKey)

SELECT AC_KEY 
into #AccomType
FROM Accmdmentype WHERE (ISNULL(AC_NADMAIN, 0) > 0) AND (ISNULL(AC_NCHMAIN, 0) = 0) AND (ISNULL(AC_NCHISINFMAIN, 0) = 0)
CREATE INDEX IX_AccomType
ON #AccomType(AC_KEY)


SET @beginTime = GETDATE()

CREATE TABLE #tmpPriceTable 
(
	xTP_Key INT,
	xTP_TOKey INT,
	xTP_DateBegin DATETIME,
	xTI_Days INT,
	xTP_Gross MONEY,
	xTP_TIKey INT,
	xCH_Key INT,
	xCH_PKKey INT,
	xCH_SubCode1 INT,
	xAS_Group VARCHAR(1000),
	xCH_BackKey INT,
	xCH_BackSubCode1 INT,
	xAS_BackGroup VARCHAR(1000)
)
CREATE INDEX IX_tmpPriceTable
ON #tmpPriceTable(xTP_TOKey, xTP_TIKey, xCH_Key)
INCLUDE (xTP_Key, xTP_DateBegin, xTP_Gross);

IF (ISNULL(@isDeletedPriceOnly, 0) = 0) BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTI_Days, xTP_Gross, xTP_TIKey, xCH_Key, xCH_PKKey, xCH_SubCode1, xAS_Group)
	SELECT TP_Key, TP_TOKey, TP_DateBegin, TI_Days, TP_Gross, TP_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1, AS_Group
	FROM TP_Prices WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TP_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	LEFT JOIN AirService  WITH(NOLOCK) ON AS_Key = TS_SubCode1
	WHERE
		(TP_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		(@longList IS NULL OR TI_Days IN (SELECT longValue FROM #longListTable))
		and TP_TOKey in (select tourKey from #tourKeysTable)
END


IF ISNULL(@isOnlineOnly,0) = 0 BEGIN
	INSERT INTO #tmpPriceTable(xTP_Key, xTP_TOKey, xTP_DateBegin, xTI_Days, xTP_Gross, xTP_TIKey, xCH_Key, xCH_PKKey, xCH_SubCode1, xAS_Group)
	SELECT TPD_TPKey, TPD_TOKey, TPD_DateBegin, TI_Days, null, TPD_TIKey, TS_Code, TS_OpPacketKey, TS_SubCode1, AS_Group
	FROM TP_PricesDeleted WITH(NOLOCK)
	JOIN TP_Lists WITH(NOLOCK) ON TPD_TIKey = TI_Key
	JOIN TP_ServiceLists WITH(NOLOCK) ON TI_Key = TL_TIKey
	LEFT JOIN TP_Services WITH(NOLOCK) ON TL_TSKey = TS_Key AND TS_SVKey = 1 AND TS_Day = 1
	LEFT JOIN AirService  WITH(NOLOCK) ON AS_Key = TS_SubCode1
	WHERE
		(TPD_DateBegin IN (SELECT tourDate FROM #tourDatesTable)) AND
		(TI_FirstHDKey IN (SELECT hotelKey FROM #hotelKeysTable)) AND
		(TI_FirstCTKey IN (SELECT cityKey FROM #targetCitiesKeysTable)) AND
		((@targetFlyCityKey != -1 AND TS_CTKey = @targetFlyCityKey AND TS_SubCode2 = @departCityKey)
		  OR
		 (@targetFlyCityKey = -1 AND TS_Key IS NULL)) AND
		(@longList IS NULL OR TI_Days IN (SELECT longValue FROM #longListTable))
		and TPD_TOKey in (select tourKey from #tourKeysTable)
END

PRINT 'предварительный отбор цен: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))

SET @beginTime = GETDATE()

IF (@targetFlyCityKey != -1) BEGIN
	UPDATE pt
	SET pt.xCH_BackKey = TS_Code,
		pt.xCH_BackSubCode1 = TS_SubCode1,
		pt.xAS_BackGroup = AS_Group
	FROM #tmpPriceTable pt
	JOIN TP_ServiceLists WITH(NOLOCK) ON pt.xTP_TIKey = TL_TIKey
	JOIN TP_Services WITH(NOLOCK) ON (TL_TSKey = TS_Key) AND (TS_SVKey = 1) AND (TS_CTKey = @departCityKey) AND (TS_SubCode2 = @targetFlyCityKey)
	JOIN AirService WITH(NOLOCK) ON AS_Key = TS_SubCode1
END

PRINT 'ищим обратные перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))

SET @beginTime = GETDATE()

-- дополнительные перелеты
CREATE TABLE #chartersTable 
(
	xCH_CityKeyFrom INT,
	xCH_CityKeyTo INT,
	xAddChKey BIGINT,
	xCharterDate DATETIME,
	xPortCodeFrom VARCHAR(100),
	xTS_SubCode1 BIGINT,
	xAS_Group VARCHAR(MAX),
	xTS_PKKey BIGINT,
	xAddFlight VARCHAR(4),
	xAddAirlineCode VARCHAR(3),
	xAS_Week VARCHAR(7),
	xAS_TimeFrom DATETIME,
	xOrder INT,
	xBusyPlaces INT,
	xTotalPlaces INT
)

INSERT INTO #chartersTable(xCH_CityKeyFrom, xCH_CityKeyTo, xAddChKey, xCharterDate, xPortCodeFrom, xTS_SubCode1, xAS_Group, xTS_PKKey, xAddFlight, xAddAirlineCode, xAS_Week, xAS_TimeFrom, xOrder)
SELECT DISTINCT CH_CityKeyFrom, CH_CityKeyTo, CH_Key, pt.xTP_DateBegin, CH_PORTCODEFROM, CS_SUBCODE1, AS_GROUP, pt.xCH_PKKey, CH_FLIGHT, CH_AIRLINECODE, AS_WEEK, AS_TimeFrom,
	CASE pt.xCH_Key WHEN CH_Key THEN 0 ELSE 1 END
FROM AirSeason WITH(NOLOCK), Charter WITH(NOLOCK), Costs WITH(NOLOCK), #tmpPriceTable pt
JOIN AirService WITH(NOLOCK) ON AS_KEY = pt.xCH_SubCode1
WHERE
    CH_CityKeyFrom = @departCityKey AND
    CH_CityKeyTo = @targetFlyCityKey AND
	CS_Code = CH_Key AND
	AS_CHKey = CH_Key AND
	CS_SVKey = 1 AND
	(AS_GROUP = ISNULL((SELECT TOP 1 a.AS_GROUP FROM AIRSERVICE a WITH(NOLOCK) WHERE a.AS_KEY = CS_SUBCODE1), '')) AND
	CS_PKKey = pt.xCH_PKKey AND
	pt.xTP_DateBegin BETWEEN AS_DateFrom AND AS_DateTo AND
	pt.xTP_DateBegin BETWEEN CS_Date AND CS_DateEnd AND
	AS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, pt.xTP_DateBegin)AS VARCHAR(1))+'%' AND
	(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, pt.xTP_DateBegin) AS VARCHAR(1))+'%')
UNION
SELECT DISTINCT CH_CityKeyFrom, CH_CityKeyTo, CH_Key, pt.xTP_DateBegin + pt.xTI_Days - 1, CH_PORTCODEFROM, CS_SUBCODE1, AS_GROUP, pt.xCH_PKKey, CH_FLIGHT, CH_AIRLINECODE, AS_WEEK, AS_TimeFrom,
	CASE pt.xCH_Key WHEN CH_Key THEN 0 ELSE 1 END
FROM AirSeason WITH(NOLOCK), Charter WITH(NOLOCK), Costs WITH(NOLOCK), #tmpPriceTable pt
JOIN AirService WITH(NOLOCK) ON AS_KEY = pt.xCH_BackSubCode1
WHERE
    CH_CityKeyFrom = @targetFlyCityKey AND
    CH_CityKeyTo = @departCityKey AND
	CS_Code = CH_Key AND
	AS_CHKey = CH_Key AND
	CS_SVKey = 1 AND
	(AS_GROUP = ISNULL((SELECT TOP 1 a.AS_GROUP FROM AIRSERVICE a WITH(NOLOCK) WHERE a.AS_KEY = CS_SUBCODE1), '')) AND
	CS_PKKey = pt.xCH_PKKey AND
	(pt.xTP_DateBegin + pt.xTI_Days - 1) BETWEEN AS_DateFrom AND AS_DateTo AND
	(pt.xTP_DateBegin + pt.xTI_Days - 1) BETWEEN CS_Date AND CS_DateEnd AND
	AS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, (pt.xTP_DateBegin + pt.xTI_Days - 1))AS VARCHAR(1))+'%' AND
	(ISNULL(CS_Week, '') = '' or CS_Week LIKE '%'+CAST(DATEPART(WEEKDAY, (pt.xTP_DateBegin + pt.xTI_Days - 1)) AS VARCHAR(1))+'%')

-- считаем места на рейсах
UPDATE ct
SET xTotalPlaces = ISNULL(xTotalPlaces,0) + ISNULL(QP_Places,0),
    xBusyPlaces  = ISNULL(xBusyPlaces,0) + ISNULL(QP_Busy,0)
FROM #chartersTable ct
JOIN QuotaObjects WITH(NOLOCK) ON QO_Code = xAddChKey
JOIN QuotaDetails WITH(NOLOCK) ON QD_QTID = QO_QTID
JOIN QuotaParts   WITH(NOLOCK) ON QP_QDID = QD_ID
WHERE
	(QO_SVKey = 1) AND
	(QO_SubCode1 = xTS_SubCode1) AND
	(QD_Date = xCharterDate) AND
	(ISNULL(QP_IsDeleted,0) = 0) AND
	(ISNULL(QP_AgentKey,0) = 0)

PRINT 'считаем места на рейсах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))

DELETE FROM #chartersTable WHERE xTotalPlaces = 0


CREATE TABLE #chartersGroupTable 
(
	xCH_CityKeyFrom INT,
	xCH_CityKeyTo INT,
	xCharterDate DATETIME,
	xAS_Group VARCHAR(MAX),
	xTS_PKKey BIGINT,
	xAddChKeyString VARCHAR(MAX),
	xAS_Week VARCHAR(7),
	xAS_TimeFrom VARCHAR(MAX),
	xPortCodeFrom VARCHAR(MAX)
)

-- все доп. перелеты соединяем через запятую в одну строку
insert into #chartersGroupTable(xCH_CityKeyFrom, xCH_CityKeyTo, xCharterDate, xAS_Group, xTS_PKKey, xAddChKeyString, xAS_Week, xAS_TimeFrom, xPortCodeFrom)
select distinct xCH_CityKeyFrom, xCH_CityKeyTo, xCharterDate, xAS_Group, xTS_PKKey,
	-- xAddAirlineCode + xAddFlight
	(select t2.xAddAirlineCode + t2.xAddFlight + ', '
	from #chartersTable t2
	where (t2.xCH_CityKeyFrom = ct.xCH_CityKeyFrom) and (t2.xCH_CityKeyTo = ct.xCH_CityKeyTo) and
	      (t2.xCharterDate = ct.xCharterDate) and (t2.xAS_Group = ct.xAS_Group) and (t2.xTS_PKKey = ct.xTS_PKKey)
	order by t2.xOrder asc, t2.xAddAirlineCode + t2.xAddFlight asc
	for xml path('')),
	-- xAS_Week
	(select top 1 t2.xAS_Week
	from #chartersTable t2
	where (t2.xCH_CityKeyFrom = ct.xCH_CityKeyFrom) and (t2.xCH_CityKeyTo = ct.xCH_CityKeyTo) and
	      (t2.xCharterDate = ct.xCharterDate) and (t2.xAS_Group = ct.xAS_Group) and (t2.xTS_PKKey = ct.xTS_PKKey)
	order by len(t2.xAS_Week) - len(replace(t2.xAS_Week, '.', '')) asc),
	-- xAS_TimeFrom
	(select SUBSTRING(CONVERT(VARCHAR(8), t2.xAS_TimeFrom, 108),0,6) + ', '
	from #chartersTable t2
	where (t2.xCH_CityKeyFrom = ct.xCH_CityKeyFrom) and (t2.xCH_CityKeyTo = ct.xCH_CityKeyTo) and
	      (t2.xCharterDate = ct.xCharterDate) and (t2.xAS_Group = ct.xAS_Group) and (t2.xTS_PKKey = ct.xTS_PKKey)
	order by t2.xOrder asc, t2.xAddAirlineCode + t2.xAddFlight asc
	for xml path('')),
	-- xPortCodeFrom
	(select t2.xPortCodeFrom + ', '
	from #chartersTable t2
	where (t2.xCH_CityKeyFrom = ct.xCH_CityKeyFrom) and (t2.xCH_CityKeyTo = ct.xCH_CityKeyTo) and
	      (t2.xCharterDate = ct.xCharterDate) and (t2.xAS_Group = ct.xAS_Group) and (t2.xTS_PKKey = ct.xTS_PKKey)
	order by t2.xOrder asc, t2.xAddAirlineCode + t2.xAddFlight asc
	for xml path(''))
from #chartersTable ct

-- избавляемся от хвостовых запятых
update #chartersGroupTable
set xAddChKeyString = LEFT(xAddChKeyString, LEN(xAddChKeyString) - 1),
    xAS_TimeFrom = LEFT(xAS_TimeFrom, LEN(xAS_TimeFrom) - 1),
    xPortCodeFrom = LEFT(xPortCodeFrom, LEN(xPortCodeFrom) - 1)

PRINT 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--set @debug = 'подбираем подходящие перелеты: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--insert into Debug (db_Date, db_Mod, db_Text)
--values(GETDATE(), 'MM', substring(@debug, 0, 255))

--SELECT * from @tmpPriceTable
--SELECT * from @chartersTable
--SELECT * from @chartersGroupTable

CREATE TABLE #prices 
(
	TourOldPrice                MONEY,
	TR_Key                      INT,
	TP_Key                      INT,
	IsOnline                    BIT,
	TourName                    VARCHAR(MAX),
	TourDate                    DATETIME,
	TourDays                    SMALLINT,
	HotelDays                   SMALLINT,
	AccommodationKey            INT,
	AccommodationName           VARCHAR(MAX),
	RoomKey                     INT,
	HotelCityName               VARCHAR(MAX),
	HotelKey                    INT,
	HotelName                   VARCHAR(MAX),
	HotelRoomKey                INT,
	RoomName                    VARCHAR(MAX),
	RoomCategoryKey             INT,
	RoomCategoryName            VARCHAR(MAX),
	PansionKey                  INT,
	PansionName                 VARCHAR(MAX),
	PansionCode                 VARCHAR(100),
	PartnerKey                  INT,
	Mens                        SMALLINT,
	Airport                     VARCHAR(100),
	Charters                    VARCHAR(MAX),
	FlightDays                  VARCHAR(7),
	FlightTime                  VARCHAR(MAX),
	CharterBusyPlaces           INT,
	CharterTotalPlaces          INT,
	CharterUnsolidBackPlaces    INT,
	AllotmentDaysCount          INT,
	CommitmentDaysCount         INT,
	HotelAllPlaces              INT,
	HotelBusyPlaces             INT,
	HotelCommitmentPlaces       INT,
	HotelLoadFactor             FLOAT,
	StopSale                    BIT
)

SET @beginTime = GETDATE()

INSERT INTO #prices
(
	TourOldPrice,
	TR_Key,
	TP_Key,
	IsOnline,
	TourName,
	TourDate,
	TourDays,
	HotelDays,
	AccommodationKey,
	AccommodationName,
	RoomKey,
	HotelCityName,
	HotelKey,
	HotelName,
	HotelRoomKey,
	RoomName,
	RoomCategoryKey,
	RoomCategoryName,
	PansionKey,
	PansionName,
	PansionCode,
	PartnerKey,
	Mens,
	Airport,
	Charters,
	FlightDays,
	FlightTime,
	CharterBusyPlaces,
	CharterTotalPlaces,
	CharterUnsolidBackPlaces,
	AllotmentDaysCount,
	CommitmentDaysCount,
	HotelAllPlaces,
	HotelBusyPlaces,
	HotelCommitmentPlaces,
	HotelLoadFactor,
	StopSale
)
SELECT DISTINCT
	pr.xTP_Gross AS TourOldPrice,
	TO_TRKey AS TR_Key,
	pr.xTP_Key AS TP_Key,
	TO_IsEnabled AS IsOnline,
	TO_Name AS TourName,
	pr.xTP_DateBegin AS TourDate,
	lst.TI_DAYS AS TourDays,
	hs.TS_Days AS HotelDays,
	hr.HR_ACKEY AS AccommodationKey,
	ac.AC_CODE AS AccommodationName,
	hr.HR_RMKEY AS RoomKey,
	ct.CT_NAME AS HotelCityName,
	lst.TI_FirstHDKey AS HotelKey,
	hd.HD_NAME AS HotelName,
	hs.TS_SubCode1 AS HotelRoomKey,
	rm.RM_NAME AS RoomName,
	hr.HR_RCKEY AS RoomCategoryKey,
	rc.RC_Name AS RoomCategoryName,
	lst.TI_FirstPNKey AS PansionKey,
	pn.PN_Name AS PansionName,
	pn.PN_Code AS PansionCode,
	hs.TS_OpPartnerKey AS PartnerKey,
	hs.TS_Men AS Mens,
	-- CharterPortCodeFrom
	(SELECT TOP 1 xPortCodeFrom FROM #chartersGroupTable act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_CityKeyFrom = @departCityKey) and (act.xCH_CityKeyTo = @targetFlyCityKey) and
	       (act.xTS_PKKey = pr.xCH_PKKey) and (act.xAS_Group = pr.xAS_Group))
	AS Airport,
	-- Charters
	(SELECT TOP 1 xAddChKeyString FROM #chartersGroupTable act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_CityKeyFrom = @departCityKey) and (act.xCH_CityKeyTo = @targetFlyCityKey) and
	       (act.xTS_PKKey = pr.xCH_PKKey) and (act.xAS_Group = pr.xAS_Group))
	AS Charters,
	-- FlightDays
	(SELECT TOP 1 xAS_Week FROM #chartersGroupTable act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_CityKeyFrom = @departCityKey) and (act.xCH_CityKeyTo = @targetFlyCityKey) and
	       (act.xTS_PKKey = pr.xCH_PKKey) and (act.xAS_Group = pr.xAS_Group))
	AS FlightDays,
	-- FlightTime
	(SELECT TOP 1 xAS_TimeFrom FROM #chartersGroupTable act
	 WHERE (act.xCharterDate = pr.xTP_DateBegin) and (act.xCH_CityKeyFrom = @departCityKey) and (act.xCH_CityKeyTo = @targetFlyCityKey) and
	       (act.xTS_PKKey = pr.xCH_PKKey) and (act.xAS_Group = pr.xAS_Group))
	AS FlightTime,
	-- CharterBusyPlaces
	(SELECT SUM(ct.xBusyPlaces) FROM #chartersTable ct
 	 WHERE (ct.xCharterDate = pr.xTP_DateBegin) and (ct.xCH_CityKeyFrom = @departCityKey) and (ct.xCH_CityKeyTo = @targetFlyCityKey) and
	       (ct.xTS_PKKey = pr.xCH_PKKey) and (ct.xAS_Group = pr.xAS_Group))
	AS CharterBusyPlaces,
	-- CharterTotalPlaces
	(SELECT SUM(ct.xTotalPlaces) FROM #chartersTable ct
	 WHERE (ct.xCharterDate = pr.xTP_DateBegin) and (ct.xCH_CityKeyFrom = @departCityKey) and (ct.xCH_CityKeyTo = @targetFlyCityKey) and
	       (ct.xTS_PKKey = pr.xCH_PKKey) and (ct.xAS_Group = pr.xAS_Group))
	AS CharterTotalPlaces,
	-- CharterUnsolidBackPlaces
	(SELECT SUM(ct.xTotalPlaces - ct.xBusyPlaces) FROM #chartersTable ct
	 WHERE (ct.xCharterDate = pr.xTP_DateBegin + lst.TI_DAYS - 1) and (ct.xCH_CityKeyFrom = @targetFlyCityKey) and (ct.xCH_CityKeyTo = @departCityKey) and
	       (ct.xTS_PKKey = pr.xCH_PKKey) and (ct.xAS_Group = pr.xAS_BackGroup))
	AS CharterUnsolidBackPlaces,
	-- AllotmentDaysCount
	CASE @isAllotment WHEN 1 THEN
		dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Days, lst.TI_FirstHDKey, 1)
	ELSE NULL END
	AS AllotmentDaysCount,
	-- CommitmentDaysCount
	CASE @isCommitment WHEN 1 THEN
		dbo.GetHotelDays(DATEADD(DAY, hs.TS_Day - 1, pr.xTP_DateBegin), hs.TS_Days, lst.TI_FirstHDKey, 2)
	ELSE NULL END
	AS CommitmentDaysCount,
	-- HotelAllPlaces
	dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	AS HotelAllPlaces,
	-- HotelBusyPlaces
	dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 0, pr.xTP_DateBegin, hs.TS_Code, NULL, lst.TI_Days, hr.HR_RCKEY)
	AS HotelBusyPlaces,
	-- HotelCommitmentPlaces
	dbo.GetHotelPlaces (ISNULL(@IsWholeHotel,0), 1, pr.xTP_DateBegin, hs.TS_Code, 2, lst.TI_Days, hr.HR_RCKEY)
	AS HotelCommitmentPlaces,
	-- HotelLoadFactor
	dbo.GetHotelLoad (ISNULL(@IsWholeHotel,0), pr.xTP_DateBegin, hs.TS_Code, hr.HR_RCKEY)
	AS HotelLoadFactor,
	-- Stop sale
	CASE @isWholeHotel WHEN 0 THEN
	    -- проверяем стопы по категории номера
		(SELECT TOP 1 1 FROM StopSales WITH(NOLOCK)
		 INNER JOIN QuotaObjects WITH(NOLOCK) ON QO_ID = SS_QOID
		 WHERE
			ISNULL(SS_IsDeleted, 0) = 0
			AND SS_Date BETWEEN (pr.xTP_DateBegin) AND (pr.xTP_DateBegin + hs.TS_Days - 1)
			AND QO_SVKey = 3
			AND QO_Code = lst.TI_FirstHDKey
			AND (QO_SubCode1 = HR_RMKEY OR QO_SubCode1 = 0)
			AND (QO_SubCode2 = HR_RCKEY OR QO_SubCode2 = 0))
	ELSE -- проверяем стопы по отелю
		(SELECT TOP 1 1 FROM
		  (SELECT 1 AS X FROM
		       -- ищим объекты на которые есть квоты на период проживания и которые попадают под стопы
			  (SELECT QO_ID, (SELECT TOP 1 1 FROM StopSales WITH(NOLOCK) JOIN QuotaObjects qo1 WITH(NOLOCK) ON SS_QOID = qo1.QO_ID
							  WHERE ISNULL(SS_IsDeleted,0) = 0
								AND SS_Date BETWEEN (pr.xTP_DateBegin) AND (pr.xTP_DateBegin + hs.TS_Days - 1)
								AND qo1.QO_Code = lst.TI_FirstHDKey
								AND (qo.QO_SubCode1 = qo1.QO_SubCode1 OR qo1.QO_SubCode1 = 0)
								AND (qo.QO_SubCode2 = qo1.QO_SubCode2 OR qo1.QO_SubCode2 = 0)) AS StopFlag
			   FROM QuotaObjects qo WITH(NOLOCK)
			   WHERE QO_Code = lst.TI_FirstHDKey AND QO_SVKey = 3
				 AND EXISTS (SELECT TOP 1 1 FROM QuotaDetails WITH(NOLOCK)
							 WHERE QD_QTID = qo.QO_QTID AND ISNULL(QD_IsDeleted,0) = 0
							   AND QD_Date BETWEEN (pr.xTP_DateBegin) AND (pr.xTP_DateBegin + hs.TS_Days - 1))) q
		  -- потом считаем сколько получилось null-ов
		  WHERE q.StopFlag IS NULL) t
		-- если null-ов нет, значит что на все объекты стоят стопы => стоп стоит на весь отель
		HAVING COUNT(t.x) = 0)
	END
	AS StopSale
FROM #tmpPriceTable       pr
JOIN TP_Tours             tour    WITH(NOLOCK) ON tour.TO_Key = pr.xTP_TOKey
JOIN TP_Lists             lst     WITH(NOLOCK) ON pr.xTP_TIKey = lst.TI_Key
JOIN HotelRooms           hr      WITH(NOLOCK) ON lst.TI_FirstHRKey = hr.HR_Key
JOIN Rooms                rm      WITH(NOLOCK) ON rm.RM_KEY = hr.HR_RMKey
JOIN RoomsCategory        rc      WITH(NOLOCK) ON hr.HR_RCKEY = rc.RC_Key
JOIN HotelDictionary      hd      WITH(NOLOCK) ON lst.TI_FirstHDKey = hd.HD_Key
JOIN TP_ServiceLists      slhs    WITH(NOLOCK) ON lst.TI_Key = slhs.TL_TIKey
JOIN TP_Services          hs      WITH(NOLOCK) ON slhs.TL_TSKey = hs.TS_Key AND hs.TS_SVKey = 3 AND hs.TS_Code = lst.TI_FirstHDKey
JOIN Pansion              pn      WITH(NOLOCK) ON lst.TI_FirstPNKey = pn.PN_Key
JOIN CityDictionary       ct      WITH(NOLOCK) ON hd.HD_CTKEY = ct.CT_KEY
JOIN Accmdmentype         ac      WITH(NOLOCK) ON hr.HR_ACKEY = ac.AC_KEY
WHERE
	TL_TOKey in (select tourKey from #tourKeysTable) and
	(ISNULL(@isAccommodationWithAdult, 0) = 0 OR (HR_ACKEY IN (SELECT AC_KEY FROM #AccomType))) AND
	-- фильтр по мин. ценам НЕ задан
	((ISNULL(@isMinPrice, 0) = 0 AND
	-- проверяем тур на те категории номеров и питаний, которые были переданы
	hr.HR_RCKEY IN (SELECT rcKey FROM #roomCategoryKeysTable) AND
	lst.TI_FirstPNKey IN (SELECT pansionKey FROM #pansionKeysTable))
	OR
	-- фильтр по мин. ценам задан
	(ISNULL(@isMinPrice, 0) != 0 AND
	-- проверяем по базовым привязкам отеля
	hr.HR_RCKEY = (SELECT TOP 1 ahc.AH_RcKey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	lst.TI_FirstPNKey = (SELECT TOP 1 ahc.ah_pnkey FROM AssociationHotelCat ahc WHERE ahc.AH_HdKey = lst.TI_FirstHDKey) AND
	-- если заданы обе настройки с типом размещения и типом комнаты, то отсеиваем по ним
	(ISNULL(@accmdDefaultKey, 0) = 0 OR ISNULL(@roomTypeDefaultKey, 0) = 0 OR
	((hr.HR_ACKEY = @accmdDefaultKey) AND (hr.HR_RMKEY = @roomTypeDefaultKey))))
	) AND
	-- только выставленные в интернет туры
	(@isOnlineOnly IS NULL OR (@isOnlineOnly = CASE WHEN pr.xTP_Gross IS NULL THEN 0 ELSE TO_IsEnabled END)) AND
	-- отсев по ценам за тур
	(ISNULL(@priceMin, 0) = 0 OR (pr.xTP_Gross >= @priceMin)) AND
	(ISNULL(@priceMax, 0) = 0 OR (pr.xTP_Gross <= @priceMax))

-- удаляем цены у которых цисло мест на рейсе 0
-- это означает, что на эти даты были сняты рейсы
DELETE FROM #prices WHERE CharterTotalPlaces = 0

-- только измененные цены
IF ISNULL(@isModifyPriceOnly, 0) != 0 BEGIN
	-- удаляем из @prices все неизмененные цены
	DELETE FROM #prices
	WHERE TP_Key IN (
		SELECT p.TP_Key FROM #prices p
		JOIN TP_PriceComponents pc ON p.TP_Key = pc.PC_TPKey
		WHERE NOT EXISTS(
		             SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_1  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_2  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_3  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_4  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_5  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_6  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_7  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_8  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_9  IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_10 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_11 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_12 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_13 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_14 IS NOT NULL) AND (spad.SPAD_NeedApply != 0)
			   UNION SELECT 1 FROM TP_ServicePriceActualDate spad WHERE (pc.SCPId_15 IS NOT NULL) AND (spad.SPAD_NeedApply != 0))
	)
END

	       
PRINT 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--set @debug = 'выбор туров: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--insert into Debug (db_Date, db_Mod, db_Text)
--values(GETDATE(), 'MM', substring(@debug, 0, 255))

SET @beginTime = GETDATE()
-- актуализируем цены по отобранным турам
declare @tpKeys nvarchar(max)
set @tpKeys = ''
select @tpKeys = @tpKeys + convert(nvarchar(max), p.TP_Key) + ', '
from #prices p
print 'exec ReCalculate_CheckActualPrice ' + '''' +  @tpKeys + ''''
-- делаем инсерт во веременную таблицу, что бы результата не выводился при запуске этой хранимки
declare @tmp table(tpKey bigint, newPrice money)
insert into @tmp (tpKey, newPrice)
exec ReCalculate_CheckActualPrice @tpKeys
print 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--set @debug = 'Расчитываем изменения в ценах: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
--insert into Debug (db_Date, db_Mod, db_Text)
--values(GETDATE(), 'MM', substring(@debug, 0, 255))

SELECT p.*,
	pc.PC_Id AS PC_Id,
    pc.PC_Rate AS Rate,
	AddCostIsCommission_1,  AddCostNoCommission_1,  CommissionOnly_1,  Gross_1,  IsCommission_1,  MarginPercent_1,  SCPId_1,  SVKey_1,
	AddCostIsCommission_2,  AddCostNoCommission_2,  CommissionOnly_2,  Gross_2,  IsCommission_2,  MarginPercent_2,  SCPId_2,  SVKey_2,
	AddCostIsCommission_3,  AddCostNoCommission_3,  CommissionOnly_3,  Gross_3,  IsCommission_3,  MarginPercent_3,  SCPId_3,  SVKey_3,
	AddCostIsCommission_4,  AddCostNoCommission_4,  CommissionOnly_4,  Gross_4,  IsCommission_4,  MarginPercent_4,  SCPId_4,  SVKey_4,
	AddCostIsCommission_5,  AddCostNoCommission_5,  CommissionOnly_5,  Gross_5,  IsCommission_5,  MarginPercent_5,  SCPId_5,  SVKey_5,
	AddCostIsCommission_6,  AddCostNoCommission_6,  CommissionOnly_6,  Gross_6,  IsCommission_6,  MarginPercent_6,  SCPId_6,  SVKey_6,
	AddCostIsCommission_7,  AddCostNoCommission_7,  CommissionOnly_7,  Gross_7,  IsCommission_7,  MarginPercent_7,  SCPId_7,  SVKey_7,
	AddCostIsCommission_8,  AddCostNoCommission_8,  CommissionOnly_8,  Gross_8,  IsCommission_8,  MarginPercent_8,  SCPId_8,  SVKey_8,
	AddCostIsCommission_9,  AddCostNoCommission_9,  CommissionOnly_9,  Gross_9,  IsCommission_9,  MarginPercent_9,  SCPId_9,  SVKey_9,
	AddCostIsCommission_10, AddCostNoCommission_10, CommissionOnly_10, Gross_10, IsCommission_10, MarginPercent_10, SCPId_10, SVKey_10,
	AddCostIsCommission_11, AddCostNoCommission_11, CommissionOnly_11, Gross_11, IsCommission_11, MarginPercent_11, SCPId_11, SVKey_11,
	AddCostIsCommission_12, AddCostNoCommission_12, CommissionOnly_12, Gross_12, IsCommission_12, MarginPercent_12, SCPId_12, SVKey_12,
	AddCostIsCommission_13, AddCostNoCommission_13, CommissionOnly_13, Gross_13, IsCommission_13, MarginPercent_13, SCPId_13, SVKey_13,
	AddCostIsCommission_14, AddCostNoCommission_14, CommissionOnly_14, Gross_14, IsCommission_14, MarginPercent_14, SCPId_14, SVKey_14,
	AddCostIsCommission_15, AddCostNoCommission_15, CommissionOnly_15, Gross_15, IsCommission_15, MarginPercent_15, SCPId_15, SVKey_15
	FROM #prices p
	JOIN TP_PriceComponents pc WITH(NOLOCK) ON pc.PC_TPKey = p.TP_Key
	WHERE (@priceKeys IS NULL OR pc.PC_Id IN (SELECT priceKey FROM #priceKeysTable))
END
GO
grant exec on [dbo].[MarginMonitor_PriceFilter_Testing] to public
go
/*********************************************************************/
/* end sp_MarginMonitor_PriceFilter_Testing.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_MISImportQuotaStops.sql */
/*********************************************************************/
--импорт наличия мест из внешних систем
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MISImportQuotaStops]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MISImportQuotaStops]
GO

CREATE PROCEDURE [dbo].[MISImportQuotaStops]
	(
--<VERSION>2009.2.19</VERSION>
--<DATE>2013-04-29</DATE>
		@SvKey int,
		@Code int, 
		@SubCode1 int,
		@SubCode2 int,
		@Date datetime,
		@IsStop bit,
		@Places int,
		@PartnerKey int
	)
AS
BEGIN	
	SET NOCOUNT ON;
	
	declare @qtKey int, @qoKey int, @qdKey int

	begin		
		-- сначала нужно снять с квоты (если вдруг они сидят) и удалить квоты и стопы которые пришли с такими же характеристиками на заданную дату			
		-- exec MISImportQuotaStops_Delete @SvKey, @Code, @SubCode1, @SubCode2, @Date, @IsStop, @PartnerKey
		
		-- теперь, после того как все удалено создаем новые квоты и стопы
		if (@IsStop = 0)
		begin			
			if @SvKey = 3 and @Places > 0
			begin
				if (not exists (select 1
								from Quotas join QuotaObjects on QT_ID = QO_QTID
								where QT_PRKey = @PartnerKey
								and QO_SVKey = @SvKey
								and QO_Code = @Code
								and QO_SubCode1 = @SubCode1
								and QO_SubCode2 = @SubCode2))
				begin
					insert into Quotas (QT_PRKey, QT_ByRoom, QT_Comment)
					values (@PartnerKey, 1, 'Quotas from FTI. Load: ' + convert(nvarchar(max), GETDATE(), 121))
					set @qtKey = SCOPE_IDENTITY()
					
					insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
					values (@qtKey, @SvKey, @Code, @SubCode1, @SubCode2)
					set @qoKey = SCOPE_IDENTITY()
				end
				else
				begin
					select @qtKey = QT_ID, @qoKey = QO_ID
					from Quotas join QuotaObjects on QT_ID = QO_QTID
					where QT_PRKey = @PartnerKey
					and QO_SVKey = @SvKey
					and QO_Code = @Code
					and QO_SubCode1 = @SubCode1
					and QO_SubCode2 = @SubCode2
					print 'добавили квоту в QuotaObjects'
				end
			
				insert into QuotaDetails(QD_QTID, QD_Date, QD_Type, QD_Places, QD_Busy, QD_CreateDate, QD_CreatorKey)
				values (@qtKey, @Date, 1, @Places, 0, GETDATE(), [dbo].[GetUserId]())
				set @qdKey = SCOPE_IDENTITY()
				print 'добавили квоту в QuotaDetails'
				insert into QuotaParts(QP_QDID, QP_Date, QP_Places, QP_Busy, QP_Limit, QP_IsNotCheckIn, QP_Durations, QP_CreateDate, QP_CreatorKey)
				values (@qdKey, @Date, @Places, 0, 1, 0, '', GETDATE(), [dbo].[GetUserId]())
				print 'добавили квоту в QuotaParts'
			end
		end
		else -- обрабатываем стопы
		begin
			if @SvKey = 3 
			begin
				if not exists (	select 1
								from QuotaObjects
								where QO_SVKey = @SvKey
								and QO_Code = @Code
								and QO_SubCode1 = @SubCode1
								and QO_SubCode2 = @SubCode2
								and QO_QTID is null)
				begin
					insert into QuotaObjects (QO_QTID, QO_SVKey, QO_Code, QO_SubCode1, QO_SubCode2)
					values (null, @SvKey, @Code, @SubCode1, @SubCode2)
					set @qoKey = SCOPE_IDENTITY()
					print 'добавили стоп в QuotaObjects'
				end
				else
				begin
					select @qoKey = QO_ID
					from QuotaObjects
					where QO_SVKey = @SvKey
					and QO_Code = @Code
					and QO_SubCode1 = @SubCode1
					and QO_SubCode2 = @SubCode2
					and QO_QTID is null
				end
				
				insert into StopSales(SS_QOID, SS_QDID, SS_PRKey, SS_Date, SS_AllotmentAndCommitment, SS_Comment, SS_CreateDate, SS_CreatorKey)
				values (@qoKey, null, @PartnerKey, @Date, 1, '', GETDATE(), [dbo].[GetUserId]())
				print 'добавили стоп в StopSales'
			end
		end
		
		-- обновим информацию о городе и стране вставленной квоты
		update quotaobjects
		set qo_ctkey = (select hd_ctkey from HotelDictionary where hd_key = qo_code)
		where qo_svkey = 3
		and QO_ID = @qoKey
					
		update quotaobjects
		set qo_cnkey = ( select ct_cnKey from citydictionary where ct_key = qo_ctkey ) 
		where qo_cnkey is null 
		and qo_ctkey is not null
		and QO_ID = @qoKey
	
	end
	
END
GO

GRANT exec on [dbo].[MISImportQuotaStops] to public 
GO
/*********************************************************************/
/* end sp_MISImportQuotaStops.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_MISImportQuotaStops_Delete.sql */
/*********************************************************************/
--удаление квот перед импортом
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[MISImportQuotaStops_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[MISImportQuotaStops_Delete]
GO

CREATE PROCEDURE [dbo].[MISImportQuotaStops_Delete]
	(
--<VERSION>2009.2.19</VERSION>
--<DATE>2013-04-29</DATE>
		@SvKey int,
		@Code int,
		@SubCode1 int,
		@SubCode2 int,		
		@Date datetime,
		@IsStop bit,
		@PartnerKey int
	)
AS
BEGIN	
	
	declare @SDDLKey int, @SDDate datetime
	
	-- если это квота, то снимаем с нее все услуги (если вдруг что-то сидит, хотя не должно)
	if (@IsStop = 0)
	begin
		-- пометим для удаления
		update QuotaDetails
		set QD_IsDeleted = 4 -- Request
		from QuotaDetails join Quotas on QT_ID = QD_QTID
		join QuotaObjects on QT_ID = QO_QTID
		where QO_Code = @Code
		and QO_SVKey = @SvKey
		and (@SubCode1 = -1 or QO_SubCode1 =@SubCode1)
		and (@SubCode2 = -1 or QO_SubCode2 =@SubCode2)
		and QD_Date = @Date
		and QT_PrKey = @PartnerKey;
		
		-- в этой хранимке снимем, если сидела, и удалим
		exec QuotaDetailAfterDelete
	end

	-- стопы бывают 2 видов:
	-- 1. На объект квотирования 
	delete StopSales
	from StopSales join QuotaObjects on SS_QOID = QO_ID
	where QO_Code = @Code
	and QO_SVKey = @SvKey
		and (@SubCode1 = -1 or QO_SubCode1 =@SubCode1)
		and (@SubCode2 = -1 or QO_SubCode2 =@SubCode2)
	and SS_Date = @Date
	and SS_QDID is null
	and QO_QTID is null
	and SS_PRKey = @PartnerKey;
	
	-- 2. на саму квоту (QuotaDetails)
	delete StopSales
	from StopSales join QuotaObjects on SS_QOID = QO_ID
	join QuotaDetails on SS_QDID = QD_ID
	join Quotas on QT_ID = QD_QTID and QT_ID = QO_QTID
	where QO_Code = @Code
	and QO_SVKey = @SvKey
		and (@SubCode1 = -1 or QO_SubCode1 =@SubCode1)
		and (@SubCode2 = -1 or QO_SubCode2 =@SubCode2)
	and SS_Date = @Date
	and QT_PrKey = @PartnerKey;
	
	
	-- теперь удалим объект квотирования и саму квоту, к которым не привязано ни QuotaDetails, ни StopSales
	delete QuotaObjects
	from QuotaObjects join Quotas on QO_QTID = QT_ID
	where not exists (select 1 from StopSales where SS_QOID = QO_ID)
	and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
	and QO_SVKey = @SvKey
	and QO_Code = @Code
	
	delete Quotas
	from Quotas join QuotaObjects on QT_ID = QO_QTID
	where not exists (select 1 from QuotaObjects where QO_QTID = QT_ID)
	and not exists (select 1 from QuotaDetails where QD_QTID = QT_ID)
	and QO_SVKey = @SvKey
	and QO_Code = @Code
END

GO

grant exec on [dbo].[MISImportQuotaStops_Delete] to public
go

/*********************************************************************/
/* end sp_MISImportQuotaStops_Delete.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwAutobusQuotes.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwAutobusQuotes]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[mwAutobusQuotes]
GO

CREATE PROCEDURE [dbo].[mwAutobusQuotes]
	@Filter varchar(2000),		
	@AgentKey int, 	
	@RequestOnRelease smallint,
	@NoPlacesResult int,
	@CheckAgentQuotes smallint,
	@CheckCommonQuotes smallint,
	@ExpiredReleaseResult int
AS
--<DATE>2013-06-05</DATE>
---<VERSION>9.2.19</VERSION>
---=== СОЗДАНИЕ ВРЕМЕННОЙ ТАБЛИЦЫ ===---
CREATE TABLE #tmp
(	
	-- MEG00030302. Golubinsky. 07.06.2011 
	[TourMessage] varchar (1024) null,
	-- MEG00030302 end
	[CountryKey] [int] NOT NULL,
	[TourDate] [datetime] NULL,
	[TourKey] [int] NULL,
	[TurListKey] [int] NULL,
	[TourDuration] [int] null,--продолжительность тура в днях
	[TourDescription] varchar (1024) null,
	[HotelKey] [int] NULL,
	[HotelKeys] varchar(1024) NULL,
	[HotelPartnerKey] [int] null,
	[HotelDay] [int] null,
	[HotelNights] [int] null,
	[RoomKey] [int] null,
	[RoomCategoryKey] [int] null,
	[RoomCategoryName] [varchar](60) null,	
	[Nights] [int] NULL,	
	[TourName] [varchar](128) NULL,
	[TourTypeKey] [int] NULL,
	[TourTypeName] [varchar] (50) NULL,
	[HotelName] [varchar](60) NULL,		
	[Rate] [varchar](3) NULL,
	[TransportKey] int null,
	[TransferKey] int null,
	[TransferDay] int NULL,
	QuotaPlaces varchar(1024),
	QuotaAllPlaces varchar(1024)
)

declare @rmKey int
declare @script varchar(8000)
--временная таблица с нужными типами номеров
--т.е. теми, на которые есть цены
create table #tmp1
(
	rm_key int null,
	rm_code varchar(35) null
)

set @script = 'select distinct pt_rmkey,pt_rmcode from mwpricedatatable where ' + @Filter

INSERT INTO #tmp1
	EXEC(@script)

declare @rmCount int
select @rmCount = count(rm_key)
from #tmp1

if(@rmCount = 0)
	return

declare roomCursor cursor 
	for
		select rm_key from #tmp1 order by rm_key

--добавляем колонки типов номеров в темповую таблицу
OPEN roomCursor
FETCH NEXT FROM roomCursor INTO @rmKey
while @@fetch_status = 0
	begin
		set @script = 'alter table #tmp add rmkey_' +  convert(varchar,@rmKey) + ' int, pr_' + convert(varchar,@rmKey) + ' int' 

		exec (@script)
		FETCH NEXT FROM roomCursor INTO @rmKey
	end
close roomCursor
deallocate roomCursor

-- Cобираем колонки типов номеров для запроса
declare @PNames as varchar(4000)
set @PNames = ''
select @PNames = @PNames + ',' +
	'0 as ''rmkey_' + convert(varchar,rm_key) + ''',
	max(case when pt_rmkey = ' + convert(varchar,rm_key) +
	' then pt_pricekey else 0 end) as ''pr_' + convert(varchar,rm_key) + ''''
from #tmp1
order by rm_key

set @PNames = substring(@PNames, 2, len(@PNames))

set @script =
'select '''' as TourMessage, pt_cnkey,pt_tourdate,
pt_tourkey,pt_tlkey, pt_days, TL_DESCRIPTION, pt_hdkey,pt_hotelkeys,
pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rmkey,pt_rckey,rc_name,
pt_nights,pt_tourname,pt_tourtype,tp_name,pt_hdname, pt_rate,ts_subcode1,ts_code,ts_day, '''', '''','+ @PNames + '
from(select 
pt_cnkey ptcnkey,pt_ackey ptackey,pt_rmkey ptrmkey,pt_tourdate pttourdate,pt_tourkey pttourkey,
pt_days ptdays,pt_hdkey pthdkey,pt_hdpartnerkey pthdpartnerkey,pt_hdday pthdday, 
pt_hdnights pthdnights,pt_rckey ptrckey,pt_nights ptnights,pt_tourtype pttourtype,
min(pt_price) ptprice 
from mwpricedatatable with (nolock)
where ' + @Filter + '
group by pt_cnkey,pt_rmkey,pt_tourdate,pt_tourkey,pt_days,pt_hdkey,pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rckey,pt_ackey, pt_nights,pt_tourname,pt_tourtype
) t
inner join mwpricedatatable mwp with (nolock)
on
(
pt_rmkey=t.ptrmkey and 
pt_cnkey=t.ptcnkey and mwp.pt_ackey=t.ptackey and  mwp.pt_tourdate=t.pttourdate and
pt_tourkey=t.pttourkey and mwp.pt_days=t.ptdays and mwp.pt_hdkey=t.pthdkey and
pt_hdpartnerkey=t.pthdpartnerkey and mwp.pt_hdday=t.pthdday and mwp.pt_hdnights=t.pthdnights and
pt_rckey=t.ptrckey and mwp.pt_days=t.ptdays and  
pt_nights=t.ptnights and
pt_price=t.ptprice)
inner join tiptur on pt_tourtype = tp_key
inner join turlist on pt_tlkey = tl_key
inner join roomscategory on pt_rckey = rc_key
inner join tp_servicelists on tl_tikey = pt_pricelistkey
inner join tp_services on ts_key = tl_tskey and ts_svkey = 2
where ' + @Filter + '
group by pt_cnkey,pt_tourdate, 
pt_tourkey,pt_tlkey, pt_days,TL_DESCRIPTION,pt_hdkey, pt_hotelkeys,
pt_hdpartnerkey,pt_hdday,pt_hdnights,pt_rckey,rc_name,pt_ackey, pt_rmkey,
pt_nights,pt_tourname,pt_tourtype,tp_name,pt_hdname,pt_rate,ts_subcode1,ts_code,ts_day
order by pt_tourdate, pt_days, tp_name'

print @script
INSERT INTO #tmp
	EXEC(@script)

-- Формируем скрипт, заполняющий стоимость по ключу цены
declare @update_price as varchar(4000)
set @update_price = ''
	select @update_price = @update_price + 'update #tmp set rmkey_' + convert(varchar,rm_key) + ' = TP_Gross from TP_Prices where tp_key = pr_' + convert(varchar,rm_key) + '; '
	from #tmp1
	order by rm_key
--print @update_price
exec (@update_price)

DECLARE	@HotelKey int
DECLARE @HotelKeys VARCHAR(1024)
DECLARE	@RoomKey int 
DECLARE	@RoomCategoryKey int 
declare @FromDate datetime
declare @HotelPartnerKey int 
declare @HotelDay int 
declare @HotelNights int 
declare @TourDuration int 
declare @TourKey int
declare @TourMessage varchar (1024)
declare @TurListKey int


DECLARE hSql CURSOR 
	FOR 
		SELECT HotelKey, HotelKeys, RoomKey, RoomCategoryKey,TourDate,HotelPartnerKey,HotelDay,HotelNights,TourDuration,TourKey,TourMessage,TurListKey FROM #tmp
	FOR UPDATE OF QuotaPlaces, QuotaAllPlaces, TourMessage

OPEN hSql
FETCH NEXT FROM hSql INTO @HotelKey, @HotelKeys, @RoomKey, @RoomCategoryKey, @FromDate, @HotelPartnerKey, @HotelDay,@HotelNights,@TourDuration,@TourKey,@TourMessage,@TurListKey


declare @qt_places int
declare @qt_allplaces int
declare @qt_tourMessage VARCHAR (1024)

WHILE @@FETCH_STATUS = 0
BEGIN	      

	DECLARE @idx INT = 1      
	DECLARE @delimiter CHAR = ','
	DECLARE @slice VARCHAR(1024)
	DECLARE @quotas VARCHAR(1024) = ''
	DECLARE @allQuotas VARCHAR(1024) = ''
	DECLARE @hotelKeysVar VARCHAR(1024) = @HotelKeys
	DECLARE @curHotelKey as int
	
	WHILE @idx != 0       
	BEGIN       
		SET @idx = CHARINDEX(@delimiter, @hotelKeysVar)       
		IF @idx != 0       
			SET @slice = LEFT(@hotelKeysVar, @idx - 1)       
		ELSE       
			SET @slice = @hotelKeysVar    
			   
		SET @curHotelKey = CAST(@slice AS INT)

		SELECT TOP 1 @qt_places = qt_places, @qt_allplaces = qt_allplaces 
					 from mwCheckQuotesEx(3, @curHotelKey, @RoomKey, 
										  @RoomCategoryKey, @AgentKey, 
										  @HotelPartnerKey, @FromDate, 
										  @HotelDay, @HotelNights, 
										  @RequestOnRelease, @NoPlacesResult, 
										  @CheckAgentQuotes, @CheckCommonQuotes, 
										  1, 0, 0, 0, 0, 
										  @TourDuration, @ExpiredReleaseResult)		       
		if LEN(@quotas) > 0
			SET @quotas = @quotas + ',' + cast(@qt_places as VARCHAR(1024))
		else
			SET @quotas = cast(@qt_places as VARCHAR(1024))
		
		if LEN(@allQuotas) > 0
			SET @allQuotas = @allQuotas + ',' + cast(@qt_allplaces as VARCHAR(1024))
		else
			SET @allQuotas = cast(@qt_allplaces as VARCHAR(1024))
			 
			 
		set @hotelKeysVar = RIGHT(@hotelKeysVar, LEN(@hotelKeysVar) - @idx)       
		if LEN(@hotelKeysVar) = 0 break       
	END 
	
	 -- MEG00030302. Golubinsky. 07.06.2011
	SET @qt_tourMessage = ''
	SELECT TOP 1 @qt_tourMessage = MS_Text
	FROM [Messages] with (nolock) WHERE (( @FromDate between MS_ServiceDateBeg AND MS_ServiceDateEnd) AND MS_IsDeleted IS NULL OR MS_IsDeleted = 0) AND MS_LGId IN
			(SELECT DISTINCT LM_LGId FROM LimitationGroups, Limitations, LimitationTours WITH (NOLOCK)
				WHERE LM_ID = LD_LMId AND LG_ID = LM_LGId AND LD_TRKey = @TurListKey)
	ORDER BY MS_ServiceDateBeg, MS_ServiceDateEnd ASC
	-- MEG00030302 end
	
	UPDATE #tmp SET QuotaPlaces = @quotas, QuotaAllPlaces = @allQuotas, TourMessage = @qt_tourMessage
		WHERE current of hSql
	
	FETCH NEXT FROM hSql INTO @HotelKey, @HotelKeys, @RoomKey, @RoomCategoryKey, @FromDate, @HotelPartnerKey, @HotelDay,@HotelNights,@TourDuration,@TourKey,@TourMessage,@TurListKey
END
CLOSE hSql
DEALLOCATE hSql

select * from #tmp

drop table #tmp
drop table #tmp1

GO

grant exec on [dbo].[mwAutobusQuotes] to public
GO
/*********************************************************************/
/* end sp_mwAutobusQuotes.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwCheckQuotaOneResult.sql */
/*********************************************************************/
if object_id('dbo.mwCheckQuotaOneResult', 'p') is not null
	drop proc dbo.mwCheckQuotaOneResult
go

CREATE PROCEDURE [dbo].[mwCheckQuotaOneResult]
(
	@useCache bit,
	@serviceKey int,
	@serviceCode int,
	@serviceSubCode1 int,
	@serviceDateBegin datetime,
	@serviceDateEnd datetime,
	@partnerKey int,
	@agentKey int,
	@tourDuration smallint,
	@quotaPlaces smallint,
	@pax smallint = null,
	@checkQuotesResult nvarchar(max) output,
	@freePlaces int output,
	@totalPlaces int output,
	@firstQuotaParts nvarchar(max) = '' output
)
AS
begin
	-- функция - обёртка над вызовом хранимой процедуры WcfQuotaCheckOneResult для 
	-- более удобной работы с возвращаемым результатом

	--<VERSION>9.2.18.1</VERSION>
	--<DATE>2013-02-19</DATE>

	create table #resultTable
	(
		id int identity(1, 1),
		value nvarchar(max)
	)
	
	declare @wasError as bit
	declare @errorMessage as nvarchar(150)
	
	set @wasError = 0

	begin try
		insert into #resultTable
		exec WcfQuotaCheckOneResult 
				@useCache, @serviceKey, @serviceCode, @serviceSubCode1, 
				@serviceDateBegin, @serviceDateEnd, @partnerKey, 
				@agentKey, @tourDuration, @quotaPlaces, @pax
		
		-- get results
		select @checkQuotesResult = value from #resultTable where id = 1
		select @freePlaces = value from #resultTable where id = 4
		select @totalPlaces = value from #resultTable where id = 5
		if (@checkQuotesResult='QuotaExist')
		begin
			select @firstQuotaParts = value from #resultTable where id = 6
		end
	end try
	begin catch
		-- mask error for release resources
		set @wasError = 1
		set @errorMessage = ERROR_MESSAGE()
	end catch
	
	-- release resources	
	drop table #resultTable
	
	-- rethrow error
	if @wasError = 1
	begin
		RAISERROR(@errorMessage, 15, 1)
	end
end

GO

grant exec on dbo.mwCheckQuotaOneResult to public
GO
/*********************************************************************/
/* end sp_mwCheckQuotaOneResult.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwEnablePriceTour.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwEnablePriceTour]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwEnablePriceTour]
GO

CREATE procedure [dbo].[mwEnablePriceTour] @tourkey int, @enabled smallint, @calcKey int = null
as
begin

	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-10</DATE>

	update tp_tours with(rowlock)
	set to_isenabled = @enabled
	where to_key = @tourkey

	-- если есть репликация и это не подписчик, прекратим выполнение
	if dbo.mwReplIsPublisher() > 0
	begin
		return
	end

	declare @cityFromKey int
	declare @countryKey int

	select @countryKey = sd_cnkey, @cityFromKey = sd_ctkeyfrom from dbo.mwSpoDataTable where sd_tourkey = @tourkey 

	declare @today varchar(10)
	set @today = '''' + convert(varchar(10),getdate(), 112 ) + ''''

	declare @mwSinglePrice nvarchar(10)
	select @mwSinglePrice = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePrice'), N'0')
	
	if (dbo.mwReplIsPublisher() > 0)
		set @mwSinglePrice = '0'

	if(@mwSinglePrice != '0')
	begin
		declare @mwSinglePriceType nvarchar(10) -- 'last' or 'min'
		select @mwSinglePriceType = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceType'), N'last') 

		declare @mwSinglePriceAllTours nvarchar(10) -- single price for tour
		select @mwSinglePriceAllTours = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllTours'), N'0') 

		declare @mwSinglePriceAllHotelPrt nvarchar(10) -- single price for hotel partner
		select @mwSinglePriceAllHotelPrt = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllHotelPrt'), N'0') 

		declare @mwSinglePriceAllFlightPrt nvarchar(10) -- single price for flight partner
		select @mwSinglePriceAllFlightPrt = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllFlightPrt'), N'0')

		declare @mwSinglePriceAllTourTypes nvarchar(10) -- single price for tour type
		select @mwSinglePriceAllTourTypes = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllTourTypes'), N'0')

		declare @mwSinglePriceAllDeparts nvarchar(10) -- single price for depart from
		select @mwSinglePriceAllDeparts = isnull(dbo.GetCountrySetting(@countryKey, 'mwSinglePriceAllDeparts'), N'1')
	end

	declare @sql varchar(8000)

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
	where SS_ParmName = 'MWDivideByCountry'
 
	if (@countryKey is not null and @cityFromKey is not null)
	begin
		declare @tableName nvarchar(100)
		if (@mwSearchType = 0)
			set @tableName = 'dbo.mwPriceDataTable'
		else
			set @tableName = dbo.mwGetPriceTableName(@countryKey, @cityFromKey)

		create table #tmpTours (tourkey int)

		if(@mwSinglePrice != '0')
		begin
			if(@enabled > 0 and @mwSinglePriceAllTours != '0') -- turn the tour on
			begin	
				-- disable all prices for main places that greater than new prices (setting = min) or
				-- than are more old than new prices (setting = last)
				declare @sqlwhere varchar(8000)

				set @sqlwhere = 'where
					' + @tableName + '.pt_main > 0 and 
					' + @tableName + '.pt_tourdate >= getdate() and
					' + @tableName + '.pt_isenabled > 0 and exists(select 1 from ' + @tableName + ' tweb with(nolock)
					where tweb.pt_main > 0 and tweb.pt_tourdate >= getdate() and tweb.pt_tourkey = ' + ltrim(str(@tourkey)) + ' and
					' + @tableName + '.pt_hdkey = tweb.pt_hdkey and
					' + @tableName + '.pt_rmkey = tweb.pt_rmkey and
					' + @tableName + '.pt_rckey = tweb.pt_rckey and
					' + @tableName + '.pt_ackey = tweb.pt_ackey and
					' + @tableName + '.pt_pnkey = tweb.pt_pnkey and
					' + @tableName + '.pt_tourdate = tweb.pt_tourdate and
					' + @tableName + '.pt_days = tweb.pt_days and
					' + @tableName + '.pt_nights = tweb.pt_nights'
						if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
							set @sqlwhere = @sqlwhere + ' and
					' + @tableName + '.pt_hdpartnerkey = tweb.pt_hdpartnerkey'		
						
						if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
							set @sqlwhere = @sqlwhere + ' and
					' + @tableName + '.pt_chprkey = tweb.pt_chprkey'

						if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
							set @sqlwhere = @sqlwhere + ' and
					' + @tableName + '.pt_tourtype = tweb.pt_tourtype'

						if(@mwSinglePriceAllDeparts = '0') -- single price for departfrom
							set @sqlwhere = @sqlwhere + ' and
					' + @tableName + '.pt_ctkeyfrom = tweb.pt_ctkeyfrom'

						if(@mwSinglePriceType = 'min')
							set @sqlwhere = @sqlwhere + ' and
					' + @tableName + '.pt_price > tweb.pt_price'
					
				set @sqlwhere = @sqlwhere + ')'

					if(@mwSinglePriceAllTours = '0')
						set @sqlwhere = @sqlwhere + ' and
				' + @tableName + '.pt_tourkey = ' + ltrim(str(@tourkey))
					else
						set @sqlwhere = @sqlwhere + ' and
				' + @tableName + '.pt_tourkey != '+ ltrim(str(@tourkey))
					

				set @sql = 'select distinct pt_tourkey from ' + @tableName + ' with (nolock) ' + @sqlWhere

				insert into #tmpTours exec(@sql)
				create index x_tmptokey on #tmpTours (tourkey)

				-- заполним таблицу с ценами, которые нужно выключить
				create table #tmpPricesOff(pt_pricekey int)
				set @sql = 'select pt_pricekey from ' + @tableName + ' with (nolock) ' + @sqlWhere
				insert into #tmpPricesOff exec(@sql)

				-- выключаем цены
				set @sql = '
				update ' + @tableName + ' with(rowlock)
				set pt_isenabled = 0, pt_autodisabled = 1 
				where '+ @tableName + '.pt_pricekey in (select pt_pricekey from #tmpPricesOff) '

				--print @sql
				exec(@sql) -- turn off max or old prices for main places

				-- выключаем вслед за ними соответствующие данные из tp_turdates
				set @sql = '
				update updturdates with(rowlock)
				set td_autodisabled = 1
				from tp_turdates updturdates
					inner join ' + @tableName + ' on ' + @tableName + '.pt_tourkey = updturdates.td_tokey
														and ' + @tableName + '.pt_tourdate = updturdates.td_date
				where '+ @tableName + '.pt_pricekey in (select pt_pricekey from #tmpPricesOff) and not exists (select 1 from '
				+@tableName + ' where '+@tableName+'.pt_tourdate = updturdates.td_date and '+@tableName+'.pt_isenabled=1 
				and '+@tableName+'.pt_tourkey = updturdates.td_tokey)'


				--print @sql
				exec (@sql)
			end -- if(@enabled > 0 and @mwSinglePriceAllTours != '0')
		end -- if(@mwSinglePrice != '0')


		----------------=============== Обработаем снятие тура из интернета ===============----------------
		--======== В этом блоке будем искать цены, взамен снимаемых для их последующей реанимации ========--
		--==== Вместе с ценами будем обновлять соответствующие данные из mwSpoDataTable и tp_turdates ====--
		if (@enabled = 0 and @mwSinglePriceAllTours != '0' and (@mwSinglePriceType = 'last' or @mwSinglePriceType = 'min')) -- turn off the tour
		begin
			-- сформируем запрос, который возвращает список ключей цен для реанимации
			declare @groupbyexpr varchar(1024),
					@havingexpr varchar(1024),
					@pricekeyexpr varchar(1024),
					@joinclauseexpr varchar(1024),
					@pricetableexpr varchar(8000)
					
			set @joinclauseexpr = ''
			set @groupbyexpr = ''
			
			if (@mwSinglePriceAllHotelPrt = '0')
			begin
				set @joinclauseexpr = @joinclauseexpr + ' and 
					tweb2.pt_hdpartnerkey = tweb.pt_hdpartnerkey'
				set @groupbyexpr = @groupbyexpr + 'tweb.pt_hdpartnerkey, '
			end
			if (@mwSinglePriceAllFlightPrt = '0')
			begin
				set @joinclauseexpr = @joinclauseexpr + ' and 
					tweb2.pt_chprkey = tweb.pt_chprkey'
				set @groupbyexpr = @groupbyexpr + 'tweb.pt_chprkey, '
			end
			if (@mwSinglePriceAllTourTypes = '0')
			begin
				set @joinclauseexpr = @joinclauseexpr + ' and 
					tweb2.pt_tourtype = tweb.pt_tourtype'
				set @groupbyexpr = @groupbyexpr + 'tweb.pt_tourtype, '
			end
			if (@mwSinglePriceAllDeparts = '0')
			begin
				set @joinclauseexpr = @joinclauseexpr + ' and 
					tweb2.pt_ctkeyfrom = tweb.pt_ctkeyfrom'
				set @groupbyexpr = @groupbyexpr + 'tweb.pt_tourtype, '
			end

			if (@mwSinglePriceType = 'last')
			begin
				set @groupbyexpr = @groupbyexpr + 'tweb.pt_pricekey'
				set @pricekeyexpr = 'max(tweb2.pt_pricekey)'
			end
			else if (@mwSinglePriceType = 'min')
			begin
				set @groupbyexpr = 'tweb.pt_price'
				set @pricekeyexpr = '(
										select top 1 pt_pricekey from #tablename# tweb3 with (nolock)
										where	tweb3.pt_price = min(tweb2.pt_price) and
												tweb3.pt_main > 0 and
												tweb3.pt_hdkey = tweb.pt_hdkey and
												tweb3.pt_rmkey = tweb.pt_rmkey and
												tweb3.pt_rckey = tweb.pt_rckey and
												tweb3.pt_ackey = tweb.pt_ackey and
												tweb3.pt_pnkey = tweb.pt_pnkey and
												tweb3.pt_tourdate = tweb.pt_tourdate and
												tweb3.pt_days = tweb.pt_days and
												tweb3.pt_nights = tweb.pt_nights and
												tweb3.pt_ctkeyfrom = tweb.pt_ctkeyfrom 	and
												tweb3.pt_tourkey <> #tourkey# and
												(tweb3.pt_isenabled = 1 or (tweb3.pt_isenabled = 0 and tweb3.pt_autodisabled = 1)) #whereclause#
										order by 1 desc
									)'
				set @pricekeyexpr = replace(@pricekeyexpr, '#whereclause#', replace(@joinclauseexpr, 'tweb2', 'tweb3'))
			end
			
			set @pricetableexpr = '				select #pricekey# as pt_pricekey
				from #tablename# tweb	with (nolock)
					inner join #tablename# tweb2 with (nolock) on
									tweb2.pt_main = tweb.pt_main and
									tweb2.pt_hdkey = tweb.pt_hdkey and
									tweb2.pt_rmkey = tweb.pt_rmkey and
									tweb2.pt_rckey = tweb.pt_rckey and
									tweb2.pt_ackey = tweb.pt_ackey and
									tweb2.pt_pnkey = tweb.pt_pnkey and
									tweb2.pt_tourdate = tweb.pt_tourdate and
									tweb2.pt_days = tweb.pt_days and
									tweb2.pt_nights = tweb.pt_nights and
									tweb2.pt_ctkeyfrom = tweb.pt_ctkeyfrom 	and
									tweb2.pt_tourkey <> tweb.pt_tourkey and
									(tweb2.pt_isenabled = 1 or (tweb2.pt_isenabled = 0 and tweb2.pt_autodisabled = 1)) #joinclause#
				where tweb.pt_main > 0 and tweb.pt_tourkey = #tourkey# and tweb.pt_tourdate >= getdate()
				group by tweb.pt_hdkey,
					tweb.pt_rmkey,
					tweb.pt_rckey,
					tweb.pt_ackey,
					tweb.pt_pnkey,
					tweb.pt_tourdate,
					tweb.pt_days,
					tweb.pt_nights, 
					tweb.pt_ctkeyfrom, 
					#groupby#'

			set @pricetableexpr = replace(@pricetableexpr, '#pricekey#', @pricekeyexpr)
			set @pricetableexpr = replace(@pricetableexpr, '#groupby#', @groupbyexpr)
			set @pricetableexpr = replace(@pricetableexpr, '#joinclause#', @joinclauseexpr)
			set @pricetableexpr = replace(@pricetableexpr, '#tourkey#', convert(varchar, @tourkey))
			set @pricetableexpr = replace(@pricetableexpr, '#tablename#', @tableName)

			-- закончили формирование #pricetable#, который возвращает список ключей цен для реанимации

			create table #tmpPrices (pt_pricekey int)
			insert into #tmpPrices exec (@pricetableexpr)

			-- шаблон запроса, который выставляет в интернет оптимальные цены взамен цен, снимаемых из интернета
			set @sql = '
			update updweb with(rowlock)
			set pt_isenabled = 1,
				pt_autodisabled = 0
			from #tablename# updweb
				inner join #tmpPrices prices on updweb.pt_pricekey = prices.pt_pricekey 
			where updweb.pt_main > 0 and (updweb.pt_isenabled = 1 or (updweb.pt_isenabled = 0 and updweb.pt_autodisabled = 1)) and updweb.pt_tourdate >= getdate() and updweb.pt_tourkey != #tourkey#
'
			set @sql = replace(@sql, '#tourkey#', convert(varchar, @tourkey))
			set @sql = replace(@sql, '#tablename#', @tableName)

			--print @sql
			exec (@sql)

			-- шаблон запроса, который реанимирует данные из mwSpoDataTable вслед за ценами
			set @sql = '
				update updspo with(rowlock)
				set sd_isenabled = 1
				from mwSpoDataTable updspo
				inner join
				(
					select updweb.pt_tourkey, updweb.pt_cnkey, updweb.pt_ctkeyfrom, updweb.pt_hdkey, updweb.pt_pnkey
					from #tablename# updweb
						inner join #tmpPrices prices on updweb.pt_pricekey = prices.pt_pricekey 
					where updweb.pt_main > 0 and (updweb.pt_isenabled = 1 or (updweb.pt_isenabled = 0 and updweb.pt_autodisabled = 1)) and updweb.pt_tourdate >= getdate() and updweb.pt_tourkey != #tourkey#
				) tbl
					on updspo.sd_tourkey = tbl.pt_tourkey
						and updspo.sd_cnkey = tbl.pt_cnkey
						and updspo.sd_ctkeyfrom = tbl.pt_ctkeyfrom
						and updspo.sd_hdkey = tbl.pt_hdkey
						and updspo.sd_pnkey = tbl.pt_pnkey'

			set @sql = replace(@sql, '#tourkey#', convert(varchar, @tourkey))
			set @sql = replace(@sql, '#tablename#', @tableName)
--print @sql
			exec (@sql)

			-- шаблон запроса, который реанимирует данные из tp_turdates вслед за ценами
			set @sql = '			
				update updturdates with(rowlock)
				set td_autodisabled = 0
				from tp_turdates updturdates
				inner join
				(
					select updweb.pt_tourkey, updweb.pt_tourdate
					from #tablename# updweb
						inner join #tmpPrices prices on updweb.pt_pricekey = prices.pt_pricekey 
					where updweb.pt_main > 0 and (updweb.pt_isenabled = 1 or (updweb.pt_isenabled = 0 and updweb.pt_autodisabled = 1)) and updweb.pt_tourdate >= getdate() and updweb.pt_tourkey != #tourkey#
				) tbl
					on updturdates.td_tokey = tbl.pt_tourkey
						and updturdates.td_date = tbl.pt_tourdate'

			set @sql = replace(@sql, '#tourkey#', convert(varchar, @tourkey))
			set @sql = replace(@sql, '#tablename#', @tableName)
			exec (@sql)	

		end --if (@enabled = 0 and @mwSinglePriceAllTours != '0' and (@mwSinglePriceType = 'last' or @mwSinglePriceType = 'min'))

		-- Выключим все цены по текущему туру с признаком autodisabled = 1
		-- чтобы те цены, которые не будут включены, могли быть реанимированы позднее
		if (@enabled > 0 and @mwSinglePrice != '0')
		begin
			set @sql = '
			update ' + @tableName + ' with(rowlock)
			set pt_isenabled = 0, pt_autodisabled = 1
			where pt_tourdate >= ' + @today +' and pt_tourkey = ' + CAST(@tourkey as varchar)

			exec (@sql)
		end

		if(@calcKey is null)
		begin
			set @sql = '
			update ' + @tableName + ' with(rowlock)
			set pt_isenabled = ' + CAST(@enabled as varchar) + ', pt_autodisabled = 0
			where pt_tourkey = ' + CAST(@tourkey as varchar)
		end
		else
		begin
			set @sql = '
			update ' + @tableName + ' with(rowlock)
			set pt_isenabled = ' + CAST(@enabled as varchar) + ', pt_autodisabled = 0
			where pt_pricekey in (select tp_key from tp_prices with(nolock) where TP_CalculatingKey = ' + CAST(@calcKey as varchar) + ') '
		end

		if(@enabled > 0)
		begin
			if (@mwSinglePrice != '0')
			begin
				-- enable all new prices for main places that are min (setting = min) or
				-- that are new (setting = last)
				set @sql = @sql + ' and pt_main > 0 and not exists(
				select 1 from ' + @tableName + ' pt with(nolock)
				where 
				pt.pt_main > 0 and
				pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
				pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
				pt.pt_rckey = ' + @tableName + '.pt_rckey and
				pt.pt_ackey = ' + @tableName + '.pt_ackey and
				pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
				pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
				pt.pt_days = ' + @tableName + '.pt_days and
				pt.pt_nights = ' + @tableName + '.pt_nights'
				if(@mwSinglePriceAllHotelPrt = '0') -- single price for hotel partner
					set @sql = @sql + ' and
				pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey'
				
				if(@mwSinglePriceAllFlightPrt = '0') -- single price for flight partner
					set @sql = @sql + ' and
				pt.pt_chprkey = ' + @tableName + '.pt_chprkey'

				if(@mwSinglePriceAllTourTypes = '0') -- single price for tour type
					set @sql = @sql + ' and
				pt.pt_tourtype = ' + @tableName + '.pt_tourtype'

				if(@mwSinglePriceAllDeparts = '0') -- single price for departfrom
					set @sql = @sql + ' and
				pt_ctkeyfrom = ' + ltrim(str(@cityFromKey))

				if(@mwSinglePriceType = 'last')
					set @sql = @sql + '	and
				pt.pt_key > ' + @tableName + '.pt_key'
				else if(@mwSinglePriceType = 'min')
					set @sql = @sql + '	and
				pt.pt_price < ' + @tableName + '.pt_price'

					if(@mwSinglePriceAllTours = '0')
						set @sql = @sql + ' and
				pt_tourkey = ' + ltrim(str(@tourkey))
					else
						set @sql = @sql + ' and pt.pt_isenabled > 0 and
				pt_tourkey != ' + ltrim(str(@tourkey))

				set @sql = @sql + ')'		
			end
		end
		--print @sql
		exec (@sql)

		if (@mwSinglePrice != '0')
		begin
			-- enable all new prices for extra places for which exist new prices for main places (in the new tour)
			set @sql = '
			update ' + @tableName + ' with(rowlock)
			set pt_isenabled = 1, pt_autodisabled = 0
			where pt_tourdate >= ' + @today +'
			and isnull(pt_main, 0) <= 0 and exists(
			select 1 from ' + @tableName + ' pt with(nolock)
			where pt.pt_tourkey = ' + @tableName + '.pt_tourkey and
			pt.pt_isenabled > 0 and
			pt.pt_main > 0 and
			pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
			pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
			pt.pt_rckey = ' + @tableName + '.pt_rckey and
			pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
			pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
			pt.pt_days = ' + @tableName + '.pt_days and
			pt.pt_nights = ' + @tableName + '.pt_nights and
			pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey)'
--				print @sql
			exec(@sql)

			-- disable all old prices for extra places for which does not exist old prices for main places (in the same old tour)
			set @sql = '
			update ' + @tableName + ' with(rowlock)
			set pt_isenabled = 0, pt_autodisabled = 0
			where pt_tourdate >= ' + @today +'
			and isnull(pt_main, 0) <= 0 and pt_isenabled > 0 and not exists(
			select 1 from ' + @tableName + ' pt with(nolock)
			where pt.pt_tourkey = ' + @tableName + '.pt_tourkey and
			pt.pt_isenabled > 0 and
			isnull(pt.pt_main, 0) > 0 and
			pt.pt_hdkey = ' + @tableName + '.pt_hdkey and
			pt.pt_rmkey = ' + @tableName + '.pt_rmkey and
			pt.pt_rckey = ' + @tableName + '.pt_rckey and
			pt.pt_pnkey = ' + @tableName + '.pt_pnkey and
			pt.pt_tourdate = ' + @tableName + '.pt_tourdate and
			pt.pt_days = ' + @tableName + '.pt_days and
			pt.pt_nights = ' + @tableName + '.pt_nights and
			pt.pt_hdpartnerkey = ' + @tableName + '.pt_hdpartnerkey)'
			--print @sql
			exec(@sql)
		end
	end

	update dbo.mwSpoDataTable set sd_isenabled = @enabled where sd_tourkey = @tourkey

	if(@mwSinglePrice != '0')
	begin	
		declare @viewName nvarchar(100)
		if (@mwSearchType = 0)
			set @viewName = 'dbo.mwPriceTable'
		else
			set @viewName = dbo.mwGetPriceViewName(@countryKey, @cityFromKey)

		set @sql = '
		update dbo.mwSpoDataTable with (rowlock)
		set sd_isenabled = 0
		where sd_cnkey = ' + ltrim(rtrim(str(@countryKey))) + ' and sd_ctkeyfrom = ' + ltrim(rtrim(str(@cityFromKey))) + ' and
			(exists (select 1 from #tmpTours where sd_tourkey = tourkey) or sd_tourkey = ' + ltrim(str(@tourkey)) + ') and not exists(select 1 from ' + @viewName + '
			where pt_cnkey = sd_cnkey
				and pt_ctkeyfrom = sd_ctkeyfrom
				and pt_tourkey = sd_tourkey
				and pt_hdkey = sd_hdkey
				and pt_pnkey = sd_pnkey
				and (exists (select 1 from #tmpTours where sd_tourkey = tourkey) or sd_tourkey = ' + ltrim(str(@tourkey)) + '))'
		exec(@sql)
	end
end
GO

GRANT EXEC ON [dbo].[mwEnablePriceTour] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwEnablePriceTour.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwFillTP.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwFillTP]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[mwFillTP]
GO

CREATE procedure [dbo].[mwFillTP] (@tokey int, @calcKey int = null)
as
begin
	-- <date>2013-03-28</date>
	-- <version>2009.2.19.1</version>
	declare @sql varchar(4000)
	declare @source varchar(200)
	set @source = ''
	
	declare @where as varchar(4000)

	declare @tokeyStr varchar (20)
	set @tokeyStr = cast(@tokey as varchar(20))

	declare @calcKeyStr varchar (20)
	set @calcKeyStr = cast(@calcKey as varchar(20))

	if dbo.mwReplIsSubscriber() > 0 and len(dbo.mwReplPublisherDB()) > 0
		set @source = '[mt].' + dbo.mwReplPublisherDB() + '.'
	
	delete from dbo.tp_tours where to_key = @calcKey	
	if not exists(select 1 from dbo.tp_tours with(nolock) where to_key = @tokey)
	begin
		set @sql = '
		insert into dbo.tp_tours with(rowlock) (
			[TO_Key],
			[TO_TRKey],
			[TO_Name],
			[TO_PRKey],
			[TO_CNKey],
			[TO_Rate],
			[TO_DateCreated],
			[TO_DateValid],
			[TO_PriceFor],
			[TO_OpKey],
			[TO_XML],
			[TO_DateBegin],
			[TO_DateEnd],
			[TO_IsEnabled],
			[TO_PROGRESS],
			[TO_UPDATE],
			[TO_UPDATETIME],
			[TO_DateValidBegin],
			[TO_CalculateDateEnd],
			[TO_PriceCount],
			[to_attribute],
			[TO_MinPrice],
			[TO_HotelNights]
		)
		select
			[TO_Key],
			[TO_TRKey],
			[TO_Name],
			[TO_PRKey],
			[TO_CNKey],
			[TO_Rate],
			[TO_DateCreated],
			[TO_DateValid],
			[TO_PriceFor],
			[TO_OpKey],
			[TO_XML],
			[TO_DateBegin],
			[TO_DateEnd],
			[TO_IsEnabled],
			[TO_PROGRESS],
			[TO_UPDATE],
			[TO_UPDATETIME],
			[TO_DateValidBegin],
			[TO_CalculateDateEnd],
			[TO_PriceCount],
			[to_attribute],
			[TO_MinPrice],
			[TO_HotelNights]
		from
			' + @source + 'dbo.tp_tours with(nolock)
		where
			to_key = ' + @tokeyStr

		exec (@sql)
	end
	
	if(@calcKey is not null)
		delete from dbo.TP_TurDates where TD_CalculatingKey = @calcKey
	else
		delete from dbo.TP_TurDates where TD_TOKey = @tokey
		
	--if not exists(select 1 from dbo.TP_TurDates with(nolock) where td_tokey = @calcKey)
	begin
		set @sql = 
		'insert into dbo.TP_TurDates with(rowlock) (
			[TD_Key],
			[TD_TOKey],
			[TD_Date],
			[TD_UPDATE],
			[TD_CHECKMARGIN],
			[TD_CalculatingKey]
		)
		select top 10000
			r.[TD_Key],
			r.[TD_TOKey],
			r.[TD_Date],
			r.[TD_UPDATE],
			r.[TD_CHECKMARGIN],
			r.[TD_CalculatingKey]
		from
			' + @source + 'dbo.TP_TurDates as r with(nolock)
		where
			'
			
		set @where = ''
		if(@calcKey is not null)
			set @where = 'r.TD_Date in (select TP_DateBegin from ' + @source + 'dbo.TP_Prices where TP_TOKey = TD_TOKey and TP_CalculatingKey = ' + ltrim(str(@calcKey)) + ') and '
			
		set @where = @where + ' r.TD_TOKey = ' + @tokeyStr
		set @where = @where + ' and r.TD_Key not in (select TD_Key from dbo.TP_TurDates where TD_TOKey = ' + @tokeyStr + ')'

		set @sql = 'while exists (select top 1 1 from ' + @source + 'dbo.TP_TurDates as r with (nolock) where ' + @where + ')
		begin
		' + @sql + @where + '
		end'
		
		exec (@sql)		
	end	
	
    delete dbo.tp_services where ts_tokey = @tokey
	--if not exists(select 1 from dbo.tp_services with(nolock) where ts_tokey = @calcKey)
	begin
		set @sql = 
		'insert into dbo.tp_services with(rowlock) (
			[TS_Key],
			[TS_TOKey],
			[TS_SVKey],
			[TS_Code],
			[TS_SubCode1],
			[TS_SubCode2],
			[TS_CNKey],
			[TS_CTKey],
			[TS_Day],
			[TS_Days],
			[TS_Men],
			[TS_Name],
			[TS_OpPartnerKey],
			[TS_OpPacketKey],
			[TS_Attribute],
			[TS_TEMPGROSS],
			[TS_CHECKMARGIN],
			[TS_CalculatingKey]
		)
		select top 10000
			[TS_Key],
			[TS_TOKey],
			[TS_SVKey],
			[TS_Code],
			[TS_SubCode1],
			[TS_SubCode2],
			[TS_CNKey],
			[TS_CTKey],
			[TS_Day],
			[TS_Days],
			[TS_Men],
			[TS_Name],
			[TS_OpPartnerKey],
			[TS_OpPacketKey],
			[TS_Attribute],
			[TS_TEMPGROSS],
			[TS_CHECKMARGIN],
			[TS_CalculatingKey]
		from
			' + @source + 'dbo.tp_services with(nolock)
		where
			'

		set @where = ''
		set @where = 'TS_TOKey = ' + @tokeyStr
		set @where = @where + ' and TS_Key not in (select TS_Key from dbo.tp_services with (nolock))'

		set @sql = 'while exists (select top 1 1 from ' + @source + 'dbo.tp_services  as r with (nolock) where ' + @where + ')
		begin
		' + @sql + @where + '
		end'

		exec (@sql)
	end

	delete from dbo.tp_lists where ti_tokey = @tokey
	--if not exists(select 1 from dbo.tp_lists with(nolock) where ti_tokey = @calcKey)
	begin
		set @sql = 
		'insert into dbo.tp_lists with(rowlock) (
			[TI_Key],
			[TI_TOKey],
			[TI_Name],
			[TI_FirstHDKey],
			[TI_FirstHRKey],
			[TI_FirstPNKey],
			[TI_Days],
			[TI_HotelKeys],
			[TI_PansionKeys],
			[TI_HotelDays],
			[TI_FirstHDStars],
			[TI_FirstRsKey],
			[TI_SecondHDKey],
			[TI_SecondHRKey],
			[TI_SecondPNKey],
			[TI_SecondHDStars],
			[TI_SecondCtKey],
			[TI_SecondRsKey],
			[TI_CtKeyFrom],
			[TI_CtKeyTo],
			[TI_ApKeyFrom],
			[TI_ApKeyTo],
			[ti_firsthotelday],
			[ti_hdpartnerkey],
			[ti_totaldays],
			[ti_nights],
			[ti_lasthotelday],
			[ti_chkey],
			[ti_chbackkey],
			[ti_hdday],
			[ti_hdnights],
			[ti_chday],
			[ti_chbackday],
			[ti_chpkkey],
			[ti_chprkey],
			[ti_chbackpkkey],
			[ti_chbackprkey],
			[TI_FirstCtKey],
			[TI_UPDATE],
			[TI_FIRSTHOTELPARTNERKEY],
			[ti_hotelroomkeys],
			[ti_hotelstars],
			[TI_CalculatingKey]
		)
		select top 10000
			[TI_Key],
			[TI_TOKey],
			[TI_Name],
			[TI_FirstHDKey],
			[TI_FirstHRKey],
			[TI_FirstPNKey],
			[TI_Days],
			[TI_HotelKeys],
			[TI_PansionKeys],
			[TI_HotelDays],
			[TI_FirstHDStars],
			[TI_FirstRsKey],
			[TI_SecondHDKey],
			[TI_SecondHRKey],
			[TI_SecondPNKey],
			[TI_SecondHDStars],
			[TI_SecondCtKey],
			[TI_SecondRsKey],
			[TI_CtKeyFrom],
			[TI_CtKeyTo],
			[TI_ApKeyFrom],
			[TI_ApKeyTo],
			[ti_firsthotelday],
			[ti_hdpartnerkey],
			[ti_totaldays],
			[ti_nights],
			[ti_lasthotelday],
			[ti_chkey],
			[ti_chbackkey],
			[ti_hdday],
			[ti_hdnights],
			[ti_chday],
			[ti_chbackday],
			[ti_chpkkey],
			[ti_chprkey],
			[ti_chbackpkkey],
			[ti_chbackprkey],
			[TI_FirstCtKey],
			[TI_UPDATE],
			[TI_FIRSTHOTELPARTNERKEY],
			[ti_hotelroomkeys],
			[ti_hotelstars],
			[TI_CalculatingKey]
		from
			' + @source + 'dbo.tp_lists with(nolock)
		where
			'
			
		set @where = ''
		if(@calcKey is not null)
			set @where = 'TI_Key in (select TP_TIKey from ' + @source + 'dbo.TP_Prices where TP_TOKey = TI_TOKey and TP_CalculatingKey = ' + ltrim(str(@calcKey)) + ') and '
		
		set @where = @where + 'TI_TOKey = ' + @tokeyStr
		set @where = @where + ' and TI_Key not in (select TI_Key from dbo.tp_lists with (nolock))'

		set @sql = 'while exists (select top 1 1 from ' + @source + 'dbo.tp_lists as r with (nolock) where ' + @where + ')
		begin
		' + @sql + @where + '
		end'

		exec (@sql)
	end

	delete from dbo.tp_servicelists where tl_tokey = @tokey
	--if not exists(select 1 from dbo.tp_servicelists with(nolock) where tl_tokey = @calcKey)
	begin	
		set @sql = 
		'
		set identity_insert tp_serviceLists on

		insert into dbo.tp_servicelists with(rowlock) (
			[TL_Key],
			[TL_TOKey],
			[TL_TSKey],
			[TL_TIKey],
			[TL_CalculatingKey]
		)
		select top 10000
			[TL_Key],
			[TL_TOKey],
			[TL_TSKey],
			[TL_TIKey],
			[TL_CalculatingKey]
		from
			' + @source + 'dbo.tp_servicelists with(nolock)
		where
			'

		set @where = 'TL_TOKey = ' + @tokeyStr
		set @where = @where + ' and TL_Key not in (select TL_Key from dbo.tp_servicelists with (nolock))'

		set @sql = 'while exists (select top 1 1 from ' + @source + 'dbo.tp_servicelists as r with (nolock) where ' + @where + ')
		begin
		' + @sql + @where + '
		end
		
		set identity_insert tp_serviceLists off'

		exec (@sql)
	end

	delete from dbo.tp_prices where tp_tokey = @tokey
	--if not exists(select 1 from dbo.tp_prices with(nolock) where tp_tokey = @calcKey)
	begin
		set @sql = 
		'insert into dbo.tp_prices with(rowlock) (
			[TP_Key],
			[TP_TOKey],
			[TP_DateBegin],
			[TP_DateEnd],
			[TP_Gross],
			[TP_TIKey],
			[TP_CalculatingKey]
		)
		select top 5000
			[TP_Key],
			[TP_TOKey],
			[TP_DateBegin],
			[TP_DateEnd],
			[TP_Gross],
			[TP_TIKey],
			[TP_CalculatingKey]
		from
			' + @source + 'dbo.tp_prices with(nolock)
		where
			'

		set @where = ''
		if(@calcKey is not null)
			set @where = 'TP_CalculatingKey = ' + @calcKeyStr
		else
			set @where = 'TP_TOKey = ' + @tokeyStr
			
		set @where = @where + ' and TP_Key not in (select TP_Key from dbo.tp_prices with (nolock))'

		set @sql = 'while exists (select top 1 1 from ' + @source + 'dbo.tp_prices as r with (nolock) where ' + @where + ')
		begin
		' + @sql + @where + '
		end'
		
		exec (@sql)
	end
end
GO

GRANT EXEC ON [dbo].[mwFillTP] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwFillTP.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetMinNearestTourPrices.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sysobjects WHERE id = OBJECT_ID(N'[dbo].[mwGetMinNearestTourPrices]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[mwGetMinNearestTourPrices]
GO

-- =============================================
-- Author:		Golubinsky
-- Create date: 26.03.2013
-- Description:	Возвращает минимальные цены по туру на ближайшую дату
-- =============================================
CREATE PROCEDURE [dbo].[mwGetMinNearestTourPrices] 
(
	@TourListKey int, 
	@RoomTypeKey int = null
)
AS
BEGIN

--<VERSION>ALL</VERSION>
--<DATE>2011-10-13</DATE>

	CREATE TABLE #result
	(
			[HotelKey] int					-- ключ отеля
			,[HotelName] nvarchar(100)		-- название отеля
			,[HotelCategory] nvarchar(100)	-- категория отеля
			,[TourMinPrice] decimal			-- минимальная цена
			,[Nights] int					-- количество ночей
			,[Days] int						-- количество дней
			,[Pansion] nvarchar(100)		-- питание в отеле
			,[PansionKey] int				-- ключ питания в отеле
			,[TourDate] datetime			-- дата заезда
			,[TourKey] int					-- ключ рассчитанного тура
	)
	
	-- проверка секционированности таблицы цен туров
	DECLARE @mwSearchType AS INT
	SELECT @mwSearchType=isnull(SS_ParmValue,1) FROM dbo.systemsettings 
	WHERE SS_ParmName='MWDivideByCountry'
	
	-- имя таблицы поиска
	DECLARE @searchTableName AS NVARCHAR(25)
	SET @searchTableName = N'mwPriceDataTable'
	
	IF(@mwSearchType <> 0)
	BEGIN
		-- таблица секционирована
		-- поиск ключа страны и города по ключу тура для получения имени
		-- секционированной таблицы цен туров
		DECLARE @CountryKey AS INT
		DECLARE @CityKey AS INT
		
		SELECT top 1 @CountryKey = tpt.TO_CNKey, @CityKey = tl.TL_CTDepartureKey
		FROM TP_Tours tpt
		INNER JOIN tbl_TurList tl
		ON tpt.TO_TRKey = tl.TL_KEY
		WHERE tl.TL_KEY = @TourListKey
		
		SET @searchTableName = dbo.mwGetPriceTableName(@CountryKey, @CityKey)
		
	END
	
	-- построение запроса
	DECLARE @QueryText AS NVARCHAR(4000)
	
	-- минимальная дата	
	SET @QueryText = 'DECLARE @minTourDate as datetime 	
	select top 1 @minTourDate = p.pt_tourdate from ' + @searchTableName + ' p
	where p.pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey) +
	' AND p.pt_tourdate > ''' + CONVERT(NVARCHAR(4000), GETUTCDATE(), 102) + ''''
	
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN
	
		SET @QueryText = @QueryText + ' AND p.pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey)
	
	END
	
	SET @QueryText = @QueryText + ' ORDER BY p.pt_tourdate asc; '
	
	-- цены на эту дату
	SET @QueryText = @QueryText + ' SELECT l.[HotelKey], r.[HotelName]
				, r.[HotelCategory]	
				, case 
					when r.pt_topricefor = 1 then r.[TourMinPrice]/r.[RM_NPLACES]	-- цены за номер, делим на количество мест
				 	else r.[TourMinPrice]											-- цены за человека
				  end as [TourMinPrice]
				, r.[Nights]		
				, r.[Days]		
				, r.[Pansion]		
				, r.[PansionKey]
				, r.[PansionCode]
				, r.[TourDate]
				, r.[PriceKey]
				, r.[Rate]
				, r.[HotelDescriptionUrl]
				, r.[CountryKey]
				, r.[DepartFromCityKey]
				, r.[TourKey]
from
( select pp.pt_HDKEY [HotelKey], min(pp.pt_price) pt_price
				FROM mwPriceDataTable pp WITH (NOLOCK)
				WHERE pp.pt_tourdate = @minTourDate 
				AND pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey)
				
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN

		SET @QueryText = @QueryText + ' AND pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey) + ' '

	END				
				
			SET @QueryText = @QueryText	 + ' GROUP BY pp.pt_hdkey, pp.pt_tourdate ) as l
left join (
SELECT 
				  h.HD_KEY [HotelKey]
				, hd_name [HotelName]
				, hd_stars [HotelCategory]	
				, p.pt_price [TourMinPrice]
				, pt_nights [Nights]		
				, pt_days [Days]		
				, pt_pnname [Pansion]		
				, p.pt_pnkey [PansionKey]
				, p.pt_pncode [PansionCode]
				, p.pt_tourdate [TourDate]
				, MAX(p.pt_pricekey) [PriceKey]
				, p.pt_Rate [Rate]
				, p.pt_hotelurl [HotelDescriptionUrl]
				, rr.RM_NPLACES as [RM_NPLACES]
				, p.pt_topricefor as [pt_topricefor]
				, p.pt_cnkey as [CountryKey]
				, p.pt_ctkeyfrom as [DepartFromCityKey]
				, p.pt_tourkey as [TourKey]
			FROM mwPriceDataTable p WITH (NOLOCK)
				LEFT JOIN HotelDictionary h WITH (NOLOCK) ON pt_hdkey = hd_key
				LEFT JOIN Rooms rr on p.pt_rmkey = rr.RM_KEY	
			WHERE p.pt_tourdate = @minTourDate
			AND pt_tlkey = ' + CONVERT(NVARCHAR(4000), @TourListKey)
			
	IF (@RoomTypeKey IS NOT NULL)
	BEGIN

		SET @QueryText = @QueryText + ' AND pt_rmkey = ' + CONVERT(NVARCHAR(4000), @RoomTypeKey) + ' '

	END
			
		SET @QueryText = @QueryText + 'GROUP BY h.HD_KEY, hd_name, hd_stars, p.pt_price, pt_nights, pt_days, pt_pnname,
						p.pt_pnkey, p.pt_pncode, p.pt_tourdate, p.pt_Rate, p.pt_hotelurl, rr.RM_NPLACES,
						p.pt_topricefor, p.pt_cnkey, p.pt_ctkeyfrom, p.pt_tourkey) as r
on r.[HotelKey] = l.[HotelKey] and l.[pt_price] = r.[TourMinPrice]';
							
	-- выполнение запроса, наполнение выходной таблицы
	exec (@QueryText)
	
END

GO

GRANT EXECUTE ON [dbo].[mwGetMinNearestTourPrices] TO [public]
GO
/*********************************************************************/
/* end sp_mwGetMinNearestTourPrices.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetSearchFilter.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwGetSearchFilter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetSearchFilter]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-11</DATE>
CREATE PROCEDURE [dbo].[mwGetSearchFilter]
	@datesInterval INT = 30,
	@availableDepartFromCityKeys VARCHAR(1000) = '',
	@availableCountryKeys VARCHAR(1000) = '',
	@availableTourTypeKeys VARCHAR(1000) = '',
	@availableResortKeys VARCHAR(1000) = '',
	@availableCityKeys VARCHAR(1000) = '',
	@availableTourKeys VARCHAR(1000) = '',
	@availableHotelKeys VARCHAR(1000) = ''
AS
BEGIN
	SET NOCOUNT ON
			
	DECLARE @currentDate DATETIME
	SET @currentDate = CONVERT(DATETIME, CONVERT(VARCHAR(20), GETDATE(), 101));
	
	WITH departFromCityKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableDepartFromCityKeys, ',')
	),
    countryKeys(Id) AS
    (
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableCountryKeys, ',')
	),
	tourTypeKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableTourTypeKeys, ',')
	),
	resortKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableResortKeys, ',')
	),
	cityKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableCityKeys, ',')
	),
	tourKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableTourKeys, ',')
	),
	hotelKeys(Id) AS
	(
		SELECT Item AS Id FROM dbo.DelimitedSplit(@availableHotelKeys, ',')
	)
	    
	SELECT sd_key AS [Key], sd_tourkey AS PriceTourKey, TO_Name AS PriceTourName, sd_cnkey AS CountryKey,
		CN_NAME AS CountryName, sd_hdkey AS HotelKey, HD_NAME + ' ' + HD_STARS AS HotelName,
		HD_STARS AS HotelStars, sd_ctkey AS CityKey,
		(
			SELECT TOP 1 CT_NAME
			FROM dbo.CityDictionary WITH(NOLOCK)
			WHERE CT_KEY = sd_ctkey
		) AS CityName, 
		ISNULL(sd_rskey, -1) AS ResortKey, ISNULL(RS_NAME,'') AS ResortName, sd_tlkey AS TourKey,
		sd_ctkeyfrom AS DepartureFromCityKey,
		ISNULL
		(
			(SELECT TOP 1 CT_NAME FROM CityDictionary WITH(NOLOCK) WHERE CT_KEY = sd_ctkeyfrom),
			'-Без перелета-'
		) AS DepartureFromCityName,
		ISNULL(sd_ctkeyto, -1) AS DepartureToCityKey,
		ISNULL
		(
			(SELECT TOP 1 CT_NAME FROM CityDictionary WITH(NOLOCK) WHERE CT_KEY = sd_ctkeyto),
			''
		) AS DepartureToCityName, sd_tourtype AS TourTypeKey, TP_NAME AS TourTypeName, sd_pnkey AS PansionKey,
		PN_CODE AS PansionCode, ISNULL(HD_HTTP, '') AS HotelUrl, ISNULL(rm_key, -1) as RoomKey,
		ISNULL(rm_name, '') as RoomName
	FROM mwSpoDataTable WITH(NOLOCK)
		INNER JOIN TP_Tours WITH(NOLOCK) ON TO_Key = sd_tourkey
		INNER JOIN tbl_Country WITH(NOLOCK) ON CN_KEY = sd_cnkey
		INNER JOIN HotelDictionary WITH(NOLOCK) ON HD_KEY = sd_hdkey
		INNER JOIN CityDictionary WITH(NOLOCK) ON CT_KEY = sd_ctkey
		INNER JOIN TipTur WITH(NOLOCK) ON TP_KEY = sd_tourtype
		INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY = sd_pnkey
		LEFT JOIN Rooms WITH(NOLOCK) ON RM_KEY IN
		(
			SELECT mwPriceHotels.sd_rmkey
			FROM mwPriceHotels WITH(NOLOCK)
			WHERE mwPriceHotels.ph_sdkey = sd_key
		)
		LEFT JOIN Resorts WITH(NOLOCK) ON RS_KEY = sd_rskey
	WHERE sd_isenabled > 0
		AND EXISTS
		(
			SELECT TOP 1 1
			FROM TP_TurDates WITH(NOLOCK)
			WHERE TD_TOKey = sd_tourkey
					AND TD_Date >= @currentDate
					AND TD_Date <= DATEADD(DAY, @datesInterval - 1, @currentDate)
		)
		AND ((LEN(@availableDepartFromCityKeys) = 0) OR (sd_ctkeyfrom IN (SELECT Id FROM departFromCityKeys)))
		AND ((LEN(@availableCountryKeys) = 0) OR (sd_cnkey IN (SELECT Id FROM countryKeys )))
		AND ((LEN(@availableTourTypeKeys) = 0) OR (sd_tourtype IN (SELECT Id FROM tourTypeKeys)))
		AND ((LEN(@availableCityKeys) = 0) OR (sd_ctkey IN (SELECT Id FROM cityKeys)))
		AND ((LEN(@availableResortKeys) = 0) OR (sd_rskey IN (SELECT Id FROM resortKeys )))
		AND ((LEN(@availableTourKeys) = 0) OR (sd_tourkey IN (SELECT Id FROM tourKeys)))
		AND ((LEN(@availableHotelKeys) = 0) OR (sd_hdkey IN (SELECT Id FROM hotelKeys )))
END
GO

GRANT EXEC ON [dbo].[mwGetSearchFilter] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwGetSearchFilter.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetSearchFilterDates.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwGetSearchFilterDates]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetSearchFilterDates]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-11</DATE>
CREATE PROCEDURE [dbo].[mwGetSearchFilterDates]
	@tourKeys varchar(1000) = '',
	@datesInterval int = 30
AS
BEGIN
	SET NOCOUNT ON
		
	DECLARE @currentDate DATETIME
	SET @currentDate = CONVERT(DATETIME, CONVERT(VARCHAR(20), GETDATE(), 101));

	WITH tourKeys(id) AS
	(
		SELECT Item AS Id
		FROM dbo.DelimitedSplit(@tourKeys, ',')
	)

	SELECT DISTINCT CONVERT(VARCHAR(10), TD_Date, 101) AS [Date],
		SUBSTRING(dateTourKeys, 1, LEN(dateTourKeys) - 1) AS TourKeys
	FROM TP_TurDates AS t1
	CROSS APPLY (
		SELECT CAST(TD_TOKey AS VARCHAR) + ','
		FROM TP_TurDates AS t2
		WHERE t2.TD_Date = t1.TD_Date
			AND (LEN(@tourKeys) = 0 OR TD_TOKey IN (SELECT Id FROM tourKeys))
			AND TD_Date >= @currentDate
			AND TD_Date <= DATEADD(DAY, @datesInterval - 1, @currentDate)
		ORDER BY TD_TOKey
		FOR XML PATH('')
		) D(dateTourKeys)
	WHERE dateTourKeys IS NOT NULL
	ORDER BY CONVERT(VARCHAR(10), TD_Date, 101)
END
GO

GRANT EXEC ON [dbo].[mwGetSearchFilterDates] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwGetSearchFilterDates.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetSearchFilterDirectionData.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwGetSearchFilterDirectionData]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetSearchFilterDirectionData]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-11</DATE>
CREATE PROCEDURE [dbo].[mwGetSearchFilterDirectionData]
	@datesInterval INT = 30,
	@departFromKeys VARCHAR(1000) = '',
	@countryKeys VARCHAR(1000) = '',
	@tourTypeKeys VARCHAR(1000) = ''
AS
BEGIN
	SET NOCOUNT ON
		
	DECLARE @currentDate DATETIME
	SET @currentDate = CONVERT(DATETIME, CONVERT(VARCHAR(20), GETDATE(), 101));
	
	WITH departFromKeys(Id) AS
	(
		SELECT Item AS Id
		FROM dbo.DelimitedSplit(@departFromKeys, ',')
	),
    countryKeys(Id) AS
    (
		SELECT Item AS Id
		FROM dbo.DelimitedSplit(@CountryKeys, ',')
	),
	tourTypeKeys(Id) AS
	(
		SELECT Item AS Id
		FROM dbo.DelimitedSplit(@TourTypeKeys, ',')
	)
	
	SELECT DISTINCT sd_cnkey AS CountryKey, CN_NAME AS CountryName, sd_ctkeyfrom AS DepartureFromCityKey, 
		(CASE WHEN LEN(ISNULL(CT_NAME, '')) = 0 THEN '-Без перелета-' ELSE CT_NAME END) AS DepartureFromCityName,
		sd_tourtype AS TourTypeKey, TP_NAME AS TourTypeName
	FROM mwSpoDataTable WITH(NOLOCK)
		INNER JOIN TP_Tours WITH(NOLOCK) ON TO_Key = sd_tourkey
		INNER JOIN tbl_Country WITH(NOLOCK) ON CN_KEY = sd_cnkey
		INNER JOIN HotelDictionary WITH(NOLOCK) ON HD_KEY = sd_hdkey
		LEFT OUTER JOIN CityDictionary WITH(NOLOCK) ON CT_KEY = sd_ctkeyfrom
		INNER JOIN TipTur WITH(NOLOCK) ON TP_KEY = sd_tourtype
		INNER JOIN Pansion WITH(NOLOCK) ON PN_KEY = sd_pnkey
		LEFT JOIN Rooms WITH(NOLOCK) ON RM_KEY IN
		(
			SELECT mwPriceHotels.sd_rmkey
			FROM mwPriceHotels WITH(NOLOCK)
			WHERE mwPriceHotels.ph_sdkey = sd_key
		)
		LEFT JOIN Resorts WITH(NOLOCK) ON RS_KEY = sd_rskey
	WHERE sd_isenabled > 0
		AND EXISTS
		(
			SELECT TOP 1 1
			FROM TP_TurDates WITH(NOLOCK)
			WHERE TD_TOKey = sd_tourkey
				AND TD_Date >= @currentDate
				AND TD_Date <= DATEADD(DAY, @datesInterval - 1, @currentDate)
		)
		AND ((LEN(@departFromKeys) = 0) OR (sd_ctkeyfrom IN (SELECT Id FROM departFromKeys)))
		AND ((LEN(@countryKeys) = 0) OR (sd_cnkey IN (SELECT Id FROM countryKeys )))
		AND ((LEN(@tourTypeKeys) = 0) OR (sd_tourtype IN (SELECT Id FROM tourTypeKeys)))
	ORDER BY sd_ctkeyfrom, sd_cnkey, sd_tourtype
END
GO

GRANT EXEC ON [dbo].[mwGetSearchFilterDirectionData] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwGetSearchFilterDirectionData.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetSearchFilterNights.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwGetSearchFilterNights]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwGetSearchFilterNights]
GO

--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-11</DATE>
CREATE PROCEDURE [dbo].[mwGetSearchFilterNights]
	@tourKeys VARCHAR(1000) = ''
AS
BEGIN
	SET NOCOUNT ON;

	WITH tourKeys(id) AS
	(
		SELECT Item AS Id
		FROM dbo.DelimitedSplit(@tourKeys, ',')
	)

	SELECT DISTINCT sd_nights AS Nights,
		SUBSTRING(nightTourKeys, 1, LEN(nightTourKeys) - 1) AS TourKeys
	FROM mwPriceDurations AS p1
	CROSS APPLY (
		SELECT LTRIM(RTRIM(STR(sd_tourkey))) + ','
		FROM mwPriceDurations AS p2
		WHERE p2.sd_nights = p1.sd_nights
			AND (LEN(@tourKeys) = 0 OR sd_tourkey IN (SELECT Id FROM tourKeys))
		ORDER BY sd_tourkey
		FOR XML PATH('')
		) AS D(nightTourKeys)
	WHERE nightTourKeys IS NOT NULL
	ORDER BY sd_nights
END
GO

GRANT EXEC ON [dbo].[mwGetSearchFilterNights] TO PUBLIC
GO
/*********************************************************************/
/* end sp_mwGetSearchFilterNights.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwGetServiceVariants.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwGetServiceVariants')
	drop proc dbo.mwGetServiceVariants
go

--<VERSION>9.2.19</VERSION>
--<DATE>2013-03-20</DATE>

create procedure [dbo].[mwGetServiceVariants]
	@serviceDays int,
	@svKey	int,
	@pkKey int,
	@dateBegin varchar(10),
	@tourNDays smallint,
	@cityFromKey	int,
	@cityToKey	int,
	@additionalFilter varchar(1024),
	@tourKey int,
	@showCalculatedCostsOnly int
as
begin
	
	if (isnull(@serviceDays, 0)<=0 and @svKey != 3 and @svKey != 8)
		Set @serviceDays = 1
		
	-- 7693 neupokoev 29.08.2012
	-- Заточка под ДЦ
	declare @selectClause varchar(300)
	declare @fromClause varchar(300)
	declare @whereClause varchar(6000)
	declare @isNewReCalculatePrice bit

	-- Проверка на режим динамического ценообразования
	set @isNewReCalculatePrice = 0
	if (exists( select top 1 1 from SystemSettings with(nolock) where SS_ParmName = 'NewReCalculatePrice' and SS_ParmValue = 1))
		set @isNewReCalculatePrice = 1
	
	if (@isNewReCalculatePrice = 0)
	begin
		-- CRM04241L4F2 20.03.2012 kolbeshkin сделал distinct по CS_ID, т.к. были случаи дублирования одних и тех же записей в результирующем наборе
		set	@selectClause = ' SELECT CS_Code, CS_SubCode1, CS_SubCode2, CS_PrKey, CS_PkKey, CS_Profit, CS_Type, CS_Discount, CS_Creator, CS_Rate, CS_Cost 
		from costs
		where CS_ID in (select distinct cs1.cs_id '
		set	@fromClause   = ' FROM COSTS cs1 WITH(NOLOCK) '
		set	@whereClause  = ''
	end
	else
	begin 
		set	@selectClause = ' SELECT cs1.CS_Code, cs1.CS_SubCode1, cs1.CS_SubCode2, cs1.CS_PrKey, cs1.CS_PkKey, cs1.CS_Profit, cs1.CS_Type, cs1.CS_Discount, cs1.CS_Creator, cs1.CS_Rate, cs1.CS_Cost, CO_DateActive '
		set	@fromClause   = ' FROM COSTS cs1 WITH(NOLOCK) INNER JOIN COSTOFFERS WITH(NOLOCK) ON cs1.CS_Coid = CO_Id INNER JOIN Seasons WITH(NOLOCK) ON CO_SeasonId = SN_Id'
		set	@whereClause  = ' CO_State = 1 AND GETDATE() BETWEEN ISNULL(CO_SaleDateBeg, ''1900-01-01'') AND ISNULL(CO_SaleDateEnd, ''2050-01-01'') AND ISNULL(SN_IsActive, 0) = 1 AND '
	end
	
	set		@additionalFilter = replace(@additionalFilter, 'CS_', 'cs1.CS_')
		
	declare @orderClause varchar(100)
		set @orderClause  = 'CS_long'
	
	--MEG00027493 Paul G 15.07.2010
	if (@showCalculatedCostsOnly = 1)
	begin
		set @whereClause = @whereClause +
			'EXISTS(SELECT 1 FROM TP_SERVICES WITH(NOLOCK) WHERE TS_CODE=cs1.CS_CODE 
				AND TS_SVKEY=cs1.CS_SVKEY 
				AND TS_SUBCODE1=cs1.CS_SUBCODE1 
				AND TS_SUBCODE2=cs1.CS_SUBCODE2 
				AND TS_OPPARTNERKEY=cs1.CS_PRKEY
				AND TS_OPPACKETKEY=cs1.CS_PKKEY
				AND TS_TOKEY=(SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE TO_TRKEY='+ convert(varchar(50), @tourKey) +')) AND 
			'
	end
	
	set @whereClause = @whereClause + ' cs1.CS_SVKEY = ' + cast(@svKey as varchar)
	set @whereClause = @whereClause + ' AND cs1.CS_PKKEY = ' + cast(@pkKey as varchar)
	
	-- 8233 tfs neupokoev 
	-- При подборе вариантов не учитывались даты начала и окончания продаж
	if (@isNewReCalculatePrice = 0)
		set @whereClause = @whereClause + ' AND ' + 'GETDATE()' + ' BETWEEN ISNULL(cs1.CS_DATESELLBEG, ''1900-01-01'') AND ISNULL(cs1.CS_DATESELLEND, ''9000-01-01'') '
	
	set @whereClause = @whereClause + ' AND ''' + @dateBegin + ''' BETWEEN ISNULL(cs1.CS_CHECKINDATEBEG, ''1900-01-01'') AND ISNULL(cs1.CS_CHECKINDATEEND, ''9000-01-01'') ' + @additionalFilter
	
	if (@svKey=1)
	begin			
		set @whereClause = @whereClause + ' AND ' + cast(@tourNDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_LONG, 10000) '-- MEG00029229 Paul G 13.10.2010
				
		set @whereClause = @whereClause + ' AND EXISTS (SELECT CH_KEY FROM CHARTER WITH(NOLOCK)' 
										+ ' WHERE CH_KEY = cs1.CS_CODE AND CH_CITYKEYFROM = ' + cast(@cityFromKey as varchar) + ' AND CH_CITYKEYTO = ' + cast(@cityToKey as varchar)+')'
		-- Filter on day of week
		set @whereClause = @whereClause + ' AND (cs1.CS_WEEK is null or cs1.CS_WEEK = '''' or cs1.CS_WEEK like dbo.GetWeekDays(''' + @dateBegin + ''',''' + @dateBegin + '''))'
		-- Filter on CHECKIN DATE		
	end
	else 
	begin
		if (@serviceDays > 1)
		begin			
			-- Спорный момент, но иначе не работает вариант, когда изначально берется цена с cs_long < @serviceDays, а потом добивается другими квотами с конца
			--set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_long, 10000)'
			set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' >= isnull(cs1.CS_longmin, -1)'
			
			-- Exclude services that not have cost at last service day
			set @fromClause = @fromClause + ' INNER JOIN COSTS cs2 WITH(NOLOCK) ON cs1.CS_CODE = cs2.CS_CODE AND cs1.CS_SUBCODE1 = cs2.CS_SUBCODE1 AND cs1.CS_SUBCODE2 = cs2.CS_SUBCODE2'
			set @whereClause = @whereClause + ' AND ' + replace(@whereClause, 'cs1.', 'cs2.')
			set @whereClause = @whereClause + ' AND ISNULL(cs2.CS_DATE,    ''1900-01-01'') <= ''' + cast(dateadd(day, @serviceDays - 1, cast(@dateBegin as datetime)) as varchar) + ''''
			set @whereClause = @whereClause + ' AND ISNULL(cs2.CS_DATEEND, ''9000-01-01'') >= ''' + cast(DATEADD(day, @serviceDays - 1, cast(@dateBegin as datetime)) as varchar) + ''''
						
			if (len(@orderClause) > 0)
				set @orderClause = @orderClause + ', '
			set @orderClause = @orderClause + 'CS_UPDDATE DESC'
		end
		else
		begin				
			set @whereClause = @whereClause + ' AND ' + cast(@serviceDays as varchar) + ' between isnull(cs1.CS_longmin, -1) and isnull(cs1.CS_long, 10000)'
		end
		-- 7443 tfs neupokoev 22.08.2012
		-- Фильтруем цены по дням неделии у других услуг тоже
	set @whereClause = @whereClause + ' AND (cs1.CS_WEEK is null or cs1.CS_WEEK = '''' or cs1.CS_WEEK like dbo.GetWeekDays(''' + @dateBegin + ''',''' + @dateBegin + '''))'	
	end	
	
	set @whereClause = @whereClause + ' AND ISNULL(cs1.CS_DATE,    ''1900-01-01'') <= ''' + @dateBegin + ''''
	set @whereClause = @whereClause + ' AND ISNULL(cs1.CS_DATEEND, ''9000-01-01'') >= ''' + @dateBegin + ''''

	-- neupokoev 29.08.2012
	-- Заточка под ДЦ
	if (@isNewReCalculatePrice = 0)
		begin
			exec (@selectClause + @fromClause + ' WHERE ' + @whereClause + ') ORDER BY '+ @orderClause)
		end
	else
		begin
			exec ('WITH SERVICEINFO AS (' + 
					@selectClause + @fromClause + ' WHERE ' + @whereClause +
					') 
					SELECT * FROM SERVICEINFO AS si1
						WHERE si1.CO_DateActive = 
							(
								SELECT MAX(si2.CO_DateActive) 
								FROM SERVICEINFO AS si2 
								WHERE si1.CS_Code = si2.CS_Code and si1.CS_SubCode1 = si2.CS_SubCode1 and 
								      si1.CS_SubCode2 = si2.cs_SubCode2 and si1.CS_PRKey = si2.CS_PRKey
							)')
		end	
end
go

grant exec on dbo.mwGetServiceVariants to public
go

/*********************************************************************/
/* end sp_mwGetServiceVariants.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwMakeFullSVName.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[MWMAKEFULLSVNAME]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE [dbo].[mwMakeFullSVName]
GO
CREATE    PROCEDURE [dbo].[mwMakeFullSVName]
(
--<VERSION>2009.2.18.1</VERSION>
--<DATE>2013-03-04</DATE>
	@nCountry INT,
	@nCity INT,
	@nSvKey INT,
	@nCode INT,
	@nNDays INT,
	@nCode1 INT,
	@nCode2 INT,
	@nPartner INT,
	@dServDate DATETIME,
	@sServiceByHand VARCHAR(800),	
	@sResult VARCHAR(800) OUTPUT,
	@sResultLat VARCHAR(800) OUTPUT
) AS
	DECLARE @nTempNumber INT

	DECLARE @sName VARCHAR(800)
	DECLARE @sNameLat VARCHAR(800)
	DECLARE @sText VARCHAR(800)
	DECLARE @sTextLat VARCHAR(800)
	DECLARE @sTempString VARCHAR(800)
	DECLARE @sTempStringLat VARCHAR(800)

	DECLARE @nMain INT
	DECLARE @nAgeFrom INT
	DECLARE @nAgeTo INT

	DECLARE 
	@TYPE_FLIGHT INT, 
	@TYPE_TRANSFER INT,
	@TYPE_HOTEL INT,
	@TYPE_EXCUR INT,
	@TYPE_VISA INT,
	@TYPE_INSUR INT,
	@TYPE_SHIP INT,
	@TYPE_HOTELADDSRV INT,
	@TYPE_SHIPADDSRV INT,
	@bIsCruise INT

	DECLARE @sTextCity VARCHAR(800)
	DECLARE @sTextCityLat VARCHAR(800)
	
	Set @TYPE_FLIGHT = 1
	Set @TYPE_TRANSFER = 2
	Set @TYPE_HOTEL = 3
	Set @TYPE_EXCUR = 4
	Set @TYPE_VISA = 5
	Set @TYPE_INSUR = 6
	Set @TYPE_SHIP = 7
	Set @TYPE_HOTELADDSRV = 8
	Set @TYPE_SHIPADDSRV = 9
	Set @bIsCruise = 0

	Set @nTempNumber = 1

	EXEC dbo.GetServiceName @nSvKey, @nTempNumber, @sName output, @sNameLat output

	If @sName != ''
		Set @sName = @sName + '::'
	If @sNameLat != ''
		Set @sNameLat = @sNameLat + '::'
--if Code is less than zero, we need only name of subservices
if (@nCode <= 0 and @sServiceByHand='')
begin
Set @sName=''
Set @sNameLat=''
end
--
	If @nSvKey = @TYPE_FLIGHT
	BEGIN
if (@nCode > 0)
begin
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode2>0
			SELECT  @sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCode2
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = isnull(@sServiceByHand, '')
		Set @sTextLat = isnull(@sServiceByHand, '')	

		-- Aaiu iaaaee a oi?iaoa 1 - iii, 7 - an
		Declare @nday int
		Set @nday = DATEPART(dw, @dServDate)  + @@DATEFIRST - 1
		If @nday > 7 
	    		set @nday = @nday - 7
	
		If @nCode>0
		begin
			SELECT	@sText = isnull(CH_AirLineCode, '') + CH_Flight + ', ' + isnull(CH_PortCodeFrom, '') + '-' + isnull(CH_PortCodeTo, ''),
			@sTextLat = isnull(CH_AirLineCode, '') + CH_Flight + ', ' + isnull(CH_PortCodeFrom, '') + '-' + isnull(CH_PortCodeTo, '')
			FROM 	dbo.Charter WHERE 	CH_Key = @nCode
			SELECT	@sText = @sText + ', ' + isnull(left(convert(varchar, AS_TimeFrom, 8),5),'') + '-' + isnull(left(convert(varchar, AS_TimeTo, 8),5),''),
				@sTextLat = @sTextLat + ', ' + isnull(left(convert(varchar, AS_TimeFrom, 8),5),'') + '-' + isnull(left(convert(varchar, AS_TimeTo, 8),5),'')
			FROM 	dbo.AirSeason 
			WHERE 	AS_ChKey = @nCode and @dServDate between AS_DATEFROM and AS_DATETO  and 
				charindex(Cast(@nday as varchar(1)),AS_WEEK) > 0
		end
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
END
If (@nCode1>0)
BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode1>0
			SELECT	@sText = isnull(AS_Code, '') + ' ' + isnull(AS_NameRus, ''),
				@sTextLat = isnull(AS_Code, '') + ' ' + isnull(AS_NameLat, AS_NameRus)
			FROM 	dbo.AirService 
			WHERE 	AS_Key = @nCode1
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
END
	END
	ELSE If (@nSvKey = @TYPE_HOTEL or @nSvKey = @TYPE_HOTELADDSRV)
	BEGIN
If (@nCode>0)
BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sTextCity = CT_Name,
				@sTextCityLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity		      

		Set @sText = isnull(@sServiceByHand, '')

Set @sTextCity = ISNULL(@sTextCity,'')
Set @sTextCityLat = ISNULL(@sTextCityLat,'')

		If @nCode>0
		      	SELECT	@sText = isnull(HD_Name,'') + '-' + isnull(HD_Stars, ''), @bIsCruise = HD_IsCruise 
			FROM 	dbo.HotelDictionary 
			WHERE	HD_Key = @nCode
		Set @sTextLat = @sText
		If @bIsCruise = 1
			If @nSvKey = @TYPE_HOTEL
			BEGIN
				Set @sName = 'Круиз::'
				Set @sNameLat = 'Cruise::'
			END
			Else If @nSvKey = @TYPE_HOTELADDSRV
				Set @sName = 'ADCruise::'

		Set @sName = @sName + @sTextCity + '/'  + @sText
		Set @sNameLat = @sNameLat + @sTextCityLat + '/' + @sTextLat

		If @nNDays>0
		BEGIN
			Set @nTempNumber = 0
			EXEC dbo.SetNightString @nNDays, @nTempNumber, @sTempString output, @sTempStringLat output
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (4)), '') + ' ' + @sTempString
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (4)), '') + ' ' + @sTempStringLat
		END
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'
END
If (@nCode1>0)
BEGIN
		Set @sText = '  '
		Set @sTextLat = '  '

      		EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
       		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
END

If (@nCode2>0)
BEGIN
		Set @sText = '  '
              	EXEC dbo.GetSvCode2Name @nSvKey, @nCode2, @sTempString output, @sTempStringLat output
             
             	Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
END
	END
	ELSE If (@nSvKey = @TYPE_EXCUR or @nSvKey = @TYPE_TRANSFER)
	BEGIN
if (@nCode > 0)
begin
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCity>0
			SELECT 	@sText = CT_Name,
				@sTextLat = isnull(CT_NameLat, CT_Name)
			FROM	dbo.CityDictionary 
			WHERE	CT_Key = @nCity	
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'

		Set @sText = isnull(@sServiceByHand, '')
		Set @sTextLat = isnull(@sServiceByHand, '')
		If @nCode>0
			If @nSvKey = @TYPE_EXCUR
				SELECT 	@sText = ED_Name +', ' + isnull(ED_Time, ''),
					@sTextLat = isnull(ED_NameLat,ED_Name) +', ' + isnull(ED_Time, '')
				FROM	dbo.ExcurDictionary 
				WHERE	ED_Key = @nCode
			ELSE
				SELECT 	@sText = TF_Name + ', ' + isnull (Left (Convert (varchar, TF_TimeBeg, 8), 5), '')  + ', ' + isnull(TF_TIME, ''),
					@sTextLat = isnull(TF_NameLat,TF_Name) + ', ' + isnull (Left (Convert (varchar, TF_TimeBeg, 8), 5), '')  + ', ' + isnull(TF_TIME, '')  
				FROM	dbo.Transfer 
				WHERE	TF_Key = @nCode
		Set @sName = @sName + @sText +  '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
end
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCode1>0
begin
			SELECT 	@sText = TR_Name + (case  when (TR_NMen>0)  then (','+ CAST ( TR_NMen  AS VARCHAR(10) )+ ' чел.')  else ' ' end),
				@sTextLat = isnull(TR_NameLat,TR_Name) + (case  when (TR_NMen>0)  then (','+ CAST ( TR_NMen  AS VARCHAR(10) )+ ' pax.')  else ' ' end) 
			FROM	dbo.Transport  
			WHERE	TR_Key = @nCode1
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
end
	END
	ELSE If (@nSvKey = @TYPE_SHIP or @nSvKey = @TYPE_SHIPADDSRV)
	BEGIN
if (@nCode>0)
begin
		Set @sText = '  '
		Set @sTextLat = '  '
		If @nCountry>0
	                        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	Country 
				WHERE	CN_Key = @nCountry
		Set @sName = @sName + @sText + '/'
		Set @sNameLat = @sNameLat + @sTextLat + '/'
		
		Set @sText = isnull(@sServiceByHand, '')
		If @nCode>0
		      	SELECT	@sText = SH_Name + '-' + isnull(SH_Stars, '') 
			FROM	dbo.Ship 
			WHERE	SH_Key = @nCode
		Set @sTextLat = @sText
				
		Set @sName = @sName + @sText
		Set @sNameLat = @sNameLat + @sTextLat
		
		If @nNDays>0
		BEGIN
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (10)), '') + ' ' + 'дней'
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (10)), '') + ' ' + 'days'
		END					
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'
end
if (@nCode1>=0)
begin
		Set @sText = '  '
		Set @sTextLat = '  '
		
	      	EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
end
if (@nCode2>=0)
begin
		Set @sText = '  '
              	EXEC dbo.GetSvCode2Name @nSvKey, @nCode2, @sTempString output, @sTempStringLat output
		
		Set @sName = @sName + isnull(@sTempString, '') + '/'
		Set @sNameLat = @sNameLat + isnull(@sTempStringLat, '') + '/'
end
	END
	ELSE
	BEGIN
if (@nCode>0)
begin
		Set @sText = '  '
		Set @sTextLat = '  '
		Set @sTempString = 'CITY'
		EXEC dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output
		
		If @nTempNumber>0
		BEGIN
			If @nCity>0
				SELECT 	@sText = CT_Name,
					@sTextLat = isnull(CT_NameLat, CT_Name)
				FROM	dbo.CityDictionary 
				WHERE	CT_Key = @nCity	
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
		END
		ELSE
		BEGIN
			If @nCountry>0
	                        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	Country 
				WHERE	CN_Key = @nCountry
			Else If @nCode>0
	             	        SELECT	@sText = CN_Name,
					@sTextLat = isnull(CN_NameLat, CN_Name)
				FROM	dbo.ServiceList, Country 
				WHERE	SL_Key = @nCode and CN_Key = SL_CnKey
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
		END
		Set @sText = @sServiceByHand
		Set @sTextLat = @sServiceByHand
		If @nCode>0
		BEGIN

		    	SELECT	@sText = SL_Name,
				@sTextLat = isnull(SL_NameLat, SL_Name)
			FROM	dbo.ServiceList
			WHERE	SL_Key = @nCode
		END
		Set @sName = @sName + @sText
		Set @sNameLat = @sNameLat + @sTextLat

		If @nNDays>0
		BEGIN
			Set @nTempNumber = 1
			exec SetNightString @nNDays, @nTempNumber, @sTempString output, @sTempStringLat output
			Set @sName = @sName + ',' + isnull(cast(@nNDays as varchar (10)), '')  + ' ' + @sTempString
			Set @sNameLat = @sNameLat + ',' + isnull(cast(@nNDays as varchar (10)), '')  + ' ' + @sTempStringLat
		END
		Set @sName = @sName + '/'
		Set @sNameLat = @sNameLat + '/'
end
		Set @sText = '  '
		Set @sTextLat = '  '
		Set @sTempString = 'CODE1'
		exec dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output

		If @nTempNumber>0
		BEGIN
if (@nCode1>0)
begin
			If @nCode1>0 and (@nSvKey != @TYPE_HOTELADDSRV or @nSvKey != @TYPE_SHIPADDSRV)
				SELECT	@sText = A1_Name,
					@sTextLat = isnull(A1_NameLat, A1_Name)
				FROM	dbo.AddDescript1
				WHERE	A1_Key = @nCode1
			ELSE
			BEGIN
				EXEC dbo.GetSvCode1Name @nSvKey, @nCode1, @sText output, @sTempString output, @sTextLat output, @sTempStringLat output
				set @sText = @sTempString
				set @sTextLat = @sTempStringLat
			END
			Set @sName = @sName + @sText + '/'
			Set @sNameLat = @sNameLat + @sTextLat + '/'
end
if (@nCode2>0)
begin
			Set @sTempString = 'CODE2'
			exec dbo.GetSvListParm @nSvKey, @sTempString, @nTempNumber output

			If @nTempNumber>0
			BEGIN
				If @nCode2>0
				SELECT	@sText = A2_Name,
					@sTextLat = isnull(A2_NameLat, A2_Name)
				FROM	dbo.AddDescript2
				WHERE	A2_Key = @nCode2
				Set @sName = @sName + @sText + '/'
				Set @sNameLat = @sNameLat + @sTextLat + '/'
			END
end
		END
	END
	Set @sResult = @sName
	Set @sResultLat = @sNameLat
GO
GRANT EXECUTE ON dbo.mwMakeFullSVName TO PUBLIC 
GO
/*********************************************************************/
/* end sp_mwMakeFullSVName.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwRemoveDeleted.sql */
/*********************************************************************/

if exists(select id from sysobjects where name='mwRemoveDeleted' and xtype='p')
	drop procedure [dbo].[mwRemoveDeleted]
go


create proc [dbo].[mwRemoveDeleted] 
	@remove tinyint = 0
as
begin
	--<VERSION>2009.2.19.1</VERSION>
	--<DATE>2013-04-15</DATE>

	set nocount on

	if (dbo.mwReplIsPublisher() = 1)
	begin
		delete from dbo.mwDeleted
		return
	end
	
	declare @name varchar(50)
	declare @sql varchar(8000)
		
	create table #tmpDeleted (del_key int)
	create table #ptKeys (xptKey int)

	declare @pubdb nvarchar(50)
	set @pubdb = dbo.mwReplPublisherDB()
	
	declare delCur cursor fast_forward read_only for 
	select [name] from sysobjects with(nolock) where name like 'mwPriceDataTable%' and xtype = 'u'			
	
	while exists(select top (1) 1 from dbo.mwDeleted with (nolock))
	begin

		insert into #tmpDeleted
		select top (500000) del_key 
		from dbo.mwDeleted with(nolock)				

		open delCur
		fetch next from delCur into @name
		while(@@fetch_status = 0)
		begin
			set @sql = 'insert into #ptKeys(xptKey) select pt_key from dbo.' + ltrim(rtrim(@name)) + ' with(nolock) where pt_pricekey in (select del_key from #tmpDeleted)'
			print (@sql)
			exec (@sql)

			if exists(select top 1 1 from #ptKeys)
			begin
				while (1 = 1)
				begin
					set @sql = 'delete top (10000) from dbo.' + ltrim(rtrim(@name)) + ' where pt_key in (select xptKey from #ptKeys)'
					print @sql
					exec(@sql)

					if @@rowcount = 0
						break
				end
			end

			truncate table #ptKeys

			fetch next from delCur into @name
		end
		close delCur

		delete from dbo.mwDeleted where del_key in (select del_key from #tmpDeleted)

		truncate table #tmpDeleted
	end
	
	set @sql = '		
			delete from dbo.mwSpoDataTable with(rowlock) where not exists(select top (1) 1 from mt.' + @pubdb + '.dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)
			delete from dbo.mwPriceHotels with(rowlock) where  not exists(select top (1) 1 from mt.' + @pubdb + '.dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)
			delete from dbo.mwPriceDurations with(rowlock) where  not exists(select top (1) 1 from mt.' + @pubdb + '.dbo.tp_prices with(nolock) where tp_tokey = sd_tourkey)		
		'
	exec (@sql)
	
	deallocate delCur
	
	drop table #tmpDeleted

	set nocount off
end
GO

grant exec on [dbo].[mwRemoveDeleted] to public
go

/*********************************************************************/
/* end sp_mwRemoveDeleted.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwReplDisablePriceTour.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='p' and name='mwReplDisablePriceTour')
	drop proc dbo.[mwReplDisablePriceTour]
go

create proc [dbo].[mwReplDisablePriceTour] @tourkey int, @rqId int = null
as
begin
	-- <date>2013-04-01</date>
	-- <version>9.2</version>

	declare @mwSearchType int
	select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
		where SS_ParmName = 'MWDivideByCountry'

	if @mwSearchType = 0
	begin
		if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwPriceDataTable.'
			
		update mwPriceDataTable with (rowlock)
		set pt_isenabled = 0
		where pt_tourkey = @tourkey
	end
	else
	begin
		declare @tableName varchar(100), @tokey int, @cnkey int
		declare @sql varchar(8000)

		select top 1 
			@tokey = to_key, 
			@cnkey = to_cnkey
		from 
			tp_tours with(nolock)
		where to_key = @tourkey

		DECLARE @cityFromKey INT
		DECLARE cur CURSOR FAST_FORWARD FOR SELECT sd_ctkeyfrom FROM mwSpoDataTable with (nolock) WHERE sd_tourkey = @tokey AND sd_isenabled > 0
		OPEN cur
		FETCH NEXT FROM cur INTO @cityFromKey
		WHILE @@fetch_status = 0
		BEGIN 
			set @tableName = dbo.mwGetPriceTableName(@cnkey, @cityFromKey)	
			if (@rqId is not null)
				insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwPriceDataTable.'
				
			IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@tableName) AND type in (N'U'))	
			BEGIN
				set @sql = 'update ' + @tableName + ' with(rowlock) set pt_isenabled = 0 where pt_tourkey = ' + ltrim(str(@tokey))
				exec (@sql)
			END
			FETCH NEXT FROM cur INTO @cityFromKey
		END	
		CLOSE cur
		DEALLOCATE cur
	end

	if (@rqId is not null)
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text]) select @rqId, 'Start update mwSpoDataTable.'
			
	update mwSpoDataTable with(rowlock)
	set sd_isenabled = 0	
	where sd_tourkey = @tourkey
end
GO

grant exec on [dbo].[mwReplDisablePriceTour] to public

GO
/*********************************************************************/
/* end sp_mwReplDisablePriceTour.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwReplProcessQueueDivide.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplProcessQueueDivide]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplProcessQueueDivide]
GO

CREATE procedure [dbo].[mwReplProcessQueueDivide]
as
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-05-22</DATE>

	if dbo.mwReplIsSubscriber() <= 0
		return
		
	declare @mwSearchType int
	declare @cnKey int, @ctKey int
	select @mwSearchType = isnull(SS_ParmValue, 1) from dbo.systemsettings with(nolock) 
	where SS_ParmName = 'MWDivideByCountry'

	declare @rqId int
	declare @rqMode int
	declare @rqToKey int
	declare @rqCalculatingKey int
	declare @rqOverwritePrices bit	

	declare @directions table(CNKey int, CTKey int, IsUsed int default(0))
	declare @currentQueue table(xrq_id int, xrq_mode int, xrq_tokey int, xrq_CalculatingKey int, xRQ_OverwritePrices bit, xrq_state int, xrq_enddate datetime)
	
	if exists(select 1 from mwReplDirections with(nolock) where RD_IsUsed = 1)
	begin
		update mwReplDirections
		set RD_IsUsed = 0
		where RD_IsUsed = 1
		and not exists(select 1 from mwReplQueue with(nolock) where rq_cnkey = RD_CNKey and isnull(rq_ctkeyfrom, 0) = RD_CTKeyFrom and rq_state = 3)
	end 

	begin tran 
		
		select top 1 @cnKey = rq_cnkey, @ctKey = rq_ctkeyfrom
		from mwReplQueue with(nolock)
		join mwReplDirections with(updlock) on rd_cnkey = rq_cnkey and rd_ctkeyfrom = isnull(rq_ctkeyfrom, 0)
		where rd_isUsed = 0
		and (rq_state = 1 or rq_state = 2)
		and rq_mode <= 5
		order by rq_priority desc, rq_crdate
		
		insert into @currentQueue (xrq_id, xrq_mode, xrq_tokey, xrq_CalculatingKey, xRQ_OverwritePrices)
		select top 10 rq_id, rq_mode, rq_tokey, rq_CalculatingKey, RQ_OverwritePrices
		from mwReplQueue 
		where (rq_state = 1 or rq_state = 2)
		and rq_cnkey = @cnKey
		and rq_ctkeyfrom = @ctKey
		and rq_mode <= 5
		order by rq_priority desc, rq_crdate
		
		insert into @currentQueue (xrq_id, xrq_mode, xrq_tokey, xrq_CalculatingKey, xRQ_OverwritePrices)
		select top 10 rq_id, rq_mode, rq_tokey, rq_CalculatingKey, RQ_OverwritePrices
		from mwReplQueue 
		where (rq_state = 1 or rq_state = 2)
		and rq_cnkey is null
		and rq_ctkeyfrom is null
		and rq_mode <= 5
		order by rq_priority desc, rq_crdate
		
		update mwReplQueue set [rq_state] = 3, [rq_startdate] = getdate() where rq_id in (select xrq_id from @currentQueue)
		
		update mwReplDirections set rd_isUsed = 1 where rd_cnkey = @cnKey and rd_ctkeyfrom = isnull(@ctKey, 0)
	
	commit tran
	
	if not exists (select 1 from @currentQueue)
		return
	
	declare queueCursor cursor local fast_forward for
	select xrq_id, xrq_mode, xrq_tokey, xrq_CalculatingKey, xRQ_OverwritePrices
	from @currentQueue
	
	open queueCursor
	fetch queueCursor into @rqId, @rqMode, @rqToKey, @rqCalculatingKey, @rqOverwritePrices
	
	while (@@FETCH_STATUS = 0)
	begin
		
		insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, 'Command start.'
			
		begin try	
			if (@rqMode = 1)
			begin
				exec FillMasterWebSearchFields @tokey = @rqToKey, @calcKey = @rqCalculatingKey, @overwritePrices = @rqOverwritePrices
			end
			else if (@rqMode = 2)
			begin
				exec FillMasterWebSearchFields @tokey = @rqToKey, @calcKey = @rqCalculatingKey, @overwritePrices = @rqOverwritePrices
			end
			else if (@rqMode = 3)
			begin
				exec mwReplDisablePriceTour @rqToKey, @rqId
			end
			else if (@rqMode = 4)
			begin
				exec mwReplDeletePriceTour @rqToKey, @rqId
			end
			else if (@rqMode = 5)
			begin
				exec mwReplUpdatePriceTourDateValid @rqToKey, @rqId
			end
			
			update @currentQueue set xrq_state = 5, xrq_enddate = getdate() where xrq_id = @rqId
			
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, 'Command complete.'
		
		end try
		begin catch
			update @currentQueue set xrq_state = 4, xrq_enddate = getdate() where xrq_id = @rqId
			
			declare @errMessage varchar(max)
			set @errMessage = 'Error at ' + isnull(ERROR_PROCEDURE(), '[mwReplProcessQueueDivide]') +' : ' + isnull(ERROR_MESSAGE(), '[msg_not_set]')
			
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, @errMessage
		end catch
		
		fetch queueCursor into @rqId, @rqMode, @rqToKey, @rqCalculatingKey, @rqOverwritePrices
		
	end
	
	close queueCursor
	deallocate queueCursor
	
	update mwReplQueue 
	set rq_state = xrq_state,
	rq_enddate = xrq_enddate
	from @currentQueue
	where rq_id = xrq_id
	
	update mwReplDirections set rd_isUsed = 0 where rd_cnkey = @cnKey and rd_ctkeyfrom = isnull(@ctKey, 0)
	
	if exists(select top 1 1 from mwReplQueue with(nolock) where rq_state = 4 and DATEDIFF(MINUTE, rq_enddate, GETDATE()) > 10 and rq_priority > 0)
	begin
		delete from mwReplQueue where rq_tokey not in (select to_key from TP_Tours) and rq_mode <> 4 and (rq_startdate is null or rq_state = 4)
		
		update mwReplQueue set rq_state = 1, rq_startdate = null, rq_enddate = null, rq_priority = rq_priority - 1
		where rq_state = 4 
		and DATEDIFF(MINUTE, rq_enddate, GETDATE()) > 10
		and rq_priority > 0

	end
end
GO

grant exec on [dbo].[mwReplProcessQueueDivide] to public
GO
/*********************************************************************/
/* end sp_mwReplProcessQueueDivide.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_mwReplProcessQueueUpdate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[mwReplProcessQueueUpdate]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[mwReplProcessQueueUpdate]
GO

-- Параллельная обработка очереди туров
create procedure [dbo].[mwReplProcessQueueUpdate]
as
begin
	--<VERSION>2009.2</VERSION>
	--<DATE>2013-03-14</DATE>

	if dbo.mwReplIsSubscriber() <= 0
		return
		
	declare @mwReplQueue table
	(
		xToKey int,
		xCalcKey int,
		xRqId int,
		xRqStartDate datetime,
		xRqEndDate datetime,
		xRqState int
	)
	
	insert into @mwReplQueue(xToKey, xCalcKey, xRqId)
	select top 100 rq_tokey, rq_CalculatingKey, rq_id
	from mwReplQueue
	where rq_mode = 6 
	and rq_startdate is null
	order by rq_priority desc, rq_id asc
	
	declare @tokey int, @calcKey int, @rqId int, @error smallint
	declare curs cursor local fast_forward for
	select xToKey, xCalcKey, xRqId
	from @mwReplQueue
	order by xRqId asc

	set @error = 0

	open curs

	fetch curs into @tokey, @calcKey, @rqId

	while (@@FETCH_STATUS = 0)
	begin
		begin try
			update @mwReplQueue set xRqStartDate = GETDATE() where xRqId = @rqId
			exec [dbo].[mwReplUpdatePriceEnabledAndValue] @tokey, @calcKey, @rqId
		end try
		begin catch
			update @mwReplQueue set xRqState = 4, xRqEndDate = getdate() where xRqId = @rqId
			
			declare @errMessage varchar(max)
			set @errMessage = 'Error at ' + isnull(ERROR_PROCEDURE(), '[mwReplProcessQueueDivide]') +' : ' + isnull(ERROR_MESSAGE(), '[msg_not_set]')
			
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, @errMessage
			set @error = 1
			
		end catch
		
		if (@error = 0)
		begin
			update @mwReplQueue set xRqState = 5, xRqEndDate = getdate() where xRqId = @rqId
		
			insert into mwReplQueueHistory([rqh_rqid], [rqh_text])
			select @rqId, 'Command complete.'
		end
		else
		begin
			set @error = 0
		end
		
		fetch curs into @tokey, @calcKey, @rqId
	end

	close curs
	deallocate curs
	
	update mwReplQueue
	set rq_startdate = xRqStartDate,
		rq_enddate = xRqEndDate,
		rq_state = xRqState
	from @mwReplQueue
	where xRqId = rq_id

end
GO

grant exec on [dbo].[mwReplProcessQueueUpdate] to public
GO
/*********************************************************************/
/* end sp_mwReplProcessQueueUpdate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_NationalCurrencyPrice2.sql */
/*********************************************************************/
if exists(select id from sysobjects where id = object_id(N'[dbo].[NationalCurrencyPrice2]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop proc [dbo].[NationalCurrencyPrice2]
GO

CREATE PROCEDURE [dbo].[NationalCurrencyPrice2]
@sRate varchar(5), -- валюта пересчета
@sRateOld varchar(5), -- старая валюта
@sDogovor varchar(100), -- код договора
@nPrice money, -- новая цена в указанной валюте
@nPriceOld money, -- старая цена
@nDiscountSum money, -- новая скидка в указанной валюте
@date DateTime, -- действие
@order_status smallint, -- null OR passing the new value for dg_sor_code from the trigger when it's (dg_sor_code) updated
@isAddToHistory bit = 1
AS
BEGIN
--<VERSION>9.2.19</VERSION>
--<DATE>2013-04-04</DATE>
      declare @national_currency varchar(5)
      declare @currencyKey int
	  declare @rc_course money
      declare @rc_courseStr char(30)
	  declare @dogovor_key int -- Task 10558 tfs neupokoev 26.12.2012: будем писать в историю и его тоже, чтобы потом не зморачиваться, а вдргуг сменили имя путевки
      
	  select top 1 @currencyKey = RA_KEY, @national_currency = RA_CODE from Rates where RA_National = 1
	  select @dogovor_key = dg_key from Dogovor where DG_CODE=@sDogovor
	  set @rc_course = -1
	  
	  select top 1 @rc_courseStr = RC_COURSE from RealCourses
	  where RC_RCOD1 = @national_currency and RC_RCOD2 = @sRate
	  and convert(char(10), RC_DATEBEG, 102) = convert(char(10), @date, 102)
	  
	  set @rc_course = cast(isnull(@rc_courseStr, -1) as money)

      if @sRate = @national_currency
      begin
            set @rc_courseStr = '1'
            set @rc_course = 1
      end
      
      declare @sHI_WHO varchar(25)
      exec dbo.CurrentUser @sHI_WHO output

      if @rc_course <> -1
      begin
            declare @final_price money
            set @final_price = @rc_course * @nPrice
            
            declare @sys_setting varchar(5)
			set @sys_setting = null
			select @sys_setting = SS_ParmValue from SystemSettings where SS_ParmName = 'RECALC_NATIONAL_PRICE'

            -- пересчитываем цену, если надо
            if (@sys_setting <> '-1')
            begin
				declare @tmp_final_price money
				set @tmp_final_price = null
				exec [dbo].[CalcPriceByNationalCurrencyRate] @sDogovor, @sRate, @sRateOld, @national_currency, @nPrice, @nPriceOld, @sHI_WHO, 'INSERT_TO_HISTORY', @tmp_final_price output, @rc_course, @order_status

				if @tmp_final_price is not null
				begin
					set @final_price = @tmp_final_price
				end
            end
            --
            if(@isAddToHistory=1)
            begin
				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId, HI_DGKEY)
				values
				(@sDogovor, @sHI_WHO, @rc_courseStr, @sRate, 'UPD', 'DOGOVORCURRENCY', 20, @dogovor_key)
            end
              if(@isAddToHistory=1)
				begin
					update dbo.tbl_Dogovor
					set
						  DG_NATIONALCURRENCYPRICE = @final_price,
						  DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum,
		                  
						  DG_CurrencyRate = @rc_course, 
						  DG_CurrencyKey =  @currencyKey 
					where
						  DG_CODE = @sDogovor
                  end
                  else
                  begin
					  update dbo.tbl_Dogovor
						set
							  DG_NATIONALCURRENCYPRICE = @final_price,
							  DG_NATIONALCURRENCYDISCOUNTSUM = @rc_course * @nDiscountSum			               
						where
							  DG_CODE = @sDogovor							  
					  
                  end
                  
      end
      else
      begin
            update dbo.tbl_Dogovor
            set
                DG_NATIONALCURRENCYPRICE = null,
                DG_NATIONALCURRENCYDISCOUNTSUM = null
            where
                  DG_CODE = @sDogovor
            if(@isAddToHistory=1)
            begin
				insert into dbo.history
				(HI_DGCOD, HI_WHO, HI_TEXT, HI_REMARK, HI_MOD, HI_TYPE, HI_OAId, HI_DGKEY)
				values
				(@sDogovor, @sHI_WHO, 'Курс отсутствует', @sRate, 'UPD', 'DOGOVORCURRENCYISNULL', 21, @dogovor_key)
            end
      end
END
return 0
GO

GRANT EXEC ON [dbo].[NationalCurrencyPrice2] TO PUBLIC
GO

/*********************************************************************/
/* end sp_NationalCurrencyPrice2.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_Paging.sql */
/*********************************************************************/
if exists (select * from [dbo].sysobjects where id = object_id(N'[dbo].[Paging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE [dbo].[Paging]
GO

CREATE procedure [dbo].[Paging]
@pagingType	smallint=2,
@countryKey	int,
@departFromKey	int,
@filter		varchar(4000),
@sortExpr	varchar(1024),
@pageNum	int=0,						-- номер страницы(начиная с 1 или количество уже просмотренных записей для исключения при @pagingType=@ACTUALPLACES_PAGING)
@pageSize	int=9999,
@agentKey	int=0,
@hotelQuotaMask smallint=0,
@aviaQuotaMask smallint=0,
@getServices	smallint=0,
@flightGroups	varchar(256),
@checkAgentQuota smallint,
@checkCommonQuota smallint,
@checkNoLongQuota smallint,
@requestOnRelease smallint,
@expiredReleaseResult int,
@noPlacesResult int,
@findFlight smallint,
@checkFlightPacket smallint,
@checkAllPartnersQuota smallint = null,
@calculateVisaDeadLine smallint = 0,
@noSmartSearch bit = 0,
@HideWithNotStartedSaleDate bit = 0		-- не показывать цены по турам, дата продажи которых еще не наступила.
AS
set nocount on

--<DATE>2013-04-18</DATE>
---<VERSION>2009.2.19.1</VERSION>

--koshelev
--@noPlacesResult должен быть больше 0
--2012-08-17
if (@noPlacesResult > 0 or @filter like '%in ()%')
	return

/******************************************************************************
**		Parameters:

		@filter		varchar(1024),	 - поисковый фильтр (where-фраза)
		@sortExpr	varchar(1024),	 - выражение сортировки
		@pageNum	int=1,	 - № страницы
		@pageSize	int=9999	 - размер страницы
		@transform	smallint=0	 - преобразовывать ли полученные данные для расположения продолжительностей по горизонтали
		@noSmartSearch bit = 0	- запрещает подмешивать варианты в поиск (приоритетней чем настройка в SystemSettings) - используется при недефолтной сортировке
*******************************************************************************/

-- vinge 9.08.2012 перенес в начало файла объявление таблицы с результатами
create table #resultsTable(
	paging_id int,
	pt_key bigint,			-- MEG00038762. Golubinsky. 20.12.2011. Увеличил тип до bigint
	pt_ctkeyfrom int,
	pt_cnkey int,
	pt_tourdate datetime,
	pt_pnkey int,
	pt_hdkey int,
	pt_hrkey int,
	pt_tourkey int,
	pt_tlkey int,
	pt_tourtype int,
	pt_tourname varchar(256),
	pt_toururl varchar(256),
	pt_hdname varchar(60),
	pt_hdstars varchar(12),
	pt_ctkey int,
	pt_rskey int,
	pt_hotelurl varchar(256),
	pt_pncode varchar(30),
	pt_rate varchar(3),
	pt_rmkey int,
	pt_rckey int,
	pt_ackey int,
	-- MEG00025561 Paul G 08.02.2010
	-- чтоб возраст ребёнка можно было отображать в прайсе
	pt_childagefrom int,
	pt_childageto int,
	pt_childagefrom2 int,
	pt_childageto2 int,
	-- End MEG00025561
	pt_cnname varchar(50),
	pt_ctname varchar(50),
	pt_rsname varchar(50),		
	pt_rmname varchar(60),
	pt_rcname varchar(60),
	pt_acname varchar(30),
	pt_chkey int,
	pt_chbackkey int,
	pt_hotelkeys varchar(256),
	pt_hotelroomkeys varchar(256),
	pt_hotelnights varchar(256),
	pt_hotelstars varchar(256),
	pt_pansionkeys varchar(256),
	pt_actual smallint,
	pt_visadeadline datetime
)


-- vinge 9.08.2012 без этой проверки хранимка вылетает с ошибкой
if (@hotelQuotaMask = 0) and (@aviaQuotaMask = 0)
begin
	select 0
	select 0
	select * from #resultsTable

	return
end

---=== Если это пейджинг для пакса, то перенаправляемся в его хранимку ===---
if (@pagingType = 4)
begin
	exec PagingPax @countryKey, @departFromKey, @filter, @sortExpr, @pageNum, @pageSize
			, @agentKey, @hotelQuotaMask,  @aviaQuotaMask, @flightGroups, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota
			, @requestOnRelease, @expiredReleaseResult, @noPlacesResult, @findFlight, @checkFlightPacket
	return
end


declare @mwSearchType int
select @mwSearchType=isnull(SS_ParmValue,1) from dbo.systemsettings 
where SS_ParmName='MWDivideByCountry'

-- BEGIN Added by Allen to prevent latest price selection
declare @mwLatestPrices int
select @mwLatestPrices = isnull(SS_ParmValue,1) from dbo.systemsettings 
where SS_ParmName='MW_PACLatestPrices'

-- BEGIN Added by Allen to prevent latest price selection
declare @tableName varchar(256)
declare @viewName varchar(256)
if(@mwSearchType=0)
begin
	set @tableName='mwPriceTable'
	set @viewName='dbo.mwPriceTableView'
	set @filter=' pt_cnkey= ' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom= ' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
end
else 
begin
	set @tableName=dbo.mwGetPriceViewName(@countryKey,@departFromKey)
	set @viewName=REPLACE(@tableName,'PriceTable','PriceTableView')
end

declare @MAX_ROWCOUNT int
set @MAX_ROWCOUNT=1000 -- если @pageSize больше этого числа,что пейджинг производиться не будет
declare @SIMPLE_PAGING smallint
set @SIMPLE_PAGING=1
declare @ACTUALPLACES_PAGING smallint
set @ACTUALPLACES_PAGING=2
declare @DYNAMIC_SPO_PAGING smallint
set @DYNAMIC_SPO_PAGING=3
declare @QUOTAMASK_NO smallint
set @QUOTAMASK_NO=0
declare @QUOTAMASK_ALL smallint
set @QUOTAMASK_ALL=7

-- настройка включающая SmartSearch
declare @mwUseSmartSearch int
select @mwUseSmartSearch=isnull(SS_ParmValue,0) from dbo.systemsettings 
where SS_ParmName='mwUseSmartSearch'
-- пока SmartSearch работает с только с ACTUALPLACES_PAGING
-- параметр @noSmartSearch - блокирует подмешивание
if (@pagingType <> @ACTUALPLACES_PAGING or @noSmartSearch = 1)
begin
	set @mwUseSmartSearch = 0
end

-- направление сортировки
declare @sortType smallint
set @sortType=1 -- по возр
declare @spageNum varchar(30)
declare @spageSize varchar(30)
set @spageNum=LTRIM(STR(@pageNum))
set @spageSize=LTRIM(STR(@pageSize))


if(@pagingType = @DYNAMIC_SPO_PAGING)
	set @findFlight = 0

if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
begin
		create table #checked(
			svkey int,
			code int,
			rmkey int,
			rckey int,
			date datetime,
			day int,
			days int,
			prkey int,
			pkkey int,
			res varchar(256),
			places int,
			step_index smallint,
			price_correction int,
			find_flight bit default(0)	-- 07.02.2012. Golubinsky. Для правильного кеширования результатов при подборе перелета
		)
end

declare @sql varchar(8000)
set @sql=''
if (@pagingType = 0 or @pagingType = 5)
begin
	declare @zptPos int
	declare @prefix varchar(1024)
	set @zptPos = charindex(',',@sortExpr)
	if(@zptPos > 0)
		set @prefix = substring(@sortExpr, 1, @zptPos)
	else
	set @prefix = @sortExpr

	if(charindex('desc', @prefix) > 0)
		set @sortType=-1

	if(@sortType <= 0)
	begin
		set @viewName=replace(@viewName,'mwPriceTableView','mwPriceTableViewDesc')
	end
	else
	begin
		set @viewName=replace(@viewName,'mwPriceTableView','mwPriceTableViewAsc')
	end

	create table #days(
		days int,
		nights int
	)

	if (@pagingType = 5)
		set @sql='select distinct top 5 pt_days,pt_nights from '
	else if (@pagingType = 0)
		set @sql='select distinct top 5 pt_days,pt_nights from '


	if(@mwSearchType=0)
-- BEGIN Removed by Allen
--			set @sql=@sql + @tableName +  ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
--		on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
--			and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
--				t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
-- END Removed by Allen


-- BEGIN Added by Allen
	 begin
		if (@mwLatestPrices=0 and charindex('pt_tourkey', @filter) > 0)	
			set @sql=@sql + @tableName +  ' t1 with(nolock) where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
		else
			set @sql=@sql + @tableName +  ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
		on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
			and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
				t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
	end	
-- END Added by Allen
	else
		set @sql=@sql + @tableName + ' t1 with(nolock) inner join (select pt_ctkeyfrom ctkeyfrom,pt_cnkey cnkey, pt_tourtype tourtype,pt_mainplaces mainplaces, pt_addplaces addplaces, pt_tourdate tourdate,pt_pnkey pnkey,pt_pansionkeys pansionkeys,pt_days days,pt_nights nights,pt_hdkey hdkey,pt_hotelkeys hotelkeys,,pt_hrkey hrkey,max(pt_key) ptkey from ' + @tableName + ' with(nolock) group by pt_ctkeyfrom,pt_cnkey,pt_tourtype,pt_mainplaces, pt_addplaces,pt_tourdate,pt_pnkey,pt_pansionkeys,pt_nights,pt_hotelnights,pt_days,pt_hdkey,pt_hotelkeys,pt_hrkey) t2
	on t1.pt_ctkeyfrom=t2.ctkeyfrom and t1.pt_cnkey=t2.cnkey and t1.pt_tourtype = t2.tourtype and t1.pt_mainplaces=t2.mainplaces and t1.pt_addplaces=t2.addplaces and t1.pt_tourdate=t2.tourdate
		and t1.pt_pnkey=t2.pnkey and t1.pt_nights=t2.nights and t1.pt_days=t2.days and
			t1.pt_hdkey=t2.hdkey and t1.pt_hrkey=t2.hrkey and t1.pt_key=t2.ptkey where ' + @filter

	set @sql=@sql + ' order by pt_days,pt_nights'
	insert into #days exec(@sql)

	declare @sKeysSelect varchar(2024)
	set @sKeysSelect=''
	declare @sAlter varchar(2024)
	set @sAlter=''

	if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
	begin
		create table #quotaCheckTable(
			pt_key bigint,			-- MEG00038762. Golubinsky. 20.12.2011. Увеличил тип до bigint
			pt_pricekey int,
			pt_tourdate datetime,			
			pt_days int,
			pt_nights int,
			pt_hdkey int,		
			pt_hdday int,
			pt_hdnights int,			
			pt_hdpartnerkey int,
			pt_rmkey int,
			pt_rckey int,
			pt_chkey int,
			pt_chday int,
			pt_chpkkey int,
			pt_chprkey int,
			pt_chbackkey int,
			pt_chbackday int,
			pt_chbackpkkey int,
			pt_chbackprkey int,
			pt_hdquota varchar(10),
			pt_chtherequota varchar(256),
			pt_chbackquota varchar(256),	
			pt_hdallquota varchar(128)
		)
	end

	declare @d int
	declare @n int
	declare @sdays varchar(10)
	declare @sWhere varchar(2024)
	set @sWhere=''
	declare @sAddSelect varchar(2024)
	set @sAddSelect=''
	declare @sAddIN varchar(2024)
	set @sAddIN=''
	declare @sAddDeclare varchar(2024)
	set @sAddDeclare=''
	declare @sJoin varchar(2024)
	set @sJoin=''
	declare @sUpdateList varchar(8000)
	set @sUpdateList=''
	declare @sTmp varchar(8000)
	set @sTmp=''
	declare @rowCount int
	declare @priceFilter nvarchar(512)
	set @priceFilter = N''
	declare @priceKeyFilter nvarchar(512)
	set @priceKeyFilter = N''

	declare @pricePart nvarchar(100)
	declare @nightsPart nvarchar(256)
	declare @hotelNightsPart nvarchar(256)

	set @pricePart = dbo.mwGetFilterPart(@filter, 'pt_price')

	declare dCur cursor for select days,nights from #days
	open dCur
	fetch next from dCur into @d,@n
	while (@@fetch_status=0)
	begin
		set @sdays=LTRIM(STR(@d)) + '_' + LTRIM(STR(@n))
		if(substring(@sortExpr, 1, 1) = '*')
		begin
			set @sortExpr = 'p_' + @sdays + substring(@sortExpr, 2, len(@sortExpr) - 1)
		end

		if(len(@sKeysSelect) > 0)
			set @sKeysSelect=@sKeysSelect + ','

		if (@pagingType = 5)
			set @sKeysSelect=@sKeysSelect + 'p_' + @sdays + ',pk_' + @sdays + ',null prk_' + @sdays + ',null hq_' + @sdays +',null cq_' + @sdays + ',null cbq_' + @sdays
		else if (@pagingType = 0)
			set @sKeysSelect=@sKeysSelect + 'p_' + @sdays + ',pk_' + @sdays 

		if(@pricePart is not null)
		begin
			if(len(@priceFilter) > 0)
				set @priceFilter = @priceFilter  + ' or '

			set @priceFilter = @priceFilter + replace(@pricePart, 'pt_price', 'p_' + @sdays)
		end

		if(len(@priceKeyFilter) > 0)
			set @priceKeyFilter = @priceKeyFilter  + ' or '

		set @priceKeyFilter = @priceKeyFilter + 'pk_' + @sdays + ' > 0'

		if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
		begin

			if(len(@sAlter) > 0)
				set @sAlter=@sAlter + ','

			if(len(@sAddSelect) > 0)
				set @sAddSelect=@sAddSelect + ','

			if (@pagingType = 5)
			begin
				set @sAlter=@sAlter + 'p_' + @sdays + ' float,pk_' + @sdays + ' int,prk_' + @sdays + ' int,hq_' + @sdays + ' varchar(10),cq_' + @sdays + ' varchar(256),cbq_' + @sdays + ' varchar(256)'

--				if(len(@sUpdateList) > 0)
--					set @sUpdateList=@sUpdateList + ','
				set @sUpdateList=@sUpdateList + '
				if exists(select pt_key from #quotaCheckTable where pt_days = ' + LTRIM(STR(@d)) + ' and pt_nights = ' + LTRIM(STR(@n)) + ')
				update #resultsTable set'

				set @sUpdateList = @sUpdateList + '
					prk_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_pricekey end),
					hq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_hdquota end),
					cq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_chtherequota end),
					cbq_' + @sdays + ' = (case when pk_' + @sdays + ' = tbl.pt_key then pt_chbackquota end)' 

				set @sUpdateList=@sUpdateList + '
				from (select * from #quotaCheckTable where pt_days = ' + LTRIM(STR(@d)) + ' and pt_nights = ' + LTRIM(STR(@n)) + ') tbl
				where CURRENT OF dataCursor'

				if(len(@sAddDeclare) > 0)
					set @sAddDeclare=@sAddDeclare + ','

				set @sAddDeclare=@sAddDeclare + '@pk_' + @sdays + ' int'

				set @sAddSelect=@sAddSelect + '@pk_' + @sdays + ' = pk_' + @sdays

				if(len(@sAddIN) > 0)
					set @sAddIN=@sAddIN + ','

				set @sAddIN=@sAddIN + '@pk_' + @sdays
			end
			else if (@pagingType = 0)
			begin
				set @sAlter=@sAlter + 'p_' + @sdays + ' float,pk_' + @sdays + ' int'

				if(len(@sWhere) > 0)
					set @sWhere=@sWhere + ' or '

				set @sWhere=@sWhere + 'pt_key in (select pk_' + @sdays + ' from #resultsTable)'

				set @sAddSelect=@sAddSelect + ' t_' + @sdays + '.pt_pricekey prk_' + @sdays + ', t_' + @sdays + '.pt_hdquota hq_' + @sdays + ', t_' + @sdays + '.pt_chtherequota cq_' + @sdays + ', t_' + @sdays + '.pt_chbackquota cbq_' + @sdays

				set @sJoin=@sJoin + ' left outer join #quotaCheckTable t_' + @sdays + ' on t.pk_' + @sdays + ' = t_' + @sdays + '.pt_key'

			end
		end

		fetch next from dCur into @d,@n
	end
	close dCur
	deallocate dCur

	if(len(@sKeysSelect) > 0 and(@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
	begin
		set @sTmp = 'alter table #resultsTable add ' + @sAlter
		exec(@sTmp)

		if(@pricePart is not null)
		begin
			set @filter = REPLACE(@filter, @pricePart, '1 = 1')
			set @filter = @filter + ' and (' + @priceFilter + ')'
			set @sWhere = @sWhere + ' and ' + @pricePart
		end

		set @nightsPart = dbo.mwGetFilterPart(@filter, 'pt_nights')
		if(@nightsPart is not null)
			set @filter = REPLACE(@filter, @nightsPart, '1 = 1')

		set @hotelNightsPart = dbo.mwGetFilterPart(@filter, 'pt_hotelnights')
		while(@hotelNightsPart is not null)
		begin
			set @filter = REPLACE(@filter, @hotelNightsPart, '1 = 1')
			set @hotelNightsPart = dbo.mwGetFilterPart(@filter, 'pt_hotelnights')
		end

		set @filter = @filter + ' and (' + @priceKeyFilter + ')'
		
		--MEG00038933 Tkachuk 16-02-2012
		--вызываем с последним параметром=null, иначе пытается записать в #resultsTable доп.столбец, и падает с ошибкой
		insert into #resultsTable exec PagingSelect @pagingType,@sKeysSelect,@spageNum,@spageSize,@filter,@sortExpr,@tableName,@viewName, null
		
		--MEG00038933 Tkachuk 16-02-2012
		--получаем количество строк не через output-переменную в предыдущей строке, а через select в результирующей таблице
		Set @rowCount = (select COUNT(*) from #resultsTable)
		Select @rowCount

		declare @aviaMask smallint

		if (@pagingType = 5)
		begin
			declare dataCursor cursor for
				select paging_id from #resultsTable
			for update

			open dataCursor

			declare @paging_id int, @reviewed int, @selected int, @actual smallint, @actualRow smallint

			set @aviaMask = @aviaQuotaMask
			set @reviewed = @pageNum
			set @selected = 0

			fetch next from dataCursor into @paging_id
		end
		else if (@pagingType = 0)
		begin
			set @aviaMask = null
		end
		while (@pagingType = 0 or (@@fetch_status = 0 and @selected < @pageSize))
		begin
			if (@pagingType = 5)
			begin
				set @actualRow = 0

				set @sTmp = 'declare ' + @sAddDeclare + '
							select ' + @sAddSelect + ' from #resultsTable where paging_id = ' + ltrim(str(@paging_id)) + '
							select pt_key, pt_pricekey, pt_tourdate, pt_days,	pt_nights, pt_hdkey, pt_hdday,
									pt_hdnights, pt_hdpartnerkey, pt_rmkey,	pt_rckey, pt_chkey,	pt_chday, pt_chpkkey,
									pt_chprkey, pt_chbackkey, pt_chbackday, pt_chbackpkkey, pt_chbackprkey, null, null, null, null
							from ' + @tableName + ' with(nolock)
							where pt_key in (' + @sAddIN + ')'
			end
			else if (@pagingType = 0)
			begin
				set @sTmp = 'select pt_key, pt_pricekey, pt_tourdate, pt_days,	pt_nights, pt_hdkey, pt_hdday,
									pt_hdnights, pt_hdpartnerkey, pt_rmkey,	pt_rckey, pt_chkey,	pt_chday, pt_chpkkey,
									pt_chprkey, pt_chbackkey, pt_chbackday, pt_chbackpkkey, pt_chbackprkey, null, null, null, null
							from ' + @tableName + ' with(nolock)
							where ' + @sWhere
			end

			insert into #quotaCheckTable exec(@sTmp)

			declare quotaCursor cursor for
			select pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,
				pt_chkey,pt_chbackkey,
				pt_hdday,pt_hdnights,(case when isnull(@checkAllPartnersQuota, 0) > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when @checkFlightPacket > 0 then pt_chpkkey else -1 end) as pt_chpkkey,pt_chprkey,
				pt_chbackday,(case when @checkFlightPacket > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey, pt_chbackprkey,pt_days
			from #quotaCheckTable
			for update of pt_hdquota,pt_chtherequota,pt_chbackquota

			declare @hdkey int,@rmkey int,@rckey int,@tourdate datetime,
				@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,
				@chday int,@chpkkey int,@chprkey int,@chbackday int,
				@chbackpkkey int,@chbackprkey int,@days int

			open quotaCursor

			fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
				@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
				@chday,@chpkkey,@chprkey,@chbackday,
				@chbackpkkey,@chbackprkey,@days

			declare @tmpHotelQuota varchar(10)
			declare @tmpThereAviaQuota varchar(256)		
			declare @tmpBackAviaQuota varchar(256)		
			declare @allPlaces int,@places int

			while(@@fetch_status=0)
			begin
				set @actual=1		
	
				if(@aviaQuotaMask > 0)
				begin
					set @tmpThereAviaQuota=null
					if(@chkey > 0)
					begin 
						select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
						if (@tmpThereAviaQuota is null)
						begin
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chkey, @flightGroups, @agentKey, @chprkey, @tourdate, @chday, @requestOnRelease, @noPlacesResult, @checkAgentQuota, @checkCommonQuota, @checkNoLongQuota, @findFlight, @chpkkey, @days, @expiredReleaseResult, @aviaMask, @tmpThereAviaQuota output
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota)
						end
						if(len(@tmpThereAviaQuota)=0)
							set @actual=0						
					end
					set @tmpBackAviaQuota=null
					if(@chbackkey > 0)
					begin
						select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
						if (@tmpBackAviaQuota is null)
						begin
							exec dbo.mwCheckFlightGroupsQuotes @pagingType, @chbackkey, @flightGroups,@agentKey,@chbackprkey, @tourdate,@chbackday,@requestOnRelease,@noPlacesResult,@checkAgentQuota,@checkCommonQuota,@checkNoLongQuota,@findFlight,@chbackpkkey,@days,@expiredReleaseResult,@aviaMask, @tmpBackAviaQuota output
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota)
						end
						if(len(@tmpBackAviaQuota)=0)
							set @actual=0
					end
				end
				if(@hotelQuotaMask > 0)
				begin
					set @tmpHotelQuota=null
					select @tmpHotelQuota=res,@places=places from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
					if (@tmpHotelQuota is null)
					begin
						select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey, @agentKey,@hdprkey,@tourdate,@hdday,@hdnights,@requestOnRelease,@noPlacesResult,@checkAgentQuota,@checkCommonQuota,@checkNoLongQuota,0,0,0,0,0,@expiredReleaseResult)
						set @tmpHotelQuota=ltrim(str(@places)) + ':' + ltrim(str(@allPlaces))
						insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res,places) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota,@places)
					end
			
					if((@places > 0 and (@hotelQuotaMask & 1)=0) or (@places=0 and (@hotelQuotaMask & 2)=0) or (@places=-1 and (@hotelQuotaMask & 4)=0))
						set @actual=0
				end
				update #quotaCheckTable set pt_hdquota=@tmpHotelQuota,
					pt_chtherequota=@tmpThereAviaQuota,
					pt_chbackquota=@tmpBackAviaQuota
				where CURRENT OF quotaCursor
				
				if (@pagingType = 5)
				begin
					if (@actual > 0)
						set @actualRow = 1
				end

				fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
					@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
					@chday,@chpkkey,@chprkey,@chbackday,
					@chbackpkkey,@chbackprkey,@days
			end

			close quotaCursor
			deallocate quotaCursor

			if (@pagingType = 5)
			begin
				if(@actualRow > 0)
				begin
					set @sTmp = @sUpdateList--'update #resultsTable set ' + @sUpdateList + ', pt_actual = 1 from #quotaCheckTable where CURRENT OF dataCursor'
					set @sTmp = @sTmp + '
					update #resultsTable set pt_actual = 1 where CURRENT OF dataCursor
					'
--					print @sTmp
--					select * from #resultsTable
--					select * from #quotaCheckTable
					exec (@sTmp)
--					select * from #resultsTable

					set @selected = @selected + 1
				end

				truncate table #quotaCheckTable
				
				set @reviewed=@reviewed + 1

				fetch next from dataCursor into @paging_id
			end
			else if (@pagingType = 0)
			begin
				set @sTmp = 'select t.*, ' + @sAddSelect + ' from #resultsTable t ' + @sJoin + ' order by t.paging_id'
				exec(@sTmp)
				break
			end
		end

		if (@pagingType = 5)
		begin
			close dataCursor
			deallocate dataCursor
			
			select @reviewed
			select * from #resultsTable where pt_actual = 1 order by paging_id
		end
	end
	else if(len(@sKeysSelect) > 0)
		exec PagingSelect @pagingType,@sKeysSelect,@spageNum,@spageSize,@filter,@sortExpr,@tableName,@viewName, 1
	else
	begin
		select 0
		if (@pagingType = 5)
			select 0
		select * from #resultsTable
	end
end
else
begin

	-- @pageSize > @MAX_ROWCOUNT=считаем,что в этом случае пейджинг не нужен - тянется все
	if(@pageSize > @MAX_ROWCOUNT)
	begin
		set @sql=@sql + '
			select 0
			select
			'
	end
	else -- реализуем пейджинг
	begin
		create table #Paging(
			pgId int identity,
			ptKey int primary key,
			ptpricekey bigint,
			newPrice money,
			pt_hdquota varchar(10),
			pt_chtherequota varchar(256),
			pt_chbackquota varchar(256),
			chkey int,
			chbackkey int,
			stepId int,
			priceCorrection float,
			pt_hdallquota varchar(256),
			-- признак того что вариант был подмешан (нужно для выделения)
			pt_smartSearch bit default 0
		)
		
		if((@pagingType <> @ACTUALPLACES_PAGING and @pagingType <> @DYNAMIC_SPO_PAGING) or (@hotelQuotaMask <= 0 and @aviaQuotaMask <= 0))
			set @sql=@sql + ' 
			insert into #Paging(ptkey) select ' 
		else
		begin

			-- Подмешивание отелей (SmartSearch) работает только для первой страницы
			if (@mwUseSmartSearch = 1 and @pageNum = 0)
			begin
				-- максимально возможное количество результов, которые могут быть подмешаны
				declare @maxSmartSearchResult tinyint; set @maxSmartSearchResult = 3;
				declare @smaxSmartSearchResult varchar(3); set @smaxSmartSearchResult=LTRIM(STR(@maxSmartSearchResult))
				
				-- количество реально подмешанных вариантов
				declare @realDashVariantsNumber smallint;
				
				set @sql=@sql + '
				declare quotaCursor cursor fast_forward read_only for
				select pt_key,pt_tourkey,pt_pricekey
				,pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,pt_hdday,pt_hdnights, (case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,pt_chprkey,pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,pt_chbackprkey,pt_days, 
				pt_chkey, pt_chbackkey, 0, '''' pt_chdirectkeys, '''' pt_chbackkeys, '''' pt_hddetails
				, pt_directFlightAttribute, pt_backFlightAttribute, pt_mainplaces, pt_hrkey
				from ' + @tableName + ' with(nolock) inner join hotelPriorities with(nolock) on pt_hdkey = hp_hdkey'
				
				if @HideWithNotStartedSaleDate = 1
					set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid) '
					
				set @sql = @sql + ' where (' + @filter
				-- null не может быть для ВСЕХ одновременно приоритетов присутствующих в фильтах
				-- т.к. по стране фильтруем всегда, то приоритет для страны проверяем на null тоже всегда
				set @sql = @sql + ') and (HP_CountryPriority is not null'
				-- если есть фильтр для города, то проверяем на null приоритет для города
				if (charindex('pt_ctkey',@filter) > 0)
				begin
					set @sql = @sql + ' or HP_CityPriority is not null '
				end
				-- если есть фильтр для курорта, то проверяем на null приоритет для курорта
				if (charindex('pt_rskey',@filter) > 0)
				begin
					set @sql = @sql + ' or HP_ResortPriority is not null '
				end
				set @sql = @sql + ') '
				set @sql = @sql + '
				-- фильтр по отсутсвию инфанта
				and not exists (select top 1 1 from accmdmentype where ac_key=pt_ackey and ac_name like ''%инфант%'')
				order by '
				
				-- если в фильтре есть город
				if (charindex('pt_ctkey',@filter) > 0)
				begin
					set @sql = @sql + 'case when HP_CityPriority is null then 1 else 0 end, hp_cityPriority, '
				end
				
				-- если в фильтре есть курорт
				if (charindex('pt_rskey',@filter) > 0)
				begin
					set @sql = @sql + 'case when HP_ResortPriority is null then 1 else 0 end, hp_resortPriority, '
				end
				
				-- по стране и стандартной сортировке сортируем в любом случае
				set @sql = @sql + 'case when HP_CountryPriority is null then 1 else 0 end, hp_countryPriority, ' + @sortExpr

				-- запустим mwCheckQuotesCycle с последним параметром = 1 (индикатор того, что ищем подмешанные варианты)
				-- маски квот для подмешанных вариантов:
				-- отель: 1 - есть
				-- перелет: 1 - есть
				set @sql=@sql + '
				open quotaCursor

				exec dbo.mwCheckQuotesCycle ' + ltrim(str(@pagingType))+ ', ' + @spageNum + ', ' + @smaxSmartSearchResult + ', ' + ltrim(str(@agentKey)) + ', 1, 1, ''' + @flightGroups + ''', ' + ltrim(str(@checkAgentQuota)) + ', ' + ltrim(str(@checkCommonQuota)) + ', ' + ltrim(str(@checkNoLongQuota)) + ', ' + ltrim(str(@requestOnRelease)) + ', ' + ltrim(str(@expiredReleaseResult)) + ', ' + ltrim(str(@noPlacesResult)) + ', ' + ltrim(str(@findFlight)) + ', 1

				close quotaCursor
				deallocate quotaCursor
				'
				--print @sql;
				exec (@sql);
				set @sql = '';
				-- после этого в #Paginge - хранится столько строк сколько мы подмешали (0-3)
				-- уменьшим pageSize на это число, чтобы сохранить общее кол-во выводимых строк
				select @realDashVariantsNumber = count(1) from #Paging;
				set @pageSize = @pageSize - @realDashVariantsNumber;
				set @spageSize=ltrim(str(@pageSize));
			end

			set @sql=@sql + ' 
			declare quotaCursor cursor fast_forward read_only for '
			if(@pagingType = @DYNAMIC_SPO_PAGING)
				set @sql = @sql + ' with Prices as (select '
			else
				set @sql = @sql + ' select '
		end

		if(@pageSize < @MAX_ROWCOUNT)
		begin
			if(@pagingType=@SIMPLE_PAGING)
				set @sql=@sql + ' top ' + str(@MAX_ROWCOUNT)
			else if((@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING) and @hotelQuotaMask=0 and @aviaQuotaMask=0)
				set @sql=@sql + ' top ' + @spageSize
		end
	
		set @sql=@sql + ' pt_key,pt_tourkey, pt_pricekey '
		if((@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING) and (@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
		begin
			set @sql=@sql + ',pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,pt_hdday,pt_hdnights, (case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0))) + ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,pt_chprkey,pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket)) + ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,pt_chbackprkey,pt_days, '
			if(@pagingType <> @DYNAMIC_SPO_PAGING)
				set @sql = @sql + ' pt_chkey, pt_chbackkey, 0, pt_chdirectkeys, pt_chbackkeys, pt_hddetails '
			else
				set @sql = @sql + ' ch_key as pt_chkey, chb_key as pt_chbackkey, row_number() over(order by ' + @sortExpr + ') as rowNum '
		end
		set @sql=@sql + ' , pt_directFlightAttribute, pt_backFlightAttribute, pt_mainplaces, pt_hrkey from ' + @tableName + ' with(nolock) '
		
		if @HideWithNotStartedSaleDate = 1
			set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid) '

		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ' left outer join 
			(select pt_tourdate as tourdate, pt_chbackday as chbackday, pt_chkey as chkey, pt_chbackkey as chbackkey, ch.ch_key as ch_key, chb.ch_key as chb_key 
				from (select distinct pt_tourdate, pt_chbackday, pt_chkey, pt_chbackkey from ' + @tableName + ' where ' + @filter + ') ptd 
				left outer join charter ptch with(nolock) on (ptch.ch_key = pt_chkey) left outer join charter ptchb with(nolock) on (ptchb.ch_key = pt_chbackkey)
				left outer join charter ch with(nolock) on (ptch.ch_citykeyfrom = ch.ch_citykeyfrom and ptch.ch_citykeyto = ch.ch_citykeyto) left outer join charter chb with(nolock) on (ptchb.ch_citykeyto = chb.ch_citykeyto and ptchb.ch_citykeyfrom = chb.ch_citykeyfrom and chb.ch_airlinecode = ch.ch_airlinecode) 
			left outer join airseason a with(nolock) on (a.as_chkey = ch.ch_key and ptd.pt_tourdate between a.as_datefrom and a.as_dateto and a.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, -1, ptd.pt_tourdate))))+ ''%'')) left outer join airseason ab with(nolock) on (ab.as_chkey = chb.ch_key and dateadd(day, pt_chbackday - 1, ptd.pt_tourdate) between ab.as_datefrom and ab.as_dateto and ab.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, pt_chbackday - 2, ptd.pt_tourdate)))) + ''%''))) pt1
		on (pt_tourdate = tourdate and pt_chkey = chkey and pt_chbackkey = chbackkey and pt_chbackday = chbackday)'

		if @aviaQuotaMask = 5 or @aviaQuotaMask = 1
		begin
			-- Соединим выборку курсора квот с кешем квот, чтобы отсеять туры с закончившимися перелетами
			set @filter = @filter + '
			and not exists 
								(
								select top 1 1 
								from CacheQuotas as directCharter with (nolock) 
								where 
									directCharter.cq_svkey = 1
									and directCharter.cq_code = pt_chkey
									and directCharter.cq_date = pt_tourdate
									and directCharter.cq_day = pt_chday
									and directCharter.cq_days = pt_days
									and directCharter.cq_prkey = pt_chprkey
									and directCharter.cq_pkkey = pt_chpkkey
									and directCharter.cq_places = 0
									and (pt_directFlightAttribute is not null 
											and 
											(
												(directCharter.cq_findFlight = 1 and (pt_directFlightAttribute & 2) = 2)
												or
												(directCharter.cq_findFlight = 0 and (pt_directFlightAttribute & 2) = 0)
											)
										)
								)
			and not exists 
								(
								select top 1 1 
								from CacheQuotas as backCharter  with (nolock) 
								where
									backCharter.cq_svkey = 1
									and backCharter.cq_code = pt_chbackkey
									and backCharter.cq_date = pt_tourdate
									and backCharter.cq_day = pt_chbackday
									and backCharter.cq_days = pt_days
									and backCharter.cq_prkey = pt_chprkey
									and backCharter.cq_pkkey = pt_chpkkey
									and backCharter.cq_places = 0
									and (pt_backFlightAttribute is not null 
											and 
											(
												(backCharter.cq_findFlight = 1 and (pt_backFlightAttribute & 2) = 2)
												or
												(backCharter.cq_findFlight = 0 and (pt_backFlightAttribute & 2) = 0)
											)
									)
								)
			'
		end

		if (@mwSearchType=0)
			set @sql=@sql + ' where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' +  LTRIM(STR(@departFromKey)) + ' and ' + @filter
		else 
			set @sql=@sql + ' where ' + @filter
			

		if((@pagingType=@ACTUALPLACES_PAGING) and @pageNum > 0)
		begin
			declare @a int
--			--и еще добавим невключающее условие по количеству предварительно просмотренных записей
--			set @sql=@sql + ' and pt_key not in (select top '+@spageNum+' pt_key '
--
--			if (@mwSearchType=0)
--				set @sql=@sql + ' from dbo.mwPriceTable  with(nolock) where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
--			else
--				set @sql=@sql + ' from ' + dbo.mwGetPriceViewName (@countryKey,@departFromKey) + ' with(nolock) where ' + @filter
--
--			if len(isnull(@sortExpr,'')) > 0
--				set @sql=@sql + ' order by '+ @sortExpr
--			set @sql=@sql + ') '
		end
		else if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ') select * from Prices where rowNum > ' + @spageNum
		
		if(substring(@sortExpr, 1, 1) = '*')					-- begin tkachuk 21.02.2012 Исправлена ошибка, возникающая при некотором наборе параметров
		begin
			set @sortExpr = SUBSTRING(@sortExpr, 2, LEN(@sortExpr) - 1)
			set @sortExpr = LTRIM(@sortExpr)
			
			if(SUBSTRING(@sortExpr, 1, 1) = ',')
			begin
				set @sortExpr = SUBSTRING(@sortExpr, 2, LEN(@sortExpr) - 1)
				set @sortExpr = LTRIM(@sortExpr)
			end
		end														-- end tkachuk 21.02.2012

		if (len(isnull(@sortExpr,'')) > 0 and @pagingType <> @DYNAMIC_SPO_PAGING)
			set @sql=@sql + ' order by '+ @sortExpr
	
		if(@pagingType=@ACTUALPLACES_PAGING or @pagingType=@DYNAMIC_SPO_PAGING)
		begin
			if (@pageNum=0) -- количество записей возвращаем только при запросе первой страницы
			begin
				set @sql=@sql + ' 
				select count(*) from ' + @tableName + ' with(nolock) '
				
				if @HideWithNotStartedSaleDate = 1
					set @sql = @sql + ' inner join tp_tours with (nolock) on pt_tourkey = to_key and (TO_DateValidBegin IS NULL OR getdate() >= TO_DateValidBegin) AND (TO_DateValid IS NULL OR getdate() <= TO_DateValid)'
				
				if(@pagingType = @DYNAMIC_SPO_PAGING)
					set @sql = @sql + ' left outer join 
						(select pt_tourdate tourdate, pt_chbackday chbackday, pt_chkey chkey, pt_chbackkey chbackkey, ch.ch_key as ch_key, chb.ch_key as chb_key 
							from (select distinct pt_tourdate, pt_chbackday, pt_chkey, pt_chbackkey from ' + @tableName + ' where ' + @filter + ') ptd 
							left outer join charter ptch with(nolock) on (ptch.ch_key = pt_chkey) left outer join charter ptchb with(nolock) on (ptchb.ch_key = pt_chbackkey) left outer join charter ch with(nolock) on (ptch.ch_citykeyfrom = ch.ch_citykeyfrom and ptch.ch_citykeyto = ch.ch_citykeyto)
						left outer join charter chb with(nolock) on (ptchb.ch_citykeyto = chb.ch_citykeyto and ptchb.ch_citykeyfrom = chb.ch_citykeyfrom and chb.ch_airlinecode = ch.ch_airlinecode) left outer join airseason a with(nolock) on (a.as_chkey = ch.ch_key and ptd.pt_tourdate between a.as_datefrom and a.as_dateto and a.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, -1, ptd.pt_tourdate))))+ ''%''))
						left outer join airseason ab with(nolock) on (ab.as_chkey = chb.ch_key and dateadd(day, pt_chbackday - 1, ptd.pt_tourdate) between ab.as_datefrom and ab.as_dateto and ab.as_week like (''%'' +  ltrim(str(datepart(dw, dateadd(day, pt_chbackday - 2, ptd.pt_tourdate)))) + ''%''))) pt1
					on (pt_tourdate = tourdate and pt_chkey = chkey and pt_chbackkey = chbackkey and pt_chbackday = chbackday)'
				if (@mwSearchType=0)
					set @sql = @sql + ' where pt_cnkey=' + LTRIM(STR(@countryKey)) + ' and pt_ctkeyfrom=' + LTRIM(STR(@departFromKey)) + ' and ' + @filter
				else
					set @sql = @sql + ' where ' + @filter
			end
			else
				set @sql=@sql + ' select 0 '

			if(@hotelQuotaMask=0 and @aviaQuotaMask=0)
				set @sql=@sql + ' 
					select ' + ltrim(str(@pageNum + @pageSize))
			else
			begin
				set @sql=@sql + '
				open quotaCursor

				exec dbo.mwCheckQuotesCycle ' + ltrim(str(@pagingType))+ ', ' + @spageNum + ', ' + @spageSize + ', ' + ltrim(str(@agentKey)) + ', ' + ltrim(str(@hotelQuotaMask)) + ', ' + ltrim(str(@aviaQuotaMask)) + ', ''' + @flightGroups + ''', ' + ltrim(str(@checkAgentQuota)) + ', ' + ltrim(str(@checkCommonQuota)) + ', ' + ltrim(str(@checkNoLongQuota)) + ', ' + ltrim(str(@requestOnRelease)) + ', ' + ltrim(str(@expiredReleaseResult)) + ', ' + ltrim(str(@noPlacesResult)) + ', ' + ltrim(str(@findFlight)) + ', 0, ''' + @tableName + '''

				close quotaCursor
				deallocate quotaCursor
				'
				if(@pagingType = @DYNAMIC_SPO_PAGING)
					set @sql = @sql + 'select dbo.GetDynamicRulesStepValue(getdate())'
			end
		end
		else
		begin

			set @sql=@sql + '
			select @@rowCount'
		end

		exec(@sql)

		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql ='
			DECLARE @firstRecord int,@lastRecord int
			SET @firstRecord=('+ @spageNum + ' - 1) * ' + @spageSize+ ' + 1
			SET @lastRecord=('+ @spageNum +' *'+ @spageSize + ') 
			select '
		end
		else
			set @sql= ' select '

	end

	set @sql=@sql + '
		pt_tourdate,
		pt_days,
		pt_nights,
		pt_cnkey,
		pt_ctkeyfrom,
		pt_ctkeyto,
		pt_tourkey,
		pt_tourtype,
		pt_tlkey,
		pt_main,
		pt_pricelistkey,
		pt_pricekey,'
	if (@pagingType = 1)
	begin
		set @sql=@sql + 'pt_price,'
	end
	else
	begin
		set @sql=@sql + 'case when newPrice is not null then newPrice else pt_price end as pt_price,'
	end		
	set @sql=@sql + 'pt_hdkey,
		pt_hdpartnerkey,
		pt_rskey,
		pt_ctkey,
		pt_hdstars,
		pt_pnkey,
		pt_hrkey,
		pt_rmkey,
		pt_rckey,
		pt_ackey,
		pt_childagefrom,
		pt_childageto,
		pt_childagefrom2,
		pt_childageto2,
		pt_hdname,
		pt_tourname,
		pt_pnname,
		pt_pncode,
		pt_rmname,
		pt_rmcode,
		pt_rcname,
		pt_rccode,
		pt_acname,
		pt_accode,
		pt_rsname,
		pt_ctname,
		pt_rmorder,
		pt_rcorder,
		pt_acorder,
		pt_rate,
		tl_webhttp pt_toururl,
		hd_http pt_hotelurl,
		[pt_hdday],
		[pt_hdnights],
		[pt_chday],
		[pt_chpkkey],
		[pt_chprkey],
		[pt_chbackday],
		[pt_chbackpkkey],
		[pt_chbackprkey],
		[pt_ctkeybackfrom],
		[pt_ctkeybackto],
		pt_hotelkeys,
		pt_hotelroomkeys,
		pt_hotelstars,
		pt_pansionkeys,
		pt_hotelnights,
		pt_key,
		pt_hddetails,
		pt_topricefor,'		-- MEG00031932. Golubinsky. 06.07.2011. Включение в результат типа цены

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @sql = @sql + '
		chkey as	pt_chkey,
		chbackkey as pt_chbackkey,
		stepId as pt_hdstepindex,
		priceCorrection as pt_hdpricecorrection
	'
	else
		set @sql = @sql + '
		[pt_chkey],
		[pt_chbackkey]
	'

	if (@pagingType = @ACTUALPLACES_PAGING)
	begin
		set @sql = @sql + '
		,[pt_smartSearch]
	'
	end

	if(@getServices > 0)
		set @sql=@sql + ',dbo.mwGetServiceClasses(pt_pricelistkey) pt_srvClasses'
	if (@pagingType <> @SIMPLE_PAGING)
	begin
		if(@hotelQuotaMask > 0)
			set @sql=@sql + ',pt_hdquota,pt_hdallquota '
		if(@aviaQuotaMask > 0)
			set @sql=@sql + ',pt_chtherequota,pt_chbackquota '
	end
	if(@calculateVisaDeadLine > 0)
		set @sql=@sql + ',dbo.mwGetVisaDeadlineDate(pt_tlkey, pt_tourdate, pt_ctkeyfrom) pt_visadeadline '

	if(@pagingType = @DYNAMIC_SPO_PAGING)
		set @sql = @sql + ', (''<nobr><b>'' + isnull(ch.ch_airlinecode, '''') + '' '' + isnull(ch.ch_flight, '''') + ''</b>'' + ''('' + isnull(ltrim(str(datepart(hh, a.as_timefrom))), '''') + '':'' + isnull(ltrim(str(datepart(mi, a.as_timefrom))), '''') + ''-'' + isnull(ltrim(str(datepart(hh, a.as_timeto))), '''') + '':'' + isnull(ltrim(str(datepart(mi, a.as_timeto))), '''') + '')</nobr><br/>'' + isnull(ch.ch_aircraft, '''') + ''&nbsp;('' + isnull(ch.ch_portcodefrom, '''') + ''-'' + isnull(ch.ch_portcodeto, '''') + '')'') as pt_chinfo
						,(''<nobr><b>'' + isnull(chb.ch_airlinecode, '''') + '' '' + isnull(chb.ch_flight, '''') + ''</b>''  + ''('' + isnull(ltrim(str(datepart(hh, ab.as_timefrom))), '''') + '':'' + isnull(ltrim(str(datepart(mi, ab.as_timefrom))), '''') + ''-'' + isnull(ltrim(str(datepart(hh, ab.as_timeto))), '''') + '':'' + isnull(ltrim(str(datepart(mi, ab.as_timeto))), '''') + '')</nobr><br/>'' + isnull(chb.ch_aircraft, '''') + ''&nbsp;('' + isnull(chb.ch_portcodefrom, '''') + ''-'' + isnull(chb.ch_portcodeto, '''') + '')'') as pt_chbackinfo'

	if(@pagingType=@SIMPLE_PAGING and (@hotelQuotaMask > 0 or @aviaQuotaMask > 0))
		set @sql=@sql + ' into #resultsTable '

	if (@mwSearchType=0)
		set @sql=@sql + ' from mwPriceTable'
	else
		set @sql=@sql + ' from ' + dbo.mwGetPriceViewName (@countryKey,@departFromKey)
	set @sql=@sql + ' with(nolock) inner join hoteldictionary with(nolock) on pt_hdkey=hd_key inner join tbl_turlist with(nolock) on pt_tlkey=tl_key '

	if(@pageSize > @MAX_ROWCOUNT)
	begin
		set @sql=@sql + ' where ' + @filter

		if len(isnull(@sortExpr,'')) > 0
			set @sql=@sql + ' order by '+ @sortExpr

		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql=@sql + '
			select * from #resultsTable
			'
		end
	end
	else
	begin
		set @sql=@sql + ' inner join #Paging on (pt_key=ptKey) '
		if(@pagingType = @DYNAMIC_SPO_PAGING)
			set @sql = @sql + ' left outer join Charter ch with(nolock) on chkey = ch.ch_key left outer join airseason a with(nolock) on (pt_chkey = a.as_chkey and pt_tourdate between a.as_datefrom and a.as_dateto and charindex(cast(datepart(dw, dateadd(day, -1, pt_tourdate)) as varchar(1)), a.as_week) > 0)
					left outer join Charter chb with(nolock) on chbackkey = chb.ch_key left outer join airseason ab with(nolock) on (pt_chbackkey = ab.as_chkey and dateadd(day, pt_chbackday - 1, pt_tourdate) between ab.as_datefrom and ab.as_dateto and charindex(cast(datepart(dw, dateadd(day, pt_chbackday-2, pt_tourdate)) as varchar(1)), ab.as_week) > 0)'
		if(@pagingType=@SIMPLE_PAGING)
		begin
			set @sql=@sql + ' where pgId between @firstRecord and @lastRecord order by pgId'

			if(@hotelQuotaMask > 0 or @aviaQuotaMask > 0)
				set @sql=@sql + '

					declare quotaCursor cursor for
					select pt_hdkey,pt_rmkey,pt_rckey,pt_tourdate,
						pt_chkey,pt_chbackkey,
						pt_hdday,pt_hdnights,(case when ' + ltrim(str(isnull(@checkAllPartnersQuota, 0)))+ ' > 0 then -1 else pt_hdpartnerkey end),pt_chday,(case when ' + ltrim(str(@checkFlightPacket))+ ' > 0 then pt_chpkkey else -1 end) as pt_chpkkey,pt_chprkey,
						pt_chbackday,(case when ' + ltrim(str(@checkFlightPacket))+ ' > 0 then pt_chbackpkkey else -1 end) as pt_chbackpkkey,pt_chbackprkey,pt_days
					from #resultsTable
					for update of pt_hdquota,pt_chtherequota,pt_chbackquota
	
					declare @hdkey int,@rmkey int,@rckey int,@tourdate datetime,
						@chkey int,@chbackkey int,@hdday int,@hdnights int,@hdprkey int,
						@chday int,@chpkkey int,@chprkey int,@chbackday int,
						@chbackpkkey int,@chbackprkey int,@days int
	
					open quotaCursor
	
					fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
						@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
						@chday,@chpkkey,@chprkey,@chbackday,
						@chbackpkkey,@chbackprkey,@days
	
					declare @tmpHotelQuota varchar(10)
					declare @tmpThereAviaQuota varchar(256)		
					declare @tmpBackAviaQuota varchar(256)		
					declare @allPlaces int,@places int
	
					while(@@fetch_status=0)
					begin
						'				
					if(@hotelQuotaMask > 0)
						set @sql=@sql + ' 
						set @tmpHotelQuota=null
						select @tmpHotelQuota=res from #checked where svkey=3 and code=@hdkey and rmkey=@rmkey and rckey=@rckey and date=@tourdate and day=@hdday and days=@hdnights and prkey=@hdprkey
						if (@tmpHotelQuota is null)
						begin
							select @places=qt_places,@allPlaces=qt_allPlaces from dbo.mwCheckQuotesEx(3,@hdkey,@rmkey,@rckey,' + ltrim(str(@agentKey)) + ',@hdprkey,@tourdate,@hdday,@hdnights,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',0,0,0,0,0,' + ltrim(str(@expiredReleaseResult)) +')
							set @tmpHotelQuota=ltrim(str(@places)) + '':'' + ltrim(str(@allPlaces))
							insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(3,@hdkey,@rmkey,@rckey,@tourdate,@hdday,@hdnights,@hdprkey,0,@tmpHotelQuota)
						end
						'
					if(@aviaQuotaMask > 0)
						set @sql=@sql + ' 
						set @tmpThereAviaQuota=null
						if(@chkey > 0)
						begin
							select @tmpThereAviaQuota=res from #checked where svkey=1 and code=@chkey and date=@tourdate and day=@chday and days=@days and prkey=@chprkey and pkkey=@chpkkey
							if (@tmpThereAviaQuota is null)
							begin
								exec dbo.mwCheckFlightGroupsQuotes ' + ltrim(str(@pagingType)) + ',@chkey,''' + @flightGroups + ''',' + ltrim(str(@agentKey)) + ',@chprkey, @tourdate,@chday,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',' + ltrim(str(@findFlight)) + ',@chpkkey,@days,' + ltrim(str(@expiredReleaseResult)) +',null, @tmpThereAviaQuota output
								insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chkey,0,0,@tourdate,@chday,@days,@chprkey,@chpkkey,@tmpThereAviaQuota)
							end
						end

						set @tmpBackAviaQuota=null
						if(@chbackkey > 0)
						begin
							select @tmpBackAviaQuota=res from #checked where svkey=1 and code=@chbackkey and date=@tourdate and day=@chbackday and days=@days and prkey=@chbackprkey and pkkey=@chbackpkkey
							if (@tmpBackAviaQuota is null)
							begin
								exec dbo.mwCheckFlightGroupsQuotes ' + ltrim(str(@pagingType)) + ',@chbackkey,''' + @flightGroups + ''',' + ltrim(str(@agentKey)) + ',@chbackprkey, @tourdate,@chbackday,' + ltrim(str(@requestOnRelease))+ ',' + ltrim(str(@noPlacesResult))+ ',' + ltrim(str(@checkAgentQuota)) + ',' + ltrim(str(@checkCommonQuota)) + ',' + ltrim(str(@checkNoLongQuota)) + ',' + ltrim(str(@findFlight)) + ',@chbackpkkey,@days,' + ltrim(str(@expiredReleaseResult)) +',null, @tmpBackAviaQuota output
								insert into #checked(svkey,code,rmkey,rckey,date,day,days,prkey,pkkey,res) values(1,@chbackkey,0,0,@tourdate,@chbackday,@days,@chbackprkey,@chbackpkkey,@tmpBackAviaQuota)
							end
						end
						'

					set @sql=@sql + '
						update #resultsTable set pt_hdquota=@tmpHotelQuota,
							pt_chtherequota=@tmpThereAviaQuota,
							pt_chbackquota=@tmpBackAviaQuota
						where CURRENT OF quotaCursor


						fetch next from quotaCursor into @hdkey,@rmkey,@rckey,
							@tourdate,@chkey,@chbackkey,@hdday,@hdnights,@hdprkey,
							@chday,@chpkkey,@chprkey,@chbackday,
							@chbackpkkey,@chbackprkey,@days
					end

					close quotaCursor
					deallocate quotaCursor

					if (@calculateVisaDeadLine > 0)
					begin
						update #resultsTable
						set pt_visadeadline = dbo.mwGetVisaDeadlineDate(pt_tlkey, pt_tourdate, pt_ctkeyfrom)
					end

					select * from #resultsTable
				'
			end
			else
				set @sql=@sql + ' order by pgId '

	end

exec (@sql)

end
Go

GRANT  exec ON [dbo].[Paging] TO PUBLIC
GO

/*********************************************************************/
/* end sp_Paging.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_QuotaDetailAfterDelete.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuotaDetailAfterDelete]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[QuotaDetailAfterDelete]
GO

CREATE PROCEDURE [dbo].[QuotaDetailAfterDelete]
AS
	--<VERSION>2009.1</VERSION>
	--<DATE>2013-04-22</DATE>
	--Процедура освобождает удаленные квоты
	--QD_IsDeleted хранит статус, в который требуется поставить услуги, на данный момент находящиеся на данной квоте
	--QD_IsDeleted=3 - подтвердить (ВАЖНО подтверждается только те даты которые удаляются)
	--QD_IsDeleted=4 - Request (ВАЖНО на Request только те даты которые удаляются)
	--QD_IsDeleted=1 - попытка поставить на квоту (ВАЖНО на квоту пробуем поставить место, на всем протяжении услуги, то есть - если это проживание и только один день удаляем из квоты, то место снимается с квоты целиком и пытается сесть снова)

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	DECLARE @SD_DLKey int

	IF Exists (SELECT top 1 1 
			   FROM QuotaDetails
			   join QuotaParts on QP_QDID = QD_ID
			   join ServiceByDate on SD_QPID=QP_ID
			   WHERE QD_IsDeleted in (3,4))
	BEGIN
		declare @DLKeysForUpdare table
		(
			DL_Key int
		)
		
		insert into @DLKeysForUpdare(DL_Key) 
		select SD_DLKey 
		from ServiceByDate
		join QuotaParts on QP_ID = SD_QPID
		where QP_IsDeleted in (3,4)

		UPDATE ServiceByDate 
		SET SD_State = 3, SD_QPID = null 
		WHERE SD_QPID in (SELECT QP_ID 
						  FROM QuotaDetails
						  join QuotaParts on QP_QDID = QD_ID
						  WHERE QD_IsDeleted = 3)
						  
		UPDATE ServiceByDate 
		SET SD_State = 4, SD_QPID = null 
		WHERE SD_QPID in (SELECT QP_ID 
						  FROM QuotaDetails
						  join QuotaParts on QP_QDID = QD_ID
						  WHERE QD_IsDeleted=4)
		
		DECLARE cur_QuotaDetailDelete CURSOR local fast_forward FOR 
		SELECT DISTINCT DL_Key FROM @DLKeysForUpdare
		
		OPEN cur_QuotaDetailDelete
		FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC dbo.DogListToQuotas @SD_DLKey, 1
			FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		END
		CLOSE cur_QuotaDetailDelete
		DEALLOCATE cur_QuotaDetailDelete
	END

	IF Exists (SELECT top 1 1 
			   FROM QuotaDetails
			   join QuotaParts on QP_QDID = QD_ID
			   join ServiceByDate on SD_QPID = QP_ID 
			   WHERE QD_IsDeleted in (1))
	BEGIN
		DECLARE cur_QuotaDetailDelete CURSOR local fast_forward FOR 
			SELECT DISTINCT SD_DLKey 
			FROM ServiceByDate 
			WHERE SD_QPID in (SELECT QP_ID 
							  FROM QuotaDetails
							  join QuotaParts on QP_QDID = QD_ID
							  WHERE QD_IsDeleted=1)
		OPEN cur_QuotaDetailDelete
		FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		WHILE @@FETCH_STATUS = 0
		BEGIN
			EXEC dbo.DogListToQuotas @SD_DLKey, 1
			FETCH NEXT FROM cur_QuotaDetailDelete INTO @SD_DLKey
		END
		CLOSE cur_QuotaDetailDelete
		DEALLOCATE cur_QuotaDetailDelete
	END

	update QuotaParts 
	set QP_IsDeleted = 1 
	from QuotaParts 
	join QuotaDetails on QP_QDID = QD_ID 
	where QD_IsDeleted in (1,3,4)

	DELETE FROM QuotaLimitations WHERE QL_QPID in (SELECT QP_ID FROM QuotaParts join QuotaDetails on QD_ID = QP_QDID WHERE QD_IsDeleted in (1,3,4))				  
	DELETE QuotaParts where exists(select top 1 1 from QuotaDetails WHERE QD_IsDeleted in (1,3,4) and QD_ID = QP_QDID) and not exists(select top 1 1 from ServiceByDate where SD_QPID=QP_ID) and QP_IsDeleted = 1
	DELETE FROM StopSales WHERE SS_QDID in (SELECT QD_ID FROM QuotaDetails with (nolock) WHERE QD_IsDeleted in (1,3,4))
	DELETE FROM QuotaDetails WHERE QD_IsDeleted in (1,3,4) and QD_ID not in (Select QP_QDID from ServiceByDate with (nolock), QuotaParts with (nolock) where SD_QPID=QP_ID and QP_QDID=QD_ID)
GO

GRANT EXECUTE on [dbo].[QuotaDetailAfterDelete] to public
GO
/*********************************************************************/
/* end sp_QuotaDetailAfterDelete.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_QuotaTypeTransfer.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[QuotaTypeTransfer]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[QuotaTypeTransfer]
GO
CREATE PROCEDURE [dbo].[QuotaTypeTransfer] 
(
	--<VERSION>2009.2.1</VERSION>
	--<DATA>12.03.2013</DATA>
	@serviceId int = null
)
AS
--темповая таблица, содержит ключи путевок, которые уже пересаживались
create table #tmpHotelData (
dl_key int, existQuota int, busyPlaces int)
--темповая таблица, содержит ключи подобронных по приоритету квот
create table #quotaTransfer (
qp_id int, byRoom int)

declare @quotapart int
declare @DLKey int
declare @defaultType int
declare @checkQuotesResult nvarchar(max)
declare @freePlaces int
declare @totalPlaces int
declare @quotapartService int
declare @serviceKey_2 int
declare @serviceCode int
declare @serviceSubCode1 int
declare @serviceDateBegin datetime
declare @serviceDateEnd datetime
declare @partnerKey_2 int
declare @agentKey_2 int
declare @tourDuration smallint
declare @quotaPlaces smallint
declare @pax smallint
declare @roomKey int
declare @notTransfer int
declare @dlkeycur int
declare @totalTransfer int 
declare @succesTransfer int 
declare @noTransferStop int 
declare @noTransferRelease int
declare @noTtransferBunOnRace int 
declare @noTtransferServerError int
declare @qp2 int
declare @firstQuotaParts int
declare @byRoom int

begin 

	set @totalTransfer = 0
	set @succesTransfer = 0
	set @noTransferStop = 0
	set @noTransferRelease = 0
	set @noTtransferBunOnRace = 0
	set @noTtransferServerError = 0
	set @pax = null

	select @defaultType = SS_ParmValue from SystemSettings where SS_ParmName like 'SYS_COMMITMENT_FIRST'
	set @defaultType = @defaultType + 1

	DECLARE recalc CURSOR FOR 
		--коммитмент и allotment
		select qp1.QP_ID, qp1.QP_AgentKey,qo1.QO_Code,qo1.QO_SVKey,qo1.QO_SubCode1,qt1.QT_PRKey,qt1.QT_ByRoom
		from Quotas as qt1
		join QuotaObjects as qo1 on QO_QTID = QT_ID
		join QuotaDetails as qd1 on QD_QTID = QT_ID
		join QuotaParts as qp1 on QP_QDID = QD_ID
		join Quotas as qt2 on qt2.QT_ByRoom = qt1.QT_ByRoom and qt1.QT_PRKey=qt2.QT_PRKey
		join QuotaObjects as qo2 on qo2.QO_QTID = qt2.QT_ID and qo1.QO_Code=qo2.QO_Code
		join QuotaDetails as qd2 on qd2.QD_QTID = qt2.QT_ID
		join QuotaParts as qp2 on qp2.QP_QDID = qd2.QD_ID
		
		where qd1.QD_Busy > 0
		and (qd2.QD_Places - qd2.QD_Busy) > 0
		and qd1.QD_Date > dateadd(day, -1, GETDATE())
		and qd1.QD_Type<>qd2.QD_Type
		and qd1.QD_Date=qd2.QD_Date
		and qt1.QT_PRKey = qt2.QT_PRKey
		and qd2.QD_Type = @defaultType
		--если субкоды совпадают или второй субкод все
		and (qo1.QO_SubCode1 = qo2.QO_SubCode1 or qo2.QO_SubCode1 = 0 
				or (qo1.QO_SubCode1=0 
					and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RMKEY = qo2.QO_SubCode1)))
		and (qo1.QO_SubCode2 = qo2.QO_SubCode2 or qo2.QO_SubCode2 = 0
				or (qo1.QO_SubCode2=0 
					and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RCKEY = qo2.QO_SubCode2)))
		and (exists(select 1 from QuotaPriorities where QPR_Date=qd2.QD_Date and QPR_Type=qd2.QD_Type and QPR_Code=qo1.QO_Code)
		or not exists (select 1 from QuotaPriorities where QPR_Date=qd2.QD_Date and QPR_Code=qo1.QO_Code))

		union
		--более частная квота свободна
		select qp1.QP_ID, qp1.QP_AgentKey,qo1.QO_Code,qo1.QO_SVKey,qo1.QO_SubCode1,qt1.QT_PRKey,qt1.QT_ByRoom
		from Quotas as qt1
		join QuotaObjects as qo1 on QO_QTID = QT_ID
		join QuotaDetails as qd1 on QD_QTID = QT_ID
		join QuotaParts as qp1 on QP_QDID = QD_ID
		where QD_Busy > 0
		and exists(select 1 from QuotaObjects as qo2 
					join Quotas as qt2 on qo2.QO_QTID = qt2.QT_ID
					join QuotaDetails as qd2 on qo2.QO_QTID = qd2.QD_QTID
					join QuotaParts as qp2 on qp2.QP_QDID = qd2.QD_ID
					where qo2.QO_SVKey=3 and qo2.QO_Code = qo1.QO_Code and qd1.QD_Date=qd2.QD_Date and qt1.QT_ByRoom=qt2.QT_ByRoom  
					and qt1.QT_PRKey=qt2.QT_PRKey
					and (((qo1.QO_SubCode1  = 0 and (qo2.QO_SubCode1 <> 0 and  exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RMKEY = qo2.QO_SubCode1)))
					or (qo1.QO_SubCode2  = 0 and (qo2.QO_SubCode2 <> 0 and exists (select 1 from Dogovorlist join ServiceByDate on SD_DLKEy = DL_Key join HotelRooms on DL_SUBCODE1=HR_KEY where SD_QPID=qp1.QP_ID and HR_RCKEY = qo2.QO_SubCode2))))
					or (qt2.QT_IsByCheckIn=1 and qt1.QT_IsByCheckIn=0))
					and (qd2.QD_Places - qd2.QD_Busy) > 0 and qd2.QD_Type=qd1.QD_Type)
		OPEN recalc
		FETCH NEXT FROM recalc INTO @quotapart, @agentKey_2, @serviceCode, @serviceKey_2, @serviceSubCode1, @partnerKey_2, @byRoom
		WHILE @@FETCH_STATUS = 0
		BEGIN
			begin try
			
			insert into #quotaTransfer (qp_id, byRoom) values (@quotapart, @byRoom)
			
				--проверяем с нужными ли статусами услуги
				declare @orderStatus varchar (max)
				select @orderStatus = SS_ParmValue from SystemSettings where SS_ParmName = 'SYSStatusToQuotaTransfer'

				if @quotapart not in (select SD_QPID from ServiceByDate join #tmpHotelData on dl_key=SD_DLKey) -- эти путевки еще не рассматривались)
					begin
						
						if  (@orderStatus is not null and  @orderStatus<>'' and @orderStatus<>'null')
								select @DLKey=DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart 
																					and DG_SOR_CODE in (select * from ParseKeys(@orderStatus))
						else
						begin
							select @DLKey=DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart
						end
						
						if (@DLKey is not null)
						begin
							insert into #tmpHotelData (dl_key) 
							select distinct DL_KEY from ServiceByDate join tbl_DogovorList on DL_KEY=SD_DLKey join Dogovor on DG_Key=DL_DGKEY where SD_QPID=@quotapart
						end
						
					end
			end try
			begin catch
				print 'Произошла ошибка'
			end catch
			
		FETCH NEXT FROM recalc INTO @quotapart, @agentKey_2, @serviceCode, @serviceKey_2, @serviceSubCode1, @partnerKey_2, @byRoom
		END
		CLOSE recalc
		DEALLOCATE recalc
		
		--проверяем можем ли поставить эти услуги на квоты
		DECLARE servicePlaceExist CURSOR FOR 
		select DL_SUBCODE1,DL_KEY from  tbl_DogovorList where DL_KEY in (select DL_KEY from #tmpHotelData) and not exists (select 1 from ServiceByDate where SD_DLKey=DL_KEY and SD_State in (3,4))
		order by DL_CreateDate asc, DL_NMEN desc
		OPEN servicePlaceExist
		FETCH NEXT FROM servicePlaceExist INTO @roomKey, @dlkeycur
		WHILE @@FETCH_STATUS = 0
		BEGIN
		
		begin try
			set @totalTransfer = @totalTransfer+1
			select @serviceDateBegin=DL_DATEBEG, @serviceDateEnd=DL_DATEEND, @tourDuration=DL_NDAYS, @quotaPlaces=DL_NMEN from DogovorList where DL_Key=@dlkeycur
			
			select @qp2=SD_QPID from ServiceByDate where SD_DLKey=@dlkeycur--смотрим значение квоты, для запуска проверки
			
			select @serviceKey_2 = QO_SVKey, @serviceCode = QO_Code, @partnerKey_2 = QT_PRKey, @agentKey_2 = QP_AgentKey
			from Quotas as qt1
			join QuotaObjects as qo1 on QO_QTID = QT_ID
			join QuotaDetails as qd1 on QD_QTID = QT_ID
			join QuotaParts as qp1 on QP_QDID = QD_ID and QP_ID=@qp2

		--если эта квота за номер
		if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=1)
		begin
			select @quotaPlaces = COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur
			print @quotaPlaces
		end

			exec mwCheckQuotaOneResult 
					0, @serviceKey_2, @serviceCode, @roomKey, 
					@serviceDateBegin, @serviceDateEnd, @partnerKey_2, 
					@agentKey_2, @tourDuration, @quotaPlaces, @quotaPlaces, @checkQuotesResult output, @freePlaces output, @totalPlaces output, @firstQuotaParts output
		
		--если эта квота за номер
		if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=1)
		begin
			--если количество уже севших и сейчас готовы на посадку больше 0, то данную путевку рассматриваем
			if (@freePlaces - (select COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur) - (select SUM(isnull(busyPlaces, 0)) from #tmpHotelData) >=0 )
			begin
				update #tmpHotelData set busyPlaces = (select COUNT( distinct SD_RLID) from ServiceByDate where SD_DLKey=@dlkeycur)
			end
		end
		
		--если эта квота за человека
		if exists (select * from ServiceByDate join #quotaTransfer on qp_id=SD_QPID where SD_DLKey=@dlkeycur and byRoom=0)
		begin
			--если количество уже севших и сейчас готовы на посадку больше 0, то данную путевку рассматриваем
			if (@freePlaces - (select DL_NMEN from tbl_DogovorList where dl_key=@dlkeycur) - (select SUM(isnull(busyPlaces, 0)) from #tmpHotelData) >=0 )
			begin
				update #tmpHotelData set busyPlaces = (select DL_NMEN from tbl_DogovorList where dl_key=@dlkeycur) where dl_key=@dlkeycur
			end
		end
		
		--если сервис проверки квот вернул нам те же квоты которые не сидят в приоритете (значит там стоп или запрет)
		if exists (select * from ServiceByDate where SD_DLKey=@dlkeycur and SD_QPID in (select * from ParseKeys(@firstQuotaParts)) and SD_QPID in (select qp_id from #quotaTransfer))
		begin
			delete #tmpHotelData where dl_key=@dlkeycur
		end
		
		if (@checkQuotesResult='QuotaExist' and exists (select busyPlaces from #tmpHotelData where dl_key=@dlkeycur and busyPlaces is not null and busyPlaces<>null))
		begin
				--освобождаем услугу
				delete from ServiceByDate where SD_DLKey=@dlkeycur
				--сажаем в новую квоту
				insert into Debug (db_Text) values ('[QuotaTransfer]')
				exec dbo.DogListToQuotas @dlkeycur, @OldSetToQuota = 0
				set @succesTransfer = @succesTransfer+1;
		end
		else if (@checkQuotesResult='StopSale')
		begin
			set @noTransferStop = @noTransferStop + 1;
		end
		else if (@checkQuotesResult='Release')
		begin
			set @noTransferRelease = @noTransferRelease + 1;
		end
		else if (@checkQuotesResult='NoPlaces')
		begin
			set @noTtransferBunOnRace = @noTtransferBunOnRace + 1;
		end
		end try
		begin catch
			set @noTtransferServerError = @noTtransferServerError +1;
			insert into SystemLog (SL_Message,SL_Date) values(ERROR_MESSAGE(),GETDATE())
		end catch

		
		FETCH NEXT FROM servicePlaceExist INTO @roomKey,@dlkeycur
		END
		CLOSE servicePlaceExist
		DEALLOCATE servicePlaceExist

		print 'Всего найдено услуг: '+ CAST (@totalTransfer as varchar(4000))
		print 'Обработано услуг: '+ CAST ( @succesTransfer as varchar(4000))
		print 'Необработано услуг (Stop-Sale): '+ CAST (@noTransferStop as varchar(4000))
		print 'Необработано услуг (релиз период): '+ CAST (@noTransferRelease as varchar(4000))
		print 'Необработано услуг (запрет на заезд): '+ CAST (@noTtransferBunOnRace as varchar(4000))
		print 'Необработано услуг (прочее): '+ CAST (@noTtransferServerError as varchar(4000))
		
		drop table #quotaTransfer
		drop table #tmpHotelData
		
end
GO
grant exec on [dbo].[QuotaTypeTransfer] to public
go
/*********************************************************************/
/* end sp_QuotaTypeTransfer.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_RecalculateByTime.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[RecalculateByTime]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[RecalculateByTime]
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[RecalculateByTime] 
(
	--<VERSION>2009.2.1</VERSION>
	--<DATA>10.04.2013</DATA>
	@cpkey int = null
)
AS
DECLARE
	@priceTourKey int,			-- ключ обсчитываемого тура
	@priceTOKey int,
	@saleDate datetime,		-- дата продажи
	@nullCostAsZero smallint,	-- считать отсутствующие цены нулевыми (кроме проживания) 0 - нет, 1 - да
	@noFlight smallint,		-- при отсутствии перелёта в расписании 0 - ничего не делать, 1 - не обсчитывать тур, 2 - искать подходящий перелёт (если не найдено - не рассчитывать)
	@update smallint,			-- признак дозаписи 0 - расчет, 1 - дозапись
	@useHolidayRule smallint,		-- Правило выходного дня: 0 - не использовать, 1 - использовать
	@countReCalcMax smallint,   --максимальное число одновременно расчитываемых прайс-листов
	@countRecalc int,      --число расчитываемых прайс листов
	@priceTOKeyActiv int,  --ключ тура который сейчас активен
	@flagTran bit = 0
BEGIN
	--SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
	
	select @countRecalcMax = SS_ParmValue from SystemSettings where SS_ParmName='SYSCalcPriceCountMax'
	select @countRecalc=COUNT(*) from tp_tours WHERE TO_PROGRESS<>100 and TO_TrKey in (select CP_TourKey from CalculatingPriceLists where CP_Status=1)
	
	--если количество одновременно расчитываемых туров не превышает максимального значения или не задан параметр максимальное количество расчитываемых туров
	if (@countRecalcMax > @countRecalc or @countRecalcMax is null )
	begin	
		begin tran
		
			select top 1 @cpkey = CP_Key from CalculatingPriceLists where CP_StartTime is not null and (CP_Status not in (1,2) or CP_Status = 1 and CP_StartTime<=DateAdd(hour,-10,GETDATE())) order by CP_Priority desc
			UPDATE CalculatingPriceLists WITH (ROWLOCK) Set CP_Status=1, CP_StartTime=GETDATE() where CP_Key=@cpkey
			UPDATE TP_Tours WITH (ROWLOCK) Set TO_PROGRESS=0, TO_UPDATE=0, TO_UPDATETIME=GETDATE() where TO_Key= (select CP_PriceTourKey from  CalculatingPriceLists where CP_Key=@cpkey)
			
		commit tran
		if (@cpkey is not null)
		begin
		
			select @priceTourKey=CP_TourKey,  @saleDate=CP_SaleDate, @nullCostAsZero=CP_NullCostAsZero,@noFlight=CP_NoFlight, @update=CP_Update,
				@useHolidayRule=CP_UseHolidayRule, @priceTOKey = CP_PriceTourKey from CalculatingPriceLists where CP_Key=@cpkey
				
			-- если у нас есть активный тур  и это не дозапись то удаляем его
			select @priceTOKeyActiv=TO_Key from TP_Tours left join CalculatingPriceLists on CP_PriceTourKey=TO_Key 
											where TO_TRKey=@priceTourKey and CP_StartTime is null and TO_Key<>@priceTOKey
			
			begin try								
			
				if (@priceTOKeyActiv!=0 and @update<>1 and @priceTOKeyActiv is not null)
				begin
					--EXEC ClearMasterWebSearchFields @tokey=@priceTOKey
					insert into Debug (db_Text,db_n1, db_n2, db_n3) values ('[RecalculateByTime_1]',1, @cpkey,@priceTOKeyActiv)		
					EXEC RemoveReferences 'TP_TOURS', @priceTOKeyActiv
					insert into Debug (db_Text,db_n1, db_n2) values ('[RecalculateByTime_1]',2, @cpkey)	
					DELETE FROM CalculatingPriceLists with (rowlock) WHERE CP_PriceTourKey = @priceTOKeyActiv
					DELETE FROM TP_TOURS with (rowlock) WHERE TO_KEY = @priceTOKeyActiv
					insert into Debug (db_Text,db_n1, db_n2) values ('[RecalculateByTime_1]',3, @cpkey)	
				end

				--если у тура менялом название то, меняем его, на название из тур листа
				--запоминаем значения отличные от названия (иначе триггер их перетрет)
				declare @nameWeb varchar(250)
				select @nameWeb = TL_NAMEWEB from Turlist where TL_KEY=@priceTourKey
				update TP_Tours SET TO_Name=(select TL_NAMEWEB from Turlist where TL_KEY=@priceTourKey) where TO_Key=@priceTOKey
				update Turlist set TL_NAMEWEB = @nameWeb  where TL_KEY=@priceTourKey

				--запуск расчета
				exec CalculatePriceList @nPriceTourKey=@priceTOKey, @nCalculatingKey=@cpkey, @dtSaleDate=@saleDate, @nNullCostAsZero=@nullCostAsZero, @nNoFlight =@noFlight,
					@nUpdate=@update,@nUseHolidayRule = @useHolidayRule
					
				--если стоит параметр выставить в интернет, выставляем тур в интернет	
				if exists(select 1 from CalculatingPriceLists where CP_Key=@cpkey and CP_ExposeWeb=1)
				begin
					exec FillMasterWebSearchFields @tokey=@priceTOKey, @calcKey=@cpkey
					update TP_Tours SET TO_IsEnabled=1 where TO_Key=@priceTOKey
				end
				
				--расчет прайс-листа завершен
				UPDATE CalculatingPriceLists Set CP_Status=0, CP_StartTime = null where CP_Key=@cpkey
			end try
			begin catch
				insert into Debug (db_Text,db_n1, db_n2) values ('[RecalculateByTime_1]',4, @cpkey)
				insert into Debug (db_Text,db_n1, db_n2) values (ERROR_MESSAGE(),4, @cpkey)
			end catch
		end
	END
END

GO
grant exec on [dbo].[RecalculateByTime] to public
go
/*********************************************************************/
/* end sp_RecalculateByTime.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculateCosts.sql */
/*********************************************************************/
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateCosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculateCosts]
GO
CREATE PROCEDURE [dbo].[ReCalculateCosts]
	(
		-- хранимка перерасчитывает услуги из очереди перерасчета
		--<version>2009.02.04</version>
		--<data>2012-02-22</data>
		@countReCalculateItems int,
		-- ключи тех записей которые нужно расчитать
		@xSCPIdTable nvarchar(max) = null
	)
AS
BEGIN
	SET ARITHABORT ON;
	SET DATEFIRST 1;
	set nocount on;
	
	declare @beginTime datetime
	set @beginTime = getDate()

	declare @tempGrossTable table
	(
		xSPADId int,
		xSPADGross money,
		xSPADNetto money,
		xSPADIsCommission bit
	)

	declare @svKey int, @code int, @code1 int, @code2 int, @prKey int, @packetKey int, @date datetime, @days int,
	@resRate varchar(2), @men int, @discountPercent decimal(14,2), @margin decimal(14,2), @marginType int,
	@sellDate dateTime, @netto decimal(14,2), @brutto decimal(14,2), @discount decimal(14,2),
	@nettoDetail varchar(100), @sBadRate varchar(2), @dtBadDate dateTime,
	@sDetailed varchar(100),  @nSPId int, @useDiscountDays int,
	@spadId int, @spadIsCommission bit,
	@tourKey int, @tourDate datetime, @tourDays int, @includeAddCost bit, @IsDuration smallint
	
	declare cursorReCalculateCosts cursor fast_forward read_only for
	select top (@countReCalculateItems) SC_SVKey, SC_Code, SC_SubCode1, SC_SubCode2, SC_PRKey, SCP_PKKey, SCP_Date, SCP_Days,
	SPAD_Rate, SCP_Men, 0, 0, 0,
	SPAD_SaleDate, 0, 0, 0,
	'', '', '' ,
	'', null, 0,
	SPAD_Id, SV_IsDuration, SCP_TourDays
	from TP_ServicePriceActualDate with(nolock) join TP_ServiceCalculateParametrs with(nolock) on SPAD_SCPId = SCP_Id
	join TP_ServiceComponents with(nolock) on SCP_SCId = SC_Id
	join [Service] on SC_SVKey = SV_Key
	where SPAD_SaleDate is null
	and SPAD_NeedApply = 1
	and ((@xSCPIdTable is null) or (SCP_Id in (select xt_key from dbo.ParseKeys(@xSCPIdTable))))

	open cursorReCalculateCosts
	fetch next from cursorReCalculateCosts into @svKey, @code, @code1, @code2, @prKey, @packetKey, @date, @days,
	@resRate, @men, @discountPercent, @margin, @marginType,
	@sellDate, @netto, @brutto, @discount,
	@nettoDetail, @sBadRate, @dtBadDate,
	@sDetailed,  @nSPId, @useDiscountDays,
	@spadId, @IsDuration, @tourDays
	
	print 'Открываем курсор: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
	
	while (@@FETCH_STATUS = 0)
	begin
		
		set @netto = null;
		set @brutto = null;
		
		-- тут нам не нужно считать доплату, поэтому передаем фейковые значения
		set @tourKey = -100500
		set @tourDate = '1900-01-01'
		set @includeAddCost = 0
		
		-- если услуга перелет, то ее продолжительность равна продолжительности тура
		if (@svKey = 1)
		begin
			set @days = @tourDays
		end
		
		exec GetServiceCost @svKey, @code, @code1, @code2, @prKey, @packetKey, @date, @days,
		@resRate, @men, @discountPercent, @margin, @marginType,
		@sellDate, @netto output, @brutto output, @discount output,
		@nettoDetail output, @sBadRate output, @dtBadDate output,
		@sDetailed output,  @nSPId output, @useDiscountDays output,		
		@tourKey, @tourDate, @tourDays, @includeAddCost
		
		if (@discount is null)
			set @spadIsCommission = 0
		else
			set @spadIsCommission = 1
		
		/*после того как получили стоимость услуги запишем ее значение в о временную таблицу*/
		insert into @tempGrossTable (xSPADId, xSPADGross, xSPADNetto, xSPADIsCommission)
		values (@spadId, @brutto, @netto, @spadIsCommission)
						
		fetch next from cursorReCalculateCosts into @svKey, @code, @code1, @code2, @prKey, @packetKey, @date, @days,
		@resRate, @men, @discountPercent, @margin, @marginType,
		@sellDate, @netto, @brutto, @discount,
		@nettoDetail, @sBadRate, @dtBadDate,
		@sDetailed,  @nSPId, @useDiscountDays,
		@spadId, @IsDuration, @tourDays
	end
	close cursorReCalculateCosts
	deallocate cursorReCalculateCosts
	
	print 'Расчет цен: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
	
	/*закончили расчет теперь обновим основную таблицу*/
	update TP_ServicePriceActualDate
	set SPAD_Gross = xSPADGross,
	SPAD_Netto = xSPADNetto,
	SPAD_IsCommission = xSPADIsCommission,
	SPAD_DateLastCalculate = getdate(),
	SPAD_NeedApply = 0
	from TP_ServicePriceActualDate join @tempGrossTable on xSPADId = SPAD_Id
	where SPAD_DateLastChange < getdate()
		
	print 'Количество строк: ' + convert(nvarchar(max), @@rowcount)
	print 'Запись результата: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
END

GO
grant exec on [dbo].[ReCalculateCosts] to public
go
/*********************************************************************/
/* end sp_ReCalculateCosts.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculateCosts_GrossMigrate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateCosts_GrossMigrate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculateCosts_GrossMigrate]
GO
CREATE PROCEDURE [dbo].[ReCalculateCosts_GrossMigrate]
	(
		-- хранимка переносит цены из таблицы TP_PriceActualDate в TP_PriceComponents
		-- <version>2009.02.10</version>
		-- <data>2012-09-22</data>
		@countItems int,
		-- ключи тех записей которые нужно расчитать
		@xSCPIdTable nvarchar(max) = null,
		-- ключи тех записей которые нужно расчитать, если задан этот параметр, то SPAD_AutoOnline игнорируется
		@xOnlySCPIdTable nvarchar(max) = null,
		-- так же публиковать остальные цены по этому отелю, отличающихся от выбранной только комнатой, категорией и питанием
		-- работает только если задан параметр @xOnlySCPIdTable
		@xPublichAllRoomAllCategoryAllPansion bit = null,
		-- список продолжительностей цены на которые нужно опубликовать
		@xLongList nvarchar(max) = null
	)
AS
BEGIN
	set nocount on;
	declare @beginTime datetime
	set @beginTime = getDate()
	
	print '1: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
	
	create table #tpServicePriceActualDateTable
	(
		SPAD_SCPId bigint,
		SPAD_Id bigint,
		SPAD_Gross money,
		SPAD_Rate nvarchar(2),
		SPAD_IsCommission bit,
		SPAD_AutoOnline int,
		SCP_DateCheckIn datetime,
		SCP_SvKey int
	)
	
	create index x_tpServicePriceActualDateTable on #tpServicePriceActualDateTable
	(
		SCP_DateCheckIn,
		SPAD_Rate,
		SPAD_SCPId,
		SCP_SvKey,
		SPAD_Gross
	) include (SPAD_Id, SPAD_IsCommission, SPAD_AutoOnline)
	
	if (@xOnlySCPIdTable is not null)
	begin
		-- этот кусок кода вызывается только из экранов "Маржинальный монитор" и "Перерасчет расчитанных цен"		
		-- поэтому перед публикацией нужно найти 
		if (isnull(@xPublichAllRoomAllCategoryAllPansion, 0) = 1)
		begin
			update TP_ServicePriceActualDate
			set SPAD_AutoOnline = 1
			from TP_ServicePriceActualDate as spad1 join TP_ServiceCalculateParametrs as scp1 with(nolock) on SPAD_SCPId = SCP_Id
			join TP_ServiceComponents as sc1 with(nolock) on SCP_SCId = SC_Id
			where SPAD_SaleDate is null
			and exists (	select top 1 1
							from TP_ServiceCalculateParametrs as scp2 with(nolock) join TP_ServiceComponents as sc2 with(nolock) on SCP_SCId = SC_Id
							where 
							scp2.SCP_Id in (select xt_key from dbo.ParseKeys(@xOnlySCPIdTable))
							and scp1.SCP_Date = scp2.SCP_Date
							and scp1.SCP_DateCheckIn = scp2.SCP_DateCheckIn
							and scp1.SCP_PKKey = scp2.SCP_PKKey
							and scp1.SCP_SvKey = scp2.SCP_SvKey
							and (@xLongList is null or (scp1.SCP_TourDays in (select xt_key from dbo.ParseKeys(@xLongList))))
							and sc1.SC_Code = sc2.SC_Code
							and sc1.SC_PRKey = sc2.SC_PRKey
							and sc1.SC_SVKey = sc2.SC_SVKey
							)
		end
	
		insert into #tpServicePriceActualDateTable (SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey)
		select top (@countItems) SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey
		-- with(nolock) у TP_ServicePriceActualDate не нужен, что бы небыло переноса еще недорасчитанных цен
		from TP_ServicePriceActualDate join TP_ServiceCalculateParametrs with(nolock) on SPAD_SCPId = SCP_Id
		where SPAD_SaleDate is null
		and SPAD_NeedApply = 0
		and SCP_Id in (select xt_key from dbo.ParseKeys(@xOnlySCPIdTable))
		
		print '1.1: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	end
	else if (@xSCPIdTable is not null)
	begin
		insert into #tpServicePriceActualDateTable (SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey)
		select top (@countItems) SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey
		-- with(nolock) у TP_ServicePriceActualDate не нужен, что бы небыло переноса еще недорасчитанных цен
		from TP_ServicePriceActualDate join TP_ServiceCalculateParametrs with(nolock) on SPAD_SCPId = SCP_Id
		where SPAD_SaleDate is null
		and SPAD_NeedApply = 0
		and SPAD_AutoOnline = 1
		and SCP_Id in (select xt_key from dbo.ParseKeys(@xSCPIdTable))
		
		print '1.2: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	end
	else
	begin
		insert into #tpServicePriceActualDateTable (SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey)
		select top (@countItems) SPAD_SCPId, SPAD_Id, SPAD_Gross, SPAD_Rate, SPAD_IsCommission, SPAD_AutoOnline, SCP_DateCheckIn, SCP_SvKey
		-- with(nolock) у TP_ServicePriceActualDate не нужен, что бы небыло переноса еще недорасчитанных цен
		from TP_ServicePriceActualDate join TP_ServiceCalculateParametrs with(nolock) on SPAD_SCPId = SCP_Id
		where SPAD_SaleDate is null
		and SPAD_NeedApply = 0
		and SPAD_AutoOnline = 1
		
		print '1.3: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
	end	
	
	print '2: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()

	declare @PriceComponentsRows int;
	set @PriceComponentsRows = 0;
		
	-- разобьем апдейт на 15 - по каждому картежу свой
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_1 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_1
	where SCP_SvKey = SvKey_1
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_1, -100500)
	
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_2 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_2
	where SCP_SvKey = SvKey_2
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_2, -100500)
	
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_3 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_3
	where SCP_SvKey = SvKey_3
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_3, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_4 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_4
	where SCP_SvKey = SvKey_4
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_4, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_5 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_5
	where SCP_SvKey = SvKey_5
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_5, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_6 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_6
	where SCP_SvKey = SvKey_6
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_6, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_7 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_7
	where SCP_SvKey = SvKey_7
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_7, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_8 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_8
	where SCP_SvKey = SvKey_8
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_8, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_9 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_9
	where SCP_SvKey = SvKey_9
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_9, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_10 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_10
	where SCP_SvKey = SvKey_10
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_10, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_11 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_11
	where SCP_SvKey = SvKey_11
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_11, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_12 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_12
	where SCP_SvKey = SvKey_12
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_12, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_13 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_13
	where SCP_SvKey = SvKey_13
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_13, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_14 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_14
	where SCP_SvKey = SvKey_14
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_14, -100500)
	
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	update TP_PriceComponents
	set 
	PC_DateLastChangeGross = getdate(), 
	PC_UpdateDate = getdate(),
	Gross_15 = SPAD_Gross,
	PC_State = 1
	from TP_PriceComponents join #tpServicePriceActualDateTable on SPAD_SCPId = SCPId_15
	where SCP_SvKey = SvKey_15
	and PC_Rate = SPAD_Rate
	and isnull(SPAD_Gross, -100500) != isnull(Gross_15, -100500)
		
	set @PriceComponentsRows = @PriceComponentsRows + @@rowcount;
	
	print '3: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
		
	print 'Количество строк в TP_PriceComponents: ' + convert(nvarchar(max), @PriceComponentsRows)
	
	/*обновим галку о необходимости переноса цены*/
	update TP_ServicePriceActualDate
	set SPAD_AutoOnline = 0
	where SPAD_Id in (select SPAD_Id from #tpServicePriceActualDateTable)
	
	print '4: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
	set @beginTime = getDate()
	
	print 'Количество строк в TP_ServicePriceActualDate: ' + convert(nvarchar(max), @@rowcount)
END

GO

grant exec on [dbo].[ReCalculateCosts_GrossMigrate] to public
go
/*********************************************************************/
/* end sp_ReCalculateCosts_GrossMigrate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculateCosts_MarginMigrateTRKey.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateCosts_MarginMigrateTRKey]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculateCosts_MarginMigrateTRKey]
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[ReCalculateCosts_MarginMigrateTRKey]
		-- хранимка переносит цены из таблицы TP_PriceActualDate в TP_PriceComponents
		-- <version>9.2.19</version>
		-- <data>2013-03-11</data>
		(@TrKey int = null,
		@MinValue smallint = null,
		@JobID smallint = null)
AS
BEGIN
	SET ARITHABORT ON;
	SET DATEFIRST 1;
	set nocount on;
	
	declare @beginTime datetime
	set @beginTime = getDate()	
	
	/*таблица первоночальной выборки*/
	declare @tableForMigrate table
	(
		TMAD_Id int,
		TMAD_TRKey int,
		TMAD_DateCheckIn datetime,
		TMAD_SvKey int,
		TMAD_Long smallint,
		TMAD_Percent money,
		TMAD_IsCommission bit
	)
	
	declare @count int, @DateCheckInMin datetime, @DateCheckInMax datetime, @Return smallint
	
	if @TrKey is null 
	Begin
		if @MinValue = 1
		begin
			select TOP 1 @TrKey=TMAD_TRKey, @count=COUNT(*)
			from TP_TourMarginActualDate with(nolock)
			where TMAD_NeedApply = 2
				and not exists (select 1 from Debug with(nolock) where db_Mod='MMI' and db_n1=TMAD_TRKey)
			group by TMAD_TRKey
			order by 2
		end
		else
		begin
			select TOP 1 @TrKey=TMAD_TRKey, @count=COUNT(*)
			from TP_TourMarginActualDate with(nolock)
			where TMAD_NeedApply = 2
				and not exists (select 1 from Debug with(nolock) where db_Mod='MMI' and db_n1=TMAD_TRKey)
			group by TMAD_TRKey
			order by 2 desc
		end
	end
	else
		select @count=COUNT(*) from TP_TourMarginActualDate with(nolock) where TMAD_NeedApply = 2 and TMAD_TRKey=@TrKey

	if @TrKey is null 
		print 'нет записей для переноса'
	begin
		if @TrKey is not null
			insert into Debug (db_Mod, db_n1, db_n2) values ('MMI',@TrKey, @JobID)
		
		insert into @tableForMigrate (TMAD_Id, TMAD_TRKey, TMAD_DateCheckIn, TMAD_SvKey, TMAD_Long, TMAD_Percent, TMAD_IsCommission)
		select TOP 5000 TMAD_Id, TMAD_TRKey, TMAD_DateCheckIn, TMAD_SvKey, TMAD_Long, TMAD_Percent, TMAD_IsCommission
		from TP_TourMarginActualDate with(nolock)
		where TMAD_NeedApply = 2
			and TMAD_TRKey = @TrKey --and TMAD_DateCheckIn=@DateCheckIn
		
		select @DateCheckInMin = MIN(TMAD_DateCheckIn), @DateCheckInMax = MAX(TMAD_DateCheckIn) from @tableForMigrate 
		--select TMAD_Id, TMAD_TRKey, TMAD_DateCheckIn, TMAD_SvKey, TMAD_Long, TMAD_Percent, TMAD_IsCommission
		--from TP_TourMarginActualDate with(nolock)
		--where TMAD_NeedApply = 2
		--and TMAD_TRKey = 89197 and TMAD_DateCheckIn='12-JAN-2013'
		print 'TourKey: ' + CAST(@TrKey as varchar(100)) + ' Дата c: ' + convert(varchar, @DateCheckInMin, 111) + ' Дата по: ' + convert(varchar, @DateCheckInMax, 111)
		
		print 'выборка записей из очереди: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()

		
		/*перенесем изменения в основную таблицу*/
		-- разобьем апдейт по кортежам
		
		declare @tempPCIdtable table
		(
			xPCId bigint,
			xIsCommission bit,
			xPercent money
		)
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 1 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_1 = TMAD_SvKey
		and PC_TRKey = @TrKey
/*
		select PC_Id
		from TP_PriceComponents with (nolock)
		where PC_TourDate = '12-JAN-2013'
		and PC_TRKey = 89197
*/		
		if @TrKey is not null
			update Debug set db_n3 = 0 where db_Mod='MMI' and db_n1=@TrKey

		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_1 = xIsCommission,
				MarginPercent_1 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 1 %%%%%%%%%%%%%%%%%%%%%%%
		if @TrKey is not null
			update Debug set db_n3 = 1 where db_Mod='MMI' and db_n1=@TrKey
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 2 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_2 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_2 = xIsCommission,
				MarginPercent_2 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
						
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 2 %%%%%%%%%%%%%%%%%%%%%%%
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 3 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_3 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_3 = xIsCommission,
				MarginPercent_3 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 3 %%%%%%%%%%%%%%%%%%%%%%%
		
		if @TrKey is not null
			update Debug set db_n3 = 3 where db_Mod='MMI' and db_n1=@TrKey
	
		-- %%%%%%%%%%%%%%%%%%% Кортеж 4 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_4 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_4 = xIsCommission,
				MarginPercent_4 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 4 %%%%%%%%%%%%%%%%%%%%%%%
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 5 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_5 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_5 = xIsCommission,
				MarginPercent_5 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 5 %%%%%%%%%%%%%%%%%%%%%%%
		

		if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_6 is not null)				
		begin
			-- %%%%%%%%%%%%%%%%%%% Кортеж 6 %%%%%%%%%%%%%%%%%%%%%%%
			insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
			select PC_Id, TMAD_IsCommission, TMAD_Percent
			from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
			where PC_TourDate = TMAD_DateCheckIn
			and PC_Days = TMAD_Long
			and SVKey_6 = TMAD_SvKey
			and PC_TRKey = @TrKey
			
			if exists (select top 1 1 from @tempPCIdtable)
			begin
				update TP_PriceComponents
				set	PC_DateLastChangeMargin = getdate(), 
					PC_UpdateDate = getdate(),
					CommissionOnly_6 = xIsCommission,
					MarginPercent_6 = xPercent,
					PC_State = 1
				from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
				WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
						and PC_TRKey = @TrKey		
				
				delete @tempPCIdtable
			end
			-- %%%%%%%%%%%%%%%%%%% Кортеж 6 %%%%%%%%%%%%%%%%%%%%%%%
		end
		else
			set @Return = 1

		if @TrKey is not null
			update Debug set db_n3 = 6 where db_Mod='MMI' and db_n1=@TrKey

		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_7 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 7 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_7 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_7 = xIsCommission,
						MarginPercent_7 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 7 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_8 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 8 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_8 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_8 = xIsCommission,
						MarginPercent_8 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 8 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_9 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 9 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_9 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_9 = xIsCommission,
						MarginPercent_9 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 9 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if @TrKey is not null
			update Debug set db_n3 = 9 where db_Mod='MMI' and db_n1=@TrKey
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_10 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 10 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_10 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_10 = xIsCommission,
						MarginPercent_10 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 10 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
				
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_11 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 11 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_11 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_11 = xIsCommission,
						MarginPercent_11 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 11 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_12 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 12 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_12 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_12 = xIsCommission,
						MarginPercent_12 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 12 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if @TrKey is not null
			update Debug set db_n3 = 12 where db_Mod='MMI' and db_n1=@TrKey
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_13 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 13 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_13 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_13 = xIsCommission,
						MarginPercent_13 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 13 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_14 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 14 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_14 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_14 = xIsCommission,
						MarginPercent_14 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 14 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_15 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 15 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_15 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_15 = xIsCommission,
						MarginPercent_15 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 15 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		print 'Переносим записи: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()	
			
		/*обновим галку о необходимости переноса цены*/
		update TP_TourMarginActualDate
		set TMAD_NeedApply = 0
		where TMAD_Id in (select TMAD_Id from @tableForMigrate)

		print 'Количество строк в TP_TourMarginActualDate: ' + convert(nvarchar(max), @@rowcount)		
				
		if @TrKey is not null
		begin
			delete from Debug where db_Mod='MMI' and db_n1=@TrKey
			--insert into Megatec_StateData (SD_Code, SD_Name, SD_Value) values (3001, 'ReCalculateCosts_MarginMigrate', @count)
		end
	end
END
go
grant exec on [dbo].[ReCalculateCosts_MarginMigrateTRKey] to public
go
/*********************************************************************/
/* end sp_ReCalculateCosts_MarginMigrateTRKey.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculateCosts_MarginMigrateTRKey2.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculateCosts_MarginMigrateTRKey2]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculateCosts_MarginMigrateTRKey2]
GO
SET QUOTED_IDENTIFIER ON;
GO
CREATE PROCEDURE [dbo].[ReCalculateCosts_MarginMigrateTRKey2]
		-- хранимка переносит цены из таблицы TP_PriceActualDate в TP_PriceComponents
		-- <version>9.2.19</version>
		-- <data>2013-03-11</data>
(
		@TrKey int = null,
		@MinValue smallint = null,
		@JobID smallint = null
)
AS
BEGIN
	SET ARITHABORT ON;
	SET DATEFIRST 1;
	set nocount on;
	
	declare @beginTime datetime
	set @beginTime = getDate()	
	
	/*таблица первоночальной выборки*/
	declare @tableForMigrate table
	(
		TMAD_Id int,
		TMAD_TRKey int,
		TMAD_DateCheckIn datetime,
		TMAD_SvKey int,
		TMAD_Long smallint,
		TMAD_Percent money,
		TMAD_IsCommission bit
	)
	
	declare @count int, @DateCheckInMin datetime, @DateCheckInMax datetime, @Return smallint
	
	if @TrKey is null 
	Begin
		if @MinValue = 1
		begin
			select TOP 1 @TrKey = TMAD_TRKey, @count = COUNT(*)
			from TP_TourMarginActualDate with(nolock)
			where TMAD_NeedApply = 2
				and not exists (select 1 from Debug with(nolock) where db_Mod = 'MMI' and db_n1 = TMAD_TRKey)
			group by TMAD_TRKey
			order by 2
		end
		else
		begin
			select TOP 1 @TrKey = TMAD_TRKey, @count = COUNT(*)
			from TP_TourMarginActualDate with(nolock)
			where TMAD_NeedApply = 2
				and not exists (select 1 from Debug with(nolock) where db_Mod = 'MMI' and db_n1 = TMAD_TRKey)
			group by TMAD_TRKey
			order by 2 desc
		end
	end
	else
		select @count=COUNT(*) from TP_TourMarginActualDate with(nolock) where TMAD_NeedApply = 2 and TMAD_TRKey=@TrKey

	if @TrKey is null 
		print 'нет записей для переноса'
	begin
		if @TrKey is not null
			insert into Debug (db_Mod, db_n1, db_n2) values ('MMI',@TrKey, @JobID)
		
		insert into @tableForMigrate (TMAD_Id, TMAD_TRKey, TMAD_DateCheckIn, TMAD_SvKey, TMAD_Long, TMAD_Percent, TMAD_IsCommission)
		select TOP 5000 TMAD_Id, TMAD_TRKey, TMAD_DateCheckIn, TMAD_SvKey, TMAD_Long, TMAD_Percent, TMAD_IsCommission
		from TP_TourMarginActualDate with(nolock)
		where TMAD_NeedApply = 2
			and TMAD_TRKey = @TrKey
		
		select @DateCheckInMin = MIN(TMAD_DateCheckIn), @DateCheckInMax = MAX(TMAD_DateCheckIn) from @tableForMigrate 		
		print 'TourKey: ' + CAST(@TrKey as varchar(100)) + ' Дата c: ' + convert(varchar, @DateCheckInMin, 111) + ' Дата по: ' + convert(varchar, @DateCheckInMax, 111)
		
		print 'выборка записей из очереди: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()
		
		/*перенесем изменения в основную таблицу*/
		-- разобьем апдейт по кортежам
		
		declare @tempPCIdtable table
		(
			xPCId bigint,
			xIsCommission bit,
			xPercent money
		)
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 1 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_1 = TMAD_SvKey
		and PC_TRKey = @TrKey

		if @TrKey is not null
		begin
			update Debug set db_n3 = 0 where db_Mod='MMI' and db_n1=@TrKey
		end

		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_1 = xIsCommission,
				MarginPercent_1 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 1 %%%%%%%%%%%%%%%%%%%%%%%
		if @TrKey is not null
		begin
			update Debug set db_n3 = 1 where db_Mod='MMI' and db_n1=@TrKey
		end
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 2 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_2 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_2 = xIsCommission,
				MarginPercent_2 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
						
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 2 %%%%%%%%%%%%%%%%%%%%%%%
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 3 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_3 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_3 = xIsCommission,
				MarginPercent_3 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 3 %%%%%%%%%%%%%%%%%%%%%%%
		
		if @TrKey is not null
		begin
			update Debug set db_n3 = 3 where db_Mod='MMI' and db_n1=@TrKey
		end
	
		-- %%%%%%%%%%%%%%%%%%% Кортеж 4 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_4 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_4 = xIsCommission,
				MarginPercent_4 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 4 %%%%%%%%%%%%%%%%%%%%%%%
		
		-- %%%%%%%%%%%%%%%%%%% Кортеж 5 %%%%%%%%%%%%%%%%%%%%%%%
		insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
		select PC_Id, TMAD_IsCommission, TMAD_Percent
		from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
		where PC_TourDate = TMAD_DateCheckIn
		and PC_Days = TMAD_Long
		and SVKey_5 = TMAD_SvKey
		and PC_TRKey = @TrKey
		
		if exists (select top 1 1 from @tempPCIdtable)
		begin
			update TP_PriceComponents
			set	PC_DateLastChangeMargin = getdate(), 
				PC_UpdateDate = getdate(),
				CommissionOnly_5 = xIsCommission,
				MarginPercent_5 = xPercent,
				PC_State = 1
			from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
			WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
					and PC_TRKey = @TrKey		
			
			delete @tempPCIdtable
		end
		-- %%%%%%%%%%%%%%%%%%% Кортеж 5 %%%%%%%%%%%%%%%%%%%%%%%
		

		if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_6 is not null)				
		begin
			-- %%%%%%%%%%%%%%%%%%% Кортеж 6 %%%%%%%%%%%%%%%%%%%%%%%
			insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
			select PC_Id, TMAD_IsCommission, TMAD_Percent
			from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
			where PC_TourDate = TMAD_DateCheckIn
			and PC_Days = TMAD_Long
			and SVKey_6 = TMAD_SvKey
			and PC_TRKey = @TrKey
			
			if exists (select top 1 1 from @tempPCIdtable)
			begin
				update TP_PriceComponents
				set	PC_DateLastChangeMargin = getdate(), 
					PC_UpdateDate = getdate(),
					CommissionOnly_6 = xIsCommission,
					MarginPercent_6 = xPercent,
					PC_State = 1
				from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
				WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
						and PC_TRKey = @TrKey		
				
				delete @tempPCIdtable
			end
			-- %%%%%%%%%%%%%%%%%%% Кортеж 6 %%%%%%%%%%%%%%%%%%%%%%%
		end
		else
			set @Return = 1

		if @TrKey is not null
		begin
			update Debug set db_n3 = 6 where db_Mod='MMI' and db_n1=@TrKey
		end

		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_7 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 7 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_7 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_7 = xIsCommission,
						MarginPercent_7 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 7 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_8 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 8 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_8 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_8 = xIsCommission,
						MarginPercent_8 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 8 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_9 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 9 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_9 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_9 = xIsCommission,
						MarginPercent_9 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 9 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if @TrKey is not null
			update Debug set db_n3 = 9 where db_Mod='MMI' and db_n1=@TrKey
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_10 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 10 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_10 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_10 = xIsCommission,
						MarginPercent_10 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 10 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
				
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_11 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 11 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_11 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_11 = xIsCommission,
						MarginPercent_11 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 11 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_12 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 12 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_12 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_12 = xIsCommission,
						MarginPercent_12 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 12 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		if @TrKey is not null
		begin
			update Debug set db_n3 = 12 where db_Mod='MMI' and db_n1=@TrKey
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_13 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 13 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_13 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_13 = xIsCommission,
						MarginPercent_13 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 13 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_14 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 14 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_14 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_14 = xIsCommission,
						MarginPercent_14 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 14 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end
		
		if 	@Return != 1
		begin
			if exists (select 1 from TP_PriceComponents with (nolock) where PC_TRKey = @TrKey and SCPId_15 is not null)				
			begin
				-- %%%%%%%%%%%%%%%%%%% Кортеж 15 %%%%%%%%%%%%%%%%%%%%%%%
				insert into @tempPCIdtable (xPCId, xIsCommission, xPercent)
				select PC_Id, TMAD_IsCommission, TMAD_Percent
				from TP_PriceComponents with (nolock) join @tableForMigrate on PC_TRKey = TMAD_TRKey
				where PC_TourDate = TMAD_DateCheckIn
				and PC_Days = TMAD_Long
				and SVKey_15 = TMAD_SvKey
				and PC_TRKey = @TrKey
				
				if exists (select top 1 1 from @tempPCIdtable)
				begin
					update TP_PriceComponents
					set	PC_DateLastChangeMargin = getdate(), 
						PC_UpdateDate = getdate(),
						CommissionOnly_15 = xIsCommission,
						MarginPercent_15 = xPercent,
						PC_State = 1
					from TP_PriceComponents join @tempPCIdtable on PC_Id = xPCId
					WHERE	PC_TourDate between @DateCheckInMin and @DateCheckInMax
							and PC_TRKey = @TrKey		
					
					delete @tempPCIdtable
				end
				-- %%%%%%%%%%%%%%%%%%% Кортеж 15 %%%%%%%%%%%%%%%%%%%%%%%
			end
			else
				set @Return = 1
		end

		print 'Переносим записи: ' + convert(nvarchar(max), datepart(mi, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ss, convert(datetime, getDate() - @beginTime))) + '.' + convert(nvarchar(max), datepart(ms, convert(datetime, getDate() - @beginTime)))
		set @beginTime = getDate()	
			
		/*обновим галку о необходимости переноса цены*/
		update TP_TourMarginActualDate
		set TMAD_NeedApply = 0
		where TMAD_Id in (select TMAD_Id from @tableForMigrate)

		print 'Количество строк в TP_TourMarginActualDate: ' + convert(nvarchar(max), @@rowcount)		
				
		if @TrKey is not null
		begin
			delete from Debug where db_Mod='MMI' and db_n1=@TrKey
			insert into Megatec_StateData (SD_Code, SD_Name, SD_Value) values (3001, 'ReCalculateCosts_MarginMigrate', @count)
		end
	end
END
grant exec on [dbo].[ReCalculateCosts_MarginMigrateTRKey2] to public
go
/*********************************************************************/
/* end sp_ReCalculateCosts_MarginMigrateTRKey2.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculate_CreateNextSaleDate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculate_CreateNextSaleDate]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[ReCalculate_CreateNextSaleDate]
GO
--<VERSION>2009.2.19.1</VERSION>
--<DATE>2013-05-21</DATE>
CREATE PROCEDURE [dbo].[ReCalculate_CreateNextSaleDate]
	(
		-- хранимка создает новые цены в таблице TP_ServicePriceNextDays
		-- в зависимости от наступившей даты продаж у ценовых блоков
		@daysCount int -- количество дней наперед которые мы будем пересоздавать
	)
AS
BEGIN
	-- временная таблица что бы не делать 2 одинаковых запроса
	declare @tempCostOfferCrossSaleDate table
	(
		xCOId int,
		xCrossDate datetime,
		xSvKey int,
		xCode int,
		xSubCode1 int,
		xSubCode2 int,
		xPKKey int,
		xPRKey int
	)

	;with listCostOffers as 
	(
		--два одинаковых запроса для того что бы слить колонки CO_SaleDateBeg и CO_SaleDateEnd
		select CostOffers.CO_Id, dateadd(day, 0, datediff(day, 0, CO_SaleDateBeg)) as crossDate, COS_SVKEY, COS_CODE, CS_SUBCODE1, CS_SUBCODE2, CS_PKKEY, CS_PRKEY
		from CostOffers with(nolock) join Seasons with(nolock) on CO_SeasonId = SN_Id
		join CostOfferServices with(nolock) on COS_COID = CO_Id
		join tbl_Costs with(nolock) on CS_COID = CO_Id
		where SN_IsActive = 1
		and isnull(CO_SaleDateBeg, '2000-01-01') between getdate() and dateadd(dd, @daysCount, getdate())
		-- ЦБ должен быть активен
		and CO_State = 1
		group by CostOffers.CO_Id, CO_SaleDateBeg, CO_PKKey, COS_SVKEY, COS_CODE, CS_SUBCODE1, CS_SUBCODE2, CS_PKKEY, CS_PRKEY
		union
		select CostOffers.CO_Id, dateadd(day, 1, datediff(day, 0, CO_SaleDateEnd)) as crossDate, COS_SVKEY, COS_CODE, CS_SUBCODE1, CS_SUBCODE2, CS_PKKEY, CS_PRKEY
		from CostOffers with(nolock) join Seasons with(nolock) on CO_SeasonId = SN_Id
		join CostOfferServices with(nolock) on COS_COID = CO_Id
		join tbl_Costs with(nolock) on CS_COID = CO_Id
		where SN_IsActive = 1
		and isnull(CO_SaleDateEnd, '2000-01-01') between getdate() and dateadd(dd, @daysCount, getdate())
		-- ЦБ должен быть активен
		and CO_State = 1
		group by CostOffers.CO_Id, CO_SaleDateEnd, CO_PKKey, COS_SVKEY, COS_CODE, CS_SUBCODE1, CS_SUBCODE2, CS_PKKEY, CS_PRKEY
	)

	-- переносим только те костоферы которые на эту дату еще не были перенесены
	insert into @tempCostOfferCrossSaleDate (xCOId, xCrossDate, xSvKey, xCode, xSubCode1, xSubCode2, xPKKey, xPRKey)
	select top (1000) CO_Id, crossDate, COS_SVKEY, COS_CODE, CS_SUBCODE1, CS_SUBCODE2, CS_PKKEY, CS_PRKEY
	from listCostOffers
	where not exists (	select top 1 1
						from CostOfferCrossSaleDate with(nolock)
						where CSD_COId = CO_Id
						and CSD_CrossDate = crossDate
						and CSD_SvKey = COS_SVKEY
						and CSD_Code = COS_CODE
						and CSD_SubCode1 = CS_SUBCODE1
						and CSD_SubCode2 = CS_SUBCODE2
						and CSD_PKKey = CS_PKKEY
						and CSD_PRKey = CS_PRKEY)

	DECLARE @lastChangeDate datetime
	set @lastChangeDate = getdate()
	-- переносим цены в TP_ServicePriceNextDate
	-- это новые цены - т.е. цен с такими SPND_SCPId, SPND_SaleDate, SPND_Rate еще не было
	insert into TP_ServicePriceNextDate (SPND_SCPId, SPND_IsCommission, SPND_Rate, SPND_SaleDate, SPND_Gross, SPND_Netto, SPND_DateLastChange, SPND_DateLastCalculate, SPND_NeedApply)
	select distinct SPAD_SCPId, SPAD_IsCommission, SPAD_Rate, xCrossDate, null, null, @lastChangeDate, null, 1
	from TP_ServiceComponents with(nolock) join TP_ServiceCalculateParametrs with(nolock) on SC_Id = SCP_SCId
	join TP_ServicePriceActualDate with(nolock) on SCP_Id = SPAD_SCPId and SPAD_SaleDate is null
	join @tempCostOfferCrossSaleDate on SC_SVKey = xSvKey 
										and SC_Code = xCode 
										and SC_SubCode1 = xSubCode1 
										and SC_SubCode2 = xSubCode2
										and SC_PRKey = xPRKey
										and SCP_PKKey = xPKKey
	where not exists (	select top 1 1
						from TP_ServicePriceNextDate
						where SPND_SCPId = SPAD_SCPId
						and SPND_SaleDate = xCrossDate
						and SPND_Rate = SPAD_Rate)
	-- нам нужны только из туров с будующей датой заезда
	and SCP_DateCheckIn >= getdate()

	-- по этим услугам уже были  предыдущие цены - т.е. цены с такими же SPND_SCPId, SPND_SaleDate, SPND_Rate
	update 
		TP_ServicePriceNextDate
	set 
		SPND_NeedApply = 1, 
		SPND_DateLastChange = @lastChangeDate
	from 
	(select SPAD_SCPId, xCrossDate, SPAD_Rate
	from TP_ServiceComponents with(nolock) join TP_ServiceCalculateParametrs with(nolock) on SC_Id = SCP_SCId
	join TP_ServicePriceActualDate with(nolock) on SCP_Id = SPAD_SCPId and SPAD_SaleDate is null
	join @tempCostOfferCrossSaleDate on SC_SVKey = xSvKey 
										and SC_Code = xCode 
										and SC_SubCode1 = xSubCode1 
										and SC_SubCode2 = xSubCode2
										and SC_PRKey = xPRKey
										and SCP_PKKey = xPKKey
	where exists (select top 1 1
						from TP_ServicePriceNextDate
						where SPND_SCPId = SPAD_SCPId
						and SPND_SaleDate = xCrossDate
						and SPND_Rate = SPAD_Rate)
	-- нам нужны только из туров с будующей датой заезда
	and SCP_DateCheckIn >= getdate()) as tempSource
	where
		SPAD_SCPId = SPND_SCPId and
		xCrossDate = SPND_SaleDate and
		SPAD_Rate = SPND_Rate


	-- записываем костоферы которые уже перенесли
	insert into CostOfferCrossSaleDate (CSD_COId, CSD_CrossDate, CSD_SvKey, CSD_Code, CSD_SubCode1, CSD_SubCode2, CSD_PKKey, CSD_PRKey)
	select xCOId, xCrossDate, xSvKey, xCode, xSubCode1, xSubCode2, xPKKey, xPRKey
	from @tempCostOfferCrossSaleDate
END

GO

grant exec on [dbo].[ReCalculate_CreateNextSaleDate] to public
go

/*********************************************************************/
/* end sp_ReCalculate_CreateNextSaleDate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[ReCalculate_MigrateToPrice]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[ReCalculate_MigrateToPrice]
GO

--<VERSION>2009.2.19.1</VERSION>
--<DATE>2013-05-21</DATE>
CREATE PROCEDURE [dbo].[ReCalculate_MigrateToPrice]
	(
		-- хранимка суммирует стоимость отдельных услуг и кладет их в TP_Prices		
		-- максимальное количество записей для переноса за 1 раз
		@countItem INT,  
		
		--ключи цен на перерасчет
		@tpKeys dbo.ListIntValue readonly,
		
		--ключ тура
		--если указан, @tpToursCount не учитывается - обрабатывается только один тур
		@toKey INT = NULL,

		--количество туров
		@tpToursCount INT = NULL --для совместимости с предыдущими версиями
	)
AS
BEGIN
	SET ARITHABORT ON;

	--Таблица для цен из TP_PriceComponents
	DECLARE @tempGrossTable TABLE 
	(
		xPCId int,
		xTPKey int,
		xSummPrice money,
		xToKey int,
		xUpdateDate datetime
	)
	
	DECLARE  @numRowsInserted int , @numRowsUpdated int, @numRowsDeleted int
	SET @numRowsInserted = 0
	SET @numRowsUpdated = 0
	SET @numRowsDeleted = 0

	-- если указаны ключи цен, обрабатываем их
	IF (EXISTS(SELECT TOP 1 1 FROM @tpKeys))
	BEGIN
		  
		SELECT PC_Id, PC_TPKey, PC_SummPrice, PC_ToKey, PC_UpdateDate
		FROM TP_PriceComponents
		INNER JOIN @tpKeys ON value = PC_TPKey
		WHERE pc_state = 1      
		 
	END  
	ELSE
	BEGIN  

		--Если указан @toKey, обрабатываем только один тур
		IF (@toKey IS NOT NULL)
		BEGIN
    
			INSERT INTO @tempGrossTable (xPCId, xTPKey, xSummPrice, xToKey, xUpdateDate)
			SELECT TOP (@countItem) PC_Id, PC_TPKey, PC_SummPrice, PC_ToKey, PC_UpdateDate
			FROM TP_PriceComponents
			WHERE PC_State = 1 AND PC_TOKey = @toKey

			--добавлен инсерт для обработки значений в этой же хранимой процедуре при применении ММ
				INSERT INTO @tempGrossTable (xPCId, xTPKey, xSummPrice, xToKey, xUpdateDate)
				SELECT TOP (@countItem) PC_Id, PC_TPKey, PC_SummPrice, PC_ToKey, PC_UpdateDate
				FROM TP_PriceComponents INNER JOIN @tpKeys ON value = PC_TPKey
				WHERE PC_State = 1 

		END
     		ELSE
		BEGIN
  
			--Если указано количество туров, берем в обработкe @countItem цен @toursCount туров    
			IF (@tpToursCount IS NOT NULL)
			BEGIN      
    
				DECLARE tourscursor CURSOR FAST_FORWARD READ_ONLY
				FOR SELECT TOP (@tpToursCount) to_key FROM tp_tours (NOLOCK)
				WHERE to_key IN (SELECT PC_TOKey FROM TP_PriceComponents WHERE PC_State = 1)

				OPEN toursCursor
	
				FETCH NEXT FROM toursCursor INTO @toKey

				WHILE @@FETCH_STATUS = 0
				BEGIN

					INSERT INTO @tempGrossTable (xPCId, xTPKey, xSummPrice, xToKey, xUpdateDate)
					SELECT TOP (@countItem) PC_Id, PC_TPKey, PC_SummPrice, PC_ToKey, PC_UpdateDate
					FROM TP_PriceComponents
					WHERE PC_State = 1 AND PC_TOKey = @toKey

					FETCH NEXT FROM toursCursor INTO @toKey

				END

				CLOSE toursCursor
				DEALLOCATE toursCursor

			END
  
			-- Иначе обрабатываем первые @countItem записей из очереди         
			ELSE
			BEGIN    

				INSERT INTO @tempGrossTable (xPCId, xTPKey, xSummPrice, xToKey, xUpdateDate)
				SELECT TOP (@countItem) PC_Id, PC_TPKey, PC_SummPrice, PC_ToKey, PC_UpdateDate
				FROM TP_PriceComponents
				WHERE PC_State = 1

			END

		END
	
	END
    
	DECLARE @tempGrossTableCount INT
	SELECT @tempGrossTableCount=COUNT(1) FROM @tempGrossTable
	print 'Количество строк в TP_PriceComponents: ' + convert(nvarchar(max), @tempGrossTableCount)
	
	DECLARE currReCalculate_MigrateToPrice CURSOR FOR SELECT DISTINCT xToKey FROM @tempGrossTable
	OPEN currReCalculate_MigrateToPrice

	FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey
	WHILE @@FETCH_STATUS = 0
	BEGIN
			
		INSERT INTO CalculatingPriceLists (CP_CreateDate,CP_PriceTourKey) VALUES (GETDATE(),@toKey) 
		DECLARE	@cpKey int
		SET @cpKey = SCOPE_IDENTITY()
			
		-- переносим цены в таблицу для удаленных цен
		INSERT INTO tp_pricesdeleted (TPD_TPKey, TPD_TOKey, TPD_TIKey, TPD_Gross, TPD_DateBegin, TPD_DateEnd, TPD_CalculatingKey)
		SELECT TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd, @cpKey 
		FROM tp_prices (NOLOCK)
		WHERE tp_key IN (SELECT xTPKey FROM @tempgrosstable WHERE xSummPrice IS NULL AND xToKey = @toKey)
								
		-- удаляем цены из tp_prices
		DELETE FROM tp_prices
		WHERE tp_key IN (SELECT xTPKey FROM @tempgrosstable WHERE xSummPrice IS NULL AND xToKey = @toKey)
		SET @numRowsDeleted = @@ROWCOUNT
			
		--восстанавливаем цены из таблицы удаленных цен
		INSERT INTO tp_prices (TP_Key, TP_TOKey, TP_TIKey, TP_Gross, TP_DateBegin, TP_DateEnd, TP_CalculatingKey)
		SELECT TPD_TPKey, TPD_TOKey, TPD_TIKey, TPD_Gross, TPD_DateBegin, TPD_DateEnd, @cpKey
		FROM tp_pricesdeleted (NOLOCK)
		WHERE tpd_tpkey IN (SELECT xTPKey FROM @tempgrosstable WHERE xSummPrice IS NOT NULL AND xToKey = @toKey)
		SET @numRowsInserted = @@ROWCOUNT
								
		-- и удаляем из из таблицы удаленных цен
		DELETE FROM tp_pricesdeleted
		WHERE tpd_tpkey IN (SELECT xTPKey FROM @tempgrosstable WHERE xSummPrice IS NOT NULL AND xToKey = @toKey)
								
		-- обновляем цены, которые ранее не были удалены и изменились, или ранее были удалены но сейчас востановились
		UPDATE TP_Prices
		SET TP_Gross = CEILING(xSummPrice),
		tp_updatedate = GetDate(),
		TP_CalculatingKey = @cpKey
		FROM TP_Prices join @tempGrossTable on TP_Key = xTPKey
		WHERE xSummPrice is not null
		AND xToKey = @toKey
			
		SET @numRowsUpdated = @@ROWCOUNT
			
		IF EXISTS (SELECT TOP 1 1 FROM TP_Tours WHERE to_Key = @toKey AND to_isEnabled = 1)
		BEGIN
			-- Реплицируем только если тур уже выставлен в online
			IF (@numRowsInserted > 0 or @numRowsDeleted > 0)
			BEGIN
				EXEC FillMasterWebSearchFields @toKey, @cpKey
			END
			ELSE IF (@numRowsUpdated > 0)
			BEGIN
				-- нужно для корректной обработки необходимости обновления кэша в TourML
				UPDATE TP_Tours SET TO_UPDATETIME = GETDATE() WHERE TO_Key = @toKey

				IF dbo.mwReplIsPublisher() > 0
				BEGIN
					INSERT INTO mwReplTours(rt_trkey, rt_tokey, rt_date, rt_calckey, rt_updateOnlinePrices)
					SELECT TO_TRKey, TO_Key, GETDATE(), @cpKey, 2
					FROM tp_tours
					WHERE TO_Key = @toKey
				END
				ELSE
				BEGIN
					EXEC mwReplUpdatePriceEnabledAndValue @toKey, @cpKey
				END
			END
		END
		
		-- отметим что уже перенесли
		UPDATE TP_PriceComponents
		SET PC_DateLastUpdateToPrice = GETDATE(),
		PC_State = 0
		FROM TP_PriceComponents inner join @tempGrossTable ON PC_Id = xPCId
		WHERE PC_TOKey = @toKey AND PC_UpdateDate = xUpdateDate
		
		FETCH NEXT FROM currReCalculate_MigrateToPrice INTO @toKey
	END

	CLOSE currReCalculate_MigrateToPrice
	DEALLOCATE currReCalculate_MigrateToPrice
	
END
GO

GRANT EXECUTE ON [dbo].[ReCalculate_MigrateToPrice]	TO PUBLIC
GO
/*********************************************************************/
/* end sp_ReCalculate_MigrateToPrice.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_RemoveReferences.sql */
/*********************************************************************/
if exists(select id from sysobjects where id = object_id(N'[dbo].[RemoveReferences]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop proc [dbo].[RemoveReferences]
GO

CREATE PROCEDURE [dbo].[RemoveReferences]
-- Удаляет записи, ссылающиеся на данную запись, порциями (для повышения производительности, размер регулируется параметром @deleteBatchSize)
--<VERSION>9.2.19</VERSION>
--<DATE>2013-04-04</DATE>
(
	@sourceTable nvarchar(150)			-- имя таблицы, запись которой удаляется
	, @primaryKeyValue int				-- значение первичного ключа, по которому удаляется запись
	, @removeOnlyNotCascading bit = 0	-- признак, что необходимо удалять только ссылки по связям, для которых установлено правило Delete rule: NO_ACTION
	, @deleteBatchSize int = 50000		-- количество удаляемых за один раз записей
)
as
begin

	declare @wasError bit
	declare @errMsg nvarchar(max)
	set @wasError = 0

	if not exists(select top 1 1 from sys.tables with (nolock) where name = @sourceTable)
	begin
		set @errMsg = 'Table ' + @sourceTable + ' doesn''t exists in database!'
		set @wasError = 1
		RAISERROR(@errMsg, 15, 1)
		return
	end

	declare fkCursor cursor for
	select distinct tab.name, col.name
	from sys.foreign_keys fk with (nolock)
	left join sys.foreign_key_columns colId with (nolock) on colId.constraint_object_id = fk.object_id
	left join sys.tables tab with (nolock) on fk.parent_object_id = tab.object_id
	inner join sys.columns col with (nolock) on col.object_id = tab.object_id and colId.parent_column_id = col.column_id
	where fk.referenced_object_id = (select top 1 object_id from sys.tables with (nolock) where name = @sourceTable)
		and (not (@removeOnlyNotCascading = 1) or (@removeOnlyNotCascading = 1 and fk.delete_referential_action = 0))

	begin try

		open fkCursor

		declare @tableName nvarchar(100)
		declare @fkColumnName nvarchar(100)
		declare @sql nvarchar(max)
		
		fetch next from fkCursor into @tableName, @fkColumnName

		while @@FETCH_STATUS = 0
		begin
		
			set @sql = '
				while exists (select top 1 1 from @tableName with (nolock) where @fkColumnName = @primaryKeyValue)
				begin
					delete top (@deleteBatchSize) from @tableName
					where @fkColumnName = @primaryKeyValue
				end
			'
			
			set @sql = REPLACE(@sql, '@tableName', @tableName)
			set @sql = REPLACE(@sql, '@fkColumnName', @fkColumnName)
			set @sql = REPLACE(@sql, '@primaryKeyValue', @primaryKeyValue)
			set @sql = REPLACE(@sql, '@deleteBatchSize', @deleteBatchSize)
			
			exec (@sql)

			fetch next from fkCursor into @tableName, @fkColumnName
		
		end
	
	end try
	begin catch
		set @wasError = 1
		print error_message()
		set @errMsg = 'RemoveReferences ' + ISNULL(@sourceTable, '') + ', ' + str(ISNULL(@primaryKeyValue, 0)) + ' error: ' + ERROR_MESSAGE()
	end catch
	
	close fkCursor
	deallocate fkCursor

	if @wasError = 1
	begin
	
		RAISERROR(@errMsg, 16, 1)
	
	end

end

GO

grant exec on [dbo].[RemoveReferences] to public
go
/*********************************************************************/
/* end sp_RemoveReferences.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_SetServiceQuotasStatus.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[SetServiceQuotasStatus]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[SetServiceQuotasStatus]
GO

CREATE PROCEDURE [dbo].[SetServiceQuotasStatus]
	(
		@DLKey int
	)
AS
BEGIN
	declare @N_DLSVKey int, @N_DLDateBeg datetime, @N_DLDateEnd datetime, @N_GlobalControl int, @DLControl int
	
	select @N_DLSVKey = DL_SVKEY, @N_DLDateBeg = DL_DATEBEG, @N_DLDateEnd = DL_DATEEND, @N_GlobalControl = CR_GlobalState, @DLControl = DL_CONTROL
	from Dogovorlist join Controls on DL_CONTROL = CR_KEY
	where DL_KEY = @DLKey
	
	-- если глобальный статус услуги не Ок, то выходим
	if @N_GlobalControl != 1 or exists (select 1 from Dogovorlist where DL_KEY = @DLKey and DL_DATEBEG < '1950-01-01')
	begin
		return 0
	end

	declare @serviceKeys nvarchar(max)	
			
	select @serviceKeys = SS_ParmValue
	from SystemSettings 
	where SS_ParmName = 'SYSNoSetToQuotaIfStatusOk'
	
	if exists (select 1 from [service] where sv_key = @N_DLSVKey) and not exists (select 1 from ParseKeys(@serviceKeys) where xt_key = @N_DLSVKey)
	begin
		if isnull((select max(isnull(SD_State, 4)) 
				   from ServiceByDate 
				   where SD_DLKey = @DLKey),4) = 4
		begin
			EXEC DogListToQuotas @DLKey, null, null, null, null, @N_DLDateBeg, @N_DLDateEnd, null, null, @SetOkIfRequest = 1
		end
	end
				
	if exists (select 1 from DogovorList where DL_KEY = @DLKey and DL_CONTROL = 0)
	begin
		update ServiceByDate set SD_State = 3 where SD_DLKey = @DLKey and SD_State = 4
	end	
	else if (@DLControl is not null)
	begin
		-- koshelev. 13942
		-- устанавливаем статус услуги как был, если мы смогли посадить на квоту или вне квоты
		if not exists (select 1 from ServiceByDate where SD_DLKey = @DLKey and SD_State = 4)
			update Dogovorlist set DL_CONTROL = @DLControl where DL_KEY = @DLKey
	end
END
GO

grant exec on [dbo].[SetServiceQuotasStatus] to public
go
/*********************************************************************/
/* end sp_SetServiceQuotasStatus.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_SetServiceStatusOK.sql */
/*********************************************************************/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SetServiceStatusOK]') AND type in (N'P', N'PC'))
	DROP PROCEDURE [dbo].[SetServiceStatusOK]
GO

CREATE PROCEDURE [dbo].[SetServiceStatusOK]
	(
		--<VERSION>2009.2.5</VERSION>
		--<DATA>20.05.2013</DATA>
		-- хранимка определяет какой статус необходимо установить услуги, после изменения статуса квотирования
		@dlkey int,
		@dlcontrol int out -- новый статус
	)
AS
BEGIN
	set @dlcontrol = null
	-- теперь в завмсимости от настроек будем менять статусы на Ок
	-- 0 - все галки сняты
	-- 1 - Все услуги
	-- 2 - Авиаперелет
	-- 3 - Все услуги & Авиаперелет
	-- 4 - Проживание
	-- 5 - Все услуги & Проживание
	-- 6 - Авиаперелет & Проживание
	-- 7 - Все услуги & Авиаперелет & Проживание
	
	DECLARE @dlPartnerKey int, @svkey int, @sdState int, @svControl int, @svQuoted int, @oldDLControl int  
	
	-- Если это услуга из Интерлука, ничего не делаем
	select @dlPartnerKey=DL_PARTNERKEY, @svkey = dl_svkey, @oldDLControl = DL_Control, 
	@svControl = SV_CONTROL, @svQuoted = SV_QUOTED  
	from tbl_dogovorList join [service] on dl_svkey = sv_key 
	where dl_key = @dlkey and isnull(SV_QUOTED, 0) = 1
	
	if (exists (select top 1 1 from dbo.SystemSettings where SS_ParmName = 'IL_SyncILPartners' AND SS_ParmValue LIKE '%/' + convert(nvarchar(max) ,@dlPartnerKey) + '/%'))
		return
	
	select @sdState = MAX(COALESCE(SD_State, 4))
	from ServiceByDate 
	where SD_DLKey = @dlkey
	
	if (@sdState < 4 and @svQuoted = 1)
	begin 
		-- MEG00032041
		-- Теперь проверим есть ли на эту квоту запись в таблице QuotaStatuses
		-- которая говорит нам что нужно изменить статус услуги на тот который в этой таблице
		if exists(select 1 from QuotaStatuses join Quotas on QS_QTID = QT_ID						
					join QuotaDetails on QT_ID = QD_QTID
					join QuotaParts on QP_QDID = QD_ID
					join ServiceByDate on SD_QPID = QP_ID
					where SD_DLKey = @dlkey and SD_State = QS_Type) 
		begin
			select @dlcontrol = QS_CRKey
			from QuotaStatuses join Quotas on QS_QTID = QT_ID 
			join QuotaDetails on QT_ID = QD_QTID
			join QuotaParts on QP_QDID = QD_ID
			join ServiceByDate on SD_QPID = QP_ID
			where SD_DLKey = @dlkey and SD_State = QS_Type
					
			if (@oldDLControl != @dlcontrol)
			begin
				update Dogovorlist set DL_Control = @dlcontrol where DL_Key = @dlKey 
			end
			
			return;
		end
		
		-- Авиаперелет
		if (@svkey = 1)
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('2', '3', '6', '7'))
			begin
				set @dlcontrol = 0
				update Dogovorlist set DL_Control = @dlcontrol where DL_Key = @dlKey 
				return;
			end
		end
			
		-- Проживание
		if (@svkey = 3)
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('4', '5', '6', '7'))
			begin
				set @dlcontrol = 0
				update Dogovorlist set DL_Control = @dlcontrol where DL_Key = @dlKey 
				return;
			end
		end
			
		-- Все услуги
		if (@svkey not in (1, 3))
		begin
			if exists(select 1 from SystemSettings where SS_ParmName = 'SYS_SET_SERVICE_STATUS_OK' and SS_ParmValue in ('1', '3', '5', '7'))
			begin
				set @dlcontrol = 0
				update Dogovorlist set DL_Control = @dlcontrol where DL_Key = @dlKey 
				return;
			end
		end
	end
	
	-- установим нашей услуге статус из справочника услуг
	if (@svControl != @oldDLControl and @svQuoted = 1 and @svControl is not null)
	begin
		set @dlcontrol = @svControl
		update Dogovorlist set DL_Control = @svControl where DL_Key = @dlKey and DL_Control != @svControl
		return
	end
END
GO

grant execute on [dbo].[SetServiceStatusOK] to public
GO
/*********************************************************************/
/* end sp_SetServiceStatusOK.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_SpoListResults.sql */
/*********************************************************************/
--<VERSION>9.2</VERSION>
--<DATE>2013-04-17</DATE>

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[SPOListResults]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[SPOListResults]
GO

CREATE PROCEDURE [dbo].[SPOListResults] 
( 
	@searchType varchar (10),
	@dateFrom DATETIME,
	@dateTo DATETIME,
	@top nvarchar(10),
	@cityFromKeyParam INT = 0,
	@countryKeyParam INT = 0,
	@resortKeyParam INT = 0,
	@cityKeyParam INT = 0,
	@hotelKeyParam INT = 0
)
AS

DECLARE @dateFromStr VARCHAR(10)
SET @dateFromStr = LEFT(CONVERT(VARCHAR, @dateFrom, 120), 10)

DECLARE @dateToStr VARCHAR(10)
SET @dateToStr = LEFT(CONVERT(VARCHAR, @dateTo, 120), 10)

DECLARE @filter VARCHAR(2048)
SET @filter = ''

IF @cityFromKeyParam > 0
	SET @filter += ' WHERE SD_CTKEYFROM = ' + @cityFromKeyParam + ' '   

IF @countryKeyParam > 0
BEGIN
	IF @filter = ''
		SET @filter += ' WHERE SD_CNKEY = ' + @countryKeyParam + ' '  
	ELSE 
		SET @filter += ' AND SD_CNKEY = ' + @countryKeyParam + ' '
END

IF @resortKeyParam > 0
BEGIN
	IF @filter = ''
		SET @filter += ' WHERE SD_RSKEY = ' + @resortKeyParam + ' '  
	ELSE 
		SET @filter += ' AND SD_RSKEY = ' + @resortKeyParam + ' '
END

IF @cityKeyParam > 0
BEGIN
	IF @filter = ''
		SET @filter += ' WHERE SD_CTKEY = ' + @cityKeyParam + ' '  
	ELSE 
		SET @filter += ' AND SD_CTKEY = ' + @cityKeyParam + ' '
END

IF @hotelKeyParam > 0
BEGIN
	IF @filter = ''
		SET @filter += ' WHERE SD_HDKEY = ' + @hotelKeyParam + ' ' 
	ELSE 
		SET @filter += ' AND SD_HDKEY = ' + @hotelKeyParam + ' '
END

IF @filter = ''
	SET @filter += ' WHERE exists (select td_date from tp_turdates where td_tokey=sd_tourkey and td_DATE >= ''' + @dateFromStr + ''' and td_DATE <= ''' + @dateToStr + ''') '  
ELSE 
	SET @filter += ' AND exists (select td_date from tp_turdates where td_tokey=sd_tourkey and td_DATE >= ''' + @dateFromStr + ''' and td_DATE <= ''' + @dateToStr + ''') '

IF (@searchType = 'SPO')
	BEGIN
		IF @filter = ''
			SET @filter += ' WHERE SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 1) > 0) '
		ELSE
			SET @filter += ' AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 1) > 0) '
	END
ELSE IF (@searchType = 'Leader')
	BEGIN
		IF @filter = ''
			SET @filter += ' WHERE SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 2) > 0) '
		ELSE
			SET @filter += ' AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 2) > 0) '
	END
ELSE
	BEGIN
		IF @filter = ''
			SET @filter += ' WHERE SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 3) > 0) '
		ELSE
			SET @filter += ' AND SD_TOURKEY IN (SELECT TO_KEY FROM TP_TOURS WITH(NOLOCK) WHERE (TO_ATTRIBUTE & 3) > 0) '
	END


DECLARE @command varchar (8000)
SET @command =
'
CREATE TABLE #resultsTable (
	[createdate] [datetime],
	[tourname] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[tourhttp] [varchar] (128) COLLATE Cyrillic_General_CI_AS,
	[resort] [varchar] (1024) COLLATE Cyrillic_General_CI_AS,
	[city] [varchar] (1024) COLLATE Cyrillic_General_CI_AS,
	[hotels] [varchar] (7000) COLLATE Cyrillic_General_CI_AS, 
	[tourdates] [varchar] (1024),
	[countryName] [varchar] (25) COLLATE Cyrillic_General_CI_AS,
	[countryNameLat] varchar (25),
	[countryKey] int, 
	[tourKey] int,
	[tourListKey] int,
	[minTourPrice] decimal,	-- минимальная цена тура
	[Rate] varchar(3)		-- валюта цены тура
) 
 
DECLARE @tourkey  int
DECLARE @hotelkey  int
DECLARE @tourdate datetime
DECLARE @resortkey  int
DECLARE @citykey  int
DECLARE @countrykey  int
DECLARE @createdate datetime
DECLARE @tourlistkey int

DECLARE @lastTourkey int
DECLARE @lastTourListKey int
DECLARE @lastHotelkey int
DECLARE @lastResortkey int
DECLARE @lastCountrykey int
DECLARE @lastCreateDate datetime
DECLARE @exit bit
DECLARE @resortKeys varchar(8000);
DECLARE @cityKeys varchar(8000);

DECLARE @hotelNames varchar (7000)
DECLARE @tourDates varchar (1024)
DECLARE @resorts varchar (1024)
DECLARE @cities varchar (1024)

SET @lastTourkey = -1
SET @lastHotelkey = -1
SET @lastResortkey = -1
SET @exit = 0
SET @resortKeys = ''''
SET @cityKeys = ''''

SELECT distinct top ' + @top + ' sd_tourkey, SD_TOURCREATED into #tempSpoTable from MWSPoDataTable ' + @filter + ' ORDER BY SD_TOURCREATED DESC 

DECLARE SPO_Cursor CURSOR FOR
SELECT SD_TOURCREATED, SD_TOURKEY, SD_HDKEY, td_date, SD_RSKEY, SD_CTKEY, SD_CNKEY, SD_TLKEY
FROM MWSPoDataTable inner join tp_turdates on (sd_tourkey = td_tokey)
WHERE sd_tourkey in (select sd_tourkey from  #tempSpoTable) ORDER BY sd_CNKEY,sd_tourkey, sd_hdkey, sd_rskey

OPEN SPO_Cursor

if (@@CURSOR_ROWS > 0)
Begin'	
	set @command = replace(@command, '	', '')
		
	set @command = @command + '
FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @citykey, @countrykey, @tourlistkey
WHILE 1=1
BEGIN
    
    if (((@lastTourkey = -1) OR (@lastTourkey = @tourkey)) AND (@@FETCH_STATUS = 0))
	BEGIN
		--Отели
		IF (@lastHotelkey <> @hotelkey)
			BEGIN
				declare @hdName varchar (1024)
				declare @hdUrl varchar (1024)
				SELECT @hdName = (isnull (HD_NAME,'''') + '' '' + ltrim(rtrim(isnull(HD_STARS,'''')))), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
				if (@lastTourkey = -1)
					BEGIN
						SET @hotelNames = @hdName + ''|'' + @hdUrl
					END
				else
					BEGIN
						SET @hotelNames = @hotelNames + '', '' + @hdName + ''|'' + @hdUrl
					END
				SET @lastHotelkey = @hotelkey
			END
		
		if (@lastTourkey = -1)
			BEGIN
				if (@resortkey is NULL)
					SET @resorts = ''нет''
			END
		
		IF (@resortkey is not null)
		BEGIN
			declare @rsName varchar (50)
			set @rsName = ''''						

			if (CHARINDEX(''|''+CAST(@resortkey as varchar)+''|'',@resortKeys) = 0)
			BEGIN
				SET @resortKeys = @resortKeys + ''|'' + CAST(@resortkey as varchar) +''|''
				SELECT @rsName = RS_NAME from resorts where RS_KEY = @resortkey				

				if (@lastTourkey = -1)
					BEGIN
						SET @resorts = @rsName
					END
				else
					BEGIN
						if @resortKey > 0 and len(@resorts) > 0 and @resorts != ''нет''
							set @resorts = @resorts + '',''
						if @resorts != ''нет''
							SET @resorts = @resorts + @rsName
						else
							SET @resorts = @rsName
					END
			END

		END'	
	set @command = replace(@command, '	', '')
		
	set @command = @command + '
		IF (@citykey is not null)
		BEGIN
			declare @ctName varchar (50)
														
			if (CHARINDEX(''|''+CAST(@citykey as varchar)+''|'',@cityKeys) = 0)
				BEGIN
					SET @cityKeys = @cityKeys + ''|'' + CAST(@citykey as varchar) +''|''
					SELECT @ctName = CT_NAME from citydictionary where CT_KEY = @citykey
					if (@lastTourkey = -1)
						BEGIN
							SET @cities = @ctName
						END
					else
						BEGIN
							SET @cities = @cities + '', '' + @ctName
					END
				END
	
		END

		SET @lastCountrykey = @countrykey
		SET @lastCreateDate = @createdate
		SET @lastTourListKey = @tourlistkey

	Set @lastResortKey = @resortkey
		
	END
    else
	BEGIN
		
		if @@FETCH_STATUS <> 0
			SET @exit = 1
		
		DECLARE @tourName varchar(128)
		DECLARE @tourHttp varchar(128)
		SELECT @tourName = TL_NAMEWEB, @tourHttp = TL_WEBHTTP from TURLIST where TL_KEY = @lastTourListKey
		
		DECLARE @countryName varchar(25)
		DECLARE @countryNameLat varchar(25)

		SELECT @countryName = CN_NAME, @countryNameLat = CN_NAMELAT FROM tbl_Country WHERE CN_KEY = @lastCountrykey
		
		DECLARE @currentDate dateTime
		DECLARE @lastDate dateTime
		DECLARE @lastWriteDate dateTime
		DECLARE @first int
		DECLARE @datesInInterval int

		SET @first = 0

		DECLARE SPODate_Cursor CURSOR FOR
		SELECT DISTINCT td_date FROM tp_turdates
		WHERE td_tokey = @lastTourkey AND td_date >= ''' + @dateFromStr + ''' AND td_date <= ''' + @dateToStr + ''' ORDER BY td_date
		
		OPEN SPODate_Cursor

		FETCH NEXT FROM SPODate_Cursor INTO @currentDate

		WHILE @@FETCH_STATUS = 0
			BEGIN
					
					if (@first = 0)
						BEGIN 
							SET @datesInInterval = 0
							SET @first = 1
							SET @lastWriteDate = @currentDate
							SET @tourDates = CONVERT (char(5),@currentDate, 4)
						END
					else
						BEGIN
							if (@currentDate <> DATEADD (day,1,@lastDate))
								BEGIN
									SET @datesInInterval = 0
									if (@lastWriteDate = @lastDate)
										SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
									else
										SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@lastDate, 4) + '', '' + CONVERT (char(5),@currentDate, 4)
									SET @lastWriteDate = @currentDate
								END
						END
						SET @datesInInterval = @datesInInterval + 1
						SET @lastDate = @currentDate
						FETCH NEXT FROM SPODate_Cursor INTO @currentDate
				
			END
		CLOSE SPODate_Cursor
		DEALLOCATE SPODate_Cursor'	
	set @command = replace(@command, '	', '')
		
	set @command = @command + '

		if (@lastWriteDate <> @currentDate)
			BEGIN
				if (@datesInInterval > 1)
					SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
				else
					BEGIN
						if (@currentDate <> DATEADD (day,1,@lastWriteDate))
							SET @tourDates = @tourDates + '', '' + CONVERT (char(5),@currentDate, 4)
						else
							SET @tourDates = @tourDates + '' - '' + CONVERT (char(5),@currentDate, 4)
					END
			END

		if len(@resorts) = 0 
			set @resorts = ''нет'' 

		INSERT #resultsTable 
					([createdate] ,
					[tourname],
					[tourhttp],
					[resort],
					[city],
					[hotels],
					[tourdates],
					[countryName],
					[countryNameLat],
					[countryKey],
					[tourKey],
					[tourListKey])
		Values (@lastCreateDate, @tourName, @tourHttp, @resorts, @cities, @hotelNames, @tourDates, @countryName, @countryNameLat, @lastCountrykey,  @lastTourkey, @lastTourListKey)
		
		if (@exit = 1)
			BREAK
		
		if @lastResortKey = 0
			begin 
				set @resorts = ''''
				set @resortKeys = ''''
			end

		SELECT @hdName = (isnull (HD_NAME,'''') + '' '' + ltrim(rtrim(isnull(HD_STARS,'''')))), @hdUrl = isnull (HD_HTTP,'''') from hoteldictionary where HD_KEY = @hotelkey
		SET @hotelNames = @hdName + ''|'' + @hdUrl
		if (@resortkey is not NULL and @resortkey != 0)
			BEGIN
				SET @resortKeys = ''|'' + CAST (@resortkey as varchar) + ''|''
				SELECT @resorts = RS_NAME from resorts where RS_KEY = @resortkey				
			END
		else
			SET @resorts = ''нет''

		if (@cityKey is not NULL)
			BEGIN
				SET @cityKeys = ''|'' + CAST (@cityKey as varchar) + ''|''
				SELECT @cities = ct_NAME from citydictionary where ct_KEY = @cityKey
			END
		else
			SET @cities = ''нет''

		SET @lastHotelkey = @hotelkey
		SET @lastCountrykey = @countrykey
		SET @lastCreateDate = @createdate
		SET @lastTourListKey = @tourlistkey

		SET @lastResortKey = @resortkey
	
	END'	
	set @command = replace(@command, '	', '')
		
	set @command = @command + '
	
	SET @lastTourkey = @tourkey
	
	FETCH NEXT FROM SPO_Cursor INTO @createdate, @tourkey, @hotelkey, @tourdate, @resortkey, @citykey, @countrykey, @tourlistkey
END
end

CLOSE SPO_Cursor
DEALLOCATE SPO_Cursor

update #resultsTable 
set [minTourPrice] = TO_MinPrice,
[Rate] = TO_Rate
from tp_tours r
where r.to_key = [tourKey]

SELECT * FROM #resultsTable order by [countryName],[createdate]
DROP TABLE #tempSpoTable
DROP TABLE  #resultsTable'

EXEC(@command)

GO

GRANT EXEC ON SPOListResults TO PUBLIC 

go
/*********************************************************************/
/* end sp_SpoListResults.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_UpdateQueuesForRecalculateCosts.sql */
/*********************************************************************/
-- хранимка ставит в очередь цены на расчет
--<VERSION>9.2.19.1</VERSION>
--<DATE>2013-04-03</DATE>
--<Summary>1-в обработке; 0-ожидает</Summary>
	
if exists (select * from sys.objects where object_id = object_id(N'[dbo].[UpdateQueuesForRecalculateCosts]') and type in (N'P', N'PC'))
	drop procedure [dbo].[UpdateQueuesForRecalculateCosts]
go

create procedure [dbo].[UpdateQueuesForRecalculateCosts]
	(
		@result [dbo].QueuesReCalculateCostResults readonly
	)	
as
begin
	update QueuesForRecalculateCosts
	set QRC_State = 1
	from QueuesForRecalculateCosts qrc
	inner join @result res on qrc.QRC_SPADId = res.SPADId
end
go

grant exec on [dbo].[UpdateQueuesForRecalculateCosts] to public
go

/*********************************************************************/
/* end sp_UpdateQueuesForRecalculateCosts.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_UpdateServicePriceActualDateFromCostsResult.sql */
/*********************************************************************/
if exists (select * from sys.objects where object_id = object_id(N'[dbo].[UpdateServicePriceActualDateFromCostsResult]') and type in (N'P', N'PC'))
drop procedure [dbo].[UpdateServicePriceActualDateFromCostsResult]
go

create procedure [dbo].[UpdateServicePriceActualDateFromCostsResult]
	(
		@result [dbo].[ReCalculateCostResults] readonly
	)	
as
begin
	-- хранимка переливает результаты расчета цен из @result в TP_ServicePriceActualDate,
	-- обновляет очередь, переносит в историю и затем удаляет очереди
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-27</DATE>

	declare @currentDate datetime
	set @currentDate = getdate()
	
	/*закончили расчет теперь обновим основную таблицу*/
	update TP_ServicePriceActualDate
	set SPAD_Gross = Gross,
	SPAD_Netto = Netto,
	SPAD_IsCommission = IsCommission,
	SPAD_DateLastCalculate = @currentDate,
	SPAD_NeedApply = 0
	from TP_ServicePriceActualDate join @result on SPAD_Id = Id
	where SPAD_SaleDate is null

	/*обновляем очередь после расчета*/
	update QueuesForRecalculateCosts
	set [QRC_CalcDate] = @currentDate,
	[QRC_NewGross] = Gross,
	[QRC_NewNetto] = Netto
	from QueuesForRecalculateCosts join @result on QRC_SPADId = Id

	/*переносим в историю*/
	--
	
	/*удаляем очереди*/
	delete from QueuesForRecalculateCosts where QRC_SPADId IN (select Id from @result)
end
go

grant exec on [dbo].[UpdateServicePriceActualDateFromCostsResult] to public
go

/*********************************************************************/
/* end sp_UpdateServicePriceActualDateFromCostsResult.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_UpdateServicePriceNextDateFromCostsResult.sql */
/*********************************************************************/
if exists (select * from sys.objects where object_id = object_id(N'[dbo].[UpdateServicePriceNextDateFromCostsResult]') and type in (N'P', N'PC'))
drop procedure [dbo].[UpdateServicePriceNextDateFromCostsResult]
go

create procedure [dbo].[UpdateServicePriceNextDateFromCostsResult]
	(
		@result [dbo].[ReCalculateCostResults] readonly
	)	
as
begin
	-- хранимка переливает результаты расчета цен из @result в TP_ServicePriceNextDate
	--<VERSION>2009.2.19.1</VERSION>
	--<DATE>2013-02-28</DATE>
	
	/*закончили расчет теперь обновим основную таблицу*/
	update TP_ServicePriceNextDate
	set SPND_Gross = Gross,
	SPND_Netto = Netto,
	SPND_IsCommission = IsCommission,
	SPND_DateLastCalculate = getdate(),
	SPND_NeedApply = 0
	from TP_ServicePriceNextDate join @result on SPND_Id = Id
end
go

grant exec on [dbo].[UpdateServicePriceNextDateFromCostsResult] to public
go

/*********************************************************************/
/* end sp_UpdateServicePriceNextDateFromCostsResult.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_UpdateTpPriceComponentsFromAddCostsResult.sql */
/*********************************************************************/
if exists (select * from sys.objects where object_id = object_id(N'[dbo].[UpdateTpPriceComponentsFromAddCostsResult]') and type in (N'P', N'PC'))
drop procedure [dbo].[UpdateTpPriceComponentsFromAddCostsResult]
go

create procedure [dbo].[UpdateTpPriceComponentsFromAddCostsResult]	
	(
		@result [dbo].[ReCalculateAddCostResults] readonly
	)	
as
begin
	-- хранимка переливает результаты расчета доплат из @result в TP_PricaComponents
	--<VERSION>2009.2.19.1</VERSION>
	--<DATE>2013-03-15</DATE>
	declare @currentDate datetime
	set @currentDate = getdate()
	
	-- временная таблица для поиска PK ключей
	create table #tablePCId
	(
		xPCId bigint,
		xAddCostIsCommission money,
		xAddCostNoCommission money
	)	
	
	-- %%%%%%%%%%%  1 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_1 = ScpId
	where SVKey_1 = SvKey
	and SCPId_1 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_1, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_1, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_1 = xAddCostIsCommission,
			AddCostNoCommission_1 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  1 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  2 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_2 = ScpId
	where SVKey_2 = SvKey	
	and SCPId_2 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_2, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_2, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)	
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = getdate(),
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_2 = xAddCostIsCommission,
			AddCostNoCommission_2 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  2 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  3 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_3 = ScpId
	where SVKey_3 = SvKey	
	and SCPId_3 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_3, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_3, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_3 = xAddCostIsCommission,
			AddCostNoCommission_3 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  3 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  4 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_4 = ScpId
	where SVKey_4 = SvKey	
	and SCPId_4 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_4, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_4, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_4 = xAddCostIsCommission,
			AddCostNoCommission_4 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  4 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  5 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_5 = ScpId
	where SVKey_5 = SvKey
	and PC_TRKey = TrKey
	and SCPId_5 is not null
	and (isnull(AddCostIsCommission_5, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_5, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_5 = xAddCostIsCommission,
			AddCostNoCommission_5 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  5 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  6 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_6 = ScpId
	where SVKey_6 = SvKey
	and SCPId_6 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_6, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_6, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_6 = xAddCostIsCommission,
			AddCostNoCommission_6 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  6 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  7 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_7 = ScpId
	where SVKey_7 = SvKey
	and SCPId_7 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_7, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_7, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_7 = xAddCostIsCommission,
			AddCostNoCommission_7 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  7 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  8 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_8 = ScpId
	where SVKey_8 = SvKey
	and SCPId_8 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_8, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_8, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_8 = xAddCostIsCommission,
			AddCostNoCommission_8 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  8 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  9 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_9 = ScpId
	where SVKey_9 = SvKey
	and SCPId_9 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_9, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_9, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_9 = xAddCostIsCommission,
			AddCostNoCommission_9 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  9 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  10 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_10 = ScpId
	where SVKey_10 = SvKey
	and SCPId_10 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_10, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_10, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_10 = xAddCostIsCommission,
			AddCostNoCommission_10 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  10 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  11 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_11 = ScpId
	where SVKey_11 = SvKey
	and SCPId_11 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_11, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_11, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_11 = xAddCostIsCommission,
			AddCostNoCommission_11 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  11 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  12 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_12 = ScpId
	where SVKey_12 = SvKey
	and SCPId_12 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_12, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_12, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_12 = xAddCostIsCommission,
			AddCostNoCommission_12 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  12 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  13 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_13 = ScpId
	where SVKey_13 = SvKey
	and SCPId_13 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_13, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_13, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_13 = xAddCostIsCommission,
			AddCostNoCommission_13 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  13 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  14 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_14 = ScpId
	where SVKey_14 = SvKey
	and SCPId_14 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_14, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_14, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_14 = xAddCostIsCommission,
			AddCostNoCommission_14 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  14 картеж  %%%%%%%%%%%%%%
	-- %%%%%%%%%%%  15 картеж  %%%%%%%%%%%%%%
	insert into #tablePCId (xPCId, xAddCostIsCommission, xAddCostNoCommission)
	select PC_Id, AddCostIsCommission, AddCostNoCommission
	from TP_PriceComponents with(nolock) join @result on SCPId_15 = ScpId
	where SVKey_15 = SvKey
	and SCPId_15 is not null
	and PC_TRKey = TrKey
	and (isnull(AddCostIsCommission_15, -100500) != isnull(AddCostIsCommission, -100500)
		or isnull(AddCostNoCommission_15, -100500) != isnull(AddCostNoCommission, -100500))
	option(maxdop 10)
		
	if (exists (select top 1 1 from #tablePCId))
	begin
		update TP_PriceComponents with(rowlock)
		set	PC_DateLastChangeAddCost = @currentDate,
			PC_UpdateDate = @currentDate,
			AddCostIsCommission_15 = xAddCostIsCommission,
			AddCostNoCommission_15 = xAddCostNoCommission,
			PC_State = 1
		from TP_PriceComponents join #tablePCId on PC_Id = xPCId
		option(maxdop 10)
		
		truncate table #tablePCId
	end
	-- %%%%%%%%%%%  15 картеж  %%%%%%%%%%%%%%
	
end
go

grant exec on [dbo].[UpdateTpPriceComponentsFromAddCostsResult] to public
go

/*********************************************************************/
/* end sp_UpdateTpPriceComponentsFromAddCostsResult.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfCheckQuotaCycle.sql */
/*********************************************************************/
if exists (select top 1 1 from [dbo].[sysobjects] where id = object_id(N'[dbo].[WcfCheckQuotaCycle]') and objectProperty(id, N'IsProcedure') = 1)
    drop procedure [dbo].[WcfCheckQuotaCycle]
GO

--<VERSION>9.2.18.1</VERSION>
--<DATE>2013-03-06</DATE>
create procedure [dbo].[WcfCheckQuotaCycle] (
	@input varchar(1800),
	@review int output
) as
begin 
   -- 1. Execute service  
   create table #output (id int identity(1,1), string nvarchar(255) null)
   declare @commandLine varchar(2000), @path varchar(2000);
   select @path = SS_ParmValue from SystemSettings where SS_ParmName = 'PathToWcfClient'
   set @commandLine = @path + ' CheckQuotaCycle'
   set @commandLine = @commandLine + ' "' + @input + '"'
   --print @commandLine
   insert #output (string) exec xp_cmdshell @commandLine
   
   -- 2. Deserialize string to table
   declare @outputString nvarchar(max); set @outputString = '';
   select @outputString = @outputString + isnull(string,'') from #output

   set @review= convert(int, substring(@outputString,0, PATINDEX('%|%',@outputString)));
   
   set @outputString = substring(@outputString, PATINDEX('%|%',@outputString), len(@outputString));

   declare @xml xml; set @xml = @outputString;
   
   select
	line.value('Key[1]', 'int') [Key],  
	line.value('PriceKey[1]', 'int') PriceKey,
	line.value('HotelQuota[1]', 'int') HotelQuota,
	line.value('DirectFlights[1]', 'int') DirectFlights,
	line.value('BackFlights[1]', 'int') BackFlights,
	line.value('CharterKey[1]', 'int') CharterKey,
	line.value('CharterBackKey[1]', 'int') CharterBackKey,
	line.value('PriceCorrection[1]', 'int') PriceCorrection,
	line.value('Hotels[1]', 'int') Hotels,
	line.value('SmartSearch[1]', 'int') SmartSearch	
   from @xml.nodes('//row') as node(line) 
   
   drop table #output
end
go

grant exec on [dbo].[WcfCheckQuotaCycle] to public
go
/*********************************************************************/
/* end sp_WcfCheckQuotaCycle.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfReCalculateAddCostsByCount.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WcfReCalculateAddCostsByCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WcfReCalculateAddCostsByCount]
GO

CREATE PROCEDURE [dbo].[WcfReCalculateAddCostsByCount]
		--<VERSION>11.1.2</VERSION>
	    --<DATA>2013.03.22</DATA>
	    (
			@addCostsCount int
	    )
AS
BEGIN
	declare @commandLine varchar(2000), @path varchar(2000)
	
	select @path = SS_ParmValue from SystemSettings where SS_ParmName = 'PathToWcfClient'
	
	set @commandLine = @path + ' ReCalculateAddCosts'
	
	set @commandLine = @commandLine + ' ' + convert(varchar, @addCostsCount)

	exec xp_cmdshell @commandLine
END

GO
grant exec on [dbo].[WcfReCalculateAddCostsByCount] to public
go

/*********************************************************************/
/* end sp_WcfReCalculateAddCostsByCount.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfReCalculateCostsByServiceKey.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WcfReCalculateCostsByServiceKey]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WcfReCalculateCostsByServiceKey]
GO

CREATE PROCEDURE [dbo].[WcfReCalculateCostsByServiceKey]
	--<VERSION>11.1.2</VERSION>
	--<DATA>2013.03.29</DATA>
    (
	   @costsCount INT, 
	   @serviceKeys NVARCHAR(100)
    )
AS
BEGIN
	DECLARE @commandLine VARCHAR(2000), @path VARCHAR(2000)
	
	SELECT @path = SS_ParmValue FROM SystemSettings WHERE SS_ParmName = 'PathToWcfClient'
	
	SET @commandLine = @path + ' ReCalculateCostsByServiceKey'
	SET @commandLine = @commandLine + ' ' + CONVERT(VARCHAR, @costsCount)
	SET @commandLine = @commandLine + ' ' + @serviceKeys + ''
	
	EXEC xp_cmdshell @commandLine
END
GO

GRANT EXEC ON [dbo].[WcfReCalculateCostsByServiceKey] TO PUBLIC
GO
/*********************************************************************/
/* end sp_WcfReCalculateCostsByServiceKey.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WcfReCalculateNextCostsByCount.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[WcfReCalculateNextCostsByCount]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[WcfReCalculateNextCostsByCount]
GO

CREATE PROCEDURE [dbo].[WcfReCalculateNextCostsByCount]
		--<VERSION>11.1.2</VERSION>
	    --<DATA>2013.02.28</DATA>
	    (
			@costCount int
	    )
AS
BEGIN
	declare @commandLine varchar(2000), @path varchar(2000)
	
	select @path = SS_ParmValue from SystemSettings where SS_ParmName = 'PathToWcfClient'
	
	set @commandLine = @path + ' ReCalculateNextCosts'
	
	set @commandLine = @commandLine + ' ' + convert(varchar, @costCount)
	
	exec xp_cmdshell @commandLine
END

GO
grant exec on [dbo].[WcfReCalculateNextCostsByCount] to public
go
/*********************************************************************/
/* end sp_WcfReCalculateNextCostsByCount.sql */
/*********************************************************************/

/*********************************************************************/
/* begin sp_WriteToSystemLog.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[WriteToSystemLog]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	drop procedure [dbo].[WriteToSystemLog]
GO

CREATE PROCEDURE WriteToSystemLog
	--<VERSION>9.2</VERSION>
	--<DATA>2013.04.15</DATA>
	@logType INT,
	@message VARCHAR(MAX),
	@appType INT = 1
AS
BEGIN
	
		INSERT INTO SystemLog (SL_Type, SL_Date, SL_Message, SL_AppID)
		VALUES (@logType, getdate(), @message, @appType)
		
END

GO
/*********************************************************************/
/* end sp_WriteToSystemLog.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_DogovorUpdate.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[T_DogovorUpdate]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
drop trigger [dbo].[T_DogovorUpdate]
GO

CREATE TRIGGER [T_DogovorUpdate]
ON [dbo].[tbl_Dogovor] 
FOR UPDATE, INSERT, DELETE
AS
--<VERSION>2009.2.17.2</VERSION>
--<DATE>2012-12-10</DATE>
IF @@ROWCOUNT > 0
BEGIN
    DECLARE @ODG_Code		varchar(10)
    DECLARE @ODG_Price		float
    DECLARE @ODG_Rate		varchar(3)
    DECLARE @ODG_DiscountSum	float
    DECLARE @ODG_PartnerKey		int
    DECLARE @ODG_TRKey		int
    DECLARE @ODG_TurDate		varchar(10)
    DECLARE @ODG_CTKEY		int
    DECLARE @ODG_NMEN		int
    DECLARE @ODG_NDAY		int
    DECLARE @ODG_PPaymentDate	varchar(16)
    DECLARE @ODG_PaymentDate	varchar(10)
    DECLARE @ODG_RazmerP		float
    DECLARE @ODG_Procent		int
    DECLARE @ODG_Locked		int
    DECLARE @ODG_SOR_Code	int
    DECLARE @ODG_IsOutDoc		int
    DECLARE @ODG_VisaDate		varchar(10)
    DECLARE @ODG_CauseDisc		int
    DECLARE @ODG_OWNER		int
    DECLARE @ODG_LEADDEPARTMENT	int
    DECLARE @ODG_DupUserKey	int
    DECLARE @ODG_MainMen		varchar(50)
    DECLARE @ODG_MainMenEMail	varchar(50)
    DECLARE @ODG_MAINMENPHONE	varchar(50)
    DECLARE @ODG_CodePartner	varchar(50)
    DECLARE @ODG_Creator		int
	DECLARE @ODG_CTDepartureKey int
	DECLARE @ODG_Payed money
	DECLARE @ODG_ProTourFlag int
	DECLARE @NDG_ProTourFlag int
    
    DECLARE @NDG_Code		varchar(10)
    DECLARE @NDG_Price		float
    DECLARE @NDG_Rate		varchar(3)
    DECLARE @NDG_DiscountSum	float
    DECLARE @NDG_PartnerKey		int
    DECLARE @NDG_TRKey		int
    DECLARE @NDG_TurDate		varchar(10)
    DECLARE @NDG_CTKEY		int
    DECLARE @NDG_NMEN		int
    DECLARE @NDG_NDAY		int
    DECLARE @NDG_PPaymentDate	varchar(16)
    DECLARE @NDG_PaymentDate	varchar(10)
    DECLARE @NDG_RazmerP		float
    DECLARE @NDG_Procent		int
    DECLARE @NDG_Locked		int
    DECLARE @NDG_SOR_Code	int
    DECLARE @NDG_IsOutDoc		int
    DECLARE @NDG_VisaDate		varchar(10)
    DECLARE @NDG_CauseDisc		int
    DECLARE @NDG_OWNER		int
    DECLARE @NDG_LEADDEPARTMENT	int
    DECLARE @NDG_DupUserKey	int
    DECLARE @NDG_MainMen		varchar(50)
    DECLARE @NDG_MainMenEMail	varchar(50)
    DECLARE @NDG_MAINMENPHONE	varchar(50)
    DECLARE @NDG_CodePartner	varchar(50)
	DECLARE @NDG_Creator		int
	DECLARE @NDG_CTDepartureKey int
	DECLARE @NDG_Payed money

    DECLARE @sText_Old varchar(255)
    DECLARE @sText_New varchar(255)

    DECLARE @nValue_Old int
    DECLARE @nValue_New int

    DECLARE @DG_Key int
    
    DECLARE @sMod varchar(3)
    DECLARE @nDelCount int
    DECLARE @nInsCount int
    DECLARE @nHIID int
    DECLARE @sHI_Text varchar(254)
	DECLARE @bNeedCommunicationUpdate smallint

	DECLARE @bUpdateNationalCurrencyPrice bit

	DECLARE  @sUpdateMainDogovorStatuses varchar(254)
	
	DECLARE @nReservationNationalCurrencyRate smallint
	DECLARE @bReservationCreated smallint
	DECLARE @bCurrencyChangedPrevFixDate smallint
	DECLARE @bCurrencyChangedDate smallint
	DECLARE @bPriceChanged smallint
	DECLARE @bFeeChanged smallint
	DECLARE @bStatusChanged smallint
	DECLARE @changedDate datetime
	
    SELECT @nReservationNationalCurrencyRate = SS_PARMVALUE 
      FROM SystemSettings 
     WHERE SS_PARMNAME LIKE 'SYSReservationNCRate'
    SET @bReservationCreated = @nReservationNationalCurrencyRate & 1
    SET @bCurrencyChangedPrevFixDate = @nReservationNationalCurrencyRate & 2
    SET @bCurrencyChangedDate = @nReservationNationalCurrencyRate & 4
    SET @bPriceChanged = @nReservationNationalCurrencyRate & 8
    SET @bFeeChanged = @nReservationNationalCurrencyRate & 16
    SET @bStatusChanged = @nReservationNationalCurrencyRate & 32
	SET @changedDate = getdate()

  SELECT @nDelCount = COUNT(*) FROM DELETED
  SELECT @nInsCount = COUNT(*) FROM INSERTED
  IF (@nDelCount = 0)
  BEGIN
	SET @sMod = 'INS'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key, 
		N.DG_Code, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108), CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc, CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed, N.DG_ProTourFlag
      FROM INSERTED N 
  END
  ELSE IF (@nInsCount = 0)
  BEGIN
	SET @sMod = 'DEL'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT O.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed, O.DG_ProTourFlag,
		null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null
      FROM DELETED O 
  END
ELSE 
  BEGIN
  	SET @sMod = 'UPD'
    DECLARE cur_Dogovor CURSOR LOCAL FOR 
      SELECT N.DG_Key,
		O.DG_Code, O.DG_Price, O.DG_Rate, O.DG_DiscountSum, O.DG_PartnerKey, O.DG_TRKey, CONVERT( char(10), O.DG_TurDate, 104), O.DG_CTKEY, O.DG_NMEN, O.DG_NDAY, 
		CONVERT( char(11), O.DG_PPaymentDate, 104) + CONVERT( char(5), O.DG_PPaymentDate, 108), CONVERT( char(10), O.DG_PaymentDate, 104), O.DG_RazmerP, O.DG_Procent, O.DG_Locked, O.DG_SOR_Code, O.DG_IsOutDoc, CONVERT( char(10), O.DG_VisaDate, 104), O.DG_CauseDisc, O.DG_OWNER, 
		O.DG_LEADDEPARTMENT, O.DG_DupUserKey, O.DG_MainMen, O.DG_MainMenEMail, O.DG_MAINMENPHONE, O.DG_CodePartner, O.DG_Creator, O.DG_CTDepartureKey, O.DG_Payed, O.DG_ProTourFlag,
		N.DG_Code, N.DG_Price, N.DG_Rate, N.DG_DiscountSum, N.DG_PartnerKey, N.DG_TRKey, CONVERT( char(10), N.DG_TurDate, 104), N.DG_CTKEY, N.DG_NMEN, N.DG_NDAY, 
		CONVERT( char(11), N.DG_PPaymentDate, 104) + CONVERT( char(5), N.DG_PPaymentDate, 108),  CONVERT( char(10), N.DG_PaymentDate, 104), N.DG_RazmerP, N.DG_Procent, N.DG_Locked, N.DG_SOR_Code, N.DG_IsOutDoc,  CONVERT( char(10), N.DG_VisaDate, 104), N.DG_CauseDisc, N.DG_OWNER, 
		N.DG_LEADDEPARTMENT, N.DG_DupUserKey, N.DG_MainMen, N.DG_MainMenEMail, N.DG_MAINMENPHONE, N.DG_CodePartner, N.DG_Creator, N.DG_CTDepartureKey, N.DG_Payed, N.DG_ProTourFlag
      FROM DELETED O, INSERTED N 
      WHERE N.DG_Key = O.DG_Key
  END
  
    OPEN cur_Dogovor
    FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed, @ODG_ProTourFlag,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed, @NDG_ProTourFlag

    WHILE @@FETCH_STATUS = 0
    BEGIN 
    	  ------------Проверка, надо ли что-то писать в историю-------------------------------------------   
	  If (
			ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, '') OR
			ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, '') OR
			ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, '') OR
			ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, '') OR
			ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, '') OR
			ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0) OR
			ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0) OR
			ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0) OR
			ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0) OR
			ISNULL(@ODG_TurDate, 0) != ISNULL(@NDG_TurDate, 0) OR
			ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0) OR
			ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0) OR
			ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0) OR
			ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0) OR
			ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0) OR
			ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0) OR
			ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0) OR
			ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0) OR
			ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0) OR
			ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0) OR
			ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0) OR
			ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0) OR
			ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0) OR
			ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LEADDEPARTMENT, 0) OR
			ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0) OR
			ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, '') OR
			ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0) OR
			ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0) OR
			ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0)OR
			ISNULL(@ODG_ProTourFlag, 0) != ISNULL(@NDG_ProTourFlag, 0)
		)
	  BEGIN
	  	------------Запись в историю--------------------------------------------------------------------
		EXEC dbo.InsMasterEvent 4, @DG_Key

		if (@sMod = 'INS')
			SET @sHI_Text = ISNULL(@NDG_Code, '')
		else if (@sMod = 'DEL')
			SET @sHI_Text = ISNULL(@ODG_Code, '')
		else if (@sMod = 'UPD')
			SET @sHI_Text = ISNULL(@NDG_Code, '')

		EXEC @nHIID = dbo.InsHistory @sHI_Text, @DG_Key, 1, @DG_Key, @sMod, @sHI_Text, '', 0, ''
		--SELECT @nHIID = IDENT_CURRENT('History')
		IF(@sMod = 'INS')
		BEGIN
			DECLARE @PrivatePerson int;
			EXEC @PrivatePerson = [dbo].[CheckPrivatePerson] @NDG_code;
			IF(@PrivatePerson = 0)
				IF(ISNULL(@NDG_DUPUSERKEY,-1) >= 0)
					EXEC [dbo].[UpdateReservationMainManByPartnerUser] @NDG_code;
		END
		--------Детализация--------------------------------------------------
		if (ISNULL(@ODG_Code, '') != ISNULL(@NDG_Code, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1001, @ODG_Code, @NDG_Code, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Rate, '') != ISNULL(@NDG_Rate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1002, @ODG_Rate, @NDG_Rate, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF @bCurrencyChangedPrevFixDate > 0 OR @bCurrencyChangedDate > 0
					SET @bUpdateNationalCurrencyPrice = 1
				IF @bCurrencyChangedPrevFixDate > 0
					select @changedDate = MAX(HI_DATE) from history where HI_OAID = 20 and hi_dgcod = @ODG_CODE
			END
		if (ISNULL(@ODG_MainMen, '') != ISNULL(@NDG_MainMen, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1003, @ODG_MainMen, @NDG_MainMen, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MainMenEMail, '') != ISNULL(@NDG_MainMenEMail, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1004, @ODG_MainMenEMail, @NDG_MainMenEMail, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_MAINMENPHONE, '') != ISNULL(@NDG_MAINMENPHONE, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1005, @ODG_MAINMENPHONE, @NDG_MAINMENPHONE, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Price, 0) != ISNULL(@NDG_Price, 0))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1006, @ODG_Price, @NDG_Price, null, null, null, null, 0, @bNeedCommunicationUpdate output
				IF @bPriceChanged > 0
					SET @bUpdateNationalCurrencyPrice = 1
			END
		if (ISNULL(@ODG_DiscountSum, 0) != ISNULL(@NDG_DiscountSum, 0))
		BEGIN
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1007, @ODG_DiscountSum, @NDG_DiscountSum, null, null, null, null, 0, @bNeedCommunicationUpdate output
			IF @bFeeChanged > 0 
				SET @bUpdateNationalCurrencyPrice = 1
		END
		if (ISNULL(@ODG_PartnerKey, 0) != ISNULL(@NDG_PartnerKey, 0))
			BEGIN
				Select @sText_Old = PR_Name from Partners where PR_Key = @ODG_PartnerKey
				Select @sText_New = PR_Name from Partners where PR_Key = @NDG_PartnerKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1008, @sText_Old, @sText_New, @ODG_PartnerKey, @NDG_PartnerKey, null, null, 0, @bNeedCommunicationUpdate output
				UPDATE DogovorList 
				   SET DL_AGENT = @NDG_PartnerKey
				 WHERE DL_DGKEY = @DG_Key;
			END
		if (ISNULL(@ODG_TRKey, 0) != ISNULL(@NDG_TRKey, 0))
			BEGIN
				Select @sText_Old = TL_Name from Turlist where TL_Key = @ODG_TRKey
				Select @sText_New = TL_Name from Turlist where TL_Key = @NDG_TRKey
				If @NDG_TRKey is not null
					Update DogovorList set DL_TRKey=@NDG_TRKey where DL_DGKey=@DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1009, @sText_Old, @sText_New, @ODG_TRKey, @NDG_TRKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_TurDate, '') != ISNULL(@NDG_TurDate, ''))
			BEGIN
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1010, @ODG_TurDate, @NDG_TurDate, null, null, null, null, 0, @bNeedCommunicationUpdate output

				Update DogovorList set DL_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where DL_DGKey = @DG_Key
				Update tbl_Turist set TU_TURDATE = CONVERT(datetime, @NDG_TurDate, 104) where TU_DGKey = @DG_Key

				--Путевка разаннулируется
				IF (ISNULL(@ODG_SOR_Code, 0) = 2)
				BEGIN
					DECLARE @nDGSorCode_New int, @sDisableDogovorStatusChange int

					SELECT @sDisableDogovorStatusChange = SS_ParmValue FROM SystemSettings WHERE SS_ParmName like 'SYSDisDogovorStatusChange'
					IF (@sDisableDogovorStatusChange is null or @sDisableDogovorStatusChange = '0')
					BEGIN
						exec dbo.SetReservationStatus @DG_Key
					END
				END
			END
		if (ISNULL(@ODG_CTKEY, 0) != ISNULL(@NDG_CTKEY, 0))
			BEGIN
				Select @sText_Old = CT_Name from CityDictionary  where CT_Key = @ODG_CTKEY
				Select @sText_New = CT_Name from CityDictionary  where CT_Key = @NDG_CTKEY
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1011, @sText_Old, @sText_New, @ODG_CTKEY, @NDG_CTKEY, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_NMEN, 0) != ISNULL(@NDG_NMEN, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1012, @ODG_NMEN, @NDG_NMEN, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_NDAY, 0) != ISNULL(@NDG_NDAY, 0))
		begin
			-- если изменилась продолжительность путевки, то нужно пересадить все услуги которые сидят на квотах 
			-- на продолжительность и сами не имеют продолжительности
			declare @DLKey int, @DLDateBeg datetime, @DLDateEnd datetime
			
			declare curSetQuoted CURSOR FORWARD_ONLY for
						select DL_KEY, DL_DATEBEG, DL_DATEEND
						from Dogovorlist join [Service] on SV_KEY = DL_SVKEY
						where DL_DGKEY = @DG_Key
						and isnull(SV_IsDuration, 0) = 0
			OPEN curSetQuoted
			FETCH NEXT FROM curSetQuoted INTO @DLKey, @DLDateBeg, @DLDateEnd

			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- услуга сидит на квоте на продолжительность
				if (exists(select 1 from QuotaParts with(nolock) where LEN(ISNULL(QP_Durations, '')) > 0 and QP_ID in (select SD_QPID from ServiceByDate with(nolock) where SD_DLKey = @DLKey)))
					EXEC DogListToQuotas @DLKey, null, null, null, null, @DLDateBeg, @DLDateEnd, null, null
			
				FETCH NEXT FROM curSetQuoted INTO @DLKey, @DLDateBeg, @DLDateEnd
			end
			CLOSE curSetQuoted
			DEALLOCATE curSetQuoted
			
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1013, @ODG_NDAY, @NDG_NDAY, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end
		if (ISNULL(@ODG_PPaymentDate, 0) != ISNULL(@NDG_PPaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1014, @ODG_PPaymentDate, @NDG_PPaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_PaymentDate, 0) != ISNULL(@NDG_PaymentDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1015, @ODG_PaymentDate, @NDG_PaymentDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_RazmerP, 0) != ISNULL(@NDG_RazmerP, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1016, @ODG_RazmerP, @NDG_RazmerP, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Procent, 0) != ISNULL(@NDG_Procent, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1017, @ODG_Procent, @NDG_Procent, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_Locked, 0) != ISNULL(@NDG_Locked, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1018, @ODG_Locked, @NDG_Locked, null, null, null, null, 0, @bNeedCommunicationUpdate output
		
		--MEG00040358 вынесла запись истории из условия if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0)),
		-- так как условие на вставку в этом блоке никогда не срабатывало, потому что в новой путевке @NDG_SOR_Code всегда нул , а @ODG_SOR_Code всегда ноль
		------путевка была создана--------------
		if (ISNULL(@ODG_SOR_Code, 0) = 0 and @sMod = 'INS')
			EXECUTE dbo.InsertHistoryDetail @nHIID, 1122, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output

		
		if (ISNULL(@ODG_SOR_Code, 0) != ISNULL(@NDG_SOR_Code, 0))
			BEGIN
				Select @sText_Old = OS_Name_Rus, @nValue_Old = OS_Global from Order_Status Where OS_Code = @ODG_SOR_Code
				Select @sText_New = OS_Name_Rus, @nValue_New = OS_Global from Order_Status Where OS_Code = @NDG_SOR_Code
				If @nValue_New = 7 and @nValue_Old != 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = GetDate() WHERE DG_Key = @DG_Key
				If @nValue_New != 7 and @nValue_Old = 7
					UPDATE [dbo].[tbl_Dogovor] SET DG_ConfirmedDate = NULL WHERE DG_Key = @DG_Key
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1019, @sText_Old, @sText_New, @ODG_SOR_Code, @NDG_SOR_Code, null, null, 0, @bNeedCommunicationUpdate output
				
				------путевка была аннулирована--------------
				if (@NDG_SOR_Code = 2 and @sMod = 'UPD')
					EXECUTE dbo.InsertHistoryDetail @nHIID, 1123, null, null, null, null, null, null, 1, @bNeedCommunicationUpdate output
				
				if @bStatusChanged > 0 and exists(select NC_Id from NationalCurrencyReservationStatuses with(nolock) where NC_OrderStatus = ISNULL(@NDG_SOR_Code, 0))
				begin
					if (@bCurrencyChangedPrevFixDate > 0)
						set @changedDate = ISNULL(dbo.GetFirstDogovorStatusDate (@DG_Key, @NDG_SOR_Code), GetDate())
					
					SET @bUpdateNationalCurrencyPrice = 1
				end
			END
		if (ISNULL(@ODG_IsOutDoc, 0) != ISNULL(@NDG_IsOutDoc, 0))
			BEGIN
				Select @sText_Old = DS_Name from DocumentStatus Where DS_Key = @ODG_IsOutDoc
				Select @sText_New = DS_Name from DocumentStatus Where DS_Key = @NDG_IsOutDoc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1020, @sText_Old, @sText_New, @ODG_IsOutDoc, @NDG_IsOutDoc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_VisaDate, 0) != ISNULL(@NDG_VisaDate, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1021, @ODG_VisaDate, @NDG_VisaDate, null, null, null, null, 0, @bNeedCommunicationUpdate output
		if (ISNULL(@ODG_CauseDisc, 0) != ISNULL(@NDG_CauseDisc, 0))
			BEGIN
				Select @sText_Old = CD_Name from CauseDiscounts Where CD_Key = @ODG_CauseDisc
				Select @sText_New = CD_Name from CauseDiscounts Where CD_Key = @NDG_CauseDisc
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1022, @sText_Old, @sText_New, @ODG_CauseDisc, @NDG_CauseDisc, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_OWNER, 0) != ISNULL(@NDG_OWNER, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Owner
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Owner
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1023, @sText_Old, @sText_New, @ODG_Owner, @NDG_Owner, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_Creator, 0) != ISNULL(@NDG_Creator, 0))
			BEGIN
				Select @sText_Old = US_FullName from UserList Where US_Key = @ODG_Creator
				Select @sText_New = US_FullName from UserList Where US_Key = @NDG_Creator
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1117, @sText_Old, @sText_New, @ODG_Creator, @NDG_Creator, null, null, 0, @bNeedCommunicationUpdate output
				Select @nValue_Old = US_DepartmentKey from UserList Where US_Key = @ODG_Creator
				Select @nValue_New = US_DepartmentKey from UserList Where US_Key = @NDG_Creator
				if (@nValue_Old is not null OR @nValue_New is not null)
					EXECUTE dbo.InsertHistoryDetail @nHIID , 1134, @nValue_Old, @nValue_New, null, null, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_LEADDEPARTMENT, 0) != ISNULL(@NDG_LeadDepartment, 0))
			BEGIN
				Select @sText_Old = PDP_Name from PrtDeps where PDP_Key = @ODG_LeadDepartment
				Select @sText_New = PDP_Name from PrtDeps where PDP_Key = @NDG_LeadDepartment
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1024, @sText_Old, @sText_New, @ODG_LeadDepartment, @NDG_LeadDepartment, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_DupUserKey, 0) != ISNULL(@NDG_DupUserKey, 0))
			BEGIN
				Select @sText_Old = US_FullName FROM Dup_User WHERE US_Key = @ODG_DupUserKey
				Select @sText_New = US_FullName FROM Dup_User WHERE US_Key = @NDG_DupUserKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1025, @sText_Old, @sText_New, @ODG_DupUserKey, @NDG_DupUserKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CTDepartureKey, 0) != ISNULL(@NDG_CTDepartureKey, 0))
			BEGIN
				Select @sText_Old = CT_Name FROM CityDictionary WHERE CT_Key = @ODG_CTDepartureKey
				Select @sText_New = CT_Name FROM CityDictionary WHERE CT_Key = @NDG_CTDepartureKey
				EXECUTE dbo.InsertHistoryDetail @nHIID , 1121, @sText_Old, @sText_New, @ODG_CTDepartureKey, @NDG_CTDepartureKey, null, null, 0, @bNeedCommunicationUpdate output
			END
		if (ISNULL(@ODG_CodePartner, '') != ISNULL(@NDG_CodePartner, ''))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 1026, @ODG_CodePartner, @NDG_CodePartner, null, null, null, null, 0, @bNeedCommunicationUpdate output

		if (ISNULL(@ODG_Payed, 0) != ISNULL(@NDG_Payed, 0))
		begin
			declare @varcharODGPayed varchar(255), @varcharNDGPayed varchar(255)
			set @varcharODGPayed = cast(@ODG_Payed as varchar(255))
			set @varcharNDGPayed = cast(@NDG_Payed as varchar(255))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 5, @varcharODGPayed, @varcharNDGPayed, null, null, null, null, 0, @bNeedCommunicationUpdate output
		end
		IF (ISNULL(@ODG_ProTourFlag, 0) != ISNULL(@NDG_ProTourFlag, 0))
			EXECUTE dbo.InsertHistoryDetail @nHIID , 399999, @ODG_ProTourFlag, @NDG_ProTourFlag, null, null, null, null, 0, @bNeedCommunicationUpdate output

		If @bNeedCommunicationUpdate=1
			If exists (SELECT 1 FROM Communications WHERE CM_DGKey=@DG_Key)
				UPDATE Communications SET CM_ChangeDate=GetDate() WHERE CM_DGKey=@DG_Key

		
		-- $$$ PRICE RECALCULATION $$$ --
		IF (@bUpdateNationalCurrencyPrice = 1 AND @sMod = 'UPD') OR (@sMod = 'INS' AND @bReservationCreated > 0)
		BEGIN
			--если не удалось определить дату, на которую рассчитывается и стоит настройка брать жату создания путевки, то ее и берем
			if @changedDate is null and @bReservationCreated > 0				
				select @changedDate = DG_CrDate from inserted i where i.dg_key = @DG_Key				   
				
			EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code
		END
	  END

		-- recalculate if exchange rate changes (another table) & saving from frmDogovor (tour.apl)
		-- + force-drop #RecalculateAction table in case hasn't been
		/*IF OBJECT_ID('tempdb..#RecalculateAction') IS NOT NULL
		BEGIN
            DECLARE @AlwaysRecalcPrice int 
            SELECT  @AlwaysRecalcPrice = isnull(SS_ParmValue,0) FROM dbo.systemsettings  
            WHERE SS_ParmName = 'SYSAlwaysRecalcNational' 

			SELECT @DGCODE  = [DGCODE] FROM #RecalculateAction
			if @DGCODE = @NDG_Code
			begin
				SELECT @sAction = [Action] FROM #RecalculateAction
				DROP TABLE #RecalculateAction
				if @AlwaysRecalcPrice > 0
					EXEC dbo.NationalCurrencyPrice @ODG_Rate, @NDG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @sAction, @NDG_SOR_Code
		    end
		END*/
		-- $$$ ------------------- $$$ --

        -- Task 7613. rozin. 27.08.2012. Добавление Предупреждений и Комментариев (таблица PrtWarns) по партнеру в историю при создании путевки
		IF(@sMod = 'INS')
		BEGIN
			DECLARE @warningTextPattern varchar(128)        
			DECLARE @warningText varchar(256)       
			DECLARE @warningType varchar(256)       
			DECLARE @warningMessage varchar(256) 
			DECLARE @partnerName varchar(256)
			DECLARE cur_PrtWarns CURSOR LOCAL FOR
				SELECT PW_Text, PW_Type
				FROM PrtWarns 
				WHERE PW_PRKey = @NDG_PartnerKey AND PW_IsAddToHistory = 1
	        
			SET @warningTextPattern = 'Прошу обратить внимание, что по заявке [1] у партнера [2] имеется [3]: [4]'
	        
			OPEN cur_PrtWarns
			FETCH NEXT FROM cur_PrtWarns INTO @warningText, @warningType
	        
			WHILE @@FETCH_STATUS = 0
			BEGIN 		
				SET @warningMessage = REPLACE(@warningTextPattern, '[1]', @NDG_Code)
				
				select @partnerName = pr_name from tbl_Partners where pr_key = @NDG_PartnerKey
				SET @warningMessage = REPLACE(@warningMessage, '[2]', @partnerName)
				
				IF (@warningType = 2)
					SET @warningMessage = REPLACE(@warningMessage, '[3]', 'предупреждение')
				ELSE IF (@warningType = 3)
					SET @warningMessage = REPLACE(@warningMessage, '[3]', 'комментарий')
				ELSE
					SET @warningMessage = REPLACE(@warningMessage, '[3]', '') -- таких сутуаций быть не должно
				
				SET @warningMessage = REPLACE(@warningMessage, '[4]', @warningText)
				
				EXEC dbo.InsHistory @NDG_Code, @DG_Key, NULL, NULL, 'MTM', @warningMessage, '', 0, '', 1
				FETCH NEXT FROM cur_PrtWarns INTO @warningText, @warningType
			END
	        
			CLOSE cur_PrtWarns
			DEALLOCATE cur_PrtWarns
		END
        -- END Task 7613
       
        DECLARE @DG_NATIONALCURRENCYPRICE int
	    DECLARE @DG_NATIONALCURRENCYDISCOUNTSUM int
		SET @DG_NATIONALCURRENCYPRICE = NULL
		SET @DG_NATIONALCURRENCYDISCOUNTSUM = NULL

		SELECT @DG_NATIONALCURRENCYPRICE = DG_NATIONALCURRENCYPRICE, @DG_NATIONALCURRENCYDISCOUNTSUM = DG_NATIONALCURRENCYDISCOUNTSUM FROM DOGOVOR 
		WHERE DG_KEY=@DG_Key
		 --Task 12886 04/04/2013 o.omelchenko - если идет инсерт и нац валюта не просчиталась, то считаем её на текущую дату
        if(@sMod = 'INS' and (@DG_NATIONALCURRENCYPRICE IS NULL OR @DG_NATIONALCURRENCYDISCOUNTSUM  IS NULL))
        BEGIN
            SET @changedDate = GETDATE()
            EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code, 0 
        END
		-- Task 10558 tfs neupokoev 26.12.2012
		-- Повторная фиксация курса валюты, в случае если он не зафиксировался
		IF(@sMod = 'UPD')
			BEGIN			

				IF(@DG_NATIONALCURRENCYPRICE IS NULL OR @DG_NATIONALCURRENCYDISCOUNTSUM  IS NULL)
					BEGIN
						EXEC dbo.ReСalculateNationalRatePrice @DG_KEY, @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @NDG_SOR_Code
					END 
					
			    -- Если нету фиксации, то перерасчитываем на текущую дату
				IF not exists(select * from History where HI_DGKEY =@DG_KEY and (HI_OAId = 20 or HI_OAId = 21))
				BEGIN					     
					  EXEC dbo.NationalCurrencyPrice2 @NDG_Rate, @ODG_Rate, @ODG_Code, @NDG_Price, @ODG_Price, @NDG_DiscountSum, @changedDate, @NDG_SOR_Code, 0            
				END 
			END
		-- end Task 10558
        
    	  FETCH NEXT FROM cur_Dogovor INTO @DG_Key,
		@ODG_Code, @ODG_Price, @ODG_Rate, @ODG_DiscountSum, @ODG_PartnerKey, @ODG_TRKey, @ODG_TurDate, @ODG_CTKEY, @ODG_NMEN, @ODG_NDAY, 
		@ODG_PPaymentDate, @ODG_PaymentDate, @ODG_RazmerP, @ODG_Procent, @ODG_Locked, @ODG_SOR_Code, @ODG_IsOutDoc, @ODG_VisaDate, @ODG_CauseDisc, @ODG_OWNER, 
		@ODG_LEADDEPARTMENT, @ODG_DupUserKey, @ODG_MainMen, @ODG_MainMenEMail, @ODG_MAINMENPHONE, @ODG_CodePartner, @ODG_Creator, @ODG_CTDepartureKey, @ODG_Payed, @ODG_ProTourFlag,
		@NDG_Code, @NDG_Price, @NDG_Rate, @NDG_DiscountSum, @NDG_PartnerKey, @NDG_TRKey, @NDG_TurDate, @NDG_CTKEY, @NDG_NMEN, @NDG_NDAY, 
		@NDG_PPaymentDate, @NDG_PaymentDate, @NDG_RazmerP, @NDG_Procent, @NDG_Locked, @NDG_SOR_Code, @NDG_IsOutDoc, @NDG_VisaDate, @NDG_CauseDisc, @NDG_OWNER, 
		@NDG_LEADDEPARTMENT, @NDG_DupUserKey, @NDG_MainMen, @NDG_MainMenEMail, @NDG_MAINMENPHONE, @NDG_CodePartner, @NDG_Creator, @NDG_CTDepartureKey, @NDG_Payed, @NDG_ProTourFlag
    END
  CLOSE cur_Dogovor
  DEALLOCATE cur_Dogovor
END
GO
/*********************************************************************/
/* end T_DogovorUpdate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_mwDeletePrice.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='TR' and name='mwDeletePrice')
	-- удаляю лишний триггер
	drop trigger dbo.mwDeletePrice
go
/*********************************************************************/
/* end T_mwDeletePrice.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_mwDeleteTour.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwDeleteTour]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	drop trigger [dbo].[mwDeleteTour]
GO

CREATE trigger [dbo].[mwDeleteTour] on [dbo].[TP_Tours]
for delete
as
begin

	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-10</DATE>

	if dbo.mwReplIsSubscriber() > 0
	begin
	
		declare @DirTable table(xrq_cnkey int, xrq_ctkeyfrom int)
	
		insert into mwReplQueue(rq_mode, rq_tokey, rq_cnkey, rq_ctkeyfrom)
		output inserted.rq_cnkey, inserted.rq_ctkeyfrom into @DirTable (xrq_cnkey, xrq_ctkeyfrom)
		select 4, to_key, TO_CNKey, TL_CTDepartureKey
		from deleted
		join tbl_TurList on TL_KEY = TO_TRKey
		
		insert into mwReplDirections (rd_cnkey, rd_ctkeyfrom)
		select xrq_cnkey, isnull(xrq_ctkeyfrom, 0)
		from @DirTable
		left join mwReplDirections with(nolock) on xrq_cnkey = rd_cnkey and isnull(xrq_ctkeyfrom, 0) = rd_ctkeyfrom
		where rd_id is null

	end
	else if dbo.mwReplIsPublisher() <= 0
	begin

		declare @tableName nvarchar(100), @sql nvarchar(4000), @tokey int, @cnKey int, @ctDepartureKey int
		if exists(select 1 from SystemSettings where SS_ParmName = 'MWDivideByCountry' and SS_ParmValue = 1)
		begin
			--Используется секционирование ценовых таблиц
			declare disableCursor cursor fast_forward read_only for
			select 
				to_key, dbo.mwGetPriceTableName(to_cnkey, tl_ctdeparturekey), to_cnkey, tl_ctdeparturekey
			from 
				deleted inner join tbl_turlist with(nolock) on to_trkey = tl_key

			open disableCursor
			fetch next from disableCursor into @tokey, @tableName, @cnKey, @ctDepartureKey
		
			while @@fetch_status = 0
			begin
				if(@tableName is not null and len(@tableName) > 0)
				begin
					set @sql = 'insert into mwDeleted with(rowlock) (del_key) select pt_pricekey from ' + @tableName + ' with(nolock) where pt_tourkey = ' + ltrim(str(@tokey)) + '
								update ' + @tableName + ' with(rowlock) set pt_isenabled = 0 where pt_isenabled > 0 and pt_tourkey = ' + ltrim(str(@tokey)) + '
								update mwSpoDataTable with(rowlock) set sd_isenabled = 0 where sd_isenabled > 0 and sd_tourkey = ' + ltrim(str(@tokey))
					exec (@sql)
				end

				delete from TP_Prices with(rowlock) where tp_tokey = @tokey
				delete from TP_ServiceLists with(rowlock) where tl_tokey = @tokey
				delete from TP_Services with(rowlock) where ts_tokey = @tokey
				delete from TP_Lists with(rowlock) where ti_tokey = @tokey

				fetch next from disableCursor into @tokey, @tableName, @cnKey, @ctDepartureKey
			end
		
			close disableCursor
			deallocate disableCursor
		end
		else
		begin
			--Секционирование ценовых таблиц НЕ используется
			set @tableName = 'dbo.mwPriceDataTable'
			declare disableCursor cursor fast_forward read_only for
			select 
				to_key
			from 
				deleted 

			open disableCursor
		
			fetch next from disableCursor into @tokey
			while @@fetch_status = 0
			begin
				if(@tableName is not null and len(@tableName) > 0)
				begin
					set @sql = 'insert into mwDeleted with(rowlock) (del_key) select pt_pricekey from ' + @tableName + ' with(nolock) where pt_tourkey = ' + ltrim(str(@tokey)) + '
								update ' + @tableName + ' with(rowlock) set pt_isenabled = 0 where pt_isenabled > 0 and pt_tourkey = ' + ltrim(str(@tokey)) + '
								update mwSpoDataTable with(rowlock) set sd_isenabled = 0 where sd_isenabled > 0 and sd_tourkey = ' + ltrim(str(@tokey))
					exec (@sql)
				end

				delete from TP_Prices with(rowlock) where tp_tokey = @tokey
				delete from TP_ServiceLists with(rowlock) where tl_tokey = @tokey
				delete from TP_Services with(rowlock) where ts_tokey = @tokey
				delete from TP_Lists with(rowlock) where ti_tokey = @tokey

				fetch next from disableCursor into @tokey
			end
		
			close disableCursor
			deallocate disableCursor
		end

	end

end
GO
/*********************************************************************/
/* end T_mwDeleteTour.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_mwInsertTour.sql */
/*********************************************************************/
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[mwInsertTour]') and OBJECTPROPERTY(id, N'IsTrigger') = 1)
	drop trigger [dbo].[mwInsertTour]
GO

CREATE trigger [dbo].[mwInsertTour] on [dbo].[mwReplTours] for insert
as
begin
	--<VERSION>2009.2.19</VERSION>
	--<DATE>2013-04-09</DATE>
	if dbo.mwReplIsSubscriber() > 0
	begin
		SELECT rt_tokey as trkey, RT_CalcKey as calcKey, rt_trkey as tlkey, rt_overwritePrices as overwritePrices, rt_updateOnlinePrices as updateOnlinePrices, TO_CNKey as cnkey, TL_CTDepartureKey as ctkeyfrom
		INTO #tmpKeys 
		FROM inserted
		join tbl_TurList on TL_KEY = rt_trkey
		join TP_Tours on TO_Key = rt_tokey

		declare replcur cursor fast_forward read_only for
		select trkey, calcKey, tlkey, overwritePrices, updateOnlinePrices, cnkey, ctkeyfrom from #tmpKeys

		declare @trkey int, @calcKey int, @tlkey int, @overwritePrices bit, @updateOnlinePrices smallint
		declare @cnKey int, @ctkeyfrom int

		open replcur

		fetch next from replcur into @trkey, @calcKey, @tlkey, @overwritePrices, @updateOnlinePrices, @cnKey, @ctkeyfrom
		while(@@fetch_status = 0)
		begin
			-- проверка: можно ли выставлять этот тур на этой базе
			-- MEG00040028. 09.02.2012. Golubinsky
			-- вынес проверку в функцию 
			if dbo.mwIsTourAllowedForPublish(@tlkey) = 1
			begin
				if (@calcKey = 0 or @calcKey is null)
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(1, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				else if (ISNULL(@updateOnlinePrices, 0) <> 2)
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(2, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				else
				begin
					insert into mwReplQueue(rq_mode, rq_tokey, RQ_CalculatingKey, RQ_OverwritePrices, rq_cnkey, rq_ctkeyfrom)
					values(6, @trkey, @calcKey, @overwritePrices, @cnKey, @ctkeyfrom)
				end
				
				if not exists(select 1 from mwReplDirections with(nolock) where rd_cnkey = @cnKey and rd_ctkeyfrom = @ctkeyfrom)
				begin
					insert into mwReplDirections (rd_cnkey, rd_ctkeyfrom)
					values(@cnKey, ISNULL(@ctkeyfrom, 0))
				end
			end
			fetch next from replcur into @trkey, @calcKey, @tlkey, @overwritePrices, @updateOnlinePrices, @cnKey, @ctkeyfrom
		end
		
		close replcur
		deallocate replcur	
	end
end
GO
/*********************************************************************/
/* end T_mwInsertTour.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_mwReplDeletePrice.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='TR' and name='mwReplDeletePrice')
	drop trigger dbo.mwReplDeletePrice

GO

create trigger [dbo].[mwReplDeletePrice] on [dbo].[TP_Prices]
for delete as
begin
	--<DATE>2013-04-03</DATE>
	--<VERSION>9.2.19</VERSION>
	
	if dbo.mwReplIsPublisher() > 0 or (dbo.mwReplIsPublisher() <= 0 and dbo.mwReplIsSubscriber() <= 0)
	begin
		if exists(select 1 from SystemSettings where SS_ParmName = 'MWDivideByCountry' and SS_ParmValue = 1)
		begin
			insert into dbo.mwReplDeletedPricesTemp with(rowlock) (rdp_pricekey, rdp_cnkey, rdp_ctdeparturekey) select tp_key, to_cnkey, tl_ctdeparturekey from deleted inner join 
						TP_Tours with(nolock) on TP_TOKey=TO_Key inner join
						tbl_TurList with(nolock) on TL_KEY = TO_TRKey;
		end
		else if dbo.mwReplIsPublisher() > 0 
		begin
			insert into dbo.mwReplDeletedPricesTemp with(rowlock) (rdp_pricekey) select tp_key from deleted
		end
	end
end


GO

/*********************************************************************/
/* end T_mwReplDeletePrice.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_ServicePriceActualDate.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_ServicePriceActualDate]'))
	DROP TRIGGER [dbo].[T_ServicePriceActualDate]
GO
--<date>2013-04-04</date>
--<version>9.2.19.1</version>
--<summary>Триггер добавляет цены на расчет в таблицу очереди	</summary>
CREATE trigger [dbo].[T_ServicePriceActualDate] on [dbo].[TP_ServicePriceActualDate] AFTER UPDATE
AS
if(EXISTS(SELECT * FROM inserted where SPAD_NeedApply = 1))
	begin
		declare @currentDateTime datetime
		set @currentDateTime = GETDATE()

		insert into QueuesForRecalculateCosts ([QRC_SPADId], [QRC_SCPId], [QRC_QueueDate], [QRC_CalcDate],  [QRC_OldGross], [QRC_OldNetto])
		SELECT SPAD_Id, SPAD_SCPId, @currentDateTime, SPAD_DateLastCalculate, SPAD_Gross, SPAD_Netto 
		FROM inserted 
		where SPAD_NeedApply = 1
		and not exists (select top 1 1 from QueuesForRecalculateCosts where QRC_SPADId = SPAD_Id)
	end
GO
/*********************************************************************/
/* end T_ServicePriceActualDate.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_TP_Tours_mwUpdatePriceTourEnabled.sql */
/*********************************************************************/
if exists(select id from sysobjects where xtype='TR' and name='mwUpdatePriceTourEnabled')
	drop trigger dbo.mwUpdatePriceTourEnabled
go

CREATE trigger [dbo].[mwUpdatePriceTourEnabled] on [dbo].[TP_Tours]
for update
as
begin
	--<VERSION>9.2.19</VERSION>
	--<DATE>2013-05-22</DATE>

	if @@rowcount > 0 and update(to_isenabled)
	begin

		if dbo.mwReplIsSubscriber() > 0
		begin
			select i.to_key as xrq_tokey, i.TO_TRKey as xrq_trkey, i.TO_CNKey as xrq_cnkey
			into #mwReplQueue
			from inserted i 
			inner join deleted d on i.to_key = d.to_key
			where i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0
			
			declare @DirTable table(xrq_cnkey int, xrq_ctkeyfrom int)
			
			insert into mwReplQueue(rq_mode, rq_tokey, rq_cnkey, rq_ctkeyfrom)
			output inserted.rq_cnkey, inserted.rq_ctkeyfrom into @DirTable (xrq_cnkey, xrq_ctkeyfrom)
			select 3, xrq_tokey, xrq_cnkey, TL_CTDepartureKey
			from #mwReplQueue
			join tbl_TurList on TL_KEY = xrq_trkey
			
			insert into mwReplDirections (rd_cnkey, rd_ctkeyfrom)
			select xrq_cnkey, isnull(xrq_ctkeyfrom, 0)
			from @DirTable
			left join mwReplDirections with(nolock) on xrq_cnkey = rd_cnkey and isnull(xrq_ctkeyfrom, 0) = rd_ctkeyfrom
			where rd_id is null
			
		end
		else if dbo.mwReplIsPublisher() <= 0
		begin

			declare @mwSearchType int
			select @mwSearchType = ltrim(rtrim(isnull(SS_ParmValue, ''))) from dbo.systemsettings 
				where SS_ParmName = 'MWDivideByCountry'

			if @mwSearchType = 0
			begin
				update mwPriceDataTable with (rowlock)
				set pt_isenabled = 0
				from inserted i inner join deleted d on i.to_key = d.to_key			
				where pt_tourkey = i.to_key
					and i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0
			end
			else
			begin
				declare @tableName varchar(100), @tokey int, @cnkey int, @ctkey int
				declare @sql varchar(8000)

				create table #tmpPriceTours(
					to_key int
				)
				create index x_tokey on #tmpPriceTours(to_key)

				insert into #tmpPriceTours
				select i.to_key
				from inserted i inner join deleted d on i.to_key = d.to_key
				where i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0

				declare tblCursor cursor fast_forward read_only for 
				select 
					to_key, 
					to_cnkey, 
					tl_ctdeparturekey
				from 
					tp_tours tt with(nolock)
					inner join tbl_TurList with(nolock) on to_trkey = tl_key
				where
					exists(select 1 from #tmpPriceTours t where t.to_key = tt.to_key)

				open tblCursor

				fetch next from tblCursor into @tokey, @cnkey, @ctkey
				while @@fetch_status = 0
				begin	
					set @tableName = dbo.mwGetPriceTableName(@cnkey, @ctkey)
					IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(@tableName) AND type in (N'U'))	
					BEGIN
						set @sql = 'update ' + @tableName + ' with(rowlock) set pt_isenabled = 0 where pt_tourkey = ' + ltrim(str(@tokey))
						exec (@sql)
					END
					fetch next from tblCursor into @tokey, @cnkey, @ctkey
				end

				close tblCursor
				deallocate tblCursor
			end

			update mwSpoDataTable with(rowlock)
			set sd_isenabled = 0
			from inserted i inner join deleted d on i.to_key = d.to_key			
			where sd_tourkey = i.to_key
				and i.to_isenabled <> d.to_isenabled and i.to_isenabled = 0	

		end
	end
end

GO
/*********************************************************************/
/* end T_TP_Tours_mwUpdatePriceTourEnabled.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_TurListDelete.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_TurListDelete]'))
DROP TRIGGER [dbo].[T_TurListDelete]
GO

CREATE TRIGGER [dbo].[T_TurListDelete]
ON [dbo].[tbl_TurList] 
FOR DELETE
AS
--<VERSION>2009.2.19.0</VERSION>
--<DATE>2013-04-24</DATE>
IF @@ROWCOUNT > 0
BEGIN
	DECLARE @TL_Key int
	DECLARE @xKey int
	DECLARE @costOfferPacketsCount int
	
    DECLARE cur_TurList CURSOR FOR SELECT TL_Key FROM DELETED 
	OPEN cur_TurList
		FETCH NEXT FROM cur_TurList INTO @TL_Key
		WHILE @@FETCH_STATUS = 0
			BEGIN 
				create table #CostOfferKeys (xKey int)
				
				insert into #CostOfferKeys
				select COP_COId from CostOfferPackets where COP_PKKey = @TL_Key
				
				DECLARE cur_CostOfferKeys CURSOR FOR SELECT xKey FROM #CostOfferKeys
				OPEN cur_CostOfferKeys  		
				FETCH NEXT FROM cur_CostOfferKeys INTO @xKey
				WHILE @@FETCH_STATUS = 0
					BEGIN 
						set @costOfferPacketsCount = (select count(*) from costofferpackets where cop_coid = @xKey and cop_pkkey = @tl_key)
						
						delete from costofferpackets where cop_coid = @xKey and cop_pkkey = @tl_key
						
						if @costOfferPacketsCount = 1
						begin
							-- так как не на все таблицы, ссылающиеся на costoffers, установлено правило Delete rule: CASCASE,
							-- то предварительно удалим записи в ссылающихся таблицах
							exec RemoveReferences 'costoffers', @xKey, 1
							delete from costoffers where co_id = @xKey
						end
						else
							update costoffers set co_pkkey = (select top 1 cop_pkkey from costofferpackets where cop_coid = @xKey)
						
						FETCH NEXT FROM cur_CostOfferKeys INTO @xKey
					END
				CLOSE cur_CostOfferKeys
				DEALLOCATE cur_CostOfferKeys
				
				drop table #CostOfferKeys
				
				FETCH NEXT FROM cur_TurList INTO @TL_Key
			END
			
	CLOSE cur_TurList
	DEALLOCATE cur_TurList
END
go
/*********************************************************************/
/* end T_TurListDelete.sql */
/*********************************************************************/

/*********************************************************************/
/* begin T_UpdDogListQuota.sql */
/*********************************************************************/
IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'[dbo].[T_UpdDogListQuota]'))
	DROP TRIGGER [dbo].[T_UpdDogListQuota]
GO

CREATE TRIGGER [dbo].[T_UpdDogListQuota] 
ON [dbo].[tbl_DogovorList]
AFTER INSERT, UPDATE, DELETE
AS
--<VERSION>2009.2.19.1</VERSION>
--<DATE>2013-04-29</DATE>

-- тип триггера (DEL - удаление, INS - вставка, UPD - обновление)
-- если включена настройка то выходим, рассадка теперь работает по другому
IF (EXISTS (SELECT TOP 1 1
		    FROM SystemSettings WITH (NOLOCK)
		    WHERE SS_ParmName = 'NewSetToQuota' AND SS_ParmValue = 1))
BEGIN
	RETURN;
END


DECLARE @DLKey int, @DGKey int, @O_DLSVKey int, @O_DLCode int, @O_DLSubcode1 int, @O_DLDateBeg datetime, @O_DLDateEnd datetime, @O_DLNMen int, @O_DLPartnerKey int, @O_DLControl int, 
		@N_DLSVKey int, @N_DLCode int, @N_DLSubcode1 int, @N_DLDateBeg datetime, @N_DLDateEnd datetime, @N_DLNMen int, @N_DLPartnerKey int, @N_DLControl int,
		@Date datetime, @RLID int, @RPID int,
		@HRIsMain smallint, @RMKey int, @RCKey int, @ACKey int,
		@RMPlacesMain smallint, @RMPlacesEx smallint,
		@ACPlacesMain smallint, @ACPlacesEx smallint, @ACPerRoom smallint,
		@RLPlacesMain smallint, @RLPlacesEx smallint, @RLCount smallint, 
		@AC_FreeMainPlacesCount smallint, @AC_FreeExPlacesCount smallint,
		@RL_Use smallint, @From int, --@SDPlace smallint, 
		@nDelCount smallint, @nInsCount smallint, @Mod varchar(3), @SetToNewQuota bit,
		@CurrentPlaceIsEx bit, @RL_FreeMainPlacesCount smallint, @RL_FreeExPlacesCount smallint,
		@Days smallint, @RPCount smallint, @NeedPlacesForMen smallint, @TUKey int,
		@SVQUOTED smallint

-- количество удаляемых записей
SELECT @nDelCount = COUNT(*)
FROM DELETED
-- количество вставляемых записей
SELECT @nInsCount = COUNT(*)
FROM INSERTED
SET @SetToNewQuota = 0
IF (@nInsCount = 0) -- если нет удаляемых записей, значит есть только вставляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR 
    FOR 
    SELECT O.DL_Key, O.DL_DGKey, O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey, 
    		O.DL_Control, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
    FROM DELETED O
	SET @Mod = 'DEL'
END
ELSE IF (@nDelCount = 0) -- если нет вставляемых записей, есть только удаляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey,
			null, null, null, null, null, null, null, null,
			N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey, N.DL_Control
    FROM	INSERTED N 
	SET @Mod = 'INS'
END
ELSE -- если есть и удаляемые и вставляемые записи
BEGIN
    DECLARE cur_DogovorListChanged2 CURSOR FOR 
    SELECT 	N.DL_Key, N.DL_DGKey, 
			O.DL_SvKey, O.DL_Code, O.DL_SubCode1, O.DL_DateBeg, O.DL_DateEnd, O.DL_NMen, O.DL_PartnerKey, O.DL_Control, 
			N.DL_SvKey, N.DL_Code, N.DL_SubCode1, N.DL_DateBeg, N.DL_DateEnd, N.DL_NMen, N.DL_PartnerKey, N.DL_Control
    FROM DELETED O, INSERTED N 
    WHERE N.DL_Key = O.DL_Key
	SET @Mod = 'UPD'
END

OPEN cur_DogovorListChanged2
FETCH NEXT 
FROM cur_DogovorListChanged2 
INTO @DLKey, @DGKey, @O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey, @O_DLControl, 
	@N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey, @N_DLControl
WHILE @@FETCH_STATUS = 0
BEGIN
	--18-10-2012 saifullina
	--при удалении услуги в путевке или аннулировании путевки -> удаляем путевку -> высвобождаем квоты
	IF (@N_DLDateBeg < '01-01-1901' AND @O_DLDateBeg >= '01-01-1901')
	BEGIN
		SET @Mod = 'DEL'
	END
	IF (@Mod = 'DEL'
		OR (@Mod = 'UPD' AND (ISNULL(@O_DLSVKey, 0) != ISNULL(@N_DLSVKey, 0))
			OR (ISNULL(@O_DLCode, 0) != ISNULL(@N_DLCode, 0))
			OR (ISNULL(@O_DLSubCode1, 0) != ISNULL(@N_DLSubCode1, 0))
			OR (ISNULL(@O_DLPartnerKey, 0) != ISNULL(@N_DLPartnerKey, 0))
			OR (ISNULL(@O_DLDateBeg, 0) != ISNULL(@N_DLDateBeg, 0))
			OR (ISNULL(@O_DLDateEnd, 0) != ISNULL(@N_DLDateEnd, 0))))
	BEGIN	
		DELETE
		FROM ServiceByDate
		WHERE SD_DLKey = @DLKey

		SET @SetToNewQuota = 1
	END
		
	SELECT @SVQUOTED = ISNULL(SV_Quoted, 0)
	FROM [Service]
	WHERE SV_KEY = @N_DLSVKey

	EXEC InsMasterEvent 3, @DLKey

	IF ((@O_DLSVKey IN (3, 7)
	    AND (@N_DLCode != @O_DLCode
	        OR @N_DLSubCode1 != @O_DLSubCode1
	        OR @O_DLDateBeg != @N_DLDateBeg
	        OR @O_DLDateEnd != @N_DLDateEnd))
		OR (@O_DLSVKey IN (1, 2, 4) 
		    AND @O_DLDateBeg != @N_DLDateBeg))
	BEGIN
		UPDATE TuristService
		SET TU_NUMROOM = ''
		WHERE TU_DLKEY = @DLKey
	END

	IF (@N_DLDateBeg < '01-JAN-1901' AND @O_DLDateBeg >= '01-JAN-1901')
	BEGIN
		SET @Mod = 'DEL'
	END

	IF (@N_DLDateBeg > '01-JAN-1901' AND @O_DLDateBeg <= '01-JAN-1901')
	BEGIN
		SET @SetToNewQuota = 1
	END

	IF (@Mod = 'UPD' AND ISNULL(@O_DLNMen, 0) = 0 AND ISNULL(@N_DLNMen, 0) > 0)
	BEGIN
		SET @Mod = 'INS'
	END
	-- если ВЫКЛЮЧЕНА настройка то запускаем всю эту дребедень, это старая рассадка в квоту
	-- ИЛИ произошла ошибка при посадке новым сервисом, то запускаем старую рассадку и проверку
	if (exists (select top 1 1 from SystemSettings where SS_ParmName = 'NewSetToQuota' and SS_ParmValue = 0))
	BEGIN
		print 'Старая рассадка'
		--изменился период действия услуги
		IF @Mod = 'UPD' 
			and (
				@SetToNewQuota!=1 
				and (
					(@O_DLDateBeg != @N_DLDateBeg) 
					or (@O_DLDateEnd != @N_DLDateEnd)
					)
				)
		BEGIN
			IF (@N_DLDateBeg > @O_DLDateEnd OR @N_DLDateEnd < @O_DLDateBeg)
			BEGIN
				DELETE
				FROM ServiceByDate
				WHERE SD_DLKey = @DLKey
				SET @SetToNewQuota=1
			END
			-- для услуг имеющих продолжительность сохраняем информацию о квотировании в рамках периода
			ELSE
			BEGIN
				--если теперь услуга заканчивается раньше, чем до этого начиналась
				IF (@N_DLDateBeg < @O_DLDateBeg)
				BEGIN
					IF (@N_DLDateEnd < @O_DLDateBeg)
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @N_DLDateEnd) + 1
					END
					ELSE
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @O_DLDateBeg)
					END
						
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY,NU_ID-1,@N_DLDateBeg), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3 
					FROM ServiceByDate, Numbers
					WHERE (NU_ID BETWEEN 1 AND @Days) AND SD_Date = @O_DLDateBeg AND SD_DLKey = @DLKey
				END
				
				--если теперь услуга начинается позже, чем до этого заканчивалась
				IF (@N_DLDateEnd > @O_DLDateEnd)
				BEGIN
					IF (@N_DLDateBeg > @O_DLDateEnd)
					BEGIN
						SET @Days = DATEDIFF(DAY, @N_DLDateBeg, @N_DLDateEnd) + 1
					END
					ELSE
					BEGIN
						SET @Days = DATEDIFF(DAY, @O_DLDateEnd, @N_DLDateEnd)
					END
						
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, SD_State)
					SELECT DATEADD(DAY, - NU_ID + 1, @N_DLDateEnd), SD_DLKey, SD_RLID, SD_TUKey, SD_RPID, @SVQUOTED + 3
					FROM ServiceByDate, Numbers
					WHERE (NU_ID BETWEEN 1 AND @Days) AND SD_Date = @O_DLDateEnd AND SD_DLKey = @DLKey
				END
				
				
				IF (@N_DLDateBeg > @O_DLDateBeg)
				BEGIN
					DELETE
					FROM ServiceByDate
					WHERE SD_DLKey = @DLKey AND SD_Date < @N_DLDateBeg
				END
				IF (@N_DLDateEnd < @O_DLDateEnd)
				BEGIN
					DELETE
					FROM ServiceByDate
					WHERE SD_DLKey = @DLKey AND SD_Date > @N_DLDateEnd
				END
			END
			
			-- если эта услуга на продолжительность
			-- и если услуга сидела на квоте с продолжительностью
			IF (EXISTS (SELECT 1
			            FROM [Service]
			            WHERE SV_KEY = @N_DLSVKey AND ISNULL(SV_ISDURATION, 0) = 1)
			    AND EXISTS (
			        SELECT 1
			        FROM ServiceByDate
			        WHERE SD_DLKey = @DLKey
			        AND EXISTS (
			            SELECT 1
			            FROM QuotaParts
			            WHERE QP_ID = SD_QPID AND QP_Durations IS NOT NULL)))
			BEGIN
				-- пересаживаем всю услугу
				EXEC DogListToQuotas @DLKey, NULL, NULL, NULL, NULL, @N_DLDateBeg, @N_DLDateEnd, NULL, NULL, @OldSetToQuota = 1
			END
		END
		SET @NeedPlacesForMen=0
		SET @From = CAST(@N_DLDateBeg as int)		
		-- если изменилось количество человек		
		IF @Mod = 'UPD' AND (@SetToNewQuota != 1 AND ISNULL(@O_DLNMen, 0) != ISNULL(@N_DLNMen, 0))
		BEGIN
		
			select *, 0 as xSD_STATE
			into #ServiceByDate
			from ServiceByDate
			where SD_DLKey = @DLKey
			
			SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

			-- если новое число туристов меньше, чем было до этого (@O_DLNMen > @N_DLNMen)
			if ISNULL(@O_DLNMen,0) > ISNULL(@N_DLNMen,0)
			BEGIN
				while (SELECT count(1) FROM #ServiceByDate WHERE SD_DLKey=@DLKey and SD_Date=@N_DLDateBeg) > ISNULL(@N_DLNMen,0)
				BEGIN
					if @N_DLSVKey = 3 --для проживания отдельная ветка
					BEGIN					
						SELECT TOP 1 @RLID = SD_RLID, @RPCount = count(SD_ID) FROM #ServiceByDate WHERE SD_DLKey = @DLKey and SD_TUKey is null and SD_Date = @N_DLDateBeg
						GROUP BY SD_RLID
						ORDER BY 2
						
						SELECT TOP 1 @RPID = SD_RPID FROM #ServiceByDate WHERE SD_DLKey = @DLKey and SD_RLID = @RLID and SD_TUKey is null
						DELETE FROM #ServiceByDate WHERE SD_DLKey = @DLKey and SD_RLID = @RLID and ISNULL(SD_RPID,0) = ISNULL(@RPID,0) and SD_TUKey is null
					END
					ELSE
					BEGIN
						--обязательно!!! NULL туриста вперед 
						SELECT TOP 1 @RPID = SD_RPID FROM #ServiceByDate WHERE SD_DLKey = @DLKey order by SD_TUKey
						DELETE FROM #ServiceByDate WHERE SD_DLKey = @DLKey and ISNULL(SD_RPID,0) = ISNULL(@RPID,0)
					END
				END
				
				delete from ServiceByDate where SD_DLKey = @DLKey and SD_ID not in (select x.SD_ID from #ServiceByDate as x)
			END
			-- если новое число туристов больше, чем было до этого (@O_DLNMen < @N_DLNMen)
			ELSE
			BEGIN
				if @N_DLSVKey=3 --для проживания отдельная ветка
				BEGIN				
					SELECT	@HRIsMain=AC_MAIN, @ACPlacesMain=ISNULL(AC_NRealPlaces,0), @ACPlacesEx=ISNULL(AC_NMenExBed,0), @ACPerRoom=ISNULL(AC_PerRoom,0)
					FROM AccmdMenType
					WHERE AC_Key=(SELECT HR_ACKey From HotelRooms WHERE HR_Key=@N_DLSubCode1)
					IF @HRIsMain = 1 and @ACPlacesMain = 0 and @ACPlacesEx = 0
						set @ACPlacesMain = 1
					ELSE IF @HRIsMain = 0 and @ACPlacesMain = 0 and @ACPlacesEx = 0
						set @ACPlacesEx = 1
					--есть 3 варианта размещения: только основные, только дополнительные, основные и дополнительные
					--в первых 2-х вариантах сначала занимаем свободные уже существующие места данного типа в номерах этой услуги, в последнем занимаем все свободные места
					if @ACPlacesMain>0
						WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0))
						BEGIN
							select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=0
							INSERT INTO #ServiceByDate (xSD_STATE, SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
								SELECT 1, CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
								FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
							SET @NeedPlacesForMen=@NeedPlacesForMen-1
						END
					if @ACPlacesEx>0
						WHILE (@NeedPlacesForMen>0 and EXISTS(select RP_ID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1))
						BEGIN
							select TOP 1 @RPID=RP_ID,@RLID=RP_RLID FROM RoomPlaces where RP_RLID in (SELECT SD_RLID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_ID not in (SELECT SD_RPID FROM #ServicebyDate where SD_DLKey=@DLKey) and RP_Type=1
							INSERT INTO #ServiceByDate (xSD_STATE, SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_State)	
								SELECT 1, CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RLID, @RPID, 4
								FROM NUMBERS as N1 WHERE N1.NU_ID between 1 and CAST(@N_DLDateEnd as int)-@From+1
							SET @NeedPlacesForMen=@NeedPlacesForMen-1
						END
				END
				
				insert into ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_QPID, SD_TUKey, SD_RPID, SD_State, SD_QPIDOld)
				select x.SD_Date, x.SD_DLKey, x.SD_RLID, x.SD_QPID, x.SD_TUKey, x.SD_RPID, x.SD_State, x.SD_QPIDOld
				from #ServiceByDate as x
				where x.xSD_STATE = 1
				
			END
			
			drop table #ServiceByDate
		END

		IF @Mod = 'INS'
			OR (@Mod = 'UPD' AND @SetToNewQuota = 1)
			OR @NeedPlacesForMen > 0
		BEGIN		
			-- для проживания отдельная ветка
			IF @N_DLSVKey = 3
			BEGIN
				If @NeedPlacesForMen>0
				BEGIN
				SELECT TOP 1 @RLPlacesMain = RL_NPlaces, @RLPlacesEx = RL_NPlacesEx, @RMKey = RL_RMKey, @RCKey = RL_RCKey
				FROM RoomNumberLists, ServiceByDate
				WHERE RL_ID = SD_RLID
					AND SD_DLKey = @DLKey
				END
				ELSE
				BEGIN
					SELECT @HRIsMain = HR_MAIN, @RMKey = HR_RMKEY, @RCKey = HR_RCKEY, @ACKey = HR_ACKEY, @RMPlacesMain = RM_NPlaces, 
					@RMPlacesEx = RM_NPlacesEx, @ACPlacesMain = ISNULL(AC_NRealPlaces, 0), @ACPlacesEx = ISNULL(AC_NMenExBed, 0), 
					@ACPerRoom = ISNULL(AC_PerRoom, 0)
					FROM HotelRooms, Rooms, AccmdMenType
					WHERE HR_Key = @N_DLSubcode1
						AND RM_Key = HR_RMKEY
						AND AC_KEY = HR_ACKEY
					IF @ACPerRoom = 1
						OR (
							ISNULL(@RMPlacesMain, 0) = 0
							AND ISNULL(@RMPlacesEx, 0) = 0
							)
					BEGIN
						SET @RLPlacesMain = @ACPlacesMain
						SET @RLPlacesEx = ISNULL(@ACPlacesEx,0)
					END
					ELSE
					BEGIN
						IF @HRIsMain = 1
							AND @ACPlacesMain = 0
							AND @ACPlacesEx = 0
						BEGIN
							SET @ACPlacesMain = 1
						END
						ELSE IF @HRIsMain = 0
							AND @ACPlacesMain = 0
							AND @ACPlacesEx = 0
						BEGIN
							SET @ACPlacesEx = 1
						END

						SET @RLPlacesMain = @RMPlacesMain
						SET @RLPlacesEx = ISNULL(@RMPlacesEx, 0)
					END

					-- если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
					IF @Mod = 'UPD'
						AND @SetToNewQuota = 1
					BEGIN
						SET @NeedPlacesForMen = ISNULL(@N_DLNMen, 0)
					END
					ELSE
					BEGIN
						SET @NeedPlacesForMen = ISNULL(@N_DLNMen, 0) - ISNULL(@O_DLNMen, 0)
					END
				END
				
				SET @RLID = 0
				SET @AC_FreeMainPlacesCount = 0
				SET @AC_FreeExPlacesCount = 0
				SET @RL_FreeMainPlacesCount = 0
				SET @RL_FreeExPlacesCount = 0
				-- пока не распределили всех человек
				WHILE (@NeedPlacesForMen>0)
				BEGIN
					--если в последнем номере кончились места, то выставляем признак @RLID = 0
					IF @AC_FreeMainPlacesCount = 0
						AND @AC_FreeExPlacesCount = 0
					BEGIN
						SET @AC_FreeMainPlacesCount = @ACPlacesMain
						SET @AC_FreeExPlacesCount = @ACPlacesEx
						--создаем новый номер, всегда когда есть хоть кто-то на основном месте ???
						IF (@AC_FreeMainPlacesCount > @RL_FreeMainPlacesCount)
							OR (@AC_FreeExPlacesCount > @RL_FreeExPlacesCount)
						BEGIN
							--создаем новый номер для каждой услуги, если размещение на номер.
							IF @ACPerRoom>0
							BEGIN			
								INSERT INTO RoomNumberLists (RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey
									)
								VALUES (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)

								SET @RLID = SCOPE_IDENTITY()

								INSERT INTO RoomPlaces (RP_RLID, RP_Type)
								SELECT @RLID, CASE 
										WHEN NU_ID > @RLPlacesMain
											THEN 1
										ELSE 0
										END
								FROM NUMBERS
								WHERE NU_ID BETWEEN 1
										AND (@RLPlacesMain + @RLPlacesEx)
								set @RPID=SCOPE_IDENTITY()-@RLPlacesMain-@RLPlacesEx+1
								SET @RL_FreeMainPlacesCount = @RLPlacesMain
								SET @RL_FreeExPlacesCount = @RLPlacesEx
							END
							ELSE
							BEGIN
								-- ищем к кому подселиться в данной путевке, если не находим, то прийдется создавать новый номер
								set @RPID = null
								SELECT TOP 1 @RPID = RP_ID, @RLID = RP_RLID
								FROM RoomPlaces
								WHERE RP_Type = CASE 
										WHEN @ACPlacesMain > 0
											THEN 0
										ELSE 1
										END
									AND RP_RLID IN (
										SELECT SD_RLID
										FROM ServiceByDate, DogovorList, RoomNumberLists
										WHERE SD_DLKey = DL_Key
											AND DL_DGKey = @DGKey
											AND RL_ID = SD_RLID
											AND DL_SVKey = @N_DLSVKey
											AND DL_Code = @N_DLCode
											AND DL_DateBeg = @N_DLDateBeg
											AND DL_DateEnd = @N_DLDateEnd
											AND RL_RMKey = @RMKey
											AND RL_RCKey = @RCKey
										)
									AND NOT EXISTS (
										SELECT SD_RPID
										FROM ServiceByDate
										WHERE SD_RLID = RP_RLID
											AND SD_RPID = RP_ID
										)
								ORDER BY RP_ID
								-- надо создавать новый номер даже для дополнительного размещения
								IF @RPID IS NULL
								BEGIN
									INSERT INTO RoomNumberLists (RL_NPlaces, RL_NPlacesEx, RL_RMKey, RL_RCKey)
									VALUES (@RLPlacesMain, @RLPlacesEx, @RMKey, @RCKey)

									SET @RLID = SCOPE_IDENTITY()

									INSERT INTO RoomPlaces (RP_RLID, RP_Type)
									SELECT @RLID, CASE 
											WHEN NU_ID > @RLPlacesMain
												THEN 1
											ELSE 0
											END
									FROM NUMBERS
									WHERE NU_ID BETWEEN 1
											AND (@RLPlacesMain + @RLPlacesEx)

									SET @RPID = SCOPE_IDENTITY()
									-- Task 9853 29.11.2012 kolbeshkin: неправильное расселение при бронировании
									-- неправильно вычислять место как последнее созданное минус кол-во основных и доп мест + 1,
									-- лучше взять первое свободное место в комнате с ID = @RLID
									SET @RPID = (
									    SELECT MIN(rp_id)
										FROM RoomPlaces
										WHERE RP_RLID = @RLID
										    AND NOT EXISTS (
											    SELECT 1
												FROM ServiceByDate
												WHERE SD_RLID = @RLID
												    AND SD_RPID = RP_ID))
									SET @RL_FreeMainPlacesCount = @RLPlacesMain
									SET @RL_FreeExPlacesCount = @RLPlacesEx
								END
							END
						END
					END
					
					-- смотрим есть ли в текущем номере свободные основные места
					IF @AC_FreeMainPlacesCount > 0
					BEGIN
						SET @AC_FreeMainPlacesCount = @AC_FreeMainPlacesCount - 1
						SET @RL_FreeMainPlacesCount = @RL_FreeMainPlacesCount - 1
						SET @CurrentPlaceIsEx=0
					END
					--если ОСНОВНЫХ мест в номере уже нет, то может посадим на ДОПОЛНИТЕЛЬНОЕ? 
					ELSE
						IF @AC_FreeExPlacesCount > 0
						BEGIN
							SET @AC_FreeExPlacesCount = @AC_FreeExPlacesCount - 1
							SET @RL_FreeExPlacesCount = @RL_FreeExPlacesCount - 1
							SET @CurrentPlaceIsEx=1
						END

					SET @TUKey = NULL

					SELECT @TUKey = TU_TUKey
					FROM dbo.TuristService
					WHERE TU_DLKey = @DLKey
						AND TU_TUKey NOT IN (
							SELECT SD_TUKey
							FROM ServiceByDate
							WHERE SD_DLKey = @DLKey
							)
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RLID, SD_RPID, SD_TUKey)
					SELECT CAST((N1.NU_ID + @From - 1) AS DATETIME), @DLKey, @RLID, @RPID, @TUKey
					FROM NUMBERS AS N1
					WHERE N1.NU_ID BETWEEN 1
							AND CAST(@N_DLDateEnd AS INT) - @From + 1
					SET @NeedPlacesForMen=@NeedPlacesForMen-1
					SET @RPID=@RPID+1
				END		
			END
			-- для всех услуг кроме проживания
			ELSE
			BEGIN
				IF @Mod = 'UPD'
					AND @SetToNewQuota = 1
					-- если услуга полностью ставится на квоту (из-за глобальных изменений (было удаление из ServiceByDate))
						SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)
				ELSE
						SET @NeedPlacesForMen=ISNULL(@N_DLNMen,0)-ISNULL(@O_DLNMen,0)

				while(@NeedPlacesForMen > 0)
				BEGIN
					set @TUKey=null

					SELECT @TUKey = TU_TUKey
					FROM dbo.TuristService
					WHERE TU_DLKey = @DLKey
						AND TU_TUKey NOT IN (
							SELECT SD_TUKey
							FROM ServiceByDate
							WHERE SD_DLKey = @DLKey
							)
					INSERT INTO RoomPlaces (RP_RLID, RP_Type)
					VALUES (0, 0)
					set @RPID=SCOPE_IDENTITY()				
					INSERT INTO ServiceByDate (SD_Date, SD_DLKey, SD_RPID, SD_TUKey)	
						SELECT CAST((N1.NU_ID+@From-1) as datetime), @DLKey, @RPID, @TUKey
					FROM NUMBERS AS N1
					WHERE N1.NU_ID BETWEEN 1
							AND CAST(@N_DLDateEnd AS INT) - @From + 1
					SET @NeedPlacesForMen = @NeedPlacesForMen - 1
				END
			END

			exec dbo.DogListToQuotas @DLKey, @OldSetToQuota = 1
		END
	END
	
	FETCH NEXT 
	FROM cur_DogovorListChanged2 
	INTO @DLKey, @DGKey, @O_DLSVKey, @O_DLCode, @O_DLSubCode1, @O_DLDateBeg, @O_DLDateEnd, @O_DLNMen, @O_DLPartnerKey, 
		@O_DLControl, @N_DLSVKey, @N_DLCode, @N_DLSubCode1, @N_DLDateBeg, @N_DLDateEnd, @N_DLNMen, @N_DLPartnerKey, @N_DLControl
END
CLOSE cur_DogovorListChanged2
DEALLOCATE cur_DogovorListChanged2
GO
/*********************************************************************/
/* end T_UpdDogListQuota.sql */
/*********************************************************************/
update [dbo].[setting] set st_version = '9.2.19.0', st_moduledate = convert(datetime, '2013-05-23', 120),  st_financeversion = '9.2.19.0', st_financedate = convert(datetime, '2013-05-23', 120) 
 GO
 UPDATE dbo.SystemSettings SET SS_ParmValue='2013-05-23' WHERE SS_ParmName='SYSScriptDate'
 GO